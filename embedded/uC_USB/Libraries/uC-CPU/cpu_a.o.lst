   1              	# 1 "Libraries/uC-CPU/cpu_a.asm"
   1              	/**************************************************************************************************
   1              	...
   0              	
   0              	
   2              	                                                uC/CPU
   3              	                                    CPU CONFIGURATION & PORT LAYER
   4              	
   5              	                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
   6              	
   7              	               All rights reserved.  Protected by international copyright laws.
   8              	
   9              	               uC/CPU is provided in source form to registered licensees ONLY.  It is
  10              	               illegal to distribute this source code to any third party unless you receive
  11              	               written permission by an authorized Micrium representative.  Knowledge of
  12              	               the source code may NOT be used to develop a similar product.
  13              	
  14              	               Please help us continue to provide the Embedded community with the finest
  15              	               software available.  Your honesty is greatly appreciated.
  16              	
  17              	               You can contact us at www.micrium.com.
  18              	***************************************************************************************************
  19              	
  20              	/**************************************************************************************************
  21              	
  22              	                                            CPU PORT FILE
  23              	
  24              	                                            ARM-Cortex-M3
  25              	                                      RealView Development Suite
  26              	                            RealView Microcontroller Development Kit (MDK)
  27              	                                       ARM Developer Suite (ADS)
  28              	                                            Keil uVision
  29              	
  30              	 Filename      : cpu_a.asm
  31              	 Version       : V1.28.00.00
  32              	 Programmer(s) : BAN
  33              	***************************************************************************************************
  34              	
  35              	
  36              	/**************************************************************************************************
  37              	                                           PUBLIC FUNCTIONS
  38              	***************************************************************************************************
  39              			.text										/*   Functions declared in this file. */
  40              	        .global  CPU_IntDis
  41              	        .global  CPU_IntEn
  42              	
  43              	        .global  CPU_SR_Save
  44              	        .global  CPU_SR_Restore
  45              	
  46              	        .global  CPU_CntLeadZeros
  47              	        .global  CPU_RevBits
  48              	
  49              	        .global CPU_WaitForInt
  50              	        .global CPU_WaitForExcept
  51              	
  52              	
  53              	/**************************************************************************************************
  54              	                                      CODE GENERATION DIRECTIVES
  55              	***************************************************************************************************
  56              	
  57              			.section .text  /* , "ax" */
  58              	        /* CODE, READONLY */
  59              	
  60              	        .align 2
  61              	        .thumb
  62              	
  63              	        /* REQUIRE8  */
  64              	        /* PRESERVE8 */
  65              	
  66              	
  67              	/**************************************************************************************************
  68              	                                    DISABLE and ENABLE INTERRUPTS
  69              	
  70              	 Description : Disable/Enable interrupts.
  71              	
  72              	 Prototypes  : void  CPU_IntDis(void);
  73              	               void  CPU_IntEn (void);
  74              	***************************************************************************************************
  75              	
  76              	CPU_IntDis:
  77 0000 72B6     	        CPSID   I
  78 0002 7047     	        BX      LR
  79              	
  80              	
  81              	CPU_IntEn:
  82 0004 62B6     	        CPSIE   I
  83 0006 7047     	        BX      LR
  84              	
  85              	
  86              	/**************************************************************************************************
  87              	                                      CRITICAL SECTION FUNCTIONS
  88              	
  89              	 Description : Disable/Enable interrupts by preserving the state of interrupts.  Generally speaking
  90              	               state of the interrupt disable flag is stored in the local variable 'cpu_sr' & inter
  91              	               are then disabled ('cpu_sr' is allocated in all functions that need to disable inter
  92              	               The previous interrupt state is restored by copying 'cpu_sr' into the CPU's status r
  93              	
  94              	 Prototypes  : CPU_SR  CPU_SR_Save   (void);
  95              	               void    CPU_SR_Restore(CPU_SR  cpu_sr);
  96              	
  97              	 Note(s)     : (1) These functions are used in general like this :
  98              	
  99              	                       void  Task (void  *p_arg)
 100              	                       {
 101              	                           CPU_SR_ALLOC();                     Allocate storage for CPU status regi
 102              	                               :
 103              	                               :
 104              	                           CPU_CRITICAL_ENTER();               cpu_sr = CPU_SR_Save();
 105              	                               :
 106              	                               :
 107              	                           CPU_CRITICAL_EXIT();                CPU_SR_Restore(cpu_sr);
 108              	                               :
 109              	                       }
 110              	***************************************************************************************************
 111              	
 112              	CPU_SR_Save:
 113 0008 EFF31080 	        MRS     R0, PRIMASK                     // Set prio int mask to mask all (except faults)
 114 000c 72B6     	        CPSID   I
 115 000e 7047     	        BX      LR
 116              	
 117              	
 118              	CPU_SR_Restore:                                  // See Note #2.
 119 0010 80F31088 	        MSR     PRIMASK, R0
 120 0014 7047     	        BX      LR
 121              	
 122              	
 123              	/**************************************************************************************************
 124              	                                         CPU_CntLeadZeros()
 125              	                                        COUNT LEADING ZEROS
 126              	
 127              	 Description : Counts the number of contiguous, most-significant, leading zero bits before the firs
 128              	                   binary one bit in a data value.
 129              	
 130              	 Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU_DATA  val);
 131              	
 132              	 Argument(s) : val         Data value to count leading zero bits.
 133              	
 134              	 Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
 135              	
 136              	 Caller(s)   : Application.
 137              	
 138              	               This function is an INTERNAL CPU module function but MAY be called by application fu
 139              	
 140              	 Note(s)     : (1) If the argument is zero, the value 32 is returned.
 141              	
 142              	               (2) MUST be implemented in cpu_a.asm if and only if CPU_CFG_LEAD_ZEROS_ASM_PRESENT i
 143              	                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
 144              	***************************************************************************************************
 145              	
 146              	CPU_CntLeadZeros:
 147 0016 B0FA80F0 	        CLZ     R0, R0                          // Count leading zeros
 148 001a 7047     	        BX      LR
 149              	
 150              	
 151              	/**************************************************************************************************
 152              	                                             REVERSE BITS
 153              	
 154              	 Description : Reverses the bits in the argument.
 155              	
 156              	 Prototypes  : CPU_DATA  CPU_RevBits (CPU_DATA  val)
 157              	
 158              	 Argument(s) : val     variable to reverse
 159              	***************************************************************************************************
 160              	
 161              	CPU_RevBits:
 162 001c 90FAA0F0 	        RBIT    R0, R0                          // Reverse bits
 163 0020 7047     	        BX      LR
 164              	
 165              	
 166              	/**************************************************************************************************
 167              	                                         WAIT FOR INTERRUPT
 168              	
 169              	 Description : Enters sleep state, which will be exited when an interrupt is received.
 170              	
 171              	 Prototypes  : void  CPU_WaitForInt (void)
 172              	
 173              	 Argument(s) : none.
 174              	***************************************************************************************************
 175              	
 176              	CPU_WaitForInt:
 177 0022 30BF     	        WFI                                     // Wait for interrupt
 178 0024 7047     	        BX      LR
 179              	
 180              	
 181              	/**************************************************************************************************
 182              	                                         WAIT FOR EXCEPTION
 183              	
 184              	 Description : Enters sleep state, which will be exited when an exception is received.
 185              	
 186              	 Prototypes  : void  CPU_WaitForExcept (void)
 187              	
 188              	 Argument(s) : none.
 189              	***************************************************************************************************
 190              	
 191              	CPU_WaitForExcept:
 192 0026 20BF     	        WFE                                     // Wait for exception
 193 0028 7047     	        BX      LR
 194              	
 195              	
 196              	/**************************************************************************************************
 197              	                                     CPU ASSEMBLY PORT FILE END
 198              	***************************************************************************************************
 199              	
 200 002a 00BF     		.end
DEFINED SYMBOLS
Libraries/uC-CPU/cpu_a.asm:76     .text:00000000 CPU_IntDis
Libraries/uC-CPU/cpu_a.asm:81     .text:00000004 CPU_IntEn
Libraries/uC-CPU/cpu_a.asm:112    .text:00000008 CPU_SR_Save
Libraries/uC-CPU/cpu_a.asm:118    .text:00000010 CPU_SR_Restore
Libraries/uC-CPU/cpu_a.asm:146    .text:00000016 CPU_CntLeadZeros
Libraries/uC-CPU/cpu_a.asm:161    .text:0000001c CPU_RevBits
Libraries/uC-CPU/cpu_a.asm:176    .text:00000022 CPU_WaitForInt
Libraries/uC-CPU/cpu_a.asm:191    .text:00000026 CPU_WaitForExcept
Libraries/uC-CPU/cpu_a.asm:60     .text:00000000 $t
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
