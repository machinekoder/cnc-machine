   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"bsp_lcd.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	BSP_LCD_Ctxt:
  21 0000 00000000 		.space	72
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.section	.rodata
  23              		.align	2
  24              	.LC0:
  25 0000 4C434420 		.ascii	"LCD lock\000"
  25      6C6F636B 
  25      00
  26 0009 000000   		.text
  27              		.align	2
  28              		.global	BSP_LCD_Init
  29              		.thumb
  30              		.thumb_func
  32              	BSP_LCD_Init:
  33              	.LFB0:
  34              		.file 1 "Libraries/BSP/LCD/bsp_lcd.c"
   1:Libraries/BSP/LCD/bsp_lcd.c **** /*
   2:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
   3:Libraries/BSP/LCD/bsp_lcd.c **** *                                     MICRIUM BOARD SUPPORT SUPPORT
   4:Libraries/BSP/LCD/bsp_lcd.c **** *
   5:Libraries/BSP/LCD/bsp_lcd.c **** *                          (c) Copyright 2003-2010; Micrium, Inc.; Weston, FL
   6:Libraries/BSP/LCD/bsp_lcd.c **** *
   7:Libraries/BSP/LCD/bsp_lcd.c **** *               All rights reserved.  Protected by international copyright laws.
   8:Libraries/BSP/LCD/bsp_lcd.c **** *               Knowledge of the source code may NOT be used to develop a similar product.
   9:Libraries/BSP/LCD/bsp_lcd.c **** *               Please help us continue to provide the Embedded community with the finest
  10:Libraries/BSP/LCD/bsp_lcd.c **** *               software available.  Your honesty is greatly appreciated.
  11:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  12:Libraries/BSP/LCD/bsp_lcd.c **** */
  13:Libraries/BSP/LCD/bsp_lcd.c **** 
  14:Libraries/BSP/LCD/bsp_lcd.c **** 
  15:Libraries/BSP/LCD/bsp_lcd.c **** /*
  16:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  17:Libraries/BSP/LCD/bsp_lcd.c **** *
  18:Libraries/BSP/LCD/bsp_lcd.c **** *                                          LCD DISPLAY DRIVER
  19:Libraries/BSP/LCD/bsp_lcd.c **** *                                     KEIL MCB1700 DEVELOPMENT KIT
  20:Libraries/BSP/LCD/bsp_lcd.c **** *
  21:Libraries/BSP/LCD/bsp_lcd.c **** * Filename      : bsp_lcd.c
  22:Libraries/BSP/LCD/bsp_lcd.c **** * Version       : V1.00
  23:Libraries/BSP/LCD/bsp_lcd.c **** * Programmer(s) : FT
  24:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  25:Libraries/BSP/LCD/bsp_lcd.c **** */
  26:Libraries/BSP/LCD/bsp_lcd.c **** 
  27:Libraries/BSP/LCD/bsp_lcd.c **** 
  28:Libraries/BSP/LCD/bsp_lcd.c **** /*
  29:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  30:Libraries/BSP/LCD/bsp_lcd.c **** *                                             INCLUDE FILES
  31:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  32:Libraries/BSP/LCD/bsp_lcd.c **** */
  33:Libraries/BSP/LCD/bsp_lcd.c **** 
  34:Libraries/BSP/LCD/bsp_lcd.c **** #ifndef   BSP_LCD_MODULE
  35:Libraries/BSP/LCD/bsp_lcd.c **** #define   BSP_LCD_MODULE
  36:Libraries/BSP/LCD/bsp_lcd.c **** #endif
  37:Libraries/BSP/LCD/bsp_lcd.c **** 
  38:Libraries/BSP/LCD/bsp_lcd.c **** #include  <bsp_lcd.h>
  39:Libraries/BSP/LCD/bsp_lcd.c **** #include  <os.h>
  40:Libraries/BSP/LCD/bsp_lcd.c **** #include  <csp.h>
  41:Libraries/BSP/LCD/bsp_lcd.c **** 
  42:Libraries/BSP/LCD/bsp_lcd.c **** 
  43:Libraries/BSP/LCD/bsp_lcd.c **** /*
  44:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  45:Libraries/BSP/LCD/bsp_lcd.c **** *                                                DEFINES
  46:Libraries/BSP/LCD/bsp_lcd.c **** *
  47:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s) (1): LCD orientation and GRAM configuration:
  48:Libraries/BSP/LCD/bsp_lcd.c **** *
  49:Libraries/BSP/LCD/bsp_lcd.c **** *                             | ------ 240 ------ |
  50:Libraries/BSP/LCD/bsp_lcd.c **** *                             +===================+  ---
  51:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  52:Libraries/BSP/LCD/bsp_lcd.c **** *                GRAM         | ----------------> |   |
  53:Libraries/BSP/LCD/bsp_lcd.c **** *             ADDRES UPDATE   | ----------------> |   |
  54:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  55:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  56:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |  320
  57:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  58:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  59:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  60:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  61:Libraries/BSP/LCD/bsp_lcd.c **** *                             |                   |   |
  62:Libraries/BSP/LCD/bsp_lcd.c **** *                             +===================+  ---
  63:Libraries/BSP/LCD/bsp_lcd.c **** *
  64:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  65:Libraries/BSP/LCD/bsp_lcd.c **** */
  66:Libraries/BSP/LCD/bsp_lcd.c **** 
  67:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_WIDTH                                  240u    /* Screen Width (in pixels)        
  68:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_HEIGHT                                 320u    /* Screen Hight (in pixels)        
  69:Libraries/BSP/LCD/bsp_lcd.c **** 
  70:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SIZE                           (BSP_LCD_WIDTH *  \
  71:Libraries/BSP/LCD/bsp_lcd.c ****                                                  BSP_LCD_HEIGHT)
  72:Libraries/BSP/LCD/bsp_lcd.c **** 
  73:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_MAX_NBR_IMG                            256u
  74:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_MAX_NBR_FONT                           128u
  75:Libraries/BSP/LCD/bsp_lcd.c **** 
  76:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_ILI9320_SPI_FREQ                   25000000
  77:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_ILI9320_DEV_CODE                     0xC990    /* LCD controller device code.     
  78:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPFD5408_DEV_CODE                    0x2A04    /* LCD Controller device code. (SPF
  79:Libraries/BSP/LCD/bsp_lcd.c **** 
  80:Libraries/BSP/LCD/bsp_lcd.c **** /*
  81:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  82:Libraries/BSP/LCD/bsp_lcd.c **** *                                                 SSP REGISTER
  83:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
  84:Libraries/BSP/LCD/bsp_lcd.c **** */
  85:Libraries/BSP/LCD/bsp_lcd.c **** 
  86:Libraries/BSP/LCD/bsp_lcd.c **** 
  87:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_ADDR_BASE                   (CPU_ADDR   )(0x40030000)
  88:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_CR0                   (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x00))
  89:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_CR1                   (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x04))
  90:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_DR                    (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x08))
  91:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_SR                    (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x0C))
  92:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_CPSR                  (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x10))
  93:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_IMSC                  (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x14))
  94:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_RIS                   (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x18))
  95:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_MIS                   (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x1C))
  96:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_REG_ICR                   (*(CPU_REG32 *)(BSP_LCD_SSP1_ADDR_BASE + 0x20))
  97:Libraries/BSP/LCD/bsp_lcd.c **** 
  98:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_CR0_CPOL              DEF_BIT_06
  99:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_CR0_CPHA              DEF_BIT_07
 100:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_CR0_FRF_TI            DEF_BIT_MASK(1u, 4u)
 101:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_CR0_FRF_MICRO         DEF_BIT_MASK(2u, 4u)
 102:Libraries/BSP/LCD/bsp_lcd.c **** 
 103:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_SR_TFE                DEF_BIT_00
 104:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_SR_TNF                DEF_BIT_01
 105:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_SR_RNE                DEF_BIT_02
 106:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_SR_RFF                DEF_BIT_03
 107:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SSP1_BIT_SR_BSY                DEF_BIT_04
 108:Libraries/BSP/LCD/bsp_lcd.c **** 
 109:Libraries/BSP/LCD/bsp_lcd.c **** #define  CSP_SSP_BIT_CR1_SSE                    DEF_BIT_01
 110:Libraries/BSP/LCD/bsp_lcd.c **** 
 111:Libraries/BSP/LCD/bsp_lcd.c **** 
 112:Libraries/BSP/LCD/bsp_lcd.c **** /*
 113:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 114:Libraries/BSP/LCD/bsp_lcd.c **** *                                             ILI9320 REGISTER DEFINES
 115:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 116:Libraries/BSP/LCD/bsp_lcd.c **** */
 117:Libraries/BSP/LCD/bsp_lcd.c **** 
 118:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DVR_CODE_RD                0x00
 119:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_START_OSC                  0x00
 120:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DRV_OUT_CTRL1              0x01
 121:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_LCD_DRV_CTRL1              0x02
 122:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_ENTRY_MODE                 0x03
 123:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_RESIZE_CTRL                0x04
 124:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DISP_CTRL1                 0x07
 125:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DISP_CTRL2                 0x08
 126:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DISP_CTRL3                 0x09
 127:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DISP_CTRL4                 0x0A
 128:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_RGB_DISP_IF_CTRL1          0x0C
 129:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_FRAME_MAKER_POS            0x0D
 130:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_RGB_DISP_IF_CTRL2          0x0F
 131:Libraries/BSP/LCD/bsp_lcd.c **** 
 132:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PWR_CTRL1                  0x10
 133:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PWR_CTRL2                  0x11
 134:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PWR_CTRL3                  0x12
 135:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PWR_CTRL4                  0x13
 136:Libraries/BSP/LCD/bsp_lcd.c **** 
 137:Libraries/BSP/LCD/bsp_lcd.c **** 
 138:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_HOR_GRAM_ADDR_SET          0x20
 139:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_VER_GRAM_ADDR_SET          0x21
 140:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GRAM_DATA_WR               0x22
 141:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PWR_CTRL7                  0x29
 142:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_FRAME_RATE_CTRL            0x2B
 143:Libraries/BSP/LCD/bsp_lcd.c **** 
 144:Libraries/BSP/LCD/bsp_lcd.c **** 
 145:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL1                 0x30
 146:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL2                 0x31
 147:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL3                 0x32
 148:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL4                 0x35
 149:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL5                 0x36
 150:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL6                 0x37
 151:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL7                 0x38
 152:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL8                 0x39
 153:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL9                 0x3C
 154:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_GAMA_CTRL10                0x3D
 155:Libraries/BSP/LCD/bsp_lcd.c **** 
 156:Libraries/BSP/LCD/bsp_lcd.c **** 
 157:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_HOR_ADDR_START             0x50
 158:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_HOR_ADDR_END               0x51
 159:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_VER_ADDR_START             0x52
 160:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_VER_ADDR_END               0x53
 161:Libraries/BSP/LCD/bsp_lcd.c **** 
 162:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_DRV_OUT_CTRL2              0x60
 163:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_BASE_IMG_DISP_CTRL         0x61
 164:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_VER_SCROLL_CTRL            0x6A
 165:Libraries/BSP/LCD/bsp_lcd.c **** 
 166:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_POS1          0x80
 167:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_AREA_START1   0x80
 168:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_AREA_END1     0x82
 169:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_POS2          0x83
 170:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_AREA_START2   0x84
 171:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PAR_IMG_DISP_AREA_END2     0x85
 172:Libraries/BSP/LCD/bsp_lcd.c **** 
 173:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL1             0x90
 174:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL2             0x92
 175:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL3             0x93
 176:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL4             0x95
 177:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL5             0x97
 178:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_REG_PANEL_IF_CTRL6             0x98
 179:Libraries/BSP/LCD/bsp_lcd.c **** 
 180:Libraries/BSP/LCD/bsp_lcd.c **** 
 181:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_DRV_OUT_CTRL1_SS           DEF_BIT_08
 182:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_DRV_OUT_CTRL1_SM           DEF_BIT_10
 183:Libraries/BSP/LCD/bsp_lcd.c **** 
 184:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_LCD_DRV_CTRL1_EOR          DEF_BIT_08
 185:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_LCD_DRV_CTRL1_BC           DEF_BIT_09
 186:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_LCD_DRV_CTRL1_SET_LINE    (DEF_BIT_10 | DEF_BIT_09 | DEF_BIT_08)
 187:Libraries/BSP/LCD/bsp_lcd.c **** 
 188:Libraries/BSP/LCD/bsp_lcd.c **** 
 189:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_AP_HALT          DEF_BIT_00
 190:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_AP_0_50          DEF_BIT_MASK(1u, 4u)
 191:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_AP_0_75          DEF_BIT_MASK(12, 4u)
 192:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_AP_1             DEF_BIT_MASK(13, 4u)
 193:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_APE              DEF_BIT_07
 194:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL1_SAP              DEF_BIT_12
 195:Libraries/BSP/LCD/bsp_lcd.c **** 
 196:Libraries/BSP/LCD/bsp_lcd.c **** 
 197:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL3_PON              DEF_BIT_04
 198:Libraries/BSP/LCD/bsp_lcd.c **** #define  ILI9320_BIT_PWR_CTRL3_VCMR             DEF_BIT_08
 199:Libraries/BSP/LCD/bsp_lcd.c **** 
 200:Libraries/BSP/LCD/bsp_lcd.c **** 
 201:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_RW           DEF_BIT_00
 202:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_RS           DEF_BIT_01
 203:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_ID_CODE     (DEF_BIT_04 | DEF_BIT_05 | DEF_BIT_06)
 204:Libraries/BSP/LCD/bsp_lcd.c **** 
 205:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_SET_IX      (BSP_LCD_SPI_ILI9320_START_ID_CODE)
 206:Libraries/BSP/LCD/bsp_lcd.c **** 
 207:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_RD_STAT     (BSP_LCD_SPI_ILI9320_START_ID_CODE | \
 208:Libraries/BSP/LCD/bsp_lcd.c ****                                                 BSP_LCD_SPI_ILI9320_START_RW)
 209:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_WR_REG      (BSP_LCD_SPI_ILI9320_START_ID_CODE | \
 210:Libraries/BSP/LCD/bsp_lcd.c ****                                                 BSP_LCD_SPI_ILI9320_START_RS)
 211:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_SPI_ILI9320_START_RD_REG      (BSP_LCD_SPI_ILI9320_START_ID_CODE | \
 212:Libraries/BSP/LCD/bsp_lcd.c ****                                                 BSP_LCD_SPI_ILI9320_START_RW      | \
 213:Libraries/BSP/LCD/bsp_lcd.c ****                                                 BSP_LCD_SPI_ILI9320_START_RS)
 214:Libraries/BSP/LCD/bsp_lcd.c **** 
 215:Libraries/BSP/LCD/bsp_lcd.c **** 
 216:Libraries/BSP/LCD/bsp_lcd.c **** /*
 217:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 218:Libraries/BSP/LCD/bsp_lcd.c **** *                                           LOCAL CONSTANTS
 219:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 220:Libraries/BSP/LCD/bsp_lcd.c **** */
 221:Libraries/BSP/LCD/bsp_lcd.c **** 
 222:Libraries/BSP/LCD/bsp_lcd.c **** 
 223:Libraries/BSP/LCD/bsp_lcd.c **** /*
 224:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 225:Libraries/BSP/LCD/bsp_lcd.c **** *                                          LOCAL DATA TYPES
 226:Libraries/BSP/LCD/bsp_lcd.c **** *
 227:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 228:Libraries/BSP/LCD/bsp_lcd.c **** */
 229:Libraries/BSP/LCD/bsp_lcd.c **** 
 230:Libraries/BSP/LCD/bsp_lcd.c **** 
 231:Libraries/BSP/LCD/bsp_lcd.c **** typedef  struct  bsp_lcd_dev {
 232:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR       BgColor;                                /* Background color.               
 233:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR       TextColor;                              /* Text color.                     
 234:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TEXT_POS    TextLineMax;                            /* Text maximum number of lines.   
 235:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TEXT_POS    TextLineCur;                            /* Text current line number.       
 236:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TEXT_POS    TextColMax;                             /* Text maximum number of columns. 
 237:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TEXT_POS    TextColCur;                             /* Text current column number.     
 238:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL       TextPixelCur;                           /* Text current horizontal pixel.  
 239:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT       *TextFontPtr;                            /* Text font pointer.              
 240:Libraries/BSP/LCD/bsp_lcd.c ****     OS_MUTEX            Lock;                                   /* Display lock.                   
 241:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_TS32            MaxTimeOut;                             /* Max timeout for SPI transfers.  
 242:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_IMG       **ImgTblPtr;                              /* Image table pointer.            
 243:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT      **FontTblPtr;                             /* Image table pointer.            
 244:Libraries/BSP/LCD/bsp_lcd.c **** } BSP_LCD_DEV;
 245:Libraries/BSP/LCD/bsp_lcd.c **** 
 246:Libraries/BSP/LCD/bsp_lcd.c **** 
 247:Libraries/BSP/LCD/bsp_lcd.c **** /*
 248:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 249:Libraries/BSP/LCD/bsp_lcd.c **** *                                            LOCAL TABLES
 250:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 251:Libraries/BSP/LCD/bsp_lcd.c **** */
 252:Libraries/BSP/LCD/bsp_lcd.c **** 
 253:Libraries/BSP/LCD/bsp_lcd.c **** 
 254:Libraries/BSP/LCD/bsp_lcd.c **** /*
 255:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 256:Libraries/BSP/LCD/bsp_lcd.c **** *                                       LOCAL GLOBAL VARIABLES
 257:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 258:Libraries/BSP/LCD/bsp_lcd.c **** */
 259:Libraries/BSP/LCD/bsp_lcd.c **** 
 260:Libraries/BSP/LCD/bsp_lcd.c **** 
 261:Libraries/BSP/LCD/bsp_lcd.c **** static  BSP_LCD_DEV   BSP_LCD_Ctxt;
 262:Libraries/BSP/LCD/bsp_lcd.c **** 
 263:Libraries/BSP/LCD/bsp_lcd.c **** 
 264:Libraries/BSP/LCD/bsp_lcd.c **** /*
 265:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 266:Libraries/BSP/LCD/bsp_lcd.c **** *                                               MACRO'S
 267:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 268:Libraries/BSP/LCD/bsp_lcd.c **** */
 269:Libraries/BSP/LCD/bsp_lcd.c **** 
 270:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_CTRL_CS_LOW()        {    CSP_GPIO_BitClr(CSP_GPIO_PORT_NBR_00, DEF_BIT_06);    }
 271:Libraries/BSP/LCD/bsp_lcd.c **** #define  BSP_LCD_CTRL_CS_HIGH()       {    CSP_GPIO_BitSet(CSP_GPIO_PORT_NBR_00, DEF_BIT_06);    }
 272:Libraries/BSP/LCD/bsp_lcd.c **** 
 273:Libraries/BSP/LCD/bsp_lcd.c **** 
 274:Libraries/BSP/LCD/bsp_lcd.c **** /*
 275:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 276:Libraries/BSP/LCD/bsp_lcd.c **** *                                      LOCAL FUNCTION PROTOTYPES
 277:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 278:Libraries/BSP/LCD/bsp_lcd.c **** */
 279:Libraries/BSP/LCD/bsp_lcd.c **** 
 280:Libraries/BSP/LCD/bsp_lcd.c **** static  void         BSP_LCD_Lock             (void);
 281:Libraries/BSP/LCD/bsp_lcd.c **** static  void         BSP_LCD_Unlock           (void);
 282:Libraries/BSP/LCD/bsp_lcd.c **** 
 283:Libraries/BSP/LCD/bsp_lcd.c **** static  CPU_INT16U   BSP_LCD_CtrlRegRd        (CPU_INT08U      reg_off);
 284:Libraries/BSP/LCD/bsp_lcd.c **** static  void         BSP_LCD_CtrlRegWr        (CPU_INT08U      reg_off,
 285:Libraries/BSP/LCD/bsp_lcd.c ****                                                CPU_INT16U      reg_val);
 286:Libraries/BSP/LCD/bsp_lcd.c **** 
 287:Libraries/BSP/LCD/bsp_lcd.c **** static  CPU_INT08U   BSP_LCD_SPI_Xfer         (CPU_INT08U      datum);
 288:Libraries/BSP/LCD/bsp_lcd.c **** 
 289:Libraries/BSP/LCD/bsp_lcd.c **** static  void         BSP_LCD_BitmapDrawUnlock (BSP_LCD_PIXEL   x,
 290:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   y,
 291:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   width,
 292:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   height,
 293:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_COLOR  *p_bitmap);
 294:Libraries/BSP/LCD/bsp_lcd.c **** 
 295:Libraries/BSP/LCD/bsp_lcd.c **** static   void        BSP_LCD_RectDrawUnlock   (BSP_LCD_PIXEL   x,
 296:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   y,
 297:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   width,
 298:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   height,
 299:Libraries/BSP/LCD/bsp_lcd.c ****                                                CPU_BOOLEAN     fill,
 300:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_COLOR   fill_color,
 301:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_PIXEL   line_weight,
 302:Libraries/BSP/LCD/bsp_lcd.c ****                                                BSP_LCD_COLOR   line_color);
 303:Libraries/BSP/LCD/bsp_lcd.c **** 
 304:Libraries/BSP/LCD/bsp_lcd.c **** static  void         BSP_LCD_TextCharUnlock   (CPU_CHAR        c);
 305:Libraries/BSP/LCD/bsp_lcd.c **** 
 306:Libraries/BSP/LCD/bsp_lcd.c **** 
 307:Libraries/BSP/LCD/bsp_lcd.c **** /*
 308:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 309:Libraries/BSP/LCD/bsp_lcd.c **** *                                     LOCAL CONFIGURATION ERRORS
 310:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 311:Libraries/BSP/LCD/bsp_lcd.c **** */
 312:Libraries/BSP/LCD/bsp_lcd.c **** 
 313:Libraries/BSP/LCD/bsp_lcd.c **** 
 314:Libraries/BSP/LCD/bsp_lcd.c **** /*
 315:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 316:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 317:Libraries/BSP/LCD/bsp_lcd.c **** **                                         GLOBAL FUNCTIONS
 318:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 319:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 320:Libraries/BSP/LCD/bsp_lcd.c **** */
 321:Libraries/BSP/LCD/bsp_lcd.c **** 
 322:Libraries/BSP/LCD/bsp_lcd.c **** 
 323:Libraries/BSP/LCD/bsp_lcd.c **** /*
 324:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 325:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_Init()
 326:Libraries/BSP/LCD/bsp_lcd.c **** *
 327:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Initialize the LCD Display.
 328:Libraries/BSP/LCD/bsp_lcd.c **** *
 329:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
 330:Libraries/BSP/LCD/bsp_lcd.c **** *
 331:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : DEF_OK,  If the LCD driver was initialized.
 332:Libraries/BSP/LCD/bsp_lcd.c **** *               DEF_FAIL, Otherwise.
 333:Libraries/BSP/LCD/bsp_lcd.c **** *
 334:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 335:Libraries/BSP/LCD/bsp_lcd.c **** *
 336:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 337:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 338:Libraries/BSP/LCD/bsp_lcd.c **** */
 339:Libraries/BSP/LCD/bsp_lcd.c **** 
 340:Libraries/BSP/LCD/bsp_lcd.c **** CPU_BOOLEAN   BSP_LCD_Init (void)
 341:Libraries/BSP/LCD/bsp_lcd.c **** {
  35              		.loc 1 341 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 24
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 14, -4
  43              		.cfi_offset 7, -8
  44 0002 8AB0     		sub	sp, sp, #40
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 48
  47 0004 04AF     		add	r7, sp, #16
  48              	.LCFI2:
  49              		.cfi_def_cfa 7, 32
 342:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT16U       clk_div;
 343:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT32U       pclk_freq;
 344:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_TS_TMR_FREQ  tmr_freq;
 345:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT16U       dev_id;
 346:Libraries/BSP/LCD/bsp_lcd.c ****     OS_ERR           err;
 347:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_ERR          cpu_err;
 348:Libraries/BSP/LCD/bsp_lcd.c **** 
 349:Libraries/BSP/LCD/bsp_lcd.c **** 
 350:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,         /* ... Port0.                      
  50              		.loc 1 350 0
  51 0006 4FF00003 		mov	r3, #0
  52 000a 0093     		str	r3, [sp, #0]
  53 000c 4FF00003 		mov	r3, #0
  54 0010 0193     		str	r3, [sp, #4]
  55 0012 4FF00003 		mov	r3, #0
  56 0016 0293     		str	r3, [sp, #8]
  57 0018 4FF00000 		mov	r0, #0
  58 001c 4FF04001 		mov	r1, #64
  59 0020 4FF00102 		mov	r2, #1
  60 0024 4FF00103 		mov	r3, #1
  61 0028 FFF7FEFF 		bl	CSP_GPIO_Cfg
 351:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_GPIO_MSK   )DEF_BIT_06,                   /* ... Pin 0.06 GPIO.              
 352:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_DIR_OUT,             /* ... Pin configured as output.   
 353:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,      /* ... Neither  pull-up nor pull-do
 354:Libraries/BSP/LCD/bsp_lcd.c ****                  (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.         
 355:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )0,
 356:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_FNCT_00);
 357:Libraries/BSP/LCD/bsp_lcd.c **** 
 358:Libraries/BSP/LCD/bsp_lcd.c **** 
 359:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,         /* ... Port0.                      
  62              		.loc 1 359 0
  63 002c 4FF00003 		mov	r3, #0
  64 0030 0093     		str	r3, [sp, #0]
  65 0032 4FF00003 		mov	r3, #0
  66 0036 0193     		str	r3, [sp, #4]
  67 0038 4FF00203 		mov	r3, #2
  68 003c 0293     		str	r3, [sp, #8]
  69 003e 4FF00000 		mov	r0, #0
  70 0042 4FF46071 		mov	r1, #896
  71 0046 4FF00002 		mov	r2, #0
  72 004a 4FF00103 		mov	r3, #1
  73 004e FFF7FEFF 		bl	CSP_GPIO_Cfg
 360:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_GPIO_MSK   )(DEF_BIT_07 |                 /* ... Pin 0.07 SCK1.              
 361:Libraries/BSP/LCD/bsp_lcd.c ****                                    DEF_BIT_08 |                 /* ... Pin 0.08 MISO1.             
 362:Libraries/BSP/LCD/bsp_lcd.c ****                                    DEF_BIT_09),                 /* ... Pin 0.09 MOSI1.             
 363:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_DIR_IN,              /* ... Pin configured as input.    
 364:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,      /* ... Neither  pull-up nor pull-do
 365:Libraries/BSP/LCD/bsp_lcd.c ****                  (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.         
 366:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )0,
 367:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_FNCT_02);
 368:Libraries/BSP/LCD/bsp_lcd.c **** 
 369:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_04,         /* ... Port0.                      
  74              		.loc 1 369 0
  75 0052 4FF00003 		mov	r3, #0
  76 0056 0093     		str	r3, [sp, #0]
  77 0058 4FF00003 		mov	r3, #0
  78 005c 0193     		str	r3, [sp, #4]
  79 005e 4FF00003 		mov	r3, #0
  80 0062 0293     		str	r3, [sp, #8]
  81 0064 4FF00400 		mov	r0, #4
  82 0068 4FF04051 		mov	r1, #805306368
  83 006c 4FF00102 		mov	r2, #1
  84 0070 4FF00103 		mov	r3, #1
  85 0074 FFF7FEFF 		bl	CSP_GPIO_Cfg
 370:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_GPIO_MSK   )DEF_BIT_28 | DEF_BIT_29,      /* ... Pin 4.28 GPIO.              
 371:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_DIR_OUT,             /* ... Pin configured as output.   
 372:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,      /* ... Neither  pull-up nor pull-do
 373:Libraries/BSP/LCD/bsp_lcd.c ****                  (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.         
 374:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )0,
 375:Libraries/BSP/LCD/bsp_lcd.c ****                  (CSP_OPT        )CSP_GPIO_FNCT_00);
 376:Libraries/BSP/LCD/bsp_lcd.c **** 
 377:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_PM_PerClkDivCfg(CSP_PM_PER_CLK_NBR_SSP_01,              /* Set the SSP frequency to CLK /2 
  86              		.loc 1 377 0
  87 0078 4FF00A00 		mov	r0, #10
  88 007c 4FF00201 		mov	r1, #2
  89 0080 FFF7FEFF 		bl	CSP_PM_PerClkDivCfg
 378:Libraries/BSP/LCD/bsp_lcd.c ****                      2u);
 379:Libraries/BSP/LCD/bsp_lcd.c **** 
 380:Libraries/BSP/LCD/bsp_lcd.c ****     pclk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_SSP_01);
  90              		.loc 1 380 0
  91 0084 4FF00A00 		mov	r0, #10
  92 0088 FFF7FEFF 		bl	CSP_PM_PerClkFreqGet
  93 008c 7861     		str	r0, [r7, #20]
 381:Libraries/BSP/LCD/bsp_lcd.c **** 
 382:Libraries/BSP/LCD/bsp_lcd.c ****     if (pclk_freq < BSP_LCD_ILI9320_SPI_FREQ) {
  94              		.loc 1 382 0
  95 008e 7A69     		ldr	r2, [r7, #20]
  96 0090 47F63F03 		movw	r3, #30783
  97 0094 C0F27D13 		movt	r3, 381
  98 0098 9A42     		cmp	r2, r3
  99 009a 02D8     		bhi	.L2
 383:Libraries/BSP/LCD/bsp_lcd.c ****         return (DEF_FAIL);
 100              		.loc 1 383 0
 101 009c 4FF00003 		mov	r3, #0
 102 00a0 A0E2     		b	.L3
 103              	.L2:
 384:Libraries/BSP/LCD/bsp_lcd.c ****     }
 385:Libraries/BSP/LCD/bsp_lcd.c **** 
 386:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Calculate the divider. Preescale
 387:Libraries/BSP/LCD/bsp_lcd.c ****     clk_div  = ((pclk_freq / BSP_LCD_ILI9320_SPI_FREQ) - 1u) / 2u;
 104              		.loc 1 387 0
 105 00a2 7A69     		ldr	r2, [r7, #20]
 106 00a4 43F68933 		movw	r3, #15241
 107 00a8 C5F2E653 		movt	r3, 21990
 108 00ac A3FB0213 		umull	r1, r3, r3, r2
 109 00b0 4FEAD353 		lsr	r3, r3, #23
 110 00b4 03F1FF33 		add	r3, r3, #-1
 111 00b8 4FEA5303 		lsr	r3, r3, #1
 112 00bc 7B82     		strh	r3, [r7, #18]	@ movhi
 388:Libraries/BSP/LCD/bsp_lcd.c **** 
 389:Libraries/BSP/LCD/bsp_lcd.c ****     if (clk_div > DEF_INT_08U_MAX_VAL) {
 113              		.loc 1 389 0
 114 00be 7B8A     		ldrh	r3, [r7, #18]
 115 00c0 FF2B     		cmp	r3, #255
 116 00c2 02D9     		bls	.L4
 390:Libraries/BSP/LCD/bsp_lcd.c ****         return (DEF_FAIL);
 117              		.loc 1 390 0
 118 00c4 4FF00003 		mov	r3, #0
 119 00c8 8CE2     		b	.L3
 120              	.L4:
 391:Libraries/BSP/LCD/bsp_lcd.c ****     }
 392:Libraries/BSP/LCD/bsp_lcd.c **** 
 393:Libraries/BSP/LCD/bsp_lcd.c ****     OSMutexCreate((OS_MUTEX *)&BSP_LCD_Ctxt.Lock,               /* Create mutex to lock the LCD.   
 121              		.loc 1 393 0
 122 00ca 6B48     		ldr	r0, .L11
 123 00cc 40F20001 		movw	r1, #:lower16:.LC0
 124 00d0 C0F20001 		movt	r1, #:upper16:.LC0
 125 00d4 07F10803 		add	r3, r7, #8
 126 00d8 1A46     		mov	r2, r3
 127 00da FFF7FEFF 		bl	OSMutexCreate
 394:Libraries/BSP/LCD/bsp_lcd.c ****                   (CPU_CHAR *)"LCD lock",
 395:Libraries/BSP/LCD/bsp_lcd.c ****                   (OS_ERR   *)&err);
 396:Libraries/BSP/LCD/bsp_lcd.c **** 
 397:Libraries/BSP/LCD/bsp_lcd.c ****     if (err != OS_ERR_NONE) {
 128              		.loc 1 397 0
 129 00de 3B89     		ldrh	r3, [r7, #8]
 130 00e0 002B     		cmp	r3, #0
 131 00e2 02D0     		beq	.L5
 398:Libraries/BSP/LCD/bsp_lcd.c ****         return (DEF_FAIL);
 132              		.loc 1 398 0
 133 00e4 4FF00003 		mov	r3, #0
 134 00e8 7CE2     		b	.L3
 135              	.L5:
 399:Libraries/BSP/LCD/bsp_lcd.c ****     }
 400:Libraries/BSP/LCD/bsp_lcd.c **** 
 401:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();
 136              		.loc 1 401 0
 137 00ea 01F04BFB 		bl	BSP_LCD_Lock
 402:Libraries/BSP/LCD/bsp_lcd.c **** 
 403:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_SSP_01);                 /* Enable SSP1 peripheral clock.   
 138              		.loc 1 403 0
 139 00ee 4FF00A00 		mov	r0, #10
 140 00f2 FFF7FEFF 		bl	CSP_PM_PerClkEn
 404:Libraries/BSP/LCD/bsp_lcd.c **** 
 405:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SSP1_REG_CR0       = (8u - 1u)                      /* ... 8 bits data size.           
 141              		.loc 1 405 0
 142 00f6 4FF00003 		mov	r3, #0
 143 00fa C4F20303 		movt	r3, 16387
 144 00fe 4FF0C702 		mov	r2, #199
 145 0102 1A60     		str	r2, [r3, #0]
 406:Libraries/BSP/LCD/bsp_lcd.c ****                                | BSP_LCD_SSP1_BIT_CR0_CPOL      /* ... High polarity.              
 407:Libraries/BSP/LCD/bsp_lcd.c ****                                | BSP_LCD_SSP1_BIT_CR0_CPHA;     /* ... Capture serial data on the s
 408:Libraries/BSP/LCD/bsp_lcd.c **** 
 409:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SSP1_REG_CR1       = CSP_SSP_BIT_CR1_SSE;           /* Enable the SSP.                 
 146              		.loc 1 409 0
 147 0104 4FF00403 		mov	r3, #4
 148 0108 C4F20303 		movt	r3, 16387
 149 010c 4FF00202 		mov	r2, #2
 150 0110 1A60     		str	r2, [r3, #0]
 410:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SSP1_REG_MIS       = DEF_BIT_NONE;                  /* Disable all interrupts.         
 151              		.loc 1 410 0
 152 0112 4FF01C03 		mov	r3, #28
 153 0116 C4F20303 		movt	r3, 16387
 154 011a 4FF00002 		mov	r2, #0
 155 011e 1A60     		str	r2, [r3, #0]
 411:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SSP1_REG_CPSR      = 2u;                            /* Preescaler = 2.                 
 156              		.loc 1 411 0
 157 0120 4FF01003 		mov	r3, #16
 158 0124 C4F20303 		movt	r3, 16387
 159 0128 4FF00202 		mov	r2, #2
 160 012c 1A60     		str	r2, [r3, #0]
 412:Libraries/BSP/LCD/bsp_lcd.c **** 
 413:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.BgColor       = BSP_LCD_COLOR_BLACK;
 161              		.loc 1 413 0
 162 012e 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 163 0132 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 164 0136 4FF00002 		mov	r2, #0
 165 013a 1A80     		strh	r2, [r3, #0]	@ movhi
 414:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextFontPtr   = (BSP_LCD_FONT    *)0;
 166              		.loc 1 414 0
 167 013c 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 168 0140 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 169 0144 4FF00002 		mov	r2, #0
 170 0148 DA60     		str	r2, [r3, #12]
 415:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextColor     = (BSP_LCD_COLOR    )BSP_LCD_COLOR_WHITE;
 171              		.loc 1 415 0
 172 014a 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 173 014e C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 174 0152 4FF6FF72 		movw	r2, #65535
 175 0156 5A80     		strh	r2, [r3, #2]	@ movhi
 416:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextLineMax   = (BSP_LCD_TEXT_POS )0u;
 176              		.loc 1 416 0
 177 0158 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 178 015c C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 179 0160 4FF00002 		mov	r2, #0
 180 0164 1A71     		strb	r2, [r3, #4]
 417:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextLineCur   = (BSP_LCD_TEXT_POS )0u;
 181              		.loc 1 417 0
 182 0166 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 183 016a C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 184 016e 4FF00002 		mov	r2, #0
 185 0172 5A71     		strb	r2, [r3, #5]
 418:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextColMax    = (BSP_LCD_TEXT_POS )0u;
 186              		.loc 1 418 0
 187 0174 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 188 0178 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 189 017c 4FF00002 		mov	r2, #0
 190 0180 9A71     		strb	r2, [r3, #6]
 419:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextColCur    = (BSP_LCD_TEXT_POS )0u;
 191              		.loc 1 419 0
 192 0182 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 193 0186 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 194 018a 4FF00002 		mov	r2, #0
 195 018e DA71     		strb	r2, [r3, #7]
 420:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextPixelCur  = (BSP_LCD_PIXEL    )0u;
 196              		.loc 1 420 0
 197 0190 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 198 0194 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 199 0198 4FF00002 		mov	r2, #0
 200 019c 1A81     		strh	r2, [r3, #8]	@ movhi
 421:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.FontTblPtr    = (BSP_LCD_FONT   **)0;
 201              		.loc 1 421 0
 202 019e 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 203 01a2 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 204 01a6 4FF00002 		mov	r2, #0
 205 01aa 5A64     		str	r2, [r3, #68]
 422:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.ImgTblPtr     = (BSP_LCD_IMG    **)0;
 206              		.loc 1 422 0
 207 01ac 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 208 01b0 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 209 01b4 4FF00002 		mov	r2, #0
 210 01b8 1A64     		str	r2, [r3, #64]
 423:Libraries/BSP/LCD/bsp_lcd.c **** 
 424:Libraries/BSP/LCD/bsp_lcd.c **** 
 425:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_BitSet(CSP_GPIO_PORT_NBR_04,
 211              		.loc 1 425 0
 212 01ba 4FF00400 		mov	r0, #4
 213 01be 4FF00051 		mov	r1, #536870912
 214 01c2 FFF7FEFF 		bl	CSP_GPIO_BitSet
 426:Libraries/BSP/LCD/bsp_lcd.c ****                     DEF_BIT_29);
 427:Libraries/BSP/LCD/bsp_lcd.c **** 
 428:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Calculate the max SPI timeout in
 429:Libraries/BSP/LCD/bsp_lcd.c ****     tmr_freq                 = CPU_TS_TmrFreqGet(&cpu_err);
 215              		.loc 1 429 0
 216 01c6 07F10603 		add	r3, r7, #6
 217 01ca 1846     		mov	r0, r3
 218 01cc FFF7FEFF 		bl	CPU_TS_TmrFreqGet
 219 01d0 F860     		str	r0, [r7, #12]
 430:Libraries/BSP/LCD/bsp_lcd.c ****     tmr_freq                /= DEF_TIME_NBR_mS_PER_SEC;
 220              		.loc 1 430 0
 221 01d2 FA68     		ldr	r2, [r7, #12]
 222 01d4 44F6D353 		movw	r3, #19923
 223 01d8 C1F26203 		movt	r3, 4194
 224 01dc A3FB0213 		umull	r1, r3, r3, r2
 225 01e0 4FEA9313 		lsr	r3, r3, #6
 226 01e4 FB60     		str	r3, [r7, #12]
 431:Libraries/BSP/LCD/bsp_lcd.c ****     pclk_freq               /= DEF_TIME_NBR_mS_PER_SEC;
 227              		.loc 1 431 0
 228 01e6 7A69     		ldr	r2, [r7, #20]
 229 01e8 44F6D353 		movw	r3, #19923
 230 01ec C1F26203 		movt	r3, 4194
 231 01f0 A3FB0213 		umull	r1, r3, r3, r2
 232 01f4 4FEA9313 		lsr	r3, r3, #6
 233 01f8 7B61     		str	r3, [r7, #20]
 432:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.MaxTimeOut = (tmr_freq  * (32u))
 234              		.loc 1 432 0
 235 01fa FB68     		ldr	r3, [r7, #12]
 236 01fc 4FEA4312 		lsl	r2, r3, #5
 433:Libraries/BSP/LCD/bsp_lcd.c ****                             / (pclk_freq / (2u * (clk_div + 1u)));
 237              		.loc 1 433 0
 238 0200 7B8A     		ldrh	r3, [r7, #18]
 239 0202 03F10103 		add	r3, r3, #1
 240 0206 4FEA4303 		lsl	r3, r3, #1
 241 020a 7969     		ldr	r1, [r7, #20]
 242 020c B1FBF3F3 		udiv	r3, r1, r3
 243 0210 B2FBF3F2 		udiv	r2, r2, r3
 432:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.MaxTimeOut = (tmr_freq  * (32u))
 244              		.loc 1 432 0
 245 0214 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 246 0218 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 247 021c DA63     		str	r2, [r3, #60]
 434:Libraries/BSP/LCD/bsp_lcd.c **** 
 435:Libraries/BSP/LCD/bsp_lcd.c ****     OSTimeDlyHMSM(0u, 0u, 0u, 200u,                             /* Discharge cap power voltage (200
 248              		.loc 1 435 0
 249 021e 4FF00003 		mov	r3, #0
 250 0222 0093     		str	r3, [sp, #0]
 251 0224 07F10803 		add	r3, r7, #8
 252 0228 0193     		str	r3, [sp, #4]
 253 022a 4FF00000 		mov	r0, #0
 254 022e 4FF00001 		mov	r1, #0
 255 0232 4FF00002 		mov	r2, #0
 256 0236 4FF0C803 		mov	r3, #200
 257 023a FFF7FEFF 		bl	OSTimeDlyHMSM
 436:Libraries/BSP/LCD/bsp_lcd.c ****                   OS_OPT_TIME_HMSM_STRICT,
 437:Libraries/BSP/LCD/bsp_lcd.c ****                   &err);
 438:Libraries/BSP/LCD/bsp_lcd.c **** 
 439:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BackLightOff();
 258              		.loc 1 439 0
 259 023e FFF7FEFF 		bl	BSP_LCD_BackLightOff
 440:Libraries/BSP/LCD/bsp_lcd.c **** 
 441:Libraries/BSP/LCD/bsp_lcd.c ****     dev_id = BSP_LCD_CtrlRegRd(ILI9320_REG_DVR_CODE_RD);       /* Read the Device code.            
 260              		.loc 1 441 0
 261 0242 4FF00000 		mov	r0, #0
 262 0246 01F0CBF9 		bl	BSP_LCD_CtrlRegRd
 263 024a 0346     		mov	r3, r0
 264 024c 7B81     		strh	r3, [r7, #10]	@ movhi
 442:Libraries/BSP/LCD/bsp_lcd.c ****     dev_id = BSP_LCD_CtrlRegRd(ILI9320_REG_DVR_CODE_RD);       /* Read the Device code.            
 265              		.loc 1 442 0
 266 024e 4FF00000 		mov	r0, #0
 267 0252 01F0C5F9 		bl	BSP_LCD_CtrlRegRd
 268 0256 0346     		mov	r3, r0
 269 0258 7B81     		strh	r3, [r7, #10]	@ movhi
 443:Libraries/BSP/LCD/bsp_lcd.c **** 
 444:Libraries/BSP/LCD/bsp_lcd.c ****     if ((dev_id != BSP_LCD_ILI9320_DEV_CODE ) &&
 270              		.loc 1 444 0
 271 025a 7A89     		ldrh	r2, [r7, #10]
 272 025c 4CF69013 		movw	r3, #51600
 273 0260 9A42     		cmp	r2, r3
 274 0262 0BD0     		beq	.L6
 275              		.loc 1 444 0 is_stmt 0 discriminator 1
 276 0264 7A89     		ldrh	r2, [r7, #10]
 277 0266 42F60423 		movw	r3, #10756
 278 026a 9A42     		cmp	r2, r3
 279 026c 06D0     		beq	.L6
 445:Libraries/BSP/LCD/bsp_lcd.c ****         (dev_id != BSP_LCD_SPFD5408_DEV_CODE)) {
 446:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_Unlock();
 280              		.loc 1 446 0 is_stmt 1
 281 026e 01F09FFA 		bl	BSP_LCD_Unlock
 447:Libraries/BSP/LCD/bsp_lcd.c ****         return (DEF_FAIL);
 282              		.loc 1 447 0
 283 0272 4FF00003 		mov	r3, #0
 284 0276 B5E1     		b	.L3
 285              	.L12:
 286              		.align	2
 287              	.L11:
 288 0278 10000000 		.word	BSP_LCD_Ctxt+16
 289              	.L6:
 448:Libraries/BSP/LCD/bsp_lcd.c ****     }
 449:Libraries/BSP/LCD/bsp_lcd.c **** 
 450:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* -------------- ILI9320 INITIAL S
 451:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL1,                /* Set SS bit.                     
 290              		.loc 1 451 0
 291 027c 4FF00100 		mov	r0, #1
 292 0280 4FF48071 		mov	r1, #256
 293 0284 01F0F6F9 		bl	BSP_LCD_CtrlRegWr
 452:Libraries/BSP/LCD/bsp_lcd.c ****                       ILI9320_BIT_DRV_OUT_CTRL1_SS);
 453:Libraries/BSP/LCD/bsp_lcd.c **** 
 454:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_LCD_DRV_CTRL1,                /* Set 1 line inversion.           
 294              		.loc 1 454 0
 295 0288 4FF00200 		mov	r0, #2
 296 028c 4FF4E061 		mov	r1, #1792
 297 0290 01F0F0F9 		bl	BSP_LCD_CtrlRegWr
 455:Libraries/BSP/LCD/bsp_lcd.c ****                       ILI9320_BIT_LCD_DRV_CTRL1_SET_LINE);
 456:Libraries/BSP/LCD/bsp_lcd.c **** 
 457:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_RESIZE_CTRL,                  /* Resize register.                
 298              		.loc 1 457 0
 299 0294 4FF00400 		mov	r0, #4
 300 0298 4FF00001 		mov	r1, #0
 301 029c 01F0EAF9 		bl	BSP_LCD_CtrlRegWr
 458:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);                            /* .... No resizing, not remaining 
 459:Libraries/BSP/LCD/bsp_lcd.c **** 
 460:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL2,                   /* 2 lines front, 7 back porch.    
 302              		.loc 1 460 0
 303 02a0 4FF00800 		mov	r0, #8
 304 02a4 40F20721 		movw	r1, #519
 305 02a8 01F0E4F9 		bl	BSP_LCD_CtrlRegWr
 461:Libraries/BSP/LCD/bsp_lcd.c ****                       (2 << 8u) | (7u << 0u));
 462:Libraries/BSP/LCD/bsp_lcd.c **** 
 463:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL3,                   /* Set non-disp area refresh cyc IS
 306              		.loc 1 463 0
 307 02ac 4FF00900 		mov	r0, #9
 308 02b0 4FF00001 		mov	r1, #0
 309 02b4 01F0DEF9 		bl	BSP_LCD_CtrlRegWr
 464:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);
 465:Libraries/BSP/LCD/bsp_lcd.c **** 
 466:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL4,                   /* FMARK function                  
 310              		.loc 1 466 0
 311 02b8 4FF00A00 		mov	r0, #10
 312 02bc 4FF00001 		mov	r1, #0
 313 02c0 01F0D8F9 		bl	BSP_LCD_CtrlRegWr
 467:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);
 468:Libraries/BSP/LCD/bsp_lcd.c **** 
 469:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_RGB_DISP_IF_CTRL1,            /* RGB interface setting.          
 314              		.loc 1 469 0
 315 02c4 4FF00C00 		mov	r0, #12
 316 02c8 4FF00001 		mov	r1, #0
 317 02cc 01F0D2F9 		bl	BSP_LCD_CtrlRegWr
 470:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);
 471:Libraries/BSP/LCD/bsp_lcd.c **** 
 472:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_FRAME_MAKER_POS,              /* Frame marker Position.          
 318              		.loc 1 472 0
 319 02d0 4FF00D00 		mov	r0, #13
 320 02d4 4FF00001 		mov	r1, #0
 321 02d8 01F0CCF9 		bl	BSP_LCD_CtrlRegWr
 473:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);
 474:Libraries/BSP/LCD/bsp_lcd.c **** 
 475:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_RGB_DISP_IF_CTRL2,            /* RGB interface polarity.         
 322              		.loc 1 475 0
 323 02dc 4FF00F00 		mov	r0, #15
 324 02e0 4FF00001 		mov	r1, #0
 325 02e4 01F0C6F9 		bl	BSP_LCD_CtrlRegWr
 476:Libraries/BSP/LCD/bsp_lcd.c ****                       DEF_BIT_NONE);
 477:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------------- POWER ON SEQ
 478:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL1, DEF_BIT_NONE);     /* Reset Power Control 1.          
 326              		.loc 1 478 0
 327 02e8 4FF01000 		mov	r0, #16
 328 02ec 4FF00001 		mov	r1, #0
 329 02f0 01F0C0F9 		bl	BSP_LCD_CtrlRegWr
 479:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL2, DEF_BIT_NONE);     /* Reset Power Control 2.          
 330              		.loc 1 479 0
 331 02f4 4FF01100 		mov	r0, #17
 332 02f8 4FF00001 		mov	r1, #0
 333 02fc 01F0BAF9 		bl	BSP_LCD_CtrlRegWr
 480:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL3, DEF_BIT_NONE);     /* Reset Power Control 3.          
 334              		.loc 1 480 0
 335 0300 4FF01200 		mov	r0, #18
 336 0304 4FF00001 		mov	r1, #0
 337 0308 01F0B4F9 		bl	BSP_LCD_CtrlRegWr
 481:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL4, DEF_BIT_NONE);     /* Reset Power Control 4.          
 338              		.loc 1 481 0
 339 030c 4FF01300 		mov	r0, #19
 340 0310 4FF00001 		mov	r1, #0
 341 0314 01F0AEF9 		bl	BSP_LCD_CtrlRegWr
 482:Libraries/BSP/LCD/bsp_lcd.c **** 
 483:Libraries/BSP/LCD/bsp_lcd.c ****     OSTimeDlyHMSM(0u, 0u, 0u, 200u,                             /* Discharge cap power voltage (200
 342              		.loc 1 483 0
 343 0318 4FF00003 		mov	r3, #0
 344 031c 0093     		str	r3, [sp, #0]
 345 031e 07F10803 		add	r3, r7, #8
 346 0322 0193     		str	r3, [sp, #4]
 347 0324 4FF00000 		mov	r0, #0
 348 0328 4FF00001 		mov	r1, #0
 349 032c 4FF00002 		mov	r2, #0
 350 0330 4FF0C803 		mov	r3, #200
 351 0334 FFF7FEFF 		bl	OSTimeDlyHMSM
 484:Libraries/BSP/LCD/bsp_lcd.c ****                   OS_OPT_TIME_HMSM_STRICT,
 485:Libraries/BSP/LCD/bsp_lcd.c ****                   &err);
 486:Libraries/BSP/LCD/bsp_lcd.c **** 
 487:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL1,
 352              		.loc 1 487 0
 353 0338 4FF01000 		mov	r0, #16
 354 033c 41F29021 		movw	r1, #4752
 355 0340 01F098F9 		bl	BSP_LCD_CtrlRegWr
 488:Libraries/BSP/LCD/bsp_lcd.c ****                       (ILI9320_BIT_PWR_CTRL1_AP_0_50 |          /* ... 0.5 Current.                
 489:Libraries/BSP/LCD/bsp_lcd.c ****                        ILI9320_BIT_PWR_CTRL1_APE     |          /* ... Power supply enable.        
 490:Libraries/BSP/LCD/bsp_lcd.c ****                        (2u << 8u)                    |          /* ... Vci 1 x 2.                  
 491:Libraries/BSP/LCD/bsp_lcd.c ****                        ILI9320_BIT_PWR_CTRL1_SAP));             /* ... Source driver output control
 492:Libraries/BSP/LCD/bsp_lcd.c **** 
 493:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL2,
 356              		.loc 1 493 0
 357 0344 4FF01100 		mov	r0, #17
 358 0348 4FF00701 		mov	r1, #7
 359 034c 01F092F9 		bl	BSP_LCD_CtrlRegWr
 494:Libraries/BSP/LCD/bsp_lcd.c ****                       0x0007);
 495:Libraries/BSP/LCD/bsp_lcd.c **** 
 496:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL3,
 360              		.loc 1 496 0
 361 0350 4FF01200 		mov	r0, #18
 362 0354 40F21D11 		movw	r1, #285
 363 0358 01F08CF9 		bl	BSP_LCD_CtrlRegWr
 497:Libraries/BSP/LCD/bsp_lcd.c ****                       ((0xD << 0u)              |               /* ... VciLVL x 1.90.              
 498:Libraries/BSP/LCD/bsp_lcd.c ****                       ILI9320_BIT_PWR_CTRL3_PON |               /* ... VGL Output enable.          
 499:Libraries/BSP/LCD/bsp_lcd.c ****                       ILI9320_BIT_PWR_CTRL3_VCMR));             /* ... Internal electric volume.   
 500:Libraries/BSP/LCD/bsp_lcd.c **** 
 501:Libraries/BSP/LCD/bsp_lcd.c ****     OSTimeDlyHMSM(0u, 0u, 0u, 50u,                              /* Delay for 50ms                  
 364              		.loc 1 501 0
 365 035c 4FF00003 		mov	r3, #0
 366 0360 0093     		str	r3, [sp, #0]
 367 0362 07F10803 		add	r3, r7, #8
 368 0366 0193     		str	r3, [sp, #4]
 369 0368 4FF00000 		mov	r0, #0
 370 036c 4FF00001 		mov	r1, #0
 371 0370 4FF00002 		mov	r2, #0
 372 0374 4FF03203 		mov	r3, #50
 373 0378 FFF7FEFF 		bl	OSTimeDlyHMSM
 502:Libraries/BSP/LCD/bsp_lcd.c ****                   OS_OPT_TIME_HMSM_STRICT,
 503:Libraries/BSP/LCD/bsp_lcd.c ****                   &err);
 504:Libraries/BSP/LCD/bsp_lcd.c **** 
 505:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL4,
 374              		.loc 1 505 0
 375 037c 4FF01300 		mov	r0, #19
 376 0380 4FF4A051 		mov	r1, #5120
 377 0384 01F076F9 		bl	BSP_LCD_CtrlRegWr
 506:Libraries/BSP/LCD/bsp_lcd.c ****                      (0x14 << 8u));                             /* ... VREG1OUT x 0.96.            
 507:Libraries/BSP/LCD/bsp_lcd.c **** 
 508:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL7,
 378              		.loc 1 508 0
 379 0388 4FF02900 		mov	r0, #41
 380 038c 4FF00E01 		mov	r1, #14
 381 0390 01F070F9 		bl	BSP_LCD_CtrlRegWr
 509:Libraries/BSP/LCD/bsp_lcd.c ****                      (0x0E << 0u));                             /* ... VEREGOUT x 0.83             
 510:Libraries/BSP/LCD/bsp_lcd.c **** 
 511:Libraries/BSP/LCD/bsp_lcd.c ****     OSTimeDlyHMSM(0u, 0u, 0u, 50u,                              /* Delay for 50ms                  
 382              		.loc 1 511 0
 383 0394 4FF00003 		mov	r3, #0
 384 0398 0093     		str	r3, [sp, #0]
 385 039a 07F10803 		add	r3, r7, #8
 386 039e 0193     		str	r3, [sp, #4]
 387 03a0 4FF00000 		mov	r0, #0
 388 03a4 4FF00001 		mov	r1, #0
 389 03a8 4FF00002 		mov	r2, #0
 390 03ac 4FF03203 		mov	r3, #50
 391 03b0 FFF7FEFF 		bl	OSTimeDlyHMSM
 512:Libraries/BSP/LCD/bsp_lcd.c ****                   OS_OPT_TIME_HMSM_STRICT,
 513:Libraries/BSP/LCD/bsp_lcd.c ****                   &err);
 514:Libraries/BSP/LCD/bsp_lcd.c **** 
 515:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0x0000);   /* GRAM horizontal Address.        
 392              		.loc 1 515 0
 393 03b4 4FF02000 		mov	r0, #32
 394 03b8 4FF00001 		mov	r1, #0
 395 03bc 01F05AF9 		bl	BSP_LCD_CtrlRegWr
 516:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, 0x0000);   /* GRAM vertical   Address.        
 396              		.loc 1 516 0
 397 03c0 4FF02100 		mov	r0, #33
 398 03c4 4FF00001 		mov	r1, #0
 399 03c8 01F054F9 		bl	BSP_LCD_CtrlRegWr
 517:Libraries/BSP/LCD/bsp_lcd.c **** 
 518:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------ ADJUST THE GAMMA CU
 519:Libraries/BSP/LCD/bsp_lcd.c ****     if (dev_id == BSP_LCD_ILI9320_DEV_CODE) {                   /* ILI9320 Gamma initialization    
 400              		.loc 1 519 0
 401 03cc 7A89     		ldrh	r2, [r7, #10]
 402 03ce 4CF69013 		movw	r3, #51600
 403 03d2 9A42     		cmp	r2, r3
 404 03d4 3CD1     		bne	.L7
 520:Libraries/BSP/LCD/bsp_lcd.c **** 
 521:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL1,  0x0006);
 405              		.loc 1 521 0
 406 03d6 4FF03000 		mov	r0, #48
 407 03da 4FF00601 		mov	r1, #6
 408 03de 01F049F9 		bl	BSP_LCD_CtrlRegWr
 522:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL2,  0x0101);
 409              		.loc 1 522 0
 410 03e2 4FF03100 		mov	r0, #49
 411 03e6 40F20111 		movw	r1, #257
 412 03ea 01F043F9 		bl	BSP_LCD_CtrlRegWr
 523:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL3,  0x0003);
 413              		.loc 1 523 0
 414 03ee 4FF03200 		mov	r0, #50
 415 03f2 4FF00301 		mov	r1, #3
 416 03f6 01F03DF9 		bl	BSP_LCD_CtrlRegWr
 524:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL4,  0x0106);
 417              		.loc 1 524 0
 418 03fa 4FF03500 		mov	r0, #53
 419 03fe 4FF48371 		mov	r1, #262
 420 0402 01F037F9 		bl	BSP_LCD_CtrlRegWr
 525:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL5,  0x0B02);
 421              		.loc 1 525 0
 422 0406 4FF03600 		mov	r0, #54
 423 040a 40F60231 		movw	r1, #2818
 424 040e 01F031F9 		bl	BSP_LCD_CtrlRegWr
 526:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL6,  0x0302);
 425              		.loc 1 526 0
 426 0412 4FF03700 		mov	r0, #55
 427 0416 40F20231 		movw	r1, #770
 428 041a 01F02BF9 		bl	BSP_LCD_CtrlRegWr
 527:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL7,  0x0707);
 429              		.loc 1 527 0
 430 041e 4FF03800 		mov	r0, #56
 431 0422 40F20771 		movw	r1, #1799
 432 0426 01F025F9 		bl	BSP_LCD_CtrlRegWr
 528:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL8,  0x0007);
 433              		.loc 1 528 0
 434 042a 4FF03900 		mov	r0, #57
 435 042e 4FF00701 		mov	r1, #7
 436 0432 01F01FF9 		bl	BSP_LCD_CtrlRegWr
 529:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL9,  0x0600);
 437              		.loc 1 529 0
 438 0436 4FF03C00 		mov	r0, #60
 439 043a 4FF4C061 		mov	r1, #1536
 440 043e 01F019F9 		bl	BSP_LCD_CtrlRegWr
 530:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL10, 0x020B);
 441              		.loc 1 530 0
 442 0442 4FF03D00 		mov	r0, #61
 443 0446 40F20B21 		movw	r1, #523
 444 044a 01F013F9 		bl	BSP_LCD_CtrlRegWr
 445 044e 5FE0     		b	.L8
 446              	.L7:
 531:Libraries/BSP/LCD/bsp_lcd.c ****      } else {
 532:Libraries/BSP/LCD/bsp_lcd.c ****                                                                  /* SPFD5408 Gamma initalization   
 533:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x30, 0x0B0D);
 447              		.loc 1 533 0
 448 0450 4FF03000 		mov	r0, #48
 449 0454 40F60D31 		movw	r1, #2829
 450 0458 01F00CF9 		bl	BSP_LCD_CtrlRegWr
 534:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x31, 0x1923);
 451              		.loc 1 534 0
 452 045c 4FF03100 		mov	r0, #49
 453 0460 41F62311 		movw	r1, #6435
 454 0464 01F006F9 		bl	BSP_LCD_CtrlRegWr
 535:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x32, 0x1C26);
 455              		.loc 1 535 0
 456 0468 4FF03200 		mov	r0, #50
 457 046c 41F62641 		movw	r1, #7206
 458 0470 01F000F9 		bl	BSP_LCD_CtrlRegWr
 536:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x33, 0x261C);
 459              		.loc 1 536 0
 460 0474 4FF03300 		mov	r0, #51
 461 0478 42F21C61 		movw	r1, #9756
 462 047c 01F0FAF8 		bl	BSP_LCD_CtrlRegWr
 537:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x34, 0x2419);
 463              		.loc 1 537 0
 464 0480 4FF03400 		mov	r0, #52
 465 0484 42F21941 		movw	r1, #9241
 466 0488 01F0F4F8 		bl	BSP_LCD_CtrlRegWr
 538:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x35, 0x0D0B);
 467              		.loc 1 538 0
 468 048c 4FF03500 		mov	r0, #53
 469 0490 40F60B51 		movw	r1, #3339
 470 0494 01F0EEF8 		bl	BSP_LCD_CtrlRegWr
 539:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x36, 0x1006);
 471              		.loc 1 539 0
 472 0498 4FF03600 		mov	r0, #54
 473 049c 41F20601 		movw	r1, #4102
 474 04a0 01F0E8F8 		bl	BSP_LCD_CtrlRegWr
 540:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x37, 0x0610);
 475              		.loc 1 540 0
 476 04a4 4FF03700 		mov	r0, #55
 477 04a8 4FF4C261 		mov	r1, #1552
 478 04ac 01F0E2F8 		bl	BSP_LCD_CtrlRegWr
 541:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x38, 0x0706);
 479              		.loc 1 541 0
 480 04b0 4FF03800 		mov	r0, #56
 481 04b4 40F20671 		movw	r1, #1798
 482 04b8 01F0DCF8 		bl	BSP_LCD_CtrlRegWr
 542:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x39, 0x0304);
 483              		.loc 1 542 0
 484 04bc 4FF03900 		mov	r0, #57
 485 04c0 4FF44171 		mov	r1, #772
 486 04c4 01F0D6F8 		bl	BSP_LCD_CtrlRegWr
 543:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3A, 0x0E05);
 487              		.loc 1 543 0
 488 04c8 4FF03A00 		mov	r0, #58
 489 04cc 40F60561 		movw	r1, #3589
 490 04d0 01F0D0F8 		bl	BSP_LCD_CtrlRegWr
 544:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3B, 0x0E01);
 491              		.loc 1 544 0
 492 04d4 4FF03B00 		mov	r0, #59
 493 04d8 40F60161 		movw	r1, #3585
 494 04dc 01F0CAF8 		bl	BSP_LCD_CtrlRegWr
 545:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3C, 0x010E);
 495              		.loc 1 545 0
 496 04e0 4FF03C00 		mov	r0, #60
 497 04e4 4FF48771 		mov	r1, #270
 498 04e8 01F0C4F8 		bl	BSP_LCD_CtrlRegWr
 546:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3D, 0x050E);
 499              		.loc 1 546 0
 500 04ec 4FF03D00 		mov	r0, #61
 501 04f0 40F20E51 		movw	r1, #1294
 502 04f4 01F0BEF8 		bl	BSP_LCD_CtrlRegWr
 547:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3E, 0x0403);
 503              		.loc 1 547 0
 504 04f8 4FF03E00 		mov	r0, #62
 505 04fc 40F20341 		movw	r1, #1027
 506 0500 01F0B8F8 		bl	BSP_LCD_CtrlRegWr
 548:Libraries/BSP/LCD/bsp_lcd.c ****     	BSP_LCD_CtrlRegWr(0x3F, 0x0607);
 507              		.loc 1 548 0
 508 0504 4FF03F00 		mov	r0, #63
 509 0508 40F20761 		movw	r1, #1543
 510 050c 01F0B2F8 		bl	BSP_LCD_CtrlRegWr
 511              	.L8:
 549:Libraries/BSP/LCD/bsp_lcd.c ****      }
 550:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------------ SET GRAM AREA
 551:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0x0000);      /* Horizontal GRAM Start Address.  
 512              		.loc 1 551 0
 513 0510 4FF05000 		mov	r0, #80
 514 0514 4FF00001 		mov	r1, #0
 515 0518 01F0ACF8 		bl	BSP_LCD_CtrlRegWr
 552:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,
 516              		.loc 1 552 0
 517 051c 4FF05100 		mov	r0, #81
 518 0520 4FF0EF01 		mov	r1, #239
 519 0524 01F0A6F8 		bl	BSP_LCD_CtrlRegWr
 553:Libraries/BSP/LCD/bsp_lcd.c ****                       (BSP_LCD_WIDTH - 1u));                    /* Horizontal GRAM End   Address.  
 554:Libraries/BSP/LCD/bsp_lcd.c **** 
 555:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, 0x0000);      /* Vertical   GRAM Start Address.  
 520              		.loc 1 555 0
 521 0528 4FF05200 		mov	r0, #82
 522 052c 4FF00001 		mov	r1, #0
 523 0530 01F0A0F8 		bl	BSP_LCD_CtrlRegWr
 556:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,
 524              		.loc 1 556 0
 525 0534 4FF05300 		mov	r0, #83
 526 0538 40F23F11 		movw	r1, #319
 527 053c 01F09AF8 		bl	BSP_LCD_CtrlRegWr
 557:Libraries/BSP/LCD/bsp_lcd.c ****                      (BSP_LCD_HEIGHT - 1u));                    /* Vertical   GRAM End   Address.  
 558:Libraries/BSP/LCD/bsp_lcd.c **** 
 559:Libraries/BSP/LCD/bsp_lcd.c ****     if (dev_id == BSP_LCD_ILI9320_DEV_CODE) {
 528              		.loc 1 559 0
 529 0540 7A89     		ldrh	r2, [r7, #10]
 530 0542 4CF69013 		movw	r3, #51600
 531 0546 9A42     		cmp	r2, r3
 532 0548 06D1     		bne	.L9
 560:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL2, 0x2700);   /* Gate Scan Line.                 
 533              		.loc 1 560 0
 534 054a 4FF06000 		mov	r0, #96
 535 054e 4FF41C51 		mov	r1, #9984
 536 0552 01F08FF8 		bl	BSP_LCD_CtrlRegWr
 537 0556 05E0     		b	.L10
 538              	.L9:
 561:Libraries/BSP/LCD/bsp_lcd.c ****     } else {
 562:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL2, 0xA700);
 539              		.loc 1 562 0
 540 0558 4FF06000 		mov	r0, #96
 541 055c 4FF42741 		mov	r1, #42752
 542 0560 01F088F8 		bl	BSP_LCD_CtrlRegWr
 543              	.L10:
 563:Libraries/BSP/LCD/bsp_lcd.c ****     }
 564:Libraries/BSP/LCD/bsp_lcd.c **** 
 565:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_BASE_IMG_DISP_CTRL, 0x0001);  /* NDL,VLE, REV.                   
 544              		.loc 1 565 0
 545 0564 4FF06100 		mov	r0, #97
 546 0568 4FF00101 		mov	r1, #1
 547 056c 01F082F8 		bl	BSP_LCD_CtrlRegWr
 566:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_SCROLL_CTRL, 0x0000);     /* Set scrolling line.             
 548              		.loc 1 566 0
 549 0570 4FF06A00 		mov	r0, #106
 550 0574 4FF00001 		mov	r1, #0
 551 0578 01F07CF8 		bl	BSP_LCD_CtrlRegWr
 567:Libraries/BSP/LCD/bsp_lcd.c **** 
 568:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------ PANEL CONTROL CONFI
 569:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL1, 0x0010);
 552              		.loc 1 569 0
 553 057c 4FF09000 		mov	r0, #144
 554 0580 4FF01001 		mov	r1, #16
 555 0584 01F076F8 		bl	BSP_LCD_CtrlRegWr
 570:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL2, 0x0000);
 556              		.loc 1 570 0
 557 0588 4FF09200 		mov	r0, #146
 558 058c 4FF00001 		mov	r1, #0
 559 0590 01F070F8 		bl	BSP_LCD_CtrlRegWr
 571:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL3, 0x0003);
 560              		.loc 1 571 0
 561 0594 4FF09300 		mov	r0, #147
 562 0598 4FF00301 		mov	r1, #3
 563 059c 01F06AF8 		bl	BSP_LCD_CtrlRegWr
 572:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL4, 0x0110);
 564              		.loc 1 572 0
 565 05a0 4FF09500 		mov	r0, #149
 566 05a4 4FF48871 		mov	r1, #272
 567 05a8 01F064F8 		bl	BSP_LCD_CtrlRegWr
 573:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL5, 0x0000);
 568              		.loc 1 573 0
 569 05ac 4FF09700 		mov	r0, #151
 570 05b0 4FF00001 		mov	r1, #0
 571 05b4 01F05EF8 		bl	BSP_LCD_CtrlRegWr
 574:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL6, 0x0000);
 572              		.loc 1 574 0
 573 05b8 4FF09800 		mov	r0, #152
 574 05bc 4FF00001 		mov	r1, #0
 575 05c0 01F058F8 		bl	BSP_LCD_CtrlRegWr
 575:Libraries/BSP/LCD/bsp_lcd.c **** 
 576:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Set GRAM write direction        
 577:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ... I/D = '11'(Hor : inc, Ver : 
 578:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ... AM  = '1' (address is update
 579:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_ENTRY_MODE, 0x1030);
 576              		.loc 1 579 0
 577 05c4 4FF00300 		mov	r0, #3
 578 05c8 41F23001 		movw	r1, #4144
 579 05cc 01F052F8 		bl	BSP_LCD_CtrlRegWr
 580:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL1, 0x0137);          /* 262K color and display ON       
 580              		.loc 1 580 0
 581 05d0 4FF00700 		mov	r0, #7
 582 05d4 40F23711 		movw	r1, #311
 583 05d8 01F04CF8 		bl	BSP_LCD_CtrlRegWr
 581:Libraries/BSP/LCD/bsp_lcd.c **** 
 582:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();
 584              		.loc 1 582 0
 585 05dc 01F0E8F8 		bl	BSP_LCD_Unlock
 583:Libraries/BSP/LCD/bsp_lcd.c **** 
 584:Libraries/BSP/LCD/bsp_lcd.c ****     return (DEF_OK);
 586              		.loc 1 584 0
 587 05e0 4FF00103 		mov	r3, #1
 588              	.L3:
 585:Libraries/BSP/LCD/bsp_lcd.c **** }
 589              		.loc 1 585 0
 590 05e4 1846     		mov	r0, r3
 591 05e6 07F11807 		add	r7, r7, #24
 592 05ea BD46     		mov	sp, r7
 593 05ec 80BD     		pop	{r7, pc}
 594              		.cfi_endproc
 595              	.LFE0:
 597 05ee 00BF     		.align	2
 598              		.global	BSP_LCD_Clr
 599              		.thumb
 600              		.thumb_func
 602              	BSP_LCD_Clr:
 603              	.LFB1:
 586:Libraries/BSP/LCD/bsp_lcd.c **** 
 587:Libraries/BSP/LCD/bsp_lcd.c **** 
 588:Libraries/BSP/LCD/bsp_lcd.c **** /*
 589:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 590:Libraries/BSP/LCD/bsp_lcd.c **** *                                           BSP_LCD_Clr()
 591:Libraries/BSP/LCD/bsp_lcd.c **** *
 592:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Clear the LCD..
 593:Libraries/BSP/LCD/bsp_lcd.c **** *
 594:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
 595:Libraries/BSP/LCD/bsp_lcd.c **** *
 596:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 597:Libraries/BSP/LCD/bsp_lcd.c **** *               DEF_FAIL, Otherwise.
 598:Libraries/BSP/LCD/bsp_lcd.c **** *
 599:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 600:Libraries/BSP/LCD/bsp_lcd.c **** *
 601:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 602:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 603:Libraries/BSP/LCD/bsp_lcd.c **** */
 604:Libraries/BSP/LCD/bsp_lcd.c **** 
 605:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_Clr (void )
 606:Libraries/BSP/LCD/bsp_lcd.c **** {
 604              		.loc 1 606 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 8
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608 05f0 80B5     		push	{r7, lr}
 609              	.LCFI3:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 14, -4
 612              		.cfi_offset 7, -8
 613 05f2 82B0     		sub	sp, sp, #8
 614              	.LCFI4:
 615              		.cfi_def_cfa_offset 16
 616 05f4 00AF     		add	r7, sp, #0
 617              	.LCFI5:
 618              		.cfi_def_cfa_register 7
 607:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT32U     pixel;
 608:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR  color;
 609:Libraries/BSP/LCD/bsp_lcd.c **** 
 610:Libraries/BSP/LCD/bsp_lcd.c **** 
 611:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();
 619              		.loc 1 611 0
 620 05f6 01F0C5F8 		bl	BSP_LCD_Lock
 612:Libraries/BSP/LCD/bsp_lcd.c **** 
 613:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0x0000);      /* Horizontal GRAM Start Address.  
 621              		.loc 1 613 0
 622 05fa 4FF05000 		mov	r0, #80
 623 05fe 4FF00001 		mov	r1, #0
 624 0602 01F037F8 		bl	BSP_LCD_CtrlRegWr
 614:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,
 625              		.loc 1 614 0
 626 0606 4FF05100 		mov	r0, #81
 627 060a 4FF0EF01 		mov	r1, #239
 628 060e 01F031F8 		bl	BSP_LCD_CtrlRegWr
 615:Libraries/BSP/LCD/bsp_lcd.c ****                       (BSP_LCD_WIDTH - 1u));                    /* Horizontal GRAM End   Address.  
 616:Libraries/BSP/LCD/bsp_lcd.c **** 
 617:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, 0x0000);      /* Vertical   GRAM Start Address.  
 629              		.loc 1 617 0
 630 0612 4FF05200 		mov	r0, #82
 631 0616 4FF00001 		mov	r1, #0
 632 061a 01F02BF8 		bl	BSP_LCD_CtrlRegWr
 618:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,
 633              		.loc 1 618 0
 634 061e 4FF05300 		mov	r0, #83
 635 0622 40F23F11 		movw	r1, #319
 636 0626 01F025F8 		bl	BSP_LCD_CtrlRegWr
 619:Libraries/BSP/LCD/bsp_lcd.c ****                       (BSP_LCD_HEIGHT - 1u));                   /* Vertical   GRAM End   Address.  
 620:Libraries/BSP/LCD/bsp_lcd.c **** 
 621:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0);
 637              		.loc 1 621 0
 638 062a 4FF02000 		mov	r0, #32
 639 062e 4FF00001 		mov	r1, #0
 640 0632 01F01FF8 		bl	BSP_LCD_CtrlRegWr
 622:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, 0);
 641              		.loc 1 622 0
 642 0636 4FF02100 		mov	r0, #33
 643 063a 4FF00001 		mov	r1, #0
 644 063e 01F019F8 		bl	BSP_LCD_CtrlRegWr
 623:Libraries/BSP/LCD/bsp_lcd.c **** 
 624:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 645              		.loc 1 624 0
 646 0642 4FF00000 		mov	r0, #0
 647 0646 4FF04001 		mov	r1, #64
 648 064a FFF7FEFF 		bl	CSP_GPIO_BitClr
 625:Libraries/BSP/LCD/bsp_lcd.c **** 
 626:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 649              		.loc 1 626 0
 650 064e 4FF07000 		mov	r0, #112
 651 0652 01F04FF8 		bl	BSP_LCD_SPI_Xfer
 627:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 652              		.loc 1 627 0
 653 0656 4FF00000 		mov	r0, #0
 654 065a 01F04BF8 		bl	BSP_LCD_SPI_Xfer
 628:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 655              		.loc 1 628 0
 656 065e 4FF02200 		mov	r0, #34
 657 0662 01F047F8 		bl	BSP_LCD_SPI_Xfer
 629:Libraries/BSP/LCD/bsp_lcd.c **** 
 630:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 658              		.loc 1 630 0
 659 0666 4FF00000 		mov	r0, #0
 660 066a 4FF04001 		mov	r1, #64
 661 066e FFF7FEFF 		bl	CSP_GPIO_BitSet
 631:Libraries/BSP/LCD/bsp_lcd.c **** 
 632:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 662              		.loc 1 632 0
 663 0672 4FF00000 		mov	r0, #0
 664 0676 4FF04001 		mov	r1, #64
 665 067a FFF7FEFF 		bl	CSP_GPIO_BitClr
 633:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 666              		.loc 1 633 0
 667 067e 4FF07200 		mov	r0, #114
 668 0682 01F037F8 		bl	BSP_LCD_SPI_Xfer
 634:Libraries/BSP/LCD/bsp_lcd.c **** 
 635:Libraries/BSP/LCD/bsp_lcd.c ****     color   = BSP_LCD_Ctxt.BgColor;
 669              		.loc 1 635 0
 670 0686 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 671 068a C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 672 068e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 673 0690 7B80     		strh	r3, [r7, #2]	@ movhi
 636:Libraries/BSP/LCD/bsp_lcd.c **** 
 637:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0u; pixel < BSP_LCD_SIZE; pixel++) {
 674              		.loc 1 637 0
 675 0692 4FF00003 		mov	r3, #0
 676 0696 7B60     		str	r3, [r7, #4]
 677 0698 10E0     		b	.L14
 678              	.L15:
 638:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_SPI_Xfer(color >> 8u);
 679              		.loc 1 638 0 discriminator 2
 680 069a 7B88     		ldrh	r3, [r7, #2]
 681 069c 4FEA1323 		lsr	r3, r3, #8
 682 06a0 9BB2     		uxth	r3, r3
 683 06a2 DBB2     		uxtb	r3, r3
 684 06a4 1846     		mov	r0, r3
 685 06a6 01F025F8 		bl	BSP_LCD_SPI_Xfer
 639:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 686              		.loc 1 639 0 discriminator 2
 687 06aa 7B88     		ldrh	r3, [r7, #2]	@ movhi
 688 06ac DBB2     		uxtb	r3, r3
 689 06ae 1846     		mov	r0, r3
 690 06b0 01F020F8 		bl	BSP_LCD_SPI_Xfer
 637:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0u; pixel < BSP_LCD_SIZE; pixel++) {
 691              		.loc 1 637 0 discriminator 2
 692 06b4 7B68     		ldr	r3, [r7, #4]
 693 06b6 03F10103 		add	r3, r3, #1
 694 06ba 7B60     		str	r3, [r7, #4]
 695              	.L14:
 637:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0u; pixel < BSP_LCD_SIZE; pixel++) {
 696              		.loc 1 637 0 is_stmt 0 discriminator 1
 697 06bc 7A68     		ldr	r2, [r7, #4]
 698 06be 42F6FF33 		movw	r3, #11263
 699 06c2 C0F20103 		movt	r3, 1
 700 06c6 9A42     		cmp	r2, r3
 701 06c8 E7D9     		bls	.L15
 640:Libraries/BSP/LCD/bsp_lcd.c ****     }
 641:Libraries/BSP/LCD/bsp_lcd.c **** 
 642:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 702              		.loc 1 642 0 is_stmt 1
 703 06ca 4FF00000 		mov	r0, #0
 704 06ce 4FF04001 		mov	r1, #64
 705 06d2 FFF7FEFF 		bl	CSP_GPIO_BitSet
 643:Libraries/BSP/LCD/bsp_lcd.c **** 
 644:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();
 706              		.loc 1 644 0
 707 06d6 01F06BF8 		bl	BSP_LCD_Unlock
 645:Libraries/BSP/LCD/bsp_lcd.c **** }
 708              		.loc 1 645 0
 709 06da 07F10807 		add	r7, r7, #8
 710 06de BD46     		mov	sp, r7
 711 06e0 80BD     		pop	{r7, pc}
 712              		.cfi_endproc
 713              	.LFE1:
 715 06e2 00BF     		.align	2
 716              		.global	BSP_LCD_BG_ColorSet
 717              		.thumb
 718              		.thumb_func
 720              	BSP_LCD_BG_ColorSet:
 721              	.LFB2:
 646:Libraries/BSP/LCD/bsp_lcd.c **** 
 647:Libraries/BSP/LCD/bsp_lcd.c **** /*
 648:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 649:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_BG_ColorSet()
 650:Libraries/BSP/LCD/bsp_lcd.c **** *
 651:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Set the background color.
 652:Libraries/BSP/LCD/bsp_lcd.c **** *
 653:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : color  Color to be set.
 654:Libraries/BSP/LCD/bsp_lcd.c **** *
 655:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 656:Libraries/BSP/LCD/bsp_lcd.c **** *
 657:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 658:Libraries/BSP/LCD/bsp_lcd.c **** *
 659:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 660:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 661:Libraries/BSP/LCD/bsp_lcd.c **** */
 662:Libraries/BSP/LCD/bsp_lcd.c **** 
 663:Libraries/BSP/LCD/bsp_lcd.c **** void   BSP_LCD_BG_ColorSet (BSP_LCD_COLOR  color)
 664:Libraries/BSP/LCD/bsp_lcd.c **** {
 722              		.loc 1 664 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726 06e4 80B5     		push	{r7, lr}
 727              	.LCFI6:
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 14, -4
 730              		.cfi_offset 7, -8
 731 06e6 82B0     		sub	sp, sp, #8
 732              	.LCFI7:
 733              		.cfi_def_cfa_offset 16
 734 06e8 00AF     		add	r7, sp, #0
 735              	.LCFI8:
 736              		.cfi_def_cfa_register 7
 737 06ea 0346     		mov	r3, r0
 738 06ec FB80     		strh	r3, [r7, #6]	@ movhi
 665:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();
 739              		.loc 1 665 0
 740 06ee 01F049F8 		bl	BSP_LCD_Lock
 666:Libraries/BSP/LCD/bsp_lcd.c **** 
 667:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.BgColor = color;
 741              		.loc 1 667 0
 742 06f2 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 743 06f6 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 744 06fa FA88     		ldrh	r2, [r7, #6]	@ movhi
 745 06fc 1A80     		strh	r2, [r3, #0]	@ movhi
 668:Libraries/BSP/LCD/bsp_lcd.c **** 
 669:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();
 746              		.loc 1 669 0
 747 06fe 01F057F8 		bl	BSP_LCD_Unlock
 670:Libraries/BSP/LCD/bsp_lcd.c **** }
 748              		.loc 1 670 0
 749 0702 07F10807 		add	r7, r7, #8
 750 0706 BD46     		mov	sp, r7
 751 0708 80BD     		pop	{r7, pc}
 752              		.cfi_endproc
 753              	.LFE2:
 755 070a 00BF     		.align	2
 756              		.global	BSP_LCD_ImgDraw
 757              		.thumb
 758              		.thumb_func
 760              	BSP_LCD_ImgDraw:
 761              	.LFB3:
 671:Libraries/BSP/LCD/bsp_lcd.c **** 
 672:Libraries/BSP/LCD/bsp_lcd.c **** 
 673:Libraries/BSP/LCD/bsp_lcd.c **** /*
 674:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 675:Libraries/BSP/LCD/bsp_lcd.c **** *                                              IMAGE FUNCTIONS
 676:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 677:Libraries/BSP/LCD/bsp_lcd.c **** */
 678:Libraries/BSP/LCD/bsp_lcd.c **** 
 679:Libraries/BSP/LCD/bsp_lcd.c **** 
 680:Libraries/BSP/LCD/bsp_lcd.c **** /*
 681:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 682:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_ImgDraw()
 683:Libraries/BSP/LCD/bsp_lcd.c **** *
 684:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a image.
 685:Libraries/BSP/LCD/bsp_lcd.c **** *
 686:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x      X axis position in pixels
 687:Libraries/BSP/LCD/bsp_lcd.c **** *
 688:Libraries/BSP/LCD/bsp_lcd.c **** *               y      Y axis Position
 689:Libraries/BSP/LCD/bsp_lcd.c **** *
 690:Libraries/BSP/LCD/bsp_lcd.c **** *               p_img  Pointer to image.
 691:Libraries/BSP/LCD/bsp_lcd.c **** *
 692:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 693:Libraries/BSP/LCD/bsp_lcd.c **** *
 694:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 695:Libraries/BSP/LCD/bsp_lcd.c **** *
 696:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 697:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 698:Libraries/BSP/LCD/bsp_lcd.c **** */
 699:Libraries/BSP/LCD/bsp_lcd.c **** 
 700:Libraries/BSP/LCD/bsp_lcd.c **** 
 701:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_ImgDraw (BSP_LCD_PIXEL   x,
 702:Libraries/BSP/LCD/bsp_lcd.c ****                        BSP_LCD_PIXEL   y,
 703:Libraries/BSP/LCD/bsp_lcd.c ****                        BSP_LCD_IMG    *p_img)
 704:Libraries/BSP/LCD/bsp_lcd.c **** {
 762              		.loc 1 704 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 8
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 070c 90B5     		push	{r4, r7, lr}
 767              	.LCFI9:
 768              		.cfi_def_cfa_offset 12
 769              		.cfi_offset 14, -4
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 4, -12
 772 070e 85B0     		sub	sp, sp, #20
 773              	.LCFI10:
 774              		.cfi_def_cfa_offset 32
 775 0710 02AF     		add	r7, sp, #8
 776              	.LCFI11:
 777              		.cfi_def_cfa 7, 24
 778 0712 0B46     		mov	r3, r1
 779 0714 3A60     		str	r2, [r7, #0]
 780 0716 0246     		mov	r2, r0	@ movhi
 781 0718 FA80     		strh	r2, [r7, #6]	@ movhi
 782 071a BB80     		strh	r3, [r7, #4]	@ movhi
 705:Libraries/BSP/LCD/bsp_lcd.c **** 
 706:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_img == (BSP_LCD_IMG *)0) {
 783              		.loc 1 706 0
 784 071c 3B68     		ldr	r3, [r7, #0]
 785 071e 002B     		cmp	r3, #0
 786 0720 0FD0     		beq	.L20
 787              	.L18:
 707:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 708:Libraries/BSP/LCD/bsp_lcd.c ****     }
 709:Libraries/BSP/LCD/bsp_lcd.c **** 
 710:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 788              		.loc 1 710 0
 789 0722 01F02FF8 		bl	BSP_LCD_Lock
 711:Libraries/BSP/LCD/bsp_lcd.c **** 
 712:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.              
 713:Libraries/BSP/LCD/bsp_lcd.c ****                              y,
 714:Libraries/BSP/LCD/bsp_lcd.c ****                              p_img->Width,
 790              		.loc 1 714 0
 791 0726 3B68     		ldr	r3, [r7, #0]
 712:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.              
 792              		.loc 1 712 0
 793 0728 9A88     		ldrh	r2, [r3, #4]
 715:Libraries/BSP/LCD/bsp_lcd.c ****                              p_img->Height,
 794              		.loc 1 715 0
 795 072a 3B68     		ldr	r3, [r7, #0]
 712:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.              
 796              		.loc 1 712 0
 797 072c DB88     		ldrh	r3, [r3, #6]
 716:Libraries/BSP/LCD/bsp_lcd.c ****                              p_img->BitmapPtr);
 798              		.loc 1 716 0
 799 072e 3968     		ldr	r1, [r7, #0]
 800 0730 8C68     		ldr	r4, [r1, #8]
 712:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.              
 801              		.loc 1 712 0
 802 0732 F888     		ldrh	r0, [r7, #6]
 803 0734 B988     		ldrh	r1, [r7, #4]
 804 0736 0094     		str	r4, [sp, #0]
 805 0738 00F000FE 		bl	BSP_LCD_BitmapDrawUnlock
 717:Libraries/BSP/LCD/bsp_lcd.c **** 
 718:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 806              		.loc 1 718 0
 807 073c 01F038F8 		bl	BSP_LCD_Unlock
 808 0740 00E0     		b	.L17
 809              	.L20:
 707:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 810              		.loc 1 707 0
 811 0742 00BF     		nop
 812              	.L17:
 719:Libraries/BSP/LCD/bsp_lcd.c **** }
 813              		.loc 1 719 0
 814 0744 07F10C07 		add	r7, r7, #12
 815 0748 BD46     		mov	sp, r7
 816 074a 90BD     		pop	{r4, r7, pc}
 817              		.cfi_endproc
 818              	.LFE3:
 820              		.align	2
 821              		.global	BSP_LCD_ImgTblSet
 822              		.thumb
 823              		.thumb_func
 825              	BSP_LCD_ImgTblSet:
 826              	.LFB4:
 720:Libraries/BSP/LCD/bsp_lcd.c **** 
 721:Libraries/BSP/LCD/bsp_lcd.c **** 
 722:Libraries/BSP/LCD/bsp_lcd.c **** /*
 723:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 724:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_ImgTblSet()
 725:Libraries/BSP/LCD/bsp_lcd.c **** *
 726:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Set the image table.
 727:Libraries/BSP/LCD/bsp_lcd.c **** *
 728:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : p_tbl   Pointer to the image table.
 729:Libraries/BSP/LCD/bsp_lcd.c **** *
 730:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 731:Libraries/BSP/LCD/bsp_lcd.c **** *
 732:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 733:Libraries/BSP/LCD/bsp_lcd.c **** *
 734:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 735:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 736:Libraries/BSP/LCD/bsp_lcd.c **** */
 737:Libraries/BSP/LCD/bsp_lcd.c **** 
 738:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_ImgTblSet (BSP_LCD_IMG  **p_tbl)
 739:Libraries/BSP/LCD/bsp_lcd.c **** {
 827              		.loc 1 739 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 8
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 074c 80B5     		push	{r7, lr}
 832              	.LCFI12:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 14, -4
 835              		.cfi_offset 7, -8
 836 074e 82B0     		sub	sp, sp, #8
 837              	.LCFI13:
 838              		.cfi_def_cfa_offset 16
 839 0750 00AF     		add	r7, sp, #0
 840              	.LCFI14:
 841              		.cfi_def_cfa_register 7
 842 0752 7860     		str	r0, [r7, #4]
 740:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_tbl == (BSP_LCD_IMG **) 0) {
 843              		.loc 1 740 0
 844 0754 7B68     		ldr	r3, [r7, #4]
 845 0756 002B     		cmp	r3, #0
 846 0758 0AD0     		beq	.L24
 847              	.L22:
 741:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 742:Libraries/BSP/LCD/bsp_lcd.c ****     }
 743:Libraries/BSP/LCD/bsp_lcd.c **** 
 744:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();
 848              		.loc 1 744 0
 849 075a 01F013F8 		bl	BSP_LCD_Lock
 745:Libraries/BSP/LCD/bsp_lcd.c **** 
 746:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.ImgTblPtr = p_tbl;
 850              		.loc 1 746 0
 851 075e 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 852 0762 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 853 0766 7A68     		ldr	r2, [r7, #4]
 854 0768 1A64     		str	r2, [r3, #64]
 747:Libraries/BSP/LCD/bsp_lcd.c **** 
 748:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();
 855              		.loc 1 748 0
 856 076a 01F021F8 		bl	BSP_LCD_Unlock
 857 076e 00E0     		b	.L21
 858              	.L24:
 741:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 859              		.loc 1 741 0
 860 0770 00BF     		nop
 861              	.L21:
 749:Libraries/BSP/LCD/bsp_lcd.c **** }
 862              		.loc 1 749 0
 863 0772 07F10807 		add	r7, r7, #8
 864 0776 BD46     		mov	sp, r7
 865 0778 80BD     		pop	{r7, pc}
 866              		.cfi_endproc
 867              	.LFE4:
 869 077a 00BF     		.align	2
 870              		.global	BSP_LCD_ImgGetByName
 871              		.thumb
 872              		.thumb_func
 874              	BSP_LCD_ImgGetByName:
 875              	.LFB5:
 750:Libraries/BSP/LCD/bsp_lcd.c **** 
 751:Libraries/BSP/LCD/bsp_lcd.c **** 
 752:Libraries/BSP/LCD/bsp_lcd.c **** /*
 753:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 754:Libraries/BSP/LCD/bsp_lcd.c **** *                                       BSP_LCD_ImgGetByName()
 755:Libraries/BSP/LCD/bsp_lcd.c **** *
 756:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Look for an image from the image table using the image name.
 757:Libraries/BSP/LCD/bsp_lcd.c **** *
 758:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : p_name   Pointer to the image name.
 759:Libraries/BSP/LCD/bsp_lcd.c **** *
 760:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : Pointer to the required image. If the image cannot be found in the image table a 'N
 761:Libraries/BSP/LCD/bsp_lcd.c **** *               pointer is returned.
 762:Libraries/BSP/LCD/bsp_lcd.c **** *
 763:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 764:Libraries/BSP/LCD/bsp_lcd.c **** *
 765:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 766:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 767:Libraries/BSP/LCD/bsp_lcd.c **** */
 768:Libraries/BSP/LCD/bsp_lcd.c **** 
 769:Libraries/BSP/LCD/bsp_lcd.c **** BSP_LCD_IMG  *BSP_LCD_ImgGetByName  (CPU_CHAR  *p_name)
 770:Libraries/BSP/LCD/bsp_lcd.c **** {
 876              		.loc 1 770 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 32
 879              		@ frame_needed = 1, uses_anonymous_args = 0
 880 077c 80B5     		push	{r7, lr}
 881              	.LCFI15:
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 14, -4
 884              		.cfi_offset 7, -8
 885 077e 88B0     		sub	sp, sp, #32
 886              	.LCFI16:
 887              		.cfi_def_cfa_offset 40
 888 0780 00AF     		add	r7, sp, #0
 889              	.LCFI17:
 890              		.cfi_def_cfa_register 7
 891 0782 7860     		str	r0, [r7, #4]
 771:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_IMG     **p_img_tbl;
 772:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_IMG      *p_img;
 773:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT16S        cmp;
 774:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_SIZE_T        img_ix;
 775:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_BOOLEAN       found;
 776:Libraries/BSP/LCD/bsp_lcd.c **** 
 777:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------------- ARGUMENTS CH
 778:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_name == (CPU_CHAR *)0) {                              /* NULL pointer ?                  
 892              		.loc 1 778 0
 893 0784 7B68     		ldr	r3, [r7, #4]
 894 0786 002B     		cmp	r3, #0
 895 0788 02D1     		bne	.L26
 779:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_IMG *)0);
 896              		.loc 1 779 0
 897 078a 4FF00003 		mov	r3, #0
 898 078e 45E0     		b	.L27
 899              	.L26:
 780:Libraries/BSP/LCD/bsp_lcd.c ****     }
 781:Libraries/BSP/LCD/bsp_lcd.c **** 
 782:Libraries/BSP/LCD/bsp_lcd.c ****     p_img_tbl = BSP_LCD_Ctxt.ImgTblPtr;
 900              		.loc 1 782 0
 901 0790 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 902 0794 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 903 0798 1B6C     		ldr	r3, [r3, #64]
 904 079a 3B61     		str	r3, [r7, #16]
 783:Libraries/BSP/LCD/bsp_lcd.c **** 
 784:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_img_tbl == (BSP_LCD_IMG **)0) {                       /* If a image table has not been se
 905              		.loc 1 784 0
 906 079c 3B69     		ldr	r3, [r7, #16]
 907 079e 002B     		cmp	r3, #0
 908 07a0 02D1     		bne	.L28
 785:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_IMG *)0);
 909              		.loc 1 785 0
 910 07a2 4FF00003 		mov	r3, #0
 911 07a6 39E0     		b	.L27
 912              	.L28:
 786:Libraries/BSP/LCD/bsp_lcd.c ****     }
 787:Libraries/BSP/LCD/bsp_lcd.c **** 
 788:Libraries/BSP/LCD/bsp_lcd.c ****     found  = DEF_NO;
 913              		.loc 1 788 0
 914 07a8 4FF00003 		mov	r3, #0
 915 07ac FB75     		strb	r3, [r7, #23]
 789:Libraries/BSP/LCD/bsp_lcd.c ****     img_ix = 0u;
 916              		.loc 1 789 0
 917 07ae 4FF00003 		mov	r3, #0
 918 07b2 BB61     		str	r3, [r7, #24]
 790:Libraries/BSP/LCD/bsp_lcd.c ****     p_img  = (BSP_LCD_IMG *)0;
 919              		.loc 1 790 0
 920 07b4 4FF00003 		mov	r3, #0
 921 07b8 FB61     		str	r3, [r7, #28]
 791:Libraries/BSP/LCD/bsp_lcd.c ****                                                                /* Search the image in the font tabl
 792:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
 922              		.loc 1 792 0
 923 07ba 1AE0     		b	.L29
 924              	.L32:
 793:Libraries/BSP/LCD/bsp_lcd.c ****            (found             ==  DEF_NO              ) &&
 794:Libraries/BSP/LCD/bsp_lcd.c ****            (img_ix             <  BSP_LCD_MAX_NBR_IMG)) {
 795:Libraries/BSP/LCD/bsp_lcd.c **** 
 796:Libraries/BSP/LCD/bsp_lcd.c ****         p_img = p_img_tbl[img_ix];
 925              		.loc 1 796 0
 926 07bc BB69     		ldr	r3, [r7, #24]
 927 07be 4FEA8303 		lsl	r3, r3, #2
 928 07c2 3A69     		ldr	r2, [r7, #16]
 929 07c4 D318     		adds	r3, r2, r3
 930 07c6 1B68     		ldr	r3, [r3, #0]
 931 07c8 FB61     		str	r3, [r7, #28]
 797:Libraries/BSP/LCD/bsp_lcd.c ****         cmp   = Str_Cmp(p_name,                                 /* Compare the image name.         
 798:Libraries/BSP/LCD/bsp_lcd.c ****                         p_img->NamePtr);
 932              		.loc 1 798 0
 933 07ca FB69     		ldr	r3, [r7, #28]
 934 07cc 1B68     		ldr	r3, [r3, #0]
 797:Libraries/BSP/LCD/bsp_lcd.c ****         cmp   = Str_Cmp(p_name,                                 /* Compare the image name.         
 935              		.loc 1 797 0
 936 07ce 7868     		ldr	r0, [r7, #4]
 937 07d0 1946     		mov	r1, r3
 938 07d2 FFF7FEFF 		bl	Str_Cmp
 939 07d6 0346     		mov	r3, r0
 940 07d8 FB81     		strh	r3, [r7, #14]	@ movhi
 799:Libraries/BSP/LCD/bsp_lcd.c **** 
 800:Libraries/BSP/LCD/bsp_lcd.c ****         if (cmp == (CPU_INT16S)0) {                             /* If the image is found ...       
 941              		.loc 1 800 0
 942 07da B7F90E30 		ldrsh	r3, [r7, #14]
 943 07de 002B     		cmp	r3, #0
 944 07e0 03D1     		bne	.L30
 801:Libraries/BSP/LCD/bsp_lcd.c ****             found = DEF_YES;                                    /* ... exit the search routine.    
 945              		.loc 1 801 0
 946 07e2 4FF00103 		mov	r3, #1
 947 07e6 FB75     		strb	r3, [r7, #23]
 948 07e8 03E0     		b	.L29
 949              	.L30:
 802:Libraries/BSP/LCD/bsp_lcd.c ****         } else {
 803:Libraries/BSP/LCD/bsp_lcd.c ****             img_ix++;                                           /* ... move to the next entry, othe
 950              		.loc 1 803 0
 951 07ea BB69     		ldr	r3, [r7, #24]
 952 07ec 03F10103 		add	r3, r3, #1
 953 07f0 BB61     		str	r3, [r7, #24]
 954              	.L29:
 792:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
 955              		.loc 1 792 0 discriminator 1
 956 07f2 BB69     		ldr	r3, [r7, #24]
 957 07f4 4FEA8303 		lsl	r3, r3, #2
 958 07f8 3A69     		ldr	r2, [r7, #16]
 959 07fa D318     		adds	r3, r2, r3
 960 07fc 1B68     		ldr	r3, [r3, #0]
 961 07fe 002B     		cmp	r3, #0
 962 0800 05D0     		beq	.L31
 792:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
 963              		.loc 1 792 0 is_stmt 0 discriminator 2
 964 0802 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 965 0804 002B     		cmp	r3, #0
 966 0806 02D1     		bne	.L31
 793:Libraries/BSP/LCD/bsp_lcd.c ****            (found             ==  DEF_NO              ) &&
 967              		.loc 1 793 0 is_stmt 1
 968 0808 BB69     		ldr	r3, [r7, #24]
 969 080a FF2B     		cmp	r3, #255
 970 080c D6D9     		bls	.L32
 971              	.L31:
 804:Libraries/BSP/LCD/bsp_lcd.c ****         }
 805:Libraries/BSP/LCD/bsp_lcd.c ****     }
 806:Libraries/BSP/LCD/bsp_lcd.c **** 
 807:Libraries/BSP/LCD/bsp_lcd.c ****     if (found == DEF_NO) {                                      /* If an image could not been found
 972              		.loc 1 807 0
 973 080e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 974 0810 002B     		cmp	r3, #0
 975 0812 02D1     		bne	.L33
 808:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_IMG *)0);                              /* ... return a 'NULL' pointer.    
 976              		.loc 1 808 0
 977 0814 4FF00003 		mov	r3, #0
 978 0818 00E0     		b	.L27
 979              	.L33:
 809:Libraries/BSP/LCD/bsp_lcd.c ****     }
 810:Libraries/BSP/LCD/bsp_lcd.c **** 
 811:Libraries/BSP/LCD/bsp_lcd.c ****     return ((p_img));
 980              		.loc 1 811 0
 981 081a FB69     		ldr	r3, [r7, #28]
 982              	.L27:
 812:Libraries/BSP/LCD/bsp_lcd.c **** }
 983              		.loc 1 812 0
 984 081c 1846     		mov	r0, r3
 985 081e 07F12007 		add	r7, r7, #32
 986 0822 BD46     		mov	sp, r7
 987 0824 80BD     		pop	{r7, pc}
 988              		.cfi_endproc
 989              	.LFE5:
 991 0826 00BF     		.align	2
 992              		.global	BSP_LCD_TextColorSet
 993              		.thumb
 994              		.thumb_func
 996              	BSP_LCD_TextColorSet:
 997              	.LFB6:
 813:Libraries/BSP/LCD/bsp_lcd.c **** 
 814:Libraries/BSP/LCD/bsp_lcd.c **** 
 815:Libraries/BSP/LCD/bsp_lcd.c **** /*
 816:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 817:Libraries/BSP/LCD/bsp_lcd.c **** *                                              TEXT FUNCTIONS
 818:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 819:Libraries/BSP/LCD/bsp_lcd.c **** */
 820:Libraries/BSP/LCD/bsp_lcd.c **** 
 821:Libraries/BSP/LCD/bsp_lcd.c **** 
 822:Libraries/BSP/LCD/bsp_lcd.c **** /*
 823:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 824:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_ColorSet()
 825:Libraries/BSP/LCD/bsp_lcd.c **** *
 826:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Set the text color.
 827:Libraries/BSP/LCD/bsp_lcd.c **** *
 828:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : color    Color to be set.
 829:Libraries/BSP/LCD/bsp_lcd.c **** *
 830:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 831:Libraries/BSP/LCD/bsp_lcd.c **** *
 832:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 833:Libraries/BSP/LCD/bsp_lcd.c **** *
 834:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 835:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 836:Libraries/BSP/LCD/bsp_lcd.c **** */
 837:Libraries/BSP/LCD/bsp_lcd.c **** 
 838:Libraries/BSP/LCD/bsp_lcd.c **** void   BSP_LCD_TextColorSet  (BSP_LCD_COLOR  color)
 839:Libraries/BSP/LCD/bsp_lcd.c **** {
 998              		.loc 1 839 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002 0828 80B5     		push	{r7, lr}
 1003              	.LCFI18:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 14, -4
 1006              		.cfi_offset 7, -8
 1007 082a 82B0     		sub	sp, sp, #8
 1008              	.LCFI19:
 1009              		.cfi_def_cfa_offset 16
 1010 082c 00AF     		add	r7, sp, #0
 1011              	.LCFI20:
 1012              		.cfi_def_cfa_register 7
 1013 082e 0346     		mov	r3, r0
 1014 0830 FB80     		strh	r3, [r7, #6]	@ movhi
 840:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();
 1015              		.loc 1 840 0
 1016 0832 00F0A7FF 		bl	BSP_LCD_Lock
 841:Libraries/BSP/LCD/bsp_lcd.c **** 
 842:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.TextColor = color;
 1017              		.loc 1 842 0
 1018 0836 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1019 083a C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1020 083e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1021 0840 5A80     		strh	r2, [r3, #2]	@ movhi
 843:Libraries/BSP/LCD/bsp_lcd.c **** 
 844:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();
 1022              		.loc 1 844 0
 1023 0842 00F0B5FF 		bl	BSP_LCD_Unlock
 845:Libraries/BSP/LCD/bsp_lcd.c **** }
 1024              		.loc 1 845 0
 1025 0846 07F10807 		add	r7, r7, #8
 1026 084a BD46     		mov	sp, r7
 1027 084c 80BD     		pop	{r7, pc}
 1028              		.cfi_endproc
 1029              	.LFE6:
 1031 084e 00BF     		.align	2
 1032              		.global	BSP_LCD_TextLineClr
 1033              		.thumb
 1034              		.thumb_func
 1036              	BSP_LCD_TextLineClr:
 1037              	.LFB7:
 846:Libraries/BSP/LCD/bsp_lcd.c **** 
 847:Libraries/BSP/LCD/bsp_lcd.c **** 
 848:Libraries/BSP/LCD/bsp_lcd.c **** /*
 849:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 850:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_ColorSet()
 851:Libraries/BSP/LCD/bsp_lcd.c **** *
 852:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Clear a line.
 853:Libraries/BSP/LCD/bsp_lcd.c **** *
 854:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : line :   Line to clear.
 855:Libraries/BSP/LCD/bsp_lcd.c **** *
 856:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 857:Libraries/BSP/LCD/bsp_lcd.c **** *
 858:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 859:Libraries/BSP/LCD/bsp_lcd.c **** *
 860:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 861:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 862:Libraries/BSP/LCD/bsp_lcd.c **** */
 863:Libraries/BSP/LCD/bsp_lcd.c **** 
 864:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_TextLineClr (BSP_LCD_TEXT_POS line)
 865:Libraries/BSP/LCD/bsp_lcd.c **** {
 1038              		.loc 1 865 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 24
 1041              		@ frame_needed = 1, uses_anonymous_args = 0
 1042 0850 80B5     		push	{r7, lr}
 1043              	.LCFI21:
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 14, -4
 1046              		.cfi_offset 7, -8
 1047 0852 86B0     		sub	sp, sp, #24
 1048              	.LCFI22:
 1049              		.cfi_def_cfa_offset 32
 1050 0854 00AF     		add	r7, sp, #0
 1051              	.LCFI23:
 1052              		.cfi_def_cfa_register 7
 1053 0856 0346     		mov	r3, r0
 1054 0858 FB71     		strb	r3, [r7, #7]
 866:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_DEV      *p_dev;
 867:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT     *p_font;
 868:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL     pixel_x;
 869:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL     pixel_y;
 870:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL     pixel_line;
 871:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR     color;
 872:Libraries/BSP/LCD/bsp_lcd.c **** 
 873:Libraries/BSP/LCD/bsp_lcd.c **** 
 874:Libraries/BSP/LCD/bsp_lcd.c **** 
 875:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.  
 1055              		.loc 1 875 0
 1056 085a 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1057 085e C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1058 0862 3B61     		str	r3, [r7, #16]
 876:Libraries/BSP/LCD/bsp_lcd.c **** 
 877:Libraries/BSP/LCD/bsp_lcd.c ****     if (line > p_dev->TextLineMax) {                            /* Check the text coordinates bound
 1059              		.loc 1 877 0
 1060 0864 3B69     		ldr	r3, [r7, #16]
 1061 0866 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1062 0868 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1063 086a 9A42     		cmp	r2, r3
 1064 086c 00F29480 		bhi	.L43
 1065              	.L36:
 878:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 879:Libraries/BSP/LCD/bsp_lcd.c ****     }
 880:Libraries/BSP/LCD/bsp_lcd.c **** 
 881:Libraries/BSP/LCD/bsp_lcd.c ****     p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current f
 1066              		.loc 1 881 0
 1067 0870 3B69     		ldr	r3, [r7, #16]
 1068 0872 DB68     		ldr	r3, [r3, #12]
 1069 0874 FB60     		str	r3, [r7, #12]
 882:Libraries/BSP/LCD/bsp_lcd.c **** 
 883:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font == (BSP_LCD_FONT *)0) {
 1070              		.loc 1 883 0
 1071 0876 FB68     		ldr	r3, [r7, #12]
 1072 0878 002B     		cmp	r3, #0
 1073 087a 00F08F80 		beq	.L44
 1074              	.L38:
 884:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 885:Libraries/BSP/LCD/bsp_lcd.c ****     }
 886:Libraries/BSP/LCD/bsp_lcd.c **** 
 887:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1075              		.loc 1 887 0
 1076 087e 00F081FF 		bl	BSP_LCD_Lock
 888:Libraries/BSP/LCD/bsp_lcd.c **** 
 889:Libraries/BSP/LCD/bsp_lcd.c ****     color       = p_dev->BgColor;
 1077              		.loc 1 889 0
 1078 0882 3B69     		ldr	r3, [r7, #16]
 1079 0884 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1080 0886 7B81     		strh	r3, [r7, #10]	@ movhi
 890:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_line  = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT * line)
 1081              		.loc 1 890 0
 1082 0888 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1083 088a 1346     		mov	r3, r2
 1084 088c 4FEA8303 		lsl	r3, r3, #2
 1085 0890 9B18     		adds	r3, r3, r2
 1086 0892 4FEA8313 		lsl	r3, r3, #6
 1087 0896 1A46     		mov	r2, r3
 891:Libraries/BSP/LCD/bsp_lcd.c ****                 / p_dev->TextLineMax);
 1088              		.loc 1 891 0
 1089 0898 3B69     		ldr	r3, [r7, #16]
 1090 089a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1091 089c B2FBF3F3 		udiv	r3, r2, r3
 890:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_line  = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT * line)
 1092              		.loc 1 890 0
 1093 08a0 3B81     		strh	r3, [r7, #8]	@ movhi
 892:Libraries/BSP/LCD/bsp_lcd.c **** 
 893:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0);
 1094              		.loc 1 893 0
 1095 08a2 4FF05000 		mov	r0, #80
 1096 08a6 4FF00001 		mov	r1, #0
 1097 08aa 00F0E3FE 		bl	BSP_LCD_CtrlRegWr
 894:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   BSP_LCD_WIDTH - 1u);
 1098              		.loc 1 894 0
 1099 08ae 4FF05100 		mov	r0, #81
 1100 08b2 4FF0EF01 		mov	r1, #239
 1101 08b6 00F0DDFE 		bl	BSP_LCD_CtrlRegWr
 895:Libraries/BSP/LCD/bsp_lcd.c **** 
 896:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, pixel_line);
 1102              		.loc 1 896 0
 1103 08ba 3B89     		ldrh	r3, [r7, #8]
 1104 08bc 4FF05200 		mov	r0, #82
 1105 08c0 1946     		mov	r1, r3
 1106 08c2 00F0D7FE 		bl	BSP_LCD_CtrlRegWr
 897:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   pixel_line + p_font->Height - 1u);
 1107              		.loc 1 897 0
 1108 08c6 FB68     		ldr	r3, [r7, #12]
 1109 08c8 1A89     		ldrh	r2, [r3, #8]
 1110 08ca 3B89     		ldrh	r3, [r7, #8]	@ movhi
 1111 08cc D318     		adds	r3, r2, r3
 1112 08ce 9BB2     		uxth	r3, r3
 1113 08d0 03F1FF33 		add	r3, r3, #-1
 1114 08d4 9BB2     		uxth	r3, r3
 1115 08d6 4FF05300 		mov	r0, #83
 1116 08da 1946     		mov	r1, r3
 1117 08dc 00F0CAFE 		bl	BSP_LCD_CtrlRegWr
 898:Libraries/BSP/LCD/bsp_lcd.c **** 
 899:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0);
 1118              		.loc 1 899 0
 1119 08e0 4FF02000 		mov	r0, #32
 1120 08e4 4FF00001 		mov	r1, #0
 1121 08e8 00F0C4FE 		bl	BSP_LCD_CtrlRegWr
 900:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, pixel_line);
 1122              		.loc 1 900 0
 1123 08ec 3B89     		ldrh	r3, [r7, #8]
 1124 08ee 4FF02100 		mov	r0, #33
 1125 08f2 1946     		mov	r1, r3
 1126 08f4 00F0BEFE 		bl	BSP_LCD_CtrlRegWr
 901:Libraries/BSP/LCD/bsp_lcd.c **** 
 902:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 1127              		.loc 1 902 0
 1128 08f8 4FF00000 		mov	r0, #0
 1129 08fc 4FF04001 		mov	r1, #64
 1130 0900 FFF7FEFF 		bl	CSP_GPIO_BitClr
 903:Libraries/BSP/LCD/bsp_lcd.c **** 
 904:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 1131              		.loc 1 904 0
 1132 0904 4FF07000 		mov	r0, #112
 1133 0908 00F0F4FE 		bl	BSP_LCD_SPI_Xfer
 905:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 1134              		.loc 1 905 0
 1135 090c 4FF00000 		mov	r0, #0
 1136 0910 00F0F0FE 		bl	BSP_LCD_SPI_Xfer
 906:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 1137              		.loc 1 906 0
 1138 0914 4FF02200 		mov	r0, #34
 1139 0918 00F0ECFE 		bl	BSP_LCD_SPI_Xfer
 907:Libraries/BSP/LCD/bsp_lcd.c **** 
 908:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 1140              		.loc 1 908 0
 1141 091c 4FF00000 		mov	r0, #0
 1142 0920 4FF04001 		mov	r1, #64
 1143 0924 FFF7FEFF 		bl	CSP_GPIO_BitSet
 909:Libraries/BSP/LCD/bsp_lcd.c **** 
 910:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 1144              		.loc 1 910 0
 1145 0928 4FF00000 		mov	r0, #0
 1146 092c 4FF04001 		mov	r1, #64
 1147 0930 FFF7FEFF 		bl	CSP_GPIO_BitClr
 911:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 1148              		.loc 1 911 0
 1149 0934 4FF07200 		mov	r0, #114
 1150 0938 00F0DCFE 		bl	BSP_LCD_SPI_Xfer
 912:Libraries/BSP/LCD/bsp_lcd.c **** 
 913:Libraries/BSP/LCD/bsp_lcd.c **** 
 914:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
 1151              		.loc 1 914 0
 1152 093c 4FF00003 		mov	r3, #0
 1153 0940 BB82     		strh	r3, [r7, #20]	@ movhi
 1154 0942 1BE0     		b	.L39
 1155              	.L42:
 915:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < BSP_LCD_WIDTH - 1u; pixel_x++) {
 1156              		.loc 1 915 0
 1157 0944 4FF00003 		mov	r3, #0
 1158 0948 FB82     		strh	r3, [r7, #22]	@ movhi
 1159 094a 10E0     		b	.L40
 1160              	.L41:
 916:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color >> 8u);
 1161              		.loc 1 916 0 discriminator 2
 1162 094c 7B89     		ldrh	r3, [r7, #10]
 1163 094e 4FEA1323 		lsr	r3, r3, #8
 1164 0952 9BB2     		uxth	r3, r3
 1165 0954 DBB2     		uxtb	r3, r3
 1166 0956 1846     		mov	r0, r3
 1167 0958 00F0CCFE 		bl	BSP_LCD_SPI_Xfer
 917:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 1168              		.loc 1 917 0 discriminator 2
 1169 095c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1170 095e DBB2     		uxtb	r3, r3
 1171 0960 1846     		mov	r0, r3
 1172 0962 00F0C7FE 		bl	BSP_LCD_SPI_Xfer
 915:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < BSP_LCD_WIDTH - 1u; pixel_x++) {
 1173              		.loc 1 915 0 discriminator 2
 1174 0966 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 1175 0968 03F10103 		add	r3, r3, #1
 1176 096c FB82     		strh	r3, [r7, #22]	@ movhi
 1177              	.L40:
 915:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < BSP_LCD_WIDTH - 1u; pixel_x++) {
 1178              		.loc 1 915 0 is_stmt 0 discriminator 1
 1179 096e FB8A     		ldrh	r3, [r7, #22]
 1180 0970 EE2B     		cmp	r3, #238
 1181 0972 EBD9     		bls	.L41
 914:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
 1182              		.loc 1 914 0 is_stmt 1
 1183 0974 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1184 0976 03F10103 		add	r3, r3, #1
 1185 097a BB82     		strh	r3, [r7, #20]	@ movhi
 1186              	.L39:
 914:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
 1187              		.loc 1 914 0 is_stmt 0 discriminator 1
 1188 097c FB68     		ldr	r3, [r7, #12]
 1189 097e 1B89     		ldrh	r3, [r3, #8]
 1190 0980 BA8A     		ldrh	r2, [r7, #20]
 1191 0982 9A42     		cmp	r2, r3
 1192 0984 DED3     		bcc	.L42
 918:Libraries/BSP/LCD/bsp_lcd.c ****         }
 919:Libraries/BSP/LCD/bsp_lcd.c ****     }
 920:Libraries/BSP/LCD/bsp_lcd.c **** 
 921:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 1193              		.loc 1 921 0 is_stmt 1
 1194 0986 4FF00000 		mov	r0, #0
 1195 098a 4FF04001 		mov	r1, #64
 1196 098e FFF7FEFF 		bl	CSP_GPIO_BitSet
 922:Libraries/BSP/LCD/bsp_lcd.c **** 
 923:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 1197              		.loc 1 923 0
 1198 0992 00F00DFF 		bl	BSP_LCD_Unlock
 1199 0996 02E0     		b	.L35
 1200              	.L43:
 878:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1201              		.loc 1 878 0
 1202 0998 00BF     		nop
 1203 099a 00E0     		b	.L35
 1204              	.L44:
 884:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1205              		.loc 1 884 0
 1206 099c 00BF     		nop
 1207              	.L35:
 924:Libraries/BSP/LCD/bsp_lcd.c **** 
 925:Libraries/BSP/LCD/bsp_lcd.c **** }
 1208              		.loc 1 925 0
 1209 099e 07F11807 		add	r7, r7, #24
 1210 09a2 BD46     		mov	sp, r7
 1211 09a4 80BD     		pop	{r7, pc}
 1212              		.cfi_endproc
 1213              	.LFE7:
 1215 09a6 00BF     		.align	2
 1216              		.global	BSP_LCD_TextDispStr
 1217              		.thumb
 1218              		.thumb_func
 1220              	BSP_LCD_TextDispStr:
 1221              	.LFB8:
 926:Libraries/BSP/LCD/bsp_lcd.c **** 
 927:Libraries/BSP/LCD/bsp_lcd.c **** 
 928:Libraries/BSP/LCD/bsp_lcd.c **** /*
 929:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 930:Libraries/BSP/LCD/bsp_lcd.c **** *                                          BSP_LCD_TextDispStr()
 931:Libraries/BSP/LCD/bsp_lcd.c **** *
 932:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Display a string.
 933:Libraries/BSP/LCD/bsp_lcd.c **** *
 934:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : col    Column where the text will be displayed.
 935:Libraries/BSP/LCD/bsp_lcd.c **** *
 936:Libraries/BSP/LCD/bsp_lcd.c **** *               line   Line   where the text will be displayed.
 937:Libraries/BSP/LCD/bsp_lcd.c **** *
 938:Libraries/BSP/LCD/bsp_lcd.c **** *               p_str  Pointer to the string.
 939:Libraries/BSP/LCD/bsp_lcd.c **** *
 940:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 941:Libraries/BSP/LCD/bsp_lcd.c **** *
 942:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 943:Libraries/BSP/LCD/bsp_lcd.c **** *
 944:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 945:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 946:Libraries/BSP/LCD/bsp_lcd.c **** */
 947:Libraries/BSP/LCD/bsp_lcd.c **** 
 948:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_TextDispStr  (BSP_LCD_TEXT_POS   col,
 949:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_TEXT_POS   line,
 950:Libraries/BSP/LCD/bsp_lcd.c ****                             CPU_CHAR          *p_str)
 951:Libraries/BSP/LCD/bsp_lcd.c **** {
 1222              		.loc 1 951 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 8
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226 09a8 80B5     		push	{r7, lr}
 1227              	.LCFI24:
 1228              		.cfi_def_cfa_offset 8
 1229              		.cfi_offset 14, -4
 1230              		.cfi_offset 7, -8
 1231 09aa 82B0     		sub	sp, sp, #8
 1232              	.LCFI25:
 1233              		.cfi_def_cfa_offset 16
 1234 09ac 00AF     		add	r7, sp, #0
 1235              	.LCFI26:
 1236              		.cfi_def_cfa_register 7
 1237 09ae 0B46     		mov	r3, r1
 1238 09b0 3A60     		str	r2, [r7, #0]
 1239 09b2 0246     		mov	r2, r0
 1240 09b4 FA71     		strb	r2, [r7, #7]
 1241 09b6 BB71     		strb	r3, [r7, #6]
 952:Libraries/BSP/LCD/bsp_lcd.c **** 
 953:Libraries/BSP/LCD/bsp_lcd.c **** 
 954:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TextDispStr_N((BSP_LCD_TEXT_POS   )col,
 1242              		.loc 1 954 0
 1243 09b8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1244 09ba BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1245 09bc 1046     		mov	r0, r2
 1246 09be 1946     		mov	r1, r3
 1247 09c0 3A68     		ldr	r2, [r7, #0]
 1248 09c2 4FF0FF33 		mov	r3, #-1
 1249 09c6 FFF7FEFF 		bl	BSP_LCD_TextDispStr_N
 955:Libraries/BSP/LCD/bsp_lcd.c ****                           (BSP_LCD_TEXT_POS   )line,
 956:Libraries/BSP/LCD/bsp_lcd.c ****                           (CPU_CHAR          *)p_str,
 957:Libraries/BSP/LCD/bsp_lcd.c ****                           (CPU_SIZE_T         )DEF_INT_CPU_U_MAX_VAL);
 958:Libraries/BSP/LCD/bsp_lcd.c **** }
 1250              		.loc 1 958 0
 1251 09ca 07F10807 		add	r7, r7, #8
 1252 09ce BD46     		mov	sp, r7
 1253 09d0 80BD     		pop	{r7, pc}
 1254              		.cfi_endproc
 1255              	.LFE8:
 1257 09d2 00BF     		.align	2
 1258              		.global	BSP_LCD_TextDispStr_N
 1259              		.thumb
 1260              		.thumb_func
 1262              	BSP_LCD_TextDispStr_N:
 1263              	.LFB9:
 959:Libraries/BSP/LCD/bsp_lcd.c **** 
 960:Libraries/BSP/LCD/bsp_lcd.c **** 
 961:Libraries/BSP/LCD/bsp_lcd.c **** /*
 962:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 963:Libraries/BSP/LCD/bsp_lcd.c **** *                                          BSP_LCD_TextDispStr_N()
 964:Libraries/BSP/LCD/bsp_lcd.c **** *
 965:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Display a string up to a maximum number of characters.
 966:Libraries/BSP/LCD/bsp_lcd.c **** *
 967:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : col       Column where the text will be displayed.
 968:Libraries/BSP/LCD/bsp_lcd.c **** *
 969:Libraries/BSP/LCD/bsp_lcd.c **** *               line      Line   where the text will be displayed.
 970:Libraries/BSP/LCD/bsp_lcd.c **** *
 971:Libraries/BSP/LCD/bsp_lcd.c **** *               p_str     Pointer to the string.
 972:Libraries/BSP/LCD/bsp_lcd.c **** *
 973:Libraries/BSP/LCD/bsp_lcd.c **** *               len_max   Maximum number of characters to display.
 974:Libraries/BSP/LCD/bsp_lcd.c **** *
 975:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
 976:Libraries/BSP/LCD/bsp_lcd.c **** *
 977:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
 978:Libraries/BSP/LCD/bsp_lcd.c **** *
 979:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
 980:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
 981:Libraries/BSP/LCD/bsp_lcd.c **** */
 982:Libraries/BSP/LCD/bsp_lcd.c **** 
 983:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_TextDispStr_N (BSP_LCD_TEXT_POS   col,
 984:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_TEXT_POS   line,
 985:Libraries/BSP/LCD/bsp_lcd.c ****                              CPU_CHAR          *p_str,
 986:Libraries/BSP/LCD/bsp_lcd.c ****                              CPU_SIZE_T         len_max)
 987:Libraries/BSP/LCD/bsp_lcd.c **** {
 1264              		.loc 1 987 0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 32
 1267              		@ frame_needed = 1, uses_anonymous_args = 0
 1268 09d4 80B5     		push	{r7, lr}
 1269              	.LCFI27:
 1270              		.cfi_def_cfa_offset 8
 1271              		.cfi_offset 14, -4
 1272              		.cfi_offset 7, -8
 1273 09d6 88B0     		sub	sp, sp, #32
 1274              	.LCFI28:
 1275              		.cfi_def_cfa_offset 40
 1276 09d8 00AF     		add	r7, sp, #0
 1277              	.LCFI29:
 1278              		.cfi_def_cfa_register 7
 1279 09da BA60     		str	r2, [r7, #8]
 1280 09dc 7B60     		str	r3, [r7, #4]
 1281 09de 0346     		mov	r3, r0
 1282 09e0 FB73     		strb	r3, [r7, #15]
 1283 09e2 0B46     		mov	r3, r1
 1284 09e4 BB73     		strb	r3, [r7, #14]
 988:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_DEV   *p_dev;
 989:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT  *p_font;
 990:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_cur;
 991:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_SIZE_T     str_len;
 992:Libraries/BSP/LCD/bsp_lcd.c **** 
 993:Libraries/BSP/LCD/bsp_lcd.c **** 
 994:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.  
 1285              		.loc 1 994 0
 1286 09e6 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1287 09ea C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1288 09ee BB61     		str	r3, [r7, #24]
 995:Libraries/BSP/LCD/bsp_lcd.c **** 
 996:Libraries/BSP/LCD/bsp_lcd.c ****     if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates bound
 1289              		.loc 1 996 0
 1290 09f0 BB69     		ldr	r3, [r7, #24]
 1291 09f2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1292 09f4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 1293 09f6 9A42     		cmp	r2, r3
 1294 09f8 00F29080 		bhi	.L64
 997:Libraries/BSP/LCD/bsp_lcd.c ****         (col  > p_dev->TextColMax)) {
 1295              		.loc 1 997 0 discriminator 1
 1296 09fc BB69     		ldr	r3, [r7, #24]
 1297 09fe 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 996:Libraries/BSP/LCD/bsp_lcd.c ****     if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates bound
 1298              		.loc 1 996 0 discriminator 1
 1299 0a00 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1300 0a02 9A42     		cmp	r2, r3
 1301 0a04 00F28A80 		bhi	.L64
 1302              	.L48:
 998:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 999:Libraries/BSP/LCD/bsp_lcd.c ****     }
1000:Libraries/BSP/LCD/bsp_lcd.c **** 
1001:Libraries/BSP/LCD/bsp_lcd.c ****     p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current f
 1303              		.loc 1 1001 0
 1304 0a08 BB69     		ldr	r3, [r7, #24]
 1305 0a0a DB68     		ldr	r3, [r3, #12]
 1306 0a0c 7B61     		str	r3, [r7, #20]
1002:Libraries/BSP/LCD/bsp_lcd.c **** 
1003:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font == (BSP_LCD_FONT *)0) {
 1307              		.loc 1 1003 0
 1308 0a0e 7B69     		ldr	r3, [r7, #20]
 1309 0a10 002B     		cmp	r3, #0
 1310 0a12 00F08580 		beq	.L65
 1311              	.L50:
1004:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1005:Libraries/BSP/LCD/bsp_lcd.c ****     }
1006:Libraries/BSP/LCD/bsp_lcd.c **** 
1007:Libraries/BSP/LCD/bsp_lcd.c ****     str_len = 0u;
 1312              		.loc 1 1007 0
 1313 0a16 4FF00003 		mov	r3, #0
 1314 0a1a FB61     		str	r3, [r7, #28]
1008:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1315              		.loc 1 1008 0
 1316 0a1c 00F0B2FE 		bl	BSP_LCD_Lock
1009:Libraries/BSP/LCD/bsp_lcd.c **** 
1010:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Update the text context...      
1011:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextColCur   = col;                                  /* ... update current column.      
 1317              		.loc 1 1011 0
 1318 0a20 BB69     		ldr	r3, [r7, #24]
 1319 0a22 FA7B     		ldrb	r2, [r7, #15]
 1320 0a24 DA71     		strb	r2, [r3, #7]
1012:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextLineCur  = line;                                 /* ... update current line.        
 1321              		.loc 1 1012 0
 1322 0a26 BB69     		ldr	r3, [r7, #24]
 1323 0a28 BA7B     		ldrb	r2, [r7, #14]
 1324 0a2a 5A71     		strb	r2, [r3, #5]
1013:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ... update current pixel.       
1014:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_cur           = (BSP_LCD_PIXEL)((BSP_LCD_WIDTH * col)
 1325              		.loc 1 1014 0
 1326 0a2c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1327 0a2e 1346     		mov	r3, r2
 1328 0a30 4FEA0313 		lsl	r3, r3, #4
 1329 0a34 9B1A     		subs	r3, r3, r2
 1330 0a36 4FEA0313 		lsl	r3, r3, #4
 1331 0a3a 1A46     		mov	r2, r3
1015:Libraries/BSP/LCD/bsp_lcd.c ****                         / p_dev->TextColMax);
 1332              		.loc 1 1015 0
 1333 0a3c BB69     		ldr	r3, [r7, #24]
 1334 0a3e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1335 0a40 B2FBF3F3 		udiv	r3, r2, r3
1014:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_cur           = (BSP_LCD_PIXEL)((BSP_LCD_WIDTH * col)
 1336              		.loc 1 1014 0
 1337 0a44 7B82     		strh	r3, [r7, #18]	@ movhi
1016:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextPixelCur = pixel_cur;
 1338              		.loc 1 1016 0
 1339 0a46 BB69     		ldr	r3, [r7, #24]
 1340 0a48 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 1341 0a4a 1A81     		strh	r2, [r3, #8]	@ movhi
1017:Libraries/BSP/LCD/bsp_lcd.c **** 
1018:Libraries/BSP/LCD/bsp_lcd.c ****     while ((*p_str != (CPU_CHAR)0) &&
 1342              		.loc 1 1018 0
 1343 0a4c 5BE0     		b	.L51
 1344              	.L62:
1019:Libraries/BSP/LCD/bsp_lcd.c ****            (str_len < len_max    )) {
1020:Libraries/BSP/LCD/bsp_lcd.c **** 
1021:Libraries/BSP/LCD/bsp_lcd.c ****         switch (*p_str) {
 1345              		.loc 1 1021 0
 1346 0a4e BB68     		ldr	r3, [r7, #8]
 1347 0a50 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1348 0a52 0A2B     		cmp	r3, #10
 1349 0a54 09D0     		beq	.L53
 1350 0a56 0D2B     		cmp	r3, #13
 1351 0a58 1CD1     		bne	.L63
 1352              	.L54:
1022:Libraries/BSP/LCD/bsp_lcd.c ****             case ASCII_CHAR_CARRIAGE_RETURN:
1023:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextColCur   = 0u;
 1353              		.loc 1 1023 0
 1354 0a5a BB69     		ldr	r3, [r7, #24]
 1355 0a5c 4FF00002 		mov	r2, #0
 1356 0a60 DA71     		strb	r2, [r3, #7]
1024:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextPixelCur = pixel_cur;
 1357              		.loc 1 1024 0
 1358 0a62 BB69     		ldr	r3, [r7, #24]
 1359 0a64 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 1360 0a66 1A81     		strh	r2, [r3, #8]	@ movhi
1025:Libraries/BSP/LCD/bsp_lcd.c ****                  break;
 1361              		.loc 1 1025 0
 1362 0a68 45E0     		b	.L55
 1363              	.L53:
1026:Libraries/BSP/LCD/bsp_lcd.c **** 
1027:Libraries/BSP/LCD/bsp_lcd.c ****             case ASCII_CHAR_LINE_FEED:
1028:Libraries/BSP/LCD/bsp_lcd.c ****                  if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
 1364              		.loc 1 1028 0
 1365 0a6a BB69     		ldr	r3, [r7, #24]
 1366 0a6c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1367 0a6e 03F10102 		add	r2, r3, #1
 1368 0a72 BB69     		ldr	r3, [r7, #24]
 1369 0a74 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1370 0a76 9A42     		cmp	r2, r3
 1371 0a78 04D9     		bls	.L56
1029:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur = 0u;
 1372              		.loc 1 1029 0
 1373 0a7a BB69     		ldr	r3, [r7, #24]
 1374 0a7c 4FF00002 		mov	r2, #0
 1375 0a80 5A71     		strb	r2, [r3, #5]
1030:Libraries/BSP/LCD/bsp_lcd.c ****                  } else {
1031:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur++;
1032:Libraries/BSP/LCD/bsp_lcd.c ****                  }
1033:Libraries/BSP/LCD/bsp_lcd.c ****                  break;
 1376              		.loc 1 1033 0
 1377 0a82 38E0     		b	.L55
 1378              	.L56:
1031:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur++;
 1379              		.loc 1 1031 0
 1380 0a84 BB69     		ldr	r3, [r7, #24]
 1381 0a86 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1382 0a88 03F10103 		add	r3, r3, #1
 1383 0a8c DAB2     		uxtb	r2, r3
 1384 0a8e BB69     		ldr	r3, [r7, #24]
 1385 0a90 5A71     		strb	r2, [r3, #5]
 1386              		.loc 1 1033 0
 1387 0a92 30E0     		b	.L55
 1388              	.L63:
1034:Libraries/BSP/LCD/bsp_lcd.c **** 
1035:Libraries/BSP/LCD/bsp_lcd.c ****             default:
1036:Libraries/BSP/LCD/bsp_lcd.c ****                  BSP_LCD_TextCharUnlock(*p_str);
 1389              		.loc 1 1036 0
 1390 0a94 BB68     		ldr	r3, [r7, #8]
 1391 0a96 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1392 0a98 1846     		mov	r0, r3
 1393 0a9a 00F039FB 		bl	BSP_LCD_TextCharUnlock
1037:Libraries/BSP/LCD/bsp_lcd.c ****                  if ((p_dev->TextPixelCur + p_font->Width) > BSP_LCD_WIDTH) {
 1394              		.loc 1 1037 0
 1395 0a9e BB69     		ldr	r3, [r7, #24]
 1396 0aa0 1B89     		ldrh	r3, [r3, #8]
 1397 0aa2 1A46     		mov	r2, r3
 1398 0aa4 7B69     		ldr	r3, [r7, #20]
 1399 0aa6 DB88     		ldrh	r3, [r3, #6]
 1400 0aa8 D318     		adds	r3, r2, r3
 1401 0aaa F02B     		cmp	r3, #240
 1402 0aac 1BD9     		bls	.L58
1038:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextColCur   = 0u;
 1403              		.loc 1 1038 0
 1404 0aae BB69     		ldr	r3, [r7, #24]
 1405 0ab0 4FF00002 		mov	r2, #0
 1406 0ab4 DA71     		strb	r2, [r3, #7]
1039:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextPixelCur = pixel_cur;
 1407              		.loc 1 1039 0
 1408 0ab6 BB69     		ldr	r3, [r7, #24]
 1409 0ab8 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 1410 0aba 1A81     		strh	r2, [r3, #8]	@ movhi
1040:Libraries/BSP/LCD/bsp_lcd.c ****                      if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
 1411              		.loc 1 1040 0
 1412 0abc BB69     		ldr	r3, [r7, #24]
 1413 0abe 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1414 0ac0 03F10102 		add	r2, r3, #1
 1415 0ac4 BB69     		ldr	r3, [r7, #24]
 1416 0ac6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1417 0ac8 9A42     		cmp	r2, r3
 1418 0aca 04D9     		bls	.L59
1041:Libraries/BSP/LCD/bsp_lcd.c ****                          p_dev->TextLineCur = 0u;
 1419              		.loc 1 1041 0
 1420 0acc BB69     		ldr	r3, [r7, #24]
 1421 0ace 4FF00002 		mov	r2, #0
 1422 0ad2 5A71     		strb	r2, [r3, #5]
1042:Libraries/BSP/LCD/bsp_lcd.c ****                      } else {
1043:Libraries/BSP/LCD/bsp_lcd.c ****                          p_dev->TextLineCur++;
1044:Libraries/BSP/LCD/bsp_lcd.c ****                      }
1045:Libraries/BSP/LCD/bsp_lcd.c ****                  } else {
1046:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextColCur++;
1047:Libraries/BSP/LCD/bsp_lcd.c ****                  }
1048:Libraries/BSP/LCD/bsp_lcd.c ****                  break;
 1423              		.loc 1 1048 0
 1424 0ad4 0EE0     		b	.L66
 1425              	.L59:
1043:Libraries/BSP/LCD/bsp_lcd.c ****                          p_dev->TextLineCur++;
 1426              		.loc 1 1043 0
 1427 0ad6 BB69     		ldr	r3, [r7, #24]
 1428 0ad8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1429 0ada 03F10103 		add	r3, r3, #1
 1430 0ade DAB2     		uxtb	r2, r3
 1431 0ae0 BB69     		ldr	r3, [r7, #24]
 1432 0ae2 5A71     		strb	r2, [r3, #5]
 1433              		.loc 1 1048 0
 1434 0ae4 06E0     		b	.L66
 1435              	.L58:
1046:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextColCur++;
 1436              		.loc 1 1046 0
 1437 0ae6 BB69     		ldr	r3, [r7, #24]
 1438 0ae8 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1439 0aea 03F10103 		add	r3, r3, #1
 1440 0aee DAB2     		uxtb	r2, r3
 1441 0af0 BB69     		ldr	r3, [r7, #24]
 1442 0af2 DA71     		strb	r2, [r3, #7]
 1443              	.L66:
 1444              		.loc 1 1048 0
 1445 0af4 00BF     		nop
 1446              	.L55:
1049:Libraries/BSP/LCD/bsp_lcd.c ****         }
1050:Libraries/BSP/LCD/bsp_lcd.c ****         p_str++;
 1447              		.loc 1 1050 0
 1448 0af6 BB68     		ldr	r3, [r7, #8]
 1449 0af8 03F10103 		add	r3, r3, #1
 1450 0afc BB60     		str	r3, [r7, #8]
1051:Libraries/BSP/LCD/bsp_lcd.c ****         str_len++;
 1451              		.loc 1 1051 0
 1452 0afe FB69     		ldr	r3, [r7, #28]
 1453 0b00 03F10103 		add	r3, r3, #1
 1454 0b04 FB61     		str	r3, [r7, #28]
 1455              	.L51:
1018:Libraries/BSP/LCD/bsp_lcd.c ****     while ((*p_str != (CPU_CHAR)0) &&
 1456              		.loc 1 1018 0 discriminator 1
 1457 0b06 BB68     		ldr	r3, [r7, #8]
 1458 0b08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1459 0b0a 002B     		cmp	r3, #0
 1460 0b0c 03D0     		beq	.L61
1018:Libraries/BSP/LCD/bsp_lcd.c ****     while ((*p_str != (CPU_CHAR)0) &&
 1461              		.loc 1 1018 0 is_stmt 0 discriminator 2
 1462 0b0e FA69     		ldr	r2, [r7, #28]
 1463 0b10 7B68     		ldr	r3, [r7, #4]
 1464 0b12 9A42     		cmp	r2, r3
 1465 0b14 9BD3     		bcc	.L62
 1466              	.L61:
1052:Libraries/BSP/LCD/bsp_lcd.c ****     }
1053:Libraries/BSP/LCD/bsp_lcd.c **** 
1054:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 1467              		.loc 1 1054 0 is_stmt 1
 1468 0b16 00F04BFE 		bl	BSP_LCD_Unlock
 1469 0b1a 02E0     		b	.L46
 1470              	.L64:
 998:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1471              		.loc 1 998 0
 1472 0b1c 00BF     		nop
 1473 0b1e 00E0     		b	.L46
 1474              	.L65:
1004:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1475              		.loc 1 1004 0
 1476 0b20 00BF     		nop
 1477              	.L46:
1055:Libraries/BSP/LCD/bsp_lcd.c **** }
 1478              		.loc 1 1055 0
 1479 0b22 07F12007 		add	r7, r7, #32
 1480 0b26 BD46     		mov	sp, r7
 1481 0b28 80BD     		pop	{r7, pc}
 1482              		.cfi_endproc
 1483              	.LFE9:
 1485 0b2a 00BF     		.align	2
 1486              		.global	BSP_LCD_TextDispChar
 1487              		.thumb
 1488              		.thumb_func
 1490              	BSP_LCD_TextDispChar:
 1491              	.LFB10:
1056:Libraries/BSP/LCD/bsp_lcd.c **** 
1057:Libraries/BSP/LCD/bsp_lcd.c **** /*
1058:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1059:Libraries/BSP/LCD/bsp_lcd.c **** *                                          BSP_LCD_TextDispStr()
1060:Libraries/BSP/LCD/bsp_lcd.c **** *
1061:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Display a character.
1062:Libraries/BSP/LCD/bsp_lcd.c **** *
1063:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : col    Column where the text will be displayed.
1064:Libraries/BSP/LCD/bsp_lcd.c **** *
1065:Libraries/BSP/LCD/bsp_lcd.c **** *               line   Line   where the text will be displayed.
1066:Libraries/BSP/LCD/bsp_lcd.c **** *
1067:Libraries/BSP/LCD/bsp_lcd.c **** *               c      Character to display.
1068:Libraries/BSP/LCD/bsp_lcd.c **** *
1069:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1070:Libraries/BSP/LCD/bsp_lcd.c **** *
1071:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1072:Libraries/BSP/LCD/bsp_lcd.c **** *
1073:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1074:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1075:Libraries/BSP/LCD/bsp_lcd.c **** */
1076:Libraries/BSP/LCD/bsp_lcd.c **** 
1077:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_TextDispChar (BSP_LCD_TEXT_POS   col,
1078:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_TEXT_POS   line,
1079:Libraries/BSP/LCD/bsp_lcd.c ****                             CPU_CHAR           c)
1080:Libraries/BSP/LCD/bsp_lcd.c **** {
 1492              		.loc 1 1080 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 16
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0b2c 80B5     		push	{r7, lr}
 1497              	.LCFI30:
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 14, -4
 1500              		.cfi_offset 7, -8
 1501 0b2e 84B0     		sub	sp, sp, #16
 1502              	.LCFI31:
 1503              		.cfi_def_cfa_offset 24
 1504 0b30 00AF     		add	r7, sp, #0
 1505              	.LCFI32:
 1506              		.cfi_def_cfa_register 7
 1507 0b32 1346     		mov	r3, r2
 1508 0b34 0246     		mov	r2, r0
 1509 0b36 FA71     		strb	r2, [r7, #7]
 1510 0b38 0A46     		mov	r2, r1
 1511 0b3a BA71     		strb	r2, [r7, #6]
 1512 0b3c 7B71     		strb	r3, [r7, #5]
1081:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_DEV   *p_dev;
1082:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT  *p_font;
1083:Libraries/BSP/LCD/bsp_lcd.c **** 
1084:Libraries/BSP/LCD/bsp_lcd.c **** 
1085:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.  
 1513              		.loc 1 1085 0
 1514 0b3e 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1515 0b42 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1516 0b46 FB60     		str	r3, [r7, #12]
1086:Libraries/BSP/LCD/bsp_lcd.c **** 
1087:Libraries/BSP/LCD/bsp_lcd.c ****     if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates bound
 1517              		.loc 1 1087 0
 1518 0b48 FB68     		ldr	r3, [r7, #12]
 1519 0b4a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1520 0b4c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1521 0b4e 9A42     		cmp	r2, r3
 1522 0b50 61D8     		bhi	.L82
1088:Libraries/BSP/LCD/bsp_lcd.c ****         (col  > p_dev->TextColMax)) {
 1523              		.loc 1 1088 0 discriminator 1
 1524 0b52 FB68     		ldr	r3, [r7, #12]
 1525 0b54 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
1087:Libraries/BSP/LCD/bsp_lcd.c ****     if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates bound
 1526              		.loc 1 1087 0 discriminator 1
 1527 0b56 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1528 0b58 9A42     		cmp	r2, r3
 1529 0b5a 5CD8     		bhi	.L82
 1530              	.L69:
1089:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1090:Libraries/BSP/LCD/bsp_lcd.c ****     }
1091:Libraries/BSP/LCD/bsp_lcd.c **** 
1092:Libraries/BSP/LCD/bsp_lcd.c ****     p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current f
 1531              		.loc 1 1092 0
 1532 0b5c FB68     		ldr	r3, [r7, #12]
 1533 0b5e DB68     		ldr	r3, [r3, #12]
 1534 0b60 BB60     		str	r3, [r7, #8]
1093:Libraries/BSP/LCD/bsp_lcd.c **** 
1094:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font == (BSP_LCD_FONT *)0) {
 1535              		.loc 1 1094 0
 1536 0b62 BB68     		ldr	r3, [r7, #8]
 1537 0b64 002B     		cmp	r3, #0
 1538 0b66 58D0     		beq	.L83
 1539              	.L71:
1095:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1096:Libraries/BSP/LCD/bsp_lcd.c ****     }
1097:Libraries/BSP/LCD/bsp_lcd.c **** 
1098:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1540              		.loc 1 1098 0
 1541 0b68 00F00CFE 		bl	BSP_LCD_Lock
1099:Libraries/BSP/LCD/bsp_lcd.c **** 
1100:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Update the text context...      
1101:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextColCur   = col;                                  /* ... update current column.      
 1542              		.loc 1 1101 0
 1543 0b6c FB68     		ldr	r3, [r7, #12]
 1544 0b6e FA79     		ldrb	r2, [r7, #7]
 1545 0b70 DA71     		strb	r2, [r3, #7]
1102:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextLineCur  = line;                                 /* ... update current line.        
 1546              		.loc 1 1102 0
 1547 0b72 FB68     		ldr	r3, [r7, #12]
 1548 0b74 BA79     		ldrb	r2, [r7, #6]
 1549 0b76 5A71     		strb	r2, [r3, #5]
1103:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ... update current pixel.       
1104:Libraries/BSP/LCD/bsp_lcd.c ****     switch (c) {
 1550              		.loc 1 1104 0
 1551 0b78 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1552 0b7a 0A2B     		cmp	r3, #10
 1553 0b7c 06D0     		beq	.L73
 1554 0b7e 0D2B     		cmp	r3, #13
 1555 0b80 19D1     		bne	.L81
 1556              	.L74:
1105:Libraries/BSP/LCD/bsp_lcd.c ****         case ASCII_CHAR_CARRIAGE_RETURN:
1106:Libraries/BSP/LCD/bsp_lcd.c ****              p_dev->TextColCur = 0u;
 1557              		.loc 1 1106 0
 1558 0b82 FB68     		ldr	r3, [r7, #12]
 1559 0b84 4FF00002 		mov	r2, #0
 1560 0b88 DA71     		strb	r2, [r3, #7]
1107:Libraries/BSP/LCD/bsp_lcd.c ****              break;
 1561              		.loc 1 1107 0
 1562 0b8a 41E0     		b	.L75
 1563              	.L73:
1108:Libraries/BSP/LCD/bsp_lcd.c **** 
1109:Libraries/BSP/LCD/bsp_lcd.c ****         case ASCII_CHAR_LINE_FEED:
1110:Libraries/BSP/LCD/bsp_lcd.c ****              if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
 1564              		.loc 1 1110 0
 1565 0b8c FB68     		ldr	r3, [r7, #12]
 1566 0b8e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1567 0b90 03F10102 		add	r2, r3, #1
 1568 0b94 FB68     		ldr	r3, [r7, #12]
 1569 0b96 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1570 0b98 9A42     		cmp	r2, r3
 1571 0b9a 04D9     		bls	.L76
1111:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextLineCur = 0u;
 1572              		.loc 1 1111 0
 1573 0b9c FB68     		ldr	r3, [r7, #12]
 1574 0b9e 4FF00002 		mov	r2, #0
 1575 0ba2 5A71     		strb	r2, [r3, #5]
1112:Libraries/BSP/LCD/bsp_lcd.c ****              } else {
1113:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextLineCur++;
1114:Libraries/BSP/LCD/bsp_lcd.c ****              }
1115:Libraries/BSP/LCD/bsp_lcd.c ****              break;
 1576              		.loc 1 1115 0
 1577 0ba4 34E0     		b	.L75
 1578              	.L76:
1113:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextLineCur++;
 1579              		.loc 1 1113 0
 1580 0ba6 FB68     		ldr	r3, [r7, #12]
 1581 0ba8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1582 0baa 03F10103 		add	r3, r3, #1
 1583 0bae DAB2     		uxtb	r2, r3
 1584 0bb0 FB68     		ldr	r3, [r7, #12]
 1585 0bb2 5A71     		strb	r2, [r3, #5]
 1586              		.loc 1 1115 0
 1587 0bb4 2CE0     		b	.L75
 1588              	.L81:
1116:Libraries/BSP/LCD/bsp_lcd.c **** 
1117:Libraries/BSP/LCD/bsp_lcd.c ****         default:
1118:Libraries/BSP/LCD/bsp_lcd.c ****              BSP_LCD_TextCharUnlock(c);
 1589              		.loc 1 1118 0
 1590 0bb6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1591 0bb8 1846     		mov	r0, r3
 1592 0bba 00F0A9FA 		bl	BSP_LCD_TextCharUnlock
1119:Libraries/BSP/LCD/bsp_lcd.c ****              if ((p_dev->TextPixelCur + p_font->Width) > BSP_LCD_WIDTH) {
 1593              		.loc 1 1119 0
 1594 0bbe FB68     		ldr	r3, [r7, #12]
 1595 0bc0 1B89     		ldrh	r3, [r3, #8]
 1596 0bc2 1A46     		mov	r2, r3
 1597 0bc4 BB68     		ldr	r3, [r7, #8]
 1598 0bc6 DB88     		ldrh	r3, [r3, #6]
 1599 0bc8 D318     		adds	r3, r2, r3
 1600 0bca F02B     		cmp	r3, #240
 1601 0bcc 18D9     		bls	.L78
1120:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextColCur = 0u;
 1602              		.loc 1 1120 0
 1603 0bce FB68     		ldr	r3, [r7, #12]
 1604 0bd0 4FF00002 		mov	r2, #0
 1605 0bd4 DA71     		strb	r2, [r3, #7]
1121:Libraries/BSP/LCD/bsp_lcd.c ****                  if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
 1606              		.loc 1 1121 0
 1607 0bd6 FB68     		ldr	r3, [r7, #12]
 1608 0bd8 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1609 0bda 03F10102 		add	r2, r3, #1
 1610 0bde FB68     		ldr	r3, [r7, #12]
 1611 0be0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1612 0be2 9A42     		cmp	r2, r3
 1613 0be4 04D9     		bls	.L79
1122:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur = 0u;
 1614              		.loc 1 1122 0
 1615 0be6 FB68     		ldr	r3, [r7, #12]
 1616 0be8 4FF00002 		mov	r2, #0
 1617 0bec 5A71     		strb	r2, [r3, #5]
1123:Libraries/BSP/LCD/bsp_lcd.c ****                  } else {
1124:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur++;
1125:Libraries/BSP/LCD/bsp_lcd.c ****                  }
1126:Libraries/BSP/LCD/bsp_lcd.c ****              } else {
1127:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextColCur++;
1128:Libraries/BSP/LCD/bsp_lcd.c ****              }
1129:Libraries/BSP/LCD/bsp_lcd.c ****              break;
 1618              		.loc 1 1129 0
 1619 0bee 0EE0     		b	.L84
 1620              	.L79:
1124:Libraries/BSP/LCD/bsp_lcd.c ****                      p_dev->TextLineCur++;
 1621              		.loc 1 1124 0
 1622 0bf0 FB68     		ldr	r3, [r7, #12]
 1623 0bf2 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1624 0bf4 03F10103 		add	r3, r3, #1
 1625 0bf8 DAB2     		uxtb	r2, r3
 1626 0bfa FB68     		ldr	r3, [r7, #12]
 1627 0bfc 5A71     		strb	r2, [r3, #5]
 1628              		.loc 1 1129 0
 1629 0bfe 06E0     		b	.L84
 1630              	.L78:
1127:Libraries/BSP/LCD/bsp_lcd.c ****                  p_dev->TextColCur++;
 1631              		.loc 1 1127 0
 1632 0c00 FB68     		ldr	r3, [r7, #12]
 1633 0c02 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1634 0c04 03F10103 		add	r3, r3, #1
 1635 0c08 DAB2     		uxtb	r2, r3
 1636 0c0a FB68     		ldr	r3, [r7, #12]
 1637 0c0c DA71     		strb	r2, [r3, #7]
 1638              	.L84:
 1639              		.loc 1 1129 0
 1640 0c0e 00BF     		nop
 1641              	.L75:
1130:Libraries/BSP/LCD/bsp_lcd.c ****     }
1131:Libraries/BSP/LCD/bsp_lcd.c **** 
1132:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 1642              		.loc 1 1132 0
 1643 0c10 00F0CEFD 		bl	BSP_LCD_Unlock
 1644 0c14 02E0     		b	.L67
 1645              	.L82:
1089:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1646              		.loc 1 1089 0
 1647 0c16 00BF     		nop
 1648 0c18 00E0     		b	.L67
 1649              	.L83:
1095:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1650              		.loc 1 1095 0
 1651 0c1a 00BF     		nop
 1652              	.L67:
1133:Libraries/BSP/LCD/bsp_lcd.c **** }
 1653              		.loc 1 1133 0
 1654 0c1c 07F11007 		add	r7, r7, #16
 1655 0c20 BD46     		mov	sp, r7
 1656 0c22 80BD     		pop	{r7, pc}
 1657              		.cfi_endproc
 1658              	.LFE10:
 1660              		.align	2
 1661              		.global	BSP_LCD_TextFontTblSet
 1662              		.thumb
 1663              		.thumb_func
 1665              	BSP_LCD_TextFontTblSet:
 1666              	.LFB11:
1134:Libraries/BSP/LCD/bsp_lcd.c **** 
1135:Libraries/BSP/LCD/bsp_lcd.c **** 
1136:Libraries/BSP/LCD/bsp_lcd.c **** /*
1137:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1138:Libraries/BSP/LCD/bsp_lcd.c **** *                                         BSP_LCD_TextFontTblSet()
1139:Libraries/BSP/LCD/bsp_lcd.c **** *
1140:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Set the font table address.
1141:Libraries/BSP/LCD/bsp_lcd.c **** *
1142:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : p_tbl   Pointer to an array of 'BSP_LCD_FONT' pointers.
1143:Libraries/BSP/LCD/bsp_lcd.c **** *
1144:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1145:Libraries/BSP/LCD/bsp_lcd.c **** *
1146:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1147:Libraries/BSP/LCD/bsp_lcd.c **** *
1148:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1149:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1150:Libraries/BSP/LCD/bsp_lcd.c **** */
1151:Libraries/BSP/LCD/bsp_lcd.c **** 
1152:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_TextFontTblSet (BSP_LCD_FONT  **p_font_tbl)
1153:Libraries/BSP/LCD/bsp_lcd.c **** {
 1667              		.loc 1 1153 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 8
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
 1671 0c24 80B5     		push	{r7, lr}
 1672              	.LCFI33:
 1673              		.cfi_def_cfa_offset 8
 1674              		.cfi_offset 14, -4
 1675              		.cfi_offset 7, -8
 1676 0c26 82B0     		sub	sp, sp, #8
 1677              	.LCFI34:
 1678              		.cfi_def_cfa_offset 16
 1679 0c28 00AF     		add	r7, sp, #0
 1680              	.LCFI35:
 1681              		.cfi_def_cfa_register 7
 1682 0c2a 7860     		str	r0, [r7, #4]
1154:Libraries/BSP/LCD/bsp_lcd.c **** 
1155:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font_tbl == (BSP_LCD_FONT **)0) {
 1683              		.loc 1 1155 0
 1684 0c2c 7B68     		ldr	r3, [r7, #4]
 1685 0c2e 002B     		cmp	r3, #0
 1686 0c30 0AD0     		beq	.L88
 1687              	.L86:
1156:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1157:Libraries/BSP/LCD/bsp_lcd.c ****     }
1158:Libraries/BSP/LCD/bsp_lcd.c **** 
1159:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1688              		.loc 1 1159 0
 1689 0c32 00F0A7FD 		bl	BSP_LCD_Lock
1160:Libraries/BSP/LCD/bsp_lcd.c **** 
1161:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Ctxt.FontTblPtr = p_font_tbl;
 1690              		.loc 1 1161 0
 1691 0c36 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1692 0c3a C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1693 0c3e 7A68     		ldr	r2, [r7, #4]
 1694 0c40 5A64     		str	r2, [r3, #68]
1162:Libraries/BSP/LCD/bsp_lcd.c **** 
1163:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 1695              		.loc 1 1163 0
 1696 0c42 00F0B5FD 		bl	BSP_LCD_Unlock
 1697 0c46 00E0     		b	.L85
 1698              	.L88:
1156:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1699              		.loc 1 1156 0
 1700 0c48 00BF     		nop
 1701              	.L85:
1164:Libraries/BSP/LCD/bsp_lcd.c **** }
 1702              		.loc 1 1164 0
 1703 0c4a 07F10807 		add	r7, r7, #8
 1704 0c4e BD46     		mov	sp, r7
 1705 0c50 80BD     		pop	{r7, pc}
 1706              		.cfi_endproc
 1707              	.LFE11:
 1709 0c52 00BF     		.align	2
 1710              		.global	BSP_LCD_TextFontGetByName
 1711              		.thumb
 1712              		.thumb_func
 1714              	BSP_LCD_TextFontGetByName:
 1715              	.LFB12:
1165:Libraries/BSP/LCD/bsp_lcd.c **** 
1166:Libraries/BSP/LCD/bsp_lcd.c **** 
1167:Libraries/BSP/LCD/bsp_lcd.c **** /*
1168:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1169:Libraries/BSP/LCD/bsp_lcd.c **** *                                       BSP_LCD_TextFontGetByName()
1170:Libraries/BSP/LCD/bsp_lcd.c **** *
1171:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Return a font from the font table using the font name.
1172:Libraries/BSP/LCD/bsp_lcd.c **** *
1173:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : p_name   Pointer to the font name.
1174:Libraries/BSP/LCD/bsp_lcd.c **** *
1175:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : Pointer to the required font. If the font cannot be found in the font table a 'NULL
1176:Libraries/BSP/LCD/bsp_lcd.c **** *               pointer is returned.
1177:Libraries/BSP/LCD/bsp_lcd.c **** *
1178:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1179:Libraries/BSP/LCD/bsp_lcd.c **** *
1180:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1181:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1182:Libraries/BSP/LCD/bsp_lcd.c **** */
1183:Libraries/BSP/LCD/bsp_lcd.c **** 
1184:Libraries/BSP/LCD/bsp_lcd.c **** BSP_LCD_FONT  *BSP_LCD_TextFontGetByName (CPU_CHAR  *p_name)
1185:Libraries/BSP/LCD/bsp_lcd.c **** {
 1716              		.loc 1 1185 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 32
 1719              		@ frame_needed = 1, uses_anonymous_args = 0
 1720 0c54 80B5     		push	{r7, lr}
 1721              	.LCFI36:
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 14, -4
 1724              		.cfi_offset 7, -8
 1725 0c56 88B0     		sub	sp, sp, #32
 1726              	.LCFI37:
 1727              		.cfi_def_cfa_offset 40
 1728 0c58 00AF     		add	r7, sp, #0
 1729              	.LCFI38:
 1730              		.cfi_def_cfa_register 7
 1731 0c5a 7860     		str	r0, [r7, #4]
1186:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT  **p_font_tbl;
1187:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT   *p_font;
1188:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT16S      cmp;
1189:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_SIZE_T      font_ix;
1190:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_BOOLEAN     found;
1191:Libraries/BSP/LCD/bsp_lcd.c **** 
1192:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ------------------- ARGUMENTS CH
1193:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_name == (CPU_CHAR *)0) {                              /* NULL pointer ?                  
 1732              		.loc 1 1193 0
 1733 0c5c 7B68     		ldr	r3, [r7, #4]
 1734 0c5e 002B     		cmp	r3, #0
 1735 0c60 02D1     		bne	.L90
1194:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_FONT *)0);
 1736              		.loc 1 1194 0
 1737 0c62 4FF00003 		mov	r3, #0
 1738 0c66 45E0     		b	.L91
 1739              	.L90:
1195:Libraries/BSP/LCD/bsp_lcd.c ****     }
1196:Libraries/BSP/LCD/bsp_lcd.c **** 
1197:Libraries/BSP/LCD/bsp_lcd.c ****     p_font_tbl = BSP_LCD_Ctxt.FontTblPtr;
 1740              		.loc 1 1197 0
 1741 0c68 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1742 0c6c C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1743 0c70 5B6C     		ldr	r3, [r3, #68]
 1744 0c72 3B61     		str	r3, [r7, #16]
1198:Libraries/BSP/LCD/bsp_lcd.c **** 
1199:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font_tbl == (BSP_LCD_FONT **)0) {                     /* If a font table has not been set
 1745              		.loc 1 1199 0
 1746 0c74 3B69     		ldr	r3, [r7, #16]
 1747 0c76 002B     		cmp	r3, #0
 1748 0c78 02D1     		bne	.L92
1200:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_FONT *)0);
 1749              		.loc 1 1200 0
 1750 0c7a 4FF00003 		mov	r3, #0
 1751 0c7e 39E0     		b	.L91
 1752              	.L92:
1201:Libraries/BSP/LCD/bsp_lcd.c ****     }
1202:Libraries/BSP/LCD/bsp_lcd.c **** 
1203:Libraries/BSP/LCD/bsp_lcd.c ****     found   = DEF_NO;
 1753              		.loc 1 1203 0
 1754 0c80 4FF00003 		mov	r3, #0
 1755 0c84 FB75     		strb	r3, [r7, #23]
1204:Libraries/BSP/LCD/bsp_lcd.c ****     font_ix = 0u;
 1756              		.loc 1 1204 0
 1757 0c86 4FF00003 		mov	r3, #0
 1758 0c8a BB61     		str	r3, [r7, #24]
1205:Libraries/BSP/LCD/bsp_lcd.c ****     p_font  = (BSP_LCD_FONT *)0;
 1759              		.loc 1 1205 0
 1760 0c8c 4FF00003 		mov	r3, #0
 1761 0c90 FB61     		str	r3, [r7, #28]
1206:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Search the font in the font tabl
1207:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
 1762              		.loc 1 1207 0
 1763 0c92 1AE0     		b	.L93
 1764              	.L96:
1208:Libraries/BSP/LCD/bsp_lcd.c ****            (found               ==  DEF_NO               ) &&
1209:Libraries/BSP/LCD/bsp_lcd.c ****            (font_ix              <  BSP_LCD_MAX_NBR_FONT )) {
1210:Libraries/BSP/LCD/bsp_lcd.c **** 
1211:Libraries/BSP/LCD/bsp_lcd.c ****         p_font = p_font_tbl[font_ix];
 1765              		.loc 1 1211 0
 1766 0c94 BB69     		ldr	r3, [r7, #24]
 1767 0c96 4FEA8303 		lsl	r3, r3, #2
 1768 0c9a 3A69     		ldr	r2, [r7, #16]
 1769 0c9c D318     		adds	r3, r2, r3
 1770 0c9e 1B68     		ldr	r3, [r3, #0]
 1771 0ca0 FB61     		str	r3, [r7, #28]
1212:Libraries/BSP/LCD/bsp_lcd.c ****         cmp    = Str_Cmp(p_name,                                /* Compare the font name.          
1213:Libraries/BSP/LCD/bsp_lcd.c ****                          p_font->NamePtr);
 1772              		.loc 1 1213 0
 1773 0ca2 FB69     		ldr	r3, [r7, #28]
 1774 0ca4 1B68     		ldr	r3, [r3, #0]
1212:Libraries/BSP/LCD/bsp_lcd.c ****         cmp    = Str_Cmp(p_name,                                /* Compare the font name.          
 1775              		.loc 1 1212 0
 1776 0ca6 7868     		ldr	r0, [r7, #4]
 1777 0ca8 1946     		mov	r1, r3
 1778 0caa FFF7FEFF 		bl	Str_Cmp
 1779 0cae 0346     		mov	r3, r0
 1780 0cb0 FB81     		strh	r3, [r7, #14]	@ movhi
1214:Libraries/BSP/LCD/bsp_lcd.c **** 
1215:Libraries/BSP/LCD/bsp_lcd.c ****         if (cmp == (CPU_INT16S)0) {                             /* If the font is found ...        
 1781              		.loc 1 1215 0
 1782 0cb2 B7F90E30 		ldrsh	r3, [r7, #14]
 1783 0cb6 002B     		cmp	r3, #0
 1784 0cb8 03D1     		bne	.L94
1216:Libraries/BSP/LCD/bsp_lcd.c ****             found = DEF_YES;                                    /* ... exit the search routine.    
 1785              		.loc 1 1216 0
 1786 0cba 4FF00103 		mov	r3, #1
 1787 0cbe FB75     		strb	r3, [r7, #23]
 1788 0cc0 03E0     		b	.L93
 1789              	.L94:
1217:Libraries/BSP/LCD/bsp_lcd.c ****         } else {
1218:Libraries/BSP/LCD/bsp_lcd.c ****             font_ix++;                                          /* ... move to the next entry, othe
 1790              		.loc 1 1218 0
 1791 0cc2 BB69     		ldr	r3, [r7, #24]
 1792 0cc4 03F10103 		add	r3, r3, #1
 1793 0cc8 BB61     		str	r3, [r7, #24]
 1794              	.L93:
1207:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
 1795              		.loc 1 1207 0 discriminator 1
 1796 0cca BB69     		ldr	r3, [r7, #24]
 1797 0ccc 4FEA8303 		lsl	r3, r3, #2
 1798 0cd0 3A69     		ldr	r2, [r7, #16]
 1799 0cd2 D318     		adds	r3, r2, r3
 1800 0cd4 1B68     		ldr	r3, [r3, #0]
 1801 0cd6 002B     		cmp	r3, #0
 1802 0cd8 05D0     		beq	.L95
1207:Libraries/BSP/LCD/bsp_lcd.c ****     while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
 1803              		.loc 1 1207 0 is_stmt 0 discriminator 2
 1804 0cda FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1805 0cdc 002B     		cmp	r3, #0
 1806 0cde 02D1     		bne	.L95
1208:Libraries/BSP/LCD/bsp_lcd.c ****            (found               ==  DEF_NO               ) &&
 1807              		.loc 1 1208 0 is_stmt 1
 1808 0ce0 BB69     		ldr	r3, [r7, #24]
 1809 0ce2 7F2B     		cmp	r3, #127
 1810 0ce4 D6D9     		bls	.L96
 1811              	.L95:
1219:Libraries/BSP/LCD/bsp_lcd.c ****         }
1220:Libraries/BSP/LCD/bsp_lcd.c ****     }
1221:Libraries/BSP/LCD/bsp_lcd.c **** 
1222:Libraries/BSP/LCD/bsp_lcd.c ****     if (found == DEF_NO) {                                      /* If a fount could not been found 
 1812              		.loc 1 1222 0
 1813 0ce6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1814 0ce8 002B     		cmp	r3, #0
 1815 0cea 02D1     		bne	.L97
1223:Libraries/BSP/LCD/bsp_lcd.c ****         return ((BSP_LCD_FONT *)0);                             /* ... return a 'NULL' pointer.    
 1816              		.loc 1 1223 0
 1817 0cec 4FF00003 		mov	r3, #0
 1818 0cf0 00E0     		b	.L91
 1819              	.L97:
1224:Libraries/BSP/LCD/bsp_lcd.c ****     }
1225:Libraries/BSP/LCD/bsp_lcd.c **** 
1226:Libraries/BSP/LCD/bsp_lcd.c ****     return ((p_font));
 1820              		.loc 1 1226 0
 1821 0cf2 FB69     		ldr	r3, [r7, #28]
 1822              	.L91:
1227:Libraries/BSP/LCD/bsp_lcd.c **** }
 1823              		.loc 1 1227 0
 1824 0cf4 1846     		mov	r0, r3
 1825 0cf6 07F12007 		add	r7, r7, #32
 1826 0cfa BD46     		mov	sp, r7
 1827 0cfc 80BD     		pop	{r7, pc}
 1828              		.cfi_endproc
 1829              	.LFE12:
 1831 0cfe 00BF     		.align	2
 1832              		.global	BSP_LCD_TextFontSet
 1833              		.thumb
 1834              		.thumb_func
 1836              	BSP_LCD_TextFontSet:
 1837              	.LFB13:
1228:Libraries/BSP/LCD/bsp_lcd.c **** 
1229:Libraries/BSP/LCD/bsp_lcd.c **** 
1230:Libraries/BSP/LCD/bsp_lcd.c **** /*
1231:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1232:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_TextFontSet()
1233:Libraries/BSP/LCD/bsp_lcd.c **** *
1234:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Set a font.
1235:Libraries/BSP/LCD/bsp_lcd.c **** *
1236:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : p_font   Pointer to the font structure.
1237:Libraries/BSP/LCD/bsp_lcd.c **** *
1238:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1239:Libraries/BSP/LCD/bsp_lcd.c **** *
1240:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1241:Libraries/BSP/LCD/bsp_lcd.c **** *
1242:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1243:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1244:Libraries/BSP/LCD/bsp_lcd.c **** */
1245:Libraries/BSP/LCD/bsp_lcd.c **** 
1246:Libraries/BSP/LCD/bsp_lcd.c **** 
1247:Libraries/BSP/LCD/bsp_lcd.c **** void   BSP_LCD_TextFontSet (BSP_LCD_FONT  *p_font)
1248:Libraries/BSP/LCD/bsp_lcd.c **** {
 1838              		.loc 1 1248 0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 24
 1841              		@ frame_needed = 1, uses_anonymous_args = 0
 1842 0d00 80B5     		push	{r7, lr}
 1843              	.LCFI39:
 1844              		.cfi_def_cfa_offset 8
 1845              		.cfi_offset 14, -4
 1846              		.cfi_offset 7, -8
 1847 0d02 86B0     		sub	sp, sp, #24
 1848              	.LCFI40:
 1849              		.cfi_def_cfa_offset 32
 1850 0d04 00AF     		add	r7, sp, #0
 1851              	.LCFI41:
 1852              		.cfi_def_cfa_register 7
 1853 0d06 7860     		str	r0, [r7, #4]
1249:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_DEV  *p_dev;
1250:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U    width;
1251:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U    height;
1252:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U    line_max;
1253:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U    col_max;
1254:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U    pos_cur;
1255:Libraries/BSP/LCD/bsp_lcd.c **** 
1256:Libraries/BSP/LCD/bsp_lcd.c **** 
1257:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font == (void *)0) {
 1854              		.loc 1 1257 0
 1855 0d08 7B68     		ldr	r3, [r7, #4]
 1856 0d0a 002B     		cmp	r3, #0
 1857 0d0c 40D0     		beq	.L101
 1858              	.L99:
1258:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1259:Libraries/BSP/LCD/bsp_lcd.c ****     }
1260:Libraries/BSP/LCD/bsp_lcd.c **** 
1261:Libraries/BSP/LCD/bsp_lcd.c ****     width     =  p_font->Width;
 1859              		.loc 1 1261 0
 1860 0d0e 7B68     		ldr	r3, [r7, #4]
 1861 0d10 DB88     		ldrh	r3, [r3, #6]
 1862 0d12 FB75     		strb	r3, [r7, #23]
1262:Libraries/BSP/LCD/bsp_lcd.c ****     height    =  p_font->Height;
 1863              		.loc 1 1262 0
 1864 0d14 7B68     		ldr	r3, [r7, #4]
 1865 0d16 1B89     		ldrh	r3, [r3, #8]
 1866 0d18 BB75     		strb	r3, [r7, #22]
1263:Libraries/BSP/LCD/bsp_lcd.c ****     line_max  = (BSP_LCD_HEIGHT / height);
 1867              		.loc 1 1263 0
 1868 0d1a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 1869 0d1c 4FF4A072 		mov	r2, #320
 1870 0d20 B2FBF3F3 		udiv	r3, r2, r3
 1871 0d24 7B75     		strb	r3, [r7, #21]
1264:Libraries/BSP/LCD/bsp_lcd.c ****     col_max   = (BSP_LCD_WIDTH  / width);
 1872              		.loc 1 1264 0
 1873 0d26 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1874 0d28 4FF0F002 		mov	r2, #240
 1875 0d2c B2FBF3F3 		udiv	r3, r2, r3
 1876 0d30 3B75     		strb	r3, [r7, #20]
1265:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev     = &BSP_LCD_Ctxt;
 1877              		.loc 1 1265 0
 1878 0d32 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 1879 0d36 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 1880 0d3a 3B61     		str	r3, [r7, #16]
1266:Libraries/BSP/LCD/bsp_lcd.c **** 
1267:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1881              		.loc 1 1267 0
 1882 0d3c 00F022FD 		bl	BSP_LCD_Lock
1268:Libraries/BSP/LCD/bsp_lcd.c **** 
1269:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextFontPtr = p_font;
 1883              		.loc 1 1269 0
 1884 0d40 3B69     		ldr	r3, [r7, #16]
 1885 0d42 7A68     		ldr	r2, [r7, #4]
 1886 0d44 DA60     		str	r2, [r3, #12]
1270:Libraries/BSP/LCD/bsp_lcd.c ****     pos_cur            = p_dev->TextLineCur;
 1887              		.loc 1 1270 0
 1888 0d46 3B69     		ldr	r3, [r7, #16]
 1889 0d48 5B79     		ldrb	r3, [r3, #5]
 1890 0d4a FB73     		strb	r3, [r7, #15]
1271:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextLineCur = (pos_cur * p_dev->TextLineMax) / (line_max);
 1891              		.loc 1 1271 0
 1892 0d4c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1893 0d4e 3A69     		ldr	r2, [r7, #16]
 1894 0d50 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1895 0d52 02FB03F2 		mul	r2, r2, r3
 1896 0d56 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 1897 0d58 92FBF3F3 		sdiv	r3, r2, r3
 1898 0d5c DAB2     		uxtb	r2, r3
 1899 0d5e 3B69     		ldr	r3, [r7, #16]
 1900 0d60 5A71     		strb	r2, [r3, #5]
1272:Libraries/BSP/LCD/bsp_lcd.c ****     pos_cur            = p_dev->TextColCur;
 1901              		.loc 1 1272 0
 1902 0d62 3B69     		ldr	r3, [r7, #16]
 1903 0d64 DB79     		ldrb	r3, [r3, #7]
 1904 0d66 FB73     		strb	r3, [r7, #15]
1273:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextColCur  = (pos_cur * p_dev->TextColMax ) / (col_max);
 1905              		.loc 1 1273 0
 1906 0d68 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1907 0d6a 3A69     		ldr	r2, [r7, #16]
 1908 0d6c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 1909 0d6e 02FB03F2 		mul	r2, r2, r3
 1910 0d72 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 1911 0d74 92FBF3F3 		sdiv	r3, r2, r3
 1912 0d78 DAB2     		uxtb	r2, r3
 1913 0d7a 3B69     		ldr	r3, [r7, #16]
 1914 0d7c DA71     		strb	r2, [r3, #7]
1274:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextLineMax = line_max;
 1915              		.loc 1 1274 0
 1916 0d7e 3B69     		ldr	r3, [r7, #16]
 1917 0d80 7A7D     		ldrb	r2, [r7, #21]
 1918 0d82 1A71     		strb	r2, [r3, #4]
1275:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextColMax  = col_max;
 1919              		.loc 1 1275 0
 1920 0d84 3B69     		ldr	r3, [r7, #16]
 1921 0d86 3A7D     		ldrb	r2, [r7, #20]
 1922 0d88 9A71     		strb	r2, [r3, #6]
1276:Libraries/BSP/LCD/bsp_lcd.c **** 
1277:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 1923              		.loc 1 1277 0
 1924 0d8a 00F011FD 		bl	BSP_LCD_Unlock
 1925 0d8e 00E0     		b	.L98
 1926              	.L101:
1258:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 1927              		.loc 1 1258 0
 1928 0d90 00BF     		nop
 1929              	.L98:
1278:Libraries/BSP/LCD/bsp_lcd.c **** }
 1930              		.loc 1 1278 0
 1931 0d92 07F11807 		add	r7, r7, #24
 1932 0d96 BD46     		mov	sp, r7
 1933 0d98 80BD     		pop	{r7, pc}
 1934              		.cfi_endproc
 1935              	.LFE13:
 1937 0d9a 00BF     		.align	2
 1938              		.global	BSP_LCD_BarGraphDraw
 1939              		.thumb
 1940              		.thumb_func
 1942              	BSP_LCD_BarGraphDraw:
 1943              	.LFB14:
1279:Libraries/BSP/LCD/bsp_lcd.c **** 
1280:Libraries/BSP/LCD/bsp_lcd.c **** 
1281:Libraries/BSP/LCD/bsp_lcd.c **** 
1282:Libraries/BSP/LCD/bsp_lcd.c **** 
1283:Libraries/BSP/LCD/bsp_lcd.c **** /*
1284:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1285:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_BarGraph()
1286:Libraries/BSP/LCD/bsp_lcd.c **** *
1287:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Display a bargraph.
1288:Libraries/BSP/LCD/bsp_lcd.c **** *
1289:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x            X axis position in pixels.
1290:Libraries/BSP/LCD/bsp_lcd.c **** *
1291:Libraries/BSP/LCD/bsp_lcd.c **** *               y            Y axis position in pixels.
1292:Libraries/BSP/LCD/bsp_lcd.c **** *
1293:Libraries/BSP/LCD/bsp_lcd.c **** *               width        Bargraph width.
1294:Libraries/BSP/LCD/bsp_lcd.c **** *
1295:Libraries/BSP/LCD/bsp_lcd.c **** *               height       Bargraph height.
1296:Libraries/BSP/LCD/bsp_lcd.c **** *
1297:Libraries/BSP/LCD/bsp_lcd.c **** *               bg_color     Background color.
1298:Libraries/BSP/LCD/bsp_lcd.c **** *
1299:Libraries/BSP/LCD/bsp_lcd.c **** *               level_color  Level color.
1300:Libraries/BSP/LCD/bsp_lcd.c **** *
1301:Libraries/BSP/LCD/bsp_lcd.c **** *               level_pct    Level porcentage value (0 - 100%)
1302:Libraries/BSP/LCD/bsp_lcd.c **** *
1303:Libraries/BSP/LCD/bsp_lcd.c **** *               p_str        Pointer to the string array.
1304:Libraries/BSP/LCD/bsp_lcd.c **** *
1305:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1306:Libraries/BSP/LCD/bsp_lcd.c **** *
1307:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1308:Libraries/BSP/LCD/bsp_lcd.c **** *
1309:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : (1) The following diagram explain the relationship the arguments and the bargraph.
1310:Libraries/BSP/LCD/bsp_lcd.c **** *
1311:Libraries/BSP/LCD/bsp_lcd.c **** *                   |------- level % -------- |
1312:Libraries/BSP/LCD/bsp_lcd.c **** *                   | --------------- width --------------- |
1313:Libraries/BSP/LCD/bsp_lcd.c **** *                   +=======================================+    ---
1314:Libraries/BSP/LCD/bsp_lcd.c **** *                   |/////////////////////////\\\\\\\\\\\\\\|     |
1315:Libraries/BSP/LCD/bsp_lcd.c **** *                   |/////////////////////////\\\\\\\\\\\\\\|     |
1316:Libraries/BSP/LCD/bsp_lcd.c **** *                   |/////////////////////////\\\\\\\\\\\\\\|   height
1317:Libraries/BSP/LCD/bsp_lcd.c **** *                   |/////////////////////////\\\\\\\\\\\\\\|     |
1318:Libraries/BSP/LCD/bsp_lcd.c **** *                   |/////////////////////////\\\\\\\\\\\\\\|     |
1319:Libraries/BSP/LCD/bsp_lcd.c **** *                   |///////|/////////////////\\\\\\\\|\\\\\|     |
1320:Libraries/BSP/LCD/bsp_lcd.c **** *                   +=======|=================|=======|=====+    ---
1321:Libraries/BSP/LCD/bsp_lcd.c **** *                           |                         |
1322:Libraries/BSP/LCD/bsp_lcd.c **** *                           |                         +----------->  Background color
1323:Libraries/BSP/LCD/bsp_lcd.c **** *                           +-------> Level color
1324:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1325:Libraries/BSP/LCD/bsp_lcd.c **** */
1326:Libraries/BSP/LCD/bsp_lcd.c **** 
1327:Libraries/BSP/LCD/bsp_lcd.c **** 
1328:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_BarGraphDraw  (BSP_LCD_PIXEL  x,
1329:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_PIXEL  y,
1330:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_PIXEL  width,
1331:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_PIXEL  height,
1332:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_COLOR  bg_color,
1333:Libraries/BSP/LCD/bsp_lcd.c ****                              BSP_LCD_COLOR  level_color,
1334:Libraries/BSP/LCD/bsp_lcd.c ****                              CPU_INT08U     level_pct)
1335:Libraries/BSP/LCD/bsp_lcd.c **** {
 1944              		.loc 1 1335 0
 1945              		.cfi_startproc
 1946              		@ args = 12, pretend = 0, frame = 16
 1947              		@ frame_needed = 1, uses_anonymous_args = 0
 1948 0d9c 80B5     		push	{r7, lr}
 1949              	.LCFI42:
 1950              		.cfi_def_cfa_offset 8
 1951              		.cfi_offset 14, -4
 1952              		.cfi_offset 7, -8
 1953 0d9e 84B0     		sub	sp, sp, #16
 1954              	.LCFI43:
 1955              		.cfi_def_cfa_offset 24
 1956 0da0 00AF     		add	r7, sp, #0
 1957              	.LCFI44:
 1958              		.cfi_def_cfa_register 7
 1959 0da2 F880     		strh	r0, [r7, #6]	@ movhi
 1960 0da4 B980     		strh	r1, [r7, #4]	@ movhi
 1961 0da6 7A80     		strh	r2, [r7, #2]	@ movhi
 1962 0da8 3B80     		strh	r3, [r7, #0]	@ movhi
1336:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR  color;
1337:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_x;
1338:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_y;
1339:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_pct;
1340:Libraries/BSP/LCD/bsp_lcd.c **** 
1341:Libraries/BSP/LCD/bsp_lcd.c ****     if (x + width  >  BSP_LCD_WIDTH) {
 1963              		.loc 1 1341 0
 1964 0daa FA88     		ldrh	r2, [r7, #6]
 1965 0dac 7B88     		ldrh	r3, [r7, #2]
 1966 0dae D318     		adds	r3, r2, r3
 1967 0db0 F02B     		cmp	r3, #240
 1968 0db2 00F2A180 		bhi	.L112
 1969              	.L103:
1342:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1343:Libraries/BSP/LCD/bsp_lcd.c ****     }
1344:Libraries/BSP/LCD/bsp_lcd.c **** 
1345:Libraries/BSP/LCD/bsp_lcd.c ****     if (y + height >  BSP_LCD_HEIGHT) {
 1970              		.loc 1 1345 0
 1971 0db6 BA88     		ldrh	r2, [r7, #4]
 1972 0db8 3B88     		ldrh	r3, [r7, #0]
 1973 0dba D318     		adds	r3, r2, r3
 1974 0dbc B3F5A07F 		cmp	r3, #320
 1975 0dc0 00F29C80 		bhi	.L113
 1976              	.L105:
1346:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1347:Libraries/BSP/LCD/bsp_lcd.c ****     }
1348:Libraries/BSP/LCD/bsp_lcd.c **** 
1349:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_pct = (width * level_pct / 100u);
 1977              		.loc 1 1349 0
 1978 0dc4 7B88     		ldrh	r3, [r7, #2]
 1979 0dc6 97F82020 		ldrb	r2, [r7, #32]	@ zero_extendqisi2
 1980 0dca 02FB03F3 		mul	r3, r2, r3
 1981 0dce 1A46     		mov	r2, r3
 1982 0dd0 48F21F53 		movw	r3, #34079
 1983 0dd4 C5F2EB13 		movt	r3, 20971
 1984 0dd8 A3FB0213 		umull	r1, r3, r3, r2
 1985 0ddc 4FEA5313 		lsr	r3, r3, #5
 1986 0de0 3B81     		strh	r3, [r7, #8]	@ movhi
1350:Libraries/BSP/LCD/bsp_lcd.c **** 
1351:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 1987              		.loc 1 1351 0
 1988 0de2 00F0CFFC 		bl	BSP_LCD_Lock
1352:Libraries/BSP/LCD/bsp_lcd.c **** 
1353:Libraries/BSP/LCD/bsp_lcd.c **** 
1354:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
 1989              		.loc 1 1354 0
 1990 0de6 FB88     		ldrh	r3, [r7, #6]
 1991 0de8 4FF05000 		mov	r0, #80
 1992 0dec 1946     		mov	r1, r3
 1993 0dee 00F041FC 		bl	BSP_LCD_CtrlRegWr
1355:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
 1994              		.loc 1 1355 0
 1995 0df2 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1996 0df4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1997 0df6 D318     		adds	r3, r2, r3
 1998 0df8 9BB2     		uxth	r3, r3
 1999 0dfa 03F1FF33 		add	r3, r3, #-1
 2000 0dfe 9BB2     		uxth	r3, r3
 2001 0e00 4FF05100 		mov	r0, #81
 2002 0e04 1946     		mov	r1, r3
 2003 0e06 00F035FC 		bl	BSP_LCD_CtrlRegWr
1356:Libraries/BSP/LCD/bsp_lcd.c **** 
1357:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
 2004              		.loc 1 1357 0
 2005 0e0a BB88     		ldrh	r3, [r7, #4]
 2006 0e0c 4FF05200 		mov	r0, #82
 2007 0e10 1946     		mov	r1, r3
 2008 0e12 00F02FFC 		bl	BSP_LCD_CtrlRegWr
1358:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
 2009              		.loc 1 1358 0
 2010 0e16 BA88     		ldrh	r2, [r7, #4]	@ movhi
 2011 0e18 3B88     		ldrh	r3, [r7, #0]	@ movhi
 2012 0e1a D318     		adds	r3, r2, r3
 2013 0e1c 9BB2     		uxth	r3, r3
 2014 0e1e 03F1FF33 		add	r3, r3, #-1
 2015 0e22 9BB2     		uxth	r3, r3
 2016 0e24 4FF05300 		mov	r0, #83
 2017 0e28 1946     		mov	r1, r3
 2018 0e2a 00F023FC 		bl	BSP_LCD_CtrlRegWr
1359:Libraries/BSP/LCD/bsp_lcd.c **** 
1360:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
 2019              		.loc 1 1360 0
 2020 0e2e FB88     		ldrh	r3, [r7, #6]
 2021 0e30 4FF02000 		mov	r0, #32
 2022 0e34 1946     		mov	r1, r3
 2023 0e36 00F01DFC 		bl	BSP_LCD_CtrlRegWr
1361:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
 2024              		.loc 1 1361 0
 2025 0e3a BB88     		ldrh	r3, [r7, #4]
 2026 0e3c 4FF02100 		mov	r0, #33
 2027 0e40 1946     		mov	r1, r3
 2028 0e42 00F017FC 		bl	BSP_LCD_CtrlRegWr
1362:Libraries/BSP/LCD/bsp_lcd.c **** 
1363:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2029              		.loc 1 1363 0
 2030 0e46 4FF00000 		mov	r0, #0
 2031 0e4a 4FF04001 		mov	r1, #64
 2032 0e4e FFF7FEFF 		bl	CSP_GPIO_BitClr
1364:Libraries/BSP/LCD/bsp_lcd.c **** 
1365:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 2033              		.loc 1 1365 0
 2034 0e52 4FF07000 		mov	r0, #112
 2035 0e56 00F04DFC 		bl	BSP_LCD_SPI_Xfer
1366:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 2036              		.loc 1 1366 0
 2037 0e5a 4FF00000 		mov	r0, #0
 2038 0e5e 00F049FC 		bl	BSP_LCD_SPI_Xfer
1367:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 2039              		.loc 1 1367 0
 2040 0e62 4FF02200 		mov	r0, #34
 2041 0e66 00F045FC 		bl	BSP_LCD_SPI_Xfer
1368:Libraries/BSP/LCD/bsp_lcd.c **** 
1369:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2042              		.loc 1 1369 0
 2043 0e6a 4FF00000 		mov	r0, #0
 2044 0e6e 4FF04001 		mov	r1, #64
 2045 0e72 FFF7FEFF 		bl	CSP_GPIO_BitSet
1370:Libraries/BSP/LCD/bsp_lcd.c **** 
1371:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2046              		.loc 1 1371 0
 2047 0e76 4FF00000 		mov	r0, #0
 2048 0e7a 4FF04001 		mov	r1, #64
 2049 0e7e FFF7FEFF 		bl	CSP_GPIO_BitClr
1372:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 2050              		.loc 1 1372 0
 2051 0e82 4FF07200 		mov	r0, #114
 2052 0e86 00F035FC 		bl	BSP_LCD_SPI_Xfer
1373:Libraries/BSP/LCD/bsp_lcd.c **** 
1374:Libraries/BSP/LCD/bsp_lcd.c **** 
1375:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y <  height; pixel_y++) {
 2053              		.loc 1 1375 0
 2054 0e8a 4FF00003 		mov	r3, #0
 2055 0e8e 7B81     		strh	r3, [r7, #10]	@ movhi
 2056 0e90 25E0     		b	.L106
 2057              	.L111:
1376:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 2058              		.loc 1 1376 0
 2059 0e92 4FF00003 		mov	r3, #0
 2060 0e96 BB81     		strh	r3, [r7, #12]	@ movhi
 2061 0e98 19E0     		b	.L107
 2062              	.L110:
1377:Libraries/BSP/LCD/bsp_lcd.c ****             if (pixel_x < pixel_pct) {
 2063              		.loc 1 1377 0
 2064 0e9a BA89     		ldrh	r2, [r7, #12]
 2065 0e9c 3B89     		ldrh	r3, [r7, #8]
 2066 0e9e 9A42     		cmp	r2, r3
 2067 0ea0 02D2     		bcs	.L108
1378:Libraries/BSP/LCD/bsp_lcd.c ****                 color = bg_color;
 2068              		.loc 1 1378 0
 2069 0ea2 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 2070 0ea4 FB81     		strh	r3, [r7, #14]	@ movhi
 2071 0ea6 01E0     		b	.L109
 2072              	.L108:
1379:Libraries/BSP/LCD/bsp_lcd.c ****             } else {
1380:Libraries/BSP/LCD/bsp_lcd.c ****                 color = level_color;
 2073              		.loc 1 1380 0
 2074 0ea8 BB8B     		ldrh	r3, [r7, #28]	@ movhi
 2075 0eaa FB81     		strh	r3, [r7, #14]	@ movhi
 2076              	.L109:
1381:Libraries/BSP/LCD/bsp_lcd.c ****             }
1382:Libraries/BSP/LCD/bsp_lcd.c **** 
1383:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color >> 8u);
 2077              		.loc 1 1383 0
 2078 0eac FB89     		ldrh	r3, [r7, #14]
 2079 0eae 4FEA1323 		lsr	r3, r3, #8
 2080 0eb2 9BB2     		uxth	r3, r3
 2081 0eb4 DBB2     		uxtb	r3, r3
 2082 0eb6 1846     		mov	r0, r3
 2083 0eb8 00F01CFC 		bl	BSP_LCD_SPI_Xfer
1384:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 2084              		.loc 1 1384 0
 2085 0ebc FB89     		ldrh	r3, [r7, #14]	@ movhi
 2086 0ebe DBB2     		uxtb	r3, r3
 2087 0ec0 1846     		mov	r0, r3
 2088 0ec2 00F017FC 		bl	BSP_LCD_SPI_Xfer
1376:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 2089              		.loc 1 1376 0
 2090 0ec6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2091 0ec8 03F10103 		add	r3, r3, #1
 2092 0ecc BB81     		strh	r3, [r7, #12]	@ movhi
 2093              	.L107:
1376:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 2094              		.loc 1 1376 0 is_stmt 0 discriminator 1
 2095 0ece BA89     		ldrh	r2, [r7, #12]
 2096 0ed0 7B88     		ldrh	r3, [r7, #2]
 2097 0ed2 9A42     		cmp	r2, r3
 2098 0ed4 E1D3     		bcc	.L110
1375:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y <  height; pixel_y++) {
 2099              		.loc 1 1375 0 is_stmt 1
 2100 0ed6 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2101 0ed8 03F10103 		add	r3, r3, #1
 2102 0edc 7B81     		strh	r3, [r7, #10]	@ movhi
 2103              	.L106:
1375:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y <  height; pixel_y++) {
 2104              		.loc 1 1375 0 is_stmt 0 discriminator 1
 2105 0ede 7A89     		ldrh	r2, [r7, #10]
 2106 0ee0 3B88     		ldrh	r3, [r7, #0]
 2107 0ee2 9A42     		cmp	r2, r3
 2108 0ee4 D5D3     		bcc	.L111
1385:Libraries/BSP/LCD/bsp_lcd.c ****         }
1386:Libraries/BSP/LCD/bsp_lcd.c ****     }
1387:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2109              		.loc 1 1387 0 is_stmt 1
 2110 0ee6 4FF00000 		mov	r0, #0
 2111 0eea 4FF04001 		mov	r1, #64
 2112 0eee FFF7FEFF 		bl	CSP_GPIO_BitSet
1388:Libraries/BSP/LCD/bsp_lcd.c **** 
1389:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2113              		.loc 1 1389 0
 2114 0ef2 00F05DFC 		bl	BSP_LCD_Unlock
 2115 0ef6 02E0     		b	.L102
 2116              	.L112:
1342:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2117              		.loc 1 1342 0
 2118 0ef8 00BF     		nop
 2119 0efa 00E0     		b	.L102
 2120              	.L113:
1346:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2121              		.loc 1 1346 0
 2122 0efc 00BF     		nop
 2123              	.L102:
1390:Libraries/BSP/LCD/bsp_lcd.c **** }
 2124              		.loc 1 1390 0
 2125 0efe 07F11007 		add	r7, r7, #16
 2126 0f02 BD46     		mov	sp, r7
 2127 0f04 80BD     		pop	{r7, pc}
 2128              		.cfi_endproc
 2129              	.LFE14:
 2131 0f06 00BF     		.align	2
 2132              		.global	BSP_LCD_BitmapDraw
 2133              		.thumb
 2134              		.thumb_func
 2136              	BSP_LCD_BitmapDraw:
 2137              	.LFB15:
1391:Libraries/BSP/LCD/bsp_lcd.c **** 
1392:Libraries/BSP/LCD/bsp_lcd.c **** 
1393:Libraries/BSP/LCD/bsp_lcd.c **** /*
1394:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1395:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_BitmapDraw()
1396:Libraries/BSP/LCD/bsp_lcd.c **** *
1397:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Display a bargraph.
1398:Libraries/BSP/LCD/bsp_lcd.c **** *
1399:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x         X axis position in pixels.
1400:Libraries/BSP/LCD/bsp_lcd.c **** *
1401:Libraries/BSP/LCD/bsp_lcd.c **** *               y         Y axis position in pixels.
1402:Libraries/BSP/LCD/bsp_lcd.c **** *
1403:Libraries/BSP/LCD/bsp_lcd.c **** *               width     Bitmap width.
1404:Libraries/BSP/LCD/bsp_lcd.c **** *
1405:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh     Bitmap heigh.
1406:Libraries/BSP/LCD/bsp_lcd.c **** *
1407:Libraries/BSP/LCD/bsp_lcd.c **** *               p_bitmap  Pointer to the color bitmap.
1408:Libraries/BSP/LCD/bsp_lcd.c **** *
1409:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1410:Libraries/BSP/LCD/bsp_lcd.c **** *
1411:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1412:Libraries/BSP/LCD/bsp_lcd.c **** *
1413:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1414:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1415:Libraries/BSP/LCD/bsp_lcd.c **** */
1416:Libraries/BSP/LCD/bsp_lcd.c **** 
1417:Libraries/BSP/LCD/bsp_lcd.c **** 
1418:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_BitmapDraw (CPU_INT16U   x,
1419:Libraries/BSP/LCD/bsp_lcd.c ****                           CPU_INT16U   y,
1420:Libraries/BSP/LCD/bsp_lcd.c ****                           CPU_INT16U   width,
1421:Libraries/BSP/LCD/bsp_lcd.c ****                           CPU_INT16U   height,
1422:Libraries/BSP/LCD/bsp_lcd.c ****                           CPU_INT16U  *p_bitmap)
1423:Libraries/BSP/LCD/bsp_lcd.c **** {
 2138              		.loc 1 1423 0
 2139              		.cfi_startproc
 2140              		@ args = 4, pretend = 0, frame = 8
 2141              		@ frame_needed = 1, uses_anonymous_args = 0
 2142 0f08 90B5     		push	{r4, r7, lr}
 2143              	.LCFI45:
 2144              		.cfi_def_cfa_offset 12
 2145              		.cfi_offset 14, -4
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 4, -12
 2148 0f0a 85B0     		sub	sp, sp, #20
 2149              	.LCFI46:
 2150              		.cfi_def_cfa_offset 32
 2151 0f0c 02AF     		add	r7, sp, #8
 2152              	.LCFI47:
 2153              		.cfi_def_cfa 7, 24
 2154 0f0e F880     		strh	r0, [r7, #6]	@ movhi
 2155 0f10 B980     		strh	r1, [r7, #4]	@ movhi
 2156 0f12 7A80     		strh	r2, [r7, #2]	@ movhi
 2157 0f14 3B80     		strh	r3, [r7, #0]	@ movhi
1424:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Check the bitmap boundaries     
1425:Libraries/BSP/LCD/bsp_lcd.c **** 
1426:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 2158              		.loc 1 1426 0
 2159 0f16 00F035FC 		bl	BSP_LCD_Lock
1427:Libraries/BSP/LCD/bsp_lcd.c **** 
1428:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_BitmapDrawUnlock(x,
 2160              		.loc 1 1428 0
 2161 0f1a F888     		ldrh	r0, [r7, #6]
 2162 0f1c B988     		ldrh	r1, [r7, #4]
 2163 0f1e 7A88     		ldrh	r2, [r7, #2]
 2164 0f20 3B88     		ldrh	r3, [r7, #0]
 2165 0f22 BC69     		ldr	r4, [r7, #24]
 2166 0f24 0094     		str	r4, [sp, #0]
 2167 0f26 00F009FA 		bl	BSP_LCD_BitmapDrawUnlock
1429:Libraries/BSP/LCD/bsp_lcd.c ****                              y,
1430:Libraries/BSP/LCD/bsp_lcd.c ****                              width,
1431:Libraries/BSP/LCD/bsp_lcd.c ****                              height,
1432:Libraries/BSP/LCD/bsp_lcd.c ****                              p_bitmap);
1433:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2168              		.loc 1 1433 0
 2169 0f2a 00F041FC 		bl	BSP_LCD_Unlock
1434:Libraries/BSP/LCD/bsp_lcd.c **** 
1435:Libraries/BSP/LCD/bsp_lcd.c **** }
 2170              		.loc 1 1435 0
 2171 0f2e 07F10C07 		add	r7, r7, #12
 2172 0f32 BD46     		mov	sp, r7
 2173 0f34 90BD     		pop	{r4, r7, pc}
 2174              		.cfi_endproc
 2175              	.LFE15:
 2177 0f36 00BF     		.align	2
 2178              		.global	BSP_LCD_RectDraw
 2179              		.thumb
 2180              		.thumb_func
 2182              	BSP_LCD_RectDraw:
 2183              	.LFB16:
1436:Libraries/BSP/LCD/bsp_lcd.c **** 
1437:Libraries/BSP/LCD/bsp_lcd.c **** /*
1438:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1439:Libraries/BSP/LCD/bsp_lcd.c **** *                                            BSP_LCD_RectDraw()
1440:Libraries/BSP/LCD/bsp_lcd.c **** *
1441:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw an unfilled rectangule.
1442:Libraries/BSP/LCD/bsp_lcd.c **** *
1443:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x            X axis position in pixels.
1444:Libraries/BSP/LCD/bsp_lcd.c **** *
1445:Libraries/BSP/LCD/bsp_lcd.c **** *               y            Y axis position in pixels.
1446:Libraries/BSP/LCD/bsp_lcd.c **** *
1447:Libraries/BSP/LCD/bsp_lcd.c **** *               width        Rectangle width in pixels.
1448:Libraries/BSP/LCD/bsp_lcd.c **** *
1449:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh        Rectangle width in pixels.
1450:Libraries/BSP/LCD/bsp_lcd.c **** *
1451:Libraries/BSP/LCD/bsp_lcd.c **** *               line_weight  Line weight.
1452:Libraries/BSP/LCD/bsp_lcd.c **** *
1453:Libraries/BSP/LCD/bsp_lcd.c **** *               line_color   Line color.
1454:Libraries/BSP/LCD/bsp_lcd.c **** *
1455:Libraries/BSP/LCD/bsp_lcd.c **** *               p_bitmap     Pointer to the color bitmap.
1456:Libraries/BSP/LCD/bsp_lcd.c **** *
1457:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1458:Libraries/BSP/LCD/bsp_lcd.c **** *
1459:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1460:Libraries/BSP/LCD/bsp_lcd.c **** *
1461:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1462:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1463:Libraries/BSP/LCD/bsp_lcd.c **** */
1464:Libraries/BSP/LCD/bsp_lcd.c **** 
1465:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_RectDraw  (BSP_LCD_PIXEL  x,
1466:Libraries/BSP/LCD/bsp_lcd.c ****                          BSP_LCD_PIXEL  y,
1467:Libraries/BSP/LCD/bsp_lcd.c ****                          BSP_LCD_PIXEL  width,
1468:Libraries/BSP/LCD/bsp_lcd.c ****                          BSP_LCD_PIXEL  height,
1469:Libraries/BSP/LCD/bsp_lcd.c ****                          BSP_LCD_PIXEL  line_weight,
1470:Libraries/BSP/LCD/bsp_lcd.c ****                          BSP_LCD_COLOR  line_color)
1471:Libraries/BSP/LCD/bsp_lcd.c **** {
 2184              		.loc 1 1471 0
 2185              		.cfi_startproc
 2186              		@ args = 8, pretend = 0, frame = 8
 2187              		@ frame_needed = 1, uses_anonymous_args = 0
 2188 0f38 90B5     		push	{r4, r7, lr}
 2189              	.LCFI48:
 2190              		.cfi_def_cfa_offset 12
 2191              		.cfi_offset 14, -4
 2192              		.cfi_offset 7, -8
 2193              		.cfi_offset 4, -12
 2194 0f3a 87B0     		sub	sp, sp, #28
 2195              	.LCFI49:
 2196              		.cfi_def_cfa_offset 40
 2197 0f3c 04AF     		add	r7, sp, #16
 2198              	.LCFI50:
 2199              		.cfi_def_cfa 7, 24
 2200 0f3e F880     		strh	r0, [r7, #6]	@ movhi
 2201 0f40 B980     		strh	r1, [r7, #4]	@ movhi
 2202 0f42 7A80     		strh	r2, [r7, #2]	@ movhi
 2203 0f44 3B80     		strh	r3, [r7, #0]	@ movhi
1472:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 2204              		.loc 1 1472 0
 2205 0f46 00F01DFC 		bl	BSP_LCD_Lock
1473:Libraries/BSP/LCD/bsp_lcd.c **** 
1474:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_RectDrawUnlock(x,
 2206              		.loc 1 1474 0
 2207 0f4a F888     		ldrh	r0, [r7, #6]
 2208 0f4c B988     		ldrh	r1, [r7, #4]
 2209 0f4e 7A88     		ldrh	r2, [r7, #2]
 2210 0f50 3B88     		ldrh	r3, [r7, #0]
 2211 0f52 4FF00004 		mov	r4, #0
 2212 0f56 0094     		str	r4, [sp, #0]
 2213 0f58 4FF00004 		mov	r4, #0
 2214 0f5c 0194     		str	r4, [sp, #4]
 2215 0f5e 3C8B     		ldrh	r4, [r7, #24]
 2216 0f60 0294     		str	r4, [sp, #8]
 2217 0f62 BC8B     		ldrh	r4, [r7, #28]
 2218 0f64 0394     		str	r4, [sp, #12]
 2219 0f66 00F07FFA 		bl	BSP_LCD_RectDrawUnlock
1475:Libraries/BSP/LCD/bsp_lcd.c ****                            y,
1476:Libraries/BSP/LCD/bsp_lcd.c ****                            width,
1477:Libraries/BSP/LCD/bsp_lcd.c ****                            height,
1478:Libraries/BSP/LCD/bsp_lcd.c ****                            DEF_NO,
1479:Libraries/BSP/LCD/bsp_lcd.c ****                            0u,
1480:Libraries/BSP/LCD/bsp_lcd.c ****                            line_weight,
1481:Libraries/BSP/LCD/bsp_lcd.c ****                            line_color);
1482:Libraries/BSP/LCD/bsp_lcd.c **** 
1483:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2220              		.loc 1 1483 0
 2221 0f6a 00F021FC 		bl	BSP_LCD_Unlock
1484:Libraries/BSP/LCD/bsp_lcd.c **** }
 2222              		.loc 1 1484 0
 2223 0f6e 07F10C07 		add	r7, r7, #12
 2224 0f72 BD46     		mov	sp, r7
 2225 0f74 90BD     		pop	{r4, r7, pc}
 2226              		.cfi_endproc
 2227              	.LFE16:
 2229 0f76 00BF     		.align	2
 2230              		.global	BSP_LCD_RectDrawFill
 2231              		.thumb
 2232              		.thumb_func
 2234              	BSP_LCD_RectDrawFill:
 2235              	.LFB17:
1485:Libraries/BSP/LCD/bsp_lcd.c **** 
1486:Libraries/BSP/LCD/bsp_lcd.c **** 
1487:Libraries/BSP/LCD/bsp_lcd.c **** /*
1488:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1489:Libraries/BSP/LCD/bsp_lcd.c **** *                                         BSP_LCD_BitmapDrawUnlock()
1490:Libraries/BSP/LCD/bsp_lcd.c **** *
1491:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a filled rectangle.
1492:Libraries/BSP/LCD/bsp_lcd.c **** *
1493:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x             X axis position in pixels.
1494:Libraries/BSP/LCD/bsp_lcd.c **** *
1495:Libraries/BSP/LCD/bsp_lcd.c **** *               y             Y axis position in pixels.
1496:Libraries/BSP/LCD/bsp_lcd.c **** *
1497:Libraries/BSP/LCD/bsp_lcd.c **** *               width         Rectangle width in pixels.
1498:Libraries/BSP/LCD/bsp_lcd.c **** *
1499:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh         Rectangle width in pixels height.
1500:Libraries/BSP/LCD/bsp_lcd.c **** *
1501:Libraries/BSP/LCD/bsp_lcd.c **** *               fill_color    Rectangle fill color.
1502:Libraries/BSP/LCD/bsp_lcd.c **** *
1503:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1504:Libraries/BSP/LCD/bsp_lcd.c **** *
1505:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1506:Libraries/BSP/LCD/bsp_lcd.c **** *
1507:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1508:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1509:Libraries/BSP/LCD/bsp_lcd.c **** */
1510:Libraries/BSP/LCD/bsp_lcd.c **** 
1511:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_RectDrawFill (BSP_LCD_PIXEL  x,
1512:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_PIXEL  y,
1513:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_PIXEL  width,
1514:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_PIXEL  height,
1515:Libraries/BSP/LCD/bsp_lcd.c ****                             BSP_LCD_PIXEL  color)
1516:Libraries/BSP/LCD/bsp_lcd.c **** {
 2236              		.loc 1 1516 0
 2237              		.cfi_startproc
 2238              		@ args = 4, pretend = 0, frame = 8
 2239              		@ frame_needed = 1, uses_anonymous_args = 0
 2240 0f78 90B5     		push	{r4, r7, lr}
 2241              	.LCFI51:
 2242              		.cfi_def_cfa_offset 12
 2243              		.cfi_offset 14, -4
 2244              		.cfi_offset 7, -8
 2245              		.cfi_offset 4, -12
 2246 0f7a 87B0     		sub	sp, sp, #28
 2247              	.LCFI52:
 2248              		.cfi_def_cfa_offset 40
 2249 0f7c 04AF     		add	r7, sp, #16
 2250              	.LCFI53:
 2251              		.cfi_def_cfa 7, 24
 2252 0f7e F880     		strh	r0, [r7, #6]	@ movhi
 2253 0f80 B980     		strh	r1, [r7, #4]	@ movhi
 2254 0f82 7A80     		strh	r2, [r7, #2]	@ movhi
 2255 0f84 3B80     		strh	r3, [r7, #0]	@ movhi
1517:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 2256              		.loc 1 1517 0
 2257 0f86 00F0FDFB 		bl	BSP_LCD_Lock
1518:Libraries/BSP/LCD/bsp_lcd.c **** 
1519:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_RectDrawUnlock(x,
 2258              		.loc 1 1519 0
 2259 0f8a F888     		ldrh	r0, [r7, #6]
 2260 0f8c B988     		ldrh	r1, [r7, #4]
 2261 0f8e 7A88     		ldrh	r2, [r7, #2]
 2262 0f90 3B88     		ldrh	r3, [r7, #0]
 2263 0f92 4FF00104 		mov	r4, #1
 2264 0f96 0094     		str	r4, [sp, #0]
 2265 0f98 3C8B     		ldrh	r4, [r7, #24]
 2266 0f9a 0194     		str	r4, [sp, #4]
 2267 0f9c 4FF00004 		mov	r4, #0
 2268 0fa0 0294     		str	r4, [sp, #8]
 2269 0fa2 4FF00004 		mov	r4, #0
 2270 0fa6 0394     		str	r4, [sp, #12]
 2271 0fa8 00F05EFA 		bl	BSP_LCD_RectDrawUnlock
1520:Libraries/BSP/LCD/bsp_lcd.c ****                            y,
1521:Libraries/BSP/LCD/bsp_lcd.c ****                            width,
1522:Libraries/BSP/LCD/bsp_lcd.c ****                            height,
1523:Libraries/BSP/LCD/bsp_lcd.c ****                            DEF_YES,
1524:Libraries/BSP/LCD/bsp_lcd.c ****                            color,
1525:Libraries/BSP/LCD/bsp_lcd.c ****                            0u,
1526:Libraries/BSP/LCD/bsp_lcd.c ****                            0u);
1527:Libraries/BSP/LCD/bsp_lcd.c **** 
1528:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2272              		.loc 1 1528 0
 2273 0fac 00F000FC 		bl	BSP_LCD_Unlock
1529:Libraries/BSP/LCD/bsp_lcd.c **** 
1530:Libraries/BSP/LCD/bsp_lcd.c **** }
 2274              		.loc 1 1530 0
 2275 0fb0 07F10C07 		add	r7, r7, #12
 2276 0fb4 BD46     		mov	sp, r7
 2277 0fb6 90BD     		pop	{r4, r7, pc}
 2278              		.cfi_endproc
 2279              	.LFE17:
 2281              		.align	2
 2282              		.global	BSP_LCD_RectDrawFillLine
 2283              		.thumb
 2284              		.thumb_func
 2286              	BSP_LCD_RectDrawFillLine:
 2287              	.LFB18:
1531:Libraries/BSP/LCD/bsp_lcd.c **** 
1532:Libraries/BSP/LCD/bsp_lcd.c **** 
1533:Libraries/BSP/LCD/bsp_lcd.c **** /*
1534:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1535:Libraries/BSP/LCD/bsp_lcd.c **** *                                   BSP_LCD_RectDrawFillLine()
1536:Libraries/BSP/LCD/bsp_lcd.c **** *
1537:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a filled rectangle with a border.
1538:Libraries/BSP/LCD/bsp_lcd.c **** *
1539:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x             X axis position in pixels.
1540:Libraries/BSP/LCD/bsp_lcd.c **** *
1541:Libraries/BSP/LCD/bsp_lcd.c **** *               y             Y axis position in pixels.
1542:Libraries/BSP/LCD/bsp_lcd.c **** *
1543:Libraries/BSP/LCD/bsp_lcd.c **** *               width         Rectangle width in pixels.
1544:Libraries/BSP/LCD/bsp_lcd.c **** *
1545:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh         Rectangle width in pixels height.
1546:Libraries/BSP/LCD/bsp_lcd.c **** *
1547:Libraries/BSP/LCD/bsp_lcd.c **** *               fill_color    Rectangle fill color.
1548:Libraries/BSP/LCD/bsp_lcd.c **** *
1549:Libraries/BSP/LCD/bsp_lcd.c **** *               line_weight   Line weight.
1550:Libraries/BSP/LCD/bsp_lcd.c **** *
1551:Libraries/BSP/LCD/bsp_lcd.c **** *               line_color    Line color.
1552:Libraries/BSP/LCD/bsp_lcd.c **** *
1553:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1554:Libraries/BSP/LCD/bsp_lcd.c **** *
1555:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1556:Libraries/BSP/LCD/bsp_lcd.c **** *
1557:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1558:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1559:Libraries/BSP/LCD/bsp_lcd.c **** */
1560:Libraries/BSP/LCD/bsp_lcd.c **** 
1561:Libraries/BSP/LCD/bsp_lcd.c **** 
1562:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_RectDrawFillLine (BSP_LCD_PIXEL  x,
1563:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_PIXEL  y,
1564:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_PIXEL  width,
1565:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_PIXEL  height,
1566:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_PIXEL  fill_color,
1567:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_PIXEL  line_weight,
1568:Libraries/BSP/LCD/bsp_lcd.c ****                                 BSP_LCD_COLOR  line_color)
1569:Libraries/BSP/LCD/bsp_lcd.c **** {
 2288              		.loc 1 1569 0
 2289              		.cfi_startproc
 2290              		@ args = 12, pretend = 0, frame = 8
 2291              		@ frame_needed = 1, uses_anonymous_args = 0
 2292 0fb8 90B5     		push	{r4, r7, lr}
 2293              	.LCFI54:
 2294              		.cfi_def_cfa_offset 12
 2295              		.cfi_offset 14, -4
 2296              		.cfi_offset 7, -8
 2297              		.cfi_offset 4, -12
 2298 0fba 87B0     		sub	sp, sp, #28
 2299              	.LCFI55:
 2300              		.cfi_def_cfa_offset 40
 2301 0fbc 04AF     		add	r7, sp, #16
 2302              	.LCFI56:
 2303              		.cfi_def_cfa 7, 24
 2304 0fbe F880     		strh	r0, [r7, #6]	@ movhi
 2305 0fc0 B980     		strh	r1, [r7, #4]	@ movhi
 2306 0fc2 7A80     		strh	r2, [r7, #2]	@ movhi
 2307 0fc4 3B80     		strh	r3, [r7, #0]	@ movhi
1570:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 2308              		.loc 1 1570 0
 2309 0fc6 00F0DDFB 		bl	BSP_LCD_Lock
1571:Libraries/BSP/LCD/bsp_lcd.c **** 
1572:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_RectDrawUnlock(x,
 2310              		.loc 1 1572 0
 2311 0fca F888     		ldrh	r0, [r7, #6]
 2312 0fcc B988     		ldrh	r1, [r7, #4]
 2313 0fce 7A88     		ldrh	r2, [r7, #2]
 2314 0fd0 3B88     		ldrh	r3, [r7, #0]
 2315 0fd2 4FF00104 		mov	r4, #1
 2316 0fd6 0094     		str	r4, [sp, #0]
 2317 0fd8 3C8B     		ldrh	r4, [r7, #24]
 2318 0fda 0194     		str	r4, [sp, #4]
 2319 0fdc BC8B     		ldrh	r4, [r7, #28]
 2320 0fde 0294     		str	r4, [sp, #8]
 2321 0fe0 3C8C     		ldrh	r4, [r7, #32]
 2322 0fe2 0394     		str	r4, [sp, #12]
 2323 0fe4 00F040FA 		bl	BSP_LCD_RectDrawUnlock
1573:Libraries/BSP/LCD/bsp_lcd.c ****                            y,
1574:Libraries/BSP/LCD/bsp_lcd.c ****                            width,
1575:Libraries/BSP/LCD/bsp_lcd.c ****                            height,
1576:Libraries/BSP/LCD/bsp_lcd.c ****                            DEF_YES,
1577:Libraries/BSP/LCD/bsp_lcd.c ****                            fill_color,
1578:Libraries/BSP/LCD/bsp_lcd.c ****                            line_weight,
1579:Libraries/BSP/LCD/bsp_lcd.c ****                            line_color);
1580:Libraries/BSP/LCD/bsp_lcd.c **** 
1581:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2324              		.loc 1 1581 0
 2325 0fe8 00F0E2FB 		bl	BSP_LCD_Unlock
1582:Libraries/BSP/LCD/bsp_lcd.c **** }
 2326              		.loc 1 1582 0
 2327 0fec 07F10C07 		add	r7, r7, #12
 2328 0ff0 BD46     		mov	sp, r7
 2329 0ff2 90BD     		pop	{r4, r7, pc}
 2330              		.cfi_endproc
 2331              	.LFE18:
 2333              		.align	2
 2334              		.global	BSP_LCD_Pixel
 2335              		.thumb
 2336              		.thumb_func
 2338              	BSP_LCD_Pixel:
 2339              	.LFB19:
1583:Libraries/BSP/LCD/bsp_lcd.c **** 
1584:Libraries/BSP/LCD/bsp_lcd.c **** 
1585:Libraries/BSP/LCD/bsp_lcd.c **** 
1586:Libraries/BSP/LCD/bsp_lcd.c **** /*
1587:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1588:Libraries/BSP/LCD/bsp_lcd.c **** *                                   BSP_LCD_Pixel()
1589:Libraries/BSP/LCD/bsp_lcd.c **** *
1590:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a pixel.
1591:Libraries/BSP/LCD/bsp_lcd.c **** *
1592:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x             X axis position in pixels.
1593:Libraries/BSP/LCD/bsp_lcd.c **** *
1594:Libraries/BSP/LCD/bsp_lcd.c **** *               y             Y axis position in pixels.
1595:Libraries/BSP/LCD/bsp_lcd.c **** *
1596:Libraries/BSP/LCD/bsp_lcd.c **** *               color         Pixel color.
1597:Libraries/BSP/LCD/bsp_lcd.c **** *
1598:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1599:Libraries/BSP/LCD/bsp_lcd.c **** *
1600:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1601:Libraries/BSP/LCD/bsp_lcd.c **** *
1602:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1603:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1604:Libraries/BSP/LCD/bsp_lcd.c **** */
1605:Libraries/BSP/LCD/bsp_lcd.c **** 
1606:Libraries/BSP/LCD/bsp_lcd.c **** 
1607:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_Pixel (BSP_LCD_PIXEL  x,
1608:Libraries/BSP/LCD/bsp_lcd.c ****                      BSP_LCD_PIXEL  y,
1609:Libraries/BSP/LCD/bsp_lcd.c ****                      BSP_LCD_COLOR  color)
1610:Libraries/BSP/LCD/bsp_lcd.c **** {
 2340              		.loc 1 1610 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 8
 2343              		@ frame_needed = 1, uses_anonymous_args = 0
 2344 0ff4 80B5     		push	{r7, lr}
 2345              	.LCFI57:
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 14, -4
 2348              		.cfi_offset 7, -8
 2349 0ff6 82B0     		sub	sp, sp, #8
 2350              	.LCFI58:
 2351              		.cfi_def_cfa_offset 16
 2352 0ff8 00AF     		add	r7, sp, #0
 2353              	.LCFI59:
 2354              		.cfi_def_cfa_register 7
 2355 0ffa 1346     		mov	r3, r2
 2356 0ffc 0246     		mov	r2, r0	@ movhi
 2357 0ffe FA80     		strh	r2, [r7, #6]	@ movhi
 2358 1000 0A46     		mov	r2, r1	@ movhi
 2359 1002 BA80     		strh	r2, [r7, #4]	@ movhi
 2360 1004 7B80     		strh	r3, [r7, #2]	@ movhi
1611:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Lock();                                             /* Acquire LCD lock.               
 2361              		.loc 1 1611 0
 2362 1006 00F0BDFB 		bl	BSP_LCD_Lock
1612:Libraries/BSP/LCD/bsp_lcd.c **** 
1613:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
 2363              		.loc 1 1613 0
 2364 100a FB88     		ldrh	r3, [r7, #6]
 2365 100c 4FF05000 		mov	r0, #80
 2366 1010 1946     		mov	r1, r3
 2367 1012 00F02FFB 		bl	BSP_LCD_CtrlRegWr
1614:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + 1u);
 2368              		.loc 1 1614 0
 2369 1016 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2370 1018 03F10103 		add	r3, r3, #1
 2371 101c 9BB2     		uxth	r3, r3
 2372 101e 4FF05100 		mov	r0, #81
 2373 1022 1946     		mov	r1, r3
 2374 1024 00F026FB 		bl	BSP_LCD_CtrlRegWr
1615:Libraries/BSP/LCD/bsp_lcd.c **** 
1616:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
 2375              		.loc 1 1616 0
 2376 1028 BB88     		ldrh	r3, [r7, #4]
 2377 102a 4FF05200 		mov	r0, #82
 2378 102e 1946     		mov	r1, r3
 2379 1030 00F020FB 		bl	BSP_LCD_CtrlRegWr
1617:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + 1u);
 2380              		.loc 1 1617 0
 2381 1034 BB88     		ldrh	r3, [r7, #4]	@ movhi
 2382 1036 03F10103 		add	r3, r3, #1
 2383 103a 9BB2     		uxth	r3, r3
 2384 103c 4FF05300 		mov	r0, #83
 2385 1040 1946     		mov	r1, r3
 2386 1042 00F017FB 		bl	BSP_LCD_CtrlRegWr
1618:Libraries/BSP/LCD/bsp_lcd.c **** 
1619:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
 2387              		.loc 1 1619 0
 2388 1046 FB88     		ldrh	r3, [r7, #6]
 2389 1048 4FF02000 		mov	r0, #32
 2390 104c 1946     		mov	r1, r3
 2391 104e 00F011FB 		bl	BSP_LCD_CtrlRegWr
1620:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
 2392              		.loc 1 1620 0
 2393 1052 BB88     		ldrh	r3, [r7, #4]
 2394 1054 4FF02100 		mov	r0, #33
 2395 1058 1946     		mov	r1, r3
 2396 105a 00F00BFB 		bl	BSP_LCD_CtrlRegWr
1621:Libraries/BSP/LCD/bsp_lcd.c **** 
1622:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2397              		.loc 1 1622 0
 2398 105e 4FF00000 		mov	r0, #0
 2399 1062 4FF04001 		mov	r1, #64
 2400 1066 FFF7FEFF 		bl	CSP_GPIO_BitClr
1623:Libraries/BSP/LCD/bsp_lcd.c **** 
1624:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 2401              		.loc 1 1624 0
 2402 106a 4FF07000 		mov	r0, #112
 2403 106e 00F041FB 		bl	BSP_LCD_SPI_Xfer
1625:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 2404              		.loc 1 1625 0
 2405 1072 4FF00000 		mov	r0, #0
 2406 1076 00F03DFB 		bl	BSP_LCD_SPI_Xfer
1626:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 2407              		.loc 1 1626 0
 2408 107a 4FF02200 		mov	r0, #34
 2409 107e 00F039FB 		bl	BSP_LCD_SPI_Xfer
1627:Libraries/BSP/LCD/bsp_lcd.c **** 
1628:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2410              		.loc 1 1628 0
 2411 1082 4FF00000 		mov	r0, #0
 2412 1086 4FF04001 		mov	r1, #64
 2413 108a FFF7FEFF 		bl	CSP_GPIO_BitSet
1629:Libraries/BSP/LCD/bsp_lcd.c **** 
1630:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2414              		.loc 1 1630 0
 2415 108e 4FF00000 		mov	r0, #0
 2416 1092 4FF04001 		mov	r1, #64
 2417 1096 FFF7FEFF 		bl	CSP_GPIO_BitClr
1631:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 2418              		.loc 1 1631 0
 2419 109a 4FF07200 		mov	r0, #114
 2420 109e 00F029FB 		bl	BSP_LCD_SPI_Xfer
1632:Libraries/BSP/LCD/bsp_lcd.c **** 
1633:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(color >> 8u);
 2421              		.loc 1 1633 0
 2422 10a2 7B88     		ldrh	r3, [r7, #2]
 2423 10a4 4FEA1323 		lsr	r3, r3, #8
 2424 10a8 9BB2     		uxth	r3, r3
 2425 10aa DBB2     		uxtb	r3, r3
 2426 10ac 1846     		mov	r0, r3
 2427 10ae 00F021FB 		bl	BSP_LCD_SPI_Xfer
1634:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 2428              		.loc 1 1634 0
 2429 10b2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2430 10b4 DBB2     		uxtb	r3, r3
 2431 10b6 1846     		mov	r0, r3
 2432 10b8 00F01CFB 		bl	BSP_LCD_SPI_Xfer
1635:Libraries/BSP/LCD/bsp_lcd.c **** 
1636:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2433              		.loc 1 1636 0
 2434 10bc 4FF00000 		mov	r0, #0
 2435 10c0 4FF04001 		mov	r1, #64
 2436 10c4 FFF7FEFF 		bl	CSP_GPIO_BitSet
1637:Libraries/BSP/LCD/bsp_lcd.c **** 
1638:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_Unlock();                                           /* Release LCD lock.               
 2437              		.loc 1 1638 0
 2438 10c8 00F072FB 		bl	BSP_LCD_Unlock
1639:Libraries/BSP/LCD/bsp_lcd.c **** }
 2439              		.loc 1 1639 0
 2440 10cc 07F10807 		add	r7, r7, #8
 2441 10d0 BD46     		mov	sp, r7
 2442 10d2 80BD     		pop	{r7, pc}
 2443              		.cfi_endproc
 2444              	.LFE19:
 2446              		.align	2
 2447              		.global	BSP_LCD_BackLightOff
 2448              		.thumb
 2449              		.thumb_func
 2451              	BSP_LCD_BackLightOff:
 2452              	.LFB20:
1640:Libraries/BSP/LCD/bsp_lcd.c **** 
1641:Libraries/BSP/LCD/bsp_lcd.c **** 
1642:Libraries/BSP/LCD/bsp_lcd.c **** /*
1643:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1644:Libraries/BSP/LCD/bsp_lcd.c **** *                                               BACKLIGHT FUNCTIONS
1645:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1646:Libraries/BSP/LCD/bsp_lcd.c **** */
1647:Libraries/BSP/LCD/bsp_lcd.c **** 
1648:Libraries/BSP/LCD/bsp_lcd.c **** 
1649:Libraries/BSP/LCD/bsp_lcd.c **** /*
1650:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1651:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_BackLightOff()
1652:Libraries/BSP/LCD/bsp_lcd.c **** *
1653:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Turn the LCD backlight Off.
1654:Libraries/BSP/LCD/bsp_lcd.c **** *
1655:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
1656:Libraries/BSP/LCD/bsp_lcd.c **** *
1657:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1658:Libraries/BSP/LCD/bsp_lcd.c **** *
1659:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1660:Libraries/BSP/LCD/bsp_lcd.c **** *
1661:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1662:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1663:Libraries/BSP/LCD/bsp_lcd.c **** */
1664:Libraries/BSP/LCD/bsp_lcd.c **** 
1665:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_BackLightOff (void)
1666:Libraries/BSP/LCD/bsp_lcd.c **** {
 2453              		.loc 1 1666 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 0
 2456              		@ frame_needed = 1, uses_anonymous_args = 0
 2457 10d4 80B5     		push	{r7, lr}
 2458              	.LCFI60:
 2459              		.cfi_def_cfa_offset 8
 2460              		.cfi_offset 14, -4
 2461              		.cfi_offset 7, -8
 2462 10d6 00AF     		add	r7, sp, #0
 2463              	.LCFI61:
 2464              		.cfi_def_cfa_register 7
1667:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_BitClr(CSP_GPIO_PORT_NBR_04,
 2465              		.loc 1 1667 0
 2466 10d8 4FF00400 		mov	r0, #4
 2467 10dc 4FF08051 		mov	r1, #268435456
 2468 10e0 FFF7FEFF 		bl	CSP_GPIO_BitClr
1668:Libraries/BSP/LCD/bsp_lcd.c ****                     DEF_BIT_28);
1669:Libraries/BSP/LCD/bsp_lcd.c **** }
 2469              		.loc 1 1669 0
 2470 10e4 80BD     		pop	{r7, pc}
 2471              		.cfi_endproc
 2472              	.LFE20:
 2474 10e6 00BF     		.align	2
 2475              		.global	BSP_LCD_BackLightOn
 2476              		.thumb
 2477              		.thumb_func
 2479              	BSP_LCD_BackLightOn:
 2480              	.LFB21:
1670:Libraries/BSP/LCD/bsp_lcd.c **** 
1671:Libraries/BSP/LCD/bsp_lcd.c **** 
1672:Libraries/BSP/LCD/bsp_lcd.c **** /*
1673:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1674:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_BackLightOn()
1675:Libraries/BSP/LCD/bsp_lcd.c **** *
1676:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Turn the LCD backlight On.
1677:Libraries/BSP/LCD/bsp_lcd.c **** *
1678:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
1679:Libraries/BSP/LCD/bsp_lcd.c **** *
1680:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1681:Libraries/BSP/LCD/bsp_lcd.c **** *
1682:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1683:Libraries/BSP/LCD/bsp_lcd.c **** *
1684:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1685:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1686:Libraries/BSP/LCD/bsp_lcd.c **** */
1687:Libraries/BSP/LCD/bsp_lcd.c **** 
1688:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_BackLightOn  (void)
1689:Libraries/BSP/LCD/bsp_lcd.c **** {
 2481              		.loc 1 1689 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 0
 2484              		@ frame_needed = 1, uses_anonymous_args = 0
 2485 10e8 80B5     		push	{r7, lr}
 2486              	.LCFI62:
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 14, -4
 2489              		.cfi_offset 7, -8
 2490 10ea 00AF     		add	r7, sp, #0
 2491              	.LCFI63:
 2492              		.cfi_def_cfa_register 7
1690:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_BitSet(CSP_GPIO_PORT_NBR_04,
 2493              		.loc 1 1690 0
 2494 10ec 4FF00400 		mov	r0, #4
 2495 10f0 4FF08051 		mov	r1, #268435456
 2496 10f4 FFF7FEFF 		bl	CSP_GPIO_BitSet
1691:Libraries/BSP/LCD/bsp_lcd.c ****                     DEF_BIT_28);
1692:Libraries/BSP/LCD/bsp_lcd.c **** }
 2497              		.loc 1 1692 0
 2498 10f8 80BD     		pop	{r7, pc}
 2499              		.cfi_endproc
 2500              	.LFE21:
 2502 10fa 00BF     		.align	2
 2503              		.global	BSP_LCD_BackLightToggle
 2504              		.thumb
 2505              		.thumb_func
 2507              	BSP_LCD_BackLightToggle:
 2508              	.LFB22:
1693:Libraries/BSP/LCD/bsp_lcd.c **** 
1694:Libraries/BSP/LCD/bsp_lcd.c **** 
1695:Libraries/BSP/LCD/bsp_lcd.c **** /*
1696:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1697:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_BackLightToggle()
1698:Libraries/BSP/LCD/bsp_lcd.c **** *
1699:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Toggle the LCD backlight..
1700:Libraries/BSP/LCD/bsp_lcd.c **** *
1701:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
1702:Libraries/BSP/LCD/bsp_lcd.c **** *
1703:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1704:Libraries/BSP/LCD/bsp_lcd.c **** *
1705:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1706:Libraries/BSP/LCD/bsp_lcd.c **** *
1707:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1708:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1709:Libraries/BSP/LCD/bsp_lcd.c **** */
1710:Libraries/BSP/LCD/bsp_lcd.c **** 
1711:Libraries/BSP/LCD/bsp_lcd.c **** void  BSP_LCD_BackLightToggle (void)
1712:Libraries/BSP/LCD/bsp_lcd.c **** {
 2509              		.loc 1 1712 0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 1, uses_anonymous_args = 0
 2513 10fc 80B5     		push	{r7, lr}
 2514              	.LCFI64:
 2515              		.cfi_def_cfa_offset 8
 2516              		.cfi_offset 14, -4
 2517              		.cfi_offset 7, -8
 2518 10fe 00AF     		add	r7, sp, #0
 2519              	.LCFI65:
 2520              		.cfi_def_cfa_register 7
1713:Libraries/BSP/LCD/bsp_lcd.c ****     CSP_GPIO_BitToggle(CSP_GPIO_PORT_NBR_04,
 2521              		.loc 1 1713 0
 2522 1100 4FF00400 		mov	r0, #4
 2523 1104 4FF08051 		mov	r1, #268435456
 2524 1108 FFF7FEFF 		bl	CSP_GPIO_BitToggle
1714:Libraries/BSP/LCD/bsp_lcd.c ****                        DEF_BIT_28);
1715:Libraries/BSP/LCD/bsp_lcd.c **** 
1716:Libraries/BSP/LCD/bsp_lcd.c **** }
 2525              		.loc 1 1716 0
 2526 110c 80BD     		pop	{r7, pc}
 2527              		.cfi_endproc
 2528              	.LFE22:
 2530 110e 00BF     		.align	2
 2531              		.thumb
 2532              		.thumb_func
 2534              	BSP_LCD_TextCharUnlock:
 2535              	.LFB23:
1717:Libraries/BSP/LCD/bsp_lcd.c **** 
1718:Libraries/BSP/LCD/bsp_lcd.c **** 
1719:Libraries/BSP/LCD/bsp_lcd.c **** /*
1720:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1721:Libraries/BSP/LCD/bsp_lcd.c **** *                                          LCD DRIVER INTERNAL FUNCTIONS
1722:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1723:Libraries/BSP/LCD/bsp_lcd.c **** */
1724:Libraries/BSP/LCD/bsp_lcd.c **** 
1725:Libraries/BSP/LCD/bsp_lcd.c **** /*
1726:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1727:Libraries/BSP/LCD/bsp_lcd.c **** *                                       BSP_LCD_TextCharUnlock()
1728:Libraries/BSP/LCD/bsp_lcd.c **** *
1729:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Disaply a character without acquiring the LCD lock.
1730:Libraries/BSP/LCD/bsp_lcd.c **** *
1731:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : c   Character to display.
1732:Libraries/BSP/LCD/bsp_lcd.c **** *
1733:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1734:Libraries/BSP/LCD/bsp_lcd.c **** *
1735:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : BSP_LCD_TextDispChar()
1736:Libraries/BSP/LCD/bsp_lcd.c **** *               BSP_LCD_TextDispStr()
1737:Libraries/BSP/LCD/bsp_lcd.c **** *
1738:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1739:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1740:Libraries/BSP/LCD/bsp_lcd.c **** */
1741:Libraries/BSP/LCD/bsp_lcd.c **** 
1742:Libraries/BSP/LCD/bsp_lcd.c **** static  void  BSP_LCD_TextCharUnlock (CPU_CHAR  c)
1743:Libraries/BSP/LCD/bsp_lcd.c **** 
1744:Libraries/BSP/LCD/bsp_lcd.c **** {
 2536              		.loc 1 1744 0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 40
 2539              		@ frame_needed = 1, uses_anonymous_args = 0
 2540 1110 80B5     		push	{r7, lr}
 2541              	.LCFI66:
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 14, -4
 2544              		.cfi_offset 7, -8
 2545 1112 8AB0     		sub	sp, sp, #40
 2546              	.LCFI67:
 2547              		.cfi_def_cfa_offset 48
 2548 1114 00AF     		add	r7, sp, #0
 2549              	.LCFI68:
 2550              		.cfi_def_cfa_register 7
 2551 1116 0346     		mov	r3, r0
 2552 1118 FB71     		strb	r3, [r7, #7]
1745:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_DEV        *p_dev;
1746:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT       *p_font;
1747:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_FONT_CHAR  *p_font_char;
1748:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U         *p_font_char_bitmap;
1749:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_TEXT_POS    pos;
1750:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL       char_width;
1751:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL       char_height;
1752:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U          byte_ix;
1753:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U          bit_ix;
1754:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT08U          bit_map;
1755:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL       pixel_x;
1756:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL       pixel_y;
1757:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR       color;
1758:Libraries/BSP/LCD/bsp_lcd.c **** 
1759:Libraries/BSP/LCD/bsp_lcd.c **** 
1760:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev  = &BSP_LCD_Ctxt;                                     /* Obtain a reference to the LCD te
 2553              		.loc 1 1760 0
 2554 111a 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 2555 111e C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 2556 1122 FB61     		str	r3, [r7, #28]
1761:Libraries/BSP/LCD/bsp_lcd.c ****     p_font = p_dev->TextFontPtr;                                /* Obtain a reference to the LCD te
 2557              		.loc 1 1761 0
 2558 1124 FB69     		ldr	r3, [r7, #28]
 2559 1126 DB68     		ldr	r3, [r3, #12]
 2560 1128 BB61     		str	r3, [r7, #24]
1762:Libraries/BSP/LCD/bsp_lcd.c **** 
1763:Libraries/BSP/LCD/bsp_lcd.c ****     if (p_font == (BSP_LCD_FONT *)0) {
 2561              		.loc 1 1763 0
 2562 112a BB69     		ldr	r3, [r7, #24]
 2563 112c 002B     		cmp	r3, #0
 2564 112e 00F0FE80 		beq	.L138
 2565              	.L123:
1764:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1765:Libraries/BSP/LCD/bsp_lcd.c ****     }
1766:Libraries/BSP/LCD/bsp_lcd.c **** 
1767:Libraries/BSP/LCD/bsp_lcd.c ****     if ((c < p_font->CharStart) ||                              /* Check if the Font contains the c
 2566              		.loc 1 1767 0
 2567 1132 BB69     		ldr	r3, [r7, #24]
 2568 1134 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2569 1136 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2570 1138 9A42     		cmp	r2, r3
 2571 113a C0F0FA80 		bcc	.L139
1768:Libraries/BSP/LCD/bsp_lcd.c ****         (c > p_font->CharEnd  )) {
 2572              		.loc 1 1768 0 discriminator 1
 2573 113e BB69     		ldr	r3, [r7, #24]
 2574 1140 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
1767:Libraries/BSP/LCD/bsp_lcd.c ****     if ((c < p_font->CharStart) ||                              /* Check if the Font contains the c
 2575              		.loc 1 1767 0 discriminator 1
 2576 1142 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2577 1144 9A42     		cmp	r2, r3
 2578 1146 00F2F480 		bhi	.L139
 2579              	.L126:
1769:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1770:Libraries/BSP/LCD/bsp_lcd.c ****     }
1771:Libraries/BSP/LCD/bsp_lcd.c **** 
1772:Libraries/BSP/LCD/bsp_lcd.c ****     c                 -= p_font->CharStart;                     /* Get the character index.        
 2580              		.loc 1 1772 0
 2581 114a BB69     		ldr	r3, [r7, #24]
 2582 114c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2583 114e FA79     		ldrb	r2, [r7, #7]
 2584 1150 D31A     		subs	r3, r2, r3
 2585 1152 FB71     		strb	r3, [r7, #7]
1773:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Get the character info.         
1774:Libraries/BSP/LCD/bsp_lcd.c ****     p_font_char        = (BSP_LCD_FONT_CHAR *)&p_font->CharInfoTbl[(int)c];
 2586              		.loc 1 1774 0
 2587 1154 BB69     		ldr	r3, [r7, #24]
 2588 1156 DA68     		ldr	r2, [r3, #12]
 2589 1158 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2590 115a 4FEAC303 		lsl	r3, r3, #3
 2591 115e D318     		adds	r3, r2, r3
 2592 1160 7B61     		str	r3, [r7, #20]
1775:Libraries/BSP/LCD/bsp_lcd.c ****     p_font_char_bitmap = (CPU_INT08U        *)p_font_char->BitMapPtr;
 2593              		.loc 1 1775 0
 2594 1162 7B69     		ldr	r3, [r7, #20]
 2595 1164 5B68     		ldr	r3, [r3, #4]
 2596 1166 3B61     		str	r3, [r7, #16]
1776:Libraries/BSP/LCD/bsp_lcd.c **** 
1777:Libraries/BSP/LCD/bsp_lcd.c ****     char_width  = p_font_char->Width;
 2597              		.loc 1 1777 0
 2598 1168 7B69     		ldr	r3, [r7, #20]
 2599 116a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2600 116c FB81     		strh	r3, [r7, #14]	@ movhi
1778:Libraries/BSP/LCD/bsp_lcd.c ****     char_height = p_font->Height;
 2601              		.loc 1 1778 0
 2602 116e BB69     		ldr	r3, [r7, #24]
 2603 1170 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2604 1172 BB81     		strh	r3, [r7, #12]	@ movhi
1779:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_x     = p_dev->TextPixelCur;
 2605              		.loc 1 1779 0
 2606 1174 FB69     		ldr	r3, [r7, #28]
 2607 1176 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2608 1178 7B81     		strh	r3, [r7, #10]	@ movhi
1780:Libraries/BSP/LCD/bsp_lcd.c ****     pos         = p_dev->TextLineCur;
 2609              		.loc 1 1780 0
 2610 117a FB69     		ldr	r3, [r7, #28]
 2611 117c 5B79     		ldrb	r3, [r3, #5]
 2612 117e 7B72     		strb	r3, [r7, #9]
1781:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_y     = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT  * pos)
 2613              		.loc 1 1781 0
 2614 1180 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 2615 1182 1346     		mov	r3, r2
 2616 1184 4FEA8303 		lsl	r3, r3, #2
 2617 1188 9B18     		adds	r3, r3, r2
 2618 118a 4FEA8313 		lsl	r3, r3, #6
 2619 118e 1A46     		mov	r2, r3
1782:Libraries/BSP/LCD/bsp_lcd.c ****                 / p_dev->TextLineMax);
 2620              		.loc 1 1782 0
 2621 1190 FB69     		ldr	r3, [r7, #28]
 2622 1192 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2623 1194 B2FBF3F3 		udiv	r3, r2, r3
1781:Libraries/BSP/LCD/bsp_lcd.c ****     pixel_y     = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT  * pos)
 2624              		.loc 1 1781 0
 2625 1198 BB84     		strh	r3, [r7, #36]	@ movhi
1783:Libraries/BSP/LCD/bsp_lcd.c **** 
1784:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Set the GRAM window             
1785:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, pixel_x);
 2626              		.loc 1 1785 0
 2627 119a 7B89     		ldrh	r3, [r7, #10]
 2628 119c 4FF05000 		mov	r0, #80
 2629 11a0 1946     		mov	r1, r3
 2630 11a2 00F067FA 		bl	BSP_LCD_CtrlRegWr
1786:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   pixel_x + char_width - 1u);
 2631              		.loc 1 1786 0
 2632 11a6 7A89     		ldrh	r2, [r7, #10]	@ movhi
 2633 11a8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2634 11aa D318     		adds	r3, r2, r3
 2635 11ac 9BB2     		uxth	r3, r3
 2636 11ae 03F1FF33 		add	r3, r3, #-1
 2637 11b2 9BB2     		uxth	r3, r3
 2638 11b4 4FF05100 		mov	r0, #81
 2639 11b8 1946     		mov	r1, r3
 2640 11ba 00F05BFA 		bl	BSP_LCD_CtrlRegWr
1787:Libraries/BSP/LCD/bsp_lcd.c **** 
1788:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, pixel_y);
 2641              		.loc 1 1788 0
 2642 11be BB8C     		ldrh	r3, [r7, #36]
 2643 11c0 4FF05200 		mov	r0, #82
 2644 11c4 1946     		mov	r1, r3
 2645 11c6 00F055FA 		bl	BSP_LCD_CtrlRegWr
1789:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   pixel_y + char_height - 1u);
 2646              		.loc 1 1789 0
 2647 11ca BA8C     		ldrh	r2, [r7, #36]	@ movhi
 2648 11cc BB89     		ldrh	r3, [r7, #12]	@ movhi
 2649 11ce D318     		adds	r3, r2, r3
 2650 11d0 9BB2     		uxth	r3, r3
 2651 11d2 03F1FF33 		add	r3, r3, #-1
 2652 11d6 9BB2     		uxth	r3, r3
 2653 11d8 4FF05300 		mov	r0, #83
 2654 11dc 1946     		mov	r1, r3
 2655 11de 00F049FA 		bl	BSP_LCD_CtrlRegWr
1790:Libraries/BSP/LCD/bsp_lcd.c **** 
1791:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, pixel_x);
 2656              		.loc 1 1791 0
 2657 11e2 7B89     		ldrh	r3, [r7, #10]
 2658 11e4 4FF02000 		mov	r0, #32
 2659 11e8 1946     		mov	r1, r3
 2660 11ea 00F043FA 		bl	BSP_LCD_CtrlRegWr
1792:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, pixel_y);
 2661              		.loc 1 1792 0
 2662 11ee BB8C     		ldrh	r3, [r7, #36]
 2663 11f0 4FF02100 		mov	r0, #33
 2664 11f4 1946     		mov	r1, r3
 2665 11f6 00F03DFA 		bl	BSP_LCD_CtrlRegWr
1793:Libraries/BSP/LCD/bsp_lcd.c **** 
1794:Libraries/BSP/LCD/bsp_lcd.c **** 
1795:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();                                      /* Start writing data to the GRAM m
 2666              		.loc 1 1795 0
 2667 11fa 4FF00000 		mov	r0, #0
 2668 11fe 4FF04001 		mov	r1, #64
 2669 1202 FFF7FEFF 		bl	CSP_GPIO_BitClr
1796:Libraries/BSP/LCD/bsp_lcd.c **** 
1797:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 2670              		.loc 1 1797 0
 2671 1206 4FF07000 		mov	r0, #112
 2672 120a 00F073FA 		bl	BSP_LCD_SPI_Xfer
1798:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 2673              		.loc 1 1798 0
 2674 120e 4FF00000 		mov	r0, #0
 2675 1212 00F06FFA 		bl	BSP_LCD_SPI_Xfer
1799:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 2676              		.loc 1 1799 0
 2677 1216 4FF02200 		mov	r0, #34
 2678 121a 00F06BFA 		bl	BSP_LCD_SPI_Xfer
1800:Libraries/BSP/LCD/bsp_lcd.c **** 
1801:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2679              		.loc 1 1801 0
 2680 121e 4FF00000 		mov	r0, #0
 2681 1222 4FF04001 		mov	r1, #64
 2682 1226 FFF7FEFF 		bl	CSP_GPIO_BitSet
1802:Libraries/BSP/LCD/bsp_lcd.c **** 
1803:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2683              		.loc 1 1803 0
 2684 122a 4FF00000 		mov	r0, #0
 2685 122e 4FF04001 		mov	r1, #64
 2686 1232 FFF7FEFF 		bl	CSP_GPIO_BitClr
1804:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 2687              		.loc 1 1804 0
 2688 1236 4FF07200 		mov	r0, #114
 2689 123a 00F05BFA 		bl	BSP_LCD_SPI_Xfer
1805:Libraries/BSP/LCD/bsp_lcd.c **** 
1806:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
 2690              		.loc 1 1806 0
 2691 123e 4FF00003 		mov	r3, #0
 2692 1242 BB84     		strh	r3, [r7, #36]	@ movhi
 2693 1244 60E0     		b	.L127
 2694              	.L137:
1807:Libraries/BSP/LCD/bsp_lcd.c ****        for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
 2695              		.loc 1 1807 0
 2696 1246 4FF00003 		mov	r3, #0
 2697 124a 87F82730 		strb	r3, [r7, #39]
 2698 124e 51E0     		b	.L128
 2699              	.L136:
1808:Libraries/BSP/LCD/bsp_lcd.c ****             bit_ix   = 0u;
 2700              		.loc 1 1808 0
 2701 1250 4FF00003 		mov	r3, #0
 2702 1254 87F82630 		strb	r3, [r7, #38]
1809:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* Get the character bitmap.       
1810:Libraries/BSP/LCD/bsp_lcd.c ****             bit_map  = p_font_char_bitmap[pixel_y * p_font_char->NbrBytes + byte_ix];
 2703              		.loc 1 1810 0
 2704 1258 BB8C     		ldrh	r3, [r7, #36]
 2705 125a 7A69     		ldr	r2, [r7, #20]
 2706 125c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2707 125e 02FB03F2 		mul	r2, r2, r3
 2708 1262 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2709 1266 D318     		adds	r3, r2, r3
 2710 1268 3A69     		ldr	r2, [r7, #16]
 2711 126a D318     		adds	r3, r2, r3
 2712 126c 1B78     		ldrb	r3, [r3, #0]
 2713 126e 3B72     		strb	r3, [r7, #8]
1811:Libraries/BSP/LCD/bsp_lcd.c **** 
1812:Libraries/BSP/LCD/bsp_lcd.c ****             while ((bit_ix                   < 8u) &&
 2714              		.loc 1 1812 0
 2715 1270 2CE0     		b	.L129
 2716              	.L135:
1813:Libraries/BSP/LCD/bsp_lcd.c ****                    (byte_ix * 8u ) + bit_ix  < char_width) {
1814:Libraries/BSP/LCD/bsp_lcd.c ****                 if (DEF_BIT_IS_CLR(bit_map, DEF_BIT(7u - bit_ix))) {
 2717              		.loc 1 1814 0
 2718 1272 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 2719 1274 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2720 1278 C3F10703 		rsb	r3, r3, #7
 2721 127c 22FA03F3 		lsr	r3, r2, r3
 2722 1280 03F00103 		and	r3, r3, #1
 2723 1284 DBB2     		uxtb	r3, r3
 2724 1286 002B     		cmp	r3, #0
 2725 1288 02D0     		beq	.L130
 2726              		.loc 1 1814 0 is_stmt 0 discriminator 1
 2727 128a 4FF00003 		mov	r3, #0
 2728 128e 01E0     		b	.L131
 2729              	.L130:
 2730              		.loc 1 1814 0 discriminator 2
 2731 1290 4FF00103 		mov	r3, #1
 2732              	.L131:
 2733              		.loc 1 1814 0 discriminator 3
 2734 1294 002B     		cmp	r3, #0
 2735 1296 03D0     		beq	.L132
1815:Libraries/BSP/LCD/bsp_lcd.c ****                     color = p_dev->BgColor;
 2736              		.loc 1 1815 0 is_stmt 1
 2737 1298 FB69     		ldr	r3, [r7, #28]
 2738 129a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2739 129c 7B84     		strh	r3, [r7, #34]	@ movhi
 2740 129e 02E0     		b	.L133
 2741              	.L132:
1816:Libraries/BSP/LCD/bsp_lcd.c ****                 } else {
1817:Libraries/BSP/LCD/bsp_lcd.c ****                     color = p_dev->TextColor;
 2742              		.loc 1 1817 0
 2743 12a0 FB69     		ldr	r3, [r7, #28]
 2744 12a2 5B88     		ldrh	r3, [r3, #2]	@ movhi
 2745 12a4 7B84     		strh	r3, [r7, #34]	@ movhi
 2746              	.L133:
1818:Libraries/BSP/LCD/bsp_lcd.c ****                 }
1819:Libraries/BSP/LCD/bsp_lcd.c ****                 BSP_LCD_SPI_Xfer(color >> 8u);
 2747              		.loc 1 1819 0
 2748 12a6 7B8C     		ldrh	r3, [r7, #34]
 2749 12a8 4FEA1323 		lsr	r3, r3, #8
 2750 12ac 9BB2     		uxth	r3, r3
 2751 12ae DBB2     		uxtb	r3, r3
 2752 12b0 1846     		mov	r0, r3
 2753 12b2 00F01FFA 		bl	BSP_LCD_SPI_Xfer
1820:Libraries/BSP/LCD/bsp_lcd.c ****                 BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 2754              		.loc 1 1820 0
 2755 12b6 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 2756 12b8 DBB2     		uxtb	r3, r3
 2757 12ba 1846     		mov	r0, r3
 2758 12bc 00F01AFA 		bl	BSP_LCD_SPI_Xfer
1821:Libraries/BSP/LCD/bsp_lcd.c ****                 bit_ix++;
 2759              		.loc 1 1821 0
 2760 12c0 97F82630 		ldrb	r3, [r7, #38]
 2761 12c4 03F10103 		add	r3, r3, #1
 2762 12c8 87F82630 		strb	r3, [r7, #38]
 2763              	.L129:
1812:Libraries/BSP/LCD/bsp_lcd.c ****             while ((bit_ix                   < 8u) &&
 2764              		.loc 1 1812 0 discriminator 1
 2765 12cc 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2766 12d0 072B     		cmp	r3, #7
 2767 12d2 09D8     		bhi	.L134
1813:Libraries/BSP/LCD/bsp_lcd.c ****                    (byte_ix * 8u ) + bit_ix  < char_width) {
 2768              		.loc 1 1813 0 discriminator 2
 2769 12d4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2770 12d8 4FEAC302 		lsl	r2, r3, #3
 2771 12dc 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2772 12e0 D218     		adds	r2, r2, r3
 2773 12e2 FB89     		ldrh	r3, [r7, #14]
1812:Libraries/BSP/LCD/bsp_lcd.c ****             while ((bit_ix                   < 8u) &&
 2774              		.loc 1 1812 0 discriminator 2
 2775 12e4 9A42     		cmp	r2, r3
 2776 12e6 C4D3     		bcc	.L135
 2777              	.L134:
1807:Libraries/BSP/LCD/bsp_lcd.c ****        for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
 2778              		.loc 1 1807 0
 2779 12e8 97F82730 		ldrb	r3, [r7, #39]
 2780 12ec 03F10103 		add	r3, r3, #1
 2781 12f0 87F82730 		strb	r3, [r7, #39]
 2782              	.L128:
1807:Libraries/BSP/LCD/bsp_lcd.c ****        for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
 2783              		.loc 1 1807 0 is_stmt 0 discriminator 1
 2784 12f4 7B69     		ldr	r3, [r7, #20]
 2785 12f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2786 12f8 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 2787 12fc 9A42     		cmp	r2, r3
 2788 12fe A7D3     		bcc	.L136
1806:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
 2789              		.loc 1 1806 0 is_stmt 1
 2790 1300 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 2791 1302 03F10103 		add	r3, r3, #1
 2792 1306 BB84     		strh	r3, [r7, #36]	@ movhi
 2793              	.L127:
1806:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
 2794              		.loc 1 1806 0 is_stmt 0 discriminator 1
 2795 1308 BA8C     		ldrh	r2, [r7, #36]
 2796 130a BB89     		ldrh	r3, [r7, #12]
 2797 130c 9A42     		cmp	r2, r3
 2798 130e 9AD3     		bcc	.L137
1822:Libraries/BSP/LCD/bsp_lcd.c ****             }
1823:Libraries/BSP/LCD/bsp_lcd.c ****         }
1824:Libraries/BSP/LCD/bsp_lcd.c ****     }
1825:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2799              		.loc 1 1825 0 is_stmt 1
 2800 1310 4FF00000 		mov	r0, #0
 2801 1314 4FF04001 		mov	r1, #64
 2802 1318 FFF7FEFF 		bl	CSP_GPIO_BitSet
1826:Libraries/BSP/LCD/bsp_lcd.c ****     p_dev->TextPixelCur += p_font_char->Dist;
 2803              		.loc 1 1826 0
 2804 131c FB69     		ldr	r3, [r7, #28]
 2805 131e 1A89     		ldrh	r2, [r3, #8]
 2806 1320 7B69     		ldr	r3, [r7, #20]
 2807 1322 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2808 1324 D318     		adds	r3, r2, r3
 2809 1326 9AB2     		uxth	r2, r3
 2810 1328 FB69     		ldr	r3, [r7, #28]
 2811 132a 1A81     		strh	r2, [r3, #8]	@ movhi
 2812 132c 02E0     		b	.L122
 2813              	.L138:
1764:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2814              		.loc 1 1764 0
 2815 132e 00BF     		nop
 2816 1330 00E0     		b	.L122
 2817              	.L139:
1769:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2818              		.loc 1 1769 0
 2819 1332 00BF     		nop
 2820              	.L122:
1827:Libraries/BSP/LCD/bsp_lcd.c **** }
 2821              		.loc 1 1827 0
 2822 1334 07F12807 		add	r7, r7, #40
 2823 1338 BD46     		mov	sp, r7
 2824 133a 80BD     		pop	{r7, pc}
 2825              		.cfi_endproc
 2826              	.LFE23:
 2828              		.align	2
 2829              		.thumb
 2830              		.thumb_func
 2832              	BSP_LCD_BitmapDrawUnlock:
 2833              	.LFB24:
1828:Libraries/BSP/LCD/bsp_lcd.c **** 
1829:Libraries/BSP/LCD/bsp_lcd.c **** /*
1830:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1831:Libraries/BSP/LCD/bsp_lcd.c **** *                                         BSP_LCD_BitmapDrawUnlock()
1832:Libraries/BSP/LCD/bsp_lcd.c **** *
1833:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a bitmap without acquiring the lock.
1834:Libraries/BSP/LCD/bsp_lcd.c **** *
1835:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x         X axis position in pixels.
1836:Libraries/BSP/LCD/bsp_lcd.c **** *
1837:Libraries/BSP/LCD/bsp_lcd.c **** *               y         Y axis position in pixels.
1838:Libraries/BSP/LCD/bsp_lcd.c **** *
1839:Libraries/BSP/LCD/bsp_lcd.c **** *               width     Bitmap width.
1840:Libraries/BSP/LCD/bsp_lcd.c **** *
1841:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh     Bitmap heigh.
1842:Libraries/BSP/LCD/bsp_lcd.c **** *
1843:Libraries/BSP/LCD/bsp_lcd.c **** *               p_bitmap  Pointer to the color bitmap.
1844:Libraries/BSP/LCD/bsp_lcd.c **** *
1845:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1846:Libraries/BSP/LCD/bsp_lcd.c **** *
1847:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1848:Libraries/BSP/LCD/bsp_lcd.c **** *
1849:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1850:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1851:Libraries/BSP/LCD/bsp_lcd.c **** */
1852:Libraries/BSP/LCD/bsp_lcd.c **** 
1853:Libraries/BSP/LCD/bsp_lcd.c **** static  void  BSP_LCD_BitmapDrawUnlock (BSP_LCD_PIXEL  x,
1854:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  y,
1855:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  width,
1856:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  height,
1857:Libraries/BSP/LCD/bsp_lcd.c ****                                         CPU_INT16U    *p_bitmap)
1858:Libraries/BSP/LCD/bsp_lcd.c **** {
 2834              		.loc 1 1858 0
 2835              		.cfi_startproc
 2836              		@ args = 4, pretend = 0, frame = 16
 2837              		@ frame_needed = 1, uses_anonymous_args = 0
 2838 133c 80B5     		push	{r7, lr}
 2839              	.LCFI69:
 2840              		.cfi_def_cfa_offset 8
 2841              		.cfi_offset 14, -4
 2842              		.cfi_offset 7, -8
 2843 133e 84B0     		sub	sp, sp, #16
 2844              	.LCFI70:
 2845              		.cfi_def_cfa_offset 24
 2846 1340 00AF     		add	r7, sp, #0
 2847              	.LCFI71:
 2848              		.cfi_def_cfa_register 7
 2849 1342 F880     		strh	r0, [r7, #6]	@ movhi
 2850 1344 B980     		strh	r1, [r7, #4]	@ movhi
 2851 1346 7A80     		strh	r2, [r7, #2]	@ movhi
 2852 1348 3B80     		strh	r3, [r7, #0]	@ movhi
1859:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR  color;
1860:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel;
1861:Libraries/BSP/LCD/bsp_lcd.c **** 
1862:Libraries/BSP/LCD/bsp_lcd.c **** 
1863:Libraries/BSP/LCD/bsp_lcd.c ****     if (x + width  >  BSP_LCD_WIDTH) {
 2853              		.loc 1 1863 0
 2854 134a FA88     		ldrh	r2, [r7, #6]
 2855 134c 7B88     		ldrh	r3, [r7, #2]
 2856 134e D318     		adds	r3, r2, r3
 2857 1350 F02B     		cmp	r3, #240
 2858 1352 00F28280 		bhi	.L146
 2859              	.L141:
1864:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1865:Libraries/BSP/LCD/bsp_lcd.c ****     }
1866:Libraries/BSP/LCD/bsp_lcd.c **** 
1867:Libraries/BSP/LCD/bsp_lcd.c ****     if (y + height >  BSP_LCD_HEIGHT) {
 2860              		.loc 1 1867 0
 2861 1356 BA88     		ldrh	r2, [r7, #4]
 2862 1358 3B88     		ldrh	r3, [r7, #0]
 2863 135a D318     		adds	r3, r2, r3
 2864 135c B3F5A07F 		cmp	r3, #320
 2865 1360 7DD8     		bhi	.L147
 2866              	.L143:
1868:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1869:Libraries/BSP/LCD/bsp_lcd.c ****     }
1870:Libraries/BSP/LCD/bsp_lcd.c **** 
1871:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
 2867              		.loc 1 1871 0
 2868 1362 FB88     		ldrh	r3, [r7, #6]
 2869 1364 4FF05000 		mov	r0, #80
 2870 1368 1946     		mov	r1, r3
 2871 136a 00F083F9 		bl	BSP_LCD_CtrlRegWr
1872:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
 2872              		.loc 1 1872 0
 2873 136e FA88     		ldrh	r2, [r7, #6]	@ movhi
 2874 1370 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2875 1372 D318     		adds	r3, r2, r3
 2876 1374 9BB2     		uxth	r3, r3
 2877 1376 03F1FF33 		add	r3, r3, #-1
 2878 137a 9BB2     		uxth	r3, r3
 2879 137c 4FF05100 		mov	r0, #81
 2880 1380 1946     		mov	r1, r3
 2881 1382 00F077F9 		bl	BSP_LCD_CtrlRegWr
1873:Libraries/BSP/LCD/bsp_lcd.c **** 
1874:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
 2882              		.loc 1 1874 0
 2883 1386 BB88     		ldrh	r3, [r7, #4]
 2884 1388 4FF05200 		mov	r0, #82
 2885 138c 1946     		mov	r1, r3
 2886 138e 00F071F9 		bl	BSP_LCD_CtrlRegWr
1875:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
 2887              		.loc 1 1875 0
 2888 1392 BA88     		ldrh	r2, [r7, #4]	@ movhi
 2889 1394 3B88     		ldrh	r3, [r7, #0]	@ movhi
 2890 1396 D318     		adds	r3, r2, r3
 2891 1398 9BB2     		uxth	r3, r3
 2892 139a 03F1FF33 		add	r3, r3, #-1
 2893 139e 9BB2     		uxth	r3, r3
 2894 13a0 4FF05300 		mov	r0, #83
 2895 13a4 1946     		mov	r1, r3
 2896 13a6 00F065F9 		bl	BSP_LCD_CtrlRegWr
1876:Libraries/BSP/LCD/bsp_lcd.c **** 
1877:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
 2897              		.loc 1 1877 0
 2898 13aa FB88     		ldrh	r3, [r7, #6]
 2899 13ac 4FF02000 		mov	r0, #32
 2900 13b0 1946     		mov	r1, r3
 2901 13b2 00F05FF9 		bl	BSP_LCD_CtrlRegWr
1878:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
 2902              		.loc 1 1878 0
 2903 13b6 BB88     		ldrh	r3, [r7, #4]
 2904 13b8 4FF02100 		mov	r0, #33
 2905 13bc 1946     		mov	r1, r3
 2906 13be 00F059F9 		bl	BSP_LCD_CtrlRegWr
1879:Libraries/BSP/LCD/bsp_lcd.c **** 
1880:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2907              		.loc 1 1880 0
 2908 13c2 4FF00000 		mov	r0, #0
 2909 13c6 4FF04001 		mov	r1, #64
 2910 13ca FFF7FEFF 		bl	CSP_GPIO_BitClr
1881:Libraries/BSP/LCD/bsp_lcd.c **** 
1882:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 2911              		.loc 1 1882 0
 2912 13ce 4FF07000 		mov	r0, #112
 2913 13d2 00F08FF9 		bl	BSP_LCD_SPI_Xfer
1883:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 2914              		.loc 1 1883 0
 2915 13d6 4FF00000 		mov	r0, #0
 2916 13da 00F08BF9 		bl	BSP_LCD_SPI_Xfer
1884:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 2917              		.loc 1 1884 0
 2918 13de 4FF02200 		mov	r0, #34
 2919 13e2 00F087F9 		bl	BSP_LCD_SPI_Xfer
1885:Libraries/BSP/LCD/bsp_lcd.c **** 
1886:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2920              		.loc 1 1886 0
 2921 13e6 4FF00000 		mov	r0, #0
 2922 13ea 4FF04001 		mov	r1, #64
 2923 13ee FFF7FEFF 		bl	CSP_GPIO_BitSet
1887:Libraries/BSP/LCD/bsp_lcd.c **** 
1888:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 2924              		.loc 1 1888 0
 2925 13f2 4FF00000 		mov	r0, #0
 2926 13f6 4FF04001 		mov	r1, #64
 2927 13fa FFF7FEFF 		bl	CSP_GPIO_BitClr
1889:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 2928              		.loc 1 1889 0
 2929 13fe 4FF07200 		mov	r0, #114
 2930 1402 00F077F9 		bl	BSP_LCD_SPI_Xfer
1890:Libraries/BSP/LCD/bsp_lcd.c **** 
1891:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0; pixel < width * height; pixel++) {
 2931              		.loc 1 1891 0
 2932 1406 4FF00003 		mov	r3, #0
 2933 140a FB81     		strh	r3, [r7, #14]	@ movhi
 2934 140c 17E0     		b	.L144
 2935              	.L145:
1892:Libraries/BSP/LCD/bsp_lcd.c ****         color = p_bitmap[pixel];
 2936              		.loc 1 1892 0 discriminator 2
 2937 140e FB89     		ldrh	r3, [r7, #14]
 2938 1410 4FEA4303 		lsl	r3, r3, #1
 2939 1414 BA69     		ldr	r2, [r7, #24]
 2940 1416 D318     		adds	r3, r2, r3
 2941 1418 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2942 141a BB81     		strh	r3, [r7, #12]	@ movhi
1893:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_SPI_Xfer(color >> 8u);
 2943              		.loc 1 1893 0 discriminator 2
 2944 141c BB89     		ldrh	r3, [r7, #12]
 2945 141e 4FEA1323 		lsr	r3, r3, #8
 2946 1422 9BB2     		uxth	r3, r3
 2947 1424 DBB2     		uxtb	r3, r3
 2948 1426 1846     		mov	r0, r3
 2949 1428 00F064F9 		bl	BSP_LCD_SPI_Xfer
1894:Libraries/BSP/LCD/bsp_lcd.c ****         BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 2950              		.loc 1 1894 0 discriminator 2
 2951 142c BB89     		ldrh	r3, [r7, #12]	@ movhi
 2952 142e DBB2     		uxtb	r3, r3
 2953 1430 1846     		mov	r0, r3
 2954 1432 00F05FF9 		bl	BSP_LCD_SPI_Xfer
1891:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0; pixel < width * height; pixel++) {
 2955              		.loc 1 1891 0 discriminator 2
 2956 1436 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2957 1438 03F10103 		add	r3, r3, #1
 2958 143c FB81     		strh	r3, [r7, #14]	@ movhi
 2959              	.L144:
1891:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel = 0; pixel < width * height; pixel++) {
 2960              		.loc 1 1891 0 is_stmt 0 discriminator 1
 2961 143e FA89     		ldrh	r2, [r7, #14]
 2962 1440 7B88     		ldrh	r3, [r7, #2]
 2963 1442 3988     		ldrh	r1, [r7, #0]
 2964 1444 01FB03F3 		mul	r3, r1, r3
 2965 1448 9A42     		cmp	r2, r3
 2966 144a E0DB     		blt	.L145
1895:Libraries/BSP/LCD/bsp_lcd.c ****     }
1896:Libraries/BSP/LCD/bsp_lcd.c **** 
1897:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 2967              		.loc 1 1897 0 is_stmt 1
 2968 144c 4FF00000 		mov	r0, #0
 2969 1450 4FF04001 		mov	r1, #64
 2970 1454 FFF7FEFF 		bl	CSP_GPIO_BitSet
 2971 1458 02E0     		b	.L140
 2972              	.L146:
1864:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2973              		.loc 1 1864 0
 2974 145a 00BF     		nop
 2975 145c 00E0     		b	.L140
 2976              	.L147:
1868:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 2977              		.loc 1 1868 0
 2978 145e 00BF     		nop
 2979              	.L140:
1898:Libraries/BSP/LCD/bsp_lcd.c **** 
1899:Libraries/BSP/LCD/bsp_lcd.c **** }
 2980              		.loc 1 1899 0
 2981 1460 07F11007 		add	r7, r7, #16
 2982 1464 BD46     		mov	sp, r7
 2983 1466 80BD     		pop	{r7, pc}
 2984              		.cfi_endproc
 2985              	.LFE24:
 2987              		.align	2
 2988              		.thumb
 2989              		.thumb_func
 2991              	BSP_LCD_RectDrawUnlock:
 2992              	.LFB25:
1900:Libraries/BSP/LCD/bsp_lcd.c **** 
1901:Libraries/BSP/LCD/bsp_lcd.c **** /*
1902:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1903:Libraries/BSP/LCD/bsp_lcd.c **** *                                         BSP_LCD_BitmapDrawUnlock()
1904:Libraries/BSP/LCD/bsp_lcd.c **** *
1905:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Draw a rectangle without acquiring the lock.
1906:Libraries/BSP/LCD/bsp_lcd.c **** *
1907:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : x             X axis position in pixels.
1908:Libraries/BSP/LCD/bsp_lcd.c **** *
1909:Libraries/BSP/LCD/bsp_lcd.c **** *               y             Y axis position in pixels.
1910:Libraries/BSP/LCD/bsp_lcd.c **** *
1911:Libraries/BSP/LCD/bsp_lcd.c **** *               width         Rectangle width in pixels.
1912:Libraries/BSP/LCD/bsp_lcd.c **** *
1913:Libraries/BSP/LCD/bsp_lcd.c **** *               heigh         Rectangle width in pixels height.
1914:Libraries/BSP/LCD/bsp_lcd.c **** *
1915:Libraries/BSP/LCD/bsp_lcd.c **** *               fill_color    Rectangle fill color.
1916:Libraries/BSP/LCD/bsp_lcd.c **** *
1917:Libraries/BSP/LCD/bsp_lcd.c **** *               line_weight   Rectangle line weight in pixels.
1918:Libraries/BSP/LCD/bsp_lcd.c **** *
1919:Libraries/BSP/LCD/bsp_lcd.c **** *               line_color    Rectangle line color.
1920:Libraries/BSP/LCD/bsp_lcd.c **** *
1921:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
1922:Libraries/BSP/LCD/bsp_lcd.c **** *
1923:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
1924:Libraries/BSP/LCD/bsp_lcd.c **** *
1925:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
1926:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1927:Libraries/BSP/LCD/bsp_lcd.c **** */
1928:Libraries/BSP/LCD/bsp_lcd.c **** 
1929:Libraries/BSP/LCD/bsp_lcd.c **** static   void  BSP_LCD_RectDrawUnlock  (BSP_LCD_PIXEL  x,
1930:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  y,
1931:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  width,
1932:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  height,
1933:Libraries/BSP/LCD/bsp_lcd.c ****                                         CPU_BOOLEAN    fill,
1934:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_COLOR  fill_color,
1935:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_PIXEL  line_weight,
1936:Libraries/BSP/LCD/bsp_lcd.c ****                                         BSP_LCD_COLOR  line_color)
1937:Libraries/BSP/LCD/bsp_lcd.c **** {
 2993              		.loc 1 1937 0
 2994              		.cfi_startproc
 2995              		@ args = 16, pretend = 0, frame = 16
 2996              		@ frame_needed = 1, uses_anonymous_args = 0
 2997 1468 80B5     		push	{r7, lr}
 2998              	.LCFI72:
 2999              		.cfi_def_cfa_offset 8
 3000              		.cfi_offset 14, -4
 3001              		.cfi_offset 7, -8
 3002 146a 84B0     		sub	sp, sp, #16
 3003              	.LCFI73:
 3004              		.cfi_def_cfa_offset 24
 3005 146c 00AF     		add	r7, sp, #0
 3006              	.LCFI74:
 3007              		.cfi_def_cfa_register 7
 3008 146e F880     		strh	r0, [r7, #6]	@ movhi
 3009 1470 B980     		strh	r1, [r7, #4]	@ movhi
 3010 1472 7A80     		strh	r2, [r7, #2]	@ movhi
 3011 1474 3B80     		strh	r3, [r7, #0]	@ movhi
1938:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_x;
1939:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_PIXEL  pixel_y;
1940:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_COLOR  color;
1941:Libraries/BSP/LCD/bsp_lcd.c **** 
1942:Libraries/BSP/LCD/bsp_lcd.c ****     if (x + width  > BSP_LCD_WIDTH) {
 3012              		.loc 1 1942 0
 3013 1476 FA88     		ldrh	r2, [r7, #6]
 3014 1478 7B88     		ldrh	r3, [r7, #2]
 3015 147a D318     		adds	r3, r2, r3
 3016 147c F02B     		cmp	r3, #240
 3017 147e 00F2A880 		bhi	.L160
 3018              	.L149:
1943:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1944:Libraries/BSP/LCD/bsp_lcd.c ****     }
1945:Libraries/BSP/LCD/bsp_lcd.c **** 
1946:Libraries/BSP/LCD/bsp_lcd.c ****     if (y + height > BSP_LCD_HEIGHT) {
 3019              		.loc 1 1946 0
 3020 1482 BA88     		ldrh	r2, [r7, #4]
 3021 1484 3B88     		ldrh	r3, [r7, #0]
 3022 1486 D318     		adds	r3, r2, r3
 3023 1488 B3F5A07F 		cmp	r3, #320
 3024 148c 00F2A380 		bhi	.L161
 3025              	.L151:
1947:Libraries/BSP/LCD/bsp_lcd.c ****         return;
1948:Libraries/BSP/LCD/bsp_lcd.c ****     }
1949:Libraries/BSP/LCD/bsp_lcd.c **** 
1950:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
 3026              		.loc 1 1950 0
 3027 1490 FB88     		ldrh	r3, [r7, #6]
 3028 1492 4FF05000 		mov	r0, #80
 3029 1496 1946     		mov	r1, r3
 3030 1498 00F0ECF8 		bl	BSP_LCD_CtrlRegWr
1951:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
 3031              		.loc 1 1951 0
 3032 149c FA88     		ldrh	r2, [r7, #6]	@ movhi
 3033 149e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3034 14a0 D318     		adds	r3, r2, r3
 3035 14a2 9BB2     		uxth	r3, r3
 3036 14a4 03F1FF33 		add	r3, r3, #-1
 3037 14a8 9BB2     		uxth	r3, r3
 3038 14aa 4FF05100 		mov	r0, #81
 3039 14ae 1946     		mov	r1, r3
 3040 14b0 00F0E0F8 		bl	BSP_LCD_CtrlRegWr
1952:Libraries/BSP/LCD/bsp_lcd.c **** 
1953:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
 3041              		.loc 1 1953 0
 3042 14b4 BB88     		ldrh	r3, [r7, #4]
 3043 14b6 4FF05200 		mov	r0, #82
 3044 14ba 1946     		mov	r1, r3
 3045 14bc 00F0DAF8 		bl	BSP_LCD_CtrlRegWr
1954:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
 3046              		.loc 1 1954 0
 3047 14c0 BA88     		ldrh	r2, [r7, #4]	@ movhi
 3048 14c2 3B88     		ldrh	r3, [r7, #0]	@ movhi
 3049 14c4 D318     		adds	r3, r2, r3
 3050 14c6 9BB2     		uxth	r3, r3
 3051 14c8 03F1FF33 		add	r3, r3, #-1
 3052 14cc 9BB2     		uxth	r3, r3
 3053 14ce 4FF05300 		mov	r0, #83
 3054 14d2 1946     		mov	r1, r3
 3055 14d4 00F0CEF8 		bl	BSP_LCD_CtrlRegWr
1955:Libraries/BSP/LCD/bsp_lcd.c **** 
1956:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
 3056              		.loc 1 1956 0
 3057 14d8 FB88     		ldrh	r3, [r7, #6]
 3058 14da 4FF02000 		mov	r0, #32
 3059 14de 1946     		mov	r1, r3
 3060 14e0 00F0C8F8 		bl	BSP_LCD_CtrlRegWr
1957:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
 3061              		.loc 1 1957 0
 3062 14e4 BB88     		ldrh	r3, [r7, #4]
 3063 14e6 4FF02100 		mov	r0, #33
 3064 14ea 1946     		mov	r1, r3
 3065 14ec 00F0C2F8 		bl	BSP_LCD_CtrlRegWr
1958:Libraries/BSP/LCD/bsp_lcd.c **** 
1959:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3066              		.loc 1 1959 0
 3067 14f0 4FF00000 		mov	r0, #0
 3068 14f4 4FF04001 		mov	r1, #64
 3069 14f8 FFF7FEFF 		bl	CSP_GPIO_BitClr
1960:Libraries/BSP/LCD/bsp_lcd.c **** 
1961:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 3070              		.loc 1 1961 0
 3071 14fc 4FF07000 		mov	r0, #112
 3072 1500 00F0F8F8 		bl	BSP_LCD_SPI_Xfer
1962:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 3073              		.loc 1 1962 0
 3074 1504 4FF00000 		mov	r0, #0
 3075 1508 00F0F4F8 		bl	BSP_LCD_SPI_Xfer
1963:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
 3076              		.loc 1 1963 0
 3077 150c 4FF02200 		mov	r0, #34
 3078 1510 00F0F0F8 		bl	BSP_LCD_SPI_Xfer
1964:Libraries/BSP/LCD/bsp_lcd.c **** 
1965:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3079              		.loc 1 1965 0
 3080 1514 4FF00000 		mov	r0, #0
 3081 1518 4FF04001 		mov	r1, #64
 3082 151c FFF7FEFF 		bl	CSP_GPIO_BitSet
1966:Libraries/BSP/LCD/bsp_lcd.c **** 
1967:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3083              		.loc 1 1967 0
 3084 1520 4FF00000 		mov	r0, #0
 3085 1524 4FF04001 		mov	r1, #64
 3086 1528 FFF7FEFF 		bl	CSP_GPIO_BitClr
1968:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 3087              		.loc 1 1968 0
 3088 152c 4FF07200 		mov	r0, #114
 3089 1530 00F0E0F8 		bl	BSP_LCD_SPI_Xfer
1969:Libraries/BSP/LCD/bsp_lcd.c **** 
1970:Libraries/BSP/LCD/bsp_lcd.c **** 
1971:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < height; pixel_y++) {
 3090              		.loc 1 1971 0
 3091 1534 4FF00003 		mov	r3, #0
 3092 1538 BB81     		strh	r3, [r7, #12]	@ movhi
 3093 153a 3FE0     		b	.L152
 3094              	.L159:
1972:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 3095              		.loc 1 1972 0
 3096 153c 4FF00003 		mov	r3, #0
 3097 1540 FB81     		strh	r3, [r7, #14]	@ movhi
 3098 1542 33E0     		b	.L153
 3099              	.L158:
1973:Libraries/BSP/LCD/bsp_lcd.c ****             if ((pixel_x  < line_weight         ) ||
 3100              		.loc 1 1973 0
 3101 1544 FA89     		ldrh	r2, [r7, #14]
 3102 1546 3B8C     		ldrh	r3, [r7, #32]
 3103 1548 9A42     		cmp	r2, r3
 3104 154a 0FD3     		bcc	.L154
1974:Libraries/BSP/LCD/bsp_lcd.c ****                 (pixel_x >= width  - line_weight) ||
 3105              		.loc 1 1974 0 discriminator 1
 3106 154c FA89     		ldrh	r2, [r7, #14]
 3107 154e 7988     		ldrh	r1, [r7, #2]
 3108 1550 3B8C     		ldrh	r3, [r7, #32]
 3109 1552 CB1A     		subs	r3, r1, r3
1973:Libraries/BSP/LCD/bsp_lcd.c ****             if ((pixel_x  < line_weight         ) ||
 3110              		.loc 1 1973 0 discriminator 1
 3111 1554 9A42     		cmp	r2, r3
 3112 1556 09DA     		bge	.L154
 3113              		.loc 1 1974 0
 3114 1558 BA89     		ldrh	r2, [r7, #12]
 3115 155a 3B8C     		ldrh	r3, [r7, #32]
 3116 155c 9A42     		cmp	r2, r3
 3117 155e 05D3     		bcc	.L154
1975:Libraries/BSP/LCD/bsp_lcd.c ****                 (pixel_y  < line_weight         ) ||
1976:Libraries/BSP/LCD/bsp_lcd.c ****                 (pixel_y >= height - line_weight)) {
 3118              		.loc 1 1976 0
 3119 1560 BA89     		ldrh	r2, [r7, #12]
 3120 1562 3988     		ldrh	r1, [r7, #0]
 3121 1564 3B8C     		ldrh	r3, [r7, #32]
 3122 1566 CB1A     		subs	r3, r1, r3
1975:Libraries/BSP/LCD/bsp_lcd.c ****                 (pixel_y  < line_weight         ) ||
 3123              		.loc 1 1975 0
 3124 1568 9A42     		cmp	r2, r3
 3125 156a 02DB     		blt	.L155
 3126              	.L154:
1977:Libraries/BSP/LCD/bsp_lcd.c ****                 color = line_color;
 3127              		.loc 1 1977 0
 3128 156c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 3129 156e 7B81     		strh	r3, [r7, #10]	@ movhi
 3130 1570 0BE0     		b	.L156
 3131              	.L155:
1978:Libraries/BSP/LCD/bsp_lcd.c ****             } else if (fill == DEF_YES) {
 3132              		.loc 1 1978 0
 3133 1572 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 3134 1574 012B     		cmp	r3, #1
 3135 1576 02D1     		bne	.L157
1979:Libraries/BSP/LCD/bsp_lcd.c ****                 color = fill_color;
 3136              		.loc 1 1979 0
 3137 1578 BB8B     		ldrh	r3, [r7, #28]	@ movhi
 3138 157a 7B81     		strh	r3, [r7, #10]	@ movhi
 3139 157c 05E0     		b	.L156
 3140              	.L157:
1980:Libraries/BSP/LCD/bsp_lcd.c ****             } else {
1981:Libraries/BSP/LCD/bsp_lcd.c ****                 color = BSP_LCD_Ctxt.BgColor;
 3141              		.loc 1 1981 0
 3142 157e 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 3143 1582 C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 3144 1586 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3145 1588 7B81     		strh	r3, [r7, #10]	@ movhi
 3146              	.L156:
1982:Libraries/BSP/LCD/bsp_lcd.c ****             }
1983:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color >> 8u);
 3147              		.loc 1 1983 0
 3148 158a 7B89     		ldrh	r3, [r7, #10]
 3149 158c 4FEA1323 		lsr	r3, r3, #8
 3150 1590 9BB2     		uxth	r3, r3
 3151 1592 DBB2     		uxtb	r3, r3
 3152 1594 1846     		mov	r0, r3
 3153 1596 00F0ADF8 		bl	BSP_LCD_SPI_Xfer
1984:Libraries/BSP/LCD/bsp_lcd.c ****             BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
 3154              		.loc 1 1984 0
 3155 159a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 3156 159c DBB2     		uxtb	r3, r3
 3157 159e 1846     		mov	r0, r3
 3158 15a0 00F0A8F8 		bl	BSP_LCD_SPI_Xfer
1972:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 3159              		.loc 1 1972 0
 3160 15a4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3161 15a6 03F10103 		add	r3, r3, #1
 3162 15aa FB81     		strh	r3, [r7, #14]	@ movhi
 3163              	.L153:
1972:Libraries/BSP/LCD/bsp_lcd.c ****         for (pixel_x = 0; pixel_x < width; pixel_x++) {
 3164              		.loc 1 1972 0 is_stmt 0 discriminator 1
 3165 15ac FA89     		ldrh	r2, [r7, #14]
 3166 15ae 7B88     		ldrh	r3, [r7, #2]
 3167 15b0 9A42     		cmp	r2, r3
 3168 15b2 C7D3     		bcc	.L158
1971:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < height; pixel_y++) {
 3169              		.loc 1 1971 0 is_stmt 1
 3170 15b4 BB89     		ldrh	r3, [r7, #12]	@ movhi
 3171 15b6 03F10103 		add	r3, r3, #1
 3172 15ba BB81     		strh	r3, [r7, #12]	@ movhi
 3173              	.L152:
1971:Libraries/BSP/LCD/bsp_lcd.c ****     for (pixel_y = 0; pixel_y < height; pixel_y++) {
 3174              		.loc 1 1971 0 is_stmt 0 discriminator 1
 3175 15bc BA89     		ldrh	r2, [r7, #12]
 3176 15be 3B88     		ldrh	r3, [r7, #0]
 3177 15c0 9A42     		cmp	r2, r3
 3178 15c2 BBD3     		bcc	.L159
1985:Libraries/BSP/LCD/bsp_lcd.c ****         }
1986:Libraries/BSP/LCD/bsp_lcd.c ****     }
1987:Libraries/BSP/LCD/bsp_lcd.c **** 
1988:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3179              		.loc 1 1988 0 is_stmt 1
 3180 15c4 4FF00000 		mov	r0, #0
 3181 15c8 4FF04001 		mov	r1, #64
 3182 15cc FFF7FEFF 		bl	CSP_GPIO_BitSet
 3183 15d0 02E0     		b	.L148
 3184              	.L160:
1943:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 3185              		.loc 1 1943 0
 3186 15d2 00BF     		nop
 3187 15d4 00E0     		b	.L148
 3188              	.L161:
1947:Libraries/BSP/LCD/bsp_lcd.c ****         return;
 3189              		.loc 1 1947 0
 3190 15d6 00BF     		nop
 3191              	.L148:
1989:Libraries/BSP/LCD/bsp_lcd.c **** }
 3192              		.loc 1 1989 0
 3193 15d8 07F11007 		add	r7, r7, #16
 3194 15dc BD46     		mov	sp, r7
 3195 15de 80BD     		pop	{r7, pc}
 3196              		.cfi_endproc
 3197              	.LFE25:
 3199              		.align	2
 3200              		.thumb
 3201              		.thumb_func
 3203              	BSP_LCD_CtrlRegRd:
 3204              	.LFB26:
1990:Libraries/BSP/LCD/bsp_lcd.c **** 
1991:Libraries/BSP/LCD/bsp_lcd.c **** 
1992:Libraries/BSP/LCD/bsp_lcd.c **** 
1993:Libraries/BSP/LCD/bsp_lcd.c **** /*
1994:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
1995:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_CtrlRegRd()
1996:Libraries/BSP/LCD/bsp_lcd.c **** *
1997:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Read a register form the LCD controller.
1998:Libraries/BSP/LCD/bsp_lcd.c **** *
1999:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : reg_off     Register offset.
2000:Libraries/BSP/LCD/bsp_lcd.c **** *
2001:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : Register value (16-bits).
2002:Libraries/BSP/LCD/bsp_lcd.c **** *
2003:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
2004:Libraries/BSP/LCD/bsp_lcd.c **** *
2005:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
2006:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2007:Libraries/BSP/LCD/bsp_lcd.c **** */
2008:Libraries/BSP/LCD/bsp_lcd.c **** 
2009:Libraries/BSP/LCD/bsp_lcd.c **** 
2010:Libraries/BSP/LCD/bsp_lcd.c **** static  CPU_INT16U   BSP_LCD_CtrlRegRd (CPU_INT08U  reg_off)
2011:Libraries/BSP/LCD/bsp_lcd.c **** {
 3205              		.loc 1 2011 0
 3206              		.cfi_startproc
 3207              		@ args = 0, pretend = 0, frame = 16
 3208              		@ frame_needed = 1, uses_anonymous_args = 0
 3209 15e0 80B5     		push	{r7, lr}
 3210              	.LCFI75:
 3211              		.cfi_def_cfa_offset 8
 3212              		.cfi_offset 14, -4
 3213              		.cfi_offset 7, -8
 3214 15e2 84B0     		sub	sp, sp, #16
 3215              	.LCFI76:
 3216              		.cfi_def_cfa_offset 24
 3217 15e4 00AF     		add	r7, sp, #0
 3218              	.LCFI77:
 3219              		.cfi_def_cfa_register 7
 3220 15e6 0346     		mov	r3, r0
 3221 15e8 FB71     		strb	r3, [r7, #7]
2012:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT16U  reg_val;
2013:Libraries/BSP/LCD/bsp_lcd.c **** 
2014:Libraries/BSP/LCD/bsp_lcd.c **** 
2015:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3222              		.loc 1 2015 0
 3223 15ea 4FF00000 		mov	r0, #0
 3224 15ee 4FF04001 		mov	r1, #64
 3225 15f2 FFF7FEFF 		bl	CSP_GPIO_BitClr
2016:Libraries/BSP/LCD/bsp_lcd.c **** 
2017:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 3226              		.loc 1 2017 0
 3227 15f6 4FF07000 		mov	r0, #112
 3228 15fa 00F07BF8 		bl	BSP_LCD_SPI_Xfer
2018:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 3229              		.loc 1 2018 0
 3230 15fe 4FF00000 		mov	r0, #0
 3231 1602 00F077F8 		bl	BSP_LCD_SPI_Xfer
2019:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(reg_off);
 3232              		.loc 1 2019 0
 3233 1606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3234 1608 1846     		mov	r0, r3
 3235 160a 00F073F8 		bl	BSP_LCD_SPI_Xfer
2020:Libraries/BSP/LCD/bsp_lcd.c **** 
2021:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3236              		.loc 1 2021 0
 3237 160e 4FF00000 		mov	r0, #0
 3238 1612 4FF04001 		mov	r1, #64
 3239 1616 FFF7FEFF 		bl	CSP_GPIO_BitSet
2022:Libraries/BSP/LCD/bsp_lcd.c **** 
2023:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3240              		.loc 1 2023 0
 3241 161a 4FF00000 		mov	r0, #0
 3242 161e 4FF04001 		mov	r1, #64
 3243 1622 FFF7FEFF 		bl	CSP_GPIO_BitClr
2024:Libraries/BSP/LCD/bsp_lcd.c **** 
2025:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_RD_REG);
 3244              		.loc 1 2025 0
 3245 1626 4FF07300 		mov	r0, #115
 3246 162a 00F063F8 		bl	BSP_LCD_SPI_Xfer
2026:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 3247              		.loc 1 2026 0
 3248 162e 4FF00000 		mov	r0, #0
 3249 1632 00F05FF8 		bl	BSP_LCD_SPI_Xfer
2027:Libraries/BSP/LCD/bsp_lcd.c ****     reg_val  = BSP_LCD_SPI_Xfer(0u);
 3250              		.loc 1 2027 0
 3251 1636 4FF00000 		mov	r0, #0
 3252 163a 00F05BF8 		bl	BSP_LCD_SPI_Xfer
 3253 163e 0346     		mov	r3, r0
 3254 1640 FB81     		strh	r3, [r7, #14]	@ movhi
2028:Libraries/BSP/LCD/bsp_lcd.c ****     reg_val  = (reg_val << 8u);
 3255              		.loc 1 2028 0
 3256 1642 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3257 1644 4FEA0323 		lsl	r3, r3, #8
 3258 1648 FB81     		strh	r3, [r7, #14]	@ movhi
2029:Libraries/BSP/LCD/bsp_lcd.c ****     reg_val |= BSP_LCD_SPI_Xfer(0u);
 3259              		.loc 1 2029 0
 3260 164a 4FF00000 		mov	r0, #0
 3261 164e 00F051F8 		bl	BSP_LCD_SPI_Xfer
 3262 1652 0346     		mov	r3, r0
 3263 1654 1A46     		mov	r2, r3
 3264 1656 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3265 1658 1343     		orrs	r3, r3, r2
 3266 165a FB81     		strh	r3, [r7, #14]	@ movhi
2030:Libraries/BSP/LCD/bsp_lcd.c **** 
2031:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3267              		.loc 1 2031 0
 3268 165c 4FF00000 		mov	r0, #0
 3269 1660 4FF04001 		mov	r1, #64
 3270 1664 FFF7FEFF 		bl	CSP_GPIO_BitSet
2032:Libraries/BSP/LCD/bsp_lcd.c **** 
2033:Libraries/BSP/LCD/bsp_lcd.c ****     return (reg_val);
 3271              		.loc 1 2033 0
 3272 1668 FB89     		ldrh	r3, [r7, #14]
2034:Libraries/BSP/LCD/bsp_lcd.c **** }
 3273              		.loc 1 2034 0
 3274 166a 1846     		mov	r0, r3
 3275 166c 07F11007 		add	r7, r7, #16
 3276 1670 BD46     		mov	sp, r7
 3277 1672 80BD     		pop	{r7, pc}
 3278              		.cfi_endproc
 3279              	.LFE26:
 3281              		.align	2
 3282              		.thumb
 3283              		.thumb_func
 3285              	BSP_LCD_CtrlRegWr:
 3286              	.LFB27:
2035:Libraries/BSP/LCD/bsp_lcd.c **** 
2036:Libraries/BSP/LCD/bsp_lcd.c **** /*
2037:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2038:Libraries/BSP/LCD/bsp_lcd.c **** *                                             BSP_LCD_CtrlRegRd()
2039:Libraries/BSP/LCD/bsp_lcd.c **** *
2040:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Write a value to one the register of the  LCD controller.
2041:Libraries/BSP/LCD/bsp_lcd.c **** *
2042:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : reg_off     Register offset.
2043:Libraries/BSP/LCD/bsp_lcd.c **** *
2044:Libraries/BSP/LCD/bsp_lcd.c **** *               reg_val     Register value.
2045:Libraries/BSP/LCD/bsp_lcd.c **** *
2046:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
2047:Libraries/BSP/LCD/bsp_lcd.c **** *
2048:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
2049:Libraries/BSP/LCD/bsp_lcd.c **** *
2050:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
2051:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2052:Libraries/BSP/LCD/bsp_lcd.c **** */
2053:Libraries/BSP/LCD/bsp_lcd.c **** 
2054:Libraries/BSP/LCD/bsp_lcd.c **** static  void  BSP_LCD_CtrlRegWr (CPU_INT08U  reg_off,
2055:Libraries/BSP/LCD/bsp_lcd.c ****                                  CPU_INT16U  reg_val)
2056:Libraries/BSP/LCD/bsp_lcd.c **** {
 3287              		.loc 1 2056 0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 8
 3290              		@ frame_needed = 1, uses_anonymous_args = 0
 3291 1674 80B5     		push	{r7, lr}
 3292              	.LCFI78:
 3293              		.cfi_def_cfa_offset 8
 3294              		.cfi_offset 14, -4
 3295              		.cfi_offset 7, -8
 3296 1676 82B0     		sub	sp, sp, #8
 3297              	.LCFI79:
 3298              		.cfi_def_cfa_offset 16
 3299 1678 00AF     		add	r7, sp, #0
 3300              	.LCFI80:
 3301              		.cfi_def_cfa_register 7
 3302 167a 0246     		mov	r2, r0
 3303 167c 0B46     		mov	r3, r1
 3304 167e FA71     		strb	r2, [r7, #7]
 3305 1680 BB80     		strh	r3, [r7, #4]	@ movhi
2057:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3306              		.loc 1 2057 0
 3307 1682 4FF00000 		mov	r0, #0
 3308 1686 4FF04001 		mov	r1, #64
 3309 168a FFF7FEFF 		bl	CSP_GPIO_BitClr
2058:Libraries/BSP/LCD/bsp_lcd.c **** 
2059:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
 3310              		.loc 1 2059 0
 3311 168e 4FF07000 		mov	r0, #112
 3312 1692 00F02FF8 		bl	BSP_LCD_SPI_Xfer
2060:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(0u);
 3313              		.loc 1 2060 0
 3314 1696 4FF00000 		mov	r0, #0
 3315 169a 00F02BF8 		bl	BSP_LCD_SPI_Xfer
2061:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(reg_off);
 3316              		.loc 1 2061 0
 3317 169e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3318 16a0 1846     		mov	r0, r3
 3319 16a2 00F027F8 		bl	BSP_LCD_SPI_Xfer
2062:Libraries/BSP/LCD/bsp_lcd.c **** 
2063:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3320              		.loc 1 2063 0
 3321 16a6 4FF00000 		mov	r0, #0
 3322 16aa 4FF04001 		mov	r1, #64
 3323 16ae FFF7FEFF 		bl	CSP_GPIO_BitSet
2064:Libraries/BSP/LCD/bsp_lcd.c **** 
2065:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_LOW();
 3324              		.loc 1 2065 0
 3325 16b2 4FF00000 		mov	r0, #0
 3326 16b6 4FF04001 		mov	r1, #64
 3327 16ba FFF7FEFF 		bl	CSP_GPIO_BitClr
2066:Libraries/BSP/LCD/bsp_lcd.c **** 
2067:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
 3328              		.loc 1 2067 0
 3329 16be 4FF07200 		mov	r0, #114
 3330 16c2 00F017F8 		bl	BSP_LCD_SPI_Xfer
2068:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(reg_val >> 8u);
 3331              		.loc 1 2068 0
 3332 16c6 BB88     		ldrh	r3, [r7, #4]
 3333 16c8 4FEA1323 		lsr	r3, r3, #8
 3334 16cc 9BB2     		uxth	r3, r3
 3335 16ce DBB2     		uxtb	r3, r3
 3336 16d0 1846     		mov	r0, r3
 3337 16d2 00F00FF8 		bl	BSP_LCD_SPI_Xfer
2069:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SPI_Xfer(reg_val & DEF_INT_08_MASK);
 3338              		.loc 1 2069 0
 3339 16d6 BB88     		ldrh	r3, [r7, #4]	@ movhi
 3340 16d8 DBB2     		uxtb	r3, r3
 3341 16da 1846     		mov	r0, r3
 3342 16dc 00F00AF8 		bl	BSP_LCD_SPI_Xfer
2070:Libraries/BSP/LCD/bsp_lcd.c **** 
2071:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_CTRL_CS_HIGH();
 3343              		.loc 1 2071 0
 3344 16e0 4FF00000 		mov	r0, #0
 3345 16e4 4FF04001 		mov	r1, #64
 3346 16e8 FFF7FEFF 		bl	CSP_GPIO_BitSet
2072:Libraries/BSP/LCD/bsp_lcd.c **** }
 3347              		.loc 1 2072 0
 3348 16ec 07F10807 		add	r7, r7, #8
 3349 16f0 BD46     		mov	sp, r7
 3350 16f2 80BD     		pop	{r7, pc}
 3351              		.cfi_endproc
 3352              	.LFE27:
 3354              		.align	2
 3355              		.thumb
 3356              		.thumb_func
 3358              	BSP_LCD_SPI_Xfer:
 3359              	.LFB28:
2073:Libraries/BSP/LCD/bsp_lcd.c **** 
2074:Libraries/BSP/LCD/bsp_lcd.c **** 
2075:Libraries/BSP/LCD/bsp_lcd.c **** /*
2076:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2077:Libraries/BSP/LCD/bsp_lcd.c **** *                                     BSP_LCD_SPI_Xfer()
2078:Libraries/BSP/LCD/bsp_lcd.c **** *
2079:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Perform a SPI transfer.
2080:Libraries/BSP/LCD/bsp_lcd.c **** *
2081:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : datum:   Byte to be sent.
2082:Libraries/BSP/LCD/bsp_lcd.c **** *
2083:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : Byte received.
2084:Libraries/BSP/LCD/bsp_lcd.c **** *
2085:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
2086:Libraries/BSP/LCD/bsp_lcd.c **** *
2087:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
2088:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2089:Libraries/BSP/LCD/bsp_lcd.c **** */
2090:Libraries/BSP/LCD/bsp_lcd.c **** 
2091:Libraries/BSP/LCD/bsp_lcd.c **** static  CPU_INT08U  BSP_LCD_SPI_Xfer (CPU_INT08U  datum)
2092:Libraries/BSP/LCD/bsp_lcd.c **** {
 3360              		.loc 1 2092 0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 24
 3363              		@ frame_needed = 1, uses_anonymous_args = 0
 3364 16f4 80B5     		push	{r7, lr}
 3365              	.LCFI81:
 3366              		.cfi_def_cfa_offset 8
 3367              		.cfi_offset 14, -4
 3368              		.cfi_offset 7, -8
 3369 16f6 86B0     		sub	sp, sp, #24
 3370              	.LCFI82:
 3371              		.cfi_def_cfa_offset 32
 3372 16f8 00AF     		add	r7, sp, #0
 3373              	.LCFI83:
 3374              		.cfi_def_cfa_register 7
 3375 16fa 0346     		mov	r3, r0
 3376 16fc FB71     		strb	r3, [r7, #7]
2093:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_TS32    ts_start;
2094:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_TS32    ts_elapsed;
2095:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_TS32    ts_elapsed_max;
2096:Libraries/BSP/LCD/bsp_lcd.c ****     CPU_INT32U  reg_val;
2097:Libraries/BSP/LCD/bsp_lcd.c **** 
2098:Libraries/BSP/LCD/bsp_lcd.c **** 
2099:Libraries/BSP/LCD/bsp_lcd.c ****     BSP_LCD_SSP1_REG_DR = (CPU_INT32U)datum;                    /* Write data into the data registe
 3377              		.loc 1 2099 0
 3378 16fe 4FF00803 		mov	r3, #8
 3379 1702 C4F20303 		movt	r3, 16387
 3380 1706 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3381 1708 1A60     		str	r2, [r3, #0]
2100:Libraries/BSP/LCD/bsp_lcd.c ****     ts_elapsed_max      = BSP_LCD_Ctxt.MaxTimeOut;
 3382              		.loc 1 2100 0
 3383 170a 40F20003 		movw	r3, #:lower16:BSP_LCD_Ctxt
 3384 170e C0F20003 		movt	r3, #:upper16:BSP_LCD_Ctxt
 3385 1712 DB6B     		ldr	r3, [r3, #60]
 3386 1714 3B61     		str	r3, [r7, #16]
2101:Libraries/BSP/LCD/bsp_lcd.c ****     ts_start            = CPU_TS_Get32();
 3387              		.loc 1 2101 0
 3388 1716 FFF7FEFF 		bl	CPU_TS_Get32
 3389 171a F860     		str	r0, [r7, #12]
2102:Libraries/BSP/LCD/bsp_lcd.c ****     ts_elapsed          = CPU_TS_Get32() - ts_start;            /* Calculated the elapsed time.    
 3390              		.loc 1 2102 0
 3391 171c FFF7FEFF 		bl	CPU_TS_Get32
 3392 1720 0246     		mov	r2, r0
 3393 1722 FB68     		ldr	r3, [r7, #12]
 3394 1724 D31A     		subs	r3, r2, r3
 3395 1726 7B61     		str	r3, [r7, #20]
2103:Libraries/BSP/LCD/bsp_lcd.c **** 
2104:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* While the receive register is no
2105:Libraries/BSP/LCD/bsp_lcd.c ****                                                                 /* ... timeout has not occurred?   
2106:Libraries/BSP/LCD/bsp_lcd.c ****     while ((DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) &&
 3396              		.loc 1 2106 0
 3397 1728 05E0     		b	.L165
 3398              	.L167:
2107:Libraries/BSP/LCD/bsp_lcd.c ****            (ts_elapsed < ts_elapsed_max)) {
2108:Libraries/BSP/LCD/bsp_lcd.c ****         ts_elapsed = CPU_TS_Get32() - ts_start;                 /* Calculate the elapsed time.     
 3399              		.loc 1 2108 0
 3400 172a FFF7FEFF 		bl	CPU_TS_Get32
 3401 172e 0246     		mov	r2, r0
 3402 1730 FB68     		ldr	r3, [r7, #12]
 3403 1732 D31A     		subs	r3, r2, r3
 3404 1734 7B61     		str	r3, [r7, #20]
 3405              	.L165:
2106:Libraries/BSP/LCD/bsp_lcd.c ****     while ((DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) &&
 3406              		.loc 1 2106 0 discriminator 1
 3407 1736 4FF00C03 		mov	r3, #12
 3408 173a C4F20303 		movt	r3, 16387
 3409 173e 1B68     		ldr	r3, [r3, #0]
 3410 1740 03F00403 		and	r3, r3, #4
 3411 1744 002B     		cmp	r3, #0
 3412 1746 03D1     		bne	.L166
2106:Libraries/BSP/LCD/bsp_lcd.c ****     while ((DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) &&
 3413              		.loc 1 2106 0 is_stmt 0 discriminator 2
 3414 1748 7A69     		ldr	r2, [r7, #20]
 3415 174a 3B69     		ldr	r3, [r7, #16]
 3416 174c 9A42     		cmp	r2, r3
 3417 174e ECD3     		bcc	.L167
 3418              	.L166:
2109:Libraries/BSP/LCD/bsp_lcd.c ****     }
2110:Libraries/BSP/LCD/bsp_lcd.c **** 
2111:Libraries/BSP/LCD/bsp_lcd.c ****     if (DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) {
 3419              		.loc 1 2111 0 is_stmt 1
 3420 1750 4FF00C03 		mov	r3, #12
 3421 1754 C4F20303 		movt	r3, 16387
 3422 1758 1B68     		ldr	r3, [r3, #0]
 3423 175a 03F00403 		and	r3, r3, #4
 3424 175e 002B     		cmp	r3, #0
 3425 1760 02D1     		bne	.L168
2112:Libraries/BSP/LCD/bsp_lcd.c ****         return ((CPU_INT08U)0);
 3426              		.loc 1 2112 0
 3427 1762 4FF00003 		mov	r3, #0
 3428 1766 08E0     		b	.L169
 3429              	.L168:
2113:Libraries/BSP/LCD/bsp_lcd.c ****     }
2114:Libraries/BSP/LCD/bsp_lcd.c **** 
2115:Libraries/BSP/LCD/bsp_lcd.c ****     reg_val = (BSP_LCD_SSP1_REG_DR & DEF_INT_08_MASK);
 3430              		.loc 1 2115 0
 3431 1768 4FF00803 		mov	r3, #8
 3432 176c C4F20303 		movt	r3, 16387
 3433 1770 1B68     		ldr	r3, [r3, #0]
 3434 1772 DBB2     		uxtb	r3, r3
 3435 1774 BB60     		str	r3, [r7, #8]
2116:Libraries/BSP/LCD/bsp_lcd.c **** 
2117:Libraries/BSP/LCD/bsp_lcd.c ****     return ((CPU_INT08U)reg_val);
 3436              		.loc 1 2117 0
 3437 1776 BB68     		ldr	r3, [r7, #8]
 3438 1778 DBB2     		uxtb	r3, r3
 3439              	.L169:
2118:Libraries/BSP/LCD/bsp_lcd.c **** }
 3440              		.loc 1 2118 0
 3441 177a 1846     		mov	r0, r3
 3442 177c 07F11807 		add	r7, r7, #24
 3443 1780 BD46     		mov	sp, r7
 3444 1782 80BD     		pop	{r7, pc}
 3445              		.cfi_endproc
 3446              	.LFE28:
 3448              		.align	2
 3449              		.thumb
 3450              		.thumb_func
 3452              	BSP_LCD_Lock:
 3453              	.LFB29:
2119:Libraries/BSP/LCD/bsp_lcd.c **** 
2120:Libraries/BSP/LCD/bsp_lcd.c **** 
2121:Libraries/BSP/LCD/bsp_lcd.c **** /*
2122:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2123:Libraries/BSP/LCD/bsp_lcd.c **** *                                        BSP_LCD_Lock()
2124:Libraries/BSP/LCD/bsp_lcd.c **** *
2125:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Acquire the LCD Lock.
2126:Libraries/BSP/LCD/bsp_lcd.c **** *
2127:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
2128:Libraries/BSP/LCD/bsp_lcd.c **** *
2129:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
2130:Libraries/BSP/LCD/bsp_lcd.c **** *
2131:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
2132:Libraries/BSP/LCD/bsp_lcd.c **** *
2133:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
2134:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2135:Libraries/BSP/LCD/bsp_lcd.c **** */
2136:Libraries/BSP/LCD/bsp_lcd.c **** 
2137:Libraries/BSP/LCD/bsp_lcd.c **** static  void  BSP_LCD_Lock (void)
2138:Libraries/BSP/LCD/bsp_lcd.c **** {
 3454              		.loc 1 2138 0
 3455              		.cfi_startproc
 3456              		@ args = 0, pretend = 0, frame = 8
 3457              		@ frame_needed = 1, uses_anonymous_args = 0
 3458 1784 80B5     		push	{r7, lr}
 3459              	.LCFI84:
 3460              		.cfi_def_cfa_offset 8
 3461              		.cfi_offset 14, -4
 3462              		.cfi_offset 7, -8
 3463 1786 84B0     		sub	sp, sp, #16
 3464              	.LCFI85:
 3465              		.cfi_def_cfa_offset 24
 3466 1788 02AF     		add	r7, sp, #8
 3467              	.LCFI86:
 3468              		.cfi_def_cfa 7, 16
2139:Libraries/BSP/LCD/bsp_lcd.c ****     OS_ERR  err;
2140:Libraries/BSP/LCD/bsp_lcd.c **** 
2141:Libraries/BSP/LCD/bsp_lcd.c **** 
2142:Libraries/BSP/LCD/bsp_lcd.c ****     OSMutexPend((OS_MUTEX  *)&BSP_LCD_Ctxt.Lock,
 3469              		.loc 1 2142 0
 3470 178a 07F10603 		add	r3, r7, #6
 3471 178e 0093     		str	r3, [sp, #0]
 3472 1790 0648     		ldr	r0, .L171
 3473 1792 4FF00001 		mov	r1, #0
 3474 1796 4FF00002 		mov	r2, #0
 3475 179a 4FF00003 		mov	r3, #0
 3476 179e FFF7FEFF 		bl	OSMutexPend
2143:Libraries/BSP/LCD/bsp_lcd.c ****                 (OS_TICK    )0,
2144:Libraries/BSP/LCD/bsp_lcd.c ****                 (OS_OPT     )OS_OPT_PEND_BLOCKING,
2145:Libraries/BSP/LCD/bsp_lcd.c ****                 (CPU_TS    *)0,
2146:Libraries/BSP/LCD/bsp_lcd.c ****                 (OS_ERR    *)&err);
2147:Libraries/BSP/LCD/bsp_lcd.c **** 
2148:Libraries/BSP/LCD/bsp_lcd.c ****     (void)&err;
2149:Libraries/BSP/LCD/bsp_lcd.c **** }
 3477              		.loc 1 2149 0
 3478 17a2 07F10807 		add	r7, r7, #8
 3479 17a6 BD46     		mov	sp, r7
 3480 17a8 80BD     		pop	{r7, pc}
 3481              	.L172:
 3482 17aa 00BF     		.align	2
 3483              	.L171:
 3484 17ac 10000000 		.word	BSP_LCD_Ctxt+16
 3485              		.cfi_endproc
 3486              	.LFE29:
 3488              		.align	2
 3489              		.thumb
 3490              		.thumb_func
 3492              	BSP_LCD_Unlock:
 3493              	.LFB30:
2150:Libraries/BSP/LCD/bsp_lcd.c **** 
2151:Libraries/BSP/LCD/bsp_lcd.c **** /*
2152:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2153:Libraries/BSP/LCD/bsp_lcd.c **** *                                       BSP_LCD_Unlock()
2154:Libraries/BSP/LCD/bsp_lcd.c **** *
2155:Libraries/BSP/LCD/bsp_lcd.c **** * Description : Release the LCD Lock.
2156:Libraries/BSP/LCD/bsp_lcd.c **** *
2157:Libraries/BSP/LCD/bsp_lcd.c **** * Argument(s) : none.
2158:Libraries/BSP/LCD/bsp_lcd.c **** *
2159:Libraries/BSP/LCD/bsp_lcd.c **** * Return(s)   : none.
2160:Libraries/BSP/LCD/bsp_lcd.c **** *
2161:Libraries/BSP/LCD/bsp_lcd.c **** * Caller(s)   : Application.
2162:Libraries/BSP/LCD/bsp_lcd.c **** *
2163:Libraries/BSP/LCD/bsp_lcd.c **** * Note(s)     : none.
2164:Libraries/BSP/LCD/bsp_lcd.c **** ***************************************************************************************************
2165:Libraries/BSP/LCD/bsp_lcd.c **** */
2166:Libraries/BSP/LCD/bsp_lcd.c **** 
2167:Libraries/BSP/LCD/bsp_lcd.c **** static  void  BSP_LCD_Unlock()
2168:Libraries/BSP/LCD/bsp_lcd.c **** {
 3494              		.loc 1 2168 0
 3495              		.cfi_startproc
 3496              		@ args = 0, pretend = 0, frame = 8
 3497              		@ frame_needed = 1, uses_anonymous_args = 0
 3498 17b0 80B5     		push	{r7, lr}
 3499              	.LCFI87:
 3500              		.cfi_def_cfa_offset 8
 3501              		.cfi_offset 14, -4
 3502              		.cfi_offset 7, -8
 3503 17b2 82B0     		sub	sp, sp, #8
 3504              	.LCFI88:
 3505              		.cfi_def_cfa_offset 16
 3506 17b4 00AF     		add	r7, sp, #0
 3507              	.LCFI89:
 3508              		.cfi_def_cfa_register 7
2169:Libraries/BSP/LCD/bsp_lcd.c ****     OS_ERR  err;
2170:Libraries/BSP/LCD/bsp_lcd.c **** 
2171:Libraries/BSP/LCD/bsp_lcd.c **** 
2172:Libraries/BSP/LCD/bsp_lcd.c ****     OSMutexPost((OS_MUTEX  *)&BSP_LCD_Ctxt.Lock,
 3509              		.loc 1 2172 0
 3510 17b6 0648     		ldr	r0, .L174
 3511 17b8 4FF00001 		mov	r1, #0
 3512 17bc 07F10603 		add	r3, r7, #6
 3513 17c0 1A46     		mov	r2, r3
 3514 17c2 FFF7FEFF 		bl	OSMutexPost
2173:Libraries/BSP/LCD/bsp_lcd.c ****                 (OS_OPT     )OS_OPT_POST_NONE,
2174:Libraries/BSP/LCD/bsp_lcd.c ****                 (OS_ERR    *)&err);
2175:Libraries/BSP/LCD/bsp_lcd.c **** }
 3515              		.loc 1 2175 0
 3516 17c6 07F10807 		add	r7, r7, #8
 3517 17ca BD46     		mov	sp, r7
 3518 17cc 80BD     		pop	{r7, pc}
 3519              	.L175:
 3520 17ce 00BF     		.align	2
 3521              	.L174:
 3522 17d0 10000000 		.word	BSP_LCD_Ctxt+16
 3523              		.cfi_endproc
 3524              	.LFE30:
 3526              	.Letext0:
 3527              		.file 2 "Libraries/uC-CPU/cpu.h"
 3528              		.file 3 "Libraries/uC-CPU/cpu_core.h"
 3529              		.file 4 "Libraries/BSP/LCD/bsp_lcd.h"
 3530              		.file 5 "Libraries/uC-OSIII/os_type.h"
 3531              		.file 6 "Libraries/uC-OSIII/os.h"
 3532              		.file 7 "Libraries/uC-CSP/csp_types.h"
 3533              		.file 8 "Libraries/uC-CSP/LPC17xx/csp_grp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bsp_lcd.c
     /tmp/ccHxoWWu.s:19     .bss:00000000 $d
     /tmp/ccHxoWWu.s:20     .bss:00000000 BSP_LCD_Ctxt
     /tmp/ccHxoWWu.s:23     .rodata:00000000 $d
     /tmp/ccHxoWWu.s:24     .rodata:00000000 .LC0
     /tmp/ccHxoWWu.s:27     .text:00000000 $t
     /tmp/ccHxoWWu.s:32     .text:00000000 BSP_LCD_Init
     /tmp/ccHxoWWu.s:3452   .text:00001784 BSP_LCD_Lock
     /tmp/ccHxoWWu.s:2451   .text:000010d4 BSP_LCD_BackLightOff
     /tmp/ccHxoWWu.s:3203   .text:000015e0 BSP_LCD_CtrlRegRd
     /tmp/ccHxoWWu.s:3492   .text:000017b0 BSP_LCD_Unlock
     /tmp/ccHxoWWu.s:288    .text:00000278 $d
     /tmp/ccHxoWWu.s:291    .text:0000027c $t
     /tmp/ccHxoWWu.s:3285   .text:00001674 BSP_LCD_CtrlRegWr
     /tmp/ccHxoWWu.s:602    .text:000005f0 BSP_LCD_Clr
     /tmp/ccHxoWWu.s:3358   .text:000016f4 BSP_LCD_SPI_Xfer
     /tmp/ccHxoWWu.s:720    .text:000006e4 BSP_LCD_BG_ColorSet
     /tmp/ccHxoWWu.s:760    .text:0000070c BSP_LCD_ImgDraw
     /tmp/ccHxoWWu.s:2832   .text:0000133c BSP_LCD_BitmapDrawUnlock
     /tmp/ccHxoWWu.s:825    .text:0000074c BSP_LCD_ImgTblSet
     /tmp/ccHxoWWu.s:874    .text:0000077c BSP_LCD_ImgGetByName
     /tmp/ccHxoWWu.s:996    .text:00000828 BSP_LCD_TextColorSet
     /tmp/ccHxoWWu.s:1036   .text:00000850 BSP_LCD_TextLineClr
     /tmp/ccHxoWWu.s:1220   .text:000009a8 BSP_LCD_TextDispStr
     /tmp/ccHxoWWu.s:1262   .text:000009d4 BSP_LCD_TextDispStr_N
     /tmp/ccHxoWWu.s:2534   .text:00001110 BSP_LCD_TextCharUnlock
     /tmp/ccHxoWWu.s:1490   .text:00000b2c BSP_LCD_TextDispChar
     /tmp/ccHxoWWu.s:1665   .text:00000c24 BSP_LCD_TextFontTblSet
     /tmp/ccHxoWWu.s:1714   .text:00000c54 BSP_LCD_TextFontGetByName
     /tmp/ccHxoWWu.s:1836   .text:00000d00 BSP_LCD_TextFontSet
     /tmp/ccHxoWWu.s:1942   .text:00000d9c BSP_LCD_BarGraphDraw
     /tmp/ccHxoWWu.s:2136   .text:00000f08 BSP_LCD_BitmapDraw
     /tmp/ccHxoWWu.s:2182   .text:00000f38 BSP_LCD_RectDraw
     /tmp/ccHxoWWu.s:2991   .text:00001468 BSP_LCD_RectDrawUnlock
     /tmp/ccHxoWWu.s:2234   .text:00000f78 BSP_LCD_RectDrawFill
     /tmp/ccHxoWWu.s:2286   .text:00000fb8 BSP_LCD_RectDrawFillLine
     /tmp/ccHxoWWu.s:2338   .text:00000ff4 BSP_LCD_Pixel
     /tmp/ccHxoWWu.s:2479   .text:000010e8 BSP_LCD_BackLightOn
     /tmp/ccHxoWWu.s:2507   .text:000010fc BSP_LCD_BackLightToggle
     /tmp/ccHxoWWu.s:3484   .text:000017ac $d
     /tmp/ccHxoWWu.s:3488   .text:000017b0 $t
     /tmp/ccHxoWWu.s:3522   .text:000017d0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CSP_GPIO_Cfg
CSP_PM_PerClkDivCfg
CSP_PM_PerClkFreqGet
OSMutexCreate
CSP_PM_PerClkEn
CSP_GPIO_BitSet
CPU_TS_TmrFreqGet
OSTimeDlyHMSM
CSP_GPIO_BitClr
Str_Cmp
CSP_GPIO_BitToggle
CPU_TS_Get32
OSMutexPend
OSMutexPost
