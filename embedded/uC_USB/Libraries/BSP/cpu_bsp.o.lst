   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"cpu_bsp.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CPU_TS_TmrInit
  20              		.thumb
  21              		.thumb_func
  23              	CPU_TS_TmrInit:
  24              	.LFB0:
  25              		.file 1 "Libraries/BSP/cpu_bsp.c"
   1:Libraries/BSP/cpu_bsp.c **** /*
   2:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
   3:Libraries/BSP/cpu_bsp.c **** *                                                uC/CPU
   4:Libraries/BSP/cpu_bsp.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:Libraries/BSP/cpu_bsp.c **** *
   6:Libraries/BSP/cpu_bsp.c **** *                          (c) Copyright 2004-2010; Micrium, Inc.; Weston, FL
   7:Libraries/BSP/cpu_bsp.c **** *
   8:Libraries/BSP/cpu_bsp.c **** *               All rights reserved.  Protected by international copyright laws.
   9:Libraries/BSP/cpu_bsp.c **** *
  10:Libraries/BSP/cpu_bsp.c **** *               uC/CPU is provided in source form to registered licensees ONLY.  It is 
  11:Libraries/BSP/cpu_bsp.c **** *               illegal to distribute this source code to any third party unless you receive 
  12:Libraries/BSP/cpu_bsp.c **** *               written permission by an authorized Micrium representative.  Knowledge of 
  13:Libraries/BSP/cpu_bsp.c **** *               the source code may NOT be used to develop a similar product.
  14:Libraries/BSP/cpu_bsp.c **** *
  15:Libraries/BSP/cpu_bsp.c **** *               Please help us continue to provide the Embedded community with the finest 
  16:Libraries/BSP/cpu_bsp.c **** *               software available.  Your honesty is greatly appreciated.
  17:Libraries/BSP/cpu_bsp.c **** *
  18:Libraries/BSP/cpu_bsp.c **** *               You can contact us at www.micrium.com.
  19:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  20:Libraries/BSP/cpu_bsp.c **** */
  21:Libraries/BSP/cpu_bsp.c **** 
  22:Libraries/BSP/cpu_bsp.c **** /*
  23:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  24:Libraries/BSP/cpu_bsp.c **** *
  25:Libraries/BSP/cpu_bsp.c **** *                               CPU BOARD SUPPORT PACKAGE (BSP) FUNCTIONS
  26:Libraries/BSP/cpu_bsp.c **** *
  27:Libraries/BSP/cpu_bsp.c **** *                                       KEIL MCB1700 DEVELOPMENT KIT 
  28:Libraries/BSP/cpu_bsp.c **** *
  29:Libraries/BSP/cpu_bsp.c **** * Filename      : cpu_bsp.c
  30:Libraries/BSP/cpu_bsp.c **** * Version       : V1.25
  31:Libraries/BSP/cpu_bsp.c **** * Programmer(s) : ITJ
  32:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  33:Libraries/BSP/cpu_bsp.c **** */
  34:Libraries/BSP/cpu_bsp.c **** 
  35:Libraries/BSP/cpu_bsp.c **** 
  36:Libraries/BSP/cpu_bsp.c **** /*
  37:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  38:Libraries/BSP/cpu_bsp.c **** *                                            INCLUDE FILES
  39:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  40:Libraries/BSP/cpu_bsp.c **** */
  41:Libraries/BSP/cpu_bsp.c **** 
  42:Libraries/BSP/cpu_bsp.c **** #define    CPU_BSP_MODULE
  43:Libraries/BSP/cpu_bsp.c **** #include  <cpu_core.h>
  44:Libraries/BSP/cpu_bsp.c **** #include  <csp.h>
  45:Libraries/BSP/cpu_bsp.c **** 
  46:Libraries/BSP/cpu_bsp.c **** 
  47:Libraries/BSP/cpu_bsp.c **** /*$PAGE*/
  48:Libraries/BSP/cpu_bsp.c **** /*
  49:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  50:Libraries/BSP/cpu_bsp.c **** *                                            LOCAL DEFINES
  51:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  52:Libraries/BSP/cpu_bsp.c **** */
  53:Libraries/BSP/cpu_bsp.c **** 
  54:Libraries/BSP/cpu_bsp.c **** #define  CPU_BSP_REG_DEMCR             (*(CPU_REG32 *)0xE000EDFC)
  55:Libraries/BSP/cpu_bsp.c **** #define  CPU_BSP_REG_DWT_CR            (*(CPU_REG32 *)0xE0001000)
  56:Libraries/BSP/cpu_bsp.c **** #define  CPU_BSP_REG_DWT_CYCCNT        (*(CPU_REG32 *)0xE0001004)
  57:Libraries/BSP/cpu_bsp.c **** 
  58:Libraries/BSP/cpu_bsp.c **** 
  59:Libraries/BSP/cpu_bsp.c **** /*
  60:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  61:Libraries/BSP/cpu_bsp.c **** *                                           LOCAL CONSTANTS
  62:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  63:Libraries/BSP/cpu_bsp.c **** */
  64:Libraries/BSP/cpu_bsp.c **** 
  65:Libraries/BSP/cpu_bsp.c **** 
  66:Libraries/BSP/cpu_bsp.c **** /*
  67:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  68:Libraries/BSP/cpu_bsp.c **** *                                          LOCAL DATA TYPES
  69:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  70:Libraries/BSP/cpu_bsp.c **** */
  71:Libraries/BSP/cpu_bsp.c **** 
  72:Libraries/BSP/cpu_bsp.c **** 
  73:Libraries/BSP/cpu_bsp.c **** /*
  74:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  75:Libraries/BSP/cpu_bsp.c **** *                                            LOCAL TABLES
  76:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  77:Libraries/BSP/cpu_bsp.c **** */
  78:Libraries/BSP/cpu_bsp.c **** 
  79:Libraries/BSP/cpu_bsp.c **** 
  80:Libraries/BSP/cpu_bsp.c **** /*
  81:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  82:Libraries/BSP/cpu_bsp.c **** *                                       LOCAL GLOBAL VARIABLES
  83:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  84:Libraries/BSP/cpu_bsp.c **** */
  85:Libraries/BSP/cpu_bsp.c **** 
  86:Libraries/BSP/cpu_bsp.c **** 
  87:Libraries/BSP/cpu_bsp.c **** /*
  88:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  89:Libraries/BSP/cpu_bsp.c **** *                                      LOCAL FUNCTION PROTOTYPES
  90:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  91:Libraries/BSP/cpu_bsp.c **** */
  92:Libraries/BSP/cpu_bsp.c **** 
  93:Libraries/BSP/cpu_bsp.c **** 
  94:Libraries/BSP/cpu_bsp.c **** /*
  95:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  96:Libraries/BSP/cpu_bsp.c **** *                                     LOCAL CONFIGURATION ERRORS
  97:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
  98:Libraries/BSP/cpu_bsp.c **** */
  99:Libraries/BSP/cpu_bsp.c **** 
 100:Libraries/BSP/cpu_bsp.c **** 
 101:Libraries/BSP/cpu_bsp.c **** /*$PAGE*/
 102:Libraries/BSP/cpu_bsp.c **** /*
 103:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 104:Libraries/BSP/cpu_bsp.c **** *                                          CPU_TS_TmrInit()
 105:Libraries/BSP/cpu_bsp.c **** *
 106:Libraries/BSP/cpu_bsp.c **** * Description : Initialize & start CPU timestamp timer.
 107:Libraries/BSP/cpu_bsp.c **** *
 108:Libraries/BSP/cpu_bsp.c **** * Argument(s) : none.
 109:Libraries/BSP/cpu_bsp.c **** *
 110:Libraries/BSP/cpu_bsp.c **** * Return(s)   : none.
 111:Libraries/BSP/cpu_bsp.c **** *
 112:Libraries/BSP/cpu_bsp.c **** * Caller(s)   : CPU_TS_Init().
 113:Libraries/BSP/cpu_bsp.c **** *
 114:Libraries/BSP/cpu_bsp.c **** *               This function is an INTERNAL CPU module function & MUST be implemented by applicati
 115:Libraries/BSP/cpu_bsp.c **** *               BSP function(s) [see Note #1] but MUST NOT be called by application function(s).
 116:Libraries/BSP/cpu_bsp.c **** *
 117:Libraries/BSP/cpu_bsp.c **** * Note(s)     : (1) CPU_TS_TmrInit() is an application/BSP function that MUST be defined by the dev
 118:Libraries/BSP/cpu_bsp.c **** *                   if either of the following CPU features is enabled :
 119:Libraries/BSP/cpu_bsp.c **** *
 120:Libraries/BSP/cpu_bsp.c **** *                   (a) CPU timestamps
 121:Libraries/BSP/cpu_bsp.c **** *                   (b) CPU interrupts disabled time measurements
 122:Libraries/BSP/cpu_bsp.c **** *
 123:Libraries/BSP/cpu_bsp.c **** *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
 124:Libraries/BSP/cpu_bsp.c **** *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1
 125:Libraries/BSP/cpu_bsp.c **** *
 126:Libraries/BSP/cpu_bsp.c **** *               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR'
 127:Libraries/BSP/cpu_bsp.c **** *                       data type.
 128:Libraries/BSP/cpu_bsp.c **** *
 129:Libraries/BSP/cpu_bsp.c **** *                       (1) If timer has more bits, truncate timer values' higher-order bits greate
 130:Libraries/BSP/cpu_bsp.c **** *                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
 131:Libraries/BSP/cpu_bsp.c **** *
 132:Libraries/BSP/cpu_bsp.c **** *                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR
 133:Libraries/BSP/cpu_bsp.c **** *                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be 
 134:Libraries/BSP/cpu_bsp.c **** *                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
 135:Libraries/BSP/cpu_bsp.c **** *
 136:Libraries/BSP/cpu_bsp.c **** *                           In other words, if timer size is not a binary-multiple of 8-bit octets 
 137:Libraries/BSP/cpu_bsp.c **** *                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple 
 138:Libraries/BSP/cpu_bsp.c **** *                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the 
 139:Libraries/BSP/cpu_bsp.c **** *                           minimum supported word size for CPU timestamp timers is 8-bits.
 140:Libraries/BSP/cpu_bsp.c **** *
 141:Libraries/BSP/cpu_bsp.c **** *                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
 142:Libraries/BSP/cpu_bsp.c **** *                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
 143:Libraries/BSP/cpu_bsp.c **** *
 144:Libraries/BSP/cpu_bsp.c **** *                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count
 145:Libraries/BSP/cpu_bsp.c **** *
 146:Libraries/BSP/cpu_bsp.c **** *                   (c) When applicable, timer period SHOULD be less than the typical measured time
 147:Libraries/BSP/cpu_bsp.c **** *                       but MUST be less than the maximum measured time; otherwise, timer resolutio
 148:Libraries/BSP/cpu_bsp.c **** *                       inadequate to measure desired times.
 149:Libraries/BSP/cpu_bsp.c **** *
 150:Libraries/BSP/cpu_bsp.c **** *                   See also 'CPU_TS_TmrRd()  Note #2'.
 151:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 152:Libraries/BSP/cpu_bsp.c **** */
 153:Libraries/BSP/cpu_bsp.c **** 
 154:Libraries/BSP/cpu_bsp.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 155:Libraries/BSP/cpu_bsp.c **** void  CPU_TS_TmrInit (void)
 156:Libraries/BSP/cpu_bsp.c **** {
  26              		.loc 1 156 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 157:Libraries/BSP/cpu_bsp.c ****     CPU_INT32U  fclk_freq;
 158:Libraries/BSP/cpu_bsp.c ****     
 159:Libraries/BSP/cpu_bsp.c ****     fclk_freq = CSP_PM_CPU_ClkFreqGet();
  41              		.loc 1 159 0
  42 0006 FFF7FEFF 		bl	CSP_PM_CPU_ClkFreqGet
  43 000a 7860     		str	r0, [r7, #4]
 160:Libraries/BSP/cpu_bsp.c ****     
 161:Libraries/BSP/cpu_bsp.c ****     CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
  44              		.loc 1 161 0
  45 000c 4EF6FC53 		movw	r3, #60924
  46 0010 CEF20003 		movt	r3, 57344
  47 0014 4EF6FC52 		movw	r2, #60924
  48 0018 CEF20002 		movt	r2, 57344
  49 001c 1268     		ldr	r2, [r2, #0]
  50 001e 42F08072 		orr	r2, r2, #16777216
  51 0022 1A60     		str	r2, [r3, #0]
 162:Libraries/BSP/cpu_bsp.c ****     CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
  52              		.loc 1 162 0
  53 0024 4FF48053 		mov	r3, #4096
  54 0028 CEF20003 		movt	r3, 57344
  55 002c 4FF48052 		mov	r2, #4096
  56 0030 CEF20002 		movt	r2, 57344
  57 0034 1268     		ldr	r2, [r2, #0]
  58 0036 42F00102 		orr	r2, r2, #1
  59 003a 1A60     		str	r2, [r3, #0]
 163:Libraries/BSP/cpu_bsp.c **** 
 164:Libraries/BSP/cpu_bsp.c ****     CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);    
  60              		.loc 1 164 0
  61 003c 7868     		ldr	r0, [r7, #4]
  62 003e FFF7FEFF 		bl	CPU_TS_TmrFreqSet
 165:Libraries/BSP/cpu_bsp.c **** }
  63              		.loc 1 165 0
  64 0042 07F10807 		add	r7, r7, #8
  65 0046 BD46     		mov	sp, r7
  66 0048 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE0:
  70 004a 00BF     		.align	2
  71              		.global	CPU_TS_TmrRd
  72              		.thumb
  73              		.thumb_func
  75              	CPU_TS_TmrRd:
  76              	.LFB1:
 166:Libraries/BSP/cpu_bsp.c **** #endif
 167:Libraries/BSP/cpu_bsp.c **** 
 168:Libraries/BSP/cpu_bsp.c **** 
 169:Libraries/BSP/cpu_bsp.c **** /*$PAGE*/
 170:Libraries/BSP/cpu_bsp.c **** /*
 171:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 172:Libraries/BSP/cpu_bsp.c **** *                                           CPU_TS_TmrRd()
 173:Libraries/BSP/cpu_bsp.c **** *
 174:Libraries/BSP/cpu_bsp.c **** * Description : Get current CPU timestamp timer count value.
 175:Libraries/BSP/cpu_bsp.c **** *
 176:Libraries/BSP/cpu_bsp.c **** * Argument(s) : none.
 177:Libraries/BSP/cpu_bsp.c **** *
 178:Libraries/BSP/cpu_bsp.c **** * Return(s)   : Timestamp timer count (see Notes #2a & #2b).
 179:Libraries/BSP/cpu_bsp.c **** *
 180:Libraries/BSP/cpu_bsp.c **** * Caller(s)   : CPU_TS_Init(),
 181:Libraries/BSP/cpu_bsp.c **** *               CPU_TS_Get32(),
 182:Libraries/BSP/cpu_bsp.c **** *               CPU_TS_Get64(),
 183:Libraries/BSP/cpu_bsp.c **** *               CPU_IntDisMeasStart(),
 184:Libraries/BSP/cpu_bsp.c **** *               CPU_IntDisMeasStop().
 185:Libraries/BSP/cpu_bsp.c **** *
 186:Libraries/BSP/cpu_bsp.c **** *               This function is an INTERNAL CPU module function & MUST be implemented by applicati
 187:Libraries/BSP/cpu_bsp.c **** *               BSP function(s) [see Note #1] but SHOULD NOT be called by application function(s).
 188:Libraries/BSP/cpu_bsp.c **** *
 189:Libraries/BSP/cpu_bsp.c **** * Note(s)     : (1) CPU_TS_TmrRd() is an application/BSP function that MUST be defined by the devel
 190:Libraries/BSP/cpu_bsp.c **** *                   if either of the following CPU features is enabled :
 191:Libraries/BSP/cpu_bsp.c **** *
 192:Libraries/BSP/cpu_bsp.c **** *                   (a) CPU timestamps
 193:Libraries/BSP/cpu_bsp.c **** *                   (b) CPU interrupts disabled time measurements
 194:Libraries/BSP/cpu_bsp.c **** *
 195:Libraries/BSP/cpu_bsp.c **** *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
 196:Libraries/BSP/cpu_bsp.c **** *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1
 197:Libraries/BSP/cpu_bsp.c **** *
 198:Libraries/BSP/cpu_bsp.c **** *               (2) (a) Timer count values MUST be returned via word-size-configurable 'CPU_TS_TMR'
 199:Libraries/BSP/cpu_bsp.c **** *                       data type.
 200:Libraries/BSP/cpu_bsp.c **** *
 201:Libraries/BSP/cpu_bsp.c **** *                       (1) If timer has more bits, truncate timer values' higher-order bits greate
 202:Libraries/BSP/cpu_bsp.c **** *                           than the configured 'CPU_TS_TMR' timestamp timer data type word size.
 203:Libraries/BSP/cpu_bsp.c **** *
 204:Libraries/BSP/cpu_bsp.c **** *                       (2) Since the timer MUST NOT have less bits than the configured 'CPU_TS_TMR
 205:Libraries/BSP/cpu_bsp.c **** *                           timestamp timer data type word size; 'CPU_CFG_TS_TMR_SIZE' MUST be 
 206:Libraries/BSP/cpu_bsp.c **** *                           configured so that ALL bits in 'CPU_TS_TMR' data type are significant.
 207:Libraries/BSP/cpu_bsp.c **** *
 208:Libraries/BSP/cpu_bsp.c **** *                           In other words, if timer size is not a binary-multiple of 8-bit octets 
 209:Libraries/BSP/cpu_bsp.c **** *                           (e.g. 20-bits or even 24-bits), then the next lower, binary-multiple 
 210:Libraries/BSP/cpu_bsp.c **** *                           octet word size SHOULD be configured (e.g. to 16-bits).  However, the 
 211:Libraries/BSP/cpu_bsp.c **** *                           minimum supported word size for CPU timestamp timers is 8-bits.
 212:Libraries/BSP/cpu_bsp.c **** *
 213:Libraries/BSP/cpu_bsp.c **** *                       See also 'cpu_cfg.h   CPU TIMESTAMP CONFIGURATION  Note #2'
 214:Libraries/BSP/cpu_bsp.c **** *                              & 'cpu_core.h  CPU TIMESTAMP DATA TYPES     Note #1'.
 215:Libraries/BSP/cpu_bsp.c **** *
 216:Libraries/BSP/cpu_bsp.c **** *                   (b) Timer SHOULD be an 'up'  counter whose values increase with each time count
 217:Libraries/BSP/cpu_bsp.c **** *
 218:Libraries/BSP/cpu_bsp.c **** *                       (1) If timer is a 'down' counter whose values decrease with each time count
 219:Libraries/BSP/cpu_bsp.c **** *                           then the returned timer value MUST be ones-complemented.
 220:Libraries/BSP/cpu_bsp.c **** *
 221:Libraries/BSP/cpu_bsp.c **** *                   (c) (1) When applicable, the amount of time measured by CPU timestamps is 
 222:Libraries/BSP/cpu_bsp.c **** *                           calculated by either of the following equations :
 223:Libraries/BSP/cpu_bsp.c **** *
 224:Libraries/BSP/cpu_bsp.c **** *                           (A) Time measured  =  Number timer counts  *  Timer period
 225:Libraries/BSP/cpu_bsp.c **** *
 226:Libraries/BSP/cpu_bsp.c **** *                                   where
 227:Libraries/BSP/cpu_bsp.c **** *
 228:Libraries/BSP/cpu_bsp.c **** *                                       Number timer counts     Number of timer counts measured 
 229:Libraries/BSP/cpu_bsp.c **** *                                       Timer period            Timer's period in some units of 
 230:Libraries/BSP/cpu_bsp.c **** *                                                                   (fractional) seconds
 231:Libraries/BSP/cpu_bsp.c **** *                                       Time measured           Amount of time measured, in same 
 232:Libraries/BSP/cpu_bsp.c **** *                                                                   units of (fractional) seconds 
 233:Libraries/BSP/cpu_bsp.c **** *                                                                   as the Timer period
 234:Libraries/BSP/cpu_bsp.c **** *
 235:Libraries/BSP/cpu_bsp.c **** *                                                  Number timer counts
 236:Libraries/BSP/cpu_bsp.c **** *                           (B) Time measured  =  ---------------------
 237:Libraries/BSP/cpu_bsp.c **** *                                                    Timer frequency
 238:Libraries/BSP/cpu_bsp.c **** *
 239:Libraries/BSP/cpu_bsp.c **** *                                   where
 240:Libraries/BSP/cpu_bsp.c **** *
 241:Libraries/BSP/cpu_bsp.c **** *                                       Number timer counts     Number of timer counts measured
 242:Libraries/BSP/cpu_bsp.c **** *                                       Timer frequency         Timer's frequency in some units 
 243:Libraries/BSP/cpu_bsp.c **** *                                                                   of counts per second
 244:Libraries/BSP/cpu_bsp.c **** *                                       Time measured           Amount of time measured, in seconds
 245:Libraries/BSP/cpu_bsp.c **** *
 246:Libraries/BSP/cpu_bsp.c **** *                       (2) Timer period SHOULD be less than the typical measured time but MUST be 
 247:Libraries/BSP/cpu_bsp.c **** *                           than the maximum measured time; otherwise, timer resolution inadequate 
 248:Libraries/BSP/cpu_bsp.c **** *                           measure desired times.
 249:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 250:Libraries/BSP/cpu_bsp.c **** */
 251:Libraries/BSP/cpu_bsp.c **** 
 252:Libraries/BSP/cpu_bsp.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 253:Libraries/BSP/cpu_bsp.c **** CPU_TS_TMR  CPU_TS_TmrRd (void)
 254:Libraries/BSP/cpu_bsp.c **** {
  77              		.loc 1 254 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 004c 80B4     		push	{r7}
  83              	.LCFI3:
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 7, -4
  86 004e 83B0     		sub	sp, sp, #12
  87              	.LCFI4:
  88              		.cfi_def_cfa_offset 16
  89 0050 00AF     		add	r7, sp, #0
  90              	.LCFI5:
  91              		.cfi_def_cfa_register 7
 255:Libraries/BSP/cpu_bsp.c ****     CPU_TS_TMR  ts_tmr_cnts;
 256:Libraries/BSP/cpu_bsp.c **** 
 257:Libraries/BSP/cpu_bsp.c ****                                                                 
 258:Libraries/BSP/cpu_bsp.c ****     ts_tmr_cnts  = (CPU_TS_TMR)CPU_BSP_REG_DWT_CYCCNT;
  92              		.loc 1 258 0
  93 0052 41F20403 		movw	r3, #4100
  94 0056 CEF20003 		movt	r3, 57344
  95 005a 1B68     		ldr	r3, [r3, #0]
  96 005c 7B60     		str	r3, [r7, #4]
 259:Libraries/BSP/cpu_bsp.c ****     
 260:Libraries/BSP/cpu_bsp.c ****     return (ts_tmr_cnts);
  97              		.loc 1 260 0
  98 005e 7B68     		ldr	r3, [r7, #4]
 261:Libraries/BSP/cpu_bsp.c **** }
  99              		.loc 1 261 0
 100 0060 1846     		mov	r0, r3
 101 0062 07F10C07 		add	r7, r7, #12
 102 0066 BD46     		mov	sp, r7
 103 0068 80BC     		pop	{r7}
 104 006a 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE1:
 108              		.align	2
 109              		.global	CPU_TS32_to_uSec
 110              		.thumb
 111              		.thumb_func
 113              	CPU_TS32_to_uSec:
 114              	.LFB2:
 262:Libraries/BSP/cpu_bsp.c **** #endif
 263:Libraries/BSP/cpu_bsp.c **** 
 264:Libraries/BSP/cpu_bsp.c **** 
 265:Libraries/BSP/cpu_bsp.c **** /*$PAGE*/
 266:Libraries/BSP/cpu_bsp.c **** /*
 267:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 268:Libraries/BSP/cpu_bsp.c **** *                                         CPU_TSxx_to_uSec()
 269:Libraries/BSP/cpu_bsp.c **** *
 270:Libraries/BSP/cpu_bsp.c **** * Description : Convert a 32-/64-bit CPU timestamp from timer counts to microseconds.
 271:Libraries/BSP/cpu_bsp.c **** *
 272:Libraries/BSP/cpu_bsp.c **** * Argument(s) : ts_cnts   CPU timestamp (in timestamp timer counts [see Note #2aA]).
 273:Libraries/BSP/cpu_bsp.c **** *
 274:Libraries/BSP/cpu_bsp.c **** * Return(s)   : Converted CPU timestamp (in microseconds           [see Note #2aD]).
 275:Libraries/BSP/cpu_bsp.c **** *
 276:Libraries/BSP/cpu_bsp.c **** * Caller(s)   : Application.
 277:Libraries/BSP/cpu_bsp.c **** *
 278:Libraries/BSP/cpu_bsp.c **** *               This function is an (optional) CPU module application interface (API) function whic
 279:Libraries/BSP/cpu_bsp.c **** *               MAY be implemented by application/BSP function(s) [see Note #1] & MAY be called by 
 280:Libraries/BSP/cpu_bsp.c **** *               application function(s).
 281:Libraries/BSP/cpu_bsp.c **** *
 282:Libraries/BSP/cpu_bsp.c **** * Note(s)     : (1) CPU_TS32_to_uSec()/CPU_TS64_to_uSec() are application/BSP functions that MAY be
 283:Libraries/BSP/cpu_bsp.c **** *                   optionally defined by the developer when either of the following CPU features i
 284:Libraries/BSP/cpu_bsp.c **** *                   enabled :
 285:Libraries/BSP/cpu_bsp.c **** *
 286:Libraries/BSP/cpu_bsp.c **** *                   (a) CPU timestamps
 287:Libraries/BSP/cpu_bsp.c **** *                   (b) CPU interrupts disabled time measurements
 288:Libraries/BSP/cpu_bsp.c **** *
 289:Libraries/BSP/cpu_bsp.c **** *                   See 'cpu_cfg.h  CPU TIMESTAMP CONFIGURATION  Note #1'
 290:Libraries/BSP/cpu_bsp.c **** *                     & 'cpu_cfg.h  CPU INTERRUPTS DISABLED TIME MEASUREMENT CONFIGURATION  Note #1
 291:Libraries/BSP/cpu_bsp.c **** *
 292:Libraries/BSP/cpu_bsp.c **** *               (2) (a) The amount of time measured by CPU timestamps is calculated by either of 
 293:Libraries/BSP/cpu_bsp.c **** *                       the following equations :
 294:Libraries/BSP/cpu_bsp.c **** *
 295:Libraries/BSP/cpu_bsp.c **** *                                                                        10^6 microseconds
 296:Libraries/BSP/cpu_bsp.c **** *                       (1) Time measured  =   Number timer counts   *  -------------------  *  Tim
 297:Libraries/BSP/cpu_bsp.c **** *                                                                            1 second
 298:Libraries/BSP/cpu_bsp.c **** *
 299:Libraries/BSP/cpu_bsp.c **** *                                              Number timer counts       10^6 microseconds
 300:Libraries/BSP/cpu_bsp.c **** *                       (2) Time measured  =  ---------------------  *  -------------------
 301:Libraries/BSP/cpu_bsp.c **** *                                                Timer frequency             1 second
 302:Libraries/BSP/cpu_bsp.c **** *
 303:Libraries/BSP/cpu_bsp.c **** *                               where
 304:Libraries/BSP/cpu_bsp.c **** *
 305:Libraries/BSP/cpu_bsp.c **** *                                   (A) Number timer counts     Number of timer counts measured
 306:Libraries/BSP/cpu_bsp.c **** *                                   (B) Timer frequency         Timer's frequency in some units 
 307:Libraries/BSP/cpu_bsp.c **** *                                                                   of counts per second
 308:Libraries/BSP/cpu_bsp.c **** *                                   (C) Timer period            Timer's period in some units of 
 309:Libraries/BSP/cpu_bsp.c **** *                                                                   (fractional)  seconds
 310:Libraries/BSP/cpu_bsp.c **** *                                   (D) Time measured           Amount of time measured, 
 311:Libraries/BSP/cpu_bsp.c **** *                                                                   in microseconds
 312:Libraries/BSP/cpu_bsp.c **** *
 313:Libraries/BSP/cpu_bsp.c **** *                   (b) Timer period SHOULD be less than the typical measured time but MUST be less
 314:Libraries/BSP/cpu_bsp.c **** *                       than the maximum measured time; otherwise, timer resolution inadequate to 
 315:Libraries/BSP/cpu_bsp.c **** *                       measure desired times.
 316:Libraries/BSP/cpu_bsp.c **** *
 317:Libraries/BSP/cpu_bsp.c **** *                   (c) Specific implementations may convert any number of CPU_TS32 or CPU_TS64 bit
 318:Libraries/BSP/cpu_bsp.c **** *                       -- up to 32 or 64, respectively -- into microseconds.
 319:Libraries/BSP/cpu_bsp.c **** ***************************************************************************************************
 320:Libraries/BSP/cpu_bsp.c **** */
 321:Libraries/BSP/cpu_bsp.c **** 
 322:Libraries/BSP/cpu_bsp.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 323:Libraries/BSP/cpu_bsp.c **** CPU_INT64U  CPU_TS32_to_uSec (CPU_TS32  ts_cnts)
 324:Libraries/BSP/cpu_bsp.c **** {
 115              		.loc 1 324 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 006c 80B4     		push	{r7}
 121              	.LCFI6:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 006e 83B0     		sub	sp, sp, #12
 125              	.LCFI7:
 126              		.cfi_def_cfa_offset 16
 127 0070 00AF     		add	r7, sp, #0
 128              	.LCFI8:
 129              		.cfi_def_cfa_register 7
 130 0072 7860     		str	r0, [r7, #4]
 325:Libraries/BSP/cpu_bsp.c **** 
 326:Libraries/BSP/cpu_bsp.c ****     return (0u);
 131              		.loc 1 326 0
 132 0074 4FF00002 		mov	r2, #0
 133 0078 4FF00003 		mov	r3, #0
 327:Libraries/BSP/cpu_bsp.c **** 
 328:Libraries/BSP/cpu_bsp.c **** }
 134              		.loc 1 328 0
 135 007c 1046     		mov	r0, r2
 136 007e 1946     		mov	r1, r3
 137 0080 07F10C07 		add	r7, r7, #12
 138 0084 BD46     		mov	sp, r7
 139 0086 80BC     		pop	{r7}
 140 0088 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE2:
 144              	.Letext0:
 145              		.file 2 "Libraries/uC-CPU/cpu.h"
 146              		.file 3 "Libraries/uC-CPU/cpu_core.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cpu_bsp.c
     /tmp/ccXzdvyI.s:18     .text:00000000 $t
     /tmp/ccXzdvyI.s:23     .text:00000000 CPU_TS_TmrInit
     /tmp/ccXzdvyI.s:75     .text:0000004c CPU_TS_TmrRd
     /tmp/ccXzdvyI.s:113    .text:0000006c CPU_TS32_to_uSec
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CSP_PM_CPU_ClkFreqGet
CPU_TS_TmrFreqSet
