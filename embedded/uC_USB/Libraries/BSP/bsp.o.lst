   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"bsp.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	BSP_LowLevelInit
  20              		.thumb
  21              		.thumb_func
  23              	BSP_LowLevelInit:
  24              	.LFB55:
  25              		.file 1 "Libraries/BSP/bsp.c"
   1:Libraries/BSP/bsp.c **** /*
   2:Libraries/BSP/bsp.c **** ***************************************************************************************************
   3:Libraries/BSP/bsp.c **** *                                     MICRIUM BOARD SUPPORT SUPPORT
   4:Libraries/BSP/bsp.c **** *
   5:Libraries/BSP/bsp.c **** *                          (c) Copyright 2003-2009; Micrium, Inc.; Weston, FL
   6:Libraries/BSP/bsp.c **** *
   7:Libraries/BSP/bsp.c **** *               All rights reserved.  Protected by international copyright laws.
   8:Libraries/BSP/bsp.c **** *               Knowledge of the source code may NOT be used to develop a similar product.
   9:Libraries/BSP/bsp.c **** *               Please help us continue to provide the Embedded community with the finest
  10:Libraries/BSP/bsp.c **** *               software available.  Your honesty is greatly appreciated.
  11:Libraries/BSP/bsp.c **** ***************************************************************************************************
  12:Libraries/BSP/bsp.c **** */
  13:Libraries/BSP/bsp.c **** 
  14:Libraries/BSP/bsp.c **** 
  15:Libraries/BSP/bsp.c **** /*
  16:Libraries/BSP/bsp.c **** ***************************************************************************************************
  17:Libraries/BSP/bsp.c **** *
  18:Libraries/BSP/bsp.c **** *                                      BOARD SUPPORT PACKAGE (BSP)
  19:Libraries/BSP/bsp.c **** *
  20:Libraries/BSP/bsp.c **** *                                    KEIL MCB1700 DEVELOPMENT KIT
  21:Libraries/BSP/bsp.c **** *
  22:Libraries/BSP/bsp.c **** * Filename      : bsp.c
  23:Libraries/BSP/bsp.c **** * Version       : V1.00
  24:Libraries/BSP/bsp.c **** * Programmer(s) : FT
  25:Libraries/BSP/bsp.c **** ***************************************************************************************************
  26:Libraries/BSP/bsp.c **** */
  27:Libraries/BSP/bsp.c **** 
  28:Libraries/BSP/bsp.c **** 
  29:Libraries/BSP/bsp.c **** /*
  30:Libraries/BSP/bsp.c **** ***************************************************************************************************
  31:Libraries/BSP/bsp.c **** *                                             INCLUDE FILES
  32:Libraries/BSP/bsp.c **** ***************************************************************************************************
  33:Libraries/BSP/bsp.c **** */
  34:Libraries/BSP/bsp.c **** 
  35:Libraries/BSP/bsp.c **** #define   BSP_MODULE
  36:Libraries/BSP/bsp.c **** #include  <bsp.h>
  37:Libraries/BSP/bsp.c **** /*hardware interrupt controller reference*/
  38:Libraries/BSP/bsp.c **** #include <lpc17xx_nvic.h>
  39:Libraries/BSP/bsp.c **** 
  40:Libraries/BSP/bsp.c **** 
  41:Libraries/BSP/bsp.c **** /*
  42:Libraries/BSP/bsp.c **** ***************************************************************************************************
  43:Libraries/BSP/bsp.c **** *                                             REGISTER & BIT DEFINES
  44:Libraries/BSP/bsp.c **** ***************************************************************************************************
  45:Libraries/BSP/bsp.c **** */
  46:Libraries/BSP/bsp.c **** 
  47:Libraries/BSP/bsp.c ****                                                                 /* - SYSTEM CONTROL AND STATUS REGI
  48:Libraries/BSP/bsp.c **** #define  BSP_REG_SCS                             (*(CPU_REG32 *)(0x400FC1A0))
  49:Libraries/BSP/bsp.c **** #define  BSP_BIT_SCS_OSCRANGE                    DEF_BIT_04
  50:Libraries/BSP/bsp.c **** #define  BSP_BIT_SCS_OSCEN                       DEF_BIT_05
  51:Libraries/BSP/bsp.c **** #define  BSP_BIT_SCS_OSCSTAT                     DEF_BIT_06
  52:Libraries/BSP/bsp.c **** 
  53:Libraries/BSP/bsp.c ****                                                                 /* ------- CLOCK DIVIDERS REGISTER 
  54:Libraries/BSP/bsp.c **** #define  BSP_REG_CCLKCFG                         (*(CPU_REG32 *)(0x400FC104))
  55:Libraries/BSP/bsp.c **** #define  BSP_REG_CLKSRCSEL                       (*(CPU_REG32 *)(0x400FC10C))
  56:Libraries/BSP/bsp.c **** #define  BSP_REG_PCLKSEL0                        (*(CPU_REG32 *)(0x400FC1A8))
  57:Libraries/BSP/bsp.c **** #define  BSP_REG_PCLKSEL1                        (*(CPU_REG32 *)(0x400FC1AC))
  58:Libraries/BSP/bsp.c **** 
  59:Libraries/BSP/bsp.c ****                                                                 /* ------- CLOCK DIVIDERS REGISTER 
  60:Libraries/BSP/bsp.c **** 
  61:Libraries/BSP/bsp.c **** #define  BSP_REG_AD0CR                           (*(CPU_REG32 *)(0x40034000))
  62:Libraries/BSP/bsp.c **** #define  BSP_REG_AD0DR2                          (*(CPU_REG32 *)(0x40034018))
  63:Libraries/BSP/bsp.c **** 
  64:Libraries/BSP/bsp.c ****                                                                 /* ------------ PLL REGISTER & BIT 
  65:Libraries/BSP/bsp.c **** #define  BSP_ADDR_PLL                              (CPU_INT32U )0x400FC080u
  66:Libraries/BSP/bsp.c **** 
  67:Libraries/BSP/bsp.c **** #define  BSP_REG_PLLCTRL(pll_id)                 (*(CPU_REG32 *)(BSP_ADDR_PLL + (0x20u * (pll_id)) 
  68:Libraries/BSP/bsp.c **** #define  BSP_REG_PLLCFG(pll_id)                  (*(CPU_REG32 *)(BSP_ADDR_PLL + (0x20u * (pll_id)) 
  69:Libraries/BSP/bsp.c **** #define  BSP_REG_PLLSTAT(pll_id)                 (*(CPU_REG32 *)(BSP_ADDR_PLL + (0x20u * (pll_id)) 
  70:Libraries/BSP/bsp.c **** #define  BSP_REG_PLLFEED(pll_id)                 (*(CPU_REG32 *)(BSP_ADDR_PLL + (0x20u * (pll_id)) 
  71:Libraries/BSP/bsp.c **** 
  72:Libraries/BSP/bsp.c **** #define  BSP_MSK_PLLCFG0_MSEL                    0x00007FFFu
  73:Libraries/BSP/bsp.c **** #define  BSP_MSK_PLLCFG0_NSEL                    0x00FF0000u
  74:Libraries/BSP/bsp.c **** 
  75:Libraries/BSP/bsp.c **** #define  BSP_MSK_PLLCFG1_MSEL                    0x0000001Fu
  76:Libraries/BSP/bsp.c **** #define  BSP_MSK_PLLCFG1_NSEL                    0x00000060u
  77:Libraries/BSP/bsp.c **** 
  78:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLCTRL_PLLE                    DEF_BIT_00     /* PLL enable                      
  79:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLCTRL_PLLC                    DEF_BIT_01     /* PLL connect                     
  80:Libraries/BSP/bsp.c **** 
  81:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLLE0_STAT              DEF_BIT_24     /* Read-back for the PLL enable bit
  82:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLLC0_STAT              DEF_BIT_25     /* Read-back for the PLL connect bi
  83:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLOCK0                  DEF_BIT_26     /* Reflect the PLL lock status     
  84:Libraries/BSP/bsp.c **** 
  85:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLLE1_STAT              DEF_BIT_08     /* Read-back for the PLL enable bit
  86:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLLC1_STAT              DEF_BIT_09     /* Read-back for the PLL connect bi
  87:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLSTAT_PLOCK1                  DEF_BIT_10     /* Reflect the PLL lock status     
  88:Libraries/BSP/bsp.c **** 
  89:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLFEED_VAL0                    0x000000AAu
  90:Libraries/BSP/bsp.c **** #define  BSP_BIT_PLLFEED_VAL1                    0x00000055u
  91:Libraries/BSP/bsp.c **** 
  92:Libraries/BSP/bsp.c **** #define  BSP_BIT_CLKSRCSEL_RC                    DEF_BIT_NONE
  93:Libraries/BSP/bsp.c **** #define  BSP_BIT_CLKSRCSEL_MAIN                  DEF_BIT_00
  94:Libraries/BSP/bsp.c **** #define  BSP_BIT_CLKSRCSEL_RTC                   DEF_BIT_01
  95:Libraries/BSP/bsp.c **** 
  96:Libraries/BSP/bsp.c ****                                                                 /* --- FLASH ACCELERATOR CFG REGIST
  97:Libraries/BSP/bsp.c **** #define  BSP_REG_FLASHCFG                        (*(CPU_REG32 *)(0x400FC000u))
  98:Libraries/BSP/bsp.c **** 
  99:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_1                  DEF_BIT_MASK(0u, 12u)
 100:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_2                  DEF_BIT_MASK(1u, 12u)
 101:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_3                  DEF_BIT_MASK(2u, 12u)
 102:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_4                  DEF_BIT_MASK(3u, 12u)
 103:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_5                  DEF_BIT_MASK(4u, 12u)
 104:Libraries/BSP/bsp.c **** #define  BSP_MSK_FLASHCFG_CLK_6                  DEF_BIT_MASK(5u, 12u)
 105:Libraries/BSP/bsp.c **** 
 106:Libraries/BSP/bsp.c **** #define  BSP_BIT_FLASHCFG_FETCHCFG_ALL           DEF_BIT_MASK(2u, 0u)
 107:Libraries/BSP/bsp.c **** #define  BSP_BIT_FLASHCFG_DATACFG_ALL            DEF_BIT_MASK(2u, 2u)
 108:Libraries/BSP/bsp.c **** #define  BSP_BIT_FLASHCFG_ACCEL_EN               DEF_BIT_04
 109:Libraries/BSP/bsp.c **** #define  BSP_BIT_FLASHCFG_PREFETCH_ALL           DEF_BIT_05
 110:Libraries/BSP/bsp.c **** 
 111:Libraries/BSP/bsp.c **** 
 112:Libraries/BSP/bsp.c **** /*
 113:Libraries/BSP/bsp.c **** ***************************************************************************************************
 114:Libraries/BSP/bsp.c **** *                                             GPIO DEFINES
 115:Libraries/BSP/bsp.c **** ***************************************************************************************************
 116:Libraries/BSP/bsp.c **** */
 117:Libraries/BSP/bsp.c **** 
 118:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_LED_01                  DEF_BIT_28
 119:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_LED_02                  DEF_BIT_29
 120:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_LED_03                  DEF_BIT_31
 121:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_LED_GRP                (BSP_GPIO_PORT1_LED_01 | \
 122:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_LED_02 | \
 123:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_LED_03)
 124:Libraries/BSP/bsp.c **** 
 125:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_04                  DEF_BIT_02
 126:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_05                  DEF_BIT_03
 127:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_06                  DEF_BIT_04
 128:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_07                  DEF_BIT_05
 129:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_08                  DEF_BIT_06
 130:Libraries/BSP/bsp.c **** 
 131:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_LED_GRP                (BSP_GPIO_PORT2_LED_04 | \
 132:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT2_LED_05 | \
 133:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT2_LED_06 | \
 134:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT2_LED_07 | \
 135:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT2_LED_08)
 136:Libraries/BSP/bsp.c **** 
 137:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_UP                  DEF_BIT_24
 138:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_DOWN                DEF_BIT_26
 139:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_LEFT                DEF_BIT_23
 140:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_RIGHT               DEF_BIT_25
 141:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_CENTER              DEF_BIT_20
 142:Libraries/BSP/bsp.c **** 
 143:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT1_JOY_GRP                (BSP_GPIO_PORT1_JOY_UP     | \
 144:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_JOY_DOWN   | \
 145:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_JOY_LEFT   | \
 146:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_JOY_RIGHT  | \
 147:Libraries/BSP/bsp.c ****                                                 BSP_GPIO_PORT1_JOY_CENTER)
 148:Libraries/BSP/bsp.c **** 
 149:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT2_PB                      DEF_BIT_10
 150:Libraries/BSP/bsp.c **** 
 151:Libraries/BSP/bsp.c **** #define  BSP_GPIO_PORT4_SD_CARD_PRESENT         DEF_BIT_29
 152:Libraries/BSP/bsp.c **** 
 153:Libraries/BSP/bsp.c **** 
 154:Libraries/BSP/bsp.c **** /*
 155:Libraries/BSP/bsp.c **** ***************************************************************************************************
 156:Libraries/BSP/bsp.c **** *                                             BSP CONSTANS VALUES
 157:Libraries/BSP/bsp.c **** ***************************************************************************************************
 158:Libraries/BSP/bsp.c **** */
 159:Libraries/BSP/bsp.c ****                                                                /* Maximum register timeout         
 160:Libraries/BSP/bsp.c **** #define  BSP_VAL_MAX_TO                         (CPU_INT16U)(0xFFFF)
 161:Libraries/BSP/bsp.c ****                                                                /* Analog to Digital sample rate.   
 162:Libraries/BSP/bsp.c **** #define  BSP_VAL_ADC_POT_SAMPLE_FREQ                      500000
 163:Libraries/BSP/bsp.c **** 
 164:Libraries/BSP/bsp.c **** 
 165:Libraries/BSP/bsp.c **** /*
 166:Libraries/BSP/bsp.c **** ***************************************************************************************************
 167:Libraries/BSP/bsp.c **** *                                           LOCAL CONSTANTS
 168:Libraries/BSP/bsp.c **** ***************************************************************************************************
 169:Libraries/BSP/bsp.c **** */
 170:Libraries/BSP/bsp.c **** 
 171:Libraries/BSP/bsp.c **** 
 172:Libraries/BSP/bsp.c **** /*
 173:Libraries/BSP/bsp.c **** ***************************************************************************************************
 174:Libraries/BSP/bsp.c **** *                                          LOCAL DATA TYPES
 175:Libraries/BSP/bsp.c **** ***************************************************************************************************
 176:Libraries/BSP/bsp.c **** */
 177:Libraries/BSP/bsp.c **** 
 178:Libraries/BSP/bsp.c **** 
 179:Libraries/BSP/bsp.c **** /*
 180:Libraries/BSP/bsp.c **** ***************************************************************************************************
 181:Libraries/BSP/bsp.c **** *                                            LOCAL TABLES
 182:Libraries/BSP/bsp.c **** ***************************************************************************************************
 183:Libraries/BSP/bsp.c **** */
 184:Libraries/BSP/bsp.c **** 
 185:Libraries/BSP/bsp.c **** 
 186:Libraries/BSP/bsp.c **** /*
 187:Libraries/BSP/bsp.c **** ***************************************************************************************************
 188:Libraries/BSP/bsp.c **** *                                       LOCAL GLOBAL VARIABLES
 189:Libraries/BSP/bsp.c **** ***************************************************************************************************
 190:Libraries/BSP/bsp.c **** */
 191:Libraries/BSP/bsp.c **** 
 192:Libraries/BSP/bsp.c **** 
 193:Libraries/BSP/bsp.c **** /*
 194:Libraries/BSP/bsp.c **** ***************************************************************************************************
 195:Libraries/BSP/bsp.c **** *                                               MACRO'S
 196:Libraries/BSP/bsp.c **** ***************************************************************************************************
 197:Libraries/BSP/bsp.c **** */
 198:Libraries/BSP/bsp.c **** 
 199:Libraries/BSP/bsp.c **** #define  BSP_PLL_FEED_SEQ(pll_nbr)              {    CPU_CRITICAL_ENTER();                         
 200:Libraries/BSP/bsp.c ****                                                                                                    
 201:Libraries/BSP/bsp.c ****                                                      BSP_REG_PLLFEED((pll_nbr)) = BSP_BIT_PLLFEED_V
 202:Libraries/BSP/bsp.c ****                                                      BSP_REG_PLLFEED((pll_nbr)) = BSP_BIT_PLLFEED_V
 203:Libraries/BSP/bsp.c ****                                                                                                    
 204:Libraries/BSP/bsp.c ****                                                      CPU_CRITICAL_EXIT();                          
 205:Libraries/BSP/bsp.c ****                                                 }
 206:Libraries/BSP/bsp.c **** 
 207:Libraries/BSP/bsp.c **** /*
 208:Libraries/BSP/bsp.c **** ***************************************************************************************************
 209:Libraries/BSP/bsp.c **** *                                      LOCAL FUNCTION PROTOTYPES
 210:Libraries/BSP/bsp.c **** ***************************************************************************************************
 211:Libraries/BSP/bsp.c **** */
 212:Libraries/BSP/bsp.c **** 
 213:Libraries/BSP/bsp.c **** static  CPU_BOOLEAN  BSP_CPU_Init  (void);
 214:Libraries/BSP/bsp.c **** 
 215:Libraries/BSP/bsp.c **** 
 216:Libraries/BSP/bsp.c **** /*
 217:Libraries/BSP/bsp.c **** ***************************************************************************************************
 218:Libraries/BSP/bsp.c **** *                                     LOCAL CONFIGURATION ERRORS
 219:Libraries/BSP/bsp.c **** ***************************************************************************************************
 220:Libraries/BSP/bsp.c **** */
 221:Libraries/BSP/bsp.c **** 
 222:Libraries/BSP/bsp.c **** 
 223:Libraries/BSP/bsp.c **** /*
 224:Libraries/BSP/bsp.c **** ***************************************************************************************************
 225:Libraries/BSP/bsp.c **** ***************************************************************************************************
 226:Libraries/BSP/bsp.c **** **                                         GLOBAL FUNCTIONS
 227:Libraries/BSP/bsp.c **** ***************************************************************************************************
 228:Libraries/BSP/bsp.c **** ***************************************************************************************************
 229:Libraries/BSP/bsp.c **** */
 230:Libraries/BSP/bsp.c **** 
 231:Libraries/BSP/bsp.c **** 
 232:Libraries/BSP/bsp.c **** /*
 233:Libraries/BSP/bsp.c **** ***************************************************************************************************
 234:Libraries/BSP/bsp.c **** *                                             BSP_LowLevelInit()
 235:Libraries/BSP/bsp.c **** *
 236:Libraries/BSP/bsp.c **** * Description : System Low Level Init (PLLs, External Memories, Boot loaders, etc).
 237:Libraries/BSP/bsp.c **** *
 238:Libraries/BSP/bsp.c **** * Argument(s) : none.
 239:Libraries/BSP/bsp.c **** *
 240:Libraries/BSP/bsp.c **** * Return(s)   : none.
 241:Libraries/BSP/bsp.c **** *
 242:Libraries/BSP/bsp.c **** * Caller(s)   : Startup Code.
 243:Libraries/BSP/bsp.c **** *
 244:Libraries/BSP/bsp.c **** * Note(s)     : none.
 245:Libraries/BSP/bsp.c **** ***************************************************************************************************
 246:Libraries/BSP/bsp.c **** */
 247:Libraries/BSP/bsp.c **** 
 248:Libraries/BSP/bsp.c **** void  BSP_LowLevelInit (void)
 249:Libraries/BSP/bsp.c **** {
  26              		.loc 1 249 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 250:Libraries/BSP/bsp.c **** 
 251:Libraries/BSP/bsp.c **** }
  38              		.loc 1 251 0
  39 0004 BD46     		mov	sp, r7
  40 0006 80BC     		pop	{r7}
  41 0008 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE55:
  45 000a 00BF     		.align	2
  46              		.global	BSP_PreInit
  47              		.thumb
  48              		.thumb_func
  50              	BSP_PreInit:
  51              	.LFB56:
 252:Libraries/BSP/bsp.c **** 
 253:Libraries/BSP/bsp.c **** 
 254:Libraries/BSP/bsp.c **** /*
 255:Libraries/BSP/bsp.c **** ***************************************************************************************************
 256:Libraries/BSP/bsp.c **** *                                             BSP_PreInit()
 257:Libraries/BSP/bsp.c **** *
 258:Libraries/BSP/bsp.c **** * Description : System Pre-Initialization. Initializes all peripherals that don't require OS servic
 259:Libraries/BSP/bsp.c **** *               or modules than need to be initialized before the OS (External memory controller).
 260:Libraries/BSP/bsp.c **** *
 261:Libraries/BSP/bsp.c **** * Argument(s) : main().
 262:Libraries/BSP/bsp.c **** *
 263:Libraries/BSP/bsp.c **** * Return(s)   : none.
 264:Libraries/BSP/bsp.c **** *
 265:Libraries/BSP/bsp.c **** * Note(s)     : none.
 266:Libraries/BSP/bsp.c **** ***************************************************************************************************
 267:Libraries/BSP/bsp.c **** */
 268:Libraries/BSP/bsp.c **** 
 269:Libraries/BSP/bsp.c **** void  BSP_PreInit (void)
 270:Libraries/BSP/bsp.c **** {
  52              		.loc 1 270 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 000c 80B5     		push	{r7, lr}
  57              	.LCFI2:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 14, -4
  60              		.cfi_offset 7, -8
  61 000e 00AF     		add	r7, sp, #0
  62              	.LCFI3:
  63              		.cfi_def_cfa_register 7
 271:Libraries/BSP/bsp.c ****     BSP_CPU_Init();                                             /* Initialize CPU Clks & PLLs      
  64              		.loc 1 271 0
  65 0010 00F00EF8 		bl	BSP_CPU_Init
 272:Libraries/BSP/bsp.c **** 
 273:Libraries/BSP/bsp.c ****     CPU_IntDis();                                               /* Disable CPU interrupts.         
  66              		.loc 1 273 0
  67 0014 FFF7FEFF 		bl	CPU_IntDis
 274:Libraries/BSP/bsp.c ****     NVICInit();													/* Initialize hardware interrupt controller*/
  68              		.loc 1 274 0
  69 0018 FFF7FEFF 		bl	NVICInit
 275:Libraries/BSP/bsp.c ****     CSP_IntInit();                                              /* Initialize software interrupt co
  70              		.loc 1 275 0
  71 001c FFF7FEFF 		bl	CSP_IntInit
 276:Libraries/BSP/bsp.c **** 
 277:Libraries/BSP/bsp.c **** }
  72              		.loc 1 277 0
  73 0020 80BD     		pop	{r7, pc}
  74              		.cfi_endproc
  75              	.LFE56:
  77 0022 00BF     		.align	2
  78              		.global	BSP_PostInit
  79              		.thumb
  80              		.thumb_func
  82              	BSP_PostInit:
  83              	.LFB57:
 278:Libraries/BSP/bsp.c **** 
 279:Libraries/BSP/bsp.c **** 
 280:Libraries/BSP/bsp.c **** /*
 281:Libraries/BSP/bsp.c **** ***************************************************************************************************
 282:Libraries/BSP/bsp.c **** *                                             BSP_PostInit()
 283:Libraries/BSP/bsp.c **** *
 284:Libraries/BSP/bsp.c **** * Description : Initialize all the peripherals that required OS services (OS initialized)
 285:Libraries/BSP/bsp.c **** *
 286:Libraries/BSP/bsp.c **** * Argument(s) : none.
 287:Libraries/BSP/bsp.c **** *
 288:Libraries/BSP/bsp.c **** * Return(s)   : none.
 289:Libraries/BSP/bsp.c **** *
 290:Libraries/BSP/bsp.c **** * Caller(s)   : Application.
 291:Libraries/BSP/bsp.c **** *
 292:Libraries/BSP/bsp.c **** * Note(s)     : none.
 293:Libraries/BSP/bsp.c **** ***************************************************************************************************
 294:Libraries/BSP/bsp.c **** */
 295:Libraries/BSP/bsp.c **** 
 296:Libraries/BSP/bsp.c **** void  BSP_PostInit (void)
 297:Libraries/BSP/bsp.c **** {
  84              		.loc 1 297 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89 0024 80B4     		push	{r7}
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0026 00AF     		add	r7, sp, #0
  94              	.LCFI5:
  95              		.cfi_def_cfa_register 7
 298:Libraries/BSP/bsp.c **** 
 299:Libraries/BSP/bsp.c **** }
  96              		.loc 1 299 0
  97 0028 BD46     		mov	sp, r7
  98 002a 80BC     		pop	{r7}
  99 002c 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE57:
 103 002e 00BF     		.align	2
 104              		.thumb
 105              		.thumb_func
 107              	BSP_CPU_Init:
 108              	.LFB58:
 300:Libraries/BSP/bsp.c **** 
 301:Libraries/BSP/bsp.c **** 
 302:Libraries/BSP/bsp.c **** /*
 303:Libraries/BSP/bsp.c **** ***************************************************************************************************
 304:Libraries/BSP/bsp.c **** *                                             BSP_CPU_Init()
 305:Libraries/BSP/bsp.c **** *
 306:Libraries/BSP/bsp.c **** * Description : Initialize the CPU clks, memory map, etc.
 307:Libraries/BSP/bsp.c **** *               (1) Initialize the main oscillator.
 308:Libraries/BSP/bsp.c **** *               (2) Configure PLL0.
 309:Libraries/BSP/bsp.c **** *               (3) Configure CPU frequency.
 310:Libraries/BSP/bsp.c **** *               (3) Configure PLL1.
 311:Libraries/BSP/bsp.c **** *               (4) Configure peripherals clocks.
 312:Libraries/BSP/bsp.c **** *
 313:Libraries/BSP/bsp.c **** * Argument(s) : none.
 314:Libraries/BSP/bsp.c **** *
 315:Libraries/BSP/bsp.c **** * Return(s)   : none.
 316:Libraries/BSP/bsp.c **** *
 317:Libraries/BSP/bsp.c **** * Caller(s)   : BSP_PreInit()
 318:Libraries/BSP/bsp.c **** *
 319:Libraries/BSP/bsp.c **** * Note(s)     : (1) The PLL0 Frequency is determined by:
 320:Libraries/BSP/bsp.c **** *
 321:Libraries/BSP/bsp.c **** *                       Fcco = (2 x M x Fin) / N
 322:Libraries/BSP/bsp.c **** *
 323:Libraries/BSP/bsp.c **** *                       where M   = PLL0 Multipler
 324:Libraries/BSP/bsp.c **** *                             N   = PLL0 Pre-divider
 325:Libraries/BSP/bsp.c **** *                            Fin  = PLL0 Input Frequency (Main oscillator).
 326:Libraries/BSP/bsp.c **** *
 327:Libraries/BSP/bsp.c **** *               (2) PLL0 settings must meet the following:
 328:Libraries/BSP/bsp.c **** *                       Fin is in the range of 32Khz to 50 Mhz.
 329:Libraries/BSP/bsp.c **** *                       Fcco is in the range of 275 Mhz to 550 Mhz
 330:Libraries/BSP/bsp.c **** *
 331:Libraries/BSP/bsp.c **** *               (3) The LPC17xx CPU frequency is determined by:
 332:Libraries/BSP/bsp.c **** *
 333:Libraries/BSP/bsp.c **** *                       CPU_freq = PLL0_fcc0 / CPU_div
 334:Libraries/BSP/bsp.c **** *
 335:Libraries/BSP/bsp.c **** *                       where CPU_div is the CPU clock divider.
 336:Libraries/BSP/bsp.c **** *
 337:Libraries/BSP/bsp.c **** *               (4) The USB clock frequency is determined by:
 338:Libraries/BSP/bsp.c **** *
 339:Libraries/BSP/bsp.c **** *                       USB_Clk = M x Fosc x P, or USB_clk = Fcco / (2 x P)
 340:Libraries/BSP/bsp.c **** *
 341:Libraries/BSP/bsp.c **** *                       Fcco    =  Fosc x M x 2 x P
 342:Libraries/BSP/bsp.c **** *
 343:Libraries/BSP/bsp.c **** *                       where Fcco = PLL1 output frequency.
 344:Libraries/BSP/bsp.c **** *                             M    = PLL1 Multiplier.
 345:Libraries/BSP/bsp.c **** *                             P    = PLL1 pre-divider.
 346:Libraries/BSP/bsp.c **** *                             Fosc = Oscillator frequency.
 347:Libraries/BSP/bsp.c **** *
 348:Libraries/BSP/bsp.c **** *               (5) The PLL1 inputs and settings must meet the following criteria:
 349:Libraries/BSP/bsp.c **** *                   Fosc    is in the range of 10 Mhz to 25 Mhz.
 350:Libraries/BSP/bsp.c **** *                   USBClk  is 48 Mhz
 351:Libraries/BSP/bsp.c **** *                   Fcco    is in the range of 156 Mhz to 320 Mhz
 352:Libraries/BSP/bsp.c **** *
 353:Libraries/BSP/bsp.c **** *               (6) In this example the LPC1768 operates:
 354:Libraries/BSP/bsp.c **** *
 355:Libraries/BSP/bsp.c **** *                       CPU Frequency:
 356:Libraries/BSP/bsp.c **** *                           PLL0_Fcco = 2 x  M x Fin / 2
 357:Libraries/BSP/bsp.c **** *                                     = 2 x 25 x  12 / 2
 358:Libraries/BSP/bsp.c **** *                                     = 300 Mhz.
 359:Libraries/BSP/bsp.c **** *
 360:Libraries/BSP/bsp.c **** *                           CPU_freq  = PLL0_fcc0 / CPU_div
 361:Libraries/BSP/bsp.c **** *                           CPU_freq  = 300  / 3
 362:Libraries/BSP/bsp.c **** *                                     = 100 Mhz
 363:Libraries/BSP/bsp.c **** *
 364:Libraries/BSP/bsp.c **** *
 365:Libraries/BSP/bsp.c **** *                       USB Frequency:
 366:Libraries/BSP/bsp.c **** *                           PLL1_Fcc0 = Fosc x M x 2 x P
 367:Libraries/BSP/bsp.c **** *                                     = 12   x M x 2 x P
 368:Libraries/BSP/bsp.c **** *                                     = 192 Mhz
 369:Libraries/BSP/bsp.c **** *
 370:Libraries/BSP/bsp.c **** *                           USB_Clk   = M   x Fosc
 371:Libraries/BSP/bsp.c **** *                                     = 4   x 12
 372:Libraries/BSP/bsp.c **** *                                     = 48 Mhz
 373:Libraries/BSP/bsp.c **** ***************************************************************************************************
 374:Libraries/BSP/bsp.c **** */
 375:Libraries/BSP/bsp.c **** 
 376:Libraries/BSP/bsp.c **** static  CPU_BOOLEAN  BSP_CPU_Init (void)
 377:Libraries/BSP/bsp.c **** {
 109              		.loc 1 377 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 16
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0030 80B5     		push	{r7, lr}
 114              	.LCFI6:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 14, -4
 117              		.cfi_offset 7, -8
 118 0032 84B0     		sub	sp, sp, #16
 119              	.LCFI7:
 120              		.cfi_def_cfa_offset 24
 121 0034 00AF     		add	r7, sp, #0
 122              	.LCFI8:
 123              		.cfi_def_cfa_register 7
 378:Libraries/BSP/bsp.c ****     CPU_INT16U    reg_to;
 379:Libraries/BSP/bsp.c ****     CPU_INT32U    reg_val;
 380:Libraries/BSP/bsp.c ****     CPU_SR_ALLOC();
 124              		.loc 1 380 0
 125 0036 4FF00003 		mov	r3, #0
 126 003a BB60     		str	r3, [r7, #8]
 381:Libraries/BSP/bsp.c **** 
 382:Libraries/BSP/bsp.c **** 
 383:Libraries/BSP/bsp.c ****     BSP_REG_FLASHCFG = (CPU_INT32U)BSP_MSK_FLASHCFG_CLK_6;      /* Set 6 cycles to acces the Flash 
 127              		.loc 1 383 0
 128 003c 4FF44043 		mov	r3, #49152
 129 0040 C4F20F03 		movt	r3, 16399
 130 0044 4FF4A042 		mov	r2, #20480
 131 0048 1A60     		str	r2, [r3, #0]
 384:Libraries/BSP/bsp.c **** 
 385:Libraries/BSP/bsp.c ****                                                                 /* ----------- MAIN OSCILLATOR INIT
 386:Libraries/BSP/bsp.c ****     DEF_BIT_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCRANGE);             /* Set the main oscillator range   
 132              		.loc 1 386 0
 133 004a 4CF2A013 		movw	r3, #49568
 134 004e C4F20F03 		movt	r3, 16399
 135 0052 4CF2A012 		movw	r2, #49568
 136 0056 C4F20F02 		movt	r2, 16399
 137 005a 1268     		ldr	r2, [r2, #0]
 138 005c 22F01002 		bic	r2, r2, #16
 139 0060 1A60     		str	r2, [r3, #0]
 387:Libraries/BSP/bsp.c **** 
 388:Libraries/BSP/bsp.c **** 
 389:Libraries/BSP/bsp.c ****     reg_to = BSP_VAL_MAX_TO;
 140              		.loc 1 389 0
 141 0062 4FF6FF73 		movw	r3, #65535
 142 0066 FB81     		strh	r3, [r7, #14]	@ movhi
 390:Libraries/BSP/bsp.c **** 
 391:Libraries/BSP/bsp.c ****     DEF_BIT_SET(BSP_REG_SCS, BSP_BIT_SCS_OSCEN);                /* Enable the Main Oscillator      
 143              		.loc 1 391 0
 144 0068 4CF2A013 		movw	r3, #49568
 145 006c C4F20F03 		movt	r3, 16399
 146 0070 4CF2A012 		movw	r2, #49568
 147 0074 C4F20F02 		movt	r2, 16399
 148 0078 1268     		ldr	r2, [r2, #0]
 149 007a 42F02002 		orr	r2, r2, #32
 150 007e 1A60     		str	r2, [r3, #0]
 392:Libraries/BSP/bsp.c **** 
 393:Libraries/BSP/bsp.c ****                                                                 /* Wait until the main oscillator i
 394:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCSTAT) &&
 151              		.loc 1 394 0
 152 0080 03E0     		b	.L5
 153              	.L7:
 395:Libraries/BSP/bsp.c ****           (reg_to > 0u)) {
 396:Libraries/BSP/bsp.c ****         reg_to--;
 154              		.loc 1 396 0
 155 0082 FB89     		ldrh	r3, [r7, #14]	@ movhi
 156 0084 03F1FF33 		add	r3, r3, #-1
 157 0088 FB81     		strh	r3, [r7, #14]	@ movhi
 158              	.L5:
 394:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCSTAT) &&
 159              		.loc 1 394 0 discriminator 1
 160 008a 4CF2A013 		movw	r3, #49568
 161 008e C4F20F03 		movt	r3, 16399
 162 0092 1B68     		ldr	r3, [r3, #0]
 163 0094 03F04003 		and	r3, r3, #64
 164 0098 002B     		cmp	r3, #0
 165 009a 02D1     		bne	.L6
 394:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCSTAT) &&
 166              		.loc 1 394 0 is_stmt 0 discriminator 2
 167 009c FB89     		ldrh	r3, [r7, #14]
 168 009e 002B     		cmp	r3, #0
 169 00a0 EFD1     		bne	.L7
 170              	.L6:
 397:Libraries/BSP/bsp.c ****     }
 398:Libraries/BSP/bsp.c **** 
 399:Libraries/BSP/bsp.c ****     if (reg_to == 0u) {                                         /* Configuration fail              
 171              		.loc 1 399 0 is_stmt 1
 172 00a2 FB89     		ldrh	r3, [r7, #14]
 173 00a4 002B     		cmp	r3, #0
 174 00a6 02D1     		bne	.L8
 400:Libraries/BSP/bsp.c ****         return (DEF_FAIL);
 175              		.loc 1 400 0
 176 00a8 4FF00003 		mov	r3, #0
 177 00ac CCE1     		b	.L9
 178              	.L8:
 401:Libraries/BSP/bsp.c ****     }
 402:Libraries/BSP/bsp.c **** 
 403:Libraries/BSP/bsp.c ****     BSP_REG_PCLKSEL0 = DEF_BIT_NONE;                            /* All peripheral clock runs at CPU
 179              		.loc 1 403 0
 180 00ae 4CF2A813 		movw	r3, #49576
 181 00b2 C4F20F03 		movt	r3, 16399
 182 00b6 4FF00002 		mov	r2, #0
 183 00ba 1A60     		str	r2, [r3, #0]
 404:Libraries/BSP/bsp.c ****     BSP_REG_PCLKSEL1 = DEF_BIT_NONE;
 184              		.loc 1 404 0
 185 00bc 4CF2AC13 		movw	r3, #49580
 186 00c0 C4F20F03 		movt	r3, 16399
 187 00c4 4FF00002 		mov	r2, #0
 188 00c8 1A60     		str	r2, [r3, #0]
 405:Libraries/BSP/bsp.c **** 
 406:Libraries/BSP/bsp.c ****                                                                 /* ------------------ PLL0 CONFIGUR
 407:Libraries/BSP/bsp.c **** 
 408:Libraries/BSP/bsp.c ****     reg_val  = (((25u - 1u) <<  0u) & BSP_MSK_PLLCFG0_MSEL)     /* PLL0 values M = 25 & N = 2 (see 
 189              		.loc 1 408 0
 190 00ca 4FF01803 		mov	r3, #24
 191 00ce C0F20103 		movt	r3, 1
 192 00d2 7B60     		str	r3, [r7, #4]
 409:Libraries/BSP/bsp.c ****              | ((( 2u - 1u) << 16u) & BSP_MSK_PLLCFG0_NSEL);
 410:Libraries/BSP/bsp.c ****                                                                 /* 1. Disconnect PLL0 with one feed
 411:Libraries/BSP/bsp.c ****                                                                 /* ... already connected.          
 412:Libraries/BSP/bsp.c ****     if (DEF_BIT_IS_SET(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLLC0_STAT)) {
 193              		.loc 1 412 0
 194 00d4 4CF28803 		movw	r3, #49288
 195 00d8 C4F20F03 		movt	r3, 16399
 196 00dc 1B68     		ldr	r3, [r3, #0]
 197 00de 03F00073 		and	r3, r3, #33554432
 198 00e2 002B     		cmp	r3, #0
 199 00e4 23D0     		beq	.L10
 413:Libraries/BSP/bsp.c ****         DEF_BIT_CLR(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLC);
 200              		.loc 1 413 0
 201 00e6 4CF28003 		movw	r3, #49280
 202 00ea C4F20F03 		movt	r3, 16399
 203 00ee 4CF28002 		movw	r2, #49280
 204 00f2 C4F20F02 		movt	r2, 16399
 205 00f6 1268     		ldr	r2, [r2, #0]
 206 00f8 22F00202 		bic	r2, r2, #2
 207 00fc 1A60     		str	r2, [r3, #0]
 414:Libraries/BSP/bsp.c ****         BSP_PLL_FEED_SEQ(0u);
 208              		.loc 1 414 0
 209 00fe FFF7FEFF 		bl	CPU_SR_Save
 210 0102 B860     		str	r0, [r7, #8]
 211 0104 FFF7FEFF 		bl	CPU_IntDisMeasStart
 212 0108 4CF28C03 		movw	r3, #49292
 213 010c C4F20F03 		movt	r3, 16399
 214 0110 4FF0AA02 		mov	r2, #170
 215 0114 1A60     		str	r2, [r3, #0]
 216 0116 4CF28C03 		movw	r3, #49292
 217 011a C4F20F03 		movt	r3, 16399
 218 011e 4FF05502 		mov	r2, #85
 219 0122 1A60     		str	r2, [r3, #0]
 220 0124 FFF7FEFF 		bl	CPU_IntDisMeasStop
 221 0128 B868     		ldr	r0, [r7, #8]
 222 012a FFF7FEFF 		bl	CPU_SR_Restore
 223              	.L10:
 415:Libraries/BSP/bsp.c ****     }
 416:Libraries/BSP/bsp.c **** 
 417:Libraries/BSP/bsp.c ****     DEF_BIT_CLR(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLE);     /* 2. Disable PLL0 with one feed se
 224              		.loc 1 417 0
 225 012e 4CF28003 		movw	r3, #49280
 226 0132 C4F20F03 		movt	r3, 16399
 227 0136 4CF28002 		movw	r2, #49280
 228 013a C4F20F02 		movt	r2, 16399
 229 013e 1268     		ldr	r2, [r2, #0]
 230 0140 22F00102 		bic	r2, r2, #1
 231 0144 1A60     		str	r2, [r3, #0]
 418:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(0u);
 232              		.loc 1 418 0
 233 0146 FFF7FEFF 		bl	CPU_SR_Save
 234 014a B860     		str	r0, [r7, #8]
 235 014c FFF7FEFF 		bl	CPU_IntDisMeasStart
 236 0150 4CF28C03 		movw	r3, #49292
 237 0154 C4F20F03 		movt	r3, 16399
 238 0158 4FF0AA02 		mov	r2, #170
 239 015c 1A60     		str	r2, [r3, #0]
 240 015e 4CF28C03 		movw	r3, #49292
 241 0162 C4F20F03 		movt	r3, 16399
 242 0166 4FF05502 		mov	r2, #85
 243 016a 1A60     		str	r2, [r3, #0]
 244 016c FFF7FEFF 		bl	CPU_IntDisMeasStop
 245 0170 B868     		ldr	r0, [r7, #8]
 246 0172 FFF7FEFF 		bl	CPU_SR_Restore
 419:Libraries/BSP/bsp.c **** 
 420:Libraries/BSP/bsp.c ****     BSP_REG_CCLKCFG   = (1u - 1u);                              /* 3. Change the CPU clock divider 
 247              		.loc 1 420 0
 248 0176 4CF20413 		movw	r3, #49412
 249 017a C4F20F03 		movt	r3, 16399
 250 017e 4FF00002 		mov	r2, #0
 251 0182 1A60     		str	r2, [r3, #0]
 421:Libraries/BSP/bsp.c ****                                                                 /* ... operation without PLL0      
 422:Libraries/BSP/bsp.c **** 
 423:Libraries/BSP/bsp.c ****     BSP_REG_CLKSRCSEL = BSP_BIT_CLKSRCSEL_MAIN;                 /* 4. Select the main osc. as the P
 252              		.loc 1 423 0
 253 0184 4CF20C13 		movw	r3, #49420
 254 0188 C4F20F03 		movt	r3, 16399
 255 018c 4FF00102 		mov	r2, #1
 256 0190 1A60     		str	r2, [r3, #0]
 424:Libraries/BSP/bsp.c **** 
 425:Libraries/BSP/bsp.c ****     BSP_REG_PLLCFG(0u) = reg_val;                               /* 5. Write to the PLLCFG and make 
 257              		.loc 1 425 0
 258 0192 4CF28403 		movw	r3, #49284
 259 0196 C4F20F03 		movt	r3, 16399
 260 019a 7A68     		ldr	r2, [r7, #4]
 261 019c 1A60     		str	r2, [r3, #0]
 426:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(0u)                                        /* ... one one feed sequence       
 262              		.loc 1 426 0
 263 019e FFF7FEFF 		bl	CPU_SR_Save
 264 01a2 B860     		str	r0, [r7, #8]
 265 01a4 FFF7FEFF 		bl	CPU_IntDisMeasStart
 266 01a8 4CF28C03 		movw	r3, #49292
 267 01ac C4F20F03 		movt	r3, 16399
 268 01b0 4FF0AA02 		mov	r2, #170
 269 01b4 1A60     		str	r2, [r3, #0]
 270 01b6 4CF28C03 		movw	r3, #49292
 271 01ba C4F20F03 		movt	r3, 16399
 272 01be 4FF05502 		mov	r2, #85
 273 01c2 1A60     		str	r2, [r3, #0]
 274 01c4 FFF7FEFF 		bl	CPU_IntDisMeasStop
 275 01c8 B868     		ldr	r0, [r7, #8]
 276 01ca FFF7FEFF 		bl	CPU_SR_Restore
 427:Libraries/BSP/bsp.c **** 
 428:Libraries/BSP/bsp.c ****     DEF_BIT_SET(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLE);     /* 6. Enable PLL0 with one feed seq
 277              		.loc 1 428 0
 278 01ce 4CF28003 		movw	r3, #49280
 279 01d2 C4F20F03 		movt	r3, 16399
 280 01d6 4CF28002 		movw	r2, #49280
 281 01da C4F20F02 		movt	r2, 16399
 282 01de 1268     		ldr	r2, [r2, #0]
 283 01e0 42F00102 		orr	r2, r2, #1
 284 01e4 1A60     		str	r2, [r3, #0]
 429:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(0u);
 285              		.loc 1 429 0
 286 01e6 FFF7FEFF 		bl	CPU_SR_Save
 287 01ea B860     		str	r0, [r7, #8]
 288 01ec FFF7FEFF 		bl	CPU_IntDisMeasStart
 289 01f0 4CF28C03 		movw	r3, #49292
 290 01f4 C4F20F03 		movt	r3, 16399
 291 01f8 4FF0AA02 		mov	r2, #170
 292 01fc 1A60     		str	r2, [r3, #0]
 293 01fe 4CF28C03 		movw	r3, #49292
 294 0202 C4F20F03 		movt	r3, 16399
 295 0206 4FF05502 		mov	r2, #85
 296 020a 1A60     		str	r2, [r3, #0]
 297 020c FFF7FEFF 		bl	CPU_IntDisMeasStop
 298 0210 B868     		ldr	r0, [r7, #8]
 299 0212 FFF7FEFF 		bl	CPU_SR_Restore
 430:Libraries/BSP/bsp.c **** 
 431:Libraries/BSP/bsp.c ****     BSP_REG_CCLKCFG   = (3u - 1u);                              /* 7. Change the CPU clock divider 
 300              		.loc 1 431 0
 301 0216 4CF20413 		movw	r3, #49412
 302 021a C4F20F03 		movt	r3, 16399
 303 021e 4FF00202 		mov	r2, #2
 304 0222 1A60     		str	r2, [r3, #0]
 432:Libraries/BSP/bsp.c ****                                                                 /* ... operation with PLL0         
 433:Libraries/BSP/bsp.c **** 
 434:Libraries/BSP/bsp.c ****     reg_to = BSP_VAL_MAX_TO;                                    /* 8. Wait for PLL0 to achieve lock
 305              		.loc 1 434 0
 306 0224 4FF6FF73 		movw	r3, #65535
 307 0228 FB81     		strh	r3, [r7, #14]	@ movhi
 435:Libraries/BSP/bsp.c ****                                                                 /* ... the PLOCK0 bit in the PLL0ST
 436:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLOCK0) &&
 308              		.loc 1 436 0
 309 022a 03E0     		b	.L11
 310              	.L13:
 437:Libraries/BSP/bsp.c ****           (reg_to > 0u)) {
 438:Libraries/BSP/bsp.c ****         reg_to--;
 311              		.loc 1 438 0
 312 022c FB89     		ldrh	r3, [r7, #14]	@ movhi
 313 022e 03F1FF33 		add	r3, r3, #-1
 314 0232 FB81     		strh	r3, [r7, #14]	@ movhi
 315              	.L11:
 436:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLOCK0) &&
 316              		.loc 1 436 0 discriminator 1
 317 0234 4CF28803 		movw	r3, #49288
 318 0238 C4F20F03 		movt	r3, 16399
 319 023c 1B68     		ldr	r3, [r3, #0]
 320 023e 03F08063 		and	r3, r3, #67108864
 321 0242 002B     		cmp	r3, #0
 322 0244 02D1     		bne	.L12
 436:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLOCK0) &&
 323              		.loc 1 436 0 is_stmt 0 discriminator 2
 324 0246 FB89     		ldrh	r3, [r7, #14]
 325 0248 002B     		cmp	r3, #0
 326 024a EFD1     		bne	.L13
 327              	.L12:
 439:Libraries/BSP/bsp.c ****     }
 440:Libraries/BSP/bsp.c **** 
 441:Libraries/BSP/bsp.c ****     if (reg_to == 0u) {
 328              		.loc 1 441 0 is_stmt 1
 329 024c FB89     		ldrh	r3, [r7, #14]
 330 024e 002B     		cmp	r3, #0
 331 0250 02D1     		bne	.L14
 442:Libraries/BSP/bsp.c ****         return (DEF_FAIL);
 332              		.loc 1 442 0
 333 0252 4FF00003 		mov	r3, #0
 334 0256 F7E0     		b	.L9
 335              	.L14:
 443:Libraries/BSP/bsp.c ****     }
 444:Libraries/BSP/bsp.c **** 
 445:Libraries/BSP/bsp.c ****     DEF_BIT_SET(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLC);     /* 9. Connect PLL0 with one feed se
 336              		.loc 1 445 0
 337 0258 4CF28003 		movw	r3, #49280
 338 025c C4F20F03 		movt	r3, 16399
 339 0260 4CF28002 		movw	r2, #49280
 340 0264 C4F20F02 		movt	r2, 16399
 341 0268 1268     		ldr	r2, [r2, #0]
 342 026a 42F00202 		orr	r2, r2, #2
 343 026e 1A60     		str	r2, [r3, #0]
 446:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(0u);
 344              		.loc 1 446 0
 345 0270 FFF7FEFF 		bl	CPU_SR_Save
 346 0274 B860     		str	r0, [r7, #8]
 347 0276 FFF7FEFF 		bl	CPU_IntDisMeasStart
 348 027a 4CF28C03 		movw	r3, #49292
 349 027e C4F20F03 		movt	r3, 16399
 350 0282 4FF0AA02 		mov	r2, #170
 351 0286 1A60     		str	r2, [r3, #0]
 352 0288 4CF28C03 		movw	r3, #49292
 353 028c C4F20F03 		movt	r3, 16399
 354 0290 4FF05502 		mov	r2, #85
 355 0294 1A60     		str	r2, [r3, #0]
 356 0296 FFF7FEFF 		bl	CPU_IntDisMeasStop
 357 029a B868     		ldr	r0, [r7, #8]
 358 029c FFF7FEFF 		bl	CPU_SR_Restore
 447:Libraries/BSP/bsp.c ****                                                                 /* ------------------ PLL1 CONFIGUR
 448:Libraries/BSP/bsp.c ****     reg_val  = (((4u - 1u)  <<  0u) & BSP_MSK_PLLCFG1_MSEL)     /* PLL1 values M = 4; P = 2 coded a
 359              		.loc 1 448 0
 360 02a0 4FF02303 		mov	r3, #35
 361 02a4 7B60     		str	r3, [r7, #4]
 449:Libraries/BSP/bsp.c ****              | (((0x01u   ) <<  5u) & BSP_MSK_PLLCFG1_NSEL);
 450:Libraries/BSP/bsp.c **** 
 451:Libraries/BSP/bsp.c ****     DEF_BIT_CLR(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLC);     /* 1. Disconnect PLL1 with one feed
 362              		.loc 1 451 0
 363 02a6 4CF2A003 		movw	r3, #49312
 364 02aa C4F20F03 		movt	r3, 16399
 365 02ae 4CF2A002 		movw	r2, #49312
 366 02b2 C4F20F02 		movt	r2, 16399
 367 02b6 1268     		ldr	r2, [r2, #0]
 368 02b8 22F00202 		bic	r2, r2, #2
 369 02bc 1A60     		str	r2, [r3, #0]
 452:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(1u);
 370              		.loc 1 452 0
 371 02be FFF7FEFF 		bl	CPU_SR_Save
 372 02c2 B860     		str	r0, [r7, #8]
 373 02c4 FFF7FEFF 		bl	CPU_IntDisMeasStart
 374 02c8 4CF2AC03 		movw	r3, #49324
 375 02cc C4F20F03 		movt	r3, 16399
 376 02d0 4FF0AA02 		mov	r2, #170
 377 02d4 1A60     		str	r2, [r3, #0]
 378 02d6 4CF2AC03 		movw	r3, #49324
 379 02da C4F20F03 		movt	r3, 16399
 380 02de 4FF05502 		mov	r2, #85
 381 02e2 1A60     		str	r2, [r3, #0]
 382 02e4 FFF7FEFF 		bl	CPU_IntDisMeasStop
 383 02e8 B868     		ldr	r0, [r7, #8]
 384 02ea FFF7FEFF 		bl	CPU_SR_Restore
 453:Libraries/BSP/bsp.c **** 
 454:Libraries/BSP/bsp.c ****     DEF_BIT_CLR(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLE);     /* 2. Disable PLL1 with one feed se
 385              		.loc 1 454 0
 386 02ee 4CF2A003 		movw	r3, #49312
 387 02f2 C4F20F03 		movt	r3, 16399
 388 02f6 4CF2A002 		movw	r2, #49312
 389 02fa C4F20F02 		movt	r2, 16399
 390 02fe 1268     		ldr	r2, [r2, #0]
 391 0300 22F00102 		bic	r2, r2, #1
 392 0304 1A60     		str	r2, [r3, #0]
 455:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(1u);
 393              		.loc 1 455 0
 394 0306 FFF7FEFF 		bl	CPU_SR_Save
 395 030a B860     		str	r0, [r7, #8]
 396 030c FFF7FEFF 		bl	CPU_IntDisMeasStart
 397 0310 4CF2AC03 		movw	r3, #49324
 398 0314 C4F20F03 		movt	r3, 16399
 399 0318 4FF0AA02 		mov	r2, #170
 400 031c 1A60     		str	r2, [r3, #0]
 401 031e 4CF2AC03 		movw	r3, #49324
 402 0322 C4F20F03 		movt	r3, 16399
 403 0326 4FF05502 		mov	r2, #85
 404 032a 1A60     		str	r2, [r3, #0]
 405 032c FFF7FEFF 		bl	CPU_IntDisMeasStop
 406 0330 B868     		ldr	r0, [r7, #8]
 407 0332 FFF7FEFF 		bl	CPU_SR_Restore
 456:Libraries/BSP/bsp.c **** 
 457:Libraries/BSP/bsp.c ****     BSP_REG_PLLCFG(1u) = reg_val;                               /* 3. Write to the PLLCFG and make 
 408              		.loc 1 457 0
 409 0336 4CF2A403 		movw	r3, #49316
 410 033a C4F20F03 		movt	r3, 16399
 411 033e 7A68     		ldr	r2, [r7, #4]
 412 0340 1A60     		str	r2, [r3, #0]
 458:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(1u);                                       /* ... one one feed sequence       
 413              		.loc 1 458 0
 414 0342 FFF7FEFF 		bl	CPU_SR_Save
 415 0346 B860     		str	r0, [r7, #8]
 416 0348 FFF7FEFF 		bl	CPU_IntDisMeasStart
 417 034c 4CF2AC03 		movw	r3, #49324
 418 0350 C4F20F03 		movt	r3, 16399
 419 0354 4FF0AA02 		mov	r2, #170
 420 0358 1A60     		str	r2, [r3, #0]
 421 035a 4CF2AC03 		movw	r3, #49324
 422 035e C4F20F03 		movt	r3, 16399
 423 0362 4FF05502 		mov	r2, #85
 424 0366 1A60     		str	r2, [r3, #0]
 425 0368 FFF7FEFF 		bl	CPU_IntDisMeasStop
 426 036c B868     		ldr	r0, [r7, #8]
 427 036e FFF7FEFF 		bl	CPU_SR_Restore
 459:Libraries/BSP/bsp.c **** 
 460:Libraries/BSP/bsp.c ****     DEF_BIT_SET(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLE);     /* 4. Enable PLL1 with one feed seq
 428              		.loc 1 460 0
 429 0372 4CF2A003 		movw	r3, #49312
 430 0376 C4F20F03 		movt	r3, 16399
 431 037a 4CF2A002 		movw	r2, #49312
 432 037e C4F20F02 		movt	r2, 16399
 433 0382 1268     		ldr	r2, [r2, #0]
 434 0384 42F00102 		orr	r2, r2, #1
 435 0388 1A60     		str	r2, [r3, #0]
 461:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(1u);
 436              		.loc 1 461 0
 437 038a FFF7FEFF 		bl	CPU_SR_Save
 438 038e B860     		str	r0, [r7, #8]
 439 0390 FFF7FEFF 		bl	CPU_IntDisMeasStart
 440 0394 4CF2AC03 		movw	r3, #49324
 441 0398 C4F20F03 		movt	r3, 16399
 442 039c 4FF0AA02 		mov	r2, #170
 443 03a0 1A60     		str	r2, [r3, #0]
 444 03a2 4CF2AC03 		movw	r3, #49324
 445 03a6 C4F20F03 		movt	r3, 16399
 446 03aa 4FF05502 		mov	r2, #85
 447 03ae 1A60     		str	r2, [r3, #0]
 448 03b0 FFF7FEFF 		bl	CPU_IntDisMeasStop
 449 03b4 B868     		ldr	r0, [r7, #8]
 450 03b6 FFF7FEFF 		bl	CPU_SR_Restore
 462:Libraries/BSP/bsp.c **** 
 463:Libraries/BSP/bsp.c ****     reg_to = BSP_VAL_MAX_TO;                                    /* 5. Wait for PLL1 to achieve lock
 451              		.loc 1 463 0
 452 03ba 4FF6FF73 		movw	r3, #65535
 453 03be FB81     		strh	r3, [r7, #14]	@ movhi
 464:Libraries/BSP/bsp.c ****                                                                 /* ... the PLOCK1 bit in the PLL1ST
 465:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(1u), BSP_BIT_PLLSTAT_PLOCK1) &&
 454              		.loc 1 465 0
 455 03c0 03E0     		b	.L15
 456              	.L17:
 466:Libraries/BSP/bsp.c ****           (reg_to > 0u)) {
 467:Libraries/BSP/bsp.c ****         reg_to--;
 457              		.loc 1 467 0
 458 03c2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 459 03c4 03F1FF33 		add	r3, r3, #-1
 460 03c8 FB81     		strh	r3, [r7, #14]	@ movhi
 461              	.L15:
 465:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(1u), BSP_BIT_PLLSTAT_PLOCK1) &&
 462              		.loc 1 465 0 discriminator 1
 463 03ca 4CF2A803 		movw	r3, #49320
 464 03ce C4F20F03 		movt	r3, 16399
 465 03d2 1B68     		ldr	r3, [r3, #0]
 466 03d4 03F48063 		and	r3, r3, #1024
 467 03d8 002B     		cmp	r3, #0
 468 03da 02D1     		bne	.L16
 465:Libraries/BSP/bsp.c ****     while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(1u), BSP_BIT_PLLSTAT_PLOCK1) &&
 469              		.loc 1 465 0 is_stmt 0 discriminator 2
 470 03dc FB89     		ldrh	r3, [r7, #14]
 471 03de 002B     		cmp	r3, #0
 472 03e0 EFD1     		bne	.L17
 473              	.L16:
 468:Libraries/BSP/bsp.c ****     }
 469:Libraries/BSP/bsp.c **** 
 470:Libraries/BSP/bsp.c ****     if (reg_to == 0u) {
 474              		.loc 1 470 0 is_stmt 1
 475 03e2 FB89     		ldrh	r3, [r7, #14]
 476 03e4 002B     		cmp	r3, #0
 477 03e6 02D1     		bne	.L18
 471:Libraries/BSP/bsp.c ****         return (DEF_FAIL);
 478              		.loc 1 471 0
 479 03e8 4FF00003 		mov	r3, #0
 480 03ec 2CE0     		b	.L9
 481              	.L18:
 472:Libraries/BSP/bsp.c ****     }
 473:Libraries/BSP/bsp.c **** 
 474:Libraries/BSP/bsp.c **** 
 475:Libraries/BSP/bsp.c ****     DEF_BIT_SET(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLC);     /* 6. Connect PLL1 with one feed se
 482              		.loc 1 475 0
 483 03ee 4CF2A003 		movw	r3, #49312
 484 03f2 C4F20F03 		movt	r3, 16399
 485 03f6 4CF2A002 		movw	r2, #49312
 486 03fa C4F20F02 		movt	r2, 16399
 487 03fe 1268     		ldr	r2, [r2, #0]
 488 0400 42F00202 		orr	r2, r2, #2
 489 0404 1A60     		str	r2, [r3, #0]
 476:Libraries/BSP/bsp.c ****     BSP_PLL_FEED_SEQ(1u);
 490              		.loc 1 476 0
 491 0406 FFF7FEFF 		bl	CPU_SR_Save
 492 040a B860     		str	r0, [r7, #8]
 493 040c FFF7FEFF 		bl	CPU_IntDisMeasStart
 494 0410 4CF2AC03 		movw	r3, #49324
 495 0414 C4F20F03 		movt	r3, 16399
 496 0418 4FF0AA02 		mov	r2, #170
 497 041c 1A60     		str	r2, [r3, #0]
 498 041e 4CF2AC03 		movw	r3, #49324
 499 0422 C4F20F03 		movt	r3, 16399
 500 0426 4FF05502 		mov	r2, #85
 501 042a 1A60     		str	r2, [r3, #0]
 502 042c FFF7FEFF 		bl	CPU_IntDisMeasStop
 503 0430 B868     		ldr	r0, [r7, #8]
 504 0432 FFF7FEFF 		bl	CPU_SR_Restore
 477:Libraries/BSP/bsp.c **** 
 478:Libraries/BSP/bsp.c ****     BSP_REG_FLASHCFG = BSP_MSK_FLASHCFG_CLK_5                   /* Set 5 cycles to access the Flash
 505              		.loc 1 478 0
 506 0436 4FF44043 		mov	r3, #49152
 507 043a C4F20F03 		movt	r3, 16399
 508 043e 44F23A02 		movw	r2, #16442
 509 0442 1A60     		str	r2, [r3, #0]
 479:Libraries/BSP/bsp.c ****                      | BSP_BIT_FLASHCFG_FETCHCFG_ALL
 480:Libraries/BSP/bsp.c ****                      | BSP_BIT_FLASHCFG_DATACFG_ALL
 481:Libraries/BSP/bsp.c ****                      | BSP_BIT_FLASHCFG_ACCEL_EN
 482:Libraries/BSP/bsp.c ****                      | BSP_BIT_FLASHCFG_PREFETCH_ALL;
 483:Libraries/BSP/bsp.c **** 
 484:Libraries/BSP/bsp.c ****     return (DEF_OK);
 510              		.loc 1 484 0
 511 0444 4FF00103 		mov	r3, #1
 512              	.L9:
 485:Libraries/BSP/bsp.c **** }
 513              		.loc 1 485 0
 514 0448 1846     		mov	r0, r3
 515 044a 07F11007 		add	r7, r7, #16
 516 044e BD46     		mov	sp, r7
 517 0450 80BD     		pop	{r7, pc}
 518              		.cfi_endproc
 519              	.LFE58:
 521              	.Letext0:
 522              		.file 2 "Libraries/uC-CPU/cpu.h"
 523              		.file 3 "/home/wimma/bin/codesourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none
 524              		.file 4 "Libraries/CM3/inc/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bsp.c
     /tmp/cc1DID4J.s:18     .text:00000000 $t
     /tmp/cc1DID4J.s:23     .text:00000000 BSP_LowLevelInit
     /tmp/cc1DID4J.s:50     .text:0000000c BSP_PreInit
     /tmp/cc1DID4J.s:107    .text:00000030 BSP_CPU_Init
     /tmp/cc1DID4J.s:82     .text:00000024 BSP_PostInit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CPU_IntDis
NVICInit
CSP_IntInit
CPU_SR_Save
CPU_IntDisMeasStart
CPU_IntDisMeasStop
CPU_SR_Restore
