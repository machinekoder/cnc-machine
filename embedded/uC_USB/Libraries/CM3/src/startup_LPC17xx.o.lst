   1              	# 1 "Libraries/CM3/src/startup_LPC17xx.asm"
   1              	/*****************************************************************************/
   1              	...
   0              	
   0              	
   2              	/* startup_LPC17xx.s: Startup file for LPC17xx device series                 */
   3              	/*****************************************************************************/
   4              	/* Version: CodeSourcery Sourcery G++ Lite (with CS3)                        */
   5              	/*****************************************************************************/
   6              	
   7              	.syntax unified
   8              	
   9              	
  10              	    .equ    Stack_Size, 0x00002710			/*10 kB Stack Size */
  11              	    .section ".stack", "w"
  12              	    .align  3
  13              	    .globl  __cs3_stack_mem
  14              	    .globl  __cs3_stack_size
  15              	__cs3_stack_mem:
  16              	    .if     Stack_Size
  17 0000 00000000 	    .space  Stack_Size
  17      00000000 
  17      00000000 
  17      00000000 
  17      00000000 
  18              	    .endif
  20              	    .set    __cs3_stack_size, . - __cs3_stack_mem
  21              	
  22              	    .equ    Heap_Size,  0x00000800
  23              	
  24              	    .section ".heap", "w"
  25              	    .align  3
  26              	    .globl  __cs3_heap_start
  27              	    .globl  __cs3_heap_end
  28              	__cs3_heap_start:
  29              	    .if     Heap_Size
  30 0000 00000000 	    .space  Heap_Size
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              	    .endif
  32              	__cs3_heap_end:
  33              	
  34              		.extern  OS_CPU_PendSVHandler
  35              	    .extern  OS_CPU_SysTickHandler
  36              	
  37              	
  38              	/* Vector Table */
  39              	
  40              	    .section ".cs3.interrupt_vector"
  41              	
  42              	    .globl  __cs3_interrupt_vector_cortex_m
  44              	
  45              	__cs3_interrupt_vector_cortex_m:
  46 0000 00000000 	    .long   __cs3_stack                 /* Top of Stack                 */
  47 0004 00000000 	    .long   __cs3_reset                 /* Reset Handler                */
  48 0008 00000000 	    .long   NMI_Handler                 /* NMI Handler                  */
  49 000c 00000000 	    .long   HardFault_Handler           /* Hard Fault Handler           */
  50 0010 00000000 	    .long   MemManage_Handler           /* MPU Fault Handler            */
  51 0014 00000000 	    .long   BusFault_Handler            /* Bus Fault Handler            */
  52 0018 00000000 	    .long   UsageFault_Handler          /* Usage Fault Handler          */
  53 001c 00000000 	    .long   0		                    /* Checksum, see LPC1xxx manual */
  54 0020 00000000 	    .long   0                           /* Reserved                     */
  55 0024 00000000 	    .long   0                           /* Reserved                     */
  56 0028 00000000 	    .long   0                           /* Reserved                     */
  57 002c 00000000 	    .long   SVC_Handler                 /* SVCall Handler               */
  58 0030 00000000 	    .long   DebugMon_Handler            /* Debug Monitor Handler        */
  59 0034 00000000 	    .long   0                           /* Reserved                     */
  60 0038 00000000 	    .long   OS_CPU_PendSVHandler        /* PendSV Handler               */
  61 003c 00000000 	    .long   OS_CPU_SysTickHandler       /* SysTick Handler              */
  62              	
  63              	    /* External Interrupts kuu: no longer necessary - single irq handler from csp */
  64              	
  65              	//    .long   WDT_IRQHandler              /* 16: Watchdog Timer               */
  66              	//    .long   TIMER0_IRQHandler           /* 17: Timer0                       */
  67              	//    .long   TIMER1_IRQHandler           /* 18: Timer1                       */
  68              	//    .long   TIMER2_IRQHandler           /* 19: Timer2                       */
  69              	//    .long   TIMER3_IRQHandler           /* 20: Timer3                       */
  70              	//    .long   UART0_IRQHandler            /* 21: UART0                        */
  71              	//    .long   UART1_IRQHandler            /* 22: UART1                        */
  72              	//    .long   UART2_IRQHandler            /* 23: UART2                        */
  73              	//    .long   UART3_IRQHandler            /* 24: UART3                        */
  74              	//    .long   PWM1_IRQHandler             /* 25: PWM1                         */
  75              	//	  .long   I2C0_IRQHandler             /* 26: I2C0                         */
  76              	//    .long   I2C1_IRQHandler             /* 27: I2C1                         */
  77              	//    .long   I2C2_IRQHandler             /* 28: I2C2                         */
  78              	//    .long   SPI_IRQHandler              /* 29: SPI                          */
  79              	//    .long   SSP0_IRQHandler             /* 30: SSP0                         */
  80              	//    .long   SSP1_IRQHandler             /* 31: SSP1                         */
  81              	//    .long   PLL0_IRQHandler             /* 32: PLL0 Lock (Main PLL)         */
  82              	//    .long   RTC_IRQHandler              /* 33: Real Time Clock              */
  83              	//    .long   EINT0_IRQHandler            /* 34: External Interrupt 0         */
  84              	//    .long   EINT1_IRQHandler            /* 35: External Interrupt 1         */
  85              	//    .long   EINT2_IRQHandler            /* 36: External Interrupt 2         */
  86              	//    .long   EINT3_IRQHandler            /* 37: External Interrupt 3         */
  87              	//    .long   ADC_IRQHandler              /* 38: A/D Converter                */
  88              	//    .long   BOD_IRQHandler              /* 39: Brown-Out Detect             */
  89              	//    .long   USB_IRQHandler              /* 40: USB                          */
  90              	//    .long   CAN_IRQHandler              /* 41: CAN                          */
  91              	//    .long   DMA_IRQHandler              /* 42: General Purpose DMA          */
  92              	//    .long   I2S_IRQHandler              /* 43: I2S                          */
  93              	//    .long   ENET_IRQHandler             /* 44: Ethernet                     */
  94              	//    .long   RIT_IRQHandler              /* 45: Repetitive Interrupt Timer   */
  95              	//    .long   MCPWM_IRQHandler            /* 46: Motor Control PWM            */
  96              	//    .long   QEI_IRQHandler              /* 47: Quadrature Encoder Interface */
  97              	//    .long   PLL1_IRQHandler             /* 48: PLL1 Lock (USB PLL)          */
  98              	//    .long	USBActivity_IRQHandler		/* 49: USB Activity 				*/
  99              	//    .long 	CANActivity_IRQHandler		/* 50: CAN Activity					*/
 100              	
 102              	
 103              	
 104              	    .thumb
 105              	
 106              	
 107              	/* Reset Handler */
 108              	
 109              	    .section .cs3.reset,"x",%progbits
 110              	    .thumb_func
 111              	    .globl  __cs3_reset_cortex_m
 113              	__cs3_reset_cortex_m:
 114              	    .fnstart
 115              	
 116              	
 117              	/* Copy the data segment initializers from flash to SRAM */
 118              	.extern _etext
 119              	.extern _sdata
 120              	.extern _edata
 121              	.equ    PTR_0,  0x00000000
 122 0000 0A49     	    ldr   r1, =_etext
 123 0002 0B4A     	    ldr   r2, =_sdata
 124 0004 0B4B     	    ldr   r3, =_edata
 125 0006 9A42     	1:  cmp   r2, r3
 126 0008 3EBF     	    ittt  lo
 127 000a 51F8040B 	    ldrlo r0, [r1], #4
 128 000e 42F8040B 	    strlo r0, [r2], #4
 129 0012 F8E7     	    blo   1b
 130              	
 131              	/* Zero fill the bss segment. */
 132              	.extern _sbss
 133              	.extern _ebss
 134 0014 0020     	    movs  r0, #0
 135 0016 0849     	    ldr   r1, =_sbss
 136 0018 084A     	    ldr   r2, =_ebss
 137 001a 9142     	2:  cmp   r1, r2
 138 001c 3CBF     	    itt   lo
 139 001e 41F8040B 	    strlo r0, [r1], #4
 140 0022 FAE7     	    blo   2b
 141              	
 142              	
 143              	/* call system init in NXP's Device CMSIS code */
 144              	/*    LDR     R0, =SystemInit
 145              	    BLX     R0
 146              	*/
 147              	
 148              	/* call the application init in UAV's code */
 149              	/*    LDR     R0, =NVICInit
 150              	    BLX     R0
 151              	*/
 152              	
 153              	/* call main() */
 154 0024 0648     	    LDR     R0,=main
 155 0026 0047     	    BX      R0
 156              	
 157 0028 FEE7     	    B .
 158              	
 159 002a 00000000 	    .pool
 159      00000000 
 159      00000000 
 159      00000000 
 159      00000000 
 160              	    .cantunwind
 161              	    .fnend
 163              	
 164              	        .global CPU_WaitForInt
 165              	        .global CPU_WaitForExcept
 166              	
 167              	
 168              	/* Exception Handlers */
 169              	
 170              	    .weak   NMI_Handler
 172              	NMI_Handler:
 173 0044 FEE7     	    B       .
 175              	
 176              	    .weak   HardFault_Handler
 178              	HardFault_Handler:
 179 0046 7047     	    BX       R14
 181              	
 182              	    .weak   MemManage_Handler
 184              	MemManage_Handler:
 185 0048 FEE7     	    B       .
 187              	
 188              	    .weak   BusFault_Handler
 190              	BusFault_Handler:
 191 004a FEE7     	    B       .
 193              	
 194              	    .weak   UsageFault_Handler
 196              	UsageFault_Handler:
 197 004c FEE7     	    B       .
 199              	
 200 004e 00BF     	    .section .text
 201              	
 202              	    .weak   SVC_Handler
 204              	SVC_Handler:
 205 0000 FEE7     	    B       .
 207              	
 208              	    .weak   DebugMon_Handler
 210              	DebugMon_Handler:
 211 0002 FEE7     	    B       .
 213              	
 214              	/**************************************************************************************************
 215              	                                       HANDLE PendSV EXCEPTION
 216              	                                   void OS_CPU_PendSVHandler(void)
 217              	
 218              	 Note(s) : 1) PendSV is used to cause a context switch.  This is a recommended method for performin
 219              	              context switches with Cortex-M3.  This is because the Cortex-M3 auto-saves half of th
 220              	              processor context on any exception, and restores same on return from exception.  So o
 221              	              saving of R4-R11 is required and fixing up the stack pointers.  Using the PendSV exce
 222              	              this way means that context saving and restoring is identical whether it is initiated
 223              	              a thread or occurs due to an interrupt or exception.
 224              	
 225              	           2) Pseudo-code is:
 226              	              a) Get the process SP, if 0 then skip (goto d) the saving part (first context switch)
 227              	              b) Save remaining regs r4-r11 on process stack;
 228              	              c) Save the process SP in its TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
 229              	              d) Call OSTaskSwHook();
 230              	              e) Get current high priority, OSPrioCur = OSPrioHighRdy;
 231              	              f) Get current ready thread TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
 232              	              g) Get new process SP from TCB, SP = OSTCBHighRdyPtr->OSTCBStkPtr;
 233              	              h) Restore R4-R11 from new process stack;
 234              	              i) Perform exception return which will restore remaining context.
 235              	
 236              	           3) On entry into PendSV handler:
 237              	              a) The following have been saved on the process stack (by processor):
 238              	                 xPSR, PC, LR, R12, R0-R3
 239              	              b) Processor mode is switched to Handler mode (from Thread mode)
 240              	              c) Stack is Main stack (switched from Process stack)
 241              	              d) OSTCBCurPtr      points to the OS_TCB of the task to suspend
 242              	                 OSTCBHighRdyPtr  points to the OS_TCB of the task to resume
 243              	
 244              	           4) Since PendSV is set to lowest priority in the system (by OSStartHighRdy() above), we
 245              	              know that it will only be run when no other exception or interrupt is active, and
 246              	              therefore safe to assume that context being switched out was using the process stack 
 247              	***************************************************************************************************
 248              	    // External references
 249              	    .extern  OSPrioCur
 250              	    .extern  OSPrioHighRdy
 251              	    .extern  OSTCBCurPtr
 252              	    .extern  OSTCBHighRdyPtr
 253              	    .extern  OSTaskSwHook
 254              	    .extern  CSP_IntHandler //kuu: new
 255              	
 256              	
 257              		.globl  OS_CPU_PendSVHandler
 259              	
 260              	OS_CPU_PendSVHandler:
 261 0004 72B6     	    CPSID   I                                                   // Prevent interruption during cont
 262 0006 EFF30980 	    MRS     R0, PSP                                             // PSP is process stack pointer
 263 000a 28B1     	    CBZ     R0, OS_CPU_PendSVHandler_nosave                     // Skip register save the first tim
 264              	
 265 000c 2038     	    SUBS    R0, R0, #0x20                                       // Save remaining regs r4-11 on pro
 266 000e 80E8F00F 	    STM     R0, {R4-R11}
 267              	
 268 0012 0D49     	    LDR     R1, =OSTCBCurPtr                                    // OSTCBCurPtr->OSTCBStkPtr = SP;
 269 0014 0968     	    LDR     R1, [R1]
 270 0016 0860     	    STR     R0, [R1]                                            // R0 is SP of process being switch
 271              	
 272              	                                                                // At this point, entire context of
 273              	OS_CPU_PendSVHandler_nosave:
 274 0018 00B5     	    PUSH    {R14}                                               // Save LR exc_return value
 275 001a 0C48     	    LDR     R0, =OSTaskSwHook                                   // OSTaskSwHook();
 276 001c 8047     	    BLX     R0
 277 001e 5DF804EB 	    POP     {R14}
 278              	
 279 0022 0B48     	    LDR     R0, =OSPrioCur                                      // OSPrioCur   = OSPrioHighRdy;
 280 0024 0B49     	    LDR     R1, =OSPrioHighRdy
 281 0026 0A78     	    LDRB    R2, [R1]
 282 0028 0270     	    STRB    R2, [R0]
 283              	
 284 002a 0748     	    LDR     R0, =OSTCBCurPtr                                    // OSTCBCurPtr = OSTCBHighRdyPtr;
 285 002c 0A49     	    LDR     R1, =OSTCBHighRdyPtr
 286 002e 0A68     	    LDR     R2, [R1]
 287 0030 0260     	    STR     R2, [R0]
 288              	
 289 0032 1068     	    LDR     R0, [R2]                                            // R0 is new process SP; SP = OSTCB
 290 0034 90E8F00F 	    LDM     R0, {R4-R11}                                        // Restore r4-11 from new process s
 291 0038 2030     	    ADDS    R0, R0, #0x20
 292 003a 80F30988 	    MSR     PSP, R0                                             // Load PSP with new process SP
 293 003e 4EF0040E 	    ORR     LR, LR, #0x04                                       // Ensure exception return uses pro
 294 0042 62B6     	    CPSIE   I
 295 0044 7047     	    BX      LR                                                  // Exception return will restore re
 296              	
 298              	
 299              	
 300              	    .weak   SysTick_Handler
 302              	SysTick_Handler:
 303 0046 FEE7     	    B       .
 305              	
 306              	
 307              	
 308              	        /* IRQ Handlers */
 309              	//kuu: new
 310              	/*
 311              	    .globl  Default_Handler
 313              	Default_Handler:
 314              	    B       .
 316              	*/
 317              	/* kuu: old
 318              	    .macro  IRQ handler
 319              	    .weak   \handler
 320              	    .set    \handler, Default_Handler
 321              	    .endm
 322              	
 323              	    IRQ     WDT_IRQHandler
 324              	    IRQ     TIMER0_IRQHandler
 325              	    IRQ     TIMER1_IRQHandler
 326              	    IRQ     TIMER2_IRQHandler
 327              	    IRQ     TIMER3_IRQHandler
 328              	    IRQ     UART0_IRQHandler
 329              	    IRQ     UART1_IRQHandler
 330              	    IRQ     UART2_IRQHandler
 331              	    IRQ     UART3_IRQHandler
 332              	    IRQ     PWM1_IRQHandler
 333              	    IRQ     I2C0_IRQHandler
 334              	    IRQ     I2C1_IRQHandler
 335              	    IRQ     I2C2_IRQHandler
 336              	    IRQ     SPI_IRQHandler
 337              	    IRQ     SSP0_IRQHandler
 338              	    IRQ     SSP1_IRQHandler
 339              	    IRQ     PLL0_IRQHandler
 340              	    IRQ     RTC_IRQHandler
 341              	    IRQ     EINT0_IRQHandler
 342              	    IRQ     EINT1_IRQHandler
 343              	    IRQ     EINT2_IRQHandler
 344              	    IRQ     EINT3_IRQHandler
 345              	    IRQ     ADC_IRQHandler
 346              	    IRQ     BOD_IRQHandler
 347              	    IRQ     USB_IRQHandler
 348              	    IRQ     CAN_IRQHandler
 349              	    IRQ     DMA_IRQHandler
 350              	    IRQ     I2S_IRQHandler
 351              	    IRQ     ENET_IRQHandler
 352              	    IRQ     RIT_IRQHandler
 353              	    IRQ     MCPWM_IRQHandler
 354              	    IRQ     QEI_IRQHandler
 355              	    IRQ     PLL1_IRQHandler
 356              	    IRQ		USBActivity_IRQHandler
 357              	    IRQ		CANActivity_IRQHandler
 358              	*/
 359 0048 00000000 	    .end
 359      00000000 
 359      00000000 
 359      00000000 
 359      00000000 
DEFINED SYMBOLS
Libraries/CM3/src/startup_LPC17xx.asm:10     *ABS*:00002710 Stack_Size
Libraries/CM3/src/startup_LPC17xx.asm:12     .stack:00000000 $d
Libraries/CM3/src/startup_LPC17xx.asm:15     .stack:00000000 __cs3_stack_mem
                            *ABS*:00002710 __cs3_stack_size
Libraries/CM3/src/startup_LPC17xx.asm:22     *ABS*:00000800 Heap_Size
Libraries/CM3/src/startup_LPC17xx.asm:25     .heap:00000000 $d
Libraries/CM3/src/startup_LPC17xx.asm:28     .heap:00000000 __cs3_heap_start
Libraries/CM3/src/startup_LPC17xx.asm:32     .heap:00000800 __cs3_heap_end
Libraries/CM3/src/startup_LPC17xx.asm:45     .cs3.interrupt_vector:00000000 __cs3_interrupt_vector_cortex_m
Libraries/CM3/src/startup_LPC17xx.asm:172    .cs3.reset:00000044 NMI_Handler
Libraries/CM3/src/startup_LPC17xx.asm:178    .cs3.reset:00000046 HardFault_Handler
Libraries/CM3/src/startup_LPC17xx.asm:184    .cs3.reset:00000048 MemManage_Handler
Libraries/CM3/src/startup_LPC17xx.asm:190    .cs3.reset:0000004a BusFault_Handler
Libraries/CM3/src/startup_LPC17xx.asm:196    .cs3.reset:0000004c UsageFault_Handler
Libraries/CM3/src/startup_LPC17xx.asm:204    .text:00000000 SVC_Handler
Libraries/CM3/src/startup_LPC17xx.asm:210    .text:00000002 DebugMon_Handler
Libraries/CM3/src/startup_LPC17xx.asm:260    .text:00000004 OS_CPU_PendSVHandler
Libraries/CM3/src/startup_LPC17xx.asm:113    .cs3.reset:00000000 __cs3_reset_cortex_m
Libraries/CM3/src/startup_LPC17xx.asm:121    *ABS*:00000000 PTR_0
Libraries/CM3/src/startup_LPC17xx.asm:122    .cs3.reset:00000000 $t
Libraries/CM3/src/startup_LPC17xx.asm:159    .cs3.reset:0000002a $d
             .ARM.exidx.cs3.reset:00000000 $d
Libraries/CM3/src/startup_LPC17xx.asm:173    .cs3.reset:00000044 $t
Libraries/CM3/src/startup_LPC17xx.asm:205    .text:00000000 $t
Libraries/CM3/src/startup_LPC17xx.asm:273    .text:00000018 OS_CPU_PendSVHandler_nosave
Libraries/CM3/src/startup_LPC17xx.asm:302    .text:00000046 SysTick_Handler
Libraries/CM3/src/startup_LPC17xx.asm:359    .text:00000048 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__cs3_stack
__cs3_reset
OS_CPU_SysTickHandler
_etext
_sdata
_edata
_sbss
_ebss
main
CPU_WaitForInt
CPU_WaitForExcept
OSTCBCurPtr
OSTaskSwHook
OSPrioCur
OSPrioHighRdy
OSTCBHighRdyPtr
