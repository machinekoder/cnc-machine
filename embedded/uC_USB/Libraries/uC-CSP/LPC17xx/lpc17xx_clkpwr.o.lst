   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_clkpwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CLKPWR_SetPCLKDiv
  20              		.thumb
  21              		.thumb_func
  23              	CLKPWR_SetPCLKDiv:
  24              	.LFB55:
  25              		.file 1 "Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c"
   1:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /**********************************************************************
   2:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * $Id$		lpc17xx_clkpwr.c				2010-06-18
   3:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** *//**
   4:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * @file		lpc17xx_clkpwr.c
   5:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * @brief	Contains all functions support for Clock and Power Control
   6:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * 			firmware library on LPC17xx
   7:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * @version	3.0
   8:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * @date		18. June. 2010
   9:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * @author	NXP MCU SW Application Team
  10:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** *
  11:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * Copyright(C) 2010, NXP Semiconductor
  12:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * All rights reserved.
  13:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** *
  14:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** ***********************************************************************
  15:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * Software that is described herein is for illustrative purposes only
  16:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * which provides customers with programming information regarding the
  17:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * products. This software is supplied "AS IS" without any warranties.
  18:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * NXP Semiconductors assumes no responsibility or liability for the
  19:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * use of the software, conveys no license or title under any patent,
  20:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * copyright, or mask work right to the product. NXP Semiconductors
  21:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * reserves the right to make changes in the software without
  22:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * notification. NXP Semiconductors also make no representation or
  23:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * warranty that such application will be suitable for the specified
  24:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** * use without further testing or modification.
  25:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** **********************************************************************/
  26:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  27:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /* Peripheral group ----------------------------------------------------------- */
  28:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR
  29:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @{
  30:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  */
  31:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  32:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /* Includes ------------------------------------------------------------------- */
  33:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** #include "lpc17xx_clkpwr.h"
  34:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  35:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  36:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /* Public Functions ----------------------------------------------------------- */
  37:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR_Public_Functions
  38:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @{
  39:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  */
  40:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  41:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
  42:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Set value of each Peripheral Clock Selection
  43:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
  44:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				should be one of the following:
  45:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
  46:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
  47:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
  48:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
  49:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
  50:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
  51:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
  52:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
  53:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
  54:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
  55:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
  56:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
  57:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
  58:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
  59:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
  60:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
  61:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
  62:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
  63:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
  64:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
  65:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
  66:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
  67:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
  68:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
  69:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
  70:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
  71:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
  72:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  73:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	DivVal	Value of divider, should be:
  74:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_4 : PCLK_peripheral = CCLK/4
  75:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_1 : PCLK_peripheral = CCLK/1
  76:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
  77:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *
  78:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return none
  79:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
  80:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
  81:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
  26              		.loc 1 81 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 85B0     		sub	sp, sp, #20
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  42 0008 3960     		str	r1, [r7, #0]
  82:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	uint32_t bitpos;
  83:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  84:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
  43              		.loc 1 84 0
  44 000a 7B68     		ldr	r3, [r7, #4]
  45 000c 1F2B     		cmp	r3, #31
  46 000e 03D9     		bls	.L2
  47              		.loc 1 84 0 is_stmt 0 discriminator 1
  48 0010 7B68     		ldr	r3, [r7, #4]
  49 0012 A3F12003 		sub	r3, r3, #32
  50 0016 00E0     		b	.L3
  51              	.L2:
  52              		.loc 1 84 0 discriminator 2
  53 0018 7B68     		ldr	r3, [r7, #4]
  54              	.L3:
  55              		.loc 1 84 0 discriminator 3
  56 001a FB60     		str	r3, [r7, #12]
  85:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  86:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* PCLKSEL0 selected */
  87:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
  57              		.loc 1 87 0 is_stmt 1 discriminator 3
  58 001c 7B68     		ldr	r3, [r7, #4]
  59 001e 1F2B     		cmp	r3, #31
  60 0020 25D8     		bhi	.L4
  88:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
  89:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  90:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  61              		.loc 1 90 0
  62 0022 4FF44043 		mov	r3, #49152
  63 0026 C4F20F03 		movt	r3, 16399
  64 002a 4FF44042 		mov	r2, #49152
  65 002e C4F20F02 		movt	r2, 16399
  66 0032 D2F8A811 		ldr	r1, [r2, #424]
  67 0036 FA68     		ldr	r2, [r7, #12]
  68 0038 4FF00300 		mov	r0, #3
  69 003c 00FA02F2 		lsl	r2, r0, r2
  70 0040 6FEA0202 		mvn	r2, r2
  71 0044 0A40     		ands	r2, r2, r1
  72 0046 C3F8A821 		str	r2, [r3, #424]
  91:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
  92:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
  93:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  73              		.loc 1 93 0
  74 004a 4FF44043 		mov	r3, #49152
  75 004e C4F20F03 		movt	r3, 16399
  76 0052 4FF44042 		mov	r2, #49152
  77 0056 C4F20F02 		movt	r2, 16399
  78 005a D2F8A811 		ldr	r1, [r2, #424]
  79 005e FA68     		ldr	r2, [r7, #12]
  80 0060 3868     		ldr	r0, [r7, #0]
  81 0062 00FA02F2 		lsl	r2, r0, r2
  82 0066 0A43     		orrs	r2, r2, r1
  83 0068 C3F8A821 		str	r2, [r3, #424]
  84 006c 24E0     		b	.L1
  85              	.L4:
  94:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
  95:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* PCLKSEL1 selected */
  96:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	else
  97:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
  98:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  99:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
  86              		.loc 1 99 0
  87 006e 4FF44043 		mov	r3, #49152
  88 0072 C4F20F03 		movt	r3, 16399
  89 0076 4FF44042 		mov	r2, #49152
  90 007a C4F20F02 		movt	r2, 16399
  91 007e D2F8AC11 		ldr	r1, [r2, #428]
  92 0082 FA68     		ldr	r2, [r7, #12]
  93 0084 4FF00300 		mov	r0, #3
  94 0088 00FA02F2 		lsl	r2, r0, r2
  95 008c 6FEA0202 		mvn	r2, r2
  96 0090 0A40     		ands	r2, r2, r1
  97 0092 C3F8AC21 		str	r2, [r3, #428]
 100:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 101:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
 102:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  98              		.loc 1 102 0
  99 0096 4FF44043 		mov	r3, #49152
 100 009a C4F20F03 		movt	r3, 16399
 101 009e 4FF44042 		mov	r2, #49152
 102 00a2 C4F20F02 		movt	r2, 16399
 103 00a6 D2F8AC11 		ldr	r1, [r2, #428]
 104 00aa FA68     		ldr	r2, [r7, #12]
 105 00ac 3868     		ldr	r0, [r7, #0]
 106 00ae 00FA02F2 		lsl	r2, r0, r2
 107 00b2 0A43     		orrs	r2, r2, r1
 108 00b4 C3F8AC21 		str	r2, [r3, #428]
 109              	.L1:
 103:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 104:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 110              		.loc 1 104 0
 111 00b8 07F11407 		add	r7, r7, #20
 112 00bc BD46     		mov	sp, r7
 113 00be 80BC     		pop	{r7}
 114 00c0 7047     		bx	lr
 115              		.cfi_endproc
 116              	.LFE55:
 118 00c2 00BF     		.align	2
 119              		.global	CLKPWR_GetPCLKSEL
 120              		.thumb
 121              		.thumb_func
 123              	CLKPWR_GetPCLKSEL:
 124              	.LFB56:
 105:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 106:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 107:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 108:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief		Get current value of each Peripheral Clock Selection
 109:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 110:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 111:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 112:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 113:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 114:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 115:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 116:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 117:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 118:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 119:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 120:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 121:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 122:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 123:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 124:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 125:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 126:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 127:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 128:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 129:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 130:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 131:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 132:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 133:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 134:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 135:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 136:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 137:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 138:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 139:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock Selection
 140:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 141:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
 142:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 125              		.loc 1 142 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 16
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130 00c4 80B4     		push	{r7}
 131              	.LCFI3:
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
 134 00c6 85B0     		sub	sp, sp, #20
 135              	.LCFI4:
 136              		.cfi_def_cfa_offset 24
 137 00c8 00AF     		add	r7, sp, #0
 138              	.LCFI5:
 139              		.cfi_def_cfa_register 7
 140 00ca 7860     		str	r0, [r7, #4]
 143:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	uint32_t bitpos, retval;
 144:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 145:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
 141              		.loc 1 145 0
 142 00cc 7B68     		ldr	r3, [r7, #4]
 143 00ce 1F2B     		cmp	r3, #31
 144 00d0 09D8     		bhi	.L7
 146:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
 147:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		bitpos = ClkType;
 145              		.loc 1 147 0
 146 00d2 7B68     		ldr	r3, [r7, #4]
 147 00d4 FB60     		str	r3, [r7, #12]
 148:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL0;
 148              		.loc 1 148 0
 149 00d6 4FF44043 		mov	r3, #49152
 150 00da C4F20F03 		movt	r3, 16399
 151 00de D3F8A831 		ldr	r3, [r3, #424]
 152 00e2 BB60     		str	r3, [r7, #8]
 153 00e4 0AE0     		b	.L8
 154              	.L7:
 149:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 150:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	else
 151:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
 152:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 155              		.loc 1 152 0
 156 00e6 7B68     		ldr	r3, [r7, #4]
 157 00e8 A3F12003 		sub	r3, r3, #32
 158 00ec FB60     		str	r3, [r7, #12]
 153:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL1;
 159              		.loc 1 153 0
 160 00ee 4FF44043 		mov	r3, #49152
 161 00f2 C4F20F03 		movt	r3, 16399
 162 00f6 D3F8AC31 		ldr	r3, [r3, #428]
 163 00fa BB60     		str	r3, [r7, #8]
 164              	.L8:
 154:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 155:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 156:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
 165              		.loc 1 156 0
 166 00fc FB68     		ldr	r3, [r7, #12]
 167 00fe BA68     		ldr	r2, [r7, #8]
 168 0100 22FA03F3 		lsr	r3, r2, r3
 169 0104 03F00303 		and	r3, r3, #3
 170 0108 BB60     		str	r3, [r7, #8]
 157:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	return retval;
 171              		.loc 1 157 0
 172 010a BB68     		ldr	r3, [r7, #8]
 158:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 173              		.loc 1 158 0
 174 010c 1846     		mov	r0, r3
 175 010e 07F11407 		add	r7, r7, #20
 176 0112 BD46     		mov	sp, r7
 177 0114 80BC     		pop	{r7}
 178 0116 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE56:
 182              		.align	2
 183              		.global	CLKPWR_GetPCLK
 184              		.thumb
 185              		.thumb_func
 187              	CLKPWR_GetPCLK:
 188              	.LFB57:
 159:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 160:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 161:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 162:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 163:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Get current value of each Peripheral Clock
 164:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 165:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 166:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 167:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 168:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 169:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 170:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 171:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 172:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 173:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 174:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 175:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 176:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 177:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 178:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 179:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 180:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 181:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 182:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 183:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 184:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 185:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 186:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 187:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 188:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 189:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 190:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 191:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 192:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 193:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 194:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock
 195:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 196:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
 197:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 189              		.loc 1 197 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 16
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0118 80B5     		push	{r7, lr}
 194              	.LCFI6:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 14, -4
 197              		.cfi_offset 7, -8
 198 011a 84B0     		sub	sp, sp, #16
 199              	.LCFI7:
 200              		.cfi_def_cfa_offset 24
 201 011c 00AF     		add	r7, sp, #0
 202              	.LCFI8:
 203              		.cfi_def_cfa_register 7
 204 011e 7860     		str	r0, [r7, #4]
 198:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	uint32_t retval, div;
 199:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 200:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	retval = SystemCoreClock;
 205              		.loc 1 200 0
 206 0120 40F20003 		movw	r3, #:lower16:SystemCoreClock
 207 0124 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 208 0128 1B68     		ldr	r3, [r3, #0]
 209 012a BB60     		str	r3, [r7, #8]
 201:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	div = CLKPWR_GetPCLKSEL(ClkType);
 210              		.loc 1 201 0
 211 012c 7868     		ldr	r0, [r7, #4]
 212 012e FFF7FEFF 		bl	CLKPWR_GetPCLKSEL
 213 0132 F860     		str	r0, [r7, #12]
 202:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 203:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	switch (div)
 214              		.loc 1 203 0
 215 0134 FB68     		ldr	r3, [r7, #12]
 216 0136 032B     		cmp	r3, #3
 217 0138 1AD8     		bhi	.L10
 218 013a 01A2     		adr	r2, .L15
 219 013c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 220              		.align	2
 221              	.L15:
 222 0140 51010000 		.word	.L11+1
 223 0144 59010000 		.word	.L12+1
 224 0148 61010000 		.word	.L13+1
 225 014c 69010000 		.word	.L14+1
 226              	.L11:
 204:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
 205:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	case 0:
 206:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		div = 4;
 227              		.loc 1 206 0
 228 0150 4FF00403 		mov	r3, #4
 229 0154 FB60     		str	r3, [r7, #12]
 207:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		break;
 230              		.loc 1 207 0
 231 0156 0BE0     		b	.L10
 232              	.L12:
 208:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 209:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	case 1:
 210:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		div = 1;
 233              		.loc 1 210 0
 234 0158 4FF00103 		mov	r3, #1
 235 015c FB60     		str	r3, [r7, #12]
 211:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		break;
 236              		.loc 1 211 0
 237 015e 07E0     		b	.L10
 238              	.L13:
 212:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 213:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	case 2:
 214:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		div = 2;
 239              		.loc 1 214 0
 240 0160 4FF00203 		mov	r3, #2
 241 0164 FB60     		str	r3, [r7, #12]
 215:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		break;
 242              		.loc 1 215 0
 243 0166 03E0     		b	.L10
 244              	.L14:
 216:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 217:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	case 3:
 218:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		div = 8;
 245              		.loc 1 218 0
 246 0168 4FF00803 		mov	r3, #8
 247 016c FB60     		str	r3, [r7, #12]
 219:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		break;
 248              		.loc 1 219 0
 249 016e 00BF     		nop
 250              	.L10:
 220:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 221:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	retval /= div;
 251              		.loc 1 221 0
 252 0170 BA68     		ldr	r2, [r7, #8]
 253 0172 FB68     		ldr	r3, [r7, #12]
 254 0174 B2FBF3F3 		udiv	r3, r2, r3
 255 0178 BB60     		str	r3, [r7, #8]
 222:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 223:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	return retval;
 256              		.loc 1 223 0
 257 017a BB68     		ldr	r3, [r7, #8]
 224:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 258              		.loc 1 224 0
 259 017c 1846     		mov	r0, r3
 260 017e 07F11007 		add	r7, r7, #16
 261 0182 BD46     		mov	sp, r7
 262 0184 80BD     		pop	{r7, pc}
 263              		.cfi_endproc
 264              	.LFE57:
 266 0186 00BF     		.align	2
 267              		.global	CLKPWR_ConfigPPWR
 268              		.thumb
 269              		.thumb_func
 271              	CLKPWR_ConfigPPWR:
 272              	.LFB58:
 225:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 226:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 227:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 228:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 229:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Configure power supply for each peripheral according to NewState
 230:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	PPType	Type of peripheral used to enable power,
 231:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *     					should be one of the following:
 232:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *     			-  CLKPWR_PCONP_PCTIM0 		: Timer 0
 233:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM1 		: Timer 1
 234:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART0  	: UART 0
 235:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART1   	: UART 1
 236:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCPWM1 		: PWM 1
 237:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C0 		: I2C 0
 238:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSPI   	: SPI
 239:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRTC   	: RTC
 240:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP1 		: SSP 1
 241:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAD   		: ADC
 242:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN1   	: CAN 1
 243:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN2   	: CAN 2
 244:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPIO 		: GPIO
 245:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRIT 		: RIT
 246:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCMC 		: MC
 247:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCQEI 		: QEI
 248:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C1   	: I2C 1
 249:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP0 		: SSP 0
 250:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM2 		: Timer 2
 251:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM3 		: Timer 3
 252:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART2  	: UART 2
 253:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART3   	: UART 3
 254:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C2 		: I2C 2
 255:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2S   	: I2S
 256:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPDMA   	: GPDMA
 257:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCENET 		: Ethernet
 258:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUSB   	: USB
 259:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *
 260:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	NewState	New state of Peripheral Power, should be:
 261:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				- ENABLE	: Enable power for this peripheral
 262:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * 				- DISABLE	: Disable power for this peripheral
 263:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  *
 264:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return none
 265:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 266:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
 267:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 273              		.loc 1 267 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0188 80B4     		push	{r7}
 279              	.LCFI9:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 7, -4
 282 018a 83B0     		sub	sp, sp, #12
 283              	.LCFI10:
 284              		.cfi_def_cfa_offset 16
 285 018c 00AF     		add	r7, sp, #0
 286              	.LCFI11:
 287              		.cfi_def_cfa_register 7
 288 018e 7860     		str	r0, [r7, #4]
 289 0190 0B46     		mov	r3, r1
 290 0192 FB70     		strb	r3, [r7, #3]
 268:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	if (NewState == ENABLE)
 291              		.loc 1 268 0
 292 0194 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 293 0196 012B     		cmp	r3, #1
 294 0198 13D1     		bne	.L17
 269:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
 270:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
 295              		.loc 1 270 0
 296 019a 4FF44042 		mov	r2, #49152
 297 019e C4F20F02 		movt	r2, 16399
 298 01a2 4FF44043 		mov	r3, #49152
 299 01a6 C4F20F03 		movt	r3, 16399
 300 01aa D3F8C410 		ldr	r1, [r3, #196]
 301 01ae 7868     		ldr	r0, [r7, #4]
 302 01b0 4FF2DE73 		movw	r3, #63454
 303 01b4 CEF6EF73 		movt	r3, 61423
 304 01b8 0340     		ands	r3, r3, r0
 305 01ba 0B43     		orrs	r3, r3, r1
 306 01bc C2F8C430 		str	r3, [r2, #196]
 307 01c0 17E0     		b	.L16
 308              	.L17:
 271:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 272:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	else if (NewState == DISABLE)
 309              		.loc 1 272 0
 310 01c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 311 01c4 002B     		cmp	r3, #0
 312 01c6 14D1     		bne	.L16
 273:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	{
 274:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
 313              		.loc 1 274 0
 314 01c8 4FF44042 		mov	r2, #49152
 315 01cc C4F20F02 		movt	r2, 16399
 316 01d0 4FF44043 		mov	r3, #49152
 317 01d4 C4F20F03 		movt	r3, 16399
 318 01d8 D3F8C410 		ldr	r1, [r3, #196]
 319 01dc 7B68     		ldr	r3, [r7, #4]
 320 01de 6FEA0303 		mvn	r3, r3
 321 01e2 1940     		ands	r1, r1, r3
 322 01e4 4FF2DE73 		movw	r3, #63454
 323 01e8 CEF6EF73 		movt	r3, 61423
 324 01ec 0B40     		ands	r3, r3, r1
 325 01ee C2F8C430 		str	r3, [r2, #196]
 326              	.L16:
 275:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	}
 276:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 327              		.loc 1 276 0
 328 01f2 07F10C07 		add	r7, r7, #12
 329 01f6 BD46     		mov	sp, r7
 330 01f8 80BC     		pop	{r7}
 331 01fa 7047     		bx	lr
 332              		.cfi_endproc
 333              	.LFE58:
 335              		.align	2
 336              		.global	CLKPWR_Sleep
 337              		.thumb
 338              		.thumb_func
 340              	CLKPWR_Sleep:
 341              	.LFB59:
 277:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 278:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 279:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 280:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 281:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	None
 282:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		None
 283:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 284:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_Sleep(void)
 285:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 342              		.loc 1 285 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 01fc 80B4     		push	{r7}
 348              	.LCFI12:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 01fe 00AF     		add	r7, sp, #0
 352              	.LCFI13:
 353              		.cfi_def_cfa_register 7
 286:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x00;
 354              		.loc 1 286 0
 355 0200 4FF44043 		mov	r3, #49152
 356 0204 C4F20F03 		movt	r3, 16399
 357 0208 4FF00002 		mov	r2, #0
 358 020c C3F8C020 		str	r2, [r3, #192]
 359              	.LBB10:
 360              	.LBB11:
 361              		.file 2 "Libraries/CM3/inc/core_cmInstr.h"
   1:Libraries/CM3/inc/core_cmInstr.h **** /**************************************************************************//**
   2:Libraries/CM3/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Libraries/CM3/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Libraries/CM3/inc/core_cmInstr.h ****  * @version  V2.01
   5:Libraries/CM3/inc/core_cmInstr.h ****  * @date     06. December 2010
   6:Libraries/CM3/inc/core_cmInstr.h ****  *
   7:Libraries/CM3/inc/core_cmInstr.h ****  * @note
   8:Libraries/CM3/inc/core_cmInstr.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:Libraries/CM3/inc/core_cmInstr.h ****  *
  10:Libraries/CM3/inc/core_cmInstr.h ****  * @par
  11:Libraries/CM3/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:Libraries/CM3/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:Libraries/CM3/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:Libraries/CM3/inc/core_cmInstr.h ****  *
  15:Libraries/CM3/inc/core_cmInstr.h ****  * @par
  16:Libraries/CM3/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:Libraries/CM3/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:Libraries/CM3/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:Libraries/CM3/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:Libraries/CM3/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:Libraries/CM3/inc/core_cmInstr.h ****  *
  22:Libraries/CM3/inc/core_cmInstr.h ****  ******************************************************************************/
  23:Libraries/CM3/inc/core_cmInstr.h **** 
  24:Libraries/CM3/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H__
  25:Libraries/CM3/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H__
  26:Libraries/CM3/inc/core_cmInstr.h **** 
  27:Libraries/CM3/inc/core_cmInstr.h **** 
  28:Libraries/CM3/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:Libraries/CM3/inc/core_cmInstr.h **** /** \ingroup  CMSIS
  30:Libraries/CM3/inc/core_cmInstr.h **** 	\addtogroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  31:Libraries/CM3/inc/core_cmInstr.h ****   Access to dedicated instructions
  32:Libraries/CM3/inc/core_cmInstr.h ****   @{
  33:Libraries/CM3/inc/core_cmInstr.h **** */
  34:Libraries/CM3/inc/core_cmInstr.h **** 
  35:Libraries/CM3/inc/core_cmInstr.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  36:Libraries/CM3/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  37:Libraries/CM3/inc/core_cmInstr.h **** 
  38:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  No Operation
  39:Libraries/CM3/inc/core_cmInstr.h **** 
  40:Libraries/CM3/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  41:Libraries/CM3/inc/core_cmInstr.h ****  */
  42:Libraries/CM3/inc/core_cmInstr.h **** #define __NOP                             __nop
  43:Libraries/CM3/inc/core_cmInstr.h **** 
  44:Libraries/CM3/inc/core_cmInstr.h **** 
  45:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  46:Libraries/CM3/inc/core_cmInstr.h **** 
  47:Libraries/CM3/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  48:Libraries/CM3/inc/core_cmInstr.h ****     until one of a number of events occurs.
  49:Libraries/CM3/inc/core_cmInstr.h ****  */
  50:Libraries/CM3/inc/core_cmInstr.h **** #define __WFI                             __wfi
  51:Libraries/CM3/inc/core_cmInstr.h **** 
  52:Libraries/CM3/inc/core_cmInstr.h **** 
  53:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Wait For Event
  54:Libraries/CM3/inc/core_cmInstr.h **** 
  55:Libraries/CM3/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  56:Libraries/CM3/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  57:Libraries/CM3/inc/core_cmInstr.h ****  */
  58:Libraries/CM3/inc/core_cmInstr.h **** #define __WFE                             __wfe
  59:Libraries/CM3/inc/core_cmInstr.h **** 
  60:Libraries/CM3/inc/core_cmInstr.h **** 
  61:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Send Event
  62:Libraries/CM3/inc/core_cmInstr.h **** 
  63:Libraries/CM3/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  64:Libraries/CM3/inc/core_cmInstr.h ****  */
  65:Libraries/CM3/inc/core_cmInstr.h **** #define __SEV                             __sev
  66:Libraries/CM3/inc/core_cmInstr.h **** 
  67:Libraries/CM3/inc/core_cmInstr.h **** 
  68:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  69:Libraries/CM3/inc/core_cmInstr.h **** 
  70:Libraries/CM3/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  71:Libraries/CM3/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  72:Libraries/CM3/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  73:Libraries/CM3/inc/core_cmInstr.h ****  */
  74:Libraries/CM3/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  75:Libraries/CM3/inc/core_cmInstr.h **** 
  76:Libraries/CM3/inc/core_cmInstr.h **** 
  77:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  78:Libraries/CM3/inc/core_cmInstr.h **** 
  79:Libraries/CM3/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  80:Libraries/CM3/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  81:Libraries/CM3/inc/core_cmInstr.h ****  */
  82:Libraries/CM3/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  83:Libraries/CM3/inc/core_cmInstr.h **** 
  84:Libraries/CM3/inc/core_cmInstr.h **** 
  85:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  86:Libraries/CM3/inc/core_cmInstr.h **** 
  87:Libraries/CM3/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  88:Libraries/CM3/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  89:Libraries/CM3/inc/core_cmInstr.h ****  */
  90:Libraries/CM3/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  91:Libraries/CM3/inc/core_cmInstr.h **** 
  92:Libraries/CM3/inc/core_cmInstr.h **** 
  93:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  94:Libraries/CM3/inc/core_cmInstr.h **** 
  95:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
  96:Libraries/CM3/inc/core_cmInstr.h **** 
  97:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
  98:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
  99:Libraries/CM3/inc/core_cmInstr.h ****  */
 100:Libraries/CM3/inc/core_cmInstr.h **** #define __REV                             __rev
 101:Libraries/CM3/inc/core_cmInstr.h **** 
 102:Libraries/CM3/inc/core_cmInstr.h **** 
 103:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 104:Libraries/CM3/inc/core_cmInstr.h **** 
 105:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 106:Libraries/CM3/inc/core_cmInstr.h **** 
 107:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 108:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
 109:Libraries/CM3/inc/core_cmInstr.h ****  */
 110:Libraries/CM3/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 111:Libraries/CM3/inc/core_cmInstr.h **** extern uint32_t __REV16(uint32_t value);
 112:Libraries/CM3/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 113:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 114:Libraries/CM3/inc/core_cmInstr.h **** {
 115:Libraries/CM3/inc/core_cmInstr.h ****   rev16 r0, r0
 116:Libraries/CM3/inc/core_cmInstr.h ****   bx lr
 117:Libraries/CM3/inc/core_cmInstr.h **** }
 118:Libraries/CM3/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 119:Libraries/CM3/inc/core_cmInstr.h **** 
 120:Libraries/CM3/inc/core_cmInstr.h **** 
 121:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:Libraries/CM3/inc/core_cmInstr.h **** 
 123:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:Libraries/CM3/inc/core_cmInstr.h **** 
 125:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
 127:Libraries/CM3/inc/core_cmInstr.h ****  */
 128:Libraries/CM3/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 129:Libraries/CM3/inc/core_cmInstr.h **** extern int32_t __REVSH(int32_t value);
 130:Libraries/CM3/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 131:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 132:Libraries/CM3/inc/core_cmInstr.h **** {
 133:Libraries/CM3/inc/core_cmInstr.h ****   revsh r0, r0
 134:Libraries/CM3/inc/core_cmInstr.h ****   bx lr
 135:Libraries/CM3/inc/core_cmInstr.h **** }
 136:Libraries/CM3/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 137:Libraries/CM3/inc/core_cmInstr.h **** 
 138:Libraries/CM3/inc/core_cmInstr.h **** 
 139:Libraries/CM3/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 140:Libraries/CM3/inc/core_cmInstr.h **** 
 141:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 142:Libraries/CM3/inc/core_cmInstr.h **** 
 143:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 144:Libraries/CM3/inc/core_cmInstr.h **** 
 145:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 146:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
 147:Libraries/CM3/inc/core_cmInstr.h ****  */
 148:Libraries/CM3/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 149:Libraries/CM3/inc/core_cmInstr.h **** 
 150:Libraries/CM3/inc/core_cmInstr.h **** 
 151:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 152:Libraries/CM3/inc/core_cmInstr.h **** 
 153:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 154:Libraries/CM3/inc/core_cmInstr.h **** 
 155:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 156:Libraries/CM3/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 157:Libraries/CM3/inc/core_cmInstr.h ****  */
 158:Libraries/CM3/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 159:Libraries/CM3/inc/core_cmInstr.h **** 
 160:Libraries/CM3/inc/core_cmInstr.h **** 
 161:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 162:Libraries/CM3/inc/core_cmInstr.h **** 
 163:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 164:Libraries/CM3/inc/core_cmInstr.h **** 
 165:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 166:Libraries/CM3/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 167:Libraries/CM3/inc/core_cmInstr.h ****  */
 168:Libraries/CM3/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 169:Libraries/CM3/inc/core_cmInstr.h **** 
 170:Libraries/CM3/inc/core_cmInstr.h **** 
 171:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 172:Libraries/CM3/inc/core_cmInstr.h **** 
 173:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 174:Libraries/CM3/inc/core_cmInstr.h **** 
 175:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 176:Libraries/CM3/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 177:Libraries/CM3/inc/core_cmInstr.h ****  */
 178:Libraries/CM3/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 179:Libraries/CM3/inc/core_cmInstr.h **** 
 180:Libraries/CM3/inc/core_cmInstr.h **** 
 181:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 182:Libraries/CM3/inc/core_cmInstr.h **** 
 183:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 184:Libraries/CM3/inc/core_cmInstr.h **** 
 185:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 186:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 187:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 188:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 189:Libraries/CM3/inc/core_cmInstr.h ****  */
 190:Libraries/CM3/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 191:Libraries/CM3/inc/core_cmInstr.h **** 
 192:Libraries/CM3/inc/core_cmInstr.h **** 
 193:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 194:Libraries/CM3/inc/core_cmInstr.h **** 
 195:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 196:Libraries/CM3/inc/core_cmInstr.h **** 
 197:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 198:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 199:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 200:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 201:Libraries/CM3/inc/core_cmInstr.h ****  */
 202:Libraries/CM3/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 203:Libraries/CM3/inc/core_cmInstr.h **** 
 204:Libraries/CM3/inc/core_cmInstr.h **** 
 205:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 206:Libraries/CM3/inc/core_cmInstr.h **** 
 207:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 208:Libraries/CM3/inc/core_cmInstr.h **** 
 209:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 210:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 211:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 212:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 213:Libraries/CM3/inc/core_cmInstr.h ****  */
 214:Libraries/CM3/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 215:Libraries/CM3/inc/core_cmInstr.h **** 
 216:Libraries/CM3/inc/core_cmInstr.h **** 
 217:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 218:Libraries/CM3/inc/core_cmInstr.h **** 
 219:Libraries/CM3/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 220:Libraries/CM3/inc/core_cmInstr.h **** 
 221:Libraries/CM3/inc/core_cmInstr.h ****  */
 222:Libraries/CM3/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400000)
 223:Libraries/CM3/inc/core_cmInstr.h **** extern void __CLREX(void);
 224:Libraries/CM3/inc/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 225:Libraries/CM3/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 226:Libraries/CM3/inc/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 227:Libraries/CM3/inc/core_cmInstr.h **** 
 228:Libraries/CM3/inc/core_cmInstr.h **** 
 229:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 230:Libraries/CM3/inc/core_cmInstr.h **** 
 231:Libraries/CM3/inc/core_cmInstr.h ****     This function saturates a signed value.
 232:Libraries/CM3/inc/core_cmInstr.h **** 
 233:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 234:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 235:Libraries/CM3/inc/core_cmInstr.h ****     \return             Saturated value
 236:Libraries/CM3/inc/core_cmInstr.h ****  */
 237:Libraries/CM3/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 238:Libraries/CM3/inc/core_cmInstr.h **** 
 239:Libraries/CM3/inc/core_cmInstr.h **** 
 240:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 241:Libraries/CM3/inc/core_cmInstr.h **** 
 242:Libraries/CM3/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 243:Libraries/CM3/inc/core_cmInstr.h **** 
 244:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 245:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 246:Libraries/CM3/inc/core_cmInstr.h ****     \return             Saturated value
 247:Libraries/CM3/inc/core_cmInstr.h ****  */
 248:Libraries/CM3/inc/core_cmInstr.h **** #define __USAT                            __usat
 249:Libraries/CM3/inc/core_cmInstr.h **** 
 250:Libraries/CM3/inc/core_cmInstr.h **** 
 251:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 252:Libraries/CM3/inc/core_cmInstr.h **** 
 253:Libraries/CM3/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 254:Libraries/CM3/inc/core_cmInstr.h **** 
 255:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 256:Libraries/CM3/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 257:Libraries/CM3/inc/core_cmInstr.h ****  */
 258:Libraries/CM3/inc/core_cmInstr.h **** #define __CLZ                             __clz
 259:Libraries/CM3/inc/core_cmInstr.h **** 
 260:Libraries/CM3/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 261:Libraries/CM3/inc/core_cmInstr.h **** 
 262:Libraries/CM3/inc/core_cmInstr.h **** 
 263:Libraries/CM3/inc/core_cmInstr.h **** 
 264:Libraries/CM3/inc/core_cmInstr.h **** #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 265:Libraries/CM3/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 266:Libraries/CM3/inc/core_cmInstr.h **** 
 267:Libraries/CM3/inc/core_cmInstr.h **** #include <intrinsics.h>                     /* IAR Intrinsics   */
 268:Libraries/CM3/inc/core_cmInstr.h **** 
 269:Libraries/CM3/inc/core_cmInstr.h **** #pragma diag_suppress=Pe940
 270:Libraries/CM3/inc/core_cmInstr.h **** 
 271:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  No Operation
 272:Libraries/CM3/inc/core_cmInstr.h **** 
 273:Libraries/CM3/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 274:Libraries/CM3/inc/core_cmInstr.h ****  */
 275:Libraries/CM3/inc/core_cmInstr.h **** #define __NOP                           __no_operation
 276:Libraries/CM3/inc/core_cmInstr.h **** 
 277:Libraries/CM3/inc/core_cmInstr.h **** 
 278:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 279:Libraries/CM3/inc/core_cmInstr.h **** 
 280:Libraries/CM3/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 281:Libraries/CM3/inc/core_cmInstr.h ****     until one of a number of events occurs.
 282:Libraries/CM3/inc/core_cmInstr.h ****  */
 283:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE  void __WFI(void)
 284:Libraries/CM3/inc/core_cmInstr.h **** {
 285:Libraries/CM3/inc/core_cmInstr.h ****   __ASM ("wfi");
 286:Libraries/CM3/inc/core_cmInstr.h **** }
 287:Libraries/CM3/inc/core_cmInstr.h **** 
 288:Libraries/CM3/inc/core_cmInstr.h **** 
 289:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Wait For Event
 290:Libraries/CM3/inc/core_cmInstr.h **** 
 291:Libraries/CM3/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 292:Libraries/CM3/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 293:Libraries/CM3/inc/core_cmInstr.h ****  */
 294:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE  void __WFE(void)
 295:Libraries/CM3/inc/core_cmInstr.h **** {
 296:Libraries/CM3/inc/core_cmInstr.h ****   __ASM ("wfe");
 297:Libraries/CM3/inc/core_cmInstr.h **** }
 298:Libraries/CM3/inc/core_cmInstr.h **** 
 299:Libraries/CM3/inc/core_cmInstr.h **** 
 300:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Send Event
 301:Libraries/CM3/inc/core_cmInstr.h **** 
 302:Libraries/CM3/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 303:Libraries/CM3/inc/core_cmInstr.h ****  */
 304:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE  void __SEV(void)
 305:Libraries/CM3/inc/core_cmInstr.h **** {
 306:Libraries/CM3/inc/core_cmInstr.h ****   __ASM ("sev");
 307:Libraries/CM3/inc/core_cmInstr.h **** }
 308:Libraries/CM3/inc/core_cmInstr.h **** 
 309:Libraries/CM3/inc/core_cmInstr.h **** 
 310:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic     void __ISB(void)            (see intrinsics.h) */
 311:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic     void __DSB(void)            (see intrinsics.h) */
 312:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic     void __DMB(void)            (see intrinsics.h) */
 313:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
 314:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic          __SSAT                 (see intrinsics.h) */
 315:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic          __USAT                 (see intrinsics.h) */
 316:Libraries/CM3/inc/core_cmInstr.h **** 
 317:Libraries/CM3/inc/core_cmInstr.h **** 
 318:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 319:Libraries/CM3/inc/core_cmInstr.h **** 
 320:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 321:Libraries/CM3/inc/core_cmInstr.h **** 
 322:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 323:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
 324:Libraries/CM3/inc/core_cmInstr.h ****  */
 325:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __REV16(uint32_t value)
 326:Libraries/CM3/inc/core_cmInstr.h **** {
 327:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("rev16 r0, r0");
 328:Libraries/CM3/inc/core_cmInstr.h **** }
 329:Libraries/CM3/inc/core_cmInstr.h **** 
 330:Libraries/CM3/inc/core_cmInstr.h **** 
 331:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
 332:Libraries/CM3/inc/core_cmInstr.h **** 
 333:Libraries/CM3/inc/core_cmInstr.h **** 
 334:Libraries/CM3/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 335:Libraries/CM3/inc/core_cmInstr.h **** 
 336:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 337:Libraries/CM3/inc/core_cmInstr.h **** 
 338:Libraries/CM3/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 339:Libraries/CM3/inc/core_cmInstr.h **** 
 340:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 341:Libraries/CM3/inc/core_cmInstr.h ****     \return               Reversed value
 342:Libraries/CM3/inc/core_cmInstr.h ****  */
 343:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __RBIT(uint32_t value)
 344:Libraries/CM3/inc/core_cmInstr.h **** {
 345:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("rbit r0, r0");
 346:Libraries/CM3/inc/core_cmInstr.h **** }
 347:Libraries/CM3/inc/core_cmInstr.h **** 
 348:Libraries/CM3/inc/core_cmInstr.h **** 
 349:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 350:Libraries/CM3/inc/core_cmInstr.h **** 
 351:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 352:Libraries/CM3/inc/core_cmInstr.h **** 
 353:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 354:Libraries/CM3/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 355:Libraries/CM3/inc/core_cmInstr.h ****  */
 356:Libraries/CM3/inc/core_cmInstr.h **** static uint8_t __LDREXB(volatile uint8_t *addr)
 357:Libraries/CM3/inc/core_cmInstr.h **** {
 358:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("ldrexb r0, [r0]");
 359:Libraries/CM3/inc/core_cmInstr.h **** }
 360:Libraries/CM3/inc/core_cmInstr.h **** 
 361:Libraries/CM3/inc/core_cmInstr.h **** 
 362:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 363:Libraries/CM3/inc/core_cmInstr.h **** 
 364:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 365:Libraries/CM3/inc/core_cmInstr.h **** 
 366:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 367:Libraries/CM3/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 368:Libraries/CM3/inc/core_cmInstr.h ****  */
 369:Libraries/CM3/inc/core_cmInstr.h **** static uint16_t __LDREXH(volatile uint16_t *addr)
 370:Libraries/CM3/inc/core_cmInstr.h **** {
 371:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("ldrexh r0, [r0]");
 372:Libraries/CM3/inc/core_cmInstr.h **** }
 373:Libraries/CM3/inc/core_cmInstr.h **** 
 374:Libraries/CM3/inc/core_cmInstr.h **** 
 375:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 376:Libraries/CM3/inc/core_cmInstr.h **** 
 377:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 378:Libraries/CM3/inc/core_cmInstr.h **** 
 379:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 380:Libraries/CM3/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 381:Libraries/CM3/inc/core_cmInstr.h ****  */
 382:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
 383:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __LDREXW(volatile uint32_t *addr)
 384:Libraries/CM3/inc/core_cmInstr.h **** {
 385:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("ldrex r0, [r0]");
 386:Libraries/CM3/inc/core_cmInstr.h **** }
 387:Libraries/CM3/inc/core_cmInstr.h **** 
 388:Libraries/CM3/inc/core_cmInstr.h **** 
 389:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 390:Libraries/CM3/inc/core_cmInstr.h **** 
 391:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 392:Libraries/CM3/inc/core_cmInstr.h **** 
 393:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 394:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 395:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 396:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 397:Libraries/CM3/inc/core_cmInstr.h ****  */
 398:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 399:Libraries/CM3/inc/core_cmInstr.h **** {
 400:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("strexb r0, r0, [r1]");
 401:Libraries/CM3/inc/core_cmInstr.h **** }
 402:Libraries/CM3/inc/core_cmInstr.h **** 
 403:Libraries/CM3/inc/core_cmInstr.h **** 
 404:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 405:Libraries/CM3/inc/core_cmInstr.h **** 
 406:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 407:Libraries/CM3/inc/core_cmInstr.h **** 
 408:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 409:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 410:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 411:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 412:Libraries/CM3/inc/core_cmInstr.h ****  */
 413:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 414:Libraries/CM3/inc/core_cmInstr.h **** {
 415:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("strexh r0, r0, [r1]");
 416:Libraries/CM3/inc/core_cmInstr.h **** }
 417:Libraries/CM3/inc/core_cmInstr.h **** 
 418:Libraries/CM3/inc/core_cmInstr.h **** 
 419:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 420:Libraries/CM3/inc/core_cmInstr.h **** 
 421:Libraries/CM3/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 422:Libraries/CM3/inc/core_cmInstr.h **** 
 423:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 424:Libraries/CM3/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 425:Libraries/CM3/inc/core_cmInstr.h ****     \return          0  Function succeeded
 426:Libraries/CM3/inc/core_cmInstr.h ****     \return          1  Function failed
 427:Libraries/CM3/inc/core_cmInstr.h ****  */
 428:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
 429:Libraries/CM3/inc/core_cmInstr.h **** static uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 430:Libraries/CM3/inc/core_cmInstr.h **** {
 431:Libraries/CM3/inc/core_cmInstr.h ****   __ASM("strex r0, r0, [r1]");
 432:Libraries/CM3/inc/core_cmInstr.h **** }
 433:Libraries/CM3/inc/core_cmInstr.h **** 
 434:Libraries/CM3/inc/core_cmInstr.h **** 
 435:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 436:Libraries/CM3/inc/core_cmInstr.h **** 
 437:Libraries/CM3/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 438:Libraries/CM3/inc/core_cmInstr.h **** 
 439:Libraries/CM3/inc/core_cmInstr.h ****  */
 440:Libraries/CM3/inc/core_cmInstr.h **** static __INLINE void __CLREX(void)
 441:Libraries/CM3/inc/core_cmInstr.h **** {
 442:Libraries/CM3/inc/core_cmInstr.h ****   __ASM ("clrex");
 443:Libraries/CM3/inc/core_cmInstr.h **** }
 444:Libraries/CM3/inc/core_cmInstr.h **** 
 445:Libraries/CM3/inc/core_cmInstr.h **** /* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
 446:Libraries/CM3/inc/core_cmInstr.h **** 
 447:Libraries/CM3/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 448:Libraries/CM3/inc/core_cmInstr.h **** 
 449:Libraries/CM3/inc/core_cmInstr.h **** #pragma diag_default=Pe940
 450:Libraries/CM3/inc/core_cmInstr.h **** 
 451:Libraries/CM3/inc/core_cmInstr.h **** 
 452:Libraries/CM3/inc/core_cmInstr.h **** 
 453:Libraries/CM3/inc/core_cmInstr.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 454:Libraries/CM3/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 455:Libraries/CM3/inc/core_cmInstr.h **** 
 456:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  No Operation
 457:Libraries/CM3/inc/core_cmInstr.h **** 
 458:Libraries/CM3/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 459:Libraries/CM3/inc/core_cmInstr.h ****  */
 460:Libraries/CM3/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 461:Libraries/CM3/inc/core_cmInstr.h **** {
 462:Libraries/CM3/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 463:Libraries/CM3/inc/core_cmInstr.h **** }
 464:Libraries/CM3/inc/core_cmInstr.h **** 
 465:Libraries/CM3/inc/core_cmInstr.h **** 
 466:Libraries/CM3/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 467:Libraries/CM3/inc/core_cmInstr.h **** 
 468:Libraries/CM3/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 469:Libraries/CM3/inc/core_cmInstr.h ****     until one of a number of events occurs.
 470:Libraries/CM3/inc/core_cmInstr.h ****  */
 471:Libraries/CM3/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 472:Libraries/CM3/inc/core_cmInstr.h **** {
 473:Libraries/CM3/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 362              		.loc 2 473 0
 363              	@ 473 "Libraries/CM3/inc/core_cmInstr.h" 1
 364 0210 30BF     		wfi
 365              	@ 0 "" 2
 366              		.thumb
 367              	.LBE11:
 368              	.LBE10:
 287:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* Sleep Mode*/
 288:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	__WFI();
 289:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 369              		.loc 1 289 0
 370 0212 BD46     		mov	sp, r7
 371 0214 80BC     		pop	{r7}
 372 0216 7047     		bx	lr
 373              		.cfi_endproc
 374              	.LFE59:
 376              		.align	2
 377              		.global	CLKPWR_DeepSleep
 378              		.thumb
 379              		.thumb_func
 381              	CLKPWR_DeepSleep:
 382              	.LFB60:
 290:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 291:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 292:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 293:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 294:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	None
 295:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		None
 296:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 297:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_DeepSleep(void)
 298:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 383              		.loc 1 298 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388 0218 80B4     		push	{r7}
 389              	.LCFI14:
 390              		.cfi_def_cfa_offset 4
 391              		.cfi_offset 7, -4
 392 021a 00AF     		add	r7, sp, #0
 393              	.LCFI15:
 394              		.cfi_def_cfa_register 7
 299:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 300:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 395              		.loc 1 300 0
 396 021c 4FF46D43 		mov	r3, #60672
 397 0220 CEF20003 		movt	r3, 57344
 398 0224 4FF00402 		mov	r2, #4
 399 0228 1A61     		str	r2, [r3, #16]
 301:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x8;
 400              		.loc 1 301 0
 401 022a 4FF44043 		mov	r3, #49152
 402 022e C4F20F03 		movt	r3, 16399
 403 0232 4FF00802 		mov	r2, #8
 404 0236 C3F8C020 		str	r2, [r3, #192]
 405              	.LBB12:
 406              	.LBB13:
 407              		.loc 2 473 0
 408              	@ 473 "Libraries/CM3/inc/core_cmInstr.h" 1
 409 023a 30BF     		wfi
 410              	@ 0 "" 2
 411              		.thumb
 412              	.LBE13:
 413              	.LBE12:
 302:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* Deep Sleep Mode*/
 303:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	__WFI();
 304:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 414              		.loc 1 304 0
 415 023c BD46     		mov	sp, r7
 416 023e 80BC     		pop	{r7}
 417 0240 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE60:
 421 0242 00BF     		.align	2
 422              		.global	CLKPWR_PowerDown
 423              		.thumb
 424              		.thumb_func
 426              	CLKPWR_PowerDown:
 427              	.LFB61:
 305:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 306:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 307:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 308:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 309:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	None
 310:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		None
 311:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 312:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_PowerDown(void)
 313:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 428              		.loc 1 313 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433 0244 80B4     		push	{r7}
 434              	.LCFI16:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0246 00AF     		add	r7, sp, #0
 438              	.LCFI17:
 439              		.cfi_def_cfa_register 7
 314:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 315:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 440              		.loc 1 315 0
 441 0248 4FF46D43 		mov	r3, #60672
 442 024c CEF20003 		movt	r3, 57344
 443 0250 4FF00402 		mov	r2, #4
 444 0254 1A61     		str	r2, [r3, #16]
 316:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x09;
 445              		.loc 1 316 0
 446 0256 4FF44043 		mov	r3, #49152
 447 025a C4F20F03 		movt	r3, 16399
 448 025e 4FF00902 		mov	r2, #9
 449 0262 C3F8C020 		str	r2, [r3, #192]
 450              	.LBB14:
 451              	.LBB15:
 452              		.loc 2 473 0
 453              	@ 473 "Libraries/CM3/inc/core_cmInstr.h" 1
 454 0266 30BF     		wfi
 455              	@ 0 "" 2
 456              		.thumb
 457              	.LBE15:
 458              	.LBE14:
 317:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* Power Down Mode*/
 318:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	__WFI();
 319:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 459              		.loc 1 319 0
 460 0268 BD46     		mov	sp, r7
 461 026a 80BC     		pop	{r7}
 462 026c 7047     		bx	lr
 463              		.cfi_endproc
 464              	.LFE61:
 466 026e 00BF     		.align	2
 467              		.global	CLKPWR_DeepPowerDown
 468              		.thumb
 469              		.thumb_func
 471              	CLKPWR_DeepPowerDown:
 472              	.LFB62:
 320:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 321:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 
 322:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** /*********************************************************************//**
 323:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 324:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @param[in]	None
 325:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  * @return		None
 326:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****  **********************************************************************/
 327:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** void CLKPWR_DeepPowerDown(void)
 328:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** {
 473              		.loc 1 328 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0270 80B4     		push	{r7}
 479              	.LCFI18:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 0272 00AF     		add	r7, sp, #0
 483              	.LCFI19:
 484              		.cfi_def_cfa_register 7
 329:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 330:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 485              		.loc 1 330 0
 486 0274 4FF46D43 		mov	r3, #60672
 487 0278 CEF20003 		movt	r3, 57344
 488 027c 4FF00402 		mov	r2, #4
 489 0280 1A61     		str	r2, [r3, #16]
 331:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x03;
 490              		.loc 1 331 0
 491 0282 4FF44043 		mov	r3, #49152
 492 0286 C4F20F03 		movt	r3, 16399
 493 028a 4FF00302 		mov	r2, #3
 494 028e C3F8C020 		str	r2, [r3, #192]
 495              	.LBB16:
 496              	.LBB17:
 497              		.loc 2 473 0
 498              	@ 473 "Libraries/CM3/inc/core_cmInstr.h" 1
 499 0292 30BF     		wfi
 500              	@ 0 "" 2
 501              		.thumb
 502              	.LBE17:
 503              	.LBE16:
 332:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	/* Deep Power Down Mode*/
 333:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** 	__WFI();
 334:Libraries/uC-CSP/LPC17xx/lpc17xx_clkpwr.c **** }
 504              		.loc 1 334 0
 505 0294 BD46     		mov	sp, r7
 506 0296 80BC     		pop	{r7}
 507 0298 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE62:
 511              	.Letext0:
 512              		.file 3 "/home/wimma/bin/codesourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none
 513              		.file 4 "Libraries/CM3/inc/core_cm3.h"
 514              		.file 5 "Libraries/CM3/inc/LPC17xx.h"
 515              		.file 6 "Libraries/CM3/inc/lpc_types.h"
 516              		.file 7 "Libraries/CM3/inc/system_LPC17xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_clkpwr.c
     /tmp/cca60TwF.s:18     .text:00000000 $t
     /tmp/cca60TwF.s:23     .text:00000000 CLKPWR_SetPCLKDiv
     /tmp/cca60TwF.s:123    .text:000000c4 CLKPWR_GetPCLKSEL
     /tmp/cca60TwF.s:187    .text:00000118 CLKPWR_GetPCLK
     /tmp/cca60TwF.s:222    .text:00000140 $d
     /tmp/cca60TwF.s:228    .text:00000150 $t
     /tmp/cca60TwF.s:271    .text:00000188 CLKPWR_ConfigPPWR
     /tmp/cca60TwF.s:340    .text:000001fc CLKPWR_Sleep
     /tmp/cca60TwF.s:381    .text:00000218 CLKPWR_DeepSleep
     /tmp/cca60TwF.s:426    .text:00000244 CLKPWR_PowerDown
     /tmp/cca60TwF.s:471    .text:00000270 CLKPWR_DeepPowerDown
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
