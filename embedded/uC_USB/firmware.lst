
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 privileged_functions 00000400  00000000  00000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c814  00000400  00000400  00008400  2**10
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  0002cc14  0002cc14  00034c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text.align   00000004  0002cc1c  0002cc1c  00034c1c  2**0
                  ALLOC, CODE
  4 .data         00000510  10000000  0002cc20  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000056c8  10000510  0002d130  00038510  2**3
                  ALLOC
  6 .heap         00000800  10005bd8  10005bd8  00038510  2**3
                  CONTENTS
  7 .stack        00002710  100058f0  100058f0  00038d10  2**3
                  CONTENTS
  8 .debug_aranges 00000728  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002001d  00000000  00000000  0003bb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000049d6  00000000  00000000  0005bb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a93f  00000000  00000000  0006053b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000467c  00000000  00000000  0006ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000835b  00000000  00000000  0006f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000075a2  00000000  00000000  00077853  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 0030ea5f  00000000  00000000  0007edf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  0038d854  2**0
                  CONTENTS, READONLY
 17 .ARM.attributes 00000031  00000000  00000000  0038d884  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000020  00000000  00000000  0038d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000400 <__cs3_reset>:
/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
.equ    PTR_0,  0x00000000
    ldr   r1, =_etext
     400:	490a      	ldr	r1, [pc, #40]	; (42c <__cs3_reset+0x2c>)
    ldr   r2, =_sdata
     402:	4a0b      	ldr	r2, [pc, #44]	; (430 <__cs3_reset+0x30>)
    ldr   r3, =_edata
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <__cs3_reset+0x34>)
1:  cmp   r2, r3
     406:	429a      	cmp	r2, r3
    ittt  lo
     408:	bf3e      	ittt	cc
    ldrlo r0, [r1], #4
     40a:	f851 0b04 	ldrcc.w	r0, [r1], #4
    strlo r0, [r2], #4
     40e:	f842 0b04 	strcc.w	r0, [r2], #4
    blo   1b
     412:	e7f8      	bcc.n	406 <__cs3_reset+0x6>

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
     414:	2000      	movs	r0, #0
    ldr   r1, =_sbss
     416:	4908      	ldr	r1, [pc, #32]	; (438 <__cs3_reset+0x38>)
    ldr   r2, =_ebss
     418:	4a08      	ldr	r2, [pc, #32]	; (43c <__cs3_reset+0x3c>)
2:  cmp   r1, r2
     41a:	4291      	cmp	r1, r2
    itt   lo
     41c:	bf3c      	itt	cc
    strlo r0, [r1], #4
     41e:	f841 0b04 	strcc.w	r0, [r1], #4
    blo   2b
     422:	e7fa      	bcc.n	41a <__cs3_reset+0x1a>
/*    LDR     R0, =NVICInit
    BLX     R0
*/

/* call main() */
    LDR     R0,=main
     424:	4806      	ldr	r0, [pc, #24]	; (440 <__cs3_reset+0x40>)
    BX      R0
     426:	4700      	bx	r0

    B .
     428:	e7fe      	b.n	428 <__cs3_reset+0x28>
     42a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
.equ    PTR_0,  0x00000000
    ldr   r1, =_etext
     42c:	0002cc20 	.word	0x0002cc20
    ldr   r2, =_sdata
     430:	10000000 	.word	0x10000000
    ldr   r3, =_edata
     434:	10000510 	.word	0x10000510

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    ldr   r1, =_sbss
     438:	10000510 	.word	0x10000510
    ldr   r2, =_ebss
     43c:	10005bd8 	.word	0x10005bd8
/*    LDR     R0, =NVICInit
    BLX     R0
*/

/* call main() */
    LDR     R0,=main
     440:	00000451 	.word	0x00000451

00000444 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     444:	e7fe      	b.n	444 <NMI_Handler>

00000446 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    BX       R14
     446:	4770      	bx	lr

00000448 <MemManage_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   MemManage_Handler
    .type   MemManage_Handler, %function
MemManage_Handler:
    B       .
     448:	e7fe      	b.n	448 <MemManage_Handler>

0000044a <BusFault_Handler>:
    .size   MemManage_Handler, . - MemManage_Handler

    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     44a:	e7fe      	b.n	44a <BusFault_Handler>

0000044c <UsageFault_Handler>:
    .size   BusFault_Handler, . - BusFault_Handler

    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     44c:	e7fe      	b.n	44c <UsageFault_Handler>
     44e:	bf00      	nop

00000450 <main>:
************************************************************************************************
*/

int
main (void)
{
     450:	b580      	push	{r7, lr}
     452:	b08c      	sub	sp, #48	; 0x30
     454:	af0a      	add	r7, sp, #40	; 0x28
    OS_ERR   os_err;
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
    CPU_ERR  cpu_err;
#endif

    BSP_PreInit();                                 /* initialize basic board support routines */
     456:	f002 ff87 	bl	3368 <BSP_PreInit>

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
    CPU_NameSet((CPU_CHAR *)CSP_DEV_NAME,
     45a:	f249 2078 	movw	r0, #37496	; 0x9278
     45e:	f2c0 0001 	movt	r0, #1
     462:	f107 0304 	add.w	r3, r7, #4
     466:	4619      	mov	r1, r3
     468:	f001 f952 	bl	1710 <CPU_NameSet>
                (CPU_ERR  *)&cpu_err);
#endif

    Mem_Init();                                       /* Initialize memory management  module */
     46c:	f005 f86a 	bl	5544 <Mem_Init>

    OSInit(&os_err);                                                        /* Init uC/OS-III */
     470:	f107 0306 	add.w	r3, r7, #6
     474:	4618      	mov	r0, r3
     476:	f00d ff09 	bl	e28c <OSInit>
    if(os_err != OS_ERR_NONE)
     47a:	88fb      	ldrh	r3, [r7, #6]
     47c:	2b00      	cmp	r3, #0
     47e:	d000      	beq.n	482 <main+0x32>
      for(;;);
     480:	e7fe      	b.n	480 <main+0x30>

    OSTaskCreate((OS_TCB      *)&App_TaskStartTCB,                  /* Create the Start Task */
     482:	f04f 0305 	mov.w	r3, #5
     486:	9300      	str	r3, [sp, #0]
     488:	f240 63b0 	movw	r3, #1712	; 0x6b0
     48c:	f2c1 0300 	movt	r3, #4096	; 0x1000
     490:	9301      	str	r3, [sp, #4]
     492:	f04f 030c 	mov.w	r3, #12
     496:	9302      	str	r3, [sp, #8]
     498:	f04f 0380 	mov.w	r3, #128	; 0x80
     49c:	9303      	str	r3, [sp, #12]
     49e:	f04f 0300 	mov.w	r3, #0
     4a2:	9304      	str	r3, [sp, #16]
     4a4:	f04f 0300 	mov.w	r3, #0
     4a8:	9305      	str	r3, [sp, #20]
     4aa:	f04f 0300 	mov.w	r3, #0
     4ae:	9306      	str	r3, [sp, #24]
     4b0:	f04f 0303 	mov.w	r3, #3
     4b4:	9307      	str	r3, [sp, #28]
     4b6:	f107 0306 	add.w	r3, r7, #6
     4ba:	9308      	str	r3, [sp, #32]
     4bc:	f240 5010 	movw	r0, #1296	; 0x510
     4c0:	f2c1 0000 	movt	r0, #4096	; 0x1000
     4c4:	f249 2180 	movw	r1, #37504	; 0x9280
     4c8:	f2c0 0101 	movt	r1, #1
     4cc:	f240 42fd 	movw	r2, #1277	; 0x4fd
     4d0:	f2c0 0200 	movt	r2, #0
     4d4:	f04f 0300 	mov.w	r3, #0
     4d8:	f007 f8ce 	bl	7678 <OSTaskCreate>
                 (OS_TICK      )0u,
                 (void        *)0,
                 (OS_OPT       )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR      *)&os_err);

    OSStart(&os_err);                                                   /* Start Multitasking */
     4dc:	f107 0306 	add.w	r3, r7, #6
     4e0:	4618      	mov	r0, r3
     4e2:	f00e fa61 	bl	e9a8 <OSStart>
    if(os_err != OS_ERR_NONE)                                         /* shall never get here */
     4e6:	88fb      	ldrh	r3, [r7, #6]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d000      	beq.n	4ee <main+0x9e>
          for(;;);
     4ec:	e7fe      	b.n	4ec <main+0x9c>
    return (0);
     4ee:	f04f 0300 	mov.w	r3, #0
}
     4f2:	4618      	mov	r0, r3
     4f4:	f107 0708 	add.w	r7, r7, #8
     4f8:	46bd      	mov	sp, r7
     4fa:	bd80      	pop	{r7, pc}

000004fc <App_TaskStart>:
************************************************************************************************
*/

static  void
App_TaskStart (void *p_arg)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b08e      	sub	sp, #56	; 0x38
     500:	af0a      	add	r7, sp, #40	; 0x28
     502:	6078      	str	r0, [r7, #4]
  OS_ERR       err;

  (void)p_arg;                                              /* Prevent Compiler Warning */
  CPU_Init();                               		  /* Initialize the uC/CPU Services */
     504:	f001 f8aa 	bl	165c <CPU_Init>
  OS_CSP_TickInit();                                  /* Initialize the Tick Interrupt. */
     508:	f011 f89e 	bl	11648 <OS_CSP_TickInit>

  USBInit();                               				          /* USB Initialization */
     50c:	f017 f8d0 	bl	176b0 <USBInit>

  /* register descriptors */
  USBRegisterDescriptors(abDescriptors);			   /* USB Descriptor Initialization */
     510:	f249 200c 	movw	r0, #37388	; 0x920c
     514:	f2c0 0001 	movt	r0, #1
     518:	f017 f9cc 	bl	178b4 <USBRegisterDescriptors>

  /* register endpoint handlers */
  USBHwRegisterEPIntHandler(BULK_IN_EP, BulkIn);	  /* register BulkIn Handler for EP */
     51c:	f04f 0082 	mov.w	r0, #130	; 0x82
     520:	f647 0171 	movw	r1, #30833	; 0x7871
     524:	f2c0 0101 	movt	r1, #1
     528:	f016 fd5e 	bl	16fe8 <USBHwRegisterEPIntHandler>
  USBHwRegisterEPIntHandler(BULK_OUT_EP, BulkOut);	 /* register BulkOut Handler for EP */
     52c:	f04f 0005 	mov.w	r0, #5
     530:	f247 71dd 	movw	r1, #30685	; 0x77dd
     534:	f2c0 0101 	movt	r1, #1
     538:	f016 fd56 	bl	16fe8 <USBHwRegisterEPIntHandler>
  USBHwRegisterEPIntHandler(INT_IN_EP, NULL);
     53c:	f04f 0081 	mov.w	r0, #129	; 0x81
     540:	f04f 0100 	mov.w	r1, #0
     544:	f016 fd50 	bl	16fe8 <USBHwRegisterEPIntHandler>

  USBHwEPConfig(BULK_IN_EP, MAX_PACKET_SIZE);	/* Configure Packet Size for outgoing Transfer */
     548:	f04f 0082 	mov.w	r0, #130	; 0x82
     54c:	f44f 71b4 	mov.w	r1, #360	; 0x168
     550:	f016 fd2a 	bl	16fa8 <USBHwEPConfig>
  USBHwEPConfig(BULK_OUT_EP, MAX_PACKET_SIZE);  /* Configure Packet Size for incoming Transfer */
     554:	f04f 0005 	mov.w	r0, #5
     558:	f44f 71b4 	mov.w	r1, #360	; 0x168
     55c:	f016 fd24 	bl	16fa8 <USBHwEPConfig>

  /* enable bulk-in interrupts on NAKs */
  USBHwNakIntEnable(INACK_BI);
     560:	f04f 0020 	mov.w	r0, #32
     564:	f016 fde6 	bl	17134 <USBHwNakIntEnable>

  if(CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN,
     568:	f247 73bd 	movw	r3, #30653	; 0x77bd
     56c:	f2c0 0301 	movt	r3, #1
     570:	f04f 0000 	mov.w	r0, #0
     574:	f04f 0118 	mov.w	r1, #24
     578:	461a      	mov	r2, r3
     57a:	f04f 0300 	mov.w	r3, #0
     57e:	f015 fa61 	bl	15a44 <CSP_IntVectReg>
     582:	4603      	mov	r3, r0
     584:	2b01      	cmp	r3, #1
     586:	d000      	beq.n	58a <__cs3_region_init_size_ram+0x7a>
                 (CSP_DEV_NBR   )CSP_INT_SRC_NBR_USB_00,
                 (CPU_FNCT_PTR  )USB_IRQHandler,
                 (void         *)0) != DEF_OK){
	  while(DEF_TRUE);
     588:	e7fe      	b.n	588 <__cs3_region_init_size_ram+0x78>
  }												/* register Interrupt Handler in RTOS */

  CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_USB_00);   /* Enable USB Interrupt. */
     58a:	f04f 0000 	mov.w	r0, #0
     58e:	f04f 0118 	mov.w	r1, #24
     592:	f015 f9c3 	bl	1591c <CSP_IntEn>

  USBHwConnect(TRUE);                        				  /* USB Connect */
     596:	f04f 0001 	mov.w	r0, #1
     59a:	f016 fdb7 	bl	1710c <USBHwConnect>

  #if (OS_CFG_STAT_TASK_EN > 0u)
  	  OSStatTaskCPUUsageInit(&err);
     59e:	f107 030e 	add.w	r3, r7, #14
     5a2:	4618      	mov	r0, r3
     5a4:	f00b fbd6 	bl	bd54 <OSStatTaskCPUUsageInit>
  #endif


  #ifdef CPU_CFG_INT_DIS_MEAS_EN
  	  CPU_IntDisMeasMaxCurReset();
     5a8:	f001 f932 	bl	1810 <CPU_IntDisMeasMaxCurReset>
  #endif

  OSTaskCreate((OS_TCB     *)&App_TaskATCB,
     5ac:	f04f 0305 	mov.w	r3, #5
     5b0:	9300      	str	r3, [sp, #0]
     5b2:	f640 03b0 	movw	r3, #2224	; 0x8b0
     5b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
     5ba:	9301      	str	r3, [sp, #4]
     5bc:	f04f 0300 	mov.w	r3, #0
     5c0:	9302      	str	r3, [sp, #8]
     5c2:	f04f 03c8 	mov.w	r3, #200	; 0xc8
     5c6:	9303      	str	r3, [sp, #12]
     5c8:	f04f 0300 	mov.w	r3, #0
     5cc:	9304      	str	r3, [sp, #16]
     5ce:	f04f 0300 	mov.w	r3, #0
     5d2:	9305      	str	r3, [sp, #20]
     5d4:	f04f 0300 	mov.w	r3, #0
     5d8:	9306      	str	r3, [sp, #24]
     5da:	f04f 0303 	mov.w	r3, #3
     5de:	9307      	str	r3, [sp, #28]
     5e0:	f107 030e 	add.w	r3, r7, #14
     5e4:	9308      	str	r3, [sp, #32]
     5e6:	f240 50e0 	movw	r0, #1504	; 0x5e0
     5ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
     5ee:	f249 2188 	movw	r1, #37512	; 0x9288
     5f2:	f2c0 0101 	movt	r1, #1
     5f6:	f240 627d 	movw	r2, #1661	; 0x67d
     5fa:	f2c0 0200 	movt	r2, #0
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	f007 f839 	bl	7678 <OSTaskCreate>
               (OS_TICK     )0,
               (void       *)0,
               (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
               (OS_ERR     *)&err);

    GPIO_SetDir(1,(1<<29),1);
     606:	f04f 0001 	mov.w	r0, #1
     60a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     60e:	f04f 0201 	mov.w	r2, #1
     612:	f012 fc43 	bl	12e9c <GPIO_SetDir>
    GPIO_ClearValue(1,(1<<29));
     616:	f04f 0001 	mov.w	r0, #1
     61a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     61e:	f012 fc79 	bl	12f14 <GPIO_ClearValue>
    while (DEF_TRUE) {
    	GPIO_SetValue(1,(1<<29));
     622:	f04f 0001 	mov.w	r0, #1
     626:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     62a:	f012 fc5d 	bl	12ee8 <GPIO_SetValue>
    	OSTimeDlyHMSM(0u, 0u, 1u, 0u,OS_OPT_TIME_HMSM_STRICT,&err);
     62e:	f04f 0300 	mov.w	r3, #0
     632:	9300      	str	r3, [sp, #0]
     634:	f107 030e 	add.w	r3, r7, #14
     638:	9301      	str	r3, [sp, #4]
     63a:	f04f 0000 	mov.w	r0, #0
     63e:	f04f 0100 	mov.w	r1, #0
     642:	f04f 0201 	mov.w	r2, #1
     646:	f04f 0300 	mov.w	r3, #0
     64a:	f009 f8f1 	bl	9830 <OSTimeDlyHMSM>
    	GPIO_ClearValue(1,(1<<29));
     64e:	f04f 0001 	mov.w	r0, #1
     652:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     656:	f012 fc5d 	bl	12f14 <GPIO_ClearValue>
    	OSTimeDlyHMSM(0u, 0u, 1u, 0u,OS_OPT_TIME_HMSM_STRICT,&err);
     65a:	f04f 0300 	mov.w	r3, #0
     65e:	9300      	str	r3, [sp, #0]
     660:	f107 030e 	add.w	r3, r7, #14
     664:	9301      	str	r3, [sp, #4]
     666:	f04f 0000 	mov.w	r0, #0
     66a:	f04f 0100 	mov.w	r1, #0
     66e:	f04f 0201 	mov.w	r2, #1
     672:	f04f 0300 	mov.w	r3, #0
     676:	f009 f8db 	bl	9830 <OSTimeDlyHMSM>

    }
     67a:	e7d2      	b.n	622 <__cs3_region_init_size_ram+0x112>

0000067c <App_TaskA>:
*
************************************************************************************************
*/
static void
App_TaskA (void *p_arg)
{
     67c:	b590      	push	{r4, r7, lr}
     67e:	b08b      	sub	sp, #44	; 0x2c
     680:	af02      	add	r7, sp, #8
     682:	6078      	str	r0, [r7, #4]
  OS_ERR       err;

  uint8_t str[] = "I'm a LPC1758\n";						/* Setup string for transmitting */
     684:	f249 2390 	movw	r3, #37520	; 0x9290
     688:	f2c0 0301 	movt	r3, #1
     68c:	f107 040c 	add.w	r4, r7, #12
     690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     692:	c407      	stmia	r4!, {r0, r1, r2}
     694:	8023      	strh	r3, [r4, #0]
     696:	f104 0402 	add.w	r4, r4, #2
     69a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     69e:	7023      	strb	r3, [r4, #0]

  (void)p_arg;                                              /* Prevent Compiler Warning */
  while(DEF_TRUE) {
	  if(BulkOutSize > 0){									/* if a Message was received */
     6a0:	f643 3358 	movw	r3, #15192	; 0x3b58
     6a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	dd41      	ble.n	732 <App_TaskA+0xb6>
		  BulkInSize = strlen((char *)str);					/* calculate string length of outgoing data */
     6ae:	f107 030c 	add.w	r3, r7, #12
     6b2:	4618      	mov	r0, r3
     6b4:	f018 f988 	bl	189c8 <strlen>
     6b8:	4603      	mov	r3, r0
     6ba:	461a      	mov	r2, r3
     6bc:	f643 13ec 	movw	r3, #14828	; 0x39ec
     6c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6c4:	601a      	str	r2, [r3, #0]
		  abBulkInBuf[0]=0x00ff&((BulkInSize+1)>>8);		/* Highbyte */
     6c6:	f643 13ec 	movw	r3, #14828	; 0x39ec
     6ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	f103 0301 	add.w	r3, r3, #1
     6d4:	ea4f 2323 	mov.w	r3, r3, asr #8
     6d8:	b2da      	uxtb	r2, r3
     6da:	f643 335c 	movw	r3, #15196	; 0x3b5c
     6de:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6e2:	701a      	strb	r2, [r3, #0]
		  abBulkInBuf[1]=0x00ff&(BulkInSize+1);			    /* Lowbyte  */
     6e4:	f643 13ec 	movw	r3, #14828	; 0x39ec
     6e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	b2db      	uxtb	r3, r3
     6f0:	f103 0301 	add.w	r3, r3, #1
     6f4:	b2da      	uxtb	r2, r3
     6f6:	f643 335c 	movw	r3, #15196	; 0x3b5c
     6fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
     6fe:	705a      	strb	r2, [r3, #1]
		  sprintf((char *)&abBulkInBuf[2],"%s",str);		/* write data to output buffer */
     700:	4814      	ldr	r0, [pc, #80]	; (754 <App_TaskA+0xd8>)
     702:	f107 030c 	add.w	r3, r7, #12
     706:	4619      	mov	r1, r3
     708:	f018 f900 	bl	1890c <strcpy>
		  BulkInSize += 3;									/* HB + LB + \0 */
     70c:	f643 13ec 	movw	r3, #14828	; 0x39ec
     710:	f2c1 0300 	movt	r3, #4096	; 0x1000
     714:	681b      	ldr	r3, [r3, #0]
     716:	f103 0203 	add.w	r2, r3, #3
     71a:	f643 13ec 	movw	r3, #14828	; 0x39ec
     71e:	f2c1 0300 	movt	r3, #4096	; 0x1000
     722:	601a      	str	r2, [r3, #0]
		  BulkOutSize = 0;									/* reset the Message length of the incoming buffer */
     724:	f643 3358 	movw	r3, #15192	; 0x3b58
     728:	f2c1 0300 	movt	r3, #4096	; 0x1000
     72c:	f04f 0200 	mov.w	r2, #0
     730:	601a      	str	r2, [r3, #0]
	  }
	  OSTimeDlyHMSM(0u, 0u, 0u, 500u, OS_OPT_TIME_HMSM_STRICT, &err);
     732:	f04f 0300 	mov.w	r3, #0
     736:	9300      	str	r3, [sp, #0]
     738:	f107 031e 	add.w	r3, r7, #30
     73c:	9301      	str	r3, [sp, #4]
     73e:	f04f 0000 	mov.w	r0, #0
     742:	f04f 0100 	mov.w	r1, #0
     746:	f04f 0200 	mov.w	r2, #0
     74a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     74e:	f009 f86f 	bl	9830 <OSTimeDlyHMSM>
  }
     752:	e7a5      	b.n	6a0 <App_TaskA+0x24>
     754:	10003b5e 	.word	0x10003b5e

00000758 <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
     758:	b580      	push	{r7, lr}
     75a:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
     75c:	f244 431c 	movw	r3, #17436	; 0x441c
     760:	f2c1 0300 	movt	r3, #4096	; 0x1000
     764:	681b      	ldr	r3, [r3, #0]
     766:	2b00      	cmp	r3, #0
     768:	d005      	beq.n	776 <OSIdleTaskHook+0x1e>
        (*OS_AppIdleTaskHookPtr)();
     76a:	f244 431c 	movw	r3, #17436	; 0x441c
     76e:	f2c1 0300 	movt	r3, #4096	; 0x1000
     772:	681b      	ldr	r3, [r3, #0]
     774:	4798      	blx	r3
    }
#endif
}
     776:	bd80      	pop	{r7, pc}

00000778 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
     778:	b480      	push	{r7}
     77a:	b083      	sub	sp, #12
     77c:	af00      	add	r7, sp, #0
    CPU_STK_SIZE   i;
    CPU_STK       *p_stk;


    p_stk = OSCfg_ISRStkBasePtr;                            /* Clear the ISR stack                                    */
     77e:	f64c 1318 	movw	r3, #51480	; 0xc918
     782:	f2c0 0302 	movt	r3, #2
     786:	681b      	ldr	r3, [r3, #0]
     788:	603b      	str	r3, [r7, #0]
    for (i = 0u; i < OSCfg_ISRStkSize; i++) {
     78a:	f04f 0300 	mov.w	r3, #0
     78e:	607b      	str	r3, [r7, #4]
     790:	e00b      	b.n	7aa <OSInitHook+0x32>
        *p_stk++ = (CPU_STK)0u;
     792:	683b      	ldr	r3, [r7, #0]
     794:	f04f 0200 	mov.w	r2, #0
     798:	601a      	str	r2, [r3, #0]
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	f103 0304 	add.w	r3, r3, #4
     7a0:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE   i;
    CPU_STK       *p_stk;


    p_stk = OSCfg_ISRStkBasePtr;                            /* Clear the ISR stack                                    */
    for (i = 0u; i < OSCfg_ISRStkSize; i++) {
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	f103 0301 	add.w	r3, r3, #1
     7a8:	607b      	str	r3, [r7, #4]
     7aa:	f64c 131c 	movw	r3, #51484	; 0xc91c
     7ae:	f2c0 0302 	movt	r3, #2
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	687a      	ldr	r2, [r7, #4]
     7b6:	429a      	cmp	r2, r3
     7b8:	d3eb      	bcc.n	792 <OSInitHook+0x1a>
        *p_stk++ = (CPU_STK)0u;
    }
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize - 1u);
     7ba:	f64c 1318 	movw	r3, #51480	; 0xc918
     7be:	f2c0 0302 	movt	r3, #2
     7c2:	681a      	ldr	r2, [r3, #0]
     7c4:	f64c 131c 	movw	r3, #51484	; 0xc91c
     7c8:	f2c0 0302 	movt	r3, #2
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	f103 33ff 	add.w	r3, r3, #4294967295
     7d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
     7d6:	18d2      	adds	r2, r2, r3
     7d8:	f643 43c4 	movw	r3, #15556	; 0x3cc4
     7dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
     7e0:	601a      	str	r2, [r3, #0]
}
     7e2:	f107 070c 	add.w	r7, r7, #12
     7e6:	46bd      	mov	sp, r7
     7e8:	bc80      	pop	{r7}
     7ea:	4770      	bx	lr

000007ec <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
     7f0:	f244 433c 	movw	r3, #17468	; 0x443c
     7f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
     7f8:	681b      	ldr	r3, [r3, #0]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d005      	beq.n	80a <Heap_Size+0xa>
        (*OS_AppStatTaskHookPtr)();
     7fe:	f244 433c 	movw	r3, #17468	; 0x443c
     802:	f2c1 0300 	movt	r3, #4096	; 0x1000
     806:	681b      	ldr	r3, [r3, #0]
     808:	4798      	blx	r3
    }
#endif
}
     80a:	bd80      	pop	{r7, pc}

0000080c <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
     80c:	b580      	push	{r7, lr}
     80e:	b082      	sub	sp, #8
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
     814:	f244 0374 	movw	r3, #16500	; 0x4074
     818:	f2c1 0300 	movt	r3, #4096	; 0x1000
     81c:	681b      	ldr	r3, [r3, #0]
     81e:	2b00      	cmp	r3, #0
     820:	d006      	beq.n	830 <OSTaskCreateHook+0x24>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
     822:	f244 0374 	movw	r3, #16500	; 0x4074
     826:	f2c1 0300 	movt	r3, #4096	; 0x1000
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	6878      	ldr	r0, [r7, #4]
     82e:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
     830:	f107 0708 	add.w	r7, r7, #8
     834:	46bd      	mov	sp, r7
     836:	bd80      	pop	{r7, pc}

00000838 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
     840:	f244 1374 	movw	r3, #16756	; 0x4174
     844:	f2c1 0300 	movt	r3, #4096	; 0x1000
     848:	681b      	ldr	r3, [r3, #0]
     84a:	2b00      	cmp	r3, #0
     84c:	d006      	beq.n	85c <OSTaskDelHook+0x24>
        (*OS_AppTaskDelHookPtr)(p_tcb);
     84e:	f244 1374 	movw	r3, #16756	; 0x4174
     852:	f2c1 0300 	movt	r3, #4096	; 0x1000
     856:	681b      	ldr	r3, [r3, #0]
     858:	6878      	ldr	r0, [r7, #4]
     85a:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
     85c:	f107 0708 	add.w	r7, r7, #8
     860:	46bd      	mov	sp, r7
     862:	bd80      	pop	{r7, pc}

00000864 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
     864:	b580      	push	{r7, lr}
     866:	b082      	sub	sp, #8
     868:	af00      	add	r7, sp, #0
     86a:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
     86c:	f643 5354 	movw	r3, #15700	; 0x3d54
     870:	f2c1 0300 	movt	r3, #4096	; 0x1000
     874:	681b      	ldr	r3, [r3, #0]
     876:	2b00      	cmp	r3, #0
     878:	d006      	beq.n	888 <OSTaskReturnHook+0x24>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
     87a:	f643 5354 	movw	r3, #15700	; 0x3d54
     87e:	f2c1 0300 	movt	r3, #4096	; 0x1000
     882:	681b      	ldr	r3, [r3, #0]
     884:	6878      	ldr	r0, [r7, #4]
     886:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
     888:	f107 0708 	add.w	r7, r7, #8
     88c:	46bd      	mov	sp, r7
     88e:	bd80      	pop	{r7, pc}

00000890 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
     890:	b480      	push	{r7}
     892:	b087      	sub	sp, #28
     894:	af00      	add	r7, sp, #0
     896:	60f8      	str	r0, [r7, #12]
     898:	60b9      	str	r1, [r7, #8]
     89a:	607a      	str	r2, [r7, #4]
     89c:	603b      	str	r3, [r7, #0]
    CPU_STK  *p_stk;


    (void)opt;                                              /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                          /* Load stack pointer                                     */
     89e:	6a3b      	ldr	r3, [r7, #32]
     8a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	18d3      	adds	r3, r2, r3
     8a8:	617b      	str	r3, [r7, #20]
                                                            /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                        /* xPSR                                                   */
     8aa:	697b      	ldr	r3, [r7, #20]
     8ac:	f1a3 0304 	sub.w	r3, r3, #4
     8b0:	617b      	str	r3, [r7, #20]
     8b2:	697b      	ldr	r3, [r7, #20]
     8b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     8b8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                             /* Entry Point                                            */
     8ba:	697b      	ldr	r3, [r7, #20]
     8bc:	f1a3 0304 	sub.w	r3, r3, #4
     8c0:	617b      	str	r3, [r7, #20]
     8c2:	68fa      	ldr	r2, [r7, #12]
     8c4:	697b      	ldr	r3, [r7, #20]
     8c6:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                      /* R14 (LR)                                               */
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	f1a3 0304 	sub.w	r3, r3, #4
     8ce:	617b      	str	r3, [r7, #20]
     8d0:	f249 333d 	movw	r3, #37693	; 0x933d
     8d4:	f2c0 0300 	movt	r3, #0
     8d8:	697a      	ldr	r2, [r7, #20]
     8da:	6013      	str	r3, [r2, #0]
    *--p_stk = (CPU_STK)0x12121212u;                        /* R12                                                    */
     8dc:	697b      	ldr	r3, [r7, #20]
     8de:	f1a3 0304 	sub.w	r3, r3, #4
     8e2:	617b      	str	r3, [r7, #20]
     8e4:	697b      	ldr	r3, [r7, #20]
     8e6:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
     8ea:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                        /* R3                                                     */
     8ec:	697b      	ldr	r3, [r7, #20]
     8ee:	f1a3 0304 	sub.w	r3, r3, #4
     8f2:	617b      	str	r3, [r7, #20]
     8f4:	697b      	ldr	r3, [r7, #20]
     8f6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
     8fa:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                        /* R2                                                     */
     8fc:	697b      	ldr	r3, [r7, #20]
     8fe:	f1a3 0304 	sub.w	r3, r3, #4
     902:	617b      	str	r3, [r7, #20]
     904:	697b      	ldr	r3, [r7, #20]
     906:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
     90a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                        /* R1                                                     */
     90c:	697b      	ldr	r3, [r7, #20]
     90e:	f1a3 0304 	sub.w	r3, r3, #4
     912:	617b      	str	r3, [r7, #20]
     914:	683a      	ldr	r2, [r7, #0]
     916:	697b      	ldr	r3, [r7, #20]
     918:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                              /* R0 : argument                                          */
     91a:	697b      	ldr	r3, [r7, #20]
     91c:	f1a3 0304 	sub.w	r3, r3, #4
     920:	617b      	str	r3, [r7, #20]
     922:	68ba      	ldr	r2, [r7, #8]
     924:	697b      	ldr	r3, [r7, #20]
     926:	601a      	str	r2, [r3, #0]
                                                            /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                        /* R11                                                    */
     928:	697b      	ldr	r3, [r7, #20]
     92a:	f1a3 0304 	sub.w	r3, r3, #4
     92e:	617b      	str	r3, [r7, #20]
     930:	697b      	ldr	r3, [r7, #20]
     932:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
     936:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                        /* R10                                                    */
     938:	697b      	ldr	r3, [r7, #20]
     93a:	f1a3 0304 	sub.w	r3, r3, #4
     93e:	617b      	str	r3, [r7, #20]
     940:	697b      	ldr	r3, [r7, #20]
     942:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
     946:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                        /* R9                                                     */
     948:	697b      	ldr	r3, [r7, #20]
     94a:	f1a3 0304 	sub.w	r3, r3, #4
     94e:	617b      	str	r3, [r7, #20]
     950:	697b      	ldr	r3, [r7, #20]
     952:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
     956:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                        /* R8                                                     */
     958:	697b      	ldr	r3, [r7, #20]
     95a:	f1a3 0304 	sub.w	r3, r3, #4
     95e:	617b      	str	r3, [r7, #20]
     960:	697b      	ldr	r3, [r7, #20]
     962:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
     966:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                        /* R7                                                     */
     968:	697b      	ldr	r3, [r7, #20]
     96a:	f1a3 0304 	sub.w	r3, r3, #4
     96e:	617b      	str	r3, [r7, #20]
     970:	697b      	ldr	r3, [r7, #20]
     972:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
     976:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                        /* R6                                                     */
     978:	697b      	ldr	r3, [r7, #20]
     97a:	f1a3 0304 	sub.w	r3, r3, #4
     97e:	617b      	str	r3, [r7, #20]
     980:	697b      	ldr	r3, [r7, #20]
     982:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
     986:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                        /* R5                                                     */
     988:	697b      	ldr	r3, [r7, #20]
     98a:	f1a3 0304 	sub.w	r3, r3, #4
     98e:	617b      	str	r3, [r7, #20]
     990:	697b      	ldr	r3, [r7, #20]
     992:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
     996:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                        /* R4                                                     */
     998:	697b      	ldr	r3, [r7, #20]
     99a:	f1a3 0304 	sub.w	r3, r3, #4
     99e:	617b      	str	r3, [r7, #20]
     9a0:	697b      	ldr	r3, [r7, #20]
     9a2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
     9a6:	601a      	str	r2, [r3, #0]

    return (p_stk);
     9a8:	697b      	ldr	r3, [r7, #20]
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 071c 	add.w	r7, r7, #28
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	bf00      	nop

000009b8 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
     9b8:	b5b0      	push	{r4, r5, r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
#endif



#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
     9be:	f244 4328 	movw	r3, #17448	; 0x4428
     9c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
     9c6:	681b      	ldr	r3, [r3, #0]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d005      	beq.n	9d8 <OSTaskSwHook+0x20>
        (*OS_AppTaskSwHookPtr)();
     9cc:	f244 4328 	movw	r3, #17448	; 0x4428
     9d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	4798      	blx	r3
    }
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
     9d8:	f002 fca0 	bl	331c <CPU_TS_TmrRd>
     9dc:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
     9de:	f244 135c 	movw	r3, #16732	; 0x415c
     9e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
     9e6:	681a      	ldr	r2, [r3, #0]
     9e8:	f244 1364 	movw	r3, #16740	; 0x4164
     9ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	429a      	cmp	r2, r3
     9f4:	d02a      	beq.n	a4c <OSTaskSwHook+0x94>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
     9f6:	f244 135c 	movw	r3, #16732	; 0x415c
     9fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
     9fe:	681a      	ldr	r2, [r3, #0]
     a00:	f244 135c 	movw	r3, #16732	; 0x415c
     a04:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
     a0e:	6879      	ldr	r1, [r7, #4]
     a10:	1acb      	subs	r3, r1, r3
     a12:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
     a16:	f244 135c 	movw	r3, #16732	; 0x415c
     a1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a1e:	681c      	ldr	r4, [r3, #0]
     a20:	f244 135c 	movw	r3, #16732	; 0x415c
     a24:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
     a2e:	f244 135c 	movw	r3, #16732	; 0x415c
     a32:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
     a3c:	462a      	mov	r2, r5
     a3e:	f04f 0300 	mov.w	r3, #0
     a42:	1812      	adds	r2, r2, r0
     a44:	eb43 0301 	adc.w	r3, r3, r1
     a48:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
     a4c:	f244 1364 	movw	r3, #16740	; 0x4164
     a50:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	687a      	ldr	r2, [r7, #4]
     a58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
    int_dis_time = CPU_IntDisMeasMaxCurReset();             /* Keep track of per-task interrupt disable time          */
     a5c:	f000 fed8 	bl	1810 <CPU_IntDisMeasMaxCurReset>
     a60:	6038      	str	r0, [r7, #0]
    if (OSTCBCurPtr->IntDisTimeMax < int_dis_time) {
     a62:	f244 135c 	movw	r3, #16732	; 0x415c
     a66:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a6a:	681b      	ldr	r3, [r3, #0]
     a6c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	429a      	cmp	r2, r3
     a74:	d207      	bcs.n	a86 <OSTaskSwHook+0xce>
        OSTCBCurPtr->IntDisTimeMax = int_dis_time;
     a76:	f244 135c 	movw	r3, #16732	; 0x415c
     a7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	683a      	ldr	r2, [r7, #0]
     a82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
     a86:	f244 135c 	movw	r3, #16732	; 0x415c
     a8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a8e:	681b      	ldr	r3, [r3, #0]
     a90:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
     a94:	f244 1368 	movw	r3, #16744	; 0x4168
     a98:	f2c1 0300 	movt	r3, #4096	; 0x1000
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	429a      	cmp	r2, r3
     aa0:	d20b      	bcs.n	aba <OSTaskSwHook+0x102>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
     aa2:	f244 135c 	movw	r3, #16732	; 0x415c
     aa6:	f2c1 0300 	movt	r3, #4096	; 0x1000
     aaa:	681a      	ldr	r2, [r3, #0]
     aac:	f244 1368 	movw	r3, #16744	; 0x4168
     ab0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
     aba:	f244 1368 	movw	r3, #16744	; 0x4168
     abe:	f2c1 0300 	movt	r3, #4096	; 0x1000
     ac2:	f04f 0200 	mov.w	r2, #0
     ac6:	601a      	str	r2, [r3, #0]
#endif
}
     ac8:	f107 0708 	add.w	r7, r7, #8
     acc:	46bd      	mov	sp, r7
     ace:	bdb0      	pop	{r4, r5, r7, pc}

00000ad0 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
     ad0:	b580      	push	{r7, lr}
     ad2:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
     ad4:	f244 1378 	movw	r3, #16760	; 0x4178
     ad8:	f2c1 0300 	movt	r3, #4096	; 0x1000
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	2b00      	cmp	r3, #0
     ae0:	d005      	beq.n	aee <OSTimeTickHook+0x1e>
        (*OS_AppTimeTickHookPtr)();
     ae2:	f244 1378 	movw	r3, #16760	; 0x4178
     ae6:	f2c1 0300 	movt	r3, #4096	; 0x1000
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	4798      	blx	r3
    }
#endif
}
     aee:	bd80      	pop	{r7, pc}

00000af0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
     af6:	f04f 0300 	mov.w	r3, #0
     afa:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
     afc:	f017 f972 	bl	17de4 <CPU_SR_Save>
     b00:	6078      	str	r0, [r7, #4]
     b02:	f000 fed9 	bl	18b8 <CPU_IntDisMeasStart>
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
     b06:	f244 1381 	movw	r3, #16769	; 0x4181
     b0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     b0e:	781b      	ldrb	r3, [r3, #0]
     b10:	f103 0301 	add.w	r3, r3, #1
     b14:	b2da      	uxtb	r2, r3
     b16:	f244 1381 	movw	r3, #16769	; 0x4181
     b1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     b1e:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
     b20:	f000 fef6 	bl	1910 <CPU_IntDisMeasStop>
     b24:	6878      	ldr	r0, [r7, #4]
     b26:	f017 f961 	bl	17dec <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
     b2a:	f009 f94b 	bl	9dc4 <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
     b2e:	f00d fce9 	bl	e504 <OSIntExit>
}
     b32:	f107 0708 	add.w	r7, r7, #8
     b36:	46bd      	mov	sp, r7
     b38:	bd80      	pop	{r7, pc}
     b3a:	bf00      	nop

00000b3c <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
     b3c:	b480      	push	{r7}
     b3e:	b085      	sub	sp, #20
     b40:	af00      	add	r7, sp, #0
     b42:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
     b44:	f24e 0314 	movw	r3, #57364	; 0xe014
     b48:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b4c:	687a      	ldr	r2, [r7, #4]
     b4e:	f102 32ff 	add.w	r2, r2, #4294967295
     b52:	601a      	str	r2, [r3, #0]

                                                            /* Set SysTick handler prio.                              */
    prio  = CPU_REG_NVIC_SHPRI3;
     b54:	f64e 5320 	movw	r3, #60704	; 0xed20
     b58:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	60fb      	str	r3, [r7, #12]
    prio &= DEF_BIT_FIELD(24, 0);
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b66:	60fb      	str	r3, [r7, #12]
    prio |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3 = prio;
     b68:	f64e 5320 	movw	r3, #60704	; 0xed20
     b6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b70:	68fa      	ldr	r2, [r7, #12]
     b72:	601a      	str	r2, [r3, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
     b74:	f24e 0310 	movw	r3, #57360	; 0xe010
     b78:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b7c:	f24e 0210 	movw	r2, #57360	; 0xe010
     b80:	f2ce 0200 	movt	r2, #57344	; 0xe000
     b84:	6812      	ldr	r2, [r2, #0]
     b86:	f042 0205 	orr.w	r2, r2, #5
     b8a:	601a      	str	r2, [r3, #0]
                            CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_TICKINT;
     b8c:	f24e 0310 	movw	r3, #57360	; 0xe010
     b90:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b94:	f24e 0210 	movw	r2, #57360	; 0xe010
     b98:	f2ce 0200 	movt	r2, #57344	; 0xe000
     b9c:	6812      	ldr	r2, [r2, #0]
     b9e:	f042 0202 	orr.w	r2, r2, #2
     ba2:	601a      	str	r2, [r3, #0]
}
     ba4:	f107 0714 	add.w	r7, r7, #20
     ba8:	46bd      	mov	sp, r7
     baa:	bc80      	pop	{r7}
     bac:	4770      	bx	lr
     bae:	bf00      	nop

00000bb0 <CPU_BitBandClr>:
*********************************************************************************************************
*/

void  CPU_BitBandClr (CPU_ADDR    addr,
                      CPU_INT08U  bit_nbr)
{
     bb0:	b480      	push	{r7}
     bb2:	b085      	sub	sp, #20
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	460b      	mov	r3, r1
     bba:	70fb      	strb	r3, [r7, #3]
    CPU_ADDR  bit_word_off;
    CPU_ADDR  bit_word_addr;


    if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
     bbc:	687a      	ldr	r2, [r7, #4]
     bbe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
     bc2:	429a      	cmp	r2, r3
     bc4:	d917      	bls.n	bf6 <CPU_BitBandClr+0x46>
     bc6:	687a      	ldr	r2, [r7, #4]
     bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     bcc:	f2c2 030f 	movt	r3, #8207	; 0x200f
     bd0:	429a      	cmp	r2, r3
     bd2:	d810      	bhi.n	bf6 <CPU_BitBandClr+0x46>
        (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
        bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     bda:	78fb      	ldrb	r3, [r7, #3]
     bdc:	18d3      	adds	r3, r2, r3
     bde:	ea4f 0383 	mov.w	r3, r3, lsl #2
     be2:	60fb      	str	r3, [r7, #12]
        bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
     bea:	60bb      	str	r3, [r7, #8]

      *(volatile CPU_INT32U *)(bit_word_addr) = 0;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	f04f 0200 	mov.w	r2, #0
     bf2:	601a      	str	r2, [r3, #0]
     bf4:	e01b      	b.n	c2e <CPU_BitBandClr+0x7e>

    } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
     bf6:	687a      	ldr	r2, [r7, #4]
     bf8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     bfc:	429a      	cmp	r2, r3
     bfe:	d916      	bls.n	c2e <CPU_BitBandClr+0x7e>
     c00:	687a      	ldr	r2, [r7, #4]
     c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
     c06:	f2c4 030f 	movt	r3, #16399	; 0x400f
     c0a:	429a      	cmp	r2, r3
     c0c:	d80f      	bhi.n	c2e <CPU_BitBandClr+0x7e>
               (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
        bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     c14:	78fb      	ldrb	r3, [r7, #3]
     c16:	18d3      	adds	r3, r2, r3
     c18:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c1c:	60fb      	str	r3, [r7, #12]
        bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
     c24:	60bb      	str	r3, [r7, #8]

      *(volatile CPU_INT32U *)(bit_word_addr) = 0;
     c26:	68bb      	ldr	r3, [r7, #8]
     c28:	f04f 0200 	mov.w	r2, #0
     c2c:	601a      	str	r2, [r3, #0]
    }
}
     c2e:	f107 0714 	add.w	r7, r7, #20
     c32:	46bd      	mov	sp, r7
     c34:	bc80      	pop	{r7}
     c36:	4770      	bx	lr

00000c38 <CPU_BitBandSet>:
*********************************************************************************************************
*/

void  CPU_BitBandSet (CPU_ADDR    addr,
                      CPU_INT08U  bit_nbr)
{
     c38:	b480      	push	{r7}
     c3a:	b085      	sub	sp, #20
     c3c:	af00      	add	r7, sp, #0
     c3e:	6078      	str	r0, [r7, #4]
     c40:	460b      	mov	r3, r1
     c42:	70fb      	strb	r3, [r7, #3]
    CPU_ADDR  bit_word_off;
    CPU_ADDR  bit_word_addr;


    if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
     c44:	687a      	ldr	r2, [r7, #4]
     c46:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
     c4a:	429a      	cmp	r2, r3
     c4c:	d917      	bls.n	c7e <CPU_BitBandSet+0x46>
     c4e:	687a      	ldr	r2, [r7, #4]
     c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
     c54:	f2c2 030f 	movt	r3, #8207	; 0x200f
     c58:	429a      	cmp	r2, r3
     c5a:	d810      	bhi.n	c7e <CPU_BitBandSet+0x46>
        (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
        bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     c62:	78fb      	ldrb	r3, [r7, #3]
     c64:	18d3      	adds	r3, r2, r3
     c66:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c6a:	60fb      	str	r3, [r7, #12]
        bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
     c6c:	68fb      	ldr	r3, [r7, #12]
     c6e:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
     c72:	60bb      	str	r3, [r7, #8]

      *(volatile CPU_INT32U *)(bit_word_addr) = 1;
     c74:	68bb      	ldr	r3, [r7, #8]
     c76:	f04f 0201 	mov.w	r2, #1
     c7a:	601a      	str	r2, [r3, #0]
     c7c:	e01b      	b.n	cb6 <CPU_BitBandSet+0x7e>

    } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
     c7e:	687a      	ldr	r2, [r7, #4]
     c80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     c84:	429a      	cmp	r2, r3
     c86:	d916      	bls.n	cb6 <CPU_BitBandSet+0x7e>
     c88:	687a      	ldr	r2, [r7, #4]
     c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     c8e:	f2c4 030f 	movt	r3, #16399	; 0x400f
     c92:	429a      	cmp	r2, r3
     c94:	d80f      	bhi.n	cb6 <CPU_BitBandSet+0x7e>
               (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
        bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     c9c:	78fb      	ldrb	r3, [r7, #3]
     c9e:	18d3      	adds	r3, r2, r3
     ca0:	ea4f 0383 	mov.w	r3, r3, lsl #2
     ca4:	60fb      	str	r3, [r7, #12]
        bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
     ca6:	68fb      	ldr	r3, [r7, #12]
     ca8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
     cac:	60bb      	str	r3, [r7, #8]

      *(volatile CPU_INT32U *)(bit_word_addr) = 1;
     cae:	68bb      	ldr	r3, [r7, #8]
     cb0:	f04f 0201 	mov.w	r2, #1
     cb4:	601a      	str	r2, [r3, #0]
    }
}
     cb6:	f107 0714 	add.w	r7, r7, #20
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <CPU_IntSrcDis>:
*                   COULD be valid.
*********************************************************************************************************
*/
/*$PAGE*/
void  CPU_IntSrcDis (CPU_INT08U  pos)
{
     cc0:	b580      	push	{r7, lr}
     cc2:	b084      	sub	sp, #16
     cc4:	af00      	add	r7, sp, #0
     cc6:	4603      	mov	r3, r0
     cc8:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  pos_max;
    CPU_INT08U  nbr;
    CPU_SR_ALLOC();
     cca:	f04f 0300 	mov.w	r3, #0
     cce:	60fb      	str	r3, [r7, #12]


    switch (pos) {
     cd0:	79fb      	ldrb	r3, [r7, #7]
     cd2:	2b0f      	cmp	r3, #15
     cd4:	d87e      	bhi.n	dd4 <CPU_IntSrcDis+0x114>
     cd6:	a201      	add	r2, pc, #4	; (adr r2, cdc <CPU_IntSrcDis+0x1c>)
     cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cdc:	00000e5f 	.word	0x00000e5f
     ce0:	00000e5f 	.word	0x00000e5f
     ce4:	00000e5f 	.word	0x00000e5f
     ce8:	00000e5f 	.word	0x00000e5f
     cec:	00000d1d 	.word	0x00000d1d
     cf0:	00000d4b 	.word	0x00000d4b
     cf4:	00000d79 	.word	0x00000d79
     cf8:	00000e5f 	.word	0x00000e5f
     cfc:	00000e5f 	.word	0x00000e5f
     d00:	00000e5f 	.word	0x00000e5f
     d04:	00000e5f 	.word	0x00000e5f
     d08:	00000e5f 	.word	0x00000e5f
     d0c:	00000e5f 	.word	0x00000e5f
     d10:	00000e5f 	.word	0x00000e5f
     d14:	00000e5f 	.word	0x00000e5f
     d18:	00000da7 	.word	0x00000da7
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
     d1c:	f017 f862 	bl	17de4 <CPU_SR_Save>
     d20:	60f8      	str	r0, [r7, #12]
     d22:	f000 fdc9 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
     d26:	f64e 5324 	movw	r3, #60708	; 0xed24
     d2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
     d2e:	f64e 5224 	movw	r2, #60708	; 0xed24
     d32:	f2ce 0200 	movt	r2, #57344	; 0xe000
     d36:	6812      	ldr	r2, [r2, #0]
     d38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     d3c:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     d3e:	f000 fde7 	bl	1910 <CPU_IntDisMeasStop>
     d42:	68f8      	ldr	r0, [r7, #12]
     d44:	f017 f852 	bl	17dec <CPU_SR_Restore>
             break;
     d48:	e08c      	b.n	e64 <CPU_IntSrcDis+0x1a4>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
     d4a:	f017 f84b 	bl	17de4 <CPU_SR_Save>
     d4e:	60f8      	str	r0, [r7, #12]
     d50:	f000 fdb2 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
     d54:	f64e 5324 	movw	r3, #60708	; 0xed24
     d58:	f2ce 0300 	movt	r3, #57344	; 0xe000
     d5c:	f64e 5224 	movw	r2, #60708	; 0xed24
     d60:	f2ce 0200 	movt	r2, #57344	; 0xe000
     d64:	6812      	ldr	r2, [r2, #0]
     d66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
     d6a:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     d6c:	f000 fdd0 	bl	1910 <CPU_IntDisMeasStop>
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	f017 f83b 	bl	17dec <CPU_SR_Restore>
             break;
     d76:	e075      	b.n	e64 <CPU_IntSrcDis+0x1a4>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
     d78:	f017 f834 	bl	17de4 <CPU_SR_Save>
     d7c:	60f8      	str	r0, [r7, #12]
     d7e:	f000 fd9b 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
     d82:	f64e 5324 	movw	r3, #60708	; 0xed24
     d86:	f2ce 0300 	movt	r3, #57344	; 0xe000
     d8a:	f64e 5224 	movw	r2, #60708	; 0xed24
     d8e:	f2ce 0200 	movt	r2, #57344	; 0xe000
     d92:	6812      	ldr	r2, [r2, #0]
     d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     d98:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     d9a:	f000 fdb9 	bl	1910 <CPU_IntDisMeasStop>
     d9e:	68f8      	ldr	r0, [r7, #12]
     da0:	f017 f824 	bl	17dec <CPU_SR_Restore>
             break;
     da4:	e05e      	b.n	e64 <CPU_IntSrcDis+0x1a4>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
     da6:	f017 f81d 	bl	17de4 <CPU_SR_Save>
     daa:	60f8      	str	r0, [r7, #12]
     dac:	f000 fd84 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
     db0:	f24e 0310 	movw	r3, #57360	; 0xe010
     db4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     db8:	f24e 0210 	movw	r2, #57360	; 0xe010
     dbc:	f2ce 0200 	movt	r2, #57344	; 0xe000
     dc0:	6812      	ldr	r2, [r2, #0]
     dc2:	f022 0201 	bic.w	r2, r2, #1
     dc6:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     dc8:	f000 fda2 	bl	1910 <CPU_IntDisMeasStop>
     dcc:	68f8      	ldr	r0, [r7, #12]
     dce:	f017 f80d 	bl	17dec <CPU_SR_Restore>
             break;
     dd2:	e047      	b.n	e64 <CPU_IntSrcDis+0x1a4>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
     dd4:	f24e 0304 	movw	r3, #57348	; 0xe004
     dd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	f103 0301 	add.w	r3, r3, #1
     de2:	b2db      	uxtb	r3, r3
     de4:	f003 031f 	and.w	r3, r3, #31
     de8:	b2db      	uxtb	r3, r3
     dea:	ea4f 1343 	mov.w	r3, r3, lsl #5
     dee:	b2db      	uxtb	r3, r3
     df0:	f103 0310 	add.w	r3, r3, #16
     df4:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
     df6:	79fa      	ldrb	r2, [r7, #7]
     df8:	7afb      	ldrb	r3, [r7, #11]
     dfa:	429a      	cmp	r2, r3
     dfc:	d231      	bcs.n	e62 <CPU_IntSrcDis+0x1a2>
                 group = (pos - 16) / 32;
     dfe:	79fb      	ldrb	r3, [r7, #7]
     e00:	f1a3 0310 	sub.w	r3, r3, #16
     e04:	f103 021f 	add.w	r2, r3, #31
     e08:	2b00      	cmp	r3, #0
     e0a:	bfb8      	it	lt
     e0c:	4613      	movlt	r3, r2
     e0e:	ea4f 1363 	mov.w	r3, r3, asr #5
     e12:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
     e14:	79fb      	ldrb	r3, [r7, #7]
     e16:	f1a3 0210 	sub.w	r2, r3, #16
     e1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
     e1e:	ea4f 63d3 	mov.w	r3, r3, lsr #27
     e22:	18d2      	adds	r2, r2, r3
     e24:	f002 021f 	and.w	r2, r2, #31
     e28:	1ad3      	subs	r3, r2, r3
     e2a:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
     e2c:	f016 ffda 	bl	17de4 <CPU_SR_Save>
     e30:	60f8      	str	r0, [r7, #12]
     e32:	f000 fd41 	bl	18b8 <CPU_IntDisMeasStart>
                 CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
     e36:	7aba      	ldrb	r2, [r7, #10]
     e38:	f643 0360 	movw	r3, #14432	; 0x3860
     e3c:	f6c3 0300 	movt	r3, #14336	; 0x3800
     e40:	18d3      	adds	r3, r2, r3
     e42:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e46:	7a7a      	ldrb	r2, [r7, #9]
     e48:	f04f 0101 	mov.w	r1, #1
     e4c:	fa01 f202 	lsl.w	r2, r1, r2
     e50:	601a      	str	r2, [r3, #0]
                 CPU_CRITICAL_EXIT();
     e52:	f000 fd5d 	bl	1910 <CPU_IntDisMeasStop>
     e56:	68f8      	ldr	r0, [r7, #12]
     e58:	f016 ffc8 	bl	17dec <CPU_SR_Restore>
             }
             break;
     e5c:	e001      	b.n	e62 <CPU_IntSrcDis+0x1a2>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
     e5e:	bf00      	nop
     e60:	e000      	b.n	e64 <CPU_IntSrcDis+0x1a4>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
     e62:	bf00      	nop
    }
}
     e64:	f107 0710 	add.w	r7, r7, #16
     e68:	46bd      	mov	sp, r7
     e6a:	bd80      	pop	{r7, pc}

00000e6c <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
     e6c:	b580      	push	{r7, lr}
     e6e:	b084      	sub	sp, #16
     e70:	af00      	add	r7, sp, #0
     e72:	4603      	mov	r3, r0
     e74:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
     e76:	f04f 0300 	mov.w	r3, #0
     e7a:	60fb      	str	r3, [r7, #12]


    switch (pos) {
     e7c:	79fb      	ldrb	r3, [r7, #7]
     e7e:	2b0f      	cmp	r3, #15
     e80:	d87e      	bhi.n	f80 <CPU_IntSrcEn+0x114>
     e82:	a201      	add	r2, pc, #4	; (adr r2, e88 <CPU_IntSrcEn+0x1c>)
     e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e88:	0000100b 	.word	0x0000100b
     e8c:	0000100b 	.word	0x0000100b
     e90:	0000100b 	.word	0x0000100b
     e94:	0000100b 	.word	0x0000100b
     e98:	00000ec9 	.word	0x00000ec9
     e9c:	00000ef7 	.word	0x00000ef7
     ea0:	00000f25 	.word	0x00000f25
     ea4:	0000100b 	.word	0x0000100b
     ea8:	0000100b 	.word	0x0000100b
     eac:	0000100b 	.word	0x0000100b
     eb0:	0000100b 	.word	0x0000100b
     eb4:	0000100b 	.word	0x0000100b
     eb8:	0000100b 	.word	0x0000100b
     ebc:	0000100b 	.word	0x0000100b
     ec0:	0000100b 	.word	0x0000100b
     ec4:	00000f53 	.word	0x00000f53
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
     ec8:	f016 ff8c 	bl	17de4 <CPU_SR_Save>
     ecc:	60f8      	str	r0, [r7, #12]
     ece:	f000 fcf3 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
     ed2:	f64e 5324 	movw	r3, #60708	; 0xed24
     ed6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     eda:	f64e 5224 	movw	r2, #60708	; 0xed24
     ede:	f2ce 0200 	movt	r2, #57344	; 0xe000
     ee2:	6812      	ldr	r2, [r2, #0]
     ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     ee8:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     eea:	f000 fd11 	bl	1910 <CPU_IntDisMeasStop>
     eee:	68f8      	ldr	r0, [r7, #12]
     ef0:	f016 ff7c 	bl	17dec <CPU_SR_Restore>
             break;
     ef4:	e08c      	b.n	1010 <CPU_IntSrcEn+0x1a4>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
     ef6:	f016 ff75 	bl	17de4 <CPU_SR_Save>
     efa:	60f8      	str	r0, [r7, #12]
     efc:	f000 fcdc 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
     f00:	f64e 5324 	movw	r3, #60708	; 0xed24
     f04:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f08:	f64e 5224 	movw	r2, #60708	; 0xed24
     f0c:	f2ce 0200 	movt	r2, #57344	; 0xe000
     f10:	6812      	ldr	r2, [r2, #0]
     f12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     f16:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     f18:	f000 fcfa 	bl	1910 <CPU_IntDisMeasStop>
     f1c:	68f8      	ldr	r0, [r7, #12]
     f1e:	f016 ff65 	bl	17dec <CPU_SR_Restore>
             break;
     f22:	e075      	b.n	1010 <CPU_IntSrcEn+0x1a4>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
     f24:	f016 ff5e 	bl	17de4 <CPU_SR_Save>
     f28:	60f8      	str	r0, [r7, #12]
     f2a:	f000 fcc5 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
     f2e:	f64e 5324 	movw	r3, #60708	; 0xed24
     f32:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f36:	f64e 5224 	movw	r2, #60708	; 0xed24
     f3a:	f2ce 0200 	movt	r2, #57344	; 0xe000
     f3e:	6812      	ldr	r2, [r2, #0]
     f40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
     f44:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     f46:	f000 fce3 	bl	1910 <CPU_IntDisMeasStop>
     f4a:	68f8      	ldr	r0, [r7, #12]
     f4c:	f016 ff4e 	bl	17dec <CPU_SR_Restore>
             break;
     f50:	e05e      	b.n	1010 <CPU_IntSrcEn+0x1a4>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
     f52:	f016 ff47 	bl	17de4 <CPU_SR_Save>
     f56:	60f8      	str	r0, [r7, #12]
     f58:	f000 fcae 	bl	18b8 <CPU_IntDisMeasStart>
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
     f5c:	f24e 0310 	movw	r3, #57360	; 0xe010
     f60:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f64:	f24e 0210 	movw	r2, #57360	; 0xe010
     f68:	f2ce 0200 	movt	r2, #57344	; 0xe000
     f6c:	6812      	ldr	r2, [r2, #0]
     f6e:	f042 0201 	orr.w	r2, r2, #1
     f72:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
     f74:	f000 fccc 	bl	1910 <CPU_IntDisMeasStop>
     f78:	68f8      	ldr	r0, [r7, #12]
     f7a:	f016 ff37 	bl	17dec <CPU_SR_Restore>
             break;
     f7e:	e047      	b.n	1010 <CPU_IntSrcEn+0x1a4>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
     f80:	f24e 0304 	movw	r3, #57348	; 0xe004
     f84:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	f103 0301 	add.w	r3, r3, #1
     f8e:	b2db      	uxtb	r3, r3
     f90:	f003 031f 	and.w	r3, r3, #31
     f94:	b2db      	uxtb	r3, r3
     f96:	ea4f 1343 	mov.w	r3, r3, lsl #5
     f9a:	b2db      	uxtb	r3, r3
     f9c:	f103 0310 	add.w	r3, r3, #16
     fa0:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
     fa2:	79fa      	ldrb	r2, [r7, #7]
     fa4:	7afb      	ldrb	r3, [r7, #11]
     fa6:	429a      	cmp	r2, r3
     fa8:	d231      	bcs.n	100e <CPU_IntSrcEn+0x1a2>
                 group = (pos - 16) / 32;
     faa:	79fb      	ldrb	r3, [r7, #7]
     fac:	f1a3 0310 	sub.w	r3, r3, #16
     fb0:	f103 021f 	add.w	r2, r3, #31
     fb4:	2b00      	cmp	r3, #0
     fb6:	bfb8      	it	lt
     fb8:	4613      	movlt	r3, r2
     fba:	ea4f 1363 	mov.w	r3, r3, asr #5
     fbe:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
     fc0:	79fb      	ldrb	r3, [r7, #7]
     fc2:	f1a3 0210 	sub.w	r2, r3, #16
     fc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
     fca:	ea4f 63d3 	mov.w	r3, r3, lsr #27
     fce:	18d2      	adds	r2, r2, r3
     fd0:	f002 021f 	and.w	r2, r2, #31
     fd4:	1ad3      	subs	r3, r2, r3
     fd6:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
     fd8:	f016 ff04 	bl	17de4 <CPU_SR_Save>
     fdc:	60f8      	str	r0, [r7, #12]
     fde:	f000 fc6b 	bl	18b8 <CPU_IntDisMeasStart>
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
     fe2:	7aba      	ldrb	r2, [r7, #10]
     fe4:	f44f 5361 	mov.w	r3, #14400	; 0x3840
     fe8:	f6c3 0300 	movt	r3, #14336	; 0x3800
     fec:	18d3      	adds	r3, r2, r3
     fee:	ea4f 0383 	mov.w	r3, r3, lsl #2
     ff2:	7a7a      	ldrb	r2, [r7, #9]
     ff4:	f04f 0101 	mov.w	r1, #1
     ff8:	fa01 f202 	lsl.w	r2, r1, r2
     ffc:	601a      	str	r2, [r3, #0]
                 CPU_CRITICAL_EXIT();
     ffe:	f000 fc87 	bl	1910 <CPU_IntDisMeasStop>
    1002:	68f8      	ldr	r0, [r7, #12]
    1004:	f016 fef2 	bl	17dec <CPU_SR_Restore>
             }
             break;
    1008:	e001      	b.n	100e <CPU_IntSrcEn+0x1a2>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
    100a:	bf00      	nop
    100c:	e000      	b.n	1010 <CPU_IntSrcEn+0x1a4>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
    100e:	bf00      	nop
    }
}
    1010:	f107 0710 	add.w	r7, r7, #16
    1014:	46bd      	mov	sp, r7
    1016:	bd80      	pop	{r7, pc}

00001018 <CPU_IntSrcPendClr>:
*********************************************************************************************************
*/

void  CPU_IntSrcPendClr (CPU_INT08U  pos)

{
    1018:	b580      	push	{r7, lr}
    101a:	b084      	sub	sp, #16
    101c:	af00      	add	r7, sp, #0
    101e:	4603      	mov	r3, r0
    1020:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
    1022:	f04f 0300 	mov.w	r3, #0
    1026:	60fb      	str	r3, [r7, #12]


    switch (pos) {
    1028:	79fb      	ldrb	r3, [r7, #7]
    102a:	2b0f      	cmp	r3, #15
    102c:	d80f      	bhi.n	104e <CPU_IntSrcPendClr+0x36>
    102e:	f04f 0200 	mov.w	r2, #0
    1032:	f6c7 621b 	movt	r2, #32283	; 0x7e1b
    1036:	fa02 f203 	lsl.w	r2, r2, r3
    103a:	2a00      	cmp	r2, #0
    103c:	db4c      	blt.n	10d8 <CPU_IntSrcPendClr+0xc0>
    103e:	f04f 0200 	mov.w	r2, #0
    1042:	f2c8 12e4 	movt	r2, #33252	; 0x81e4
    1046:	fa02 f303 	lsl.w	r3, r2, r3
    104a:	2b00      	cmp	r3, #0
    104c:	db46      	blt.n	10dc <CPU_IntSrcPendClr+0xc4>
        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             break;
                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
    104e:	f24e 0304 	movw	r3, #57348	; 0xe004
    1052:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	f103 0301 	add.w	r3, r3, #1
    105c:	b2db      	uxtb	r3, r3
    105e:	f003 031f 	and.w	r3, r3, #31
    1062:	b2db      	uxtb	r3, r3
    1064:	ea4f 1343 	mov.w	r3, r3, lsl #5
    1068:	b2db      	uxtb	r3, r3
    106a:	f103 0310 	add.w	r3, r3, #16
    106e:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
    1070:	79fa      	ldrb	r2, [r7, #7]
    1072:	7afb      	ldrb	r3, [r7, #11]
    1074:	429a      	cmp	r2, r3
    1076:	d233      	bcs.n	10e0 <CPU_IntSrcPendClr+0xc8>
                 group = (pos - 16) / 32;
    1078:	79fb      	ldrb	r3, [r7, #7]
    107a:	f1a3 0310 	sub.w	r3, r3, #16
    107e:	f103 021f 	add.w	r2, r3, #31
    1082:	2b00      	cmp	r3, #0
    1084:	bfb8      	it	lt
    1086:	4613      	movlt	r3, r2
    1088:	ea4f 1363 	mov.w	r3, r3, asr #5
    108c:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
    108e:	79fb      	ldrb	r3, [r7, #7]
    1090:	f1a3 0210 	sub.w	r2, r3, #16
    1094:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1098:	ea4f 63d3 	mov.w	r3, r3, lsr #27
    109c:	18d2      	adds	r2, r2, r3
    109e:	f002 021f 	and.w	r2, r2, #31
    10a2:	1ad3      	subs	r3, r2, r3
    10a4:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
    10a6:	f016 fe9d 	bl	17de4 <CPU_SR_Save>
    10aa:	60f8      	str	r0, [r7, #12]
    10ac:	f000 fc04 	bl	18b8 <CPU_IntDisMeasStart>
                 CPU_REG_NVIC_CLRPEND(group) = DEF_BIT(nbr);
    10b0:	7aba      	ldrb	r2, [r7, #10]
    10b2:	f643 03a0 	movw	r3, #14496	; 0x38a0
    10b6:	f6c3 0300 	movt	r3, #14336	; 0x3800
    10ba:	18d3      	adds	r3, r2, r3
    10bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    10c0:	7a7a      	ldrb	r2, [r7, #9]
    10c2:	f04f 0101 	mov.w	r1, #1
    10c6:	fa01 f202 	lsl.w	r2, r1, r2
    10ca:	601a      	str	r2, [r3, #0]
                 CPU_CRITICAL_EXIT();
    10cc:	f000 fc20 	bl	1910 <CPU_IntDisMeasStop>
    10d0:	68f8      	ldr	r0, [r7, #12]
    10d2:	f016 fe8b 	bl	17dec <CPU_SR_Restore>
             }
             break;
    10d6:	e003      	b.n	10e0 <CPU_IntSrcPendClr+0xc8>
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             break;
    10d8:	bf00      	nop
    10da:	e002      	b.n	10e2 <CPU_IntSrcPendClr+0xca>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
    10dc:	bf00      	nop
    10de:	e000      	b.n	10e2 <CPU_IntSrcPendClr+0xca>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_CLRPEND(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
    10e0:	bf00      	nop
    }
}
    10e2:	f107 0710 	add.w	r7, r7, #16
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop

000010ec <CPU_IntSrcPrioSet>:
*********************************************************************************************************
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b086      	sub	sp, #24
    10f0:	af00      	add	r7, sp, #0
    10f2:	4602      	mov	r2, r0
    10f4:	460b      	mov	r3, r1
    10f6:	71fa      	strb	r2, [r7, #7]
    10f8:	71bb      	strb	r3, [r7, #6]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_INT32U  prio_32;
    CPU_INT32U  temp;
    CPU_SR_ALLOC();
    10fa:	f04f 0300 	mov.w	r3, #0
    10fe:	617b      	str	r3, [r7, #20]


    prio_32 = CPU_RevBits((CPU_INT08U)prio);
    1100:	79bb      	ldrb	r3, [r7, #6]
    1102:	4618      	mov	r0, r3
    1104:	f016 fe78 	bl	17df8 <CPU_RevBits>
    1108:	6138      	str	r0, [r7, #16]
    prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
    110a:	693b      	ldr	r3, [r7, #16]
    110c:	ea4f 6313 	mov.w	r3, r3, lsr #24
    1110:	71bb      	strb	r3, [r7, #6]

    switch (pos) {
    1112:	79fb      	ldrb	r3, [r7, #7]
    1114:	2b0f      	cmp	r3, #15
    1116:	f200 8106 	bhi.w	1326 <CPU_IntSrcPrioSet+0x23a>
    111a:	a201      	add	r2, pc, #4	; (adr r2, 1120 <CPU_IntSrcPrioSet+0x34>)
    111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1120:	000013e3 	.word	0x000013e3
    1124:	000013e3 	.word	0x000013e3
    1128:	000013e3 	.word	0x000013e3
    112c:	000013e3 	.word	0x000013e3
    1130:	00001161 	.word	0x00001161
    1134:	0000119f 	.word	0x0000119f
    1138:	000011e1 	.word	0x000011e1
    113c:	000013e3 	.word	0x000013e3
    1140:	000013e3 	.word	0x000013e3
    1144:	000013e3 	.word	0x000013e3
    1148:	000013e3 	.word	0x000013e3
    114c:	00001223 	.word	0x00001223
    1150:	00001265 	.word	0x00001265
    1154:	000013e3 	.word	0x000013e3
    1158:	000012a3 	.word	0x000012a3
    115c:	000012e5 	.word	0x000012e5
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
    1160:	f016 fe40 	bl	17de4 <CPU_SR_Save>
    1164:	6178      	str	r0, [r7, #20]
    1166:	f000 fba7 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI1;
    116a:	f64e 5318 	movw	r3, #60696	; 0xed18
    116e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	60fb      	str	r3, [r7, #12]
             temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    117c:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
    117e:	79bb      	ldrb	r3, [r7, #6]
    1180:	68fa      	ldr	r2, [r7, #12]
    1182:	4313      	orrs	r3, r2
    1184:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI1  = temp;
    1186:	f64e 5318 	movw	r3, #60696	; 0xed18
    118a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    118e:	68fa      	ldr	r2, [r7, #12]
    1190:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    1192:	f000 fbbd 	bl	1910 <CPU_IntDisMeasStop>
    1196:	6978      	ldr	r0, [r7, #20]
    1198:	f016 fe28 	bl	17dec <CPU_SR_Restore>
             break;
    119c:	e124      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
    119e:	f016 fe21 	bl	17de4 <CPU_SR_Save>
    11a2:	6178      	str	r0, [r7, #20]
    11a4:	f000 fb88 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI1;
    11a8:	f64e 5318 	movw	r3, #60696	; 0xed18
    11ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	60fb      	str	r3, [r7, #12]
             temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
    11b4:	68fb      	ldr	r3, [r7, #12]
    11b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    11ba:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
    11bc:	79bb      	ldrb	r3, [r7, #6]
    11be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    11c2:	68fa      	ldr	r2, [r7, #12]
    11c4:	4313      	orrs	r3, r2
    11c6:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI1  = temp;
    11c8:	f64e 5318 	movw	r3, #60696	; 0xed18
    11cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11d0:	68fa      	ldr	r2, [r7, #12]
    11d2:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    11d4:	f000 fb9c 	bl	1910 <CPU_IntDisMeasStop>
    11d8:	6978      	ldr	r0, [r7, #20]
    11da:	f016 fe07 	bl	17dec <CPU_SR_Restore>
             break;
    11de:	e103      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
    11e0:	f016 fe00 	bl	17de4 <CPU_SR_Save>
    11e4:	6178      	str	r0, [r7, #20]
    11e6:	f000 fb67 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI1;
    11ea:	f64e 5318 	movw	r3, #60696	; 0xed18
    11ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	60fb      	str	r3, [r7, #12]
             temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
    11f6:	68fb      	ldr	r3, [r7, #12]
    11f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    11fc:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
    11fe:	79bb      	ldrb	r3, [r7, #6]
    1200:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1204:	68fa      	ldr	r2, [r7, #12]
    1206:	4313      	orrs	r3, r2
    1208:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI1  = temp;
    120a:	f64e 5318 	movw	r3, #60696	; 0xed18
    120e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1212:	68fa      	ldr	r2, [r7, #12]
    1214:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    1216:	f000 fb7b 	bl	1910 <CPU_IntDisMeasStop>
    121a:	6978      	ldr	r0, [r7, #20]
    121c:	f016 fde6 	bl	17dec <CPU_SR_Restore>
             break;
    1220:	e0e2      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
    1222:	f016 fddf 	bl	17de4 <CPU_SR_Save>
    1226:	6178      	str	r0, [r7, #20]
    1228:	f000 fb46 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI2;
    122c:	f64e 531c 	movw	r3, #60700	; 0xed1c
    1230:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
    1238:	68fb      	ldr	r3, [r7, #12]
    123a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    123e:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
    1240:	79bb      	ldrb	r3, [r7, #6]
    1242:	ea4f 6303 	mov.w	r3, r3, lsl #24
    1246:	68fa      	ldr	r2, [r7, #12]
    1248:	4313      	orrs	r3, r2
    124a:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI2  = temp;
    124c:	f64e 531c 	movw	r3, #60700	; 0xed1c
    1250:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1254:	68fa      	ldr	r2, [r7, #12]
    1256:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    1258:	f000 fb5a 	bl	1910 <CPU_IntDisMeasStop>
    125c:	6978      	ldr	r0, [r7, #20]
    125e:	f016 fdc5 	bl	17dec <CPU_SR_Restore>
             break;
    1262:	e0c1      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
    1264:	f016 fdbe 	bl	17de4 <CPU_SR_Save>
    1268:	6178      	str	r0, [r7, #20]
    126a:	f000 fb25 	bl	18b8 <CPU_IntDisMeasStart>
             temp                = CPU_REG_NVIC_SHPRI3;
    126e:	f64e 5320 	movw	r3, #60704	; 0xed20
    1272:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1276:	681b      	ldr	r3, [r3, #0]
    1278:	60fb      	str	r3, [r7, #12]
             temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1280:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
    1282:	79bb      	ldrb	r3, [r7, #6]
    1284:	68fa      	ldr	r2, [r7, #12]
    1286:	4313      	orrs	r3, r2
    1288:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI3  = temp;
    128a:	f64e 5320 	movw	r3, #60704	; 0xed20
    128e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1292:	68fa      	ldr	r2, [r7, #12]
    1294:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    1296:	f000 fb3b 	bl	1910 <CPU_IntDisMeasStop>
    129a:	6978      	ldr	r0, [r7, #20]
    129c:	f016 fda6 	bl	17dec <CPU_SR_Restore>
             break;
    12a0:	e0a2      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
    12a2:	f016 fd9f 	bl	17de4 <CPU_SR_Save>
    12a6:	6178      	str	r0, [r7, #20]
    12a8:	f000 fb06 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI3;
    12ac:	f64e 5320 	movw	r3, #60704	; 0xed20
    12b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12b4:	681b      	ldr	r3, [r3, #0]
    12b6:	60fb      	str	r3, [r7, #12]
             temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    12be:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
    12c0:	79bb      	ldrb	r3, [r7, #6]
    12c2:	ea4f 4303 	mov.w	r3, r3, lsl #16
    12c6:	68fa      	ldr	r2, [r7, #12]
    12c8:	4313      	orrs	r3, r2
    12ca:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI3  = temp;
    12cc:	f64e 5320 	movw	r3, #60704	; 0xed20
    12d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12d4:	68fa      	ldr	r2, [r7, #12]
    12d6:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    12d8:	f000 fb1a 	bl	1910 <CPU_IntDisMeasStop>
    12dc:	6978      	ldr	r0, [r7, #20]
    12de:	f016 fd85 	bl	17dec <CPU_SR_Restore>
             break;
    12e2:	e081      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
    12e4:	f016 fd7e 	bl	17de4 <CPU_SR_Save>
    12e8:	6178      	str	r0, [r7, #20]
    12ea:	f000 fae5 	bl	18b8 <CPU_IntDisMeasStart>
             temp                 = CPU_REG_NVIC_SHPRI3;
    12ee:	f64e 5320 	movw	r3, #60704	; 0xed20
    12f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1300:	60fb      	str	r3, [r7, #12]
             temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
    1302:	79bb      	ldrb	r3, [r7, #6]
    1304:	ea4f 6303 	mov.w	r3, r3, lsl #24
    1308:	68fa      	ldr	r2, [r7, #12]
    130a:	4313      	orrs	r3, r2
    130c:	60fb      	str	r3, [r7, #12]
             CPU_REG_NVIC_SHPRI3  = temp;
    130e:	f64e 5320 	movw	r3, #60704	; 0xed20
    1312:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1316:	68fa      	ldr	r2, [r7, #12]
    1318:	601a      	str	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    131a:	f000 faf9 	bl	1910 <CPU_IntDisMeasStop>
    131e:	6978      	ldr	r0, [r7, #20]
    1320:	f016 fd64 	bl	17dec <CPU_SR_Restore>
             break;
    1324:	e060      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
    1326:	f24e 0304 	movw	r3, #57348	; 0xe004
    132a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    132e:	681b      	ldr	r3, [r3, #0]
    1330:	f103 0301 	add.w	r3, r3, #1
    1334:	b2db      	uxtb	r3, r3
    1336:	f003 031f 	and.w	r3, r3, #31
    133a:	b2db      	uxtb	r3, r3
    133c:	ea4f 1343 	mov.w	r3, r3, lsl #5
    1340:	b2db      	uxtb	r3, r3
    1342:	f103 0310 	add.w	r3, r3, #16
    1346:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
    1348:	79fa      	ldrb	r2, [r7, #7]
    134a:	7afb      	ldrb	r3, [r7, #11]
    134c:	429a      	cmp	r2, r3
    134e:	d24a      	bcs.n	13e6 <CPU_IntSrcPrioSet+0x2fa>
                 group                    = (pos - 16) / 4;
    1350:	79fb      	ldrb	r3, [r7, #7]
    1352:	f1a3 0310 	sub.w	r3, r3, #16
    1356:	f103 0203 	add.w	r2, r3, #3
    135a:	2b00      	cmp	r3, #0
    135c:	bfb8      	it	lt
    135e:	4613      	movlt	r3, r2
    1360:	ea4f 03a3 	mov.w	r3, r3, asr #2
    1364:	72bb      	strb	r3, [r7, #10]
                 nbr                      = (pos - 16) % 4;
    1366:	79fb      	ldrb	r3, [r7, #7]
    1368:	f1a3 0210 	sub.w	r2, r3, #16
    136c:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1370:	ea4f 7393 	mov.w	r3, r3, lsr #30
    1374:	18d2      	adds	r2, r2, r3
    1376:	f002 0203 	and.w	r2, r2, #3
    137a:	1ad3      	subs	r3, r2, r3
    137c:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
    137e:	f016 fd31 	bl	17de4 <CPU_SR_Save>
    1382:	6178      	str	r0, [r7, #20]
    1384:	f000 fa98 	bl	18b8 <CPU_IntDisMeasStart>
                 temp                     = CPU_REG_NVIC_PRIO(group);
    1388:	7abb      	ldrb	r3, [r7, #10]
    138a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
    138e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
    1392:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1396:	681b      	ldr	r3, [r3, #0]
    1398:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
    139a:	7a7b      	ldrb	r3, [r7, #9]
    139c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    13a0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    13a4:	fa02 f303 	lsl.w	r3, r2, r3
    13a8:	ea6f 0303 	mvn.w	r3, r3
    13ac:	68fa      	ldr	r2, [r7, #12]
    13ae:	4013      	ands	r3, r2
    13b0:	60fb      	str	r3, [r7, #12]
                 temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
    13b2:	79ba      	ldrb	r2, [r7, #6]
    13b4:	7a7b      	ldrb	r3, [r7, #9]
    13b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    13ba:	fa02 f303 	lsl.w	r3, r2, r3
    13be:	68fa      	ldr	r2, [r7, #12]
    13c0:	4313      	orrs	r3, r2
    13c2:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_PRIO(group) = temp;
    13c4:	7abb      	ldrb	r3, [r7, #10]
    13c6:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
    13ca:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
    13ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    13d2:	68fa      	ldr	r2, [r7, #12]
    13d4:	601a      	str	r2, [r3, #0]
                 CPU_CRITICAL_EXIT();
    13d6:	f000 fa9b 	bl	1910 <CPU_IntDisMeasStop>
    13da:	6978      	ldr	r0, [r7, #20]
    13dc:	f016 fd06 	bl	17dec <CPU_SR_Restore>
             }
             break;
    13e0:	e001      	b.n	13e6 <CPU_IntSrcPrioSet+0x2fa>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
    13e2:	bf00      	nop
    13e4:	e000      	b.n	13e8 <CPU_IntSrcPrioSet+0x2fc>
                 temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
                 temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
                 CPU_REG_NVIC_PRIO(group) = temp;
                 CPU_CRITICAL_EXIT();
             }
             break;
    13e6:	bf00      	nop
    }
}
    13e8:	f107 0718 	add.w	r7, r7, #24
    13ec:	46bd      	mov	sp, r7
    13ee:	bd80      	pop	{r7, pc}

000013f0 <CPU_IntSrcPrioGet>:
*               (3) See 'CPU_IntSrcDis()      Note #3'.
*********************************************************************************************************
*/

CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b088      	sub	sp, #32
    13f4:	af00      	add	r7, sp, #0
    13f6:	4603      	mov	r3, r0
    13f8:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_INT16S  prio;
    CPU_INT32U  prio_32;
    CPU_INT32U  temp;
    CPU_SR_ALLOC();
    13fa:	f04f 0300 	mov.w	r3, #0
    13fe:	61bb      	str	r3, [r7, #24]


    switch (pos) {
    1400:	79fb      	ldrb	r3, [r7, #7]
    1402:	2b0f      	cmp	r3, #15
    1404:	f200 80c8 	bhi.w	1598 <CPU_IntSrcPrioGet+0x1a8>
    1408:	a201      	add	r2, pc, #4	; (adr r2, 1410 <CPU_IntSrcPrioGet+0x20>)
    140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    140e:	bf00      	nop
    1410:	00001451 	.word	0x00001451
    1414:	00001459 	.word	0x00001459
    1418:	00001461 	.word	0x00001461
    141c:	00001469 	.word	0x00001469
    1420:	00001471 	.word	0x00001471
    1424:	0000149b 	.word	0x0000149b
    1428:	000014c9 	.word	0x000014c9
    142c:	00001451 	.word	0x00001451
    1430:	00001451 	.word	0x00001451
    1434:	00001451 	.word	0x00001451
    1438:	00001451 	.word	0x00001451
    143c:	000014ed 	.word	0x000014ed
    1440:	00001517 	.word	0x00001517
    1444:	00001451 	.word	0x00001451
    1448:	00001541 	.word	0x00001541
    144c:	0000156f 	.word	0x0000156f
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             prio = DEF_INT_16S_MIN_VAL;
    1450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1454:	83fb      	strh	r3, [r7, #30]
             break;
    1456:	e0ec      	b.n	1632 <CPU_IntSrcPrioGet+0x242>


                                                                /* ----------------- SYSTEM EXCEPTIONS ---------------- */
        case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
             prio = -3;
    1458:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    145c:	83fb      	strh	r3, [r7, #30]
             break;
    145e:	e0e8      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
             prio = -2;
    1460:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    1464:	83fb      	strh	r3, [r7, #30]
             break;
    1466:	e0e4      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             prio = -1;
    1468:	f64f 73ff 	movw	r3, #65535	; 0xffff
    146c:	83fb      	strh	r3, [r7, #30]
             break;
    146e:	e0e0      	b.n	1632 <CPU_IntSrcPrioGet+0x242>


        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
    1470:	f016 fcb8 	bl	17de4 <CPU_SR_Save>
    1474:	61b8      	str	r0, [r7, #24]
    1476:	f000 fa1f 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI1;
    147a:	f64e 5318 	movw	r3, #60696	; 0xed18
    147e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	617b      	str	r3, [r7, #20]
             prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    1486:	697b      	ldr	r3, [r7, #20]
    1488:	b29b      	uxth	r3, r3
    148a:	b2db      	uxtb	r3, r3
    148c:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    148e:	f000 fa3f 	bl	1910 <CPU_IntDisMeasStop>
    1492:	69b8      	ldr	r0, [r7, #24]
    1494:	f016 fcaa 	bl	17dec <CPU_SR_Restore>
             break;
    1498:	e0cb      	b.n	1632 <CPU_IntSrcPrioGet+0x242>


        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
    149a:	f016 fca3 	bl	17de4 <CPU_SR_Save>
    149e:	61b8      	str	r0, [r7, #24]
    14a0:	f000 fa0a 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI1;
    14a4:	f64e 5318 	movw	r3, #60696	; 0xed18
    14a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	617b      	str	r3, [r7, #20]
             prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    14b0:	697b      	ldr	r3, [r7, #20]
    14b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    14b6:	b29b      	uxth	r3, r3
    14b8:	b2db      	uxtb	r3, r3
    14ba:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    14bc:	f000 fa28 	bl	1910 <CPU_IntDisMeasStop>
    14c0:	69b8      	ldr	r0, [r7, #24]
    14c2:	f016 fc93 	bl	17dec <CPU_SR_Restore>
             break;
    14c6:	e0b4      	b.n	1632 <CPU_IntSrcPrioGet+0x242>


        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
    14c8:	f016 fc8c 	bl	17de4 <CPU_SR_Save>
    14cc:	61b8      	str	r0, [r7, #24]
    14ce:	f000 f9f3 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI1;
    14d2:	f64e 5318 	movw	r3, #60696	; 0xed18
    14d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	617b      	str	r3, [r7, #20]
             prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    14de:	697b      	ldr	r3, [r7, #20]
    14e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    14e4:	b29b      	uxth	r3, r3
    14e6:	b2db      	uxtb	r3, r3
    14e8:	83fb      	strh	r3, [r7, #30]
             break;
    14ea:	e0a2      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
    14ec:	f016 fc7a 	bl	17de4 <CPU_SR_Save>
    14f0:	61b8      	str	r0, [r7, #24]
    14f2:	f000 f9e1 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI2;
    14f6:	f64e 531c 	movw	r3, #60700	; 0xed1c
    14fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	617b      	str	r3, [r7, #20]
             prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    1502:	697b      	ldr	r3, [r7, #20]
    1504:	ea4f 6313 	mov.w	r3, r3, lsr #24
    1508:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    150a:	f000 fa01 	bl	1910 <CPU_IntDisMeasStop>
    150e:	69b8      	ldr	r0, [r7, #24]
    1510:	f016 fc6c 	bl	17dec <CPU_SR_Restore>
             break;
    1514:	e08d      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
    1516:	f016 fc65 	bl	17de4 <CPU_SR_Save>
    151a:	61b8      	str	r0, [r7, #24]
    151c:	f000 f9cc 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI3;
    1520:	f64e 5320 	movw	r3, #60704	; 0xed20
    1524:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	617b      	str	r3, [r7, #20]
             prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    152c:	697b      	ldr	r3, [r7, #20]
    152e:	b29b      	uxth	r3, r3
    1530:	b2db      	uxtb	r3, r3
    1532:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    1534:	f000 f9ec 	bl	1910 <CPU_IntDisMeasStop>
    1538:	69b8      	ldr	r0, [r7, #24]
    153a:	f016 fc57 	bl	17dec <CPU_SR_Restore>
             break;
    153e:	e078      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
    1540:	f016 fc50 	bl	17de4 <CPU_SR_Save>
    1544:	61b8      	str	r0, [r7, #24]
    1546:	f000 f9b7 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI3;
    154a:	f64e 5320 	movw	r3, #60704	; 0xed20
    154e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	617b      	str	r3, [r7, #20]
             prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    1556:	697b      	ldr	r3, [r7, #20]
    1558:	ea4f 4313 	mov.w	r3, r3, lsr #16
    155c:	b29b      	uxth	r3, r3
    155e:	b2db      	uxtb	r3, r3
    1560:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    1562:	f000 f9d5 	bl	1910 <CPU_IntDisMeasStop>
    1566:	69b8      	ldr	r0, [r7, #24]
    1568:	f016 fc40 	bl	17dec <CPU_SR_Restore>
             break;
    156c:	e061      	b.n	1632 <CPU_IntSrcPrioGet+0x242>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
    156e:	f016 fc39 	bl	17de4 <CPU_SR_Save>
    1572:	61b8      	str	r0, [r7, #24]
    1574:	f000 f9a0 	bl	18b8 <CPU_IntDisMeasStart>
             temp = CPU_REG_NVIC_SHPRI3;
    1578:	f64e 5320 	movw	r3, #60704	; 0xed20
    157c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	617b      	str	r3, [r7, #20]
             prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	ea4f 6313 	mov.w	r3, r3, lsr #24
    158a:	83fb      	strh	r3, [r7, #30]
             CPU_CRITICAL_EXIT();
    158c:	f000 f9c0 	bl	1910 <CPU_IntDisMeasStop>
    1590:	69b8      	ldr	r0, [r7, #24]
    1592:	f016 fc2b 	bl	17dec <CPU_SR_Restore>
             break;
    1596:	e04c      	b.n	1632 <CPU_IntSrcPrioGet+0x242>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
    1598:	f24e 0304 	movw	r3, #57348	; 0xe004
    159c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	f103 0301 	add.w	r3, r3, #1
    15a6:	b2db      	uxtb	r3, r3
    15a8:	f003 031f 	and.w	r3, r3, #31
    15ac:	b2db      	uxtb	r3, r3
    15ae:	ea4f 1343 	mov.w	r3, r3, lsl #5
    15b2:	b2db      	uxtb	r3, r3
    15b4:	f103 0310 	add.w	r3, r3, #16
    15b8:	74fb      	strb	r3, [r7, #19]
            if (pos < pos_max) {                                /* See Note #3.                                         */
    15ba:	79fa      	ldrb	r2, [r7, #7]
    15bc:	7cfb      	ldrb	r3, [r7, #19]
    15be:	429a      	cmp	r2, r3
    15c0:	d233      	bcs.n	162a <CPU_IntSrcPrioGet+0x23a>
                 group = (pos - 16) / 4;
    15c2:	79fb      	ldrb	r3, [r7, #7]
    15c4:	f1a3 0310 	sub.w	r3, r3, #16
    15c8:	f103 0203 	add.w	r2, r3, #3
    15cc:	2b00      	cmp	r3, #0
    15ce:	bfb8      	it	lt
    15d0:	4613      	movlt	r3, r2
    15d2:	ea4f 03a3 	mov.w	r3, r3, asr #2
    15d6:	74bb      	strb	r3, [r7, #18]
                 nbr   = (pos - 16) % 4;
    15d8:	79fb      	ldrb	r3, [r7, #7]
    15da:	f1a3 0210 	sub.w	r2, r3, #16
    15de:	ea4f 73e2 	mov.w	r3, r2, asr #31
    15e2:	ea4f 7393 	mov.w	r3, r3, lsr #30
    15e6:	18d2      	adds	r2, r2, r3
    15e8:	f002 0203 	and.w	r2, r2, #3
    15ec:	1ad3      	subs	r3, r2, r3
    15ee:	747b      	strb	r3, [r7, #17]

                 CPU_CRITICAL_ENTER();
    15f0:	f016 fbf8 	bl	17de4 <CPU_SR_Save>
    15f4:	61b8      	str	r0, [r7, #24]
    15f6:	f000 f95f 	bl	18b8 <CPU_IntDisMeasStart>
                 temp  = CPU_REG_NVIC_PRIO(group);
    15fa:	7cbb      	ldrb	r3, [r7, #18]
    15fc:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
    1600:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
    1604:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	617b      	str	r3, [r7, #20]
                 CPU_CRITICAL_EXIT();
    160c:	f000 f980 	bl	1910 <CPU_IntDisMeasStop>
    1610:	69b8      	ldr	r0, [r7, #24]
    1612:	f016 fbeb 	bl	17dec <CPU_SR_Restore>

                 prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
    1616:	7c7b      	ldrb	r3, [r7, #17]
    1618:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    161c:	697a      	ldr	r2, [r7, #20]
    161e:	fa22 f303 	lsr.w	r3, r2, r3
    1622:	b29b      	uxth	r3, r3
    1624:	b2db      	uxtb	r3, r3
    1626:	83fb      	strh	r3, [r7, #30]
             } else {
                 prio  = DEF_INT_16S_MIN_VAL;
             }
             break;
    1628:	e002      	b.n	1630 <CPU_IntSrcPrioGet+0x240>
                 temp  = CPU_REG_NVIC_PRIO(group);
                 CPU_CRITICAL_EXIT();

                 prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
             } else {
                 prio  = DEF_INT_16S_MIN_VAL;
    162a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    162e:	83fb      	strh	r3, [r7, #30]
             }
             break;
    1630:	bf00      	nop
    }

    if (prio >= 0) {
    1632:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    1636:	2b00      	cmp	r3, #0
    1638:	db09      	blt.n	164e <CPU_IntSrcPrioGet+0x25e>
        prio_32 = CPU_RevBits((CPU_INT32U)prio);
    163a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    163e:	4618      	mov	r0, r3
    1640:	f016 fbda 	bl	17df8 <CPU_RevBits>
    1644:	60f8      	str	r0, [r7, #12]
        prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
    1646:	68fb      	ldr	r3, [r7, #12]
    1648:	ea4f 6313 	mov.w	r3, r3, lsr #24
    164c:	83fb      	strh	r3, [r7, #30]
    }

    return (prio);
    164e:	8bfb      	ldrh	r3, [r7, #30]
    1650:	b21b      	sxth	r3, r3
}
    1652:	4618      	mov	r0, r3
    1654:	f107 0720 	add.w	r7, r7, #32
    1658:	46bd      	mov	sp, r7
    165a:	bd80      	pop	{r7, pc}

0000165c <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
    165c:	b580      	push	{r7, lr}
    165e:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
    1660:	f000 f9a8 	bl	19b4 <CPU_TS_Init>
#endif
                                                                /* -------------- INIT INT DIS TIME MEAS -------------- */
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
    1664:	f000 f9b2 	bl	19cc <CPU_IntDisMeasInit>
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
    1668:	f000 f99e 	bl	19a8 <CPU_NameInit>
#endif
}
    166c:	bd80      	pop	{r7, pc}
    166e:	bf00      	nop

00001670 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
    1670:	b480      	push	{r7}
    1672:	af00      	add	r7, sp, #0
    while (DEF_ON) {
        ;
    }
    1674:	e7fe      	b.n	1674 <CPU_SW_Exception+0x4>
    1676:	bf00      	nop

00001678 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
    167e:	f04f 0300 	mov.w	r3, #0
    1682:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
    1684:	f016 fbae 	bl	17de4 <CPU_SR_Save>
    1688:	6078      	str	r0, [r7, #4]
    168a:	f000 f915 	bl	18b8 <CPU_IntDisMeasStart>
    Mem_Clr((void     *)&CPU_Name[0],
    168e:	f643 40e8 	movw	r0, #15592	; 0x3ce8
    1692:	f2c1 0000 	movt	r0, #4096	; 0x1000
    1696:	f04f 0110 	mov.w	r1, #16
    169a:	f003 ffab 	bl	55f4 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
    169e:	f000 f937 	bl	1910 <CPU_IntDisMeasStop>
    16a2:	6878      	ldr	r0, [r7, #4]
    16a4:	f016 fba2 	bl	17dec <CPU_SR_Restore>
}
    16a8:	f107 0708 	add.w	r7, r7, #8
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <CPU_NameGet>:
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameGet (CPU_CHAR  *p_name,
                   CPU_ERR   *p_err)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	b084      	sub	sp, #16
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    16ba:	f04f 0300 	mov.w	r3, #0
    16be:	60fb      	str	r3, [r7, #12]


    if (p_err == (CPU_ERR *)0) {
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d101      	bne.n	16ca <CPU_NameGet+0x1a>
        CPU_SW_EXCEPTION(;);
    16c6:	f7ff ffd3 	bl	1670 <CPU_SW_Exception>
    }

    if (p_name == (CPU_CHAR *)0) {
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d104      	bne.n	16da <CPU_NameGet+0x2a>
       *p_err = CPU_ERR_NULL_PTR;
    16d0:	683b      	ldr	r3, [r7, #0]
    16d2:	f04f 020a 	mov.w	r2, #10
    16d6:	801a      	strh	r2, [r3, #0]
        return;
    16d8:	e016      	b.n	1708 <CPU_NameGet+0x58>
    }

    CPU_CRITICAL_ENTER();
    16da:	f016 fb83 	bl	17de4 <CPU_SR_Save>
    16de:	60f8      	str	r0, [r7, #12]
    16e0:	f000 f8ea 	bl	18b8 <CPU_IntDisMeasStart>
   (void)Str_Copy_N(p_name,
    16e4:	6878      	ldr	r0, [r7, #4]
    16e6:	f643 41e8 	movw	r1, #15592	; 0x3ce8
    16ea:	f2c1 0100 	movt	r1, #4096	; 0x1000
    16ee:	f04f 0210 	mov.w	r2, #16
    16f2:	f003 f819 	bl	4728 <Str_Copy_N>
                   &CPU_Name[0],
                    CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
    16f6:	f000 f90b 	bl	1910 <CPU_IntDisMeasStop>
    16fa:	68f8      	ldr	r0, [r7, #12]
    16fc:	f016 fb76 	bl	17dec <CPU_SR_Restore>

   *p_err = CPU_ERR_NONE;
    1700:	683b      	ldr	r3, [r7, #0]
    1702:	f04f 0200 	mov.w	r2, #0
    1706:	801a      	strh	r2, [r3, #0]
}
    1708:	f107 0710 	add.w	r7, r7, #16
    170c:	46bd      	mov	sp, r7
    170e:	bd80      	pop	{r7, pc}

00001710 <CPU_NameSet>:
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameSet (const  CPU_CHAR  *p_name,
                          CPU_ERR   *p_err)
{
    1710:	b580      	push	{r7, lr}
    1712:	b084      	sub	sp, #16
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
    1718:	6039      	str	r1, [r7, #0]
    CPU_SIZE_T  len;
    CPU_SR_ALLOC();
    171a:	f04f 0300 	mov.w	r3, #0
    171e:	60fb      	str	r3, [r7, #12]


    if (p_err == (CPU_ERR *)0) {
    1720:	683b      	ldr	r3, [r7, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d101      	bne.n	172a <CPU_NameSet+0x1a>
        CPU_SW_EXCEPTION(;);
    1726:	f7ff ffa3 	bl	1670 <CPU_SW_Exception>
    }

    if (p_name == (const CPU_CHAR *)0) {
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	2b00      	cmp	r3, #0
    172e:	d104      	bne.n	173a <CPU_NameSet+0x2a>
       *p_err = CPU_ERR_NULL_PTR;
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	f04f 020a 	mov.w	r2, #10
    1736:	801a      	strh	r2, [r3, #0]
        return;
    1738:	e024      	b.n	1784 <CPU_NameSet+0x74>
    }

    len = Str_Len_N(p_name,
    173a:	6878      	ldr	r0, [r7, #4]
    173c:	f04f 0110 	mov.w	r1, #16
    1740:	f002 ffba 	bl	46b8 <Str_Len_N>
    1744:	60b8      	str	r0, [r7, #8]
                    CPU_CFG_NAME_SIZE);
    if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name size, ...           */
    1746:	68bb      	ldr	r3, [r7, #8]
    1748:	2b0f      	cmp	r3, #15
    174a:	d817      	bhi.n	177c <CPU_NameSet+0x6c>
        CPU_CRITICAL_ENTER();
    174c:	f016 fb4a 	bl	17de4 <CPU_SR_Save>
    1750:	60f8      	str	r0, [r7, #12]
    1752:	f000 f8b1 	bl	18b8 <CPU_IntDisMeasStart>
       (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host name.                  */
    1756:	f643 40e8 	movw	r0, #15592	; 0x3ce8
    175a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    175e:	6879      	ldr	r1, [r7, #4]
    1760:	f04f 0210 	mov.w	r2, #16
    1764:	f002 ffe0 	bl	4728 <Str_Copy_N>
                         p_name,
                         CPU_CFG_NAME_SIZE);
        CPU_CRITICAL_EXIT();
    1768:	f000 f8d2 	bl	1910 <CPU_IntDisMeasStop>
    176c:	68f8      	ldr	r0, [r7, #12]
    176e:	f016 fb3d 	bl	17dec <CPU_SR_Restore>
       *p_err = CPU_ERR_NONE;
    1772:	683b      	ldr	r3, [r7, #0]
    1774:	f04f 0200 	mov.w	r2, #0
    1778:	801a      	strh	r2, [r3, #0]
    177a:	e003      	b.n	1784 <CPU_NameSet+0x74>

    } else {
       *p_err = CPU_ERR_NAME_SIZE;
    177c:	683b      	ldr	r3, [r7, #0]
    177e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1782:	801a      	strh	r2, [r3, #0]
    }
}
    1784:	f107 0710 	add.w	r7, r7, #16
    1788:	46bd      	mov	sp, r7
    178a:	bd80      	pop	{r7, pc}

0000178c <CPU_TS_Get32>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_32_EN == DEF_ENABLED)
CPU_TS32  CPU_TS_Get32 (void)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
#endif


#if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
    ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bit ts cnts).          */
    1792:	f001 fdc3 	bl	331c <CPU_TS_TmrRd>
    1796:	6078      	str	r0, [r7, #4]
    CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for next update.            */
    ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
    CPU_INT_EN();
#endif

    return (ts);
    1798:	687b      	ldr	r3, [r7, #4]
}
    179a:	4618      	mov	r0, r3
    179c:	f107 0708 	add.w	r7, r7, #8
    17a0:	46bd      	mov	sp, r7
    17a2:	bd80      	pop	{r7, pc}

000017a4 <CPU_TS_Update>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_EN == DEF_ENABLED)
void  CPU_TS_Update (void)
{
    17a4:	b480      	push	{r7}
    17a6:	af00      	add	r7, sp, #0

#if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
     (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
   (void)CPU_TS_Get64();
#endif
}
    17a8:	46bd      	mov	sp, r7
    17aa:	bc80      	pop	{r7}
    17ac:	4770      	bx	lr
    17ae:	bf00      	nop

000017b0 <CPU_TS_TmrFreqGet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	b084      	sub	sp, #16
    17b4:	af00      	add	r7, sp, #0
    17b6:	6078      	str	r0, [r7, #4]
    CPU_TS_TMR_FREQ  freq_hz;


    if (p_err == (CPU_ERR *)0) {
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d101      	bne.n	17c2 <CPU_TS_TmrFreqGet+0x12>
        CPU_SW_EXCEPTION(;);
    17be:	f7ff ff57 	bl	1670 <CPU_SW_Exception>
    }

    freq_hz =  CPU_TS_TmrFreq_Hz;
    17c2:	f643 43cc 	movw	r3, #15564	; 0x3ccc
    17c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	60fb      	str	r3, [r7, #12]
   *p_err   = (freq_hz != 0) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d002      	beq.n	17da <CPU_TS_TmrFreqGet+0x2a>
    17d4:	f04f 0300 	mov.w	r3, #0
    17d8:	e001      	b.n	17de <CPU_TS_TmrFreqGet+0x2e>
    17da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    17de:	687a      	ldr	r2, [r7, #4]
    17e0:	8013      	strh	r3, [r2, #0]

    return (freq_hz);
    17e2:	68fb      	ldr	r3, [r7, #12]
}
    17e4:	4618      	mov	r0, r3
    17e6:	f107 0710 	add.w	r7, r7, #16
    17ea:	46bd      	mov	sp, r7
    17ec:	bd80      	pop	{r7, pc}
    17ee:	bf00      	nop

000017f0 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
    17f0:	b480      	push	{r7}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
    17f8:	f643 43cc 	movw	r3, #15564	; 0x3ccc
    17fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1800:	687a      	ldr	r2, [r7, #4]
    1802:	601a      	str	r2, [r3, #0]
}
    1804:	f107 070c 	add.w	r7, r7, #12
    1808:	46bd      	mov	sp, r7
    180a:	bc80      	pop	{r7}
    180c:	4770      	bx	lr
    180e:	bf00      	nop

00001810 <CPU_IntDisMeasMaxCurReset>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
{
    1810:	b580      	push	{r7, lr}
    1812:	b082      	sub	sp, #8
    1814:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
    1816:	f04f 0300 	mov.w	r3, #0
    181a:	607b      	str	r3, [r7, #4]


    time_max_cnts             = CPU_IntDisMeasMaxCurGet();
    181c:	f000 f814 	bl	1848 <CPU_IntDisMeasMaxCurGet>
    1820:	6038      	str	r0, [r7, #0]
    CPU_INT_DIS();
    1822:	f016 fadf 	bl	17de4 <CPU_SR_Save>
    1826:	6078      	str	r0, [r7, #4]
    CPU_IntDisMeasMaxCur_cnts = 0u;
    1828:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    182c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1830:	f04f 0200 	mov.w	r2, #0
    1834:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
    1836:	6878      	ldr	r0, [r7, #4]
    1838:	f016 fad8 	bl	17dec <CPU_SR_Restore>

    return (time_max_cnts);
    183c:	683b      	ldr	r3, [r7, #0]
}
    183e:	4618      	mov	r0, r3
    1840:	f107 0708 	add.w	r7, r7, #8
    1844:	46bd      	mov	sp, r7
    1846:	bd80      	pop	{r7, pc}

00001848 <CPU_IntDisMeasMaxCurGet>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
{
    1848:	b580      	push	{r7, lr}
    184a:	b084      	sub	sp, #16
    184c:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_tot_cnts;
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
    184e:	f04f 0300 	mov.w	r3, #0
    1852:	60fb      	str	r3, [r7, #12]


    CPU_INT_DIS();
    1854:	f016 fac6 	bl	17de4 <CPU_SR_Save>
    1858:	60f8      	str	r0, [r7, #12]
    time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
    185a:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    185e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	60bb      	str	r3, [r7, #8]
    CPU_INT_EN();
    1866:	68f8      	ldr	r0, [r7, #12]
    1868:	f016 fac0 	bl	17dec <CPU_SR_Restore>
    time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
    186c:	68b8      	ldr	r0, [r7, #8]
    186e:	f000 f923 	bl	1ab8 <CPU_IntDisMeasMaxCalc>
    1872:	6078      	str	r0, [r7, #4]

    return (time_max_cnts);
    1874:	687b      	ldr	r3, [r7, #4]
}
    1876:	4618      	mov	r0, r3
    1878:	f107 0710 	add.w	r7, r7, #16
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}

00001880 <CPU_IntDisMeasMaxGet>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
{
    1880:	b580      	push	{r7, lr}
    1882:	b084      	sub	sp, #16
    1884:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_tot_cnts;
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
    1886:	f04f 0300 	mov.w	r3, #0
    188a:	60fb      	str	r3, [r7, #12]


    CPU_INT_DIS();
    188c:	f016 faaa 	bl	17de4 <CPU_SR_Save>
    1890:	60f8      	str	r0, [r7, #12]
    time_tot_cnts = CPU_IntDisMeasMax_cnts;
    1892:	f643 43c8 	movw	r3, #15560	; 0x3cc8
    1896:	f2c1 0300 	movt	r3, #4096	; 0x1000
    189a:	681b      	ldr	r3, [r3, #0]
    189c:	60bb      	str	r3, [r7, #8]
    CPU_INT_EN();
    189e:	68f8      	ldr	r0, [r7, #12]
    18a0:	f016 faa4 	bl	17dec <CPU_SR_Restore>
    time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
    18a4:	68b8      	ldr	r0, [r7, #8]
    18a6:	f000 f907 	bl	1ab8 <CPU_IntDisMeasMaxCalc>
    18aa:	6078      	str	r0, [r7, #4]

    return (time_max_cnts);
    18ac:	687b      	ldr	r3, [r7, #4]
}
    18ae:	4618      	mov	r0, r3
    18b0:	f107 0710 	add.w	r7, r7, #16
    18b4:	46bd      	mov	sp, r7
    18b6:	bd80      	pop	{r7, pc}

000018b8 <CPU_IntDisMeasStart>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStart (void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0
    CPU_IntDisMeasCtr++;
    18bc:	f643 43e0 	movw	r3, #15584	; 0x3ce0
    18c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    18c4:	881b      	ldrh	r3, [r3, #0]
    18c6:	f103 0301 	add.w	r3, r3, #1
    18ca:	b29a      	uxth	r2, r3
    18cc:	f643 43e0 	movw	r3, #15584	; 0x3ce0
    18d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    18d4:	801a      	strh	r2, [r3, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...                       */
    18d6:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    18da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    18de:	881b      	ldrh	r3, [r3, #0]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d107      	bne.n	18f4 <CPU_IntDisMeasStart+0x3c>
        CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start time.                   */
    18e4:	f001 fd1a 	bl	331c <CPU_TS_TmrRd>
    18e8:	4602      	mov	r2, r0
    18ea:	f643 43d0 	movw	r3, #15568	; 0x3cd0
    18ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    18f2:	601a      	str	r2, [r3, #0]
    }
    CPU_IntDisNestCtr++;
    18f4:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    18f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    18fc:	881b      	ldrh	r3, [r3, #0]
    18fe:	f103 0301 	add.w	r3, r3, #1
    1902:	b29a      	uxth	r2, r3
    1904:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    1908:	f2c1 0300 	movt	r3, #4096	; 0x1000
    190c:	801a      	strh	r2, [r3, #0]
}
    190e:	bd80      	pop	{r7, pc}

00001910 <CPU_IntDisMeasStop>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStop (void)
{
    1910:	b580      	push	{r7, lr}
    1912:	b082      	sub	sp, #8
    1914:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_ints_disd_cnts;


    CPU_IntDisNestCtr--;
    1916:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    191a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    191e:	881b      	ldrh	r3, [r3, #0]
    1920:	f103 33ff 	add.w	r3, r3, #4294967295
    1924:	b29a      	uxth	r2, r3
    1926:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    192a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    192e:	801a      	strh	r2, [r3, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,        ...              */
    1930:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    1934:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1938:	881b      	ldrh	r3, [r3, #0]
    193a:	2b00      	cmp	r3, #0
    193c:	d12f      	bne.n	199e <CPU_IntDisMeasStop+0x8e>
        CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop time & ...              */
    193e:	f001 fced 	bl	331c <CPU_TS_TmrRd>
    1942:	4602      	mov	r2, r0
    1944:	f643 43d8 	movw	r3, #15576	; 0x3cd8
    1948:	f2c1 0300 	movt	r3, #4096	; 0x1000
    194c:	601a      	str	r2, [r3, #0]
                                                                    /* ... calc ints dis'd tot  time (see Note #1b2A).  */
        time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
    194e:	f643 43d8 	movw	r3, #15576	; 0x3cd8
    1952:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1956:	681a      	ldr	r2, [r3, #0]
    1958:	f643 43d0 	movw	r3, #15568	; 0x3cd0
    195c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	1ad3      	subs	r3, r2, r3
    1964:	607b      	str	r3, [r7, #4]
                                  CPU_IntDisMeasStart_cnts;
                                                                    /* Calc max ints dis'd times.                       */
        if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
    1966:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    196a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    196e:	681a      	ldr	r2, [r3, #0]
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	429a      	cmp	r2, r3
    1974:	d205      	bcs.n	1982 <CPU_IntDisMeasStop+0x72>
            CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
    1976:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    197a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    197e:	687a      	ldr	r2, [r7, #4]
    1980:	601a      	str	r2, [r3, #0]
        }
        if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
    1982:	f643 43c8 	movw	r3, #15560	; 0x3cc8
    1986:	f2c1 0300 	movt	r3, #4096	; 0x1000
    198a:	681a      	ldr	r2, [r3, #0]
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	429a      	cmp	r2, r3
    1990:	d205      	bcs.n	199e <CPU_IntDisMeasStop+0x8e>
            CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
    1992:	f643 43c8 	movw	r3, #15560	; 0x3cc8
    1996:	f2c1 0300 	movt	r3, #4096	; 0x1000
    199a:	687a      	ldr	r2, [r7, #4]
    199c:	601a      	str	r2, [r3, #0]
        }
    }
}
    199e:	f107 0708 	add.w	r7, r7, #8
    19a2:	46bd      	mov	sp, r7
    19a4:	bd80      	pop	{r7, pc}
    19a6:	bf00      	nop

000019a8 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
    CPU_NameClr();
    19ac:	f7ff fe64 	bl	1678 <CPU_NameClr>
}
    19b0:	bd80      	pop	{r7, pc}
    19b2:	bf00      	nop

000019b4 <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
    19b8:	f643 43cc 	movw	r3, #15564	; 0x3ccc
    19bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    19c0:	f04f 0200 	mov.w	r2, #0
    19c4:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
    19c6:	f001 fc83 	bl	32d0 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
    19ca:	bd80      	pop	{r7, pc}

000019cc <CPU_IntDisMeasInit>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
static  void  CPU_IntDisMeasInit (void)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b084      	sub	sp, #16
    19d0:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_meas_tot_cnts;
    CPU_INT16U  i;
    CPU_SR_ALLOC();
    19d2:	f04f 0300 	mov.w	r3, #0
    19d6:	607b      	str	r3, [r7, #4]

                                                                /* ----------- INIT INT DIS TIME MEAS CTRLS ----------- */
    CPU_IntDisMeasCtr         = 0u;
    19d8:	f643 43e0 	movw	r3, #15584	; 0x3ce0
    19dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    19e0:	f04f 0200 	mov.w	r2, #0
    19e4:	801a      	strh	r2, [r3, #0]
    CPU_IntDisNestCtr         = 0u;
    19e6:	f643 43d4 	movw	r3, #15572	; 0x3cd4
    19ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    19ee:	f04f 0200 	mov.w	r2, #0
    19f2:	801a      	strh	r2, [r3, #0]
    CPU_IntDisMeasStart_cnts  = 0u;
    19f4:	f643 43d0 	movw	r3, #15568	; 0x3cd0
    19f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    19fc:	f04f 0200 	mov.w	r2, #0
    1a00:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasStop_cnts   = 0u;
    1a02:	f643 43d8 	movw	r3, #15576	; 0x3cd8
    1a06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a0a:	f04f 0200 	mov.w	r2, #0
    1a0e:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMaxCur_cnts = 0u;
    1a10:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    1a14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a18:	f04f 0200 	mov.w	r2, #0
    1a1c:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMax_cnts    = 0u;
    1a1e:	f643 43c8 	movw	r3, #15560	; 0x3cc8
    1a22:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a26:	f04f 0200 	mov.w	r2, #0
    1a2a:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasOvrhd_cnts  = 0u;
    1a2c:	f643 43e4 	movw	r3, #15588	; 0x3ce4
    1a30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a34:	f04f 0200 	mov.w	r2, #0
    1a38:	601a      	str	r2, [r3, #0]

                                                                /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
    time_meas_tot_cnts = 0u;
    1a3a:	f04f 0300 	mov.w	r3, #0
    1a3e:	60fb      	str	r3, [r7, #12]
    CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
    1a40:	f016 f9d0 	bl	17de4 <CPU_SR_Save>
    1a44:	6078      	str	r0, [r7, #4]
    for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
    1a46:	f04f 0300 	mov.w	r3, #0
    1a4a:	817b      	strh	r3, [r7, #10]
    1a4c:	e016      	b.n	1a7c <CPU_IntDisMeasInit+0xb0>
        CPU_IntDisMeasMaxCur_cnts = 0u;
    1a4e:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    1a52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a56:	f04f 0200 	mov.w	r2, #0
    1a5a:	601a      	str	r2, [r3, #0]
        CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
    1a5c:	f7ff ff2c 	bl	18b8 <CPU_IntDisMeasStart>
        CPU_IntDisMeasStop();
    1a60:	f7ff ff56 	bl	1910 <CPU_IntDisMeasStop>
        time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
    1a64:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    1a68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	68fa      	ldr	r2, [r7, #12]
    1a70:	18d3      	adds	r3, r2, r3
    1a72:	60fb      	str	r3, [r7, #12]
    CPU_IntDisMeasOvrhd_cnts  = 0u;

                                                                /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
    time_meas_tot_cnts = 0u;
    CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
    for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
    1a74:	897b      	ldrh	r3, [r7, #10]
    1a76:	f103 0301 	add.w	r3, r3, #1
    1a7a:	817b      	strh	r3, [r7, #10]
    1a7c:	897b      	ldrh	r3, [r7, #10]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d0e5      	beq.n	1a4e <CPU_IntDisMeasInit+0x82>
        CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
        CPU_IntDisMeasStop();
        time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
    }
                                                                /* ... to calc avg time meas ovrhd (see Note #3a).      */
    CPU_IntDisMeasOvrhd_cnts  = (time_meas_tot_cnts + (CPU_CFG_INT_DIS_MEAS_OVRHD_NBR / 2))
    1a82:	f643 43e4 	movw	r3, #15588	; 0x3ce4
    1a86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a8a:	68fa      	ldr	r2, [r7, #12]
    1a8c:	601a      	str	r2, [r3, #0]
                                                    /  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR;
    CPU_IntDisMeasMaxCur_cnts =  0u;                            /* Reset max ints dis'd times.                          */
    1a8e:	f643 43dc 	movw	r3, #15580	; 0x3cdc
    1a92:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1a96:	f04f 0200 	mov.w	r2, #0
    1a9a:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMax_cnts    =  0u;
    1a9c:	f643 43c8 	movw	r3, #15560	; 0x3cc8
    1aa0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1aa4:	f04f 0200 	mov.w	r2, #0
    1aa8:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
    1aaa:	6878      	ldr	r0, [r7, #4]
    1aac:	f016 f99e 	bl	17dec <CPU_SR_Restore>
}
    1ab0:	f107 0710 	add.w	r7, r7, #16
    1ab4:	46bd      	mov	sp, r7
    1ab6:	bd80      	pop	{r7, pc}

00001ab8 <CPU_IntDisMeasMaxCalc>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc (CPU_TS_TMR  time_tot_cnts)
{
    1ab8:	b480      	push	{r7}
    1aba:	b085      	sub	sp, #20
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    CPU_TS_TMR  time_max_cnts;


    time_max_cnts = time_tot_cnts;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	60fb      	str	r3, [r7, #12]
    if (time_max_cnts >  CPU_IntDisMeasOvrhd_cnts) {            /* If       max ints dis'd time >  ovrhd time, ...      */
    1ac4:	f643 43e4 	movw	r3, #15588	; 0x3ce4
    1ac8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	68fa      	ldr	r2, [r7, #12]
    1ad0:	429a      	cmp	r2, r3
    1ad2:	d908      	bls.n	1ae6 <CPU_IntDisMeasMaxCalc+0x2e>
        time_max_cnts -= CPU_IntDisMeasOvrhd_cnts;              /* ... adj  max ints dis'd time by ovrhd time; ...      */
    1ad4:	f643 43e4 	movw	r3, #15588	; 0x3ce4
    1ad8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	68fa      	ldr	r2, [r7, #12]
    1ae0:	1ad3      	subs	r3, r2, r3
    1ae2:	60fb      	str	r3, [r7, #12]
    1ae4:	e002      	b.n	1aec <CPU_IntDisMeasMaxCalc+0x34>
    } else {                                                    /* ... else max ints dis'd time <  ovrhd time, ...      */
        time_max_cnts  = 0u;                                    /* ... clr  max ints dis'd time (see Note #2).          */
    1ae6:	f04f 0300 	mov.w	r3, #0
    1aea:	60fb      	str	r3, [r7, #12]
    }

    return (time_max_cnts);
    1aec:	68fb      	ldr	r3, [r7, #12]
}
    1aee:	4618      	mov	r0, r3
    1af0:	f107 0714 	add.w	r7, r7, #20
    1af4:	46bd      	mov	sp, r7
    1af6:	bc80      	pop	{r7}
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <BSP_LCD_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_BOOLEAN   BSP_LCD_Init (void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b08a      	sub	sp, #40	; 0x28
    1b00:	af04      	add	r7, sp, #16
    CPU_INT16U       dev_id;
    OS_ERR           err;
    CPU_ERR          cpu_err;


    CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,         /* ... Port0.                                           */
    1b02:	f04f 0300 	mov.w	r3, #0
    1b06:	9300      	str	r3, [sp, #0]
    1b08:	f04f 0300 	mov.w	r3, #0
    1b0c:	9301      	str	r3, [sp, #4]
    1b0e:	f04f 0300 	mov.w	r3, #0
    1b12:	9302      	str	r3, [sp, #8]
    1b14:	f04f 0000 	mov.w	r0, #0
    1b18:	f04f 0140 	mov.w	r1, #64	; 0x40
    1b1c:	f04f 0201 	mov.w	r2, #1
    1b20:	f04f 0301 	mov.w	r3, #1
    1b24:	f00f ff7e 	bl	11a24 <CSP_GPIO_Cfg>
                 (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.                              */
                 (CSP_OPT        )0,
                 (CSP_OPT        )CSP_GPIO_FNCT_00);


    CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_00,         /* ... Port0.                                           */
    1b28:	f04f 0300 	mov.w	r3, #0
    1b2c:	9300      	str	r3, [sp, #0]
    1b2e:	f04f 0300 	mov.w	r3, #0
    1b32:	9301      	str	r3, [sp, #4]
    1b34:	f04f 0302 	mov.w	r3, #2
    1b38:	9302      	str	r3, [sp, #8]
    1b3a:	f04f 0000 	mov.w	r0, #0
    1b3e:	f44f 7160 	mov.w	r1, #896	; 0x380
    1b42:	f04f 0200 	mov.w	r2, #0
    1b46:	f04f 0301 	mov.w	r3, #1
    1b4a:	f00f ff6b 	bl	11a24 <CSP_GPIO_Cfg>
                 (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,      /* ... Neither  pull-up nor pull-down resistor.         */
                 (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.                              */
                 (CSP_OPT        )0,
                 (CSP_OPT        )CSP_GPIO_FNCT_02);

    CSP_GPIO_Cfg((CSP_DEV_NBR    )CSP_GPIO_PORT_NBR_04,         /* ... Port0.                                           */
    1b4e:	f04f 0300 	mov.w	r3, #0
    1b52:	9300      	str	r3, [sp, #0]
    1b54:	f04f 0300 	mov.w	r3, #0
    1b58:	9301      	str	r3, [sp, #4]
    1b5a:	f04f 0300 	mov.w	r3, #0
    1b5e:	9302      	str	r3, [sp, #8]
    1b60:	f04f 0004 	mov.w	r0, #4
    1b64:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
    1b68:	f04f 0201 	mov.w	r2, #1
    1b6c:	f04f 0301 	mov.w	r3, #1
    1b70:	f00f ff58 	bl	11a24 <CSP_GPIO_Cfg>
                 (CSP_OPT_FLAGS  )CSP_GPIO_FLAG_MODE_NONE,      /* ... Neither  pull-up nor pull-down resistor.         */
                 (CPU_BOOLEAN    )DEF_NO,                       /* ... Interrupt disabled.                              */
                 (CSP_OPT        )0,
                 (CSP_OPT        )CSP_GPIO_FNCT_00);

    CSP_PM_PerClkDivCfg(CSP_PM_PER_CLK_NBR_SSP_01,              /* Set the SSP frequency to CLK /2                      */
    1b74:	f04f 000a 	mov.w	r0, #10
    1b78:	f04f 0102 	mov.w	r1, #2
    1b7c:	f014 f88c 	bl	15c98 <CSP_PM_PerClkDivCfg>
                     2u);

    pclk_freq = CSP_PM_PerClkFreqGet(CSP_PM_PER_CLK_NBR_SSP_01);
    1b80:	f04f 000a 	mov.w	r0, #10
    1b84:	f014 f9c4 	bl	15f10 <CSP_PM_PerClkFreqGet>
    1b88:	6178      	str	r0, [r7, #20]

    if (pclk_freq < BSP_LCD_ILI9320_SPI_FREQ) {
    1b8a:	697a      	ldr	r2, [r7, #20]
    1b8c:	f647 033f 	movw	r3, #30783	; 0x783f
    1b90:	f2c0 137d 	movt	r3, #381	; 0x17d
    1b94:	429a      	cmp	r2, r3
    1b96:	d802      	bhi.n	1b9e <BSP_LCD_Init+0xa2>
        return (DEF_FAIL);
    1b98:	f04f 0300 	mov.w	r3, #0
    1b9c:	e2a0      	b.n	20e0 <BSP_LCD_Init+0x5e4>
    }

                                                                /* Calculate the divider. Preescaler = 2u.              */
    clk_div  = ((pclk_freq / BSP_LCD_ILI9320_SPI_FREQ) - 1u) / 2u;
    1b9e:	697a      	ldr	r2, [r7, #20]
    1ba0:	f643 3389 	movw	r3, #15241	; 0x3b89
    1ba4:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
    1ba8:	fba3 1302 	umull	r1, r3, r3, r2
    1bac:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1bb0:	f103 33ff 	add.w	r3, r3, #4294967295
    1bb4:	ea4f 0353 	mov.w	r3, r3, lsr #1
    1bb8:	827b      	strh	r3, [r7, #18]

    if (clk_div > DEF_INT_08U_MAX_VAL) {
    1bba:	8a7b      	ldrh	r3, [r7, #18]
    1bbc:	2bff      	cmp	r3, #255	; 0xff
    1bbe:	d902      	bls.n	1bc6 <BSP_LCD_Init+0xca>
        return (DEF_FAIL);
    1bc0:	f04f 0300 	mov.w	r3, #0
    1bc4:	e28c      	b.n	20e0 <BSP_LCD_Init+0x5e4>
    }

    OSMutexCreate((OS_MUTEX *)&BSP_LCD_Ctxt.Lock,               /* Create mutex to lock the LCD.                        */
    1bc6:	486b      	ldr	r0, [pc, #428]	; (1d74 <BSP_LCD_Init+0x278>)
    1bc8:	f24c 21e0 	movw	r1, #49888	; 0xc2e0
    1bcc:	f2c0 0102 	movt	r1, #2
    1bd0:	f107 0308 	add.w	r3, r7, #8
    1bd4:	461a      	mov	r2, r3
    1bd6:	f00a fc83 	bl	c4e0 <OSMutexCreate>
                  (CPU_CHAR *)"LCD lock",
                  (OS_ERR   *)&err);

    if (err != OS_ERR_NONE) {
    1bda:	893b      	ldrh	r3, [r7, #8]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d002      	beq.n	1be6 <BSP_LCD_Init+0xea>
        return (DEF_FAIL);
    1be0:	f04f 0300 	mov.w	r3, #0
    1be4:	e27c      	b.n	20e0 <BSP_LCD_Init+0x5e4>
    }

    BSP_LCD_Lock();
    1be6:	f001 fb4b 	bl	3280 <BSP_LCD_Lock>

    CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_SSP_01);                 /* Enable SSP1 peripheral clock.                        */
    1bea:	f04f 000a 	mov.w	r0, #10
    1bee:	f014 f919 	bl	15e24 <CSP_PM_PerClkEn>

    BSP_LCD_SSP1_REG_CR0       = (8u - 1u)                      /* ... 8 bits data size.                                */
    1bf2:	f04f 0300 	mov.w	r3, #0
    1bf6:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1bfa:	f04f 02c7 	mov.w	r2, #199	; 0xc7
    1bfe:	601a      	str	r2, [r3, #0]
                               | BSP_LCD_SSP1_BIT_CR0_CPOL      /* ... High polarity.                                   */
                               | BSP_LCD_SSP1_BIT_CR0_CPHA;     /* ... Capture serial data on the second clock.         */

    BSP_LCD_SSP1_REG_CR1       = CSP_SSP_BIT_CR1_SSE;           /* Enable the SSP.                                      */
    1c00:	f04f 0304 	mov.w	r3, #4
    1c04:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1c08:	f04f 0202 	mov.w	r2, #2
    1c0c:	601a      	str	r2, [r3, #0]
    BSP_LCD_SSP1_REG_MIS       = DEF_BIT_NONE;                  /* Disable all interrupts.                              */
    1c0e:	f04f 031c 	mov.w	r3, #28
    1c12:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1c16:	f04f 0200 	mov.w	r2, #0
    1c1a:	601a      	str	r2, [r3, #0]
    BSP_LCD_SSP1_REG_CPSR      = 2u;                            /* Preescaler = 2.                                      */
    1c1c:	f04f 0310 	mov.w	r3, #16
    1c20:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1c24:	f04f 0202 	mov.w	r2, #2
    1c28:	601a      	str	r2, [r3, #0]

    BSP_LCD_Ctxt.BgColor       = BSP_LCD_COLOR_BLACK;
    1c2a:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c32:	f04f 0200 	mov.w	r2, #0
    1c36:	801a      	strh	r2, [r3, #0]
    BSP_LCD_Ctxt.TextFontPtr   = (BSP_LCD_FONT    *)0;
    1c38:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c40:	f04f 0200 	mov.w	r2, #0
    1c44:	60da      	str	r2, [r3, #12]
    BSP_LCD_Ctxt.TextColor     = (BSP_LCD_COLOR    )BSP_LCD_COLOR_WHITE;
    1c46:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1c52:	805a      	strh	r2, [r3, #2]
    BSP_LCD_Ctxt.TextLineMax   = (BSP_LCD_TEXT_POS )0u;
    1c54:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c58:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c5c:	f04f 0200 	mov.w	r2, #0
    1c60:	711a      	strb	r2, [r3, #4]
    BSP_LCD_Ctxt.TextLineCur   = (BSP_LCD_TEXT_POS )0u;
    1c62:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c6a:	f04f 0200 	mov.w	r2, #0
    1c6e:	715a      	strb	r2, [r3, #5]
    BSP_LCD_Ctxt.TextColMax    = (BSP_LCD_TEXT_POS )0u;
    1c70:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c78:	f04f 0200 	mov.w	r2, #0
    1c7c:	719a      	strb	r2, [r3, #6]
    BSP_LCD_Ctxt.TextColCur    = (BSP_LCD_TEXT_POS )0u;
    1c7e:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c86:	f04f 0200 	mov.w	r2, #0
    1c8a:	71da      	strb	r2, [r3, #7]
    BSP_LCD_Ctxt.TextPixelCur  = (BSP_LCD_PIXEL    )0u;
    1c8c:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1c94:	f04f 0200 	mov.w	r2, #0
    1c98:	811a      	strh	r2, [r3, #8]
    BSP_LCD_Ctxt.FontTblPtr    = (BSP_LCD_FONT   **)0;
    1c9a:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1c9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1ca2:	f04f 0200 	mov.w	r2, #0
    1ca6:	645a      	str	r2, [r3, #68]	; 0x44
    BSP_LCD_Ctxt.ImgTblPtr     = (BSP_LCD_IMG    **)0;
    1ca8:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1cac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1cb0:	f04f 0200 	mov.w	r2, #0
    1cb4:	641a      	str	r2, [r3, #64]	; 0x40


    CSP_GPIO_BitSet(CSP_GPIO_PORT_NBR_04,
    1cb6:	f04f 0004 	mov.w	r0, #4
    1cba:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1cbe:	f010 fa11 	bl	120e4 <CSP_GPIO_BitSet>
                    DEF_BIT_29);

                                                                /* Calculate the max SPI timeout in TS value.           */
    tmr_freq                 = CPU_TS_TmrFreqGet(&cpu_err);
    1cc2:	f107 0306 	add.w	r3, r7, #6
    1cc6:	4618      	mov	r0, r3
    1cc8:	f7ff fd72 	bl	17b0 <CPU_TS_TmrFreqGet>
    1ccc:	60f8      	str	r0, [r7, #12]
    tmr_freq                /= DEF_TIME_NBR_mS_PER_SEC;
    1cce:	68fa      	ldr	r2, [r7, #12]
    1cd0:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    1cd4:	f2c1 0362 	movt	r3, #4194	; 0x1062
    1cd8:	fba3 1302 	umull	r1, r3, r3, r2
    1cdc:	ea4f 1393 	mov.w	r3, r3, lsr #6
    1ce0:	60fb      	str	r3, [r7, #12]
    pclk_freq               /= DEF_TIME_NBR_mS_PER_SEC;
    1ce2:	697a      	ldr	r2, [r7, #20]
    1ce4:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    1ce8:	f2c1 0362 	movt	r3, #4194	; 0x1062
    1cec:	fba3 1302 	umull	r1, r3, r3, r2
    1cf0:	ea4f 1393 	mov.w	r3, r3, lsr #6
    1cf4:	617b      	str	r3, [r7, #20]
    BSP_LCD_Ctxt.MaxTimeOut = (tmr_freq  * (32u))
    1cf6:	68fb      	ldr	r3, [r7, #12]
    1cf8:	ea4f 1243 	mov.w	r2, r3, lsl #5
                            / (pclk_freq / (2u * (clk_div + 1u)));
    1cfc:	8a7b      	ldrh	r3, [r7, #18]
    1cfe:	f103 0301 	add.w	r3, r3, #1
    1d02:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1d06:	6979      	ldr	r1, [r7, #20]
    1d08:	fbb1 f3f3 	udiv	r3, r1, r3
    1d0c:	fbb2 f2f3 	udiv	r2, r2, r3

                                                                /* Calculate the max SPI timeout in TS value.           */
    tmr_freq                 = CPU_TS_TmrFreqGet(&cpu_err);
    tmr_freq                /= DEF_TIME_NBR_mS_PER_SEC;
    pclk_freq               /= DEF_TIME_NBR_mS_PER_SEC;
    BSP_LCD_Ctxt.MaxTimeOut = (tmr_freq  * (32u))
    1d10:	f640 33d0 	movw	r3, #3024	; 0xbd0
    1d14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1d18:	63da      	str	r2, [r3, #60]	; 0x3c
                            / (pclk_freq / (2u * (clk_div + 1u)));

    OSTimeDlyHMSM(0u, 0u, 0u, 200u,                             /* Discharge cap power voltage (200ms).                 */
    1d1a:	f04f 0300 	mov.w	r3, #0
    1d1e:	9300      	str	r3, [sp, #0]
    1d20:	f107 0308 	add.w	r3, r7, #8
    1d24:	9301      	str	r3, [sp, #4]
    1d26:	f04f 0000 	mov.w	r0, #0
    1d2a:	f04f 0100 	mov.w	r1, #0
    1d2e:	f04f 0200 	mov.w	r2, #0
    1d32:	f04f 03c8 	mov.w	r3, #200	; 0xc8
    1d36:	f007 fd7b 	bl	9830 <OSTimeDlyHMSM>
                  OS_OPT_TIME_HMSM_STRICT,
                  &err);

    BSP_LCD_BackLightOff();
    1d3a:	f000 ff49 	bl	2bd0 <BSP_LCD_BackLightOff>

    dev_id = BSP_LCD_CtrlRegRd(ILI9320_REG_DVR_CODE_RD);       /* Read the Device code.                                */
    1d3e:	f04f 0000 	mov.w	r0, #0
    1d42:	f001 f9cb 	bl	30dc <BSP_LCD_CtrlRegRd>
    1d46:	4603      	mov	r3, r0
    1d48:	817b      	strh	r3, [r7, #10]
    dev_id = BSP_LCD_CtrlRegRd(ILI9320_REG_DVR_CODE_RD);       /* Read the Device code.                                */
    1d4a:	f04f 0000 	mov.w	r0, #0
    1d4e:	f001 f9c5 	bl	30dc <BSP_LCD_CtrlRegRd>
    1d52:	4603      	mov	r3, r0
    1d54:	817b      	strh	r3, [r7, #10]

    if ((dev_id != BSP_LCD_ILI9320_DEV_CODE ) &&
    1d56:	897a      	ldrh	r2, [r7, #10]
    1d58:	f64c 1390 	movw	r3, #51600	; 0xc990
    1d5c:	429a      	cmp	r2, r3
    1d5e:	d00b      	beq.n	1d78 <BSP_LCD_Init+0x27c>
    1d60:	897a      	ldrh	r2, [r7, #10]
    1d62:	f642 2304 	movw	r3, #10756	; 0x2a04
    1d66:	429a      	cmp	r2, r3
    1d68:	d006      	beq.n	1d78 <BSP_LCD_Init+0x27c>
        (dev_id != BSP_LCD_SPFD5408_DEV_CODE)) {
        BSP_LCD_Unlock();
    1d6a:	f001 fa9f 	bl	32ac <BSP_LCD_Unlock>
        return (DEF_FAIL);
    1d6e:	f04f 0300 	mov.w	r3, #0
    1d72:	e1b5      	b.n	20e0 <BSP_LCD_Init+0x5e4>
    1d74:	10000be0 	.word	0x10000be0
    }

                                                                /* -------------- ILI9320 INITIAL SEQUENCE ------------ */
    BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL1,                /* Set SS bit.                                          */
    1d78:	f04f 0001 	mov.w	r0, #1
    1d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1d80:	f001 f9f6 	bl	3170 <BSP_LCD_CtrlRegWr>
                      ILI9320_BIT_DRV_OUT_CTRL1_SS);

    BSP_LCD_CtrlRegWr(ILI9320_REG_LCD_DRV_CTRL1,                /* Set 1 line inversion.                                */
    1d84:	f04f 0002 	mov.w	r0, #2
    1d88:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1d8c:	f001 f9f0 	bl	3170 <BSP_LCD_CtrlRegWr>
                      ILI9320_BIT_LCD_DRV_CTRL1_SET_LINE);

    BSP_LCD_CtrlRegWr(ILI9320_REG_RESIZE_CTRL,                  /* Resize register.                                     */
    1d90:	f04f 0004 	mov.w	r0, #4
    1d94:	f04f 0100 	mov.w	r1, #0
    1d98:	f001 f9ea 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);                            /* .... No resizing, not remaining pixels.              */

    BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL2,                   /* 2 lines front, 7 back porch.                         */
    1d9c:	f04f 0008 	mov.w	r0, #8
    1da0:	f240 2107 	movw	r1, #519	; 0x207
    1da4:	f001 f9e4 	bl	3170 <BSP_LCD_CtrlRegWr>
                      (2 << 8u) | (7u << 0u));

    BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL3,                   /* Set non-disp area refresh cyc ISC.                   */
    1da8:	f04f 0009 	mov.w	r0, #9
    1dac:	f04f 0100 	mov.w	r1, #0
    1db0:	f001 f9de 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);

    BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL4,                   /* FMARK function                                       */
    1db4:	f04f 000a 	mov.w	r0, #10
    1db8:	f04f 0100 	mov.w	r1, #0
    1dbc:	f001 f9d8 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);

    BSP_LCD_CtrlRegWr(ILI9320_REG_RGB_DISP_IF_CTRL1,            /* RGB interface setting.                               */
    1dc0:	f04f 000c 	mov.w	r0, #12
    1dc4:	f04f 0100 	mov.w	r1, #0
    1dc8:	f001 f9d2 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);

    BSP_LCD_CtrlRegWr(ILI9320_REG_FRAME_MAKER_POS,              /* Frame marker Position.                               */
    1dcc:	f04f 000d 	mov.w	r0, #13
    1dd0:	f04f 0100 	mov.w	r1, #0
    1dd4:	f001 f9cc 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);

    BSP_LCD_CtrlRegWr(ILI9320_REG_RGB_DISP_IF_CTRL2,            /* RGB interface polarity.                              */
    1dd8:	f04f 000f 	mov.w	r0, #15
    1ddc:	f04f 0100 	mov.w	r1, #0
    1de0:	f001 f9c6 	bl	3170 <BSP_LCD_CtrlRegWr>
                      DEF_BIT_NONE);
                                                                /* ------------------- POWER ON SEQUENCE -------------- */
    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL1, DEF_BIT_NONE);     /* Reset Power Control 1.                               */
    1de4:	f04f 0010 	mov.w	r0, #16
    1de8:	f04f 0100 	mov.w	r1, #0
    1dec:	f001 f9c0 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL2, DEF_BIT_NONE);     /* Reset Power Control 2.                               */
    1df0:	f04f 0011 	mov.w	r0, #17
    1df4:	f04f 0100 	mov.w	r1, #0
    1df8:	f001 f9ba 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL3, DEF_BIT_NONE);     /* Reset Power Control 3.                               */
    1dfc:	f04f 0012 	mov.w	r0, #18
    1e00:	f04f 0100 	mov.w	r1, #0
    1e04:	f001 f9b4 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL4, DEF_BIT_NONE);     /* Reset Power Control 4.                               */
    1e08:	f04f 0013 	mov.w	r0, #19
    1e0c:	f04f 0100 	mov.w	r1, #0
    1e10:	f001 f9ae 	bl	3170 <BSP_LCD_CtrlRegWr>

    OSTimeDlyHMSM(0u, 0u, 0u, 200u,                             /* Discharge cap power voltage (200ms).                 */
    1e14:	f04f 0300 	mov.w	r3, #0
    1e18:	9300      	str	r3, [sp, #0]
    1e1a:	f107 0308 	add.w	r3, r7, #8
    1e1e:	9301      	str	r3, [sp, #4]
    1e20:	f04f 0000 	mov.w	r0, #0
    1e24:	f04f 0100 	mov.w	r1, #0
    1e28:	f04f 0200 	mov.w	r2, #0
    1e2c:	f04f 03c8 	mov.w	r3, #200	; 0xc8
    1e30:	f007 fcfe 	bl	9830 <OSTimeDlyHMSM>
                  OS_OPT_TIME_HMSM_STRICT,
                  &err);

    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL1,
    1e34:	f04f 0010 	mov.w	r0, #16
    1e38:	f241 2190 	movw	r1, #4752	; 0x1290
    1e3c:	f001 f998 	bl	3170 <BSP_LCD_CtrlRegWr>
                      (ILI9320_BIT_PWR_CTRL1_AP_0_50 |          /* ... 0.5 Current.                                     */
                       ILI9320_BIT_PWR_CTRL1_APE     |          /* ... Power supply enable.                             */
                       (2u << 8u)                    |          /* ... Vci 1 x 2.                                       */
                       ILI9320_BIT_PWR_CTRL1_SAP));             /* ... Source driver output control enabled.            */

    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL2,
    1e40:	f04f 0011 	mov.w	r0, #17
    1e44:	f04f 0107 	mov.w	r1, #7
    1e48:	f001 f992 	bl	3170 <BSP_LCD_CtrlRegWr>
                      0x0007);

    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL3,
    1e4c:	f04f 0012 	mov.w	r0, #18
    1e50:	f240 111d 	movw	r1, #285	; 0x11d
    1e54:	f001 f98c 	bl	3170 <BSP_LCD_CtrlRegWr>
                      ((0xD << 0u)              |               /* ... VciLVL x 1.90.                                   */
                      ILI9320_BIT_PWR_CTRL3_PON |               /* ... VGL Output enable.                               */
                      ILI9320_BIT_PWR_CTRL3_VCMR));             /* ... Internal electric volume.                        */

    OSTimeDlyHMSM(0u, 0u, 0u, 50u,                              /* Delay for 50ms                                       */
    1e58:	f04f 0300 	mov.w	r3, #0
    1e5c:	9300      	str	r3, [sp, #0]
    1e5e:	f107 0308 	add.w	r3, r7, #8
    1e62:	9301      	str	r3, [sp, #4]
    1e64:	f04f 0000 	mov.w	r0, #0
    1e68:	f04f 0100 	mov.w	r1, #0
    1e6c:	f04f 0200 	mov.w	r2, #0
    1e70:	f04f 0332 	mov.w	r3, #50	; 0x32
    1e74:	f007 fcdc 	bl	9830 <OSTimeDlyHMSM>
                  OS_OPT_TIME_HMSM_STRICT,
                  &err);

    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL4,
    1e78:	f04f 0013 	mov.w	r0, #19
    1e7c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
    1e80:	f001 f976 	bl	3170 <BSP_LCD_CtrlRegWr>
                     (0x14 << 8u));                             /* ... VREG1OUT x 0.96.                                 */

    BSP_LCD_CtrlRegWr(ILI9320_REG_PWR_CTRL7,
    1e84:	f04f 0029 	mov.w	r0, #41	; 0x29
    1e88:	f04f 010e 	mov.w	r1, #14
    1e8c:	f001 f970 	bl	3170 <BSP_LCD_CtrlRegWr>
                     (0x0E << 0u));                             /* ... VEREGOUT x 0.83                                  */

    OSTimeDlyHMSM(0u, 0u, 0u, 50u,                              /* Delay for 50ms                                       */
    1e90:	f04f 0300 	mov.w	r3, #0
    1e94:	9300      	str	r3, [sp, #0]
    1e96:	f107 0308 	add.w	r3, r7, #8
    1e9a:	9301      	str	r3, [sp, #4]
    1e9c:	f04f 0000 	mov.w	r0, #0
    1ea0:	f04f 0100 	mov.w	r1, #0
    1ea4:	f04f 0200 	mov.w	r2, #0
    1ea8:	f04f 0332 	mov.w	r3, #50	; 0x32
    1eac:	f007 fcc0 	bl	9830 <OSTimeDlyHMSM>
                  OS_OPT_TIME_HMSM_STRICT,
                  &err);

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0x0000);   /* GRAM horizontal Address.                             */
    1eb0:	f04f 0020 	mov.w	r0, #32
    1eb4:	f04f 0100 	mov.w	r1, #0
    1eb8:	f001 f95a 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, 0x0000);   /* GRAM vertical   Address.                             */
    1ebc:	f04f 0021 	mov.w	r0, #33	; 0x21
    1ec0:	f04f 0100 	mov.w	r1, #0
    1ec4:	f001 f954 	bl	3170 <BSP_LCD_CtrlRegWr>

                                                                /* ------------ ADJUST THE GAMMA CURVE ---------------  */
    if (dev_id == BSP_LCD_ILI9320_DEV_CODE) {                   /* ILI9320 Gamma initialization                         */
    1ec8:	897a      	ldrh	r2, [r7, #10]
    1eca:	f64c 1390 	movw	r3, #51600	; 0xc990
    1ece:	429a      	cmp	r2, r3
    1ed0:	d13c      	bne.n	1f4c <BSP_LCD_Init+0x450>

        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL1,  0x0006);
    1ed2:	f04f 0030 	mov.w	r0, #48	; 0x30
    1ed6:	f04f 0106 	mov.w	r1, #6
    1eda:	f001 f949 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL2,  0x0101);
    1ede:	f04f 0031 	mov.w	r0, #49	; 0x31
    1ee2:	f240 1101 	movw	r1, #257	; 0x101
    1ee6:	f001 f943 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL3,  0x0003);
    1eea:	f04f 0032 	mov.w	r0, #50	; 0x32
    1eee:	f04f 0103 	mov.w	r1, #3
    1ef2:	f001 f93d 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL4,  0x0106);
    1ef6:	f04f 0035 	mov.w	r0, #53	; 0x35
    1efa:	f44f 7183 	mov.w	r1, #262	; 0x106
    1efe:	f001 f937 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL5,  0x0B02);
    1f02:	f04f 0036 	mov.w	r0, #54	; 0x36
    1f06:	f640 3102 	movw	r1, #2818	; 0xb02
    1f0a:	f001 f931 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL6,  0x0302);
    1f0e:	f04f 0037 	mov.w	r0, #55	; 0x37
    1f12:	f240 3102 	movw	r1, #770	; 0x302
    1f16:	f001 f92b 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL7,  0x0707);
    1f1a:	f04f 0038 	mov.w	r0, #56	; 0x38
    1f1e:	f240 7107 	movw	r1, #1799	; 0x707
    1f22:	f001 f925 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL8,  0x0007);
    1f26:	f04f 0039 	mov.w	r0, #57	; 0x39
    1f2a:	f04f 0107 	mov.w	r1, #7
    1f2e:	f001 f91f 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL9,  0x0600);
    1f32:	f04f 003c 	mov.w	r0, #60	; 0x3c
    1f36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    1f3a:	f001 f919 	bl	3170 <BSP_LCD_CtrlRegWr>
        BSP_LCD_CtrlRegWr(ILI9320_REG_GAMA_CTRL10, 0x020B);
    1f3e:	f04f 003d 	mov.w	r0, #61	; 0x3d
    1f42:	f240 210b 	movw	r1, #523	; 0x20b
    1f46:	f001 f913 	bl	3170 <BSP_LCD_CtrlRegWr>
    1f4a:	e05f      	b.n	200c <BSP_LCD_Init+0x510>
     } else {
                                                                 /* SPFD5408 Gamma initalization                        */
    	BSP_LCD_CtrlRegWr(0x30, 0x0B0D);
    1f4c:	f04f 0030 	mov.w	r0, #48	; 0x30
    1f50:	f640 310d 	movw	r1, #2829	; 0xb0d
    1f54:	f001 f90c 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x31, 0x1923);
    1f58:	f04f 0031 	mov.w	r0, #49	; 0x31
    1f5c:	f641 1123 	movw	r1, #6435	; 0x1923
    1f60:	f001 f906 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x32, 0x1C26);
    1f64:	f04f 0032 	mov.w	r0, #50	; 0x32
    1f68:	f641 4126 	movw	r1, #7206	; 0x1c26
    1f6c:	f001 f900 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x33, 0x261C);
    1f70:	f04f 0033 	mov.w	r0, #51	; 0x33
    1f74:	f242 611c 	movw	r1, #9756	; 0x261c
    1f78:	f001 f8fa 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x34, 0x2419);
    1f7c:	f04f 0034 	mov.w	r0, #52	; 0x34
    1f80:	f242 4119 	movw	r1, #9241	; 0x2419
    1f84:	f001 f8f4 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x35, 0x0D0B);
    1f88:	f04f 0035 	mov.w	r0, #53	; 0x35
    1f8c:	f640 510b 	movw	r1, #3339	; 0xd0b
    1f90:	f001 f8ee 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x36, 0x1006);
    1f94:	f04f 0036 	mov.w	r0, #54	; 0x36
    1f98:	f241 0106 	movw	r1, #4102	; 0x1006
    1f9c:	f001 f8e8 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x37, 0x0610);
    1fa0:	f04f 0037 	mov.w	r0, #55	; 0x37
    1fa4:	f44f 61c2 	mov.w	r1, #1552	; 0x610
    1fa8:	f001 f8e2 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x38, 0x0706);
    1fac:	f04f 0038 	mov.w	r0, #56	; 0x38
    1fb0:	f240 7106 	movw	r1, #1798	; 0x706
    1fb4:	f001 f8dc 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x39, 0x0304);
    1fb8:	f04f 0039 	mov.w	r0, #57	; 0x39
    1fbc:	f44f 7141 	mov.w	r1, #772	; 0x304
    1fc0:	f001 f8d6 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3A, 0x0E05);
    1fc4:	f04f 003a 	mov.w	r0, #58	; 0x3a
    1fc8:	f640 6105 	movw	r1, #3589	; 0xe05
    1fcc:	f001 f8d0 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3B, 0x0E01);
    1fd0:	f04f 003b 	mov.w	r0, #59	; 0x3b
    1fd4:	f640 6101 	movw	r1, #3585	; 0xe01
    1fd8:	f001 f8ca 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3C, 0x010E);
    1fdc:	f04f 003c 	mov.w	r0, #60	; 0x3c
    1fe0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    1fe4:	f001 f8c4 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3D, 0x050E);
    1fe8:	f04f 003d 	mov.w	r0, #61	; 0x3d
    1fec:	f240 510e 	movw	r1, #1294	; 0x50e
    1ff0:	f001 f8be 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3E, 0x0403);
    1ff4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    1ff8:	f240 4103 	movw	r1, #1027	; 0x403
    1ffc:	f001 f8b8 	bl	3170 <BSP_LCD_CtrlRegWr>
    	BSP_LCD_CtrlRegWr(0x3F, 0x0607);
    2000:	f04f 003f 	mov.w	r0, #63	; 0x3f
    2004:	f240 6107 	movw	r1, #1543	; 0x607
    2008:	f001 f8b2 	bl	3170 <BSP_LCD_CtrlRegWr>
     }
                                                                /* ------------------ SET GRAM AREA ------------------- */
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0x0000);      /* Horizontal GRAM Start Address.                       */
    200c:	f04f 0050 	mov.w	r0, #80	; 0x50
    2010:	f04f 0100 	mov.w	r1, #0
    2014:	f001 f8ac 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,
    2018:	f04f 0051 	mov.w	r0, #81	; 0x51
    201c:	f04f 01ef 	mov.w	r1, #239	; 0xef
    2020:	f001 f8a6 	bl	3170 <BSP_LCD_CtrlRegWr>
                      (BSP_LCD_WIDTH - 1u));                    /* Horizontal GRAM End   Address.                       */

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, 0x0000);      /* Vertical   GRAM Start Address.                       */
    2024:	f04f 0052 	mov.w	r0, #82	; 0x52
    2028:	f04f 0100 	mov.w	r1, #0
    202c:	f001 f8a0 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,
    2030:	f04f 0053 	mov.w	r0, #83	; 0x53
    2034:	f240 113f 	movw	r1, #319	; 0x13f
    2038:	f001 f89a 	bl	3170 <BSP_LCD_CtrlRegWr>
                     (BSP_LCD_HEIGHT - 1u));                    /* Vertical   GRAM End   Address.                       */

    if (dev_id == BSP_LCD_ILI9320_DEV_CODE) {
    203c:	897a      	ldrh	r2, [r7, #10]
    203e:	f64c 1390 	movw	r3, #51600	; 0xc990
    2042:	429a      	cmp	r2, r3
    2044:	d106      	bne.n	2054 <BSP_LCD_Init+0x558>
        BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL2, 0x2700);   /* Gate Scan Line.                                      */
    2046:	f04f 0060 	mov.w	r0, #96	; 0x60
    204a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
    204e:	f001 f88f 	bl	3170 <BSP_LCD_CtrlRegWr>
    2052:	e005      	b.n	2060 <BSP_LCD_Init+0x564>
    } else {
        BSP_LCD_CtrlRegWr(ILI9320_REG_DRV_OUT_CTRL2, 0xA700);
    2054:	f04f 0060 	mov.w	r0, #96	; 0x60
    2058:	f44f 4127 	mov.w	r1, #42752	; 0xa700
    205c:	f001 f888 	bl	3170 <BSP_LCD_CtrlRegWr>
    }

    BSP_LCD_CtrlRegWr(ILI9320_REG_BASE_IMG_DISP_CTRL, 0x0001);  /* NDL,VLE, REV.                                        */
    2060:	f04f 0061 	mov.w	r0, #97	; 0x61
    2064:	f04f 0101 	mov.w	r1, #1
    2068:	f001 f882 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_SCROLL_CTRL, 0x0000);     /* Set scrolling line.                                  */
    206c:	f04f 006a 	mov.w	r0, #106	; 0x6a
    2070:	f04f 0100 	mov.w	r1, #0
    2074:	f001 f87c 	bl	3170 <BSP_LCD_CtrlRegWr>

                                                                /* ------------ PANEL CONTROL CONFIGURATION ----------- */
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL1, 0x0010);
    2078:	f04f 0090 	mov.w	r0, #144	; 0x90
    207c:	f04f 0110 	mov.w	r1, #16
    2080:	f001 f876 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL2, 0x0000);
    2084:	f04f 0092 	mov.w	r0, #146	; 0x92
    2088:	f04f 0100 	mov.w	r1, #0
    208c:	f001 f870 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL3, 0x0003);
    2090:	f04f 0093 	mov.w	r0, #147	; 0x93
    2094:	f04f 0103 	mov.w	r1, #3
    2098:	f001 f86a 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL4, 0x0110);
    209c:	f04f 0095 	mov.w	r0, #149	; 0x95
    20a0:	f44f 7188 	mov.w	r1, #272	; 0x110
    20a4:	f001 f864 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL5, 0x0000);
    20a8:	f04f 0097 	mov.w	r0, #151	; 0x97
    20ac:	f04f 0100 	mov.w	r1, #0
    20b0:	f001 f85e 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_PANEL_IF_CTRL6, 0x0000);
    20b4:	f04f 0098 	mov.w	r0, #152	; 0x98
    20b8:	f04f 0100 	mov.w	r1, #0
    20bc:	f001 f858 	bl	3170 <BSP_LCD_CtrlRegWr>

                                                                /* Set GRAM write direction                             */
                                                                /* ... I/D = '11'(Hor : inc, Ver : inc)                 */
                                                                /* ... AM  = '1' (address is updated in ver. direction  */
    BSP_LCD_CtrlRegWr(ILI9320_REG_ENTRY_MODE, 0x1030);
    20c0:	f04f 0003 	mov.w	r0, #3
    20c4:	f241 0130 	movw	r1, #4144	; 0x1030
    20c8:	f001 f852 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_DISP_CTRL1, 0x0137);          /* 262K color and display ON                            */
    20cc:	f04f 0007 	mov.w	r0, #7
    20d0:	f240 1137 	movw	r1, #311	; 0x137
    20d4:	f001 f84c 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_Unlock();
    20d8:	f001 f8e8 	bl	32ac <BSP_LCD_Unlock>

    return (DEF_OK);
    20dc:	f04f 0301 	mov.w	r3, #1
}
    20e0:	4618      	mov	r0, r3
    20e2:	f107 0718 	add.w	r7, r7, #24
    20e6:	46bd      	mov	sp, r7
    20e8:	bd80      	pop	{r7, pc}
    20ea:	bf00      	nop

000020ec <BSP_LCD_Clr>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_Clr (void )
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b082      	sub	sp, #8
    20f0:	af00      	add	r7, sp, #0
    CPU_INT32U     pixel;
    BSP_LCD_COLOR  color;


    BSP_LCD_Lock();
    20f2:	f001 f8c5 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0x0000);      /* Horizontal GRAM Start Address.                       */
    20f6:	f04f 0050 	mov.w	r0, #80	; 0x50
    20fa:	f04f 0100 	mov.w	r1, #0
    20fe:	f001 f837 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,
    2102:	f04f 0051 	mov.w	r0, #81	; 0x51
    2106:	f04f 01ef 	mov.w	r1, #239	; 0xef
    210a:	f001 f831 	bl	3170 <BSP_LCD_CtrlRegWr>
                      (BSP_LCD_WIDTH - 1u));                    /* Horizontal GRAM End   Address.                       */

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, 0x0000);      /* Vertical   GRAM Start Address.                       */
    210e:	f04f 0052 	mov.w	r0, #82	; 0x52
    2112:	f04f 0100 	mov.w	r1, #0
    2116:	f001 f82b 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,
    211a:	f04f 0053 	mov.w	r0, #83	; 0x53
    211e:	f240 113f 	movw	r1, #319	; 0x13f
    2122:	f001 f825 	bl	3170 <BSP_LCD_CtrlRegWr>
                      (BSP_LCD_HEIGHT - 1u));                   /* Vertical   GRAM End   Address.                       */

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0);
    2126:	f04f 0020 	mov.w	r0, #32
    212a:	f04f 0100 	mov.w	r1, #0
    212e:	f001 f81f 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, 0);
    2132:	f04f 0021 	mov.w	r0, #33	; 0x21
    2136:	f04f 0100 	mov.w	r1, #0
    213a:	f001 f819 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    213e:	f04f 0000 	mov.w	r0, #0
    2142:	f04f 0140 	mov.w	r1, #64	; 0x40
    2146:	f00f ffa5 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    214a:	f04f 0070 	mov.w	r0, #112	; 0x70
    214e:	f001 f84f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2152:	f04f 0000 	mov.w	r0, #0
    2156:	f001 f84b 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    215a:	f04f 0022 	mov.w	r0, #34	; 0x22
    215e:	f001 f847 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2162:	f04f 0000 	mov.w	r0, #0
    2166:	f04f 0140 	mov.w	r1, #64	; 0x40
    216a:	f00f ffbb 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    216e:	f04f 0000 	mov.w	r0, #0
    2172:	f04f 0140 	mov.w	r1, #64	; 0x40
    2176:	f00f ff8d 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    217a:	f04f 0072 	mov.w	r0, #114	; 0x72
    217e:	f001 f837 	bl	31f0 <BSP_LCD_SPI_Xfer>

    color   = BSP_LCD_Ctxt.BgColor;
    2182:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2186:	f2c1 0300 	movt	r3, #4096	; 0x1000
    218a:	881b      	ldrh	r3, [r3, #0]
    218c:	807b      	strh	r3, [r7, #2]

    for (pixel = 0u; pixel < BSP_LCD_SIZE; pixel++) {
    218e:	f04f 0300 	mov.w	r3, #0
    2192:	607b      	str	r3, [r7, #4]
    2194:	e010      	b.n	21b8 <BSP_LCD_Clr+0xcc>
        BSP_LCD_SPI_Xfer(color >> 8u);
    2196:	887b      	ldrh	r3, [r7, #2]
    2198:	ea4f 2313 	mov.w	r3, r3, lsr #8
    219c:	b29b      	uxth	r3, r3
    219e:	b2db      	uxtb	r3, r3
    21a0:	4618      	mov	r0, r3
    21a2:	f001 f825 	bl	31f0 <BSP_LCD_SPI_Xfer>
        BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    21a6:	887b      	ldrh	r3, [r7, #2]
    21a8:	b2db      	uxtb	r3, r3
    21aa:	4618      	mov	r0, r3
    21ac:	f001 f820 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);

    color   = BSP_LCD_Ctxt.BgColor;

    for (pixel = 0u; pixel < BSP_LCD_SIZE; pixel++) {
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	f103 0301 	add.w	r3, r3, #1
    21b6:	607b      	str	r3, [r7, #4]
    21b8:	687a      	ldr	r2, [r7, #4]
    21ba:	f642 33ff 	movw	r3, #11263	; 0x2bff
    21be:	f2c0 0301 	movt	r3, #1
    21c2:	429a      	cmp	r2, r3
    21c4:	d9e7      	bls.n	2196 <BSP_LCD_Clr+0xaa>
        BSP_LCD_SPI_Xfer(color >> 8u);
        BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    }

    BSP_LCD_CTRL_CS_HIGH();
    21c6:	f04f 0000 	mov.w	r0, #0
    21ca:	f04f 0140 	mov.w	r1, #64	; 0x40
    21ce:	f00f ff89 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_Unlock();
    21d2:	f001 f86b 	bl	32ac <BSP_LCD_Unlock>
}
    21d6:	f107 0708 	add.w	r7, r7, #8
    21da:	46bd      	mov	sp, r7
    21dc:	bd80      	pop	{r7, pc}
    21de:	bf00      	nop

000021e0 <BSP_LCD_BG_ColorSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void   BSP_LCD_BG_ColorSet (BSP_LCD_COLOR  color)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b082      	sub	sp, #8
    21e4:	af00      	add	r7, sp, #0
    21e6:	4603      	mov	r3, r0
    21e8:	80fb      	strh	r3, [r7, #6]
    BSP_LCD_Lock();
    21ea:	f001 f849 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_Ctxt.BgColor = color;
    21ee:	f640 33d0 	movw	r3, #3024	; 0xbd0
    21f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    21f6:	88fa      	ldrh	r2, [r7, #6]
    21f8:	801a      	strh	r2, [r3, #0]

    BSP_LCD_Unlock();
    21fa:	f001 f857 	bl	32ac <BSP_LCD_Unlock>
}
    21fe:	f107 0708 	add.w	r7, r7, #8
    2202:	46bd      	mov	sp, r7
    2204:	bd80      	pop	{r7, pc}
    2206:	bf00      	nop

00002208 <BSP_LCD_ImgDraw>:


void  BSP_LCD_ImgDraw (BSP_LCD_PIXEL   x,
                       BSP_LCD_PIXEL   y,
                       BSP_LCD_IMG    *p_img)
{
    2208:	b590      	push	{r4, r7, lr}
    220a:	b085      	sub	sp, #20
    220c:	af02      	add	r7, sp, #8
    220e:	460b      	mov	r3, r1
    2210:	603a      	str	r2, [r7, #0]
    2212:	4602      	mov	r2, r0
    2214:	80fa      	strh	r2, [r7, #6]
    2216:	80bb      	strh	r3, [r7, #4]

    if (p_img == (BSP_LCD_IMG *)0) {
    2218:	683b      	ldr	r3, [r7, #0]
    221a:	2b00      	cmp	r3, #0
    221c:	d00f      	beq.n	223e <BSP_LCD_ImgDraw+0x36>
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    221e:	f001 f82f 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.                                   */
                             y,
                             p_img->Width,
    2222:	683b      	ldr	r3, [r7, #0]
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */

    BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.                                   */
    2224:	889a      	ldrh	r2, [r3, #4]
                             y,
                             p_img->Width,
                             p_img->Height,
    2226:	683b      	ldr	r3, [r7, #0]
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */

    BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.                                   */
    2228:	88db      	ldrh	r3, [r3, #6]
                             y,
                             p_img->Width,
                             p_img->Height,
                             p_img->BitmapPtr);
    222a:	6839      	ldr	r1, [r7, #0]
    222c:	688c      	ldr	r4, [r1, #8]
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */

    BSP_LCD_BitmapDrawUnlock(x,                                 /* Display the image.                                   */
    222e:	88f8      	ldrh	r0, [r7, #6]
    2230:	88b9      	ldrh	r1, [r7, #4]
    2232:	9400      	str	r4, [sp, #0]
    2234:	f000 fe00 	bl	2e38 <BSP_LCD_BitmapDrawUnlock>
                             y,
                             p_img->Width,
                             p_img->Height,
                             p_img->BitmapPtr);

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2238:	f001 f838 	bl	32ac <BSP_LCD_Unlock>
    223c:	e000      	b.n	2240 <BSP_LCD_ImgDraw+0x38>
                       BSP_LCD_PIXEL   y,
                       BSP_LCD_IMG    *p_img)
{

    if (p_img == (BSP_LCD_IMG *)0) {
        return;
    223e:	bf00      	nop
                             p_img->Width,
                             p_img->Height,
                             p_img->BitmapPtr);

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    2240:	f107 070c 	add.w	r7, r7, #12
    2244:	46bd      	mov	sp, r7
    2246:	bd90      	pop	{r4, r7, pc}

00002248 <BSP_LCD_ImgTblSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_ImgTblSet (BSP_LCD_IMG  **p_tbl)
{
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
    if (p_tbl == (BSP_LCD_IMG **) 0) {
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2b00      	cmp	r3, #0
    2254:	d00a      	beq.n	226c <BSP_LCD_ImgTblSet+0x24>
        return;
    }

    BSP_LCD_Lock();
    2256:	f001 f813 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_Ctxt.ImgTblPtr = p_tbl;
    225a:	f640 33d0 	movw	r3, #3024	; 0xbd0
    225e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2262:	687a      	ldr	r2, [r7, #4]
    2264:	641a      	str	r2, [r3, #64]	; 0x40

    BSP_LCD_Unlock();
    2266:	f001 f821 	bl	32ac <BSP_LCD_Unlock>
    226a:	e000      	b.n	226e <BSP_LCD_ImgTblSet+0x26>
*/

void  BSP_LCD_ImgTblSet (BSP_LCD_IMG  **p_tbl)
{
    if (p_tbl == (BSP_LCD_IMG **) 0) {
        return;
    226c:	bf00      	nop
    BSP_LCD_Lock();

    BSP_LCD_Ctxt.ImgTblPtr = p_tbl;

    BSP_LCD_Unlock();
}
    226e:	f107 0708 	add.w	r7, r7, #8
    2272:	46bd      	mov	sp, r7
    2274:	bd80      	pop	{r7, pc}
    2276:	bf00      	nop

00002278 <BSP_LCD_ImgGetByName>:
* Note(s)     : none.
*********************************************************************************************************
*/

BSP_LCD_IMG  *BSP_LCD_ImgGetByName  (CPU_CHAR  *p_name)
{
    2278:	b580      	push	{r7, lr}
    227a:	b088      	sub	sp, #32
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    CPU_INT16S        cmp;
    CPU_SIZE_T        img_ix;
    CPU_BOOLEAN       found;

                                                                /* ------------------- ARGUMENTS CHECKING ------------- */
    if (p_name == (CPU_CHAR *)0) {                              /* NULL pointer ?                                       */
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	2b00      	cmp	r3, #0
    2284:	d102      	bne.n	228c <BSP_LCD_ImgGetByName+0x14>
        return ((BSP_LCD_IMG *)0);
    2286:	f04f 0300 	mov.w	r3, #0
    228a:	e045      	b.n	2318 <BSP_LCD_ImgGetByName+0xa0>
    }

    p_img_tbl = BSP_LCD_Ctxt.ImgTblPtr;
    228c:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2290:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2296:	613b      	str	r3, [r7, #16]

    if (p_img_tbl == (BSP_LCD_IMG **)0) {                       /* If a image table has not been set.                    */
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	2b00      	cmp	r3, #0
    229c:	d102      	bne.n	22a4 <BSP_LCD_ImgGetByName+0x2c>
        return ((BSP_LCD_IMG *)0);
    229e:	f04f 0300 	mov.w	r3, #0
    22a2:	e039      	b.n	2318 <BSP_LCD_ImgGetByName+0xa0>
    }

    found  = DEF_NO;
    22a4:	f04f 0300 	mov.w	r3, #0
    22a8:	75fb      	strb	r3, [r7, #23]
    img_ix = 0u;
    22aa:	f04f 0300 	mov.w	r3, #0
    22ae:	61bb      	str	r3, [r7, #24]
    p_img  = (BSP_LCD_IMG *)0;
    22b0:	f04f 0300 	mov.w	r3, #0
    22b4:	61fb      	str	r3, [r7, #28]
                                                               /* Search the image in the font table by name.          */
    while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
    22b6:	e01a      	b.n	22ee <BSP_LCD_ImgGetByName+0x76>
           (found             ==  DEF_NO              ) &&
           (img_ix             <  BSP_LCD_MAX_NBR_IMG)) {

        p_img = p_img_tbl[img_ix];
    22b8:	69bb      	ldr	r3, [r7, #24]
    22ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    22be:	693a      	ldr	r2, [r7, #16]
    22c0:	18d3      	adds	r3, r2, r3
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	61fb      	str	r3, [r7, #28]
        cmp   = Str_Cmp(p_name,                                 /* Compare the image name.                              */
                        p_img->NamePtr);
    22c6:	69fb      	ldr	r3, [r7, #28]
    22c8:	681b      	ldr	r3, [r3, #0]
    while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
           (found             ==  DEF_NO              ) &&
           (img_ix             <  BSP_LCD_MAX_NBR_IMG)) {

        p_img = p_img_tbl[img_ix];
        cmp   = Str_Cmp(p_name,                                 /* Compare the image name.                              */
    22ca:	6878      	ldr	r0, [r7, #4]
    22cc:	4619      	mov	r1, r3
    22ce:	f002 faf1 	bl	48b4 <Str_Cmp>
    22d2:	4603      	mov	r3, r0
    22d4:	81fb      	strh	r3, [r7, #14]
                        p_img->NamePtr);

        if (cmp == (CPU_INT16S)0) {                             /* If the image is found ...                            */
    22d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    22da:	2b00      	cmp	r3, #0
    22dc:	d103      	bne.n	22e6 <BSP_LCD_ImgGetByName+0x6e>
            found = DEF_YES;                                    /* ... exit the search routine.                         */
    22de:	f04f 0301 	mov.w	r3, #1
    22e2:	75fb      	strb	r3, [r7, #23]
    22e4:	e003      	b.n	22ee <BSP_LCD_ImgGetByName+0x76>
        } else {
            img_ix++;                                           /* ... move to the next entry, otherwise.               */
    22e6:	69bb      	ldr	r3, [r7, #24]
    22e8:	f103 0301 	add.w	r3, r3, #1
    22ec:	61bb      	str	r3, [r7, #24]

    found  = DEF_NO;
    img_ix = 0u;
    p_img  = (BSP_LCD_IMG *)0;
                                                               /* Search the image in the font table by name.          */
    while ((p_img_tbl[img_ix] !=  (BSP_LCD_IMG     *)0) &&
    22ee:	69bb      	ldr	r3, [r7, #24]
    22f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    22f4:	693a      	ldr	r2, [r7, #16]
    22f6:	18d3      	adds	r3, r2, r3
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d005      	beq.n	230a <BSP_LCD_ImgGetByName+0x92>
    22fe:	7dfb      	ldrb	r3, [r7, #23]
    2300:	2b00      	cmp	r3, #0
    2302:	d102      	bne.n	230a <BSP_LCD_ImgGetByName+0x92>
           (found             ==  DEF_NO              ) &&
    2304:	69bb      	ldr	r3, [r7, #24]
    2306:	2bff      	cmp	r3, #255	; 0xff
    2308:	d9d6      	bls.n	22b8 <BSP_LCD_ImgGetByName+0x40>
        } else {
            img_ix++;                                           /* ... move to the next entry, otherwise.               */
        }
    }

    if (found == DEF_NO) {                                      /* If an image could not been found in the image table  */
    230a:	7dfb      	ldrb	r3, [r7, #23]
    230c:	2b00      	cmp	r3, #0
    230e:	d102      	bne.n	2316 <BSP_LCD_ImgGetByName+0x9e>
        return ((BSP_LCD_IMG *)0);                              /* ... return a 'NULL' pointer.                         */
    2310:	f04f 0300 	mov.w	r3, #0
    2314:	e000      	b.n	2318 <BSP_LCD_ImgGetByName+0xa0>
    }

    return ((p_img));
    2316:	69fb      	ldr	r3, [r7, #28]
}
    2318:	4618      	mov	r0, r3
    231a:	f107 0720 	add.w	r7, r7, #32
    231e:	46bd      	mov	sp, r7
    2320:	bd80      	pop	{r7, pc}
    2322:	bf00      	nop

00002324 <BSP_LCD_TextColorSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void   BSP_LCD_TextColorSet  (BSP_LCD_COLOR  color)
{
    2324:	b580      	push	{r7, lr}
    2326:	b082      	sub	sp, #8
    2328:	af00      	add	r7, sp, #0
    232a:	4603      	mov	r3, r0
    232c:	80fb      	strh	r3, [r7, #6]
    BSP_LCD_Lock();
    232e:	f000 ffa7 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_Ctxt.TextColor = color;
    2332:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2336:	f2c1 0300 	movt	r3, #4096	; 0x1000
    233a:	88fa      	ldrh	r2, [r7, #6]
    233c:	805a      	strh	r2, [r3, #2]

    BSP_LCD_Unlock();
    233e:	f000 ffb5 	bl	32ac <BSP_LCD_Unlock>
}
    2342:	f107 0708 	add.w	r7, r7, #8
    2346:	46bd      	mov	sp, r7
    2348:	bd80      	pop	{r7, pc}
    234a:	bf00      	nop

0000234c <BSP_LCD_TextLineClr>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_TextLineClr (BSP_LCD_TEXT_POS line)
{
    234c:	b580      	push	{r7, lr}
    234e:	b086      	sub	sp, #24
    2350:	af00      	add	r7, sp, #0
    2352:	4603      	mov	r3, r0
    2354:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_PIXEL     pixel_line;
    BSP_LCD_COLOR     color;



    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */
    2356:	f640 33d0 	movw	r3, #3024	; 0xbd0
    235a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    235e:	613b      	str	r3, [r7, #16]

    if (line > p_dev->TextLineMax) {                            /* Check the text coordinates boundaries.               */
    2360:	693b      	ldr	r3, [r7, #16]
    2362:	791b      	ldrb	r3, [r3, #4]
    2364:	79fa      	ldrb	r2, [r7, #7]
    2366:	429a      	cmp	r2, r3
    2368:	f200 8094 	bhi.w	2494 <BSP_LCD_TextLineClr+0x148>
        return;
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */
    236c:	693b      	ldr	r3, [r7, #16]
    236e:	68db      	ldr	r3, [r3, #12]
    2370:	60fb      	str	r3, [r7, #12]

    if (p_font == (BSP_LCD_FONT *)0) {
    2372:	68fb      	ldr	r3, [r7, #12]
    2374:	2b00      	cmp	r3, #0
    2376:	f000 808f 	beq.w	2498 <BSP_LCD_TextLineClr+0x14c>
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    237a:	f000 ff81 	bl	3280 <BSP_LCD_Lock>

    color       = p_dev->BgColor;
    237e:	693b      	ldr	r3, [r7, #16]
    2380:	881b      	ldrh	r3, [r3, #0]
    2382:	817b      	strh	r3, [r7, #10]
    pixel_line  = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT * line)
    2384:	79fa      	ldrb	r2, [r7, #7]
    2386:	4613      	mov	r3, r2
    2388:	ea4f 0383 	mov.w	r3, r3, lsl #2
    238c:	189b      	adds	r3, r3, r2
    238e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2392:	461a      	mov	r2, r3
                / p_dev->TextLineMax);
    2394:	693b      	ldr	r3, [r7, #16]
    2396:	791b      	ldrb	r3, [r3, #4]
    2398:	fbb2 f3f3 	udiv	r3, r2, r3
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */

    color       = p_dev->BgColor;
    pixel_line  = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT * line)
    239c:	813b      	strh	r3, [r7, #8]
                / p_dev->TextLineMax);

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, 0);
    239e:	f04f 0050 	mov.w	r0, #80	; 0x50
    23a2:	f04f 0100 	mov.w	r1, #0
    23a6:	f000 fee3 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   BSP_LCD_WIDTH - 1u);
    23aa:	f04f 0051 	mov.w	r0, #81	; 0x51
    23ae:	f04f 01ef 	mov.w	r1, #239	; 0xef
    23b2:	f000 fedd 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, pixel_line);
    23b6:	893b      	ldrh	r3, [r7, #8]
    23b8:	f04f 0052 	mov.w	r0, #82	; 0x52
    23bc:	4619      	mov	r1, r3
    23be:	f000 fed7 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   pixel_line + p_font->Height - 1u);
    23c2:	68fb      	ldr	r3, [r7, #12]
    23c4:	891a      	ldrh	r2, [r3, #8]
    23c6:	893b      	ldrh	r3, [r7, #8]
    23c8:	18d3      	adds	r3, r2, r3
    23ca:	b29b      	uxth	r3, r3
    23cc:	f103 33ff 	add.w	r3, r3, #4294967295
    23d0:	b29b      	uxth	r3, r3
    23d2:	f04f 0053 	mov.w	r0, #83	; 0x53
    23d6:	4619      	mov	r1, r3
    23d8:	f000 feca 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, 0);
    23dc:	f04f 0020 	mov.w	r0, #32
    23e0:	f04f 0100 	mov.w	r1, #0
    23e4:	f000 fec4 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, pixel_line);
    23e8:	893b      	ldrh	r3, [r7, #8]
    23ea:	f04f 0021 	mov.w	r0, #33	; 0x21
    23ee:	4619      	mov	r1, r3
    23f0:	f000 febe 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    23f4:	f04f 0000 	mov.w	r0, #0
    23f8:	f04f 0140 	mov.w	r1, #64	; 0x40
    23fc:	f00f fe4a 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    2400:	f04f 0070 	mov.w	r0, #112	; 0x70
    2404:	f000 fef4 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2408:	f04f 0000 	mov.w	r0, #0
    240c:	f000 fef0 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    2410:	f04f 0022 	mov.w	r0, #34	; 0x22
    2414:	f000 feec 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2418:	f04f 0000 	mov.w	r0, #0
    241c:	f04f 0140 	mov.w	r1, #64	; 0x40
    2420:	f00f fe60 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    2424:	f04f 0000 	mov.w	r0, #0
    2428:	f04f 0140 	mov.w	r1, #64	; 0x40
    242c:	f00f fe32 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    2430:	f04f 0072 	mov.w	r0, #114	; 0x72
    2434:	f000 fedc 	bl	31f0 <BSP_LCD_SPI_Xfer>


    for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
    2438:	f04f 0300 	mov.w	r3, #0
    243c:	82bb      	strh	r3, [r7, #20]
    243e:	e01b      	b.n	2478 <BSP_LCD_TextLineClr+0x12c>
        for (pixel_x = 0; pixel_x < BSP_LCD_WIDTH - 1u; pixel_x++) {
    2440:	f04f 0300 	mov.w	r3, #0
    2444:	82fb      	strh	r3, [r7, #22]
    2446:	e010      	b.n	246a <BSP_LCD_TextLineClr+0x11e>
            BSP_LCD_SPI_Xfer(color >> 8u);
    2448:	897b      	ldrh	r3, [r7, #10]
    244a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    244e:	b29b      	uxth	r3, r3
    2450:	b2db      	uxtb	r3, r3
    2452:	4618      	mov	r0, r3
    2454:	f000 fecc 	bl	31f0 <BSP_LCD_SPI_Xfer>
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    2458:	897b      	ldrh	r3, [r7, #10]
    245a:	b2db      	uxtb	r3, r3
    245c:	4618      	mov	r0, r3
    245e:	f000 fec7 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
        for (pixel_x = 0; pixel_x < BSP_LCD_WIDTH - 1u; pixel_x++) {
    2462:	8afb      	ldrh	r3, [r7, #22]
    2464:	f103 0301 	add.w	r3, r3, #1
    2468:	82fb      	strh	r3, [r7, #22]
    246a:	8afb      	ldrh	r3, [r7, #22]
    246c:	2bee      	cmp	r3, #238	; 0xee
    246e:	d9eb      	bls.n	2448 <BSP_LCD_TextLineClr+0xfc>

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y < p_font->Height; pixel_y++) {
    2470:	8abb      	ldrh	r3, [r7, #20]
    2472:	f103 0301 	add.w	r3, r3, #1
    2476:	82bb      	strh	r3, [r7, #20]
    2478:	68fb      	ldr	r3, [r7, #12]
    247a:	891b      	ldrh	r3, [r3, #8]
    247c:	8aba      	ldrh	r2, [r7, #20]
    247e:	429a      	cmp	r2, r3
    2480:	d3de      	bcc.n	2440 <BSP_LCD_TextLineClr+0xf4>
            BSP_LCD_SPI_Xfer(color >> 8u);
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
        }
    }

    BSP_LCD_CTRL_CS_HIGH();
    2482:	f04f 0000 	mov.w	r0, #0
    2486:	f04f 0140 	mov.w	r1, #64	; 0x40
    248a:	f00f fe2b 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    248e:	f000 ff0d 	bl	32ac <BSP_LCD_Unlock>
    2492:	e002      	b.n	249a <BSP_LCD_TextLineClr+0x14e>


    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */

    if (line > p_dev->TextLineMax) {                            /* Check the text coordinates boundaries.               */
        return;
    2494:	bf00      	nop
    2496:	e000      	b.n	249a <BSP_LCD_TextLineClr+0x14e>
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */

    if (p_font == (BSP_LCD_FONT *)0) {
        return;
    2498:	bf00      	nop

    BSP_LCD_CTRL_CS_HIGH();

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */

}
    249a:	f107 0718 	add.w	r7, r7, #24
    249e:	46bd      	mov	sp, r7
    24a0:	bd80      	pop	{r7, pc}
    24a2:	bf00      	nop

000024a4 <BSP_LCD_TextDispStr>:
*/

void  BSP_LCD_TextDispStr  (BSP_LCD_TEXT_POS   col,
                            BSP_LCD_TEXT_POS   line,
                            CPU_CHAR          *p_str)
{
    24a4:	b580      	push	{r7, lr}
    24a6:	b082      	sub	sp, #8
    24a8:	af00      	add	r7, sp, #0
    24aa:	460b      	mov	r3, r1
    24ac:	603a      	str	r2, [r7, #0]
    24ae:	4602      	mov	r2, r0
    24b0:	71fa      	strb	r2, [r7, #7]
    24b2:	71bb      	strb	r3, [r7, #6]


    BSP_LCD_TextDispStr_N((BSP_LCD_TEXT_POS   )col,
    24b4:	79fa      	ldrb	r2, [r7, #7]
    24b6:	79bb      	ldrb	r3, [r7, #6]
    24b8:	4610      	mov	r0, r2
    24ba:	4619      	mov	r1, r3
    24bc:	683a      	ldr	r2, [r7, #0]
    24be:	f04f 33ff 	mov.w	r3, #4294967295
    24c2:	f000 f805 	bl	24d0 <BSP_LCD_TextDispStr_N>
                          (BSP_LCD_TEXT_POS   )line,
                          (CPU_CHAR          *)p_str,
                          (CPU_SIZE_T         )DEF_INT_CPU_U_MAX_VAL);
}
    24c6:	f107 0708 	add.w	r7, r7, #8
    24ca:	46bd      	mov	sp, r7
    24cc:	bd80      	pop	{r7, pc}
    24ce:	bf00      	nop

000024d0 <BSP_LCD_TextDispStr_N>:

void  BSP_LCD_TextDispStr_N (BSP_LCD_TEXT_POS   col,
                             BSP_LCD_TEXT_POS   line,
                             CPU_CHAR          *p_str,
                             CPU_SIZE_T         len_max)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	b088      	sub	sp, #32
    24d4:	af00      	add	r7, sp, #0
    24d6:	60ba      	str	r2, [r7, #8]
    24d8:	607b      	str	r3, [r7, #4]
    24da:	4603      	mov	r3, r0
    24dc:	73fb      	strb	r3, [r7, #15]
    24de:	460b      	mov	r3, r1
    24e0:	73bb      	strb	r3, [r7, #14]
    BSP_LCD_FONT  *p_font;
    BSP_LCD_PIXEL  pixel_cur;
    CPU_SIZE_T     str_len;


    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */
    24e2:	f640 33d0 	movw	r3, #3024	; 0xbd0
    24e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    24ea:	61bb      	str	r3, [r7, #24]

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
    24ec:	69bb      	ldr	r3, [r7, #24]
    24ee:	791b      	ldrb	r3, [r3, #4]
    24f0:	7bba      	ldrb	r2, [r7, #14]
    24f2:	429a      	cmp	r2, r3
    24f4:	f200 8090 	bhi.w	2618 <BSP_LCD_TextDispStr_N+0x148>
        (col  > p_dev->TextColMax)) {
    24f8:	69bb      	ldr	r3, [r7, #24]
    24fa:	799b      	ldrb	r3, [r3, #6]
    CPU_SIZE_T     str_len;


    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
    24fc:	7bfa      	ldrb	r2, [r7, #15]
    24fe:	429a      	cmp	r2, r3
    2500:	f200 808a 	bhi.w	2618 <BSP_LCD_TextDispStr_N+0x148>
        (col  > p_dev->TextColMax)) {
        return;
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */
    2504:	69bb      	ldr	r3, [r7, #24]
    2506:	68db      	ldr	r3, [r3, #12]
    2508:	617b      	str	r3, [r7, #20]

    if (p_font == (BSP_LCD_FONT *)0) {
    250a:	697b      	ldr	r3, [r7, #20]
    250c:	2b00      	cmp	r3, #0
    250e:	f000 8085 	beq.w	261c <BSP_LCD_TextDispStr_N+0x14c>
        return;
    }

    str_len = 0u;
    2512:	f04f 0300 	mov.w	r3, #0
    2516:	61fb      	str	r3, [r7, #28]
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2518:	f000 feb2 	bl	3280 <BSP_LCD_Lock>

                                                                /* Update the text context...                           */
    p_dev->TextColCur   = col;                                  /* ... update current column.                           */
    251c:	69bb      	ldr	r3, [r7, #24]
    251e:	7bfa      	ldrb	r2, [r7, #15]
    2520:	71da      	strb	r2, [r3, #7]
    p_dev->TextLineCur  = line;                                 /* ... update current line.                             */
    2522:	69bb      	ldr	r3, [r7, #24]
    2524:	7bba      	ldrb	r2, [r7, #14]
    2526:	715a      	strb	r2, [r3, #5]
                                                                /* ... update current pixel.                            */
    pixel_cur           = (BSP_LCD_PIXEL)((BSP_LCD_WIDTH * col)
    2528:	7bfa      	ldrb	r2, [r7, #15]
    252a:	4613      	mov	r3, r2
    252c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2530:	1a9b      	subs	r3, r3, r2
    2532:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2536:	461a      	mov	r2, r3
                        / p_dev->TextColMax);
    2538:	69bb      	ldr	r3, [r7, #24]
    253a:	799b      	ldrb	r3, [r3, #6]
    253c:	fbb2 f3f3 	udiv	r3, r2, r3

                                                                /* Update the text context...                           */
    p_dev->TextColCur   = col;                                  /* ... update current column.                           */
    p_dev->TextLineCur  = line;                                 /* ... update current line.                             */
                                                                /* ... update current pixel.                            */
    pixel_cur           = (BSP_LCD_PIXEL)((BSP_LCD_WIDTH * col)
    2540:	827b      	strh	r3, [r7, #18]
                        / p_dev->TextColMax);
    p_dev->TextPixelCur = pixel_cur;
    2542:	69bb      	ldr	r3, [r7, #24]
    2544:	8a7a      	ldrh	r2, [r7, #18]
    2546:	811a      	strh	r2, [r3, #8]

    while ((*p_str != (CPU_CHAR)0) &&
    2548:	e05b      	b.n	2602 <BSP_LCD_TextDispStr_N+0x132>
           (str_len < len_max    )) {

        switch (*p_str) {
    254a:	68bb      	ldr	r3, [r7, #8]
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	2b0a      	cmp	r3, #10
    2550:	d009      	beq.n	2566 <BSP_LCD_TextDispStr_N+0x96>
    2552:	2b0d      	cmp	r3, #13
    2554:	d11c      	bne.n	2590 <BSP_LCD_TextDispStr_N+0xc0>
            case ASCII_CHAR_CARRIAGE_RETURN:
                 p_dev->TextColCur   = 0u;
    2556:	69bb      	ldr	r3, [r7, #24]
    2558:	f04f 0200 	mov.w	r2, #0
    255c:	71da      	strb	r2, [r3, #7]
                 p_dev->TextPixelCur = pixel_cur;
    255e:	69bb      	ldr	r3, [r7, #24]
    2560:	8a7a      	ldrh	r2, [r7, #18]
    2562:	811a      	strh	r2, [r3, #8]
                 break;
    2564:	e045      	b.n	25f2 <BSP_LCD_TextDispStr_N+0x122>

            case ASCII_CHAR_LINE_FEED:
                 if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
    2566:	69bb      	ldr	r3, [r7, #24]
    2568:	795b      	ldrb	r3, [r3, #5]
    256a:	f103 0201 	add.w	r2, r3, #1
    256e:	69bb      	ldr	r3, [r7, #24]
    2570:	791b      	ldrb	r3, [r3, #4]
    2572:	429a      	cmp	r2, r3
    2574:	d904      	bls.n	2580 <BSP_LCD_TextDispStr_N+0xb0>
                     p_dev->TextLineCur = 0u;
    2576:	69bb      	ldr	r3, [r7, #24]
    2578:	f04f 0200 	mov.w	r2, #0
    257c:	715a      	strb	r2, [r3, #5]
                 } else {
                     p_dev->TextLineCur++;
                 }
                 break;
    257e:	e038      	b.n	25f2 <BSP_LCD_TextDispStr_N+0x122>

            case ASCII_CHAR_LINE_FEED:
                 if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
                     p_dev->TextLineCur = 0u;
                 } else {
                     p_dev->TextLineCur++;
    2580:	69bb      	ldr	r3, [r7, #24]
    2582:	795b      	ldrb	r3, [r3, #5]
    2584:	f103 0301 	add.w	r3, r3, #1
    2588:	b2da      	uxtb	r2, r3
    258a:	69bb      	ldr	r3, [r7, #24]
    258c:	715a      	strb	r2, [r3, #5]
                 }
                 break;
    258e:	e030      	b.n	25f2 <BSP_LCD_TextDispStr_N+0x122>

            default:
                 BSP_LCD_TextCharUnlock(*p_str);
    2590:	68bb      	ldr	r3, [r7, #8]
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	4618      	mov	r0, r3
    2596:	f000 fb39 	bl	2c0c <BSP_LCD_TextCharUnlock>
                 if ((p_dev->TextPixelCur + p_font->Width) > BSP_LCD_WIDTH) {
    259a:	69bb      	ldr	r3, [r7, #24]
    259c:	891b      	ldrh	r3, [r3, #8]
    259e:	461a      	mov	r2, r3
    25a0:	697b      	ldr	r3, [r7, #20]
    25a2:	88db      	ldrh	r3, [r3, #6]
    25a4:	18d3      	adds	r3, r2, r3
    25a6:	2bf0      	cmp	r3, #240	; 0xf0
    25a8:	d91b      	bls.n	25e2 <BSP_LCD_TextDispStr_N+0x112>
                     p_dev->TextColCur   = 0u;
    25aa:	69bb      	ldr	r3, [r7, #24]
    25ac:	f04f 0200 	mov.w	r2, #0
    25b0:	71da      	strb	r2, [r3, #7]
                     p_dev->TextPixelCur = pixel_cur;
    25b2:	69bb      	ldr	r3, [r7, #24]
    25b4:	8a7a      	ldrh	r2, [r7, #18]
    25b6:	811a      	strh	r2, [r3, #8]
                     if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
    25b8:	69bb      	ldr	r3, [r7, #24]
    25ba:	795b      	ldrb	r3, [r3, #5]
    25bc:	f103 0201 	add.w	r2, r3, #1
    25c0:	69bb      	ldr	r3, [r7, #24]
    25c2:	791b      	ldrb	r3, [r3, #4]
    25c4:	429a      	cmp	r2, r3
    25c6:	d904      	bls.n	25d2 <BSP_LCD_TextDispStr_N+0x102>
                         p_dev->TextLineCur = 0u;
    25c8:	69bb      	ldr	r3, [r7, #24]
    25ca:	f04f 0200 	mov.w	r2, #0
    25ce:	715a      	strb	r2, [r3, #5]
                         p_dev->TextLineCur++;
                     }
                 } else {
                     p_dev->TextColCur++;
                 }
                 break;
    25d0:	e00e      	b.n	25f0 <BSP_LCD_TextDispStr_N+0x120>
                     p_dev->TextColCur   = 0u;
                     p_dev->TextPixelCur = pixel_cur;
                     if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
                         p_dev->TextLineCur = 0u;
                     } else {
                         p_dev->TextLineCur++;
    25d2:	69bb      	ldr	r3, [r7, #24]
    25d4:	795b      	ldrb	r3, [r3, #5]
    25d6:	f103 0301 	add.w	r3, r3, #1
    25da:	b2da      	uxtb	r2, r3
    25dc:	69bb      	ldr	r3, [r7, #24]
    25de:	715a      	strb	r2, [r3, #5]
                     }
                 } else {
                     p_dev->TextColCur++;
                 }
                 break;
    25e0:	e006      	b.n	25f0 <BSP_LCD_TextDispStr_N+0x120>
                         p_dev->TextLineCur = 0u;
                     } else {
                         p_dev->TextLineCur++;
                     }
                 } else {
                     p_dev->TextColCur++;
    25e2:	69bb      	ldr	r3, [r7, #24]
    25e4:	79db      	ldrb	r3, [r3, #7]
    25e6:	f103 0301 	add.w	r3, r3, #1
    25ea:	b2da      	uxtb	r2, r3
    25ec:	69bb      	ldr	r3, [r7, #24]
    25ee:	71da      	strb	r2, [r3, #7]
                 }
                 break;
    25f0:	bf00      	nop
        }
        p_str++;
    25f2:	68bb      	ldr	r3, [r7, #8]
    25f4:	f103 0301 	add.w	r3, r3, #1
    25f8:	60bb      	str	r3, [r7, #8]
        str_len++;
    25fa:	69fb      	ldr	r3, [r7, #28]
    25fc:	f103 0301 	add.w	r3, r3, #1
    2600:	61fb      	str	r3, [r7, #28]
                                                                /* ... update current pixel.                            */
    pixel_cur           = (BSP_LCD_PIXEL)((BSP_LCD_WIDTH * col)
                        / p_dev->TextColMax);
    p_dev->TextPixelCur = pixel_cur;

    while ((*p_str != (CPU_CHAR)0) &&
    2602:	68bb      	ldr	r3, [r7, #8]
    2604:	781b      	ldrb	r3, [r3, #0]
    2606:	2b00      	cmp	r3, #0
    2608:	d003      	beq.n	2612 <BSP_LCD_TextDispStr_N+0x142>
    260a:	69fa      	ldr	r2, [r7, #28]
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	429a      	cmp	r2, r3
    2610:	d39b      	bcc.n	254a <BSP_LCD_TextDispStr_N+0x7a>
        }
        p_str++;
        str_len++;
    }

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2612:	f000 fe4b 	bl	32ac <BSP_LCD_Unlock>
    2616:	e002      	b.n	261e <BSP_LCD_TextDispStr_N+0x14e>

    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
        (col  > p_dev->TextColMax)) {
        return;
    2618:	bf00      	nop
    261a:	e000      	b.n	261e <BSP_LCD_TextDispStr_N+0x14e>
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */

    if (p_font == (BSP_LCD_FONT *)0) {
        return;
    261c:	bf00      	nop
        p_str++;
        str_len++;
    }

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    261e:	f107 0720 	add.w	r7, r7, #32
    2622:	46bd      	mov	sp, r7
    2624:	bd80      	pop	{r7, pc}
    2626:	bf00      	nop

00002628 <BSP_LCD_TextDispChar>:
*/

void  BSP_LCD_TextDispChar (BSP_LCD_TEXT_POS   col,
                            BSP_LCD_TEXT_POS   line,
                            CPU_CHAR           c)
{
    2628:	b580      	push	{r7, lr}
    262a:	b084      	sub	sp, #16
    262c:	af00      	add	r7, sp, #0
    262e:	4613      	mov	r3, r2
    2630:	4602      	mov	r2, r0
    2632:	71fa      	strb	r2, [r7, #7]
    2634:	460a      	mov	r2, r1
    2636:	71ba      	strb	r2, [r7, #6]
    2638:	717b      	strb	r3, [r7, #5]
    BSP_LCD_DEV   *p_dev;
    BSP_LCD_FONT  *p_font;


    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */
    263a:	f640 33d0 	movw	r3, #3024	; 0xbd0
    263e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2642:	60fb      	str	r3, [r7, #12]

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	791b      	ldrb	r3, [r3, #4]
    2648:	79ba      	ldrb	r2, [r7, #6]
    264a:	429a      	cmp	r2, r3
    264c:	d861      	bhi.n	2712 <__cs3_stack_size+0x2>
        (col  > p_dev->TextColMax)) {
    264e:	68fb      	ldr	r3, [r7, #12]
    2650:	799b      	ldrb	r3, [r3, #6]
    BSP_LCD_FONT  *p_font;


    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
    2652:	79fa      	ldrb	r2, [r7, #7]
    2654:	429a      	cmp	r2, r3
    2656:	d85c      	bhi.n	2712 <__cs3_stack_size+0x2>
        (col  > p_dev->TextColMax)) {
        return;
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	68db      	ldr	r3, [r3, #12]
    265c:	60bb      	str	r3, [r7, #8]

    if (p_font == (BSP_LCD_FONT *)0) {
    265e:	68bb      	ldr	r3, [r7, #8]
    2660:	2b00      	cmp	r3, #0
    2662:	d058      	beq.n	2716 <__cs3_stack_size+0x6>
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2664:	f000 fe0c 	bl	3280 <BSP_LCD_Lock>

                                                                /* Update the text context...                           */
    p_dev->TextColCur   = col;                                  /* ... update current column.                           */
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	79fa      	ldrb	r2, [r7, #7]
    266c:	71da      	strb	r2, [r3, #7]
    p_dev->TextLineCur  = line;                                 /* ... update current line.                             */
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	79ba      	ldrb	r2, [r7, #6]
    2672:	715a      	strb	r2, [r3, #5]
                                                                /* ... update current pixel.                            */
    switch (c) {
    2674:	797b      	ldrb	r3, [r7, #5]
    2676:	2b0a      	cmp	r3, #10
    2678:	d006      	beq.n	2688 <BSP_LCD_TextDispChar+0x60>
    267a:	2b0d      	cmp	r3, #13
    267c:	d119      	bne.n	26b2 <BSP_LCD_TextDispChar+0x8a>
        case ASCII_CHAR_CARRIAGE_RETURN:
             p_dev->TextColCur = 0u;
    267e:	68fb      	ldr	r3, [r7, #12]
    2680:	f04f 0200 	mov.w	r2, #0
    2684:	71da      	strb	r2, [r3, #7]
             break;
    2686:	e041      	b.n	270c <BSP_LCD_TextDispChar+0xe4>

        case ASCII_CHAR_LINE_FEED:
             if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
    2688:	68fb      	ldr	r3, [r7, #12]
    268a:	795b      	ldrb	r3, [r3, #5]
    268c:	f103 0201 	add.w	r2, r3, #1
    2690:	68fb      	ldr	r3, [r7, #12]
    2692:	791b      	ldrb	r3, [r3, #4]
    2694:	429a      	cmp	r2, r3
    2696:	d904      	bls.n	26a2 <BSP_LCD_TextDispChar+0x7a>
                 p_dev->TextLineCur = 0u;
    2698:	68fb      	ldr	r3, [r7, #12]
    269a:	f04f 0200 	mov.w	r2, #0
    269e:	715a      	strb	r2, [r3, #5]
             } else {
                 p_dev->TextLineCur++;
             }
             break;
    26a0:	e034      	b.n	270c <BSP_LCD_TextDispChar+0xe4>

        case ASCII_CHAR_LINE_FEED:
             if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
                 p_dev->TextLineCur = 0u;
             } else {
                 p_dev->TextLineCur++;
    26a2:	68fb      	ldr	r3, [r7, #12]
    26a4:	795b      	ldrb	r3, [r3, #5]
    26a6:	f103 0301 	add.w	r3, r3, #1
    26aa:	b2da      	uxtb	r2, r3
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	715a      	strb	r2, [r3, #5]
             }
             break;
    26b0:	e02c      	b.n	270c <BSP_LCD_TextDispChar+0xe4>

        default:
             BSP_LCD_TextCharUnlock(c);
    26b2:	797b      	ldrb	r3, [r7, #5]
    26b4:	4618      	mov	r0, r3
    26b6:	f000 faa9 	bl	2c0c <BSP_LCD_TextCharUnlock>
             if ((p_dev->TextPixelCur + p_font->Width) > BSP_LCD_WIDTH) {
    26ba:	68fb      	ldr	r3, [r7, #12]
    26bc:	891b      	ldrh	r3, [r3, #8]
    26be:	461a      	mov	r2, r3
    26c0:	68bb      	ldr	r3, [r7, #8]
    26c2:	88db      	ldrh	r3, [r3, #6]
    26c4:	18d3      	adds	r3, r2, r3
    26c6:	2bf0      	cmp	r3, #240	; 0xf0
    26c8:	d918      	bls.n	26fc <BSP_LCD_TextDispChar+0xd4>
                 p_dev->TextColCur = 0u;
    26ca:	68fb      	ldr	r3, [r7, #12]
    26cc:	f04f 0200 	mov.w	r2, #0
    26d0:	71da      	strb	r2, [r3, #7]
                 if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	795b      	ldrb	r3, [r3, #5]
    26d6:	f103 0201 	add.w	r2, r3, #1
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	791b      	ldrb	r3, [r3, #4]
    26de:	429a      	cmp	r2, r3
    26e0:	d904      	bls.n	26ec <BSP_LCD_TextDispChar+0xc4>
                     p_dev->TextLineCur = 0u;
    26e2:	68fb      	ldr	r3, [r7, #12]
    26e4:	f04f 0200 	mov.w	r2, #0
    26e8:	715a      	strb	r2, [r3, #5]
                     p_dev->TextLineCur++;
                 }
             } else {
                 p_dev->TextColCur++;
             }
             break;
    26ea:	e00e      	b.n	270a <BSP_LCD_TextDispChar+0xe2>
             if ((p_dev->TextPixelCur + p_font->Width) > BSP_LCD_WIDTH) {
                 p_dev->TextColCur = 0u;
                 if (p_dev->TextLineCur + 1u > p_dev->TextLineMax) {
                     p_dev->TextLineCur = 0u;
                 } else {
                     p_dev->TextLineCur++;
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	795b      	ldrb	r3, [r3, #5]
    26f0:	f103 0301 	add.w	r3, r3, #1
    26f4:	b2da      	uxtb	r2, r3
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	715a      	strb	r2, [r3, #5]
                 }
             } else {
                 p_dev->TextColCur++;
             }
             break;
    26fa:	e006      	b.n	270a <BSP_LCD_TextDispChar+0xe2>
                     p_dev->TextLineCur = 0u;
                 } else {
                     p_dev->TextLineCur++;
                 }
             } else {
                 p_dev->TextColCur++;
    26fc:	68fb      	ldr	r3, [r7, #12]
    26fe:	79db      	ldrb	r3, [r3, #7]
    2700:	f103 0301 	add.w	r3, r3, #1
    2704:	b2da      	uxtb	r2, r3
    2706:	68fb      	ldr	r3, [r7, #12]
    2708:	71da      	strb	r2, [r3, #7]
             }
             break;
    270a:	bf00      	nop
    }

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    270c:	f000 fdce 	bl	32ac <BSP_LCD_Unlock>
    2710:	e002      	b.n	2718 <__cs3_stack_size+0x8>

    p_dev = &BSP_LCD_Ctxt;                                      /* Get a reference to LCD device.                       */

    if ((line > p_dev->TextLineMax) ||                          /* Check the text coordinates boundaries.               */
        (col  > p_dev->TextColMax)) {
        return;
    2712:	bf00      	nop
    2714:	e000      	b.n	2718 <__cs3_stack_size+0x8>
    }

    p_font = (BSP_LCD_FONT *)p_dev->TextFontPtr;                /* Get a reference to the current font.                 */

    if (p_font == (BSP_LCD_FONT *)0) {
        return;
    2716:	bf00      	nop
             }
             break;
    }

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    2718:	f107 0710 	add.w	r7, r7, #16
    271c:	46bd      	mov	sp, r7
    271e:	bd80      	pop	{r7, pc}

00002720 <BSP_LCD_TextFontTblSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_TextFontTblSet (BSP_LCD_FONT  **p_font_tbl)
{
    2720:	b580      	push	{r7, lr}
    2722:	b082      	sub	sp, #8
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]

    if (p_font_tbl == (BSP_LCD_FONT **)0) {
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	2b00      	cmp	r3, #0
    272c:	d00a      	beq.n	2744 <BSP_LCD_TextFontTblSet+0x24>
        return;
    }

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    272e:	f000 fda7 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_Ctxt.FontTblPtr = p_font_tbl;
    2732:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2736:	f2c1 0300 	movt	r3, #4096	; 0x1000
    273a:	687a      	ldr	r2, [r7, #4]
    273c:	645a      	str	r2, [r3, #68]	; 0x44

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    273e:	f000 fdb5 	bl	32ac <BSP_LCD_Unlock>
    2742:	e000      	b.n	2746 <BSP_LCD_TextFontTblSet+0x26>

void  BSP_LCD_TextFontTblSet (BSP_LCD_FONT  **p_font_tbl)
{

    if (p_font_tbl == (BSP_LCD_FONT **)0) {
        return;
    2744:	bf00      	nop
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */

    BSP_LCD_Ctxt.FontTblPtr = p_font_tbl;

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    2746:	f107 0708 	add.w	r7, r7, #8
    274a:	46bd      	mov	sp, r7
    274c:	bd80      	pop	{r7, pc}
    274e:	bf00      	nop

00002750 <BSP_LCD_TextFontGetByName>:
* Note(s)     : none.
*********************************************************************************************************
*/

BSP_LCD_FONT  *BSP_LCD_TextFontGetByName (CPU_CHAR  *p_name)
{
    2750:	b580      	push	{r7, lr}
    2752:	b088      	sub	sp, #32
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
    CPU_INT16S      cmp;
    CPU_SIZE_T      font_ix;
    CPU_BOOLEAN     found;

                                                                /* ------------------- ARGUMENTS CHECKING ------------- */
    if (p_name == (CPU_CHAR *)0) {                              /* NULL pointer ?                                       */
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	2b00      	cmp	r3, #0
    275c:	d102      	bne.n	2764 <BSP_LCD_TextFontGetByName+0x14>
        return ((BSP_LCD_FONT *)0);
    275e:	f04f 0300 	mov.w	r3, #0
    2762:	e045      	b.n	27f0 <BSP_LCD_TextFontGetByName+0xa0>
    }

    p_font_tbl = BSP_LCD_Ctxt.FontTblPtr;
    2764:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2768:	f2c1 0300 	movt	r3, #4096	; 0x1000
    276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    276e:	613b      	str	r3, [r7, #16]

    if (p_font_tbl == (BSP_LCD_FONT **)0) {                     /* If a font table has not been set.                    */
    2770:	693b      	ldr	r3, [r7, #16]
    2772:	2b00      	cmp	r3, #0
    2774:	d102      	bne.n	277c <BSP_LCD_TextFontGetByName+0x2c>
        return ((BSP_LCD_FONT *)0);
    2776:	f04f 0300 	mov.w	r3, #0
    277a:	e039      	b.n	27f0 <BSP_LCD_TextFontGetByName+0xa0>
    }

    found   = DEF_NO;
    277c:	f04f 0300 	mov.w	r3, #0
    2780:	75fb      	strb	r3, [r7, #23]
    font_ix = 0u;
    2782:	f04f 0300 	mov.w	r3, #0
    2786:	61bb      	str	r3, [r7, #24]
    p_font  = (BSP_LCD_FONT *)0;
    2788:	f04f 0300 	mov.w	r3, #0
    278c:	61fb      	str	r3, [r7, #28]
                                                                /* Search the font in the font table by name.           */
    while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
    278e:	e01a      	b.n	27c6 <BSP_LCD_TextFontGetByName+0x76>
           (found               ==  DEF_NO               ) &&
           (font_ix              <  BSP_LCD_MAX_NBR_FONT )) {

        p_font = p_font_tbl[font_ix];
    2790:	69bb      	ldr	r3, [r7, #24]
    2792:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2796:	693a      	ldr	r2, [r7, #16]
    2798:	18d3      	adds	r3, r2, r3
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	61fb      	str	r3, [r7, #28]
        cmp    = Str_Cmp(p_name,                                /* Compare the font name.                               */
                         p_font->NamePtr);
    279e:	69fb      	ldr	r3, [r7, #28]
    27a0:	681b      	ldr	r3, [r3, #0]
    while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
           (found               ==  DEF_NO               ) &&
           (font_ix              <  BSP_LCD_MAX_NBR_FONT )) {

        p_font = p_font_tbl[font_ix];
        cmp    = Str_Cmp(p_name,                                /* Compare the font name.                               */
    27a2:	6878      	ldr	r0, [r7, #4]
    27a4:	4619      	mov	r1, r3
    27a6:	f002 f885 	bl	48b4 <Str_Cmp>
    27aa:	4603      	mov	r3, r0
    27ac:	81fb      	strh	r3, [r7, #14]
                         p_font->NamePtr);

        if (cmp == (CPU_INT16S)0) {                             /* If the font is found ...                             */
    27ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d103      	bne.n	27be <BSP_LCD_TextFontGetByName+0x6e>
            found = DEF_YES;                                    /* ... exit the search routine.                         */
    27b6:	f04f 0301 	mov.w	r3, #1
    27ba:	75fb      	strb	r3, [r7, #23]
    27bc:	e003      	b.n	27c6 <BSP_LCD_TextFontGetByName+0x76>
        } else {
            font_ix++;                                          /* ... move to the next entry, otherwise.               */
    27be:	69bb      	ldr	r3, [r7, #24]
    27c0:	f103 0301 	add.w	r3, r3, #1
    27c4:	61bb      	str	r3, [r7, #24]

    found   = DEF_NO;
    font_ix = 0u;
    p_font  = (BSP_LCD_FONT *)0;
                                                                /* Search the font in the font table by name.           */
    while ((p_font_tbl[font_ix] !=  (BSP_LCD_FONT       *)0    ) &&
    27c6:	69bb      	ldr	r3, [r7, #24]
    27c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    27cc:	693a      	ldr	r2, [r7, #16]
    27ce:	18d3      	adds	r3, r2, r3
    27d0:	681b      	ldr	r3, [r3, #0]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d005      	beq.n	27e2 <BSP_LCD_TextFontGetByName+0x92>
    27d6:	7dfb      	ldrb	r3, [r7, #23]
    27d8:	2b00      	cmp	r3, #0
    27da:	d102      	bne.n	27e2 <BSP_LCD_TextFontGetByName+0x92>
           (found               ==  DEF_NO               ) &&
    27dc:	69bb      	ldr	r3, [r7, #24]
    27de:	2b7f      	cmp	r3, #127	; 0x7f
    27e0:	d9d6      	bls.n	2790 <BSP_LCD_TextFontGetByName+0x40>
        } else {
            font_ix++;                                          /* ... move to the next entry, otherwise.               */
        }
    }

    if (found == DEF_NO) {                                      /* If a fount could not been found in the font table    */
    27e2:	7dfb      	ldrb	r3, [r7, #23]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d102      	bne.n	27ee <BSP_LCD_TextFontGetByName+0x9e>
        return ((BSP_LCD_FONT *)0);                             /* ... return a 'NULL' pointer.                         */
    27e8:	f04f 0300 	mov.w	r3, #0
    27ec:	e000      	b.n	27f0 <BSP_LCD_TextFontGetByName+0xa0>
    }

    return ((p_font));
    27ee:	69fb      	ldr	r3, [r7, #28]
}
    27f0:	4618      	mov	r0, r3
    27f2:	f107 0720 	add.w	r7, r7, #32
    27f6:	46bd      	mov	sp, r7
    27f8:	bd80      	pop	{r7, pc}
    27fa:	bf00      	nop

000027fc <BSP_LCD_TextFontSet>:
*********************************************************************************************************
*/


void   BSP_LCD_TextFontSet (BSP_LCD_FONT  *p_font)
{
    27fc:	b580      	push	{r7, lr}
    27fe:	b086      	sub	sp, #24
    2800:	af00      	add	r7, sp, #0
    2802:	6078      	str	r0, [r7, #4]
    CPU_INT08U    line_max;
    CPU_INT08U    col_max;
    CPU_INT08U    pos_cur;


    if (p_font == (void *)0) {
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	2b00      	cmp	r3, #0
    2808:	d040      	beq.n	288c <BSP_LCD_TextFontSet+0x90>
        return;
    }

    width     =  p_font->Width;
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	88db      	ldrh	r3, [r3, #6]
    280e:	75fb      	strb	r3, [r7, #23]
    height    =  p_font->Height;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	891b      	ldrh	r3, [r3, #8]
    2814:	75bb      	strb	r3, [r7, #22]
    line_max  = (BSP_LCD_HEIGHT / height);
    2816:	7dbb      	ldrb	r3, [r7, #22]
    2818:	f44f 72a0 	mov.w	r2, #320	; 0x140
    281c:	fbb2 f3f3 	udiv	r3, r2, r3
    2820:	757b      	strb	r3, [r7, #21]
    col_max   = (BSP_LCD_WIDTH  / width);
    2822:	7dfb      	ldrb	r3, [r7, #23]
    2824:	f04f 02f0 	mov.w	r2, #240	; 0xf0
    2828:	fbb2 f3f3 	udiv	r3, r2, r3
    282c:	753b      	strb	r3, [r7, #20]
    p_dev     = &BSP_LCD_Ctxt;
    282e:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2832:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2836:	613b      	str	r3, [r7, #16]

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2838:	f000 fd22 	bl	3280 <BSP_LCD_Lock>

    p_dev->TextFontPtr = p_font;
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	687a      	ldr	r2, [r7, #4]
    2840:	60da      	str	r2, [r3, #12]
    pos_cur            = p_dev->TextLineCur;
    2842:	693b      	ldr	r3, [r7, #16]
    2844:	795b      	ldrb	r3, [r3, #5]
    2846:	73fb      	strb	r3, [r7, #15]
    p_dev->TextLineCur = (pos_cur * p_dev->TextLineMax) / (line_max);
    2848:	7bfb      	ldrb	r3, [r7, #15]
    284a:	693a      	ldr	r2, [r7, #16]
    284c:	7912      	ldrb	r2, [r2, #4]
    284e:	fb02 f203 	mul.w	r2, r2, r3
    2852:	7d7b      	ldrb	r3, [r7, #21]
    2854:	fb92 f3f3 	sdiv	r3, r2, r3
    2858:	b2da      	uxtb	r2, r3
    285a:	693b      	ldr	r3, [r7, #16]
    285c:	715a      	strb	r2, [r3, #5]
    pos_cur            = p_dev->TextColCur;
    285e:	693b      	ldr	r3, [r7, #16]
    2860:	79db      	ldrb	r3, [r3, #7]
    2862:	73fb      	strb	r3, [r7, #15]
    p_dev->TextColCur  = (pos_cur * p_dev->TextColMax ) / (col_max);
    2864:	7bfb      	ldrb	r3, [r7, #15]
    2866:	693a      	ldr	r2, [r7, #16]
    2868:	7992      	ldrb	r2, [r2, #6]
    286a:	fb02 f203 	mul.w	r2, r2, r3
    286e:	7d3b      	ldrb	r3, [r7, #20]
    2870:	fb92 f3f3 	sdiv	r3, r2, r3
    2874:	b2da      	uxtb	r2, r3
    2876:	693b      	ldr	r3, [r7, #16]
    2878:	71da      	strb	r2, [r3, #7]
    p_dev->TextLineMax = line_max;
    287a:	693b      	ldr	r3, [r7, #16]
    287c:	7d7a      	ldrb	r2, [r7, #21]
    287e:	711a      	strb	r2, [r3, #4]
    p_dev->TextColMax  = col_max;
    2880:	693b      	ldr	r3, [r7, #16]
    2882:	7d3a      	ldrb	r2, [r7, #20]
    2884:	719a      	strb	r2, [r3, #6]

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2886:	f000 fd11 	bl	32ac <BSP_LCD_Unlock>
    288a:	e000      	b.n	288e <BSP_LCD_TextFontSet+0x92>
    CPU_INT08U    col_max;
    CPU_INT08U    pos_cur;


    if (p_font == (void *)0) {
        return;
    288c:	bf00      	nop
    p_dev->TextColCur  = (pos_cur * p_dev->TextColMax ) / (col_max);
    p_dev->TextLineMax = line_max;
    p_dev->TextColMax  = col_max;

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    288e:	f107 0718 	add.w	r7, r7, #24
    2892:	46bd      	mov	sp, r7
    2894:	bd80      	pop	{r7, pc}
    2896:	bf00      	nop

00002898 <BSP_LCD_BarGraphDraw>:
                             BSP_LCD_PIXEL  width,
                             BSP_LCD_PIXEL  height,
                             BSP_LCD_COLOR  bg_color,
                             BSP_LCD_COLOR  level_color,
                             CPU_INT08U     level_pct)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	80f8      	strh	r0, [r7, #6]
    28a0:	80b9      	strh	r1, [r7, #4]
    28a2:	807a      	strh	r2, [r7, #2]
    28a4:	803b      	strh	r3, [r7, #0]
    BSP_LCD_COLOR  color;
    BSP_LCD_PIXEL  pixel_x;
    BSP_LCD_PIXEL  pixel_y;
    BSP_LCD_PIXEL  pixel_pct;

    if (x + width  >  BSP_LCD_WIDTH) {
    28a6:	88fa      	ldrh	r2, [r7, #6]
    28a8:	887b      	ldrh	r3, [r7, #2]
    28aa:	18d3      	adds	r3, r2, r3
    28ac:	2bf0      	cmp	r3, #240	; 0xf0
    28ae:	f200 80a1 	bhi.w	29f4 <BSP_LCD_BarGraphDraw+0x15c>
        return;
    }

    if (y + height >  BSP_LCD_HEIGHT) {
    28b2:	88ba      	ldrh	r2, [r7, #4]
    28b4:	883b      	ldrh	r3, [r7, #0]
    28b6:	18d3      	adds	r3, r2, r3
    28b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    28bc:	f200 809c 	bhi.w	29f8 <BSP_LCD_BarGraphDraw+0x160>
        return;
    }

    pixel_pct = (width * level_pct / 100u);
    28c0:	887b      	ldrh	r3, [r7, #2]
    28c2:	f897 2020 	ldrb.w	r2, [r7, #32]
    28c6:	fb02 f303 	mul.w	r3, r2, r3
    28ca:	461a      	mov	r2, r3
    28cc:	f248 531f 	movw	r3, #34079	; 0x851f
    28d0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    28d4:	fba3 1302 	umull	r1, r3, r3, r2
    28d8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    28dc:	813b      	strh	r3, [r7, #8]

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    28de:	f000 fccf 	bl	3280 <BSP_LCD_Lock>


    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
    28e2:	88fb      	ldrh	r3, [r7, #6]
    28e4:	f04f 0050 	mov.w	r0, #80	; 0x50
    28e8:	4619      	mov	r1, r3
    28ea:	f000 fc41 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
    28ee:	88fa      	ldrh	r2, [r7, #6]
    28f0:	887b      	ldrh	r3, [r7, #2]
    28f2:	18d3      	adds	r3, r2, r3
    28f4:	b29b      	uxth	r3, r3
    28f6:	f103 33ff 	add.w	r3, r3, #4294967295
    28fa:	b29b      	uxth	r3, r3
    28fc:	f04f 0051 	mov.w	r0, #81	; 0x51
    2900:	4619      	mov	r1, r3
    2902:	f000 fc35 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
    2906:	88bb      	ldrh	r3, [r7, #4]
    2908:	f04f 0052 	mov.w	r0, #82	; 0x52
    290c:	4619      	mov	r1, r3
    290e:	f000 fc2f 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
    2912:	88ba      	ldrh	r2, [r7, #4]
    2914:	883b      	ldrh	r3, [r7, #0]
    2916:	18d3      	adds	r3, r2, r3
    2918:	b29b      	uxth	r3, r3
    291a:	f103 33ff 	add.w	r3, r3, #4294967295
    291e:	b29b      	uxth	r3, r3
    2920:	f04f 0053 	mov.w	r0, #83	; 0x53
    2924:	4619      	mov	r1, r3
    2926:	f000 fc23 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
    292a:	88fb      	ldrh	r3, [r7, #6]
    292c:	f04f 0020 	mov.w	r0, #32
    2930:	4619      	mov	r1, r3
    2932:	f000 fc1d 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
    2936:	88bb      	ldrh	r3, [r7, #4]
    2938:	f04f 0021 	mov.w	r0, #33	; 0x21
    293c:	4619      	mov	r1, r3
    293e:	f000 fc17 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    2942:	f04f 0000 	mov.w	r0, #0
    2946:	f04f 0140 	mov.w	r1, #64	; 0x40
    294a:	f00f fba3 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    294e:	f04f 0070 	mov.w	r0, #112	; 0x70
    2952:	f000 fc4d 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2956:	f04f 0000 	mov.w	r0, #0
    295a:	f000 fc49 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    295e:	f04f 0022 	mov.w	r0, #34	; 0x22
    2962:	f000 fc45 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2966:	f04f 0000 	mov.w	r0, #0
    296a:	f04f 0140 	mov.w	r1, #64	; 0x40
    296e:	f00f fbb9 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    2972:	f04f 0000 	mov.w	r0, #0
    2976:	f04f 0140 	mov.w	r1, #64	; 0x40
    297a:	f00f fb8b 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    297e:	f04f 0072 	mov.w	r0, #114	; 0x72
    2982:	f000 fc35 	bl	31f0 <BSP_LCD_SPI_Xfer>


    for (pixel_y = 0; pixel_y <  height; pixel_y++) {
    2986:	f04f 0300 	mov.w	r3, #0
    298a:	817b      	strh	r3, [r7, #10]
    298c:	e025      	b.n	29da <BSP_LCD_BarGraphDraw+0x142>
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
    298e:	f04f 0300 	mov.w	r3, #0
    2992:	81bb      	strh	r3, [r7, #12]
    2994:	e019      	b.n	29ca <BSP_LCD_BarGraphDraw+0x132>
            if (pixel_x < pixel_pct) {
    2996:	89ba      	ldrh	r2, [r7, #12]
    2998:	893b      	ldrh	r3, [r7, #8]
    299a:	429a      	cmp	r2, r3
    299c:	d202      	bcs.n	29a4 <BSP_LCD_BarGraphDraw+0x10c>
                color = bg_color;
    299e:	8b3b      	ldrh	r3, [r7, #24]
    29a0:	81fb      	strh	r3, [r7, #14]
    29a2:	e001      	b.n	29a8 <BSP_LCD_BarGraphDraw+0x110>
            } else {
                color = level_color;
    29a4:	8bbb      	ldrh	r3, [r7, #28]
    29a6:	81fb      	strh	r3, [r7, #14]
            }

            BSP_LCD_SPI_Xfer(color >> 8u);
    29a8:	89fb      	ldrh	r3, [r7, #14]
    29aa:	ea4f 2313 	mov.w	r3, r3, lsr #8
    29ae:	b29b      	uxth	r3, r3
    29b0:	b2db      	uxtb	r3, r3
    29b2:	4618      	mov	r0, r3
    29b4:	f000 fc1c 	bl	31f0 <BSP_LCD_SPI_Xfer>
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    29b8:	89fb      	ldrh	r3, [r7, #14]
    29ba:	b2db      	uxtb	r3, r3
    29bc:	4618      	mov	r0, r3
    29be:	f000 fc17 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y <  height; pixel_y++) {
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
    29c2:	89bb      	ldrh	r3, [r7, #12]
    29c4:	f103 0301 	add.w	r3, r3, #1
    29c8:	81bb      	strh	r3, [r7, #12]
    29ca:	89ba      	ldrh	r2, [r7, #12]
    29cc:	887b      	ldrh	r3, [r7, #2]
    29ce:	429a      	cmp	r2, r3
    29d0:	d3e1      	bcc.n	2996 <BSP_LCD_BarGraphDraw+0xfe>

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y <  height; pixel_y++) {
    29d2:	897b      	ldrh	r3, [r7, #10]
    29d4:	f103 0301 	add.w	r3, r3, #1
    29d8:	817b      	strh	r3, [r7, #10]
    29da:	897a      	ldrh	r2, [r7, #10]
    29dc:	883b      	ldrh	r3, [r7, #0]
    29de:	429a      	cmp	r2, r3
    29e0:	d3d5      	bcc.n	298e <BSP_LCD_BarGraphDraw+0xf6>

            BSP_LCD_SPI_Xfer(color >> 8u);
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
        }
    }
    BSP_LCD_CTRL_CS_HIGH();
    29e2:	f04f 0000 	mov.w	r0, #0
    29e6:	f04f 0140 	mov.w	r1, #64	; 0x40
    29ea:	f00f fb7b 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    29ee:	f000 fc5d 	bl	32ac <BSP_LCD_Unlock>
    29f2:	e002      	b.n	29fa <BSP_LCD_BarGraphDraw+0x162>
    BSP_LCD_PIXEL  pixel_x;
    BSP_LCD_PIXEL  pixel_y;
    BSP_LCD_PIXEL  pixel_pct;

    if (x + width  >  BSP_LCD_WIDTH) {
        return;
    29f4:	bf00      	nop
    29f6:	e000      	b.n	29fa <BSP_LCD_BarGraphDraw+0x162>
    }

    if (y + height >  BSP_LCD_HEIGHT) {
        return;
    29f8:	bf00      	nop
        }
    }
    BSP_LCD_CTRL_CS_HIGH();

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
}
    29fa:	f107 0710 	add.w	r7, r7, #16
    29fe:	46bd      	mov	sp, r7
    2a00:	bd80      	pop	{r7, pc}
    2a02:	bf00      	nop

00002a04 <BSP_LCD_BitmapDraw>:
void  BSP_LCD_BitmapDraw (CPU_INT16U   x,
                          CPU_INT16U   y,
                          CPU_INT16U   width,
                          CPU_INT16U   height,
                          CPU_INT16U  *p_bitmap)
{
    2a04:	b590      	push	{r4, r7, lr}
    2a06:	b085      	sub	sp, #20
    2a08:	af02      	add	r7, sp, #8
    2a0a:	80f8      	strh	r0, [r7, #6]
    2a0c:	80b9      	strh	r1, [r7, #4]
    2a0e:	807a      	strh	r2, [r7, #2]
    2a10:	803b      	strh	r3, [r7, #0]
                                                                /* Check the bitmap boundaries                          */

    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2a12:	f000 fc35 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_BitmapDrawUnlock(x,
    2a16:	88f8      	ldrh	r0, [r7, #6]
    2a18:	88b9      	ldrh	r1, [r7, #4]
    2a1a:	887a      	ldrh	r2, [r7, #2]
    2a1c:	883b      	ldrh	r3, [r7, #0]
    2a1e:	69bc      	ldr	r4, [r7, #24]
    2a20:	9400      	str	r4, [sp, #0]
    2a22:	f000 fa09 	bl	2e38 <BSP_LCD_BitmapDrawUnlock>
                             y,
                             width,
                             height,
                             p_bitmap);
    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2a26:	f000 fc41 	bl	32ac <BSP_LCD_Unlock>

}
    2a2a:	f107 070c 	add.w	r7, r7, #12
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd90      	pop	{r4, r7, pc}
    2a32:	bf00      	nop

00002a34 <BSP_LCD_RectDraw>:
                         BSP_LCD_PIXEL  y,
                         BSP_LCD_PIXEL  width,
                         BSP_LCD_PIXEL  height,
                         BSP_LCD_PIXEL  line_weight,
                         BSP_LCD_COLOR  line_color)
{
    2a34:	b590      	push	{r4, r7, lr}
    2a36:	b087      	sub	sp, #28
    2a38:	af04      	add	r7, sp, #16
    2a3a:	80f8      	strh	r0, [r7, #6]
    2a3c:	80b9      	strh	r1, [r7, #4]
    2a3e:	807a      	strh	r2, [r7, #2]
    2a40:	803b      	strh	r3, [r7, #0]
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2a42:	f000 fc1d 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_RectDrawUnlock(x,
    2a46:	88f8      	ldrh	r0, [r7, #6]
    2a48:	88b9      	ldrh	r1, [r7, #4]
    2a4a:	887a      	ldrh	r2, [r7, #2]
    2a4c:	883b      	ldrh	r3, [r7, #0]
    2a4e:	f04f 0400 	mov.w	r4, #0
    2a52:	9400      	str	r4, [sp, #0]
    2a54:	f04f 0400 	mov.w	r4, #0
    2a58:	9401      	str	r4, [sp, #4]
    2a5a:	8b3c      	ldrh	r4, [r7, #24]
    2a5c:	9402      	str	r4, [sp, #8]
    2a5e:	8bbc      	ldrh	r4, [r7, #28]
    2a60:	9403      	str	r4, [sp, #12]
    2a62:	f000 fa7f 	bl	2f64 <BSP_LCD_RectDrawUnlock>
                           DEF_NO,
                           0u,
                           line_weight,
                           line_color);

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2a66:	f000 fc21 	bl	32ac <BSP_LCD_Unlock>
}
    2a6a:	f107 070c 	add.w	r7, r7, #12
    2a6e:	46bd      	mov	sp, r7
    2a70:	bd90      	pop	{r4, r7, pc}
    2a72:	bf00      	nop

00002a74 <BSP_LCD_RectDrawFill>:
void  BSP_LCD_RectDrawFill (BSP_LCD_PIXEL  x,
                            BSP_LCD_PIXEL  y,
                            BSP_LCD_PIXEL  width,
                            BSP_LCD_PIXEL  height,
                            BSP_LCD_PIXEL  color)
{
    2a74:	b590      	push	{r4, r7, lr}
    2a76:	b087      	sub	sp, #28
    2a78:	af04      	add	r7, sp, #16
    2a7a:	80f8      	strh	r0, [r7, #6]
    2a7c:	80b9      	strh	r1, [r7, #4]
    2a7e:	807a      	strh	r2, [r7, #2]
    2a80:	803b      	strh	r3, [r7, #0]
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2a82:	f000 fbfd 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_RectDrawUnlock(x,
    2a86:	88f8      	ldrh	r0, [r7, #6]
    2a88:	88b9      	ldrh	r1, [r7, #4]
    2a8a:	887a      	ldrh	r2, [r7, #2]
    2a8c:	883b      	ldrh	r3, [r7, #0]
    2a8e:	f04f 0401 	mov.w	r4, #1
    2a92:	9400      	str	r4, [sp, #0]
    2a94:	8b3c      	ldrh	r4, [r7, #24]
    2a96:	9401      	str	r4, [sp, #4]
    2a98:	f04f 0400 	mov.w	r4, #0
    2a9c:	9402      	str	r4, [sp, #8]
    2a9e:	f04f 0400 	mov.w	r4, #0
    2aa2:	9403      	str	r4, [sp, #12]
    2aa4:	f000 fa5e 	bl	2f64 <BSP_LCD_RectDrawUnlock>
                           DEF_YES,
                           color,
                           0u,
                           0u);

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2aa8:	f000 fc00 	bl	32ac <BSP_LCD_Unlock>

}
    2aac:	f107 070c 	add.w	r7, r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd90      	pop	{r4, r7, pc}

00002ab4 <BSP_LCD_RectDrawFillLine>:
                                BSP_LCD_PIXEL  width,
                                BSP_LCD_PIXEL  height,
                                BSP_LCD_PIXEL  fill_color,
                                BSP_LCD_PIXEL  line_weight,
                                BSP_LCD_COLOR  line_color)
{
    2ab4:	b590      	push	{r4, r7, lr}
    2ab6:	b087      	sub	sp, #28
    2ab8:	af04      	add	r7, sp, #16
    2aba:	80f8      	strh	r0, [r7, #6]
    2abc:	80b9      	strh	r1, [r7, #4]
    2abe:	807a      	strh	r2, [r7, #2]
    2ac0:	803b      	strh	r3, [r7, #0]
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2ac2:	f000 fbdd 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_RectDrawUnlock(x,
    2ac6:	88f8      	ldrh	r0, [r7, #6]
    2ac8:	88b9      	ldrh	r1, [r7, #4]
    2aca:	887a      	ldrh	r2, [r7, #2]
    2acc:	883b      	ldrh	r3, [r7, #0]
    2ace:	f04f 0401 	mov.w	r4, #1
    2ad2:	9400      	str	r4, [sp, #0]
    2ad4:	8b3c      	ldrh	r4, [r7, #24]
    2ad6:	9401      	str	r4, [sp, #4]
    2ad8:	8bbc      	ldrh	r4, [r7, #28]
    2ada:	9402      	str	r4, [sp, #8]
    2adc:	8c3c      	ldrh	r4, [r7, #32]
    2ade:	9403      	str	r4, [sp, #12]
    2ae0:	f000 fa40 	bl	2f64 <BSP_LCD_RectDrawUnlock>
                           DEF_YES,
                           fill_color,
                           line_weight,
                           line_color);

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2ae4:	f000 fbe2 	bl	32ac <BSP_LCD_Unlock>
}
    2ae8:	f107 070c 	add.w	r7, r7, #12
    2aec:	46bd      	mov	sp, r7
    2aee:	bd90      	pop	{r4, r7, pc}

00002af0 <BSP_LCD_Pixel>:


void  BSP_LCD_Pixel (BSP_LCD_PIXEL  x,
                     BSP_LCD_PIXEL  y,
                     BSP_LCD_COLOR  color)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b082      	sub	sp, #8
    2af4:	af00      	add	r7, sp, #0
    2af6:	4613      	mov	r3, r2
    2af8:	4602      	mov	r2, r0
    2afa:	80fa      	strh	r2, [r7, #6]
    2afc:	460a      	mov	r2, r1
    2afe:	80ba      	strh	r2, [r7, #4]
    2b00:	807b      	strh	r3, [r7, #2]
    BSP_LCD_Lock();                                             /* Acquire LCD lock.                                    */
    2b02:	f000 fbbd 	bl	3280 <BSP_LCD_Lock>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
    2b06:	88fb      	ldrh	r3, [r7, #6]
    2b08:	f04f 0050 	mov.w	r0, #80	; 0x50
    2b0c:	4619      	mov	r1, r3
    2b0e:	f000 fb2f 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + 1u);
    2b12:	88fb      	ldrh	r3, [r7, #6]
    2b14:	f103 0301 	add.w	r3, r3, #1
    2b18:	b29b      	uxth	r3, r3
    2b1a:	f04f 0051 	mov.w	r0, #81	; 0x51
    2b1e:	4619      	mov	r1, r3
    2b20:	f000 fb26 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
    2b24:	88bb      	ldrh	r3, [r7, #4]
    2b26:	f04f 0052 	mov.w	r0, #82	; 0x52
    2b2a:	4619      	mov	r1, r3
    2b2c:	f000 fb20 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + 1u);
    2b30:	88bb      	ldrh	r3, [r7, #4]
    2b32:	f103 0301 	add.w	r3, r3, #1
    2b36:	b29b      	uxth	r3, r3
    2b38:	f04f 0053 	mov.w	r0, #83	; 0x53
    2b3c:	4619      	mov	r1, r3
    2b3e:	f000 fb17 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
    2b42:	88fb      	ldrh	r3, [r7, #6]
    2b44:	f04f 0020 	mov.w	r0, #32
    2b48:	4619      	mov	r1, r3
    2b4a:	f000 fb11 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
    2b4e:	88bb      	ldrh	r3, [r7, #4]
    2b50:	f04f 0021 	mov.w	r0, #33	; 0x21
    2b54:	4619      	mov	r1, r3
    2b56:	f000 fb0b 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    2b5a:	f04f 0000 	mov.w	r0, #0
    2b5e:	f04f 0140 	mov.w	r1, #64	; 0x40
    2b62:	f00f fa97 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    2b66:	f04f 0070 	mov.w	r0, #112	; 0x70
    2b6a:	f000 fb41 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2b6e:	f04f 0000 	mov.w	r0, #0
    2b72:	f000 fb3d 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    2b76:	f04f 0022 	mov.w	r0, #34	; 0x22
    2b7a:	f000 fb39 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2b7e:	f04f 0000 	mov.w	r0, #0
    2b82:	f04f 0140 	mov.w	r1, #64	; 0x40
    2b86:	f00f faad 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    2b8a:	f04f 0000 	mov.w	r0, #0
    2b8e:	f04f 0140 	mov.w	r1, #64	; 0x40
    2b92:	f00f fa7f 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    2b96:	f04f 0072 	mov.w	r0, #114	; 0x72
    2b9a:	f000 fb29 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_SPI_Xfer(color >> 8u);
    2b9e:	887b      	ldrh	r3, [r7, #2]
    2ba0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2ba4:	b29b      	uxth	r3, r3
    2ba6:	b2db      	uxtb	r3, r3
    2ba8:	4618      	mov	r0, r3
    2baa:	f000 fb21 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    2bae:	887b      	ldrh	r3, [r7, #2]
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	4618      	mov	r0, r3
    2bb4:	f000 fb1c 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2bb8:	f04f 0000 	mov.w	r0, #0
    2bbc:	f04f 0140 	mov.w	r1, #64	; 0x40
    2bc0:	f00f fa90 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_Unlock();                                           /* Release LCD lock.                                    */
    2bc4:	f000 fb72 	bl	32ac <BSP_LCD_Unlock>
}
    2bc8:	f107 0708 	add.w	r7, r7, #8
    2bcc:	46bd      	mov	sp, r7
    2bce:	bd80      	pop	{r7, pc}

00002bd0 <BSP_LCD_BackLightOff>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_BackLightOff (void)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	af00      	add	r7, sp, #0
    CSP_GPIO_BitClr(CSP_GPIO_PORT_NBR_04,
    2bd4:	f04f 0004 	mov.w	r0, #4
    2bd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2bdc:	f00f fa5a 	bl	12094 <CSP_GPIO_BitClr>
                    DEF_BIT_28);
}
    2be0:	bd80      	pop	{r7, pc}
    2be2:	bf00      	nop

00002be4 <BSP_LCD_BackLightOn>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_BackLightOn  (void)
{
    2be4:	b580      	push	{r7, lr}
    2be6:	af00      	add	r7, sp, #0
    CSP_GPIO_BitSet(CSP_GPIO_PORT_NBR_04,
    2be8:	f04f 0004 	mov.w	r0, #4
    2bec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2bf0:	f00f fa78 	bl	120e4 <CSP_GPIO_BitSet>
                    DEF_BIT_28);
}
    2bf4:	bd80      	pop	{r7, pc}
    2bf6:	bf00      	nop

00002bf8 <BSP_LCD_BackLightToggle>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LCD_BackLightToggle (void)
{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	af00      	add	r7, sp, #0
    CSP_GPIO_BitToggle(CSP_GPIO_PORT_NBR_04,
    2bfc:	f04f 0004 	mov.w	r0, #4
    2c00:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2c04:	f00f fa96 	bl	12134 <CSP_GPIO_BitToggle>
                       DEF_BIT_28);

}
    2c08:	bd80      	pop	{r7, pc}
    2c0a:	bf00      	nop

00002c0c <BSP_LCD_TextCharUnlock>:
*********************************************************************************************************
*/

static  void  BSP_LCD_TextCharUnlock (CPU_CHAR  c)

{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b08a      	sub	sp, #40	; 0x28
    2c10:	af00      	add	r7, sp, #0
    2c12:	4603      	mov	r3, r0
    2c14:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_PIXEL       pixel_x;
    BSP_LCD_PIXEL       pixel_y;
    BSP_LCD_COLOR       color;


    p_dev  = &BSP_LCD_Ctxt;                                     /* Obtain a reference to the LCD text context.          */
    2c16:	f640 33d0 	movw	r3, #3024	; 0xbd0
    2c1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c1e:	61fb      	str	r3, [r7, #28]
    p_font = p_dev->TextFontPtr;                                /* Obtain a reference to the LCD text font.             */
    2c20:	69fb      	ldr	r3, [r7, #28]
    2c22:	68db      	ldr	r3, [r3, #12]
    2c24:	61bb      	str	r3, [r7, #24]

    if (p_font == (BSP_LCD_FONT *)0) {
    2c26:	69bb      	ldr	r3, [r7, #24]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	f000 80fe 	beq.w	2e2a <BSP_LCD_TextCharUnlock+0x21e>
        return;
    }

    if ((c < p_font->CharStart) ||                              /* Check if the Font contains the character.            */
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	791b      	ldrb	r3, [r3, #4]
    2c32:	79fa      	ldrb	r2, [r7, #7]
    2c34:	429a      	cmp	r2, r3
    2c36:	f0c0 80fa 	bcc.w	2e2e <BSP_LCD_TextCharUnlock+0x222>
        (c > p_font->CharEnd  )) {
    2c3a:	69bb      	ldr	r3, [r7, #24]
    2c3c:	795b      	ldrb	r3, [r3, #5]

    if (p_font == (BSP_LCD_FONT *)0) {
        return;
    }

    if ((c < p_font->CharStart) ||                              /* Check if the Font contains the character.            */
    2c3e:	79fa      	ldrb	r2, [r7, #7]
    2c40:	429a      	cmp	r2, r3
    2c42:	f200 80f4 	bhi.w	2e2e <BSP_LCD_TextCharUnlock+0x222>
        (c > p_font->CharEnd  )) {
        return;
    }

    c                 -= p_font->CharStart;                     /* Get the character index.                             */
    2c46:	69bb      	ldr	r3, [r7, #24]
    2c48:	791b      	ldrb	r3, [r3, #4]
    2c4a:	79fa      	ldrb	r2, [r7, #7]
    2c4c:	1ad3      	subs	r3, r2, r3
    2c4e:	71fb      	strb	r3, [r7, #7]
                                                                /* Get the character info.                              */
    p_font_char        = (BSP_LCD_FONT_CHAR *)&p_font->CharInfoTbl[(int)c];
    2c50:	69bb      	ldr	r3, [r7, #24]
    2c52:	68da      	ldr	r2, [r3, #12]
    2c54:	79fb      	ldrb	r3, [r7, #7]
    2c56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2c5a:	18d3      	adds	r3, r2, r3
    2c5c:	617b      	str	r3, [r7, #20]
    p_font_char_bitmap = (CPU_INT08U        *)p_font_char->BitMapPtr;
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	685b      	ldr	r3, [r3, #4]
    2c62:	613b      	str	r3, [r7, #16]

    char_width  = p_font_char->Width;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	81fb      	strh	r3, [r7, #14]
    char_height = p_font->Height;
    2c6a:	69bb      	ldr	r3, [r7, #24]
    2c6c:	891b      	ldrh	r3, [r3, #8]
    2c6e:	81bb      	strh	r3, [r7, #12]
    pixel_x     = p_dev->TextPixelCur;
    2c70:	69fb      	ldr	r3, [r7, #28]
    2c72:	891b      	ldrh	r3, [r3, #8]
    2c74:	817b      	strh	r3, [r7, #10]
    pos         = p_dev->TextLineCur;
    2c76:	69fb      	ldr	r3, [r7, #28]
    2c78:	795b      	ldrb	r3, [r3, #5]
    2c7a:	727b      	strb	r3, [r7, #9]
    pixel_y     = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT  * pos)
    2c7c:	7a7a      	ldrb	r2, [r7, #9]
    2c7e:	4613      	mov	r3, r2
    2c80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c84:	189b      	adds	r3, r3, r2
    2c86:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2c8a:	461a      	mov	r2, r3
                / p_dev->TextLineMax);
    2c8c:	69fb      	ldr	r3, [r7, #28]
    2c8e:	791b      	ldrb	r3, [r3, #4]
    2c90:	fbb2 f3f3 	udiv	r3, r2, r3

    char_width  = p_font_char->Width;
    char_height = p_font->Height;
    pixel_x     = p_dev->TextPixelCur;
    pos         = p_dev->TextLineCur;
    pixel_y     = (BSP_LCD_PIXEL)((BSP_LCD_HEIGHT  * pos)
    2c94:	84bb      	strh	r3, [r7, #36]	; 0x24
                / p_dev->TextLineMax);

                                                                /* Set the GRAM window                                  */
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, pixel_x);
    2c96:	897b      	ldrh	r3, [r7, #10]
    2c98:	f04f 0050 	mov.w	r0, #80	; 0x50
    2c9c:	4619      	mov	r1, r3
    2c9e:	f000 fa67 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   pixel_x + char_width - 1u);
    2ca2:	897a      	ldrh	r2, [r7, #10]
    2ca4:	89fb      	ldrh	r3, [r7, #14]
    2ca6:	18d3      	adds	r3, r2, r3
    2ca8:	b29b      	uxth	r3, r3
    2caa:	f103 33ff 	add.w	r3, r3, #4294967295
    2cae:	b29b      	uxth	r3, r3
    2cb0:	f04f 0051 	mov.w	r0, #81	; 0x51
    2cb4:	4619      	mov	r1, r3
    2cb6:	f000 fa5b 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, pixel_y);
    2cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    2cbc:	f04f 0052 	mov.w	r0, #82	; 0x52
    2cc0:	4619      	mov	r1, r3
    2cc2:	f000 fa55 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   pixel_y + char_height - 1u);
    2cc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    2cc8:	89bb      	ldrh	r3, [r7, #12]
    2cca:	18d3      	adds	r3, r2, r3
    2ccc:	b29b      	uxth	r3, r3
    2cce:	f103 33ff 	add.w	r3, r3, #4294967295
    2cd2:	b29b      	uxth	r3, r3
    2cd4:	f04f 0053 	mov.w	r0, #83	; 0x53
    2cd8:	4619      	mov	r1, r3
    2cda:	f000 fa49 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, pixel_x);
    2cde:	897b      	ldrh	r3, [r7, #10]
    2ce0:	f04f 0020 	mov.w	r0, #32
    2ce4:	4619      	mov	r1, r3
    2ce6:	f000 fa43 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, pixel_y);
    2cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    2cec:	f04f 0021 	mov.w	r0, #33	; 0x21
    2cf0:	4619      	mov	r1, r3
    2cf2:	f000 fa3d 	bl	3170 <BSP_LCD_CtrlRegWr>


    BSP_LCD_CTRL_CS_LOW();                                      /* Start writing data to the GRAM memory                */
    2cf6:	f04f 0000 	mov.w	r0, #0
    2cfa:	f04f 0140 	mov.w	r1, #64	; 0x40
    2cfe:	f00f f9c9 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    2d02:	f04f 0070 	mov.w	r0, #112	; 0x70
    2d06:	f000 fa73 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2d0a:	f04f 0000 	mov.w	r0, #0
    2d0e:	f000 fa6f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    2d12:	f04f 0022 	mov.w	r0, #34	; 0x22
    2d16:	f000 fa6b 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2d1a:	f04f 0000 	mov.w	r0, #0
    2d1e:	f04f 0140 	mov.w	r1, #64	; 0x40
    2d22:	f00f f9df 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    2d26:	f04f 0000 	mov.w	r0, #0
    2d2a:	f04f 0140 	mov.w	r1, #64	; 0x40
    2d2e:	f00f f9b1 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    2d32:	f04f 0072 	mov.w	r0, #114	; 0x72
    2d36:	f000 fa5b 	bl	31f0 <BSP_LCD_SPI_Xfer>

    for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
    2d3a:	f04f 0300 	mov.w	r3, #0
    2d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
    2d40:	e060      	b.n	2e04 <BSP_LCD_TextCharUnlock+0x1f8>
       for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
    2d42:	f04f 0300 	mov.w	r3, #0
    2d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d4a:	e051      	b.n	2df0 <BSP_LCD_TextCharUnlock+0x1e4>
            bit_ix   = 0u;
    2d4c:	f04f 0300 	mov.w	r3, #0
    2d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                                /* Get the character bitmap.                            */
            bit_map  = p_font_char_bitmap[pixel_y * p_font_char->NbrBytes + byte_ix];
    2d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    2d56:	697a      	ldr	r2, [r7, #20]
    2d58:	7892      	ldrb	r2, [r2, #2]
    2d5a:	fb02 f203 	mul.w	r2, r2, r3
    2d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d62:	18d3      	adds	r3, r2, r3
    2d64:	693a      	ldr	r2, [r7, #16]
    2d66:	18d3      	adds	r3, r2, r3
    2d68:	781b      	ldrb	r3, [r3, #0]
    2d6a:	723b      	strb	r3, [r7, #8]

            while ((bit_ix                   < 8u) &&
    2d6c:	e02c      	b.n	2dc8 <BSP_LCD_TextCharUnlock+0x1bc>
                   (byte_ix * 8u ) + bit_ix  < char_width) {
                if (DEF_BIT_IS_CLR(bit_map, DEF_BIT(7u - bit_ix))) {
    2d6e:	7a3a      	ldrb	r2, [r7, #8]
    2d70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2d74:	f1c3 0307 	rsb	r3, r3, #7
    2d78:	fa22 f303 	lsr.w	r3, r2, r3
    2d7c:	f003 0301 	and.w	r3, r3, #1
    2d80:	b2db      	uxtb	r3, r3
    2d82:	2b00      	cmp	r3, #0
    2d84:	d002      	beq.n	2d8c <BSP_LCD_TextCharUnlock+0x180>
    2d86:	f04f 0300 	mov.w	r3, #0
    2d8a:	e001      	b.n	2d90 <BSP_LCD_TextCharUnlock+0x184>
    2d8c:	f04f 0301 	mov.w	r3, #1
    2d90:	2b00      	cmp	r3, #0
    2d92:	d003      	beq.n	2d9c <BSP_LCD_TextCharUnlock+0x190>
                    color = p_dev->BgColor;
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	847b      	strh	r3, [r7, #34]	; 0x22
    2d9a:	e002      	b.n	2da2 <BSP_LCD_TextCharUnlock+0x196>
                } else {
                    color = p_dev->TextColor;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	885b      	ldrh	r3, [r3, #2]
    2da0:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                BSP_LCD_SPI_Xfer(color >> 8u);
    2da2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    2da4:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2da8:	b29b      	uxth	r3, r3
    2daa:	b2db      	uxtb	r3, r3
    2dac:	4618      	mov	r0, r3
    2dae:	f000 fa1f 	bl	31f0 <BSP_LCD_SPI_Xfer>
                BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    2db2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    2db4:	b2db      	uxtb	r3, r3
    2db6:	4618      	mov	r0, r3
    2db8:	f000 fa1a 	bl	31f0 <BSP_LCD_SPI_Xfer>
                bit_ix++;
    2dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2dc0:	f103 0301 	add.w	r3, r3, #1
    2dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
       for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
            bit_ix   = 0u;
                                                                /* Get the character bitmap.                            */
            bit_map  = p_font_char_bitmap[pixel_y * p_font_char->NbrBytes + byte_ix];

            while ((bit_ix                   < 8u) &&
    2dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2dcc:	2b07      	cmp	r3, #7
    2dce:	d809      	bhi.n	2de4 <BSP_LCD_TextCharUnlock+0x1d8>
                   (byte_ix * 8u ) + bit_ix  < char_width) {
    2dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2dd4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2ddc:	18d2      	adds	r2, r2, r3
    2dde:	89fb      	ldrh	r3, [r7, #14]
       for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
            bit_ix   = 0u;
                                                                /* Get the character bitmap.                            */
            bit_map  = p_font_char_bitmap[pixel_y * p_font_char->NbrBytes + byte_ix];

            while ((bit_ix                   < 8u) &&
    2de0:	429a      	cmp	r2, r3
    2de2:	d3c4      	bcc.n	2d6e <BSP_LCD_TextCharUnlock+0x162>

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);

    for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
       for (byte_ix = 0u ; byte_ix < p_font_char->NbrBytes; byte_ix++) {
    2de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2de8:	f103 0301 	add.w	r3, r3, #1
    2dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2df0:	697b      	ldr	r3, [r7, #20]
    2df2:	789b      	ldrb	r3, [r3, #2]
    2df4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2df8:	429a      	cmp	r2, r3
    2dfa:	d3a7      	bcc.n	2d4c <BSP_LCD_TextCharUnlock+0x140>
    BSP_LCD_CTRL_CS_HIGH();

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);

    for (pixel_y = 0u; pixel_y < char_height; pixel_y++) {
    2dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    2dfe:	f103 0301 	add.w	r3, r3, #1
    2e02:	84bb      	strh	r3, [r7, #36]	; 0x24
    2e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    2e06:	89bb      	ldrh	r3, [r7, #12]
    2e08:	429a      	cmp	r2, r3
    2e0a:	d39a      	bcc.n	2d42 <BSP_LCD_TextCharUnlock+0x136>
                BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
                bit_ix++;
            }
        }
    }
    BSP_LCD_CTRL_CS_HIGH();
    2e0c:	f04f 0000 	mov.w	r0, #0
    2e10:	f04f 0140 	mov.w	r1, #64	; 0x40
    2e14:	f00f f966 	bl	120e4 <CSP_GPIO_BitSet>
    p_dev->TextPixelCur += p_font_char->Dist;
    2e18:	69fb      	ldr	r3, [r7, #28]
    2e1a:	891a      	ldrh	r2, [r3, #8]
    2e1c:	697b      	ldr	r3, [r7, #20]
    2e1e:	785b      	ldrb	r3, [r3, #1]
    2e20:	18d3      	adds	r3, r2, r3
    2e22:	b29a      	uxth	r2, r3
    2e24:	69fb      	ldr	r3, [r7, #28]
    2e26:	811a      	strh	r2, [r3, #8]
    2e28:	e002      	b.n	2e30 <BSP_LCD_TextCharUnlock+0x224>

    p_dev  = &BSP_LCD_Ctxt;                                     /* Obtain a reference to the LCD text context.          */
    p_font = p_dev->TextFontPtr;                                /* Obtain a reference to the LCD text font.             */

    if (p_font == (BSP_LCD_FONT *)0) {
        return;
    2e2a:	bf00      	nop
    2e2c:	e000      	b.n	2e30 <BSP_LCD_TextCharUnlock+0x224>
    }

    if ((c < p_font->CharStart) ||                              /* Check if the Font contains the character.            */
        (c > p_font->CharEnd  )) {
        return;
    2e2e:	bf00      	nop
            }
        }
    }
    BSP_LCD_CTRL_CS_HIGH();
    p_dev->TextPixelCur += p_font_char->Dist;
}
    2e30:	f107 0728 	add.w	r7, r7, #40	; 0x28
    2e34:	46bd      	mov	sp, r7
    2e36:	bd80      	pop	{r7, pc}

00002e38 <BSP_LCD_BitmapDrawUnlock>:
static  void  BSP_LCD_BitmapDrawUnlock (BSP_LCD_PIXEL  x,
                                        BSP_LCD_PIXEL  y,
                                        BSP_LCD_PIXEL  width,
                                        BSP_LCD_PIXEL  height,
                                        CPU_INT16U    *p_bitmap)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	b084      	sub	sp, #16
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	80f8      	strh	r0, [r7, #6]
    2e40:	80b9      	strh	r1, [r7, #4]
    2e42:	807a      	strh	r2, [r7, #2]
    2e44:	803b      	strh	r3, [r7, #0]
    BSP_LCD_COLOR  color;
    BSP_LCD_PIXEL  pixel;


    if (x + width  >  BSP_LCD_WIDTH) {
    2e46:	88fa      	ldrh	r2, [r7, #6]
    2e48:	887b      	ldrh	r3, [r7, #2]
    2e4a:	18d3      	adds	r3, r2, r3
    2e4c:	2bf0      	cmp	r3, #240	; 0xf0
    2e4e:	f200 8082 	bhi.w	2f56 <BSP_LCD_BitmapDrawUnlock+0x11e>
        return;
    }

    if (y + height >  BSP_LCD_HEIGHT) {
    2e52:	88ba      	ldrh	r2, [r7, #4]
    2e54:	883b      	ldrh	r3, [r7, #0]
    2e56:	18d3      	adds	r3, r2, r3
    2e58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    2e5c:	d87d      	bhi.n	2f5a <BSP_LCD_BitmapDrawUnlock+0x122>
        return;
    }

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
    2e5e:	88fb      	ldrh	r3, [r7, #6]
    2e60:	f04f 0050 	mov.w	r0, #80	; 0x50
    2e64:	4619      	mov	r1, r3
    2e66:	f000 f983 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
    2e6a:	88fa      	ldrh	r2, [r7, #6]
    2e6c:	887b      	ldrh	r3, [r7, #2]
    2e6e:	18d3      	adds	r3, r2, r3
    2e70:	b29b      	uxth	r3, r3
    2e72:	f103 33ff 	add.w	r3, r3, #4294967295
    2e76:	b29b      	uxth	r3, r3
    2e78:	f04f 0051 	mov.w	r0, #81	; 0x51
    2e7c:	4619      	mov	r1, r3
    2e7e:	f000 f977 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
    2e82:	88bb      	ldrh	r3, [r7, #4]
    2e84:	f04f 0052 	mov.w	r0, #82	; 0x52
    2e88:	4619      	mov	r1, r3
    2e8a:	f000 f971 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
    2e8e:	88ba      	ldrh	r2, [r7, #4]
    2e90:	883b      	ldrh	r3, [r7, #0]
    2e92:	18d3      	adds	r3, r2, r3
    2e94:	b29b      	uxth	r3, r3
    2e96:	f103 33ff 	add.w	r3, r3, #4294967295
    2e9a:	b29b      	uxth	r3, r3
    2e9c:	f04f 0053 	mov.w	r0, #83	; 0x53
    2ea0:	4619      	mov	r1, r3
    2ea2:	f000 f965 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
    2ea6:	88fb      	ldrh	r3, [r7, #6]
    2ea8:	f04f 0020 	mov.w	r0, #32
    2eac:	4619      	mov	r1, r3
    2eae:	f000 f95f 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
    2eb2:	88bb      	ldrh	r3, [r7, #4]
    2eb4:	f04f 0021 	mov.w	r0, #33	; 0x21
    2eb8:	4619      	mov	r1, r3
    2eba:	f000 f959 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    2ebe:	f04f 0000 	mov.w	r0, #0
    2ec2:	f04f 0140 	mov.w	r1, #64	; 0x40
    2ec6:	f00f f8e5 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    2eca:	f04f 0070 	mov.w	r0, #112	; 0x70
    2ece:	f000 f98f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    2ed2:	f04f 0000 	mov.w	r0, #0
    2ed6:	f000 f98b 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    2eda:	f04f 0022 	mov.w	r0, #34	; 0x22
    2ede:	f000 f987 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    2ee2:	f04f 0000 	mov.w	r0, #0
    2ee6:	f04f 0140 	mov.w	r1, #64	; 0x40
    2eea:	f00f f8fb 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    2eee:	f04f 0000 	mov.w	r0, #0
    2ef2:	f04f 0140 	mov.w	r1, #64	; 0x40
    2ef6:	f00f f8cd 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    2efa:	f04f 0072 	mov.w	r0, #114	; 0x72
    2efe:	f000 f977 	bl	31f0 <BSP_LCD_SPI_Xfer>

    for (pixel = 0; pixel < width * height; pixel++) {
    2f02:	f04f 0300 	mov.w	r3, #0
    2f06:	81fb      	strh	r3, [r7, #14]
    2f08:	e017      	b.n	2f3a <BSP_LCD_BitmapDrawUnlock+0x102>
        color = p_bitmap[pixel];
    2f0a:	89fb      	ldrh	r3, [r7, #14]
    2f0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2f10:	69ba      	ldr	r2, [r7, #24]
    2f12:	18d3      	adds	r3, r2, r3
    2f14:	881b      	ldrh	r3, [r3, #0]
    2f16:	81bb      	strh	r3, [r7, #12]
        BSP_LCD_SPI_Xfer(color >> 8u);
    2f18:	89bb      	ldrh	r3, [r7, #12]
    2f1a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2f1e:	b29b      	uxth	r3, r3
    2f20:	b2db      	uxtb	r3, r3
    2f22:	4618      	mov	r0, r3
    2f24:	f000 f964 	bl	31f0 <BSP_LCD_SPI_Xfer>
        BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    2f28:	89bb      	ldrh	r3, [r7, #12]
    2f2a:	b2db      	uxtb	r3, r3
    2f2c:	4618      	mov	r0, r3
    2f2e:	f000 f95f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_CTRL_CS_HIGH();

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);

    for (pixel = 0; pixel < width * height; pixel++) {
    2f32:	89fb      	ldrh	r3, [r7, #14]
    2f34:	f103 0301 	add.w	r3, r3, #1
    2f38:	81fb      	strh	r3, [r7, #14]
    2f3a:	89fa      	ldrh	r2, [r7, #14]
    2f3c:	887b      	ldrh	r3, [r7, #2]
    2f3e:	8839      	ldrh	r1, [r7, #0]
    2f40:	fb01 f303 	mul.w	r3, r1, r3
    2f44:	429a      	cmp	r2, r3
    2f46:	dbe0      	blt.n	2f0a <BSP_LCD_BitmapDrawUnlock+0xd2>
        color = p_bitmap[pixel];
        BSP_LCD_SPI_Xfer(color >> 8u);
        BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    }

    BSP_LCD_CTRL_CS_HIGH();
    2f48:	f04f 0000 	mov.w	r0, #0
    2f4c:	f04f 0140 	mov.w	r1, #64	; 0x40
    2f50:	f00f f8c8 	bl	120e4 <CSP_GPIO_BitSet>
    2f54:	e002      	b.n	2f5c <BSP_LCD_BitmapDrawUnlock+0x124>
    BSP_LCD_COLOR  color;
    BSP_LCD_PIXEL  pixel;


    if (x + width  >  BSP_LCD_WIDTH) {
        return;
    2f56:	bf00      	nop
    2f58:	e000      	b.n	2f5c <BSP_LCD_BitmapDrawUnlock+0x124>
    }

    if (y + height >  BSP_LCD_HEIGHT) {
        return;
    2f5a:	bf00      	nop
        BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    }

    BSP_LCD_CTRL_CS_HIGH();

}
    2f5c:	f107 0710 	add.w	r7, r7, #16
    2f60:	46bd      	mov	sp, r7
    2f62:	bd80      	pop	{r7, pc}

00002f64 <BSP_LCD_RectDrawUnlock>:
                                        BSP_LCD_PIXEL  height,
                                        CPU_BOOLEAN    fill,
                                        BSP_LCD_COLOR  fill_color,
                                        BSP_LCD_PIXEL  line_weight,
                                        BSP_LCD_COLOR  line_color)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b084      	sub	sp, #16
    2f68:	af00      	add	r7, sp, #0
    2f6a:	80f8      	strh	r0, [r7, #6]
    2f6c:	80b9      	strh	r1, [r7, #4]
    2f6e:	807a      	strh	r2, [r7, #2]
    2f70:	803b      	strh	r3, [r7, #0]
    BSP_LCD_PIXEL  pixel_x;
    BSP_LCD_PIXEL  pixel_y;
    BSP_LCD_COLOR  color;

    if (x + width  > BSP_LCD_WIDTH) {
    2f72:	88fa      	ldrh	r2, [r7, #6]
    2f74:	887b      	ldrh	r3, [r7, #2]
    2f76:	18d3      	adds	r3, r2, r3
    2f78:	2bf0      	cmp	r3, #240	; 0xf0
    2f7a:	f200 80a8 	bhi.w	30ce <BSP_LCD_RectDrawUnlock+0x16a>
        return;
    }

    if (y + height > BSP_LCD_HEIGHT) {
    2f7e:	88ba      	ldrh	r2, [r7, #4]
    2f80:	883b      	ldrh	r3, [r7, #0]
    2f82:	18d3      	adds	r3, r2, r3
    2f84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    2f88:	f200 80a3 	bhi.w	30d2 <BSP_LCD_RectDrawUnlock+0x16e>
        return;
    }

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_START, x);
    2f8c:	88fb      	ldrh	r3, [r7, #6]
    2f8e:	f04f 0050 	mov.w	r0, #80	; 0x50
    2f92:	4619      	mov	r1, r3
    2f94:	f000 f8ec 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_ADDR_END,   x + width - 1u);
    2f98:	88fa      	ldrh	r2, [r7, #6]
    2f9a:	887b      	ldrh	r3, [r7, #2]
    2f9c:	18d3      	adds	r3, r2, r3
    2f9e:	b29b      	uxth	r3, r3
    2fa0:	f103 33ff 	add.w	r3, r3, #4294967295
    2fa4:	b29b      	uxth	r3, r3
    2fa6:	f04f 0051 	mov.w	r0, #81	; 0x51
    2faa:	4619      	mov	r1, r3
    2fac:	f000 f8e0 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_START, y);
    2fb0:	88bb      	ldrh	r3, [r7, #4]
    2fb2:	f04f 0052 	mov.w	r0, #82	; 0x52
    2fb6:	4619      	mov	r1, r3
    2fb8:	f000 f8da 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_ADDR_END,   y + height - 1u);
    2fbc:	88ba      	ldrh	r2, [r7, #4]
    2fbe:	883b      	ldrh	r3, [r7, #0]
    2fc0:	18d3      	adds	r3, r2, r3
    2fc2:	b29b      	uxth	r3, r3
    2fc4:	f103 33ff 	add.w	r3, r3, #4294967295
    2fc8:	b29b      	uxth	r3, r3
    2fca:	f04f 0053 	mov.w	r0, #83	; 0x53
    2fce:	4619      	mov	r1, r3
    2fd0:	f000 f8ce 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CtrlRegWr(ILI9320_REG_HOR_GRAM_ADDR_SET, x);
    2fd4:	88fb      	ldrh	r3, [r7, #6]
    2fd6:	f04f 0020 	mov.w	r0, #32
    2fda:	4619      	mov	r1, r3
    2fdc:	f000 f8c8 	bl	3170 <BSP_LCD_CtrlRegWr>
    BSP_LCD_CtrlRegWr(ILI9320_REG_VER_GRAM_ADDR_SET, y);
    2fe0:	88bb      	ldrh	r3, [r7, #4]
    2fe2:	f04f 0021 	mov.w	r0, #33	; 0x21
    2fe6:	4619      	mov	r1, r3
    2fe8:	f000 f8c2 	bl	3170 <BSP_LCD_CtrlRegWr>

    BSP_LCD_CTRL_CS_LOW();
    2fec:	f04f 0000 	mov.w	r0, #0
    2ff0:	f04f 0140 	mov.w	r1, #64	; 0x40
    2ff4:	f00f f84e 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    2ff8:	f04f 0070 	mov.w	r0, #112	; 0x70
    2ffc:	f000 f8f8 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    3000:	f04f 0000 	mov.w	r0, #0
    3004:	f000 f8f4 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(ILI9320_REG_GRAM_DATA_WR);
    3008:	f04f 0022 	mov.w	r0, #34	; 0x22
    300c:	f000 f8f0 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    3010:	f04f 0000 	mov.w	r0, #0
    3014:	f04f 0140 	mov.w	r1, #64	; 0x40
    3018:	f00f f864 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    301c:	f04f 0000 	mov.w	r0, #0
    3020:	f04f 0140 	mov.w	r1, #64	; 0x40
    3024:	f00f f836 	bl	12094 <CSP_GPIO_BitClr>
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    3028:	f04f 0072 	mov.w	r0, #114	; 0x72
    302c:	f000 f8e0 	bl	31f0 <BSP_LCD_SPI_Xfer>


    for (pixel_y = 0; pixel_y < height; pixel_y++) {
    3030:	f04f 0300 	mov.w	r3, #0
    3034:	81bb      	strh	r3, [r7, #12]
    3036:	e03f      	b.n	30b8 <BSP_LCD_RectDrawUnlock+0x154>
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
    3038:	f04f 0300 	mov.w	r3, #0
    303c:	81fb      	strh	r3, [r7, #14]
    303e:	e033      	b.n	30a8 <BSP_LCD_RectDrawUnlock+0x144>
            if ((pixel_x  < line_weight         ) ||
    3040:	89fa      	ldrh	r2, [r7, #14]
    3042:	8c3b      	ldrh	r3, [r7, #32]
    3044:	429a      	cmp	r2, r3
    3046:	d30f      	bcc.n	3068 <BSP_LCD_RectDrawUnlock+0x104>
                (pixel_x >= width  - line_weight) ||
    3048:	89fa      	ldrh	r2, [r7, #14]
    304a:	8879      	ldrh	r1, [r7, #2]
    304c:	8c3b      	ldrh	r3, [r7, #32]
    304e:	1acb      	subs	r3, r1, r3
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y < height; pixel_y++) {
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
            if ((pixel_x  < line_weight         ) ||
    3050:	429a      	cmp	r2, r3
    3052:	da09      	bge.n	3068 <BSP_LCD_RectDrawUnlock+0x104>
                (pixel_x >= width  - line_weight) ||
    3054:	89ba      	ldrh	r2, [r7, #12]
    3056:	8c3b      	ldrh	r3, [r7, #32]
    3058:	429a      	cmp	r2, r3
    305a:	d305      	bcc.n	3068 <BSP_LCD_RectDrawUnlock+0x104>
                (pixel_y  < line_weight         ) ||
                (pixel_y >= height - line_weight)) {
    305c:	89ba      	ldrh	r2, [r7, #12]
    305e:	8839      	ldrh	r1, [r7, #0]
    3060:	8c3b      	ldrh	r3, [r7, #32]
    3062:	1acb      	subs	r3, r1, r3

    for (pixel_y = 0; pixel_y < height; pixel_y++) {
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
            if ((pixel_x  < line_weight         ) ||
                (pixel_x >= width  - line_weight) ||
                (pixel_y  < line_weight         ) ||
    3064:	429a      	cmp	r2, r3
    3066:	db02      	blt.n	306e <BSP_LCD_RectDrawUnlock+0x10a>
                (pixel_y >= height - line_weight)) {
                color = line_color;
    3068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    306a:	817b      	strh	r3, [r7, #10]
    306c:	e00b      	b.n	3086 <BSP_LCD_RectDrawUnlock+0x122>
            } else if (fill == DEF_YES) {
    306e:	7e3b      	ldrb	r3, [r7, #24]
    3070:	2b01      	cmp	r3, #1
    3072:	d102      	bne.n	307a <BSP_LCD_RectDrawUnlock+0x116>
                color = fill_color;
    3074:	8bbb      	ldrh	r3, [r7, #28]
    3076:	817b      	strh	r3, [r7, #10]
    3078:	e005      	b.n	3086 <BSP_LCD_RectDrawUnlock+0x122>
            } else {
                color = BSP_LCD_Ctxt.BgColor;
    307a:	f640 33d0 	movw	r3, #3024	; 0xbd0
    307e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3082:	881b      	ldrh	r3, [r3, #0]
    3084:	817b      	strh	r3, [r7, #10]
            }
            BSP_LCD_SPI_Xfer(color >> 8u);
    3086:	897b      	ldrh	r3, [r7, #10]
    3088:	ea4f 2313 	mov.w	r3, r3, lsr #8
    308c:	b29b      	uxth	r3, r3
    308e:	b2db      	uxtb	r3, r3
    3090:	4618      	mov	r0, r3
    3092:	f000 f8ad 	bl	31f0 <BSP_LCD_SPI_Xfer>
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
    3096:	897b      	ldrh	r3, [r7, #10]
    3098:	b2db      	uxtb	r3, r3
    309a:	4618      	mov	r0, r3
    309c:	f000 f8a8 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y < height; pixel_y++) {
        for (pixel_x = 0; pixel_x < width; pixel_x++) {
    30a0:	89fb      	ldrh	r3, [r7, #14]
    30a2:	f103 0301 	add.w	r3, r3, #1
    30a6:	81fb      	strh	r3, [r7, #14]
    30a8:	89fa      	ldrh	r2, [r7, #14]
    30aa:	887b      	ldrh	r3, [r7, #2]
    30ac:	429a      	cmp	r2, r3
    30ae:	d3c7      	bcc.n	3040 <BSP_LCD_RectDrawUnlock+0xdc>

    BSP_LCD_CTRL_CS_LOW();
    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);


    for (pixel_y = 0; pixel_y < height; pixel_y++) {
    30b0:	89bb      	ldrh	r3, [r7, #12]
    30b2:	f103 0301 	add.w	r3, r3, #1
    30b6:	81bb      	strh	r3, [r7, #12]
    30b8:	89ba      	ldrh	r2, [r7, #12]
    30ba:	883b      	ldrh	r3, [r7, #0]
    30bc:	429a      	cmp	r2, r3
    30be:	d3bb      	bcc.n	3038 <BSP_LCD_RectDrawUnlock+0xd4>
            BSP_LCD_SPI_Xfer(color >> 8u);
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
        }
    }

    BSP_LCD_CTRL_CS_HIGH();
    30c0:	f04f 0000 	mov.w	r0, #0
    30c4:	f04f 0140 	mov.w	r1, #64	; 0x40
    30c8:	f00f f80c 	bl	120e4 <CSP_GPIO_BitSet>
    30cc:	e002      	b.n	30d4 <BSP_LCD_RectDrawUnlock+0x170>
    BSP_LCD_PIXEL  pixel_x;
    BSP_LCD_PIXEL  pixel_y;
    BSP_LCD_COLOR  color;

    if (x + width  > BSP_LCD_WIDTH) {
        return;
    30ce:	bf00      	nop
    30d0:	e000      	b.n	30d4 <BSP_LCD_RectDrawUnlock+0x170>
    }

    if (y + height > BSP_LCD_HEIGHT) {
        return;
    30d2:	bf00      	nop
            BSP_LCD_SPI_Xfer(color & DEF_INT_08_MASK);
        }
    }

    BSP_LCD_CTRL_CS_HIGH();
}
    30d4:	f107 0710 	add.w	r7, r7, #16
    30d8:	46bd      	mov	sp, r7
    30da:	bd80      	pop	{r7, pc}

000030dc <BSP_LCD_CtrlRegRd>:
*********************************************************************************************************
*/


static  CPU_INT16U   BSP_LCD_CtrlRegRd (CPU_INT08U  reg_off)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b084      	sub	sp, #16
    30e0:	af00      	add	r7, sp, #0
    30e2:	4603      	mov	r3, r0
    30e4:	71fb      	strb	r3, [r7, #7]
    CPU_INT16U  reg_val;


    BSP_LCD_CTRL_CS_LOW();
    30e6:	f04f 0000 	mov.w	r0, #0
    30ea:	f04f 0140 	mov.w	r1, #64	; 0x40
    30ee:	f00e ffd1 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    30f2:	f04f 0070 	mov.w	r0, #112	; 0x70
    30f6:	f000 f87b 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    30fa:	f04f 0000 	mov.w	r0, #0
    30fe:	f000 f877 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(reg_off);
    3102:	79fb      	ldrb	r3, [r7, #7]
    3104:	4618      	mov	r0, r3
    3106:	f000 f873 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    310a:	f04f 0000 	mov.w	r0, #0
    310e:	f04f 0140 	mov.w	r1, #64	; 0x40
    3112:	f00e ffe7 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    3116:	f04f 0000 	mov.w	r0, #0
    311a:	f04f 0140 	mov.w	r1, #64	; 0x40
    311e:	f00e ffb9 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_RD_REG);
    3122:	f04f 0073 	mov.w	r0, #115	; 0x73
    3126:	f000 f863 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    312a:	f04f 0000 	mov.w	r0, #0
    312e:	f000 f85f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    reg_val  = BSP_LCD_SPI_Xfer(0u);
    3132:	f04f 0000 	mov.w	r0, #0
    3136:	f000 f85b 	bl	31f0 <BSP_LCD_SPI_Xfer>
    313a:	4603      	mov	r3, r0
    313c:	81fb      	strh	r3, [r7, #14]
    reg_val  = (reg_val << 8u);
    313e:	89fb      	ldrh	r3, [r7, #14]
    3140:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3144:	81fb      	strh	r3, [r7, #14]
    reg_val |= BSP_LCD_SPI_Xfer(0u);
    3146:	f04f 0000 	mov.w	r0, #0
    314a:	f000 f851 	bl	31f0 <BSP_LCD_SPI_Xfer>
    314e:	4603      	mov	r3, r0
    3150:	461a      	mov	r2, r3
    3152:	89fb      	ldrh	r3, [r7, #14]
    3154:	4313      	orrs	r3, r2
    3156:	81fb      	strh	r3, [r7, #14]

    BSP_LCD_CTRL_CS_HIGH();
    3158:	f04f 0000 	mov.w	r0, #0
    315c:	f04f 0140 	mov.w	r1, #64	; 0x40
    3160:	f00e ffc0 	bl	120e4 <CSP_GPIO_BitSet>

    return (reg_val);
    3164:	89fb      	ldrh	r3, [r7, #14]
}
    3166:	4618      	mov	r0, r3
    3168:	f107 0710 	add.w	r7, r7, #16
    316c:	46bd      	mov	sp, r7
    316e:	bd80      	pop	{r7, pc}

00003170 <BSP_LCD_CtrlRegWr>:
*********************************************************************************************************
*/

static  void  BSP_LCD_CtrlRegWr (CPU_INT08U  reg_off,
                                 CPU_INT16U  reg_val)
{
    3170:	b580      	push	{r7, lr}
    3172:	b082      	sub	sp, #8
    3174:	af00      	add	r7, sp, #0
    3176:	4602      	mov	r2, r0
    3178:	460b      	mov	r3, r1
    317a:	71fa      	strb	r2, [r7, #7]
    317c:	80bb      	strh	r3, [r7, #4]
    BSP_LCD_CTRL_CS_LOW();
    317e:	f04f 0000 	mov.w	r0, #0
    3182:	f04f 0140 	mov.w	r1, #64	; 0x40
    3186:	f00e ff85 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_SET_IX);
    318a:	f04f 0070 	mov.w	r0, #112	; 0x70
    318e:	f000 f82f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(0u);
    3192:	f04f 0000 	mov.w	r0, #0
    3196:	f000 f82b 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(reg_off);
    319a:	79fb      	ldrb	r3, [r7, #7]
    319c:	4618      	mov	r0, r3
    319e:	f000 f827 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    31a2:	f04f 0000 	mov.w	r0, #0
    31a6:	f04f 0140 	mov.w	r1, #64	; 0x40
    31aa:	f00e ff9b 	bl	120e4 <CSP_GPIO_BitSet>

    BSP_LCD_CTRL_CS_LOW();
    31ae:	f04f 0000 	mov.w	r0, #0
    31b2:	f04f 0140 	mov.w	r1, #64	; 0x40
    31b6:	f00e ff6d 	bl	12094 <CSP_GPIO_BitClr>

    BSP_LCD_SPI_Xfer(BSP_LCD_SPI_ILI9320_START_WR_REG);
    31ba:	f04f 0072 	mov.w	r0, #114	; 0x72
    31be:	f000 f817 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(reg_val >> 8u);
    31c2:	88bb      	ldrh	r3, [r7, #4]
    31c4:	ea4f 2313 	mov.w	r3, r3, lsr #8
    31c8:	b29b      	uxth	r3, r3
    31ca:	b2db      	uxtb	r3, r3
    31cc:	4618      	mov	r0, r3
    31ce:	f000 f80f 	bl	31f0 <BSP_LCD_SPI_Xfer>
    BSP_LCD_SPI_Xfer(reg_val & DEF_INT_08_MASK);
    31d2:	88bb      	ldrh	r3, [r7, #4]
    31d4:	b2db      	uxtb	r3, r3
    31d6:	4618      	mov	r0, r3
    31d8:	f000 f80a 	bl	31f0 <BSP_LCD_SPI_Xfer>

    BSP_LCD_CTRL_CS_HIGH();
    31dc:	f04f 0000 	mov.w	r0, #0
    31e0:	f04f 0140 	mov.w	r1, #64	; 0x40
    31e4:	f00e ff7e 	bl	120e4 <CSP_GPIO_BitSet>
}
    31e8:	f107 0708 	add.w	r7, r7, #8
    31ec:	46bd      	mov	sp, r7
    31ee:	bd80      	pop	{r7, pc}

000031f0 <BSP_LCD_SPI_Xfer>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  CPU_INT08U  BSP_LCD_SPI_Xfer (CPU_INT08U  datum)
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b086      	sub	sp, #24
    31f4:	af00      	add	r7, sp, #0
    31f6:	4603      	mov	r3, r0
    31f8:	71fb      	strb	r3, [r7, #7]
    CPU_TS32    ts_elapsed;
    CPU_TS32    ts_elapsed_max;
    CPU_INT32U  reg_val;


    BSP_LCD_SSP1_REG_DR = (CPU_INT32U)datum;                    /* Write data into the data register.                   */
    31fa:	f04f 0308 	mov.w	r3, #8
    31fe:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3202:	79fa      	ldrb	r2, [r7, #7]
    3204:	601a      	str	r2, [r3, #0]
    ts_elapsed_max      = BSP_LCD_Ctxt.MaxTimeOut;
    3206:	f640 33d0 	movw	r3, #3024	; 0xbd0
    320a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3210:	613b      	str	r3, [r7, #16]
    ts_start            = CPU_TS_Get32();
    3212:	f7fe fabb 	bl	178c <CPU_TS_Get32>
    3216:	60f8      	str	r0, [r7, #12]
    ts_elapsed          = CPU_TS_Get32() - ts_start;            /* Calculated the elapsed time.                         */
    3218:	f7fe fab8 	bl	178c <CPU_TS_Get32>
    321c:	4602      	mov	r2, r0
    321e:	68fb      	ldr	r3, [r7, #12]
    3220:	1ad3      	subs	r3, r2, r3
    3222:	617b      	str	r3, [r7, #20]

                                                                /* While the receive register is not empty or a ....    */
                                                                /* ... timeout has not occurred?                        */
    while ((DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) &&
    3224:	e005      	b.n	3232 <BSP_LCD_SPI_Xfer+0x42>
           (ts_elapsed < ts_elapsed_max)) {
        ts_elapsed = CPU_TS_Get32() - ts_start;                 /* Calculate the elapsed time.                          */
    3226:	f7fe fab1 	bl	178c <CPU_TS_Get32>
    322a:	4602      	mov	r2, r0
    322c:	68fb      	ldr	r3, [r7, #12]
    322e:	1ad3      	subs	r3, r2, r3
    3230:	617b      	str	r3, [r7, #20]
    ts_start            = CPU_TS_Get32();
    ts_elapsed          = CPU_TS_Get32() - ts_start;            /* Calculated the elapsed time.                         */

                                                                /* While the receive register is not empty or a ....    */
                                                                /* ... timeout has not occurred?                        */
    while ((DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) &&
    3232:	f04f 030c 	mov.w	r3, #12
    3236:	f2c4 0303 	movt	r3, #16387	; 0x4003
    323a:	681b      	ldr	r3, [r3, #0]
    323c:	f003 0304 	and.w	r3, r3, #4
    3240:	2b00      	cmp	r3, #0
    3242:	d103      	bne.n	324c <BSP_LCD_SPI_Xfer+0x5c>
    3244:	697a      	ldr	r2, [r7, #20]
    3246:	693b      	ldr	r3, [r7, #16]
    3248:	429a      	cmp	r2, r3
    324a:	d3ec      	bcc.n	3226 <BSP_LCD_SPI_Xfer+0x36>
           (ts_elapsed < ts_elapsed_max)) {
        ts_elapsed = CPU_TS_Get32() - ts_start;                 /* Calculate the elapsed time.                          */
    }

    if (DEF_BIT_IS_CLR(BSP_LCD_SSP1_REG_SR, BSP_LCD_SSP1_BIT_SR_RNE)) {
    324c:	f04f 030c 	mov.w	r3, #12
    3250:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	f003 0304 	and.w	r3, r3, #4
    325a:	2b00      	cmp	r3, #0
    325c:	d102      	bne.n	3264 <BSP_LCD_SPI_Xfer+0x74>
        return ((CPU_INT08U)0);
    325e:	f04f 0300 	mov.w	r3, #0
    3262:	e008      	b.n	3276 <BSP_LCD_SPI_Xfer+0x86>
    }

    reg_val = (BSP_LCD_SSP1_REG_DR & DEF_INT_08_MASK);
    3264:	f04f 0308 	mov.w	r3, #8
    3268:	f2c4 0303 	movt	r3, #16387	; 0x4003
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	b2db      	uxtb	r3, r3
    3270:	60bb      	str	r3, [r7, #8]

    return ((CPU_INT08U)reg_val);
    3272:	68bb      	ldr	r3, [r7, #8]
    3274:	b2db      	uxtb	r3, r3
}
    3276:	4618      	mov	r0, r3
    3278:	f107 0718 	add.w	r7, r7, #24
    327c:	46bd      	mov	sp, r7
    327e:	bd80      	pop	{r7, pc}

00003280 <BSP_LCD_Lock>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_LCD_Lock (void)
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af02      	add	r7, sp, #8
    OS_ERR  err;


    OSMutexPend((OS_MUTEX  *)&BSP_LCD_Ctxt.Lock,
    3286:	f107 0306 	add.w	r3, r7, #6
    328a:	9300      	str	r3, [sp, #0]
    328c:	4806      	ldr	r0, [pc, #24]	; (32a8 <BSP_LCD_Lock+0x28>)
    328e:	f04f 0100 	mov.w	r1, #0
    3292:	f04f 0200 	mov.w	r2, #0
    3296:	f04f 0300 	mov.w	r3, #0
    329a:	f009 fb7f 	bl	c99c <OSMutexPend>
                (OS_OPT     )OS_OPT_PEND_BLOCKING,
                (CPU_TS    *)0,
                (OS_ERR    *)&err);

    (void)&err;
}
    329e:	f107 0708 	add.w	r7, r7, #8
    32a2:	46bd      	mov	sp, r7
    32a4:	bd80      	pop	{r7, pc}
    32a6:	bf00      	nop
    32a8:	10000be0 	.word	0x10000be0

000032ac <BSP_LCD_Unlock>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_LCD_Unlock()
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    OS_ERR  err;


    OSMutexPost((OS_MUTEX  *)&BSP_LCD_Ctxt.Lock,
    32b2:	4806      	ldr	r0, [pc, #24]	; (32cc <BSP_LCD_Unlock+0x20>)
    32b4:	f04f 0100 	mov.w	r1, #0
    32b8:	f107 0306 	add.w	r3, r7, #6
    32bc:	461a      	mov	r2, r3
    32be:	f009 fe19 	bl	cef4 <OSMutexPost>
                (OS_OPT     )OS_OPT_POST_NONE,
                (OS_ERR    *)&err);
}
    32c2:	f107 0708 	add.w	r7, r7, #8
    32c6:	46bd      	mov	sp, r7
    32c8:	bd80      	pop	{r7, pc}
    32ca:	bf00      	nop
    32cc:	10000be0 	.word	0x10000be0

000032d0 <CPU_TS_TmrInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
    32d0:	b580      	push	{r7, lr}
    32d2:	b082      	sub	sp, #8
    32d4:	af00      	add	r7, sp, #0
    CPU_INT32U  fclk_freq;
    
    fclk_freq = CSP_PM_CPU_ClkFreqGet();
    32d6:	f012 fc73 	bl	15bc0 <CSP_PM_CPU_ClkFreqGet>
    32da:	6078      	str	r0, [r7, #4]
    
    CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
    32dc:	f64e 53fc 	movw	r3, #60924	; 0xedfc
    32e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    32e4:	f64e 52fc 	movw	r2, #60924	; 0xedfc
    32e8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    32ec:	6812      	ldr	r2, [r2, #0]
    32ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    32f2:	601a      	str	r2, [r3, #0]
    CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
    32f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    32f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    32fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3300:	f2ce 0200 	movt	r2, #57344	; 0xe000
    3304:	6812      	ldr	r2, [r2, #0]
    3306:	f042 0201 	orr.w	r2, r2, #1
    330a:	601a      	str	r2, [r3, #0]

    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);    
    330c:	6878      	ldr	r0, [r7, #4]
    330e:	f7fe fa6f 	bl	17f0 <CPU_TS_TmrFreqSet>
}
    3312:	f107 0708 	add.w	r7, r7, #8
    3316:	46bd      	mov	sp, r7
    3318:	bd80      	pop	{r7, pc}
    331a:	bf00      	nop

0000331c <CPU_TS_TmrRd>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
    331c:	b480      	push	{r7}
    331e:	b083      	sub	sp, #12
    3320:	af00      	add	r7, sp, #0
    CPU_TS_TMR  ts_tmr_cnts;

                                                                
    ts_tmr_cnts  = (CPU_TS_TMR)CPU_BSP_REG_DWT_CYCCNT;
    3322:	f241 0304 	movw	r3, #4100	; 0x1004
    3326:	f2ce 0300 	movt	r3, #57344	; 0xe000
    332a:	681b      	ldr	r3, [r3, #0]
    332c:	607b      	str	r3, [r7, #4]
    
    return (ts_tmr_cnts);
    332e:	687b      	ldr	r3, [r7, #4]
}
    3330:	4618      	mov	r0, r3
    3332:	f107 070c 	add.w	r7, r7, #12
    3336:	46bd      	mov	sp, r7
    3338:	bc80      	pop	{r7}
    333a:	4770      	bx	lr

0000333c <CPU_TS32_to_uSec>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_32_EN == DEF_ENABLED)
CPU_INT64U  CPU_TS32_to_uSec (CPU_TS32  ts_cnts)
{
    333c:	b480      	push	{r7}
    333e:	b083      	sub	sp, #12
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]

    return (0u);
    3344:	f04f 0200 	mov.w	r2, #0
    3348:	f04f 0300 	mov.w	r3, #0

}
    334c:	4610      	mov	r0, r2
    334e:	4619      	mov	r1, r3
    3350:	f107 070c 	add.w	r7, r7, #12
    3354:	46bd      	mov	sp, r7
    3356:	bc80      	pop	{r7}
    3358:	4770      	bx	lr
    335a:	bf00      	nop

0000335c <BSP_LowLevelInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LowLevelInit (void)
{
    335c:	b480      	push	{r7}
    335e:	af00      	add	r7, sp, #0

}
    3360:	46bd      	mov	sp, r7
    3362:	bc80      	pop	{r7}
    3364:	4770      	bx	lr
    3366:	bf00      	nop

00003368 <BSP_PreInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_PreInit (void)
{
    3368:	b580      	push	{r7, lr}
    336a:	af00      	add	r7, sp, #0
    BSP_CPU_Init();                                             /* Initialize CPU Clks & PLLs                           */
    336c:	f000 f80e 	bl	338c <BSP_CPU_Init>

    CPU_IntDis();                                               /* Disable CPU interrupts.                              */
    3370:	f014 fd34 	bl	17ddc <CPU_IntDis>
    NVICInit();													/* Initialize hardware interrupt controller*/
    3374:	f000 fed4 	bl	4120 <NVICInit>
    CSP_IntInit();                                              /* Initialize software interrupt controller module.              */
    3378:	f012 faea 	bl	15950 <CSP_IntInit>

}
    337c:	bd80      	pop	{r7, pc}
    337e:	bf00      	nop

00003380 <BSP_PostInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_PostInit (void)
{
    3380:	b480      	push	{r7}
    3382:	af00      	add	r7, sp, #0

}
    3384:	46bd      	mov	sp, r7
    3386:	bc80      	pop	{r7}
    3388:	4770      	bx	lr
    338a:	bf00      	nop

0000338c <BSP_CPU_Init>:
*                                     = 48 Mhz
*********************************************************************************************************
*/

static  CPU_BOOLEAN  BSP_CPU_Init (void)
{
    338c:	b580      	push	{r7, lr}
    338e:	b084      	sub	sp, #16
    3390:	af00      	add	r7, sp, #0
    CPU_INT16U    reg_to;
    CPU_INT32U    reg_val;
    CPU_SR_ALLOC();
    3392:	f04f 0300 	mov.w	r3, #0
    3396:	60bb      	str	r3, [r7, #8]


    BSP_REG_FLASHCFG = (CPU_INT32U)BSP_MSK_FLASHCFG_CLK_6;      /* Set 6 cycles to acces the Flash memory (Safe setting)*/
    3398:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    339c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33a0:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
    33a4:	601a      	str	r2, [r3, #0]

                                                                /* ----------- MAIN OSCILLATOR INITIALIZATION --------- */
    DEF_BIT_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCRANGE);             /* Set the main oscillator range                        */
    33a6:	f24c 13a0 	movw	r3, #49568	; 0xc1a0
    33aa:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33ae:	f24c 12a0 	movw	r2, #49568	; 0xc1a0
    33b2:	f2c4 020f 	movt	r2, #16399	; 0x400f
    33b6:	6812      	ldr	r2, [r2, #0]
    33b8:	f022 0210 	bic.w	r2, r2, #16
    33bc:	601a      	str	r2, [r3, #0]


    reg_to = BSP_VAL_MAX_TO;
    33be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    33c2:	81fb      	strh	r3, [r7, #14]

    DEF_BIT_SET(BSP_REG_SCS, BSP_BIT_SCS_OSCEN);                /* Enable the Main Oscillator                           */
    33c4:	f24c 13a0 	movw	r3, #49568	; 0xc1a0
    33c8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33cc:	f24c 12a0 	movw	r2, #49568	; 0xc1a0
    33d0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    33d4:	6812      	ldr	r2, [r2, #0]
    33d6:	f042 0220 	orr.w	r2, r2, #32
    33da:	601a      	str	r2, [r3, #0]

                                                                /* Wait until the main oscillator is enabled.           */
    while (DEF_BIT_IS_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCSTAT) &&
    33dc:	e003      	b.n	33e6 <BSP_CPU_Init+0x5a>
          (reg_to > 0u)) {
        reg_to--;
    33de:	89fb      	ldrh	r3, [r7, #14]
    33e0:	f103 33ff 	add.w	r3, r3, #4294967295
    33e4:	81fb      	strh	r3, [r7, #14]
    reg_to = BSP_VAL_MAX_TO;

    DEF_BIT_SET(BSP_REG_SCS, BSP_BIT_SCS_OSCEN);                /* Enable the Main Oscillator                           */

                                                                /* Wait until the main oscillator is enabled.           */
    while (DEF_BIT_IS_CLR(BSP_REG_SCS, BSP_BIT_SCS_OSCSTAT) &&
    33e6:	f24c 13a0 	movw	r3, #49568	; 0xc1a0
    33ea:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    33f4:	2b00      	cmp	r3, #0
    33f6:	d102      	bne.n	33fe <BSP_CPU_Init+0x72>
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d1ef      	bne.n	33de <BSP_CPU_Init+0x52>
          (reg_to > 0u)) {
        reg_to--;
    }

    if (reg_to == 0u) {                                         /* Configuration fail                                   */
    33fe:	89fb      	ldrh	r3, [r7, #14]
    3400:	2b00      	cmp	r3, #0
    3402:	d102      	bne.n	340a <BSP_CPU_Init+0x7e>
        return (DEF_FAIL);
    3404:	f04f 0300 	mov.w	r3, #0
    3408:	e1cc      	b.n	37a4 <BSP_CPU_Init+0x418>
    }

    BSP_REG_PCLKSEL0 = DEF_BIT_NONE;                            /* All peripheral clock runs at CPU_Clk / 4 = 25 Mhz.   */
    340a:	f24c 13a8 	movw	r3, #49576	; 0xc1a8
    340e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3412:	f04f 0200 	mov.w	r2, #0
    3416:	601a      	str	r2, [r3, #0]
    BSP_REG_PCLKSEL1 = DEF_BIT_NONE;
    3418:	f24c 13ac 	movw	r3, #49580	; 0xc1ac
    341c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3420:	f04f 0200 	mov.w	r2, #0
    3424:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ PLL0 CONFIGURATION -------------- */

    reg_val  = (((25u - 1u) <<  0u) & BSP_MSK_PLLCFG0_MSEL)     /* PLL0 values M = 25 & N = 2 (see note #6)             */
    3426:	f04f 0318 	mov.w	r3, #24
    342a:	f2c0 0301 	movt	r3, #1
    342e:	607b      	str	r3, [r7, #4]
             | ((( 2u - 1u) << 16u) & BSP_MSK_PLLCFG0_NSEL);
                                                                /* 1. Disconnect PLL0 with one feed sequence if PLL ... */
                                                                /* ... already connected.                               */
    if (DEF_BIT_IS_SET(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLLC0_STAT)) {
    3430:	f24c 0388 	movw	r3, #49288	; 0xc088
    3434:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3438:	681b      	ldr	r3, [r3, #0]
    343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    343e:	2b00      	cmp	r3, #0
    3440:	d023      	beq.n	348a <BSP_CPU_Init+0xfe>
        DEF_BIT_CLR(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLC);
    3442:	f24c 0380 	movw	r3, #49280	; 0xc080
    3446:	f2c4 030f 	movt	r3, #16399	; 0x400f
    344a:	f24c 0280 	movw	r2, #49280	; 0xc080
    344e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3452:	6812      	ldr	r2, [r2, #0]
    3454:	f022 0202 	bic.w	r2, r2, #2
    3458:	601a      	str	r2, [r3, #0]
        BSP_PLL_FEED_SEQ(0u);
    345a:	f014 fcc3 	bl	17de4 <CPU_SR_Save>
    345e:	60b8      	str	r0, [r7, #8]
    3460:	f7fe fa2a 	bl	18b8 <CPU_IntDisMeasStart>
    3464:	f24c 038c 	movw	r3, #49292	; 0xc08c
    3468:	f2c4 030f 	movt	r3, #16399	; 0x400f
    346c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3470:	601a      	str	r2, [r3, #0]
    3472:	f24c 038c 	movw	r3, #49292	; 0xc08c
    3476:	f2c4 030f 	movt	r3, #16399	; 0x400f
    347a:	f04f 0255 	mov.w	r2, #85	; 0x55
    347e:	601a      	str	r2, [r3, #0]
    3480:	f7fe fa46 	bl	1910 <CPU_IntDisMeasStop>
    3484:	68b8      	ldr	r0, [r7, #8]
    3486:	f014 fcb1 	bl	17dec <CPU_SR_Restore>
    }

    DEF_BIT_CLR(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLE);     /* 2. Disable PLL0 with one feed sequence               */
    348a:	f24c 0380 	movw	r3, #49280	; 0xc080
    348e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3492:	f24c 0280 	movw	r2, #49280	; 0xc080
    3496:	f2c4 020f 	movt	r2, #16399	; 0x400f
    349a:	6812      	ldr	r2, [r2, #0]
    349c:	f022 0201 	bic.w	r2, r2, #1
    34a0:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(0u);
    34a2:	f014 fc9f 	bl	17de4 <CPU_SR_Save>
    34a6:	60b8      	str	r0, [r7, #8]
    34a8:	f7fe fa06 	bl	18b8 <CPU_IntDisMeasStart>
    34ac:	f24c 038c 	movw	r3, #49292	; 0xc08c
    34b0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34b4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    34b8:	601a      	str	r2, [r3, #0]
    34ba:	f24c 038c 	movw	r3, #49292	; 0xc08c
    34be:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34c2:	f04f 0255 	mov.w	r2, #85	; 0x55
    34c6:	601a      	str	r2, [r3, #0]
    34c8:	f7fe fa22 	bl	1910 <CPU_IntDisMeasStop>
    34cc:	68b8      	ldr	r0, [r7, #8]
    34ce:	f014 fc8d 	bl	17dec <CPU_SR_Restore>

    BSP_REG_CCLKCFG   = (1u - 1u);                              /* 3. Change the CPU clock divider setting to speed ... */
    34d2:	f24c 1304 	movw	r3, #49412	; 0xc104
    34d6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34da:	f04f 0200 	mov.w	r2, #0
    34de:	601a      	str	r2, [r3, #0]
                                                                /* ... operation without PLL0                           */

    BSP_REG_CLKSRCSEL = BSP_BIT_CLKSRCSEL_MAIN;                 /* 4. Select the main osc. as the PLL0 clock source     */
    34e0:	f24c 130c 	movw	r3, #49420	; 0xc10c
    34e4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34e8:	f04f 0201 	mov.w	r2, #1
    34ec:	601a      	str	r2, [r3, #0]

    BSP_REG_PLLCFG(0u) = reg_val;                               /* 5. Write to the PLLCFG and make it effective with... */
    34ee:	f24c 0384 	movw	r3, #49284	; 0xc084
    34f2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    34f6:	687a      	ldr	r2, [r7, #4]
    34f8:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(0u)                                        /* ... one one feed sequence                            */
    34fa:	f014 fc73 	bl	17de4 <CPU_SR_Save>
    34fe:	60b8      	str	r0, [r7, #8]
    3500:	f7fe f9da 	bl	18b8 <CPU_IntDisMeasStart>
    3504:	f24c 038c 	movw	r3, #49292	; 0xc08c
    3508:	f2c4 030f 	movt	r3, #16399	; 0x400f
    350c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3510:	601a      	str	r2, [r3, #0]
    3512:	f24c 038c 	movw	r3, #49292	; 0xc08c
    3516:	f2c4 030f 	movt	r3, #16399	; 0x400f
    351a:	f04f 0255 	mov.w	r2, #85	; 0x55
    351e:	601a      	str	r2, [r3, #0]
    3520:	f7fe f9f6 	bl	1910 <CPU_IntDisMeasStop>
    3524:	68b8      	ldr	r0, [r7, #8]
    3526:	f014 fc61 	bl	17dec <CPU_SR_Restore>

    DEF_BIT_SET(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLE);     /* 6. Enable PLL0 with one feed sequence                */
    352a:	f24c 0380 	movw	r3, #49280	; 0xc080
    352e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3532:	f24c 0280 	movw	r2, #49280	; 0xc080
    3536:	f2c4 020f 	movt	r2, #16399	; 0x400f
    353a:	6812      	ldr	r2, [r2, #0]
    353c:	f042 0201 	orr.w	r2, r2, #1
    3540:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(0u);
    3542:	f014 fc4f 	bl	17de4 <CPU_SR_Save>
    3546:	60b8      	str	r0, [r7, #8]
    3548:	f7fe f9b6 	bl	18b8 <CPU_IntDisMeasStart>
    354c:	f24c 038c 	movw	r3, #49292	; 0xc08c
    3550:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3554:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3558:	601a      	str	r2, [r3, #0]
    355a:	f24c 038c 	movw	r3, #49292	; 0xc08c
    355e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3562:	f04f 0255 	mov.w	r2, #85	; 0x55
    3566:	601a      	str	r2, [r3, #0]
    3568:	f7fe f9d2 	bl	1910 <CPU_IntDisMeasStop>
    356c:	68b8      	ldr	r0, [r7, #8]
    356e:	f014 fc3d 	bl	17dec <CPU_SR_Restore>

    BSP_REG_CCLKCFG   = (3u - 1u);                              /* 7. Change the CPU clock divider setting for ...      */
    3572:	f24c 1304 	movw	r3, #49412	; 0xc104
    3576:	f2c4 030f 	movt	r3, #16399	; 0x400f
    357a:	f04f 0202 	mov.w	r2, #2
    357e:	601a      	str	r2, [r3, #0]
                                                                /* ... operation with PLL0                              */

    reg_to = BSP_VAL_MAX_TO;                                    /* 8. Wait for PLL0 to achieve lock by monitoring ...   */
    3580:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3584:	81fb      	strh	r3, [r7, #14]
                                                                /* ... the PLOCK0 bit in the PLL0STAT                   */
    while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLOCK0) &&
    3586:	e003      	b.n	3590 <BSP_CPU_Init+0x204>
          (reg_to > 0u)) {
        reg_to--;
    3588:	89fb      	ldrh	r3, [r7, #14]
    358a:	f103 33ff 	add.w	r3, r3, #4294967295
    358e:	81fb      	strh	r3, [r7, #14]
    BSP_REG_CCLKCFG   = (3u - 1u);                              /* 7. Change the CPU clock divider setting for ...      */
                                                                /* ... operation with PLL0                              */

    reg_to = BSP_VAL_MAX_TO;                                    /* 8. Wait for PLL0 to achieve lock by monitoring ...   */
                                                                /* ... the PLOCK0 bit in the PLL0STAT                   */
    while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(0u), BSP_BIT_PLLSTAT_PLOCK0) &&
    3590:	f24c 0388 	movw	r3, #49288	; 0xc088
    3594:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3598:	681b      	ldr	r3, [r3, #0]
    359a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    359e:	2b00      	cmp	r3, #0
    35a0:	d102      	bne.n	35a8 <BSP_CPU_Init+0x21c>
    35a2:	89fb      	ldrh	r3, [r7, #14]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d1ef      	bne.n	3588 <BSP_CPU_Init+0x1fc>
          (reg_to > 0u)) {
        reg_to--;
    }

    if (reg_to == 0u) {
    35a8:	89fb      	ldrh	r3, [r7, #14]
    35aa:	2b00      	cmp	r3, #0
    35ac:	d102      	bne.n	35b4 <BSP_CPU_Init+0x228>
        return (DEF_FAIL);
    35ae:	f04f 0300 	mov.w	r3, #0
    35b2:	e0f7      	b.n	37a4 <BSP_CPU_Init+0x418>
    }

    DEF_BIT_SET(BSP_REG_PLLCTRL(0u), BSP_BIT_PLLCTRL_PLLC);     /* 9. Connect PLL0 with one feed sequence.              */
    35b4:	f24c 0380 	movw	r3, #49280	; 0xc080
    35b8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    35bc:	f24c 0280 	movw	r2, #49280	; 0xc080
    35c0:	f2c4 020f 	movt	r2, #16399	; 0x400f
    35c4:	6812      	ldr	r2, [r2, #0]
    35c6:	f042 0202 	orr.w	r2, r2, #2
    35ca:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(0u);
    35cc:	f014 fc0a 	bl	17de4 <CPU_SR_Save>
    35d0:	60b8      	str	r0, [r7, #8]
    35d2:	f7fe f971 	bl	18b8 <CPU_IntDisMeasStart>
    35d6:	f24c 038c 	movw	r3, #49292	; 0xc08c
    35da:	f2c4 030f 	movt	r3, #16399	; 0x400f
    35de:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    35e2:	601a      	str	r2, [r3, #0]
    35e4:	f24c 038c 	movw	r3, #49292	; 0xc08c
    35e8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    35ec:	f04f 0255 	mov.w	r2, #85	; 0x55
    35f0:	601a      	str	r2, [r3, #0]
    35f2:	f7fe f98d 	bl	1910 <CPU_IntDisMeasStop>
    35f6:	68b8      	ldr	r0, [r7, #8]
    35f8:	f014 fbf8 	bl	17dec <CPU_SR_Restore>
                                                                /* ------------------ PLL1 CONFIGURATION -------------- */
    reg_val  = (((4u - 1u)  <<  0u) & BSP_MSK_PLLCFG1_MSEL)     /* PLL1 values M = 4; P = 2 coded as '01' (see note #6) */
    35fc:	f04f 0323 	mov.w	r3, #35	; 0x23
    3600:	607b      	str	r3, [r7, #4]
             | (((0x01u   ) <<  5u) & BSP_MSK_PLLCFG1_NSEL);

    DEF_BIT_CLR(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLC);     /* 1. Disconnect PLL1 with one feed sequence            */
    3602:	f24c 03a0 	movw	r3, #49312	; 0xc0a0
    3606:	f2c4 030f 	movt	r3, #16399	; 0x400f
    360a:	f24c 02a0 	movw	r2, #49312	; 0xc0a0
    360e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3612:	6812      	ldr	r2, [r2, #0]
    3614:	f022 0202 	bic.w	r2, r2, #2
    3618:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(1u);
    361a:	f014 fbe3 	bl	17de4 <CPU_SR_Save>
    361e:	60b8      	str	r0, [r7, #8]
    3620:	f7fe f94a 	bl	18b8 <CPU_IntDisMeasStart>
    3624:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    3628:	f2c4 030f 	movt	r3, #16399	; 0x400f
    362c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3630:	601a      	str	r2, [r3, #0]
    3632:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    3636:	f2c4 030f 	movt	r3, #16399	; 0x400f
    363a:	f04f 0255 	mov.w	r2, #85	; 0x55
    363e:	601a      	str	r2, [r3, #0]
    3640:	f7fe f966 	bl	1910 <CPU_IntDisMeasStop>
    3644:	68b8      	ldr	r0, [r7, #8]
    3646:	f014 fbd1 	bl	17dec <CPU_SR_Restore>

    DEF_BIT_CLR(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLE);     /* 2. Disable PLL1 with one feed sequence               */
    364a:	f24c 03a0 	movw	r3, #49312	; 0xc0a0
    364e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3652:	f24c 02a0 	movw	r2, #49312	; 0xc0a0
    3656:	f2c4 020f 	movt	r2, #16399	; 0x400f
    365a:	6812      	ldr	r2, [r2, #0]
    365c:	f022 0201 	bic.w	r2, r2, #1
    3660:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(1u);
    3662:	f014 fbbf 	bl	17de4 <CPU_SR_Save>
    3666:	60b8      	str	r0, [r7, #8]
    3668:	f7fe f926 	bl	18b8 <CPU_IntDisMeasStart>
    366c:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    3670:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3674:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3678:	601a      	str	r2, [r3, #0]
    367a:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    367e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3682:	f04f 0255 	mov.w	r2, #85	; 0x55
    3686:	601a      	str	r2, [r3, #0]
    3688:	f7fe f942 	bl	1910 <CPU_IntDisMeasStop>
    368c:	68b8      	ldr	r0, [r7, #8]
    368e:	f014 fbad 	bl	17dec <CPU_SR_Restore>

    BSP_REG_PLLCFG(1u) = reg_val;                               /* 3. Write to the PLLCFG and make it effective with... */
    3692:	f24c 03a4 	movw	r3, #49316	; 0xc0a4
    3696:	f2c4 030f 	movt	r3, #16399	; 0x400f
    369a:	687a      	ldr	r2, [r7, #4]
    369c:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(1u);                                       /* ... one one feed sequence                            */
    369e:	f014 fba1 	bl	17de4 <CPU_SR_Save>
    36a2:	60b8      	str	r0, [r7, #8]
    36a4:	f7fe f908 	bl	18b8 <CPU_IntDisMeasStart>
    36a8:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    36ac:	f2c4 030f 	movt	r3, #16399	; 0x400f
    36b0:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    36b4:	601a      	str	r2, [r3, #0]
    36b6:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    36ba:	f2c4 030f 	movt	r3, #16399	; 0x400f
    36be:	f04f 0255 	mov.w	r2, #85	; 0x55
    36c2:	601a      	str	r2, [r3, #0]
    36c4:	f7fe f924 	bl	1910 <CPU_IntDisMeasStop>
    36c8:	68b8      	ldr	r0, [r7, #8]
    36ca:	f014 fb8f 	bl	17dec <CPU_SR_Restore>

    DEF_BIT_SET(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLE);     /* 4. Enable PLL1 with one feed sequence                */
    36ce:	f24c 03a0 	movw	r3, #49312	; 0xc0a0
    36d2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    36d6:	f24c 02a0 	movw	r2, #49312	; 0xc0a0
    36da:	f2c4 020f 	movt	r2, #16399	; 0x400f
    36de:	6812      	ldr	r2, [r2, #0]
    36e0:	f042 0201 	orr.w	r2, r2, #1
    36e4:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(1u);
    36e6:	f014 fb7d 	bl	17de4 <CPU_SR_Save>
    36ea:	60b8      	str	r0, [r7, #8]
    36ec:	f7fe f8e4 	bl	18b8 <CPU_IntDisMeasStart>
    36f0:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    36f4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    36f8:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    36fc:	601a      	str	r2, [r3, #0]
    36fe:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    3702:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3706:	f04f 0255 	mov.w	r2, #85	; 0x55
    370a:	601a      	str	r2, [r3, #0]
    370c:	f7fe f900 	bl	1910 <CPU_IntDisMeasStop>
    3710:	68b8      	ldr	r0, [r7, #8]
    3712:	f014 fb6b 	bl	17dec <CPU_SR_Restore>

    reg_to = BSP_VAL_MAX_TO;                                    /* 5. Wait for PLL1 to achieve lock by monitoring ...   */
    3716:	f64f 73ff 	movw	r3, #65535	; 0xffff
    371a:	81fb      	strh	r3, [r7, #14]
                                                                /* ... the PLOCK1 bit in the PLL1STAT                   */
    while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(1u), BSP_BIT_PLLSTAT_PLOCK1) &&
    371c:	e003      	b.n	3726 <BSP_CPU_Init+0x39a>
          (reg_to > 0u)) {
        reg_to--;
    371e:	89fb      	ldrh	r3, [r7, #14]
    3720:	f103 33ff 	add.w	r3, r3, #4294967295
    3724:	81fb      	strh	r3, [r7, #14]
    DEF_BIT_SET(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLE);     /* 4. Enable PLL1 with one feed sequence                */
    BSP_PLL_FEED_SEQ(1u);

    reg_to = BSP_VAL_MAX_TO;                                    /* 5. Wait for PLL1 to achieve lock by monitoring ...   */
                                                                /* ... the PLOCK1 bit in the PLL1STAT                   */
    while (DEF_BIT_IS_CLR(BSP_REG_PLLSTAT(1u), BSP_BIT_PLLSTAT_PLOCK1) &&
    3726:	f24c 03a8 	movw	r3, #49320	; 0xc0a8
    372a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3734:	2b00      	cmp	r3, #0
    3736:	d102      	bne.n	373e <BSP_CPU_Init+0x3b2>
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	2b00      	cmp	r3, #0
    373c:	d1ef      	bne.n	371e <BSP_CPU_Init+0x392>
          (reg_to > 0u)) {
        reg_to--;
    }

    if (reg_to == 0u) {
    373e:	89fb      	ldrh	r3, [r7, #14]
    3740:	2b00      	cmp	r3, #0
    3742:	d102      	bne.n	374a <BSP_CPU_Init+0x3be>
        return (DEF_FAIL);
    3744:	f04f 0300 	mov.w	r3, #0
    3748:	e02c      	b.n	37a4 <BSP_CPU_Init+0x418>
    }


    DEF_BIT_SET(BSP_REG_PLLCTRL(1u), BSP_BIT_PLLCTRL_PLLC);     /* 6. Connect PLL1 with one feed sequence               */
    374a:	f24c 03a0 	movw	r3, #49312	; 0xc0a0
    374e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3752:	f24c 02a0 	movw	r2, #49312	; 0xc0a0
    3756:	f2c4 020f 	movt	r2, #16399	; 0x400f
    375a:	6812      	ldr	r2, [r2, #0]
    375c:	f042 0202 	orr.w	r2, r2, #2
    3760:	601a      	str	r2, [r3, #0]
    BSP_PLL_FEED_SEQ(1u);
    3762:	f014 fb3f 	bl	17de4 <CPU_SR_Save>
    3766:	60b8      	str	r0, [r7, #8]
    3768:	f7fe f8a6 	bl	18b8 <CPU_IntDisMeasStart>
    376c:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    3770:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3774:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3778:	601a      	str	r2, [r3, #0]
    377a:	f24c 03ac 	movw	r3, #49324	; 0xc0ac
    377e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3782:	f04f 0255 	mov.w	r2, #85	; 0x55
    3786:	601a      	str	r2, [r3, #0]
    3788:	f7fe f8c2 	bl	1910 <CPU_IntDisMeasStop>
    378c:	68b8      	ldr	r0, [r7, #8]
    378e:	f014 fb2d 	bl	17dec <CPU_SR_Restore>

    BSP_REG_FLASHCFG = BSP_MSK_FLASHCFG_CLK_5                   /* Set 5 cycles to access the Flash memory.             */
    3792:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3796:	f2c4 030f 	movt	r3, #16399	; 0x400f
    379a:	f244 023a 	movw	r2, #16442	; 0x403a
    379e:	601a      	str	r2, [r3, #0]
                     | BSP_BIT_FLASHCFG_FETCHCFG_ALL
                     | BSP_BIT_FLASHCFG_DATACFG_ALL
                     | BSP_BIT_FLASHCFG_ACCEL_EN
                     | BSP_BIT_FLASHCFG_PREFETCH_ALL;

    return (DEF_OK);
    37a0:	f04f 0301 	mov.w	r3, #1
}
    37a4:	4618      	mov	r0, r3
    37a6:	f107 0710 	add.w	r7, r7, #16
    37aa:	46bd      	mov	sp, r7
    37ac:	bd80      	pop	{r7, pc}
    37ae:	bf00      	nop

000037b0 <TimerInit>:
#include "hw_timer.h"
#include "LPC17xx.h"

char TimerInit(char timer)
{
    37b0:	b480      	push	{r7}
    37b2:	b083      	sub	sp, #12
    37b4:	af00      	add	r7, sp, #0
    37b6:	4603      	mov	r3, r0
    37b8:	71fb      	strb	r3, [r7, #7]
	//LPC_SC->PCONP |= (1<<1);
	switch(timer){
    37ba:	79fb      	ldrb	r3, [r7, #7]
    37bc:	2b03      	cmp	r3, #3
    37be:	d831      	bhi.n	3824 <TimerInit+0x74>
    37c0:	a201      	add	r2, pc, #4	; (adr r2, 37c8 <TimerInit+0x18>)
    37c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    37c6:	bf00      	nop
    37c8:	000037d9 	.word	0x000037d9
    37cc:	00003825 	.word	0x00003825
    37d0:	00003825 	.word	0x00003825
    37d4:	00003825 	.word	0x00003825
		case 0: LPC_TIM0->TCR = 0x02;	/* stop and reset timer */
    37d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    37dc:	f04f 0202 	mov.w	r2, #2
    37e0:	605a      	str	r2, [r3, #4]
				LPC_TIM0->PR  = 100000;	/* set PRE to 1ms */
    37e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    37e6:	f248 63a0 	movw	r3, #34464	; 0x86a0
    37ea:	f2c0 0301 	movt	r3, #1
    37ee:	60d3      	str	r3, [r2, #12]
				LPC_TIM0->PC  = 0x00;
    37f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    37f4:	f04f 0200 	mov.w	r2, #0
    37f8:	611a      	str	r2, [r3, #16]
				LPC_TIM0->TC  = 0x00;
    37fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    37fe:	f04f 0200 	mov.w	r2, #0
    3802:	609a      	str	r2, [r3, #8]
				LPC_TIM0->MR0 = 25;	/* set MR0 to 0.025s */
    3804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3808:	f04f 0219 	mov.w	r2, #25
    380c:	619a      	str	r2, [r3, #24]
				LPC_TIM0->IR  = 0x01;	/* reset Timer0 IR flag */
    380e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3812:	f04f 0201 	mov.w	r2, #1
    3816:	601a      	str	r2, [r3, #0]
				LPC_TIM0->MCR = 0x03;	/* Interrupt on MR0, Reset TC on MR0 */
    3818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    381c:	f04f 0203 	mov.w	r2, #3
    3820:	615a      	str	r2, [r3, #20]
				break;
    3822:	e000      	b.n	3826 <TimerInit+0x76>
				break;
		case 2: /* not yet implemented */
				break;
		case 3: /* not yet implemented */
				break;
		default: break;
    3824:	bf00      	nop
	}

	return 0;
    3826:	f04f 0300 	mov.w	r3, #0
}
    382a:	4618      	mov	r0, r3
    382c:	f107 070c 	add.w	r7, r7, #12
    3830:	46bd      	mov	sp, r7
    3832:	bc80      	pop	{r7}
    3834:	4770      	bx	lr
    3836:	bf00      	nop

00003838 <TimerStart>:

char TimerStart()
{
    3838:	b480      	push	{r7}
    383a:	af00      	add	r7, sp, #0
	LPC_TIM0->TCR = 0x01;	/* start timer */
    383c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3840:	f04f 0201 	mov.w	r2, #1
    3844:	605a      	str	r2, [r3, #4]
	return 0;
    3846:	f04f 0300 	mov.w	r3, #0
}
    384a:	4618      	mov	r0, r3
    384c:	46bd      	mov	sp, r7
    384e:	bc80      	pop	{r7}
    3850:	4770      	bx	lr
    3852:	bf00      	nop

00003854 <TimerResetStop>:

char TimerResetStop()
{
    3854:	b480      	push	{r7}
    3856:	af00      	add	r7, sp, #0
	LPC_TIM0->TCR = 0x02;	/* stop and reset timer */
    3858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    385c:	f04f 0202 	mov.w	r2, #2
    3860:	605a      	str	r2, [r3, #4]
	return 0;
    3862:	f04f 0300 	mov.w	r3, #0
}
    3866:	4618      	mov	r0, r3
    3868:	46bd      	mov	sp, r7
    386a:	bc80      	pop	{r7}
    386c:	4770      	bx	lr
    386e:	bf00      	nop

00003870 <TimerClrIRFlag>:

char TimerClrIRFlag()
{
    3870:	b480      	push	{r7}
    3872:	af00      	add	r7, sp, #0
	LPC_TIM0->IR = 0x01;
    3874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3878:	f04f 0201 	mov.w	r2, #1
    387c:	601a      	str	r2, [r3, #0]
	return 0;
    387e:	f04f 0300 	mov.w	r3, #0
}
    3882:	4618      	mov	r0, r3
    3884:	46bd      	mov	sp, r7
    3886:	bc80      	pop	{r7}
    3888:	4770      	bx	lr
    388a:	bf00      	nop

0000388c <NVIC_DeInit>:
 * - Disable Interrupt (32 IRQ interrupt sources that matched with LPC17xx)
 * - Clear all Pending Interrupts (32 IRQ interrupt source that matched with LPC17xx)
 * - Clear all Interrupt Priorities (32 IRQ interrupt source that matched with LPC17xx)
 *******************************************************************************/
void NVIC_DeInit(void)
{
    388c:	b480      	push	{r7}
    388e:	b083      	sub	sp, #12
    3890:	af00      	add	r7, sp, #0
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
    3892:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    3896:	f2ce 0300 	movt	r3, #57344	; 0xe000
    389a:	f04f 32ff 	mov.w	r2, #4294967295
    389e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC->ICER[1] = 0x00000001;
    38a2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    38a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    38aa:	f04f 0201 	mov.w	r2, #1
    38ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
    38b2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    38b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    38ba:	f04f 32ff 	mov.w	r2, #4294967295
    38be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC->ICPR[1] = 0x00000001;
    38c2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    38c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    38ca:	f04f 0201 	mov.w	r2, #1
    38ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
    38d2:	f04f 0300 	mov.w	r3, #0
    38d6:	71fb      	strb	r3, [r7, #7]
    38d8:	e00d      	b.n	38f6 <NVIC_DeInit+0x6a>
		NVIC->IP[tmp] = 0x00;
    38da:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    38de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    38e2:	79fa      	ldrb	r2, [r7, #7]
    38e4:	189b      	adds	r3, r3, r2
    38e6:	f04f 0200 	mov.w	r2, #0
    38ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
    38ee:	79fb      	ldrb	r3, [r7, #7]
    38f0:	f103 0301 	add.w	r3, r3, #1
    38f4:	71fb      	strb	r3, [r7, #7]
    38f6:	79fb      	ldrb	r3, [r7, #7]
    38f8:	2b1f      	cmp	r3, #31
    38fa:	d9ee      	bls.n	38da <NVIC_DeInit+0x4e>
		NVIC->IP[tmp] = 0x00;
	}
}
    38fc:	f107 070c 	add.w	r7, r7, #12
    3900:	46bd      	mov	sp, r7
    3902:	bc80      	pop	{r7}
    3904:	4770      	bx	lr
    3906:	bf00      	nop

00003908 <NVIC_SCBDeInit>:
 * - Configurable Fault Status Register
 * - Hard Fault Status Register
 * - Debug Fault Status Register
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
    3908:	b480      	push	{r7}
    390a:	b083      	sub	sp, #12
    390c:	af00      	add	r7, sp, #0
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
    390e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3912:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3916:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    391a:	605a      	str	r2, [r3, #4]
	SCB->VTOR = 0x00000000;
    391c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3920:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3924:	f04f 0200 	mov.w	r2, #0
    3928:	609a      	str	r2, [r3, #8]
	SCB->AIRCR = 0x05FA0000;
    392a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    392e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3932:	f04f 0200 	mov.w	r2, #0
    3936:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
    393a:	60da      	str	r2, [r3, #12]
	SCB->SCR = 0x00000000;
    393c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3940:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3944:	f04f 0200 	mov.w	r2, #0
    3948:	611a      	str	r2, [r3, #16]
	SCB->CCR = 0x00000000;
    394a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    394e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3952:	f04f 0200 	mov.w	r2, #0
    3956:	615a      	str	r2, [r3, #20]

	for (tmp = 0; tmp < 32; tmp++) {
    3958:	f04f 0300 	mov.w	r3, #0
    395c:	71fb      	strb	r3, [r7, #7]
    395e:	e00c      	b.n	397a <NVIC_SCBDeInit+0x72>
		SCB->SHP[tmp] = 0x00;
    3960:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3964:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3968:	79fa      	ldrb	r2, [r7, #7]
    396a:	189b      	adds	r3, r3, r2
    396c:	f04f 0200 	mov.w	r2, #0
    3970:	761a      	strb	r2, [r3, #24]
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
    3972:	79fb      	ldrb	r3, [r7, #7]
    3974:	f103 0301 	add.w	r3, r3, #1
    3978:	71fb      	strb	r3, [r7, #7]
    397a:	79fb      	ldrb	r3, [r7, #7]
    397c:	2b1f      	cmp	r3, #31
    397e:	d9ef      	bls.n	3960 <NVIC_SCBDeInit+0x58>
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
    3980:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3984:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3988:	f04f 0200 	mov.w	r2, #0
    398c:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR = 0xFFFFFFFF;
    398e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3992:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3996:	f04f 32ff 	mov.w	r2, #4294967295
    399a:	629a      	str	r2, [r3, #40]	; 0x28
	SCB->HFSR = 0xFFFFFFFF;
    399c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    39a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    39a4:	f04f 32ff 	mov.w	r2, #4294967295
    39a8:	62da      	str	r2, [r3, #44]	; 0x2c
	SCB->DFSR = 0xFFFFFFFF;
    39aa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    39ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
    39b2:	f04f 32ff 	mov.w	r2, #4294967295
    39b6:	631a      	str	r2, [r3, #48]	; 0x30
}
    39b8:	f107 070c 	add.w	r7, r7, #12
    39bc:	46bd      	mov	sp, r7
    39be:	bc80      	pop	{r7}
    39c0:	4770      	bx	lr
    39c2:	bf00      	nop

000039c4 <NVIC_SetVTOR>:
 * @brief		Set Vector Table Offset value
 * @param		offset Offset value
 * @return      None
 *******************************************************************************/
void NVIC_SetVTOR(uint32_t offset)
{
    39c4:	b480      	push	{r7}
    39c6:	b083      	sub	sp, #12
    39c8:	af00      	add	r7, sp, #0
    39ca:	6078      	str	r0, [r7, #4]
//	SCB->VTOR  = (offset & NVIC_VTOR_MASK);
	SCB->VTOR  = offset;
    39cc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    39d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    39d4:	687a      	ldr	r2, [r7, #4]
    39d6:	609a      	str	r2, [r3, #8]
}
    39d8:	f107 070c 	add.w	r7, r7, #12
    39dc:	46bd      	mov	sp, r7
    39de:	bc80      	pop	{r7}
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop

000039e4 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/


void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    39e4:	b480      	push	{r7}
    39e6:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    39e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    39ec:	f2c4 030f 	movt	r3, #16399	; 0x400f
    39f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    39f4:	ea4f 6313 	mov.w	r3, r3, lsr #24
    39f8:	f003 0303 	and.w	r3, r3, #3
    39fc:	2b03      	cmp	r3, #3
    39fe:	f040 80a4 	bne.w	3b4a <SystemCoreClockUpdate+0x166>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3a06:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    3a0e:	f003 0303 	and.w	r3, r3, #3
    3a12:	2b03      	cmp	r3, #3
    3a14:	f200 80ec 	bhi.w	3bf0 <SystemCoreClockUpdate+0x20c>
    3a18:	a201      	add	r2, pc, #4	; (adr r2, 3a20 <SystemCoreClockUpdate+0x3c>)
    3a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3a1e:	bf00      	nop
    3a20:	00003a31 	.word	0x00003a31
    3a24:	00003a91 	.word	0x00003a91
    3a28:	00003af3 	.word	0x00003af3
    3a2c:	00003a31 	.word	0x00003a31
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3a30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3a34:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3a3c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    3a40:	ea4f 4353 	mov.w	r3, r3, lsr #17
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    3a44:	f103 0201 	add.w	r2, r3, #1
    3a48:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    3a4c:	f2c0 037a 	movt	r3, #122	; 0x7a
    3a50:	fb03 f202 	mul.w	r2, r3, r2
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3a54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3a58:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3a60:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3a64:	b2db      	uxtb	r3, r3
    3a66:	f103 0301 	add.w	r3, r3, #1
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3a6a:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3a6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3a72:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3a7a:	b2db      	uxtb	r3, r3
    3a7c:	f103 0301 	add.w	r3, r3, #1
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3a80:	fbb2 f2f3 	udiv	r2, r2, r3
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    3a84:	f240 0300 	movw	r3, #0
    3a88:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3a8c:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3a8e:	e0b0      	b.n	3bf2 <SystemCoreClockUpdate+0x20e>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3a90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3a94:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3a9c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    3aa0:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    3aa4:	f103 0201 	add.w	r2, r3, #1
    3aa8:	f44f 5358 	mov.w	r3, #13824	; 0x3600
    3aac:	f2c0 136e 	movt	r3, #366	; 0x16e
    3ab0:	fb03 f202 	mul.w	r2, r3, r2
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3ab4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3ab8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3aca:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3ace:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3ad2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3ad6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3ada:	b2db      	uxtb	r3, r3
    3adc:	f103 0301 	add.w	r3, r3, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3ae0:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    3ae4:	f240 0300 	movw	r3, #0
    3ae8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3aec:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3aee:	bf00      	nop
    3af0:	e07f      	b.n	3bf2 <SystemCoreClockUpdate+0x20e>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3af6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3afe:	ea4f 4343 	mov.w	r3, r3, lsl #17
    3b02:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    3b06:	f103 0301 	add.w	r3, r3, #1
    3b0a:	ea4f 4203 	mov.w	r2, r3, lsl #16
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3b0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3b12:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3b1a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3b1e:	b2db      	uxtb	r3, r3
    3b20:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3b24:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3b28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3b2c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3b30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3b34:	b2db      	uxtb	r3, r3
    3b36:	f103 0301 	add.w	r3, r3, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3b3a:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    3b3e:	f240 0300 	movw	r3, #0
    3b42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3b46:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3b48:	e052      	b.n	3bf0 <SystemCoreClockUpdate+0x20c>
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3b4e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3b52:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    3b56:	f003 0303 	and.w	r3, r3, #3
    3b5a:	2b03      	cmp	r3, #3
    3b5c:	d849      	bhi.n	3bf2 <SystemCoreClockUpdate+0x20e>
    3b5e:	a201      	add	r2, pc, #4	; (adr r2, 3b64 <SystemCoreClockUpdate+0x180>)
    3b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b64:	00003b75 	.word	0x00003b75
    3b68:	00003b9f 	.word	0x00003b9f
    3b6c:	00003bc9 	.word	0x00003bc9
    3b70:	00003b75 	.word	0x00003b75
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3b78:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3b7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3b80:	b2db      	uxtb	r3, r3
    3b82:	f103 0201 	add.w	r2, r3, #1
    3b86:	f44f 6310 	mov.w	r3, #2304	; 0x900
    3b8a:	f2c0 033d 	movt	r3, #61	; 0x3d
    3b8e:	fbb3 f2f2 	udiv	r2, r3, r2
    3b92:	f240 0300 	movw	r3, #0
    3b96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3b9a:	601a      	str	r2, [r3, #0]
        break;
    3b9c:	e029      	b.n	3bf2 <SystemCoreClockUpdate+0x20e>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3ba2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3ba6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3baa:	b2db      	uxtb	r3, r3
    3bac:	f103 0201 	add.w	r2, r3, #1
    3bb0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
    3bb4:	f2c0 03b7 	movt	r3, #183	; 0xb7
    3bb8:	fbb3 f2f2 	udiv	r2, r3, r2
    3bbc:	f240 0300 	movw	r3, #0
    3bc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3bc4:	601a      	str	r2, [r3, #0]
        break;
    3bc6:	e014      	b.n	3bf2 <SystemCoreClockUpdate+0x20e>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3bc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3bcc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3bd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3bd4:	b2db      	uxtb	r3, r3
    3bd6:	f103 0301 	add.w	r3, r3, #1
    3bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3bde:	fbb2 f2f3 	udiv	r2, r2, r3
    3be2:	f240 0300 	movw	r3, #0
    3be6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3bea:	601a      	str	r2, [r3, #0]
        break;
    3bec:	bf00      	nop
    3bee:	e000      	b.n	3bf2 <SystemCoreClockUpdate+0x20e>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3bf0:	bf00      	nop
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
    }
  }

}
    3bf2:	46bd      	mov	sp, r7
    3bf4:	bc80      	pop	{r7}
    3bf6:	4770      	bx	lr

00003bf8 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
    3bf8:	b480      	push	{r7}
    3bfa:	af00      	add	r7, sp, #0
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3bfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c00:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c04:	f04f 0220 	mov.w	r2, #32
    3c08:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
    3c0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c10:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c14:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    3c18:	f003 0320 	and.w	r3, r3, #32
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d00a      	beq.n	3c36 <SystemInit+0x3e>
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3c20:	bf00      	nop
    3c22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c26:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    3c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3c32:	2b00      	cmp	r3, #0
    3c34:	d0f5      	beq.n	3c22 <SystemInit+0x2a>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3c36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c3a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c3e:	f04f 0203 	mov.w	r2, #3
    3c42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Periphral clock must be selected before PLL0 enabling and connecting
   * - according errata.lpc1768-16.March.2010 -
   */
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c4a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c4e:	f04f 0200 	mov.w	r2, #0
    3c52:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3c56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c5a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c5e:	f04f 0200 	mov.w	r2, #0
    3c62:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3c66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c6a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c6e:	f04f 0201 	mov.w	r2, #1
    3c72:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3c76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c7a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c7e:	f04f 0263 	mov.w	r2, #99	; 0x63
    3c82:	f2c0 0205 	movt	r2, #5
    3c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    3c8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c8e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3c92:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3c9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3c9e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3ca2:	f04f 0255 	mov.w	r2, #85	; 0x55
    3ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3caa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3cae:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3cb2:	f04f 0201 	mov.w	r2, #1
    3cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3cba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3cbe:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3cc2:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3cca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3cce:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3cd2:	f04f 0255 	mov.w	r2, #85	; 0x55
    3cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3cda:	bf00      	nop
    3cdc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3ce0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    3cec:	2b00      	cmp	r3, #0
    3cee:	d0f5      	beq.n	3cdc <SystemInit+0xe4>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3cf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3cf4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3cf8:	f04f 0203 	mov.w	r2, #3
    3cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3d00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d04:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d08:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3d10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d14:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d18:	f04f 0255 	mov.w	r2, #85	; 0x55
    3d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3d20:	bf00      	nop
    3d22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d26:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3d2e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    3d32:	2b00      	cmp	r3, #0
    3d34:	d0f5      	beq.n	3d22 <SystemInit+0x12a>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3d36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d3a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d3e:	f04f 0223 	mov.w	r2, #35	; 0x23
    3d42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3d46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d4a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d4e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3d52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3d56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d5a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d5e:	f04f 0255 	mov.w	r2, #85	; 0x55
    3d62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3d66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d6a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d6e:	f04f 0201 	mov.w	r2, #1
    3d72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3d76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d7a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d7e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3d82:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3d86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d8a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3d8e:	f04f 0255 	mov.w	r2, #85	; 0x55
    3d92:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3d96:	bf00      	nop
    3d98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d9c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    3da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3da8:	2b00      	cmp	r3, #0
    3daa:	d0f5      	beq.n	3d98 <SystemInit+0x1a0>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3dac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3db0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3db4:	f04f 0203 	mov.w	r2, #3
    3db8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3dbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3dc0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3dc4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    3dc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3dcc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3dd0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3dd4:	f04f 0255 	mov.w	r2, #85	; 0x55
    3dd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3ddc:	bf00      	nop
    3dde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3de2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    3dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
    3dee:	2b00      	cmp	r3, #0
    3df0:	d0f5      	beq.n	3dde <SystemInit+0x1e6>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3df2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3df6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3dfa:	f248 72de 	movw	r2, #34782	; 0x87de
    3dfe:	f2c0 4228 	movt	r2, #1064	; 0x428
    3e02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3e06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3e0a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3e0e:	f04f 0200 	mov.w	r2, #0
    3e12:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    3e16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3e1a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3e1e:	f243 023a 	movw	r2, #12346	; 0x303a
    3e22:	601a      	str	r2, [r3, #0]

//  Set Vector table offset value
#if (__RAM_MODE__==1)
  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
#else
  SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
    3e24:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    3e28:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3e2c:	f04f 0200 	mov.w	r2, #0
    3e30:	609a      	str	r2, [r3, #8]
#endif
}
    3e32:	46bd      	mov	sp, r7
    3e34:	bc80      	pop	{r7}
    3e36:	4770      	bx	lr

00003e38 <_close>:

char *__env[1] = { 0 };
char **environ = __env;

int _close(int file)
{
    3e38:	b480      	push	{r7}
    3e3a:	b083      	sub	sp, #12
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
  return -1;
    3e40:	f04f 33ff 	mov.w	r3, #4294967295
}
    3e44:	4618      	mov	r0, r3
    3e46:	f107 070c 	add.w	r7, r7, #12
    3e4a:	46bd      	mov	sp, r7
    3e4c:	bc80      	pop	{r7}
    3e4e:	4770      	bx	lr

00003e50 <_execve>:

int _execve(char *name, char **argv, char **env)
{
    3e50:	b480      	push	{r7}
    3e52:	b085      	sub	sp, #20
    3e54:	af00      	add	r7, sp, #0
    3e56:	60f8      	str	r0, [r7, #12]
    3e58:	60b9      	str	r1, [r7, #8]
    3e5a:	607a      	str	r2, [r7, #4]
  errno = ENOMEM;
    3e5c:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    3e60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3e64:	f04f 020c 	mov.w	r2, #12
    3e68:	601a      	str	r2, [r3, #0]
  return -1;
    3e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
    3e6e:	4618      	mov	r0, r3
    3e70:	f107 0714 	add.w	r7, r7, #20
    3e74:	46bd      	mov	sp, r7
    3e76:	bc80      	pop	{r7}
    3e78:	4770      	bx	lr
    3e7a:	bf00      	nop

00003e7c <_exit>:
int _exit()
{
    3e7c:	b480      	push	{r7}
    3e7e:	af00      	add	r7, sp, #0
  return 0;
    3e80:	f04f 0300 	mov.w	r3, #0
}
    3e84:	4618      	mov	r0, r3
    3e86:	46bd      	mov	sp, r7
    3e88:	bc80      	pop	{r7}
    3e8a:	4770      	bx	lr

00003e8c <_fork>:

int _fork()
{
    3e8c:	b480      	push	{r7}
    3e8e:	af00      	add	r7, sp, #0
  errno = EAGAIN;
    3e90:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    3e94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3e98:	f04f 020b 	mov.w	r2, #11
    3e9c:	601a      	str	r2, [r3, #0]
  return -1;
    3e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
    3ea2:	4618      	mov	r0, r3
    3ea4:	46bd      	mov	sp, r7
    3ea6:	bc80      	pop	{r7}
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop

00003eac <_fstat>:

int _fstat(int file, struct stat *st)
{
    3eac:	b480      	push	{r7}
    3eae:	b083      	sub	sp, #12
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
    3eb6:	683b      	ldr	r3, [r7, #0]
    3eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3ebc:	605a      	str	r2, [r3, #4]
  return 0;
    3ebe:	f04f 0300 	mov.w	r3, #0
}
    3ec2:	4618      	mov	r0, r3
    3ec4:	f107 070c 	add.w	r7, r7, #12
    3ec8:	46bd      	mov	sp, r7
    3eca:	bc80      	pop	{r7}
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop

00003ed0 <_getpid>:

int _getpid()
{
    3ed0:	b480      	push	{r7}
    3ed2:	af00      	add	r7, sp, #0
  return 1;
    3ed4:	f04f 0301 	mov.w	r3, #1
}
    3ed8:	4618      	mov	r0, r3
    3eda:	46bd      	mov	sp, r7
    3edc:	bc80      	pop	{r7}
    3ede:	4770      	bx	lr

00003ee0 <_kill>:

int _kill(int pid, int sig)
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	6039      	str	r1, [r7, #0]
  errno = EINVAL;
    3eea:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    3eee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3ef2:	f04f 0216 	mov.w	r2, #22
    3ef6:	601a      	str	r2, [r3, #0]
  return(-1);
    3ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
    3efc:	4618      	mov	r0, r3
    3efe:	f107 070c 	add.w	r7, r7, #12
    3f02:	46bd      	mov	sp, r7
    3f04:	bc80      	pop	{r7}
    3f06:	4770      	bx	lr

00003f08 <isatty>:

int isatty(int fildes)
{
    3f08:	b480      	push	{r7}
    3f0a:	b083      	sub	sp, #12
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
  return 1;
    3f10:	f04f 0301 	mov.w	r3, #1
}
    3f14:	4618      	mov	r0, r3
    3f16:	f107 070c 	add.w	r7, r7, #12
    3f1a:	46bd      	mov	sp, r7
    3f1c:	bc80      	pop	{r7}
    3f1e:	4770      	bx	lr

00003f20 <_isatty>:
int _isatty(int fildes)
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
  return 1;
    3f28:	f04f 0301 	mov.w	r3, #1
}
    3f2c:	4618      	mov	r0, r3
    3f2e:	f107 070c 	add.w	r7, r7, #12
    3f32:	46bd      	mov	sp, r7
    3f34:	bc80      	pop	{r7}
    3f36:	4770      	bx	lr

00003f38 <_link>:

int _link(char *old, char *new)
{
    3f38:	b480      	push	{r7}
    3f3a:	b083      	sub	sp, #12
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	6039      	str	r1, [r7, #0]
  errno = EMLINK;
    3f42:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    3f46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3f4a:	f04f 021f 	mov.w	r2, #31
    3f4e:	601a      	str	r2, [r3, #0]
  return -1;
    3f50:	f04f 33ff 	mov.w	r3, #4294967295
}
    3f54:	4618      	mov	r0, r3
    3f56:	f107 070c 	add.w	r7, r7, #12
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
    3f60:	b480      	push	{r7}
    3f62:	b085      	sub	sp, #20
    3f64:	af00      	add	r7, sp, #0
    3f66:	60f8      	str	r0, [r7, #12]
    3f68:	60b9      	str	r1, [r7, #8]
    3f6a:	607a      	str	r2, [r7, #4]
  return 0;
    3f6c:	f04f 0300 	mov.w	r3, #0
}
    3f70:	4618      	mov	r0, r3
    3f72:	f107 0714 	add.w	r7, r7, #20
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <_open>:

int _open(const char *name, int flags, int mode)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b085      	sub	sp, #20
    3f80:	af00      	add	r7, sp, #0
    3f82:	60f8      	str	r0, [r7, #12]
    3f84:	60b9      	str	r1, [r7, #8]
    3f86:	607a      	str	r2, [r7, #4]
  return -1;
    3f88:	f04f 33ff 	mov.w	r3, #4294967295
}
    3f8c:	4618      	mov	r0, r3
    3f8e:	f107 0714 	add.w	r7, r7, #20
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <_read>:

int _read(int file, char *ptr, int len)
{
    3f98:	b480      	push	{r7}
    3f9a:	b085      	sub	sp, #20
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	60f8      	str	r0, [r7, #12]
    3fa0:	60b9      	str	r1, [r7, #8]
    3fa2:	607a      	str	r2, [r7, #4]
  return 0;
    3fa4:	f04f 0300 	mov.w	r3, #0
}
    3fa8:	4618      	mov	r0, r3
    3faa:	f107 0714 	add.w	r7, r7, #20
    3fae:	46bd      	mov	sp, r7
    3fb0:	bc80      	pop	{r7}
    3fb2:	4770      	bx	lr

00003fb4 <_sbrk>:

caddr_t _sbrk(int incr)
{
    3fb4:	b480      	push	{r7}
    3fb6:	b085      	sub	sp, #20
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
  extern char __cs3_heap_end;		/* Defined by the linker */
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
    3fbc:	f640 431c 	movw	r3, #3100	; 0xc1c
    3fc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d114      	bne.n	3ff4 <_sbrk+0x40>
  {
    heap_end = &__cs3_heap_end;
    3fca:	f640 431c 	movw	r3, #3100	; 0xc1c
    3fce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3fd2:	f246 32d8 	movw	r2, #25560	; 0x63d8
    3fd6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    3fda:	601a      	str	r2, [r3, #0]
    /* give 16KB area for stacks and use the rest of memory for heap*/
    heap_end += 0x4000;
    3fdc:	f640 431c 	movw	r3, #3100	; 0xc1c
    3fe0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3fe4:	681b      	ldr	r3, [r3, #0]
    3fe6:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
    3fea:	f640 431c 	movw	r3, #3100	; 0xc1c
    3fee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3ff2:	601a      	str	r2, [r3, #0]
  }
  prev_heap_end = heap_end;
    3ff4:	f640 431c 	movw	r3, #3100	; 0xc1c
    3ff8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3ffc:	681b      	ldr	r3, [r3, #0]
    3ffe:	60fb      	str	r3, [r7, #12]

  heap_end += incr;
    4000:	f640 431c 	movw	r3, #3100	; 0xc1c
    4004:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4008:	681a      	ldr	r2, [r3, #0]
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	18d2      	adds	r2, r2, r3
    400e:	f640 431c 	movw	r3, #3100	; 0xc1c
    4012:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4016:	601a      	str	r2, [r3, #0]
  return (caddr_t) prev_heap_end;
    4018:	68fb      	ldr	r3, [r7, #12]
}
    401a:	4618      	mov	r0, r3
    401c:	f107 0714 	add.w	r7, r7, #20
    4020:	46bd      	mov	sp, r7
    4022:	bc80      	pop	{r7}
    4024:	4770      	bx	lr
    4026:	bf00      	nop

00004028 <_stat>:

int _stat(char *file, struct stat *st)
{
    4028:	b480      	push	{r7}
    402a:	b083      	sub	sp, #12
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
    4030:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
    4032:	683b      	ldr	r3, [r7, #0]
    4034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    4038:	605a      	str	r2, [r3, #4]
  return 0;
    403a:	f04f 0300 	mov.w	r3, #0
}
    403e:	4618      	mov	r0, r3
    4040:	f107 070c 	add.w	r7, r7, #12
    4044:	46bd      	mov	sp, r7
    4046:	bc80      	pop	{r7}
    4048:	4770      	bx	lr
    404a:	bf00      	nop

0000404c <_times>:
int _times(struct tms *buf)
{
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
  return -1;
    4054:	f04f 33ff 	mov.w	r3, #4294967295
}
    4058:	4618      	mov	r0, r3
    405a:	f107 070c 	add.w	r7, r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	bc80      	pop	{r7}
    4062:	4770      	bx	lr

00004064 <_unlink>:

int _unlink(char *name)
{
    4064:	b480      	push	{r7}
    4066:	b083      	sub	sp, #12
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
  errno = ENOENT;
    406c:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    4070:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4074:	f04f 0202 	mov.w	r2, #2
    4078:	601a      	str	r2, [r3, #0]
  return -1;
    407a:	f04f 33ff 	mov.w	r3, #4294967295
}
    407e:	4618      	mov	r0, r3
    4080:	f107 070c 	add.w	r7, r7, #12
    4084:	46bd      	mov	sp, r7
    4086:	bc80      	pop	{r7}
    4088:	4770      	bx	lr
    408a:	bf00      	nop

0000408c <_wait>:

int _wait(int *status)
{
    408c:	b480      	push	{r7}
    408e:	b083      	sub	sp, #12
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
  errno = ECHILD;
    4094:	f645 33d4 	movw	r3, #23508	; 0x5bd4
    4098:	f2c1 0300 	movt	r3, #4096	; 0x1000
    409c:	f04f 020a 	mov.w	r2, #10
    40a0:	601a      	str	r2, [r3, #0]
  return -1;
    40a2:	f04f 33ff 	mov.w	r3, #4294967295
}
    40a6:	4618      	mov	r0, r3
    40a8:	f107 070c 	add.w	r7, r7, #12
    40ac:	46bd      	mov	sp, r7
    40ae:	bc80      	pop	{r7}
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop

000040b4 <_write>:

int _write(int file, char *ptr, int len)
{
    40b4:	b480      	push	{r7}
    40b6:	b085      	sub	sp, #20
    40b8:	af00      	add	r7, sp, #0
    40ba:	60f8      	str	r0, [r7, #12]
    40bc:	60b9      	str	r1, [r7, #8]
    40be:	607a      	str	r2, [r7, #4]
  return 0;
    40c0:	f04f 0300 	mov.w	r3, #0
}
    40c4:	4618      	mov	r0, r3
    40c6:	f107 0714 	add.w	r7, r7, #20
    40ca:	46bd      	mov	sp, r7
    40cc:	bc80      	pop	{r7}
    40ce:	4770      	bx	lr

000040d0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    40d0:	b480      	push	{r7}
    40d2:	b085      	sub	sp, #20
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	f003 0307 	and.w	r3, r3, #7
    40de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    40e0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    40e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    40e8:	68db      	ldr	r3, [r3, #12]
    40ea:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
    40ec:	68ba      	ldr	r2, [r7, #8]
    40ee:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    40f2:	4013      	ands	r3, r2
    40f4:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                       |
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
    40f6:	68fb      	ldr	r3, [r7, #12]
    40f8:	ea4f 2203 	mov.w	r2, r3, lsl #8
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                       |
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
    40fc:	68bb      	ldr	r3, [r7, #8]
    40fe:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                       |
    4100:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
    4104:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    4108:	60bb      	str	r3, [r7, #8]
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
    410a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    410e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4112:	68ba      	ldr	r2, [r7, #8]
    4114:	60da      	str	r2, [r3, #12]
}
    4116:	f107 0714 	add.w	r7, r7, #20
    411a:	46bd      	mov	sp, r7
    411c:	bc80      	pop	{r7}
    411e:	4770      	bx	lr

00004120 <NVICInit>:
 * Resets all interrupt pending status flags and sets the VTOR
 * register of the cortex m3 cpu to point to our interrupt vector table.
 *
 */
void NVICInit(void)
{
    4120:	b580      	push	{r7, lr}
    4122:	af00      	add	r7, sp, #0
   /* DeInit NVIC and SCBNVIC */
   NVIC_DeInit();
    4124:	f7ff fbb2 	bl	388c <NVIC_DeInit>
   NVIC_SCBDeInit();
    4128:	f7ff fbee 	bl	3908 <NVIC_SCBDeInit>
   /* Configure the NVIC Preemption Priority Bits:
    * two (2) bits of preemption priority, six (6) bits of sub-priority.
    * Since the Number of Bits used for Priority Levels is five (5), so the
    * actual bit number of sub-priority is three (3)
    */
   NVIC_SetPriorityGrouping(0x05);
    412c:	f04f 0005 	mov.w	r0, #5
    4130:	f7ff ffce 	bl	40d0 <NVIC_SetPriorityGrouping>
   NVIC_SetVTOR((uint32_t)IntVectorTable);
    4134:	f24c 4300 	movw	r3, #50176	; 0xc400
    4138:	f2c0 0302 	movt	r3, #2
    413c:	4618      	mov	r0, r3
    413e:	f7ff fc41 	bl	39c4 <NVIC_SetVTOR>
}
    4142:	bd80      	pop	{r7, pc}

00004144 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
    4144:	b580      	push	{r7, lr}
    4146:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
    4148:	f04f 0001 	mov.w	r0, #1
    414c:	f000 f802 	bl	4154 <Math_RandSetSeed>
}
    4150:	bd80      	pop	{r7, pc}
    4152:	bf00      	nop

00004154 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
    4154:	b580      	push	{r7, lr}
    4156:	b084      	sub	sp, #16
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
    415c:	f04f 0300 	mov.w	r3, #0
    4160:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
    4162:	f013 fe3f 	bl	17de4 <CPU_SR_Save>
    4166:	60f8      	str	r0, [r7, #12]
    4168:	f7fd fba6 	bl	18b8 <CPU_IntDisMeasStart>
    Math_RandSeedCur = seed;
    416c:	f643 43f8 	movw	r3, #15608	; 0x3cf8
    4170:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4174:	687a      	ldr	r2, [r7, #4]
    4176:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
    4178:	f7fd fbca 	bl	1910 <CPU_IntDisMeasStop>
    417c:	68f8      	ldr	r0, [r7, #12]
    417e:	f013 fe35 	bl	17dec <CPU_SR_Restore>
}
    4182:	f107 0710 	add.w	r7, r7, #16
    4186:	46bd      	mov	sp, r7
    4188:	bd80      	pop	{r7, pc}
    418a:	bf00      	nop

0000418c <Math_Rand>:
*                   See also 'Math_RandSeed()  Note #2'.
*********************************************************************************************************
*/

RAND_NBR  Math_Rand (void)
{
    418c:	b580      	push	{r7, lr}
    418e:	b084      	sub	sp, #16
    4190:	af00      	add	r7, sp, #0
    RAND_NBR  seed;
    RAND_NBR  rand_nbr;
    CPU_SR_ALLOC();
    4192:	f04f 0300 	mov.w	r3, #0
    4196:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
    4198:	f013 fe24 	bl	17de4 <CPU_SR_Save>
    419c:	60f8      	str	r0, [r7, #12]
    419e:	f7fd fb8b 	bl	18b8 <CPU_IntDisMeasStart>
    seed             = Math_RandSeedCur;
    41a2:	f643 43f8 	movw	r3, #15608	; 0x3cf8
    41a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	60bb      	str	r3, [r7, #8]
    rand_nbr         = Math_RandSeed(seed);
    41ae:	68b8      	ldr	r0, [r7, #8]
    41b0:	f000 f812 	bl	41d8 <Math_RandSeed>
    41b4:	6078      	str	r0, [r7, #4]
    Math_RandSeedCur = rand_nbr;
    41b6:	f643 43f8 	movw	r3, #15608	; 0x3cf8
    41ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    41be:	687a      	ldr	r2, [r7, #4]
    41c0:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
    41c2:	f7fd fba5 	bl	1910 <CPU_IntDisMeasStop>
    41c6:	68f8      	ldr	r0, [r7, #12]
    41c8:	f013 fe10 	bl	17dec <CPU_SR_Restore>

    return (rand_nbr);
    41cc:	687b      	ldr	r3, [r7, #4]
}
    41ce:	4618      	mov	r0, r3
    41d0:	f107 0710 	add.w	r7, r7, #16
    41d4:	46bd      	mov	sp, r7
    41d6:	bd80      	pop	{r7, pc}

000041d8 <Math_RandSeed>:
*                       using ONLY local variables.
*********************************************************************************************************
*/

RAND_NBR  Math_RandSeed (RAND_NBR  seed)
{
    41d8:	b480      	push	{r7}
    41da:	b085      	sub	sp, #20
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
    RAND_NBR  rand_nbr;


    rand_nbr = (((RAND_NBR)RAND_LCG_PARAM_A * seed) + (RAND_NBR)RAND_LCG_PARAM_B)  %  ((RAND_NBR)RAND_LCG_PARAM_M + 1u);
    41e0:	687a      	ldr	r2, [r7, #4]
    41e2:	f644 636d 	movw	r3, #20077	; 0x4e6d
    41e6:	f2c4 13c6 	movt	r3, #16838	; 0x41c6
    41ea:	fb03 f302 	mul.w	r3, r3, r2
    41ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    41f2:	f103 0339 	add.w	r3, r3, #57	; 0x39
    41f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    41fa:	60fb      	str	r3, [r7, #12]

    return (rand_nbr);
    41fc:	68fb      	ldr	r3, [r7, #12]
}
    41fe:	4618      	mov	r0, r3
    4200:	f107 0714 	add.w	r7, r7, #20
    4204:	46bd      	mov	sp, r7
    4206:	bc80      	pop	{r7}
    4208:	4770      	bx	lr
    420a:	bf00      	nop

0000420c <ASCII_IsAlpha>:
*                   characters for which isupper() or islower() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsAlpha (CPU_CHAR  c)
{
    420c:	b480      	push	{r7}
    420e:	b085      	sub	sp, #20
    4210:	af00      	add	r7, sp, #0
    4212:	4603      	mov	r3, r0
    4214:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  alpha;


    alpha = ASCII_IS_ALPHA(c);
    4216:	79fb      	ldrb	r3, [r7, #7]
    4218:	2b40      	cmp	r3, #64	; 0x40
    421a:	d905      	bls.n	4228 <ASCII_IsAlpha+0x1c>
    421c:	79fb      	ldrb	r3, [r7, #7]
    421e:	2b5a      	cmp	r3, #90	; 0x5a
    4220:	d802      	bhi.n	4228 <ASCII_IsAlpha+0x1c>
    4222:	f04f 0301 	mov.w	r3, #1
    4226:	e001      	b.n	422c <ASCII_IsAlpha+0x20>
    4228:	f04f 0300 	mov.w	r3, #0
    422c:	2b01      	cmp	r3, #1
    422e:	d00c      	beq.n	424a <ASCII_IsAlpha+0x3e>
    4230:	79fb      	ldrb	r3, [r7, #7]
    4232:	2b60      	cmp	r3, #96	; 0x60
    4234:	d905      	bls.n	4242 <ASCII_IsAlpha+0x36>
    4236:	79fb      	ldrb	r3, [r7, #7]
    4238:	2b7a      	cmp	r3, #122	; 0x7a
    423a:	d802      	bhi.n	4242 <ASCII_IsAlpha+0x36>
    423c:	f04f 0301 	mov.w	r3, #1
    4240:	e001      	b.n	4246 <ASCII_IsAlpha+0x3a>
    4242:	f04f 0300 	mov.w	r3, #0
    4246:	2b01      	cmp	r3, #1
    4248:	d102      	bne.n	4250 <ASCII_IsAlpha+0x44>
    424a:	f04f 0301 	mov.w	r3, #1
    424e:	e001      	b.n	4254 <ASCII_IsAlpha+0x48>
    4250:	f04f 0300 	mov.w	r3, #0
    4254:	73fb      	strb	r3, [r7, #15]

    return (alpha);
    4256:	7bfb      	ldrb	r3, [r7, #15]
}
    4258:	4618      	mov	r0, r3
    425a:	f107 0714 	add.w	r7, r7, #20
    425e:	46bd      	mov	sp, r7
    4260:	bc80      	pop	{r7}
    4262:	4770      	bx	lr

00004264 <ASCII_IsAlphaNum>:
*                   for which isalpha() or isdigit() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsAlphaNum (CPU_CHAR  c)
{
    4264:	b480      	push	{r7}
    4266:	b085      	sub	sp, #20
    4268:	af00      	add	r7, sp, #0
    426a:	4603      	mov	r3, r0
    426c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  alpha_num;


    alpha_num = ASCII_IS_ALPHA_NUM(c);
    426e:	79fb      	ldrb	r3, [r7, #7]
    4270:	2b40      	cmp	r3, #64	; 0x40
    4272:	d905      	bls.n	4280 <ASCII_IsAlphaNum+0x1c>
    4274:	79fb      	ldrb	r3, [r7, #7]
    4276:	2b5a      	cmp	r3, #90	; 0x5a
    4278:	d802      	bhi.n	4280 <ASCII_IsAlphaNum+0x1c>
    427a:	f04f 0301 	mov.w	r3, #1
    427e:	e001      	b.n	4284 <ASCII_IsAlphaNum+0x20>
    4280:	f04f 0300 	mov.w	r3, #0
    4284:	2b01      	cmp	r3, #1
    4286:	d00c      	beq.n	42a2 <ASCII_IsAlphaNum+0x3e>
    4288:	79fb      	ldrb	r3, [r7, #7]
    428a:	2b60      	cmp	r3, #96	; 0x60
    428c:	d905      	bls.n	429a <ASCII_IsAlphaNum+0x36>
    428e:	79fb      	ldrb	r3, [r7, #7]
    4290:	2b7a      	cmp	r3, #122	; 0x7a
    4292:	d802      	bhi.n	429a <ASCII_IsAlphaNum+0x36>
    4294:	f04f 0301 	mov.w	r3, #1
    4298:	e001      	b.n	429e <ASCII_IsAlphaNum+0x3a>
    429a:	f04f 0300 	mov.w	r3, #0
    429e:	2b01      	cmp	r3, #1
    42a0:	d102      	bne.n	42a8 <ASCII_IsAlphaNum+0x44>
    42a2:	f04f 0301 	mov.w	r3, #1
    42a6:	e001      	b.n	42ac <ASCII_IsAlphaNum+0x48>
    42a8:	f04f 0300 	mov.w	r3, #0
    42ac:	2b01      	cmp	r3, #1
    42ae:	d00c      	beq.n	42ca <ASCII_IsAlphaNum+0x66>
    42b0:	79fb      	ldrb	r3, [r7, #7]
    42b2:	2b2f      	cmp	r3, #47	; 0x2f
    42b4:	d905      	bls.n	42c2 <ASCII_IsAlphaNum+0x5e>
    42b6:	79fb      	ldrb	r3, [r7, #7]
    42b8:	2b39      	cmp	r3, #57	; 0x39
    42ba:	d802      	bhi.n	42c2 <ASCII_IsAlphaNum+0x5e>
    42bc:	f04f 0301 	mov.w	r3, #1
    42c0:	e001      	b.n	42c6 <ASCII_IsAlphaNum+0x62>
    42c2:	f04f 0300 	mov.w	r3, #0
    42c6:	2b01      	cmp	r3, #1
    42c8:	d102      	bne.n	42d0 <ASCII_IsAlphaNum+0x6c>
    42ca:	f04f 0301 	mov.w	r3, #1
    42ce:	e001      	b.n	42d4 <ASCII_IsAlphaNum+0x70>
    42d0:	f04f 0300 	mov.w	r3, #0
    42d4:	73fb      	strb	r3, [r7, #15]

    return (alpha_num);
    42d6:	7bfb      	ldrb	r3, [r7, #15]
}
    42d8:	4618      	mov	r0, r3
    42da:	f107 0714 	add.w	r7, r7, #20
    42de:	46bd      	mov	sp, r7
    42e0:	bc80      	pop	{r7}
    42e2:	4770      	bx	lr

000042e4 <ASCII_IsLower>:
*                   the lowercase letters".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsLower (CPU_CHAR  c)
{
    42e4:	b480      	push	{r7}
    42e6:	b085      	sub	sp, #20
    42e8:	af00      	add	r7, sp, #0
    42ea:	4603      	mov	r3, r0
    42ec:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  lower;


    lower = ASCII_IS_LOWER(c);
    42ee:	79fb      	ldrb	r3, [r7, #7]
    42f0:	2b60      	cmp	r3, #96	; 0x60
    42f2:	d905      	bls.n	4300 <ASCII_IsLower+0x1c>
    42f4:	79fb      	ldrb	r3, [r7, #7]
    42f6:	2b7a      	cmp	r3, #122	; 0x7a
    42f8:	d802      	bhi.n	4300 <ASCII_IsLower+0x1c>
    42fa:	f04f 0301 	mov.w	r3, #1
    42fe:	e001      	b.n	4304 <ASCII_IsLower+0x20>
    4300:	f04f 0300 	mov.w	r3, #0
    4304:	73fb      	strb	r3, [r7, #15]

    return (lower);
    4306:	7bfb      	ldrb	r3, [r7, #15]
}
    4308:	4618      	mov	r0, r3
    430a:	f107 0714 	add.w	r7, r7, #20
    430e:	46bd      	mov	sp, r7
    4310:	bc80      	pop	{r7}
    4312:	4770      	bx	lr

00004314 <ASCII_IsUpper>:
*                   the uppercase letters".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsUpper (CPU_CHAR  c)
{
    4314:	b480      	push	{r7}
    4316:	b085      	sub	sp, #20
    4318:	af00      	add	r7, sp, #0
    431a:	4603      	mov	r3, r0
    431c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  upper;


    upper = ASCII_IS_UPPER(c);
    431e:	79fb      	ldrb	r3, [r7, #7]
    4320:	2b40      	cmp	r3, #64	; 0x40
    4322:	d905      	bls.n	4330 <ASCII_IsUpper+0x1c>
    4324:	79fb      	ldrb	r3, [r7, #7]
    4326:	2b5a      	cmp	r3, #90	; 0x5a
    4328:	d802      	bhi.n	4330 <ASCII_IsUpper+0x1c>
    432a:	f04f 0301 	mov.w	r3, #1
    432e:	e001      	b.n	4334 <ASCII_IsUpper+0x20>
    4330:	f04f 0300 	mov.w	r3, #0
    4334:	73fb      	strb	r3, [r7, #15]

    return (upper);
    4336:	7bfb      	ldrb	r3, [r7, #15]
}
    4338:	4618      	mov	r0, r3
    433a:	f107 0714 	add.w	r7, r7, #20
    433e:	46bd      	mov	sp, r7
    4340:	bc80      	pop	{r7}
    4342:	4770      	bx	lr

00004344 <ASCII_IsDig>:
*                   decimal-digit character".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsDig (CPU_CHAR  c)
{
    4344:	b480      	push	{r7}
    4346:	b085      	sub	sp, #20
    4348:	af00      	add	r7, sp, #0
    434a:	4603      	mov	r3, r0
    434c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  dig;


    dig = ASCII_IS_DIG(c);
    434e:	79fb      	ldrb	r3, [r7, #7]
    4350:	2b2f      	cmp	r3, #47	; 0x2f
    4352:	d905      	bls.n	4360 <ASCII_IsDig+0x1c>
    4354:	79fb      	ldrb	r3, [r7, #7]
    4356:	2b39      	cmp	r3, #57	; 0x39
    4358:	d802      	bhi.n	4360 <ASCII_IsDig+0x1c>
    435a:	f04f 0301 	mov.w	r3, #1
    435e:	e001      	b.n	4364 <ASCII_IsDig+0x20>
    4360:	f04f 0300 	mov.w	r3, #0
    4364:	73fb      	strb	r3, [r7, #15]

    return (dig);
    4366:	7bfb      	ldrb	r3, [r7, #15]
}
    4368:	4618      	mov	r0, r3
    436a:	f107 0714 	add.w	r7, r7, #20
    436e:	46bd      	mov	sp, r7
    4370:	bc80      	pop	{r7}
    4372:	4770      	bx	lr

00004374 <ASCII_IsDigOct>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsDigOct (CPU_CHAR  c)
{
    4374:	b480      	push	{r7}
    4376:	b085      	sub	sp, #20
    4378:	af00      	add	r7, sp, #0
    437a:	4603      	mov	r3, r0
    437c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  dig_oct;


    dig_oct = ASCII_IS_DIG_OCT(c);
    437e:	79fb      	ldrb	r3, [r7, #7]
    4380:	2b2f      	cmp	r3, #47	; 0x2f
    4382:	d905      	bls.n	4390 <ASCII_IsDigOct+0x1c>
    4384:	79fb      	ldrb	r3, [r7, #7]
    4386:	2b37      	cmp	r3, #55	; 0x37
    4388:	d802      	bhi.n	4390 <ASCII_IsDigOct+0x1c>
    438a:	f04f 0301 	mov.w	r3, #1
    438e:	e001      	b.n	4394 <ASCII_IsDigOct+0x20>
    4390:	f04f 0300 	mov.w	r3, #0
    4394:	73fb      	strb	r3, [r7, #15]

    return (dig_oct);
    4396:	7bfb      	ldrb	r3, [r7, #15]
}
    4398:	4618      	mov	r0, r3
    439a:	f107 0714 	add.w	r7, r7, #20
    439e:	46bd      	mov	sp, r7
    43a0:	bc80      	pop	{r7}
    43a2:	4770      	bx	lr

000043a4 <ASCII_IsDigHex>:
*                   hexadecimal-digit character".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsDigHex (CPU_CHAR  c)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
    43aa:	4603      	mov	r3, r0
    43ac:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  dig_hex;


    dig_hex = ASCII_IS_DIG_HEX(c);
    43ae:	79fb      	ldrb	r3, [r7, #7]
    43b0:	2b2f      	cmp	r3, #47	; 0x2f
    43b2:	d902      	bls.n	43ba <ASCII_IsDigHex+0x16>
    43b4:	79fb      	ldrb	r3, [r7, #7]
    43b6:	2b39      	cmp	r3, #57	; 0x39
    43b8:	d90b      	bls.n	43d2 <ASCII_IsDigHex+0x2e>
    43ba:	79fb      	ldrb	r3, [r7, #7]
    43bc:	2b40      	cmp	r3, #64	; 0x40
    43be:	d902      	bls.n	43c6 <ASCII_IsDigHex+0x22>
    43c0:	79fb      	ldrb	r3, [r7, #7]
    43c2:	2b46      	cmp	r3, #70	; 0x46
    43c4:	d905      	bls.n	43d2 <ASCII_IsDigHex+0x2e>
    43c6:	79fb      	ldrb	r3, [r7, #7]
    43c8:	2b60      	cmp	r3, #96	; 0x60
    43ca:	d905      	bls.n	43d8 <ASCII_IsDigHex+0x34>
    43cc:	79fb      	ldrb	r3, [r7, #7]
    43ce:	2b66      	cmp	r3, #102	; 0x66
    43d0:	d802      	bhi.n	43d8 <ASCII_IsDigHex+0x34>
    43d2:	f04f 0301 	mov.w	r3, #1
    43d6:	e001      	b.n	43dc <ASCII_IsDigHex+0x38>
    43d8:	f04f 0300 	mov.w	r3, #0
    43dc:	73fb      	strb	r3, [r7, #15]

    return (dig_hex);
    43de:	7bfb      	ldrb	r3, [r7, #15]
}
    43e0:	4618      	mov	r0, r3
    43e2:	f107 0714 	add.w	r7, r7, #20
    43e6:	46bd      	mov	sp, r7
    43e8:	bc80      	pop	{r7}
    43ea:	4770      	bx	lr

000043ec <ASCII_IsBlank>:
*                       the "space (' '), and horizontal tab ('\t')".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsBlank (CPU_CHAR  c)
{
    43ec:	b480      	push	{r7}
    43ee:	b085      	sub	sp, #20
    43f0:	af00      	add	r7, sp, #0
    43f2:	4603      	mov	r3, r0
    43f4:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  blank;


    blank = ASCII_IS_BLANK(c);
    43f6:	79fb      	ldrb	r3, [r7, #7]
    43f8:	2b20      	cmp	r3, #32
    43fa:	d002      	beq.n	4402 <ASCII_IsBlank+0x16>
    43fc:	79fb      	ldrb	r3, [r7, #7]
    43fe:	2b09      	cmp	r3, #9
    4400:	d102      	bne.n	4408 <ASCII_IsBlank+0x1c>
    4402:	f04f 0301 	mov.w	r3, #1
    4406:	e001      	b.n	440c <ASCII_IsBlank+0x20>
    4408:	f04f 0300 	mov.w	r3, #0
    440c:	73fb      	strb	r3, [r7, #15]

    return (blank);
    440e:	7bfb      	ldrb	r3, [r7, #15]
}
    4410:	4618      	mov	r0, r3
    4412:	f107 0714 	add.w	r7, r7, #20
    4416:	46bd      	mov	sp, r7
    4418:	bc80      	pop	{r7}
    441a:	4770      	bx	lr

0000441c <ASCII_IsSpace>:
*                       horizontal tab ('\t'), and vertical tab ('\v')".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsSpace (CPU_CHAR  c)
{
    441c:	b480      	push	{r7}
    441e:	b085      	sub	sp, #20
    4420:	af00      	add	r7, sp, #0
    4422:	4603      	mov	r3, r0
    4424:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  space;


    space = ASCII_IS_SPACE(c);
    4426:	79fb      	ldrb	r3, [r7, #7]
    4428:	2b20      	cmp	r3, #32
    442a:	d00e      	beq.n	444a <ASCII_IsSpace+0x2e>
    442c:	79fb      	ldrb	r3, [r7, #7]
    442e:	2b0d      	cmp	r3, #13
    4430:	d00b      	beq.n	444a <ASCII_IsSpace+0x2e>
    4432:	79fb      	ldrb	r3, [r7, #7]
    4434:	2b0a      	cmp	r3, #10
    4436:	d008      	beq.n	444a <ASCII_IsSpace+0x2e>
    4438:	79fb      	ldrb	r3, [r7, #7]
    443a:	2b0c      	cmp	r3, #12
    443c:	d005      	beq.n	444a <ASCII_IsSpace+0x2e>
    443e:	79fb      	ldrb	r3, [r7, #7]
    4440:	2b09      	cmp	r3, #9
    4442:	d002      	beq.n	444a <ASCII_IsSpace+0x2e>
    4444:	79fb      	ldrb	r3, [r7, #7]
    4446:	2b0b      	cmp	r3, #11
    4448:	d102      	bne.n	4450 <ASCII_IsSpace+0x34>
    444a:	f04f 0301 	mov.w	r3, #1
    444e:	e001      	b.n	4454 <ASCII_IsSpace+0x38>
    4450:	f04f 0300 	mov.w	r3, #0
    4454:	73fb      	strb	r3, [r7, #15]

    return (space);
    4456:	7bfb      	ldrb	r3, [r7, #15]
}
    4458:	4618      	mov	r0, r3
    445a:	f107 0714 	add.w	r7, r7, #20
    445e:	46bd      	mov	sp, r7
    4460:	bc80      	pop	{r7}
    4462:	4770      	bx	lr

00004464 <ASCII_IsPrint>:
*                       0x20 (space) through 0x7E (tilde)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsPrint (CPU_CHAR  c)
{
    4464:	b480      	push	{r7}
    4466:	b085      	sub	sp, #20
    4468:	af00      	add	r7, sp, #0
    446a:	4603      	mov	r3, r0
    446c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  print;


    print = ASCII_IS_PRINT(c);
    446e:	79fb      	ldrb	r3, [r7, #7]
    4470:	2b1f      	cmp	r3, #31
    4472:	d905      	bls.n	4480 <ASCII_IsPrint+0x1c>
    4474:	79fb      	ldrb	r3, [r7, #7]
    4476:	2b7e      	cmp	r3, #126	; 0x7e
    4478:	d802      	bhi.n	4480 <ASCII_IsPrint+0x1c>
    447a:	f04f 0301 	mov.w	r3, #1
    447e:	e001      	b.n	4484 <ASCII_IsPrint+0x20>
    4480:	f04f 0300 	mov.w	r3, #0
    4484:	73fb      	strb	r3, [r7, #15]

    return (print);
    4486:	7bfb      	ldrb	r3, [r7, #15]
}
    4488:	4618      	mov	r0, r3
    448a:	f107 0714 	add.w	r7, r7, #20
    448e:	46bd      	mov	sp, r7
    4490:	bc80      	pop	{r7}
    4492:	4770      	bx	lr

00004494 <ASCII_IsGraph>:
*                       0x20 (space) through 0x7E (tilde)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsGraph (CPU_CHAR  c)
{
    4494:	b480      	push	{r7}
    4496:	b085      	sub	sp, #20
    4498:	af00      	add	r7, sp, #0
    449a:	4603      	mov	r3, r0
    449c:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  graph;


    graph = ASCII_IS_GRAPH(c);
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	2b20      	cmp	r3, #32
    44a2:	d905      	bls.n	44b0 <ASCII_IsGraph+0x1c>
    44a4:	79fb      	ldrb	r3, [r7, #7]
    44a6:	2b7e      	cmp	r3, #126	; 0x7e
    44a8:	d802      	bhi.n	44b0 <ASCII_IsGraph+0x1c>
    44aa:	f04f 0301 	mov.w	r3, #1
    44ae:	e001      	b.n	44b4 <ASCII_IsGraph+0x20>
    44b0:	f04f 0300 	mov.w	r3, #0
    44b4:	73fb      	strb	r3, [r7, #15]

    return (graph);
    44b6:	7bfb      	ldrb	r3, [r7, #15]
}
    44b8:	4618      	mov	r0, r3
    44ba:	f107 0714 	add.w	r7, r7, #20
    44be:	46bd      	mov	sp, r7
    44c0:	bc80      	pop	{r7}
    44c2:	4770      	bx	lr

000044c4 <ASCII_IsPunct>:
*                   printing character for which neither isspace() nor isalnum() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsPunct (CPU_CHAR  c)
{
    44c4:	b480      	push	{r7}
    44c6:	b085      	sub	sp, #20
    44c8:	af00      	add	r7, sp, #0
    44ca:	4603      	mov	r3, r0
    44cc:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  punct;


    punct = ASCII_IS_PUNCT(c);
    44ce:	79fb      	ldrb	r3, [r7, #7]
    44d0:	2b1f      	cmp	r3, #31
    44d2:	d905      	bls.n	44e0 <ASCII_IsPunct+0x1c>
    44d4:	79fb      	ldrb	r3, [r7, #7]
    44d6:	2b7e      	cmp	r3, #126	; 0x7e
    44d8:	d802      	bhi.n	44e0 <ASCII_IsPunct+0x1c>
    44da:	f04f 0301 	mov.w	r3, #1
    44de:	e001      	b.n	44e4 <ASCII_IsPunct+0x20>
    44e0:	f04f 0300 	mov.w	r3, #0
    44e4:	2b01      	cmp	r3, #1
    44e6:	d150      	bne.n	458a <ASCII_IsPunct+0xc6>
    44e8:	79fb      	ldrb	r3, [r7, #7]
    44ea:	2b20      	cmp	r3, #32
    44ec:	d00e      	beq.n	450c <ASCII_IsPunct+0x48>
    44ee:	79fb      	ldrb	r3, [r7, #7]
    44f0:	2b0d      	cmp	r3, #13
    44f2:	d00b      	beq.n	450c <ASCII_IsPunct+0x48>
    44f4:	79fb      	ldrb	r3, [r7, #7]
    44f6:	2b0a      	cmp	r3, #10
    44f8:	d008      	beq.n	450c <ASCII_IsPunct+0x48>
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b0c      	cmp	r3, #12
    44fe:	d005      	beq.n	450c <ASCII_IsPunct+0x48>
    4500:	79fb      	ldrb	r3, [r7, #7]
    4502:	2b09      	cmp	r3, #9
    4504:	d002      	beq.n	450c <ASCII_IsPunct+0x48>
    4506:	79fb      	ldrb	r3, [r7, #7]
    4508:	2b0b      	cmp	r3, #11
    450a:	d102      	bne.n	4512 <ASCII_IsPunct+0x4e>
    450c:	f04f 0301 	mov.w	r3, #1
    4510:	e001      	b.n	4516 <ASCII_IsPunct+0x52>
    4512:	f04f 0300 	mov.w	r3, #0
    4516:	2b00      	cmp	r3, #0
    4518:	d137      	bne.n	458a <ASCII_IsPunct+0xc6>
    451a:	79fb      	ldrb	r3, [r7, #7]
    451c:	2b40      	cmp	r3, #64	; 0x40
    451e:	d905      	bls.n	452c <ASCII_IsPunct+0x68>
    4520:	79fb      	ldrb	r3, [r7, #7]
    4522:	2b5a      	cmp	r3, #90	; 0x5a
    4524:	d802      	bhi.n	452c <ASCII_IsPunct+0x68>
    4526:	f04f 0301 	mov.w	r3, #1
    452a:	e001      	b.n	4530 <ASCII_IsPunct+0x6c>
    452c:	f04f 0300 	mov.w	r3, #0
    4530:	2b01      	cmp	r3, #1
    4532:	d00c      	beq.n	454e <ASCII_IsPunct+0x8a>
    4534:	79fb      	ldrb	r3, [r7, #7]
    4536:	2b60      	cmp	r3, #96	; 0x60
    4538:	d905      	bls.n	4546 <ASCII_IsPunct+0x82>
    453a:	79fb      	ldrb	r3, [r7, #7]
    453c:	2b7a      	cmp	r3, #122	; 0x7a
    453e:	d802      	bhi.n	4546 <ASCII_IsPunct+0x82>
    4540:	f04f 0301 	mov.w	r3, #1
    4544:	e001      	b.n	454a <ASCII_IsPunct+0x86>
    4546:	f04f 0300 	mov.w	r3, #0
    454a:	2b01      	cmp	r3, #1
    454c:	d102      	bne.n	4554 <ASCII_IsPunct+0x90>
    454e:	f04f 0301 	mov.w	r3, #1
    4552:	e001      	b.n	4558 <ASCII_IsPunct+0x94>
    4554:	f04f 0300 	mov.w	r3, #0
    4558:	2b01      	cmp	r3, #1
    455a:	d00c      	beq.n	4576 <ASCII_IsPunct+0xb2>
    455c:	79fb      	ldrb	r3, [r7, #7]
    455e:	2b2f      	cmp	r3, #47	; 0x2f
    4560:	d905      	bls.n	456e <ASCII_IsPunct+0xaa>
    4562:	79fb      	ldrb	r3, [r7, #7]
    4564:	2b39      	cmp	r3, #57	; 0x39
    4566:	d802      	bhi.n	456e <ASCII_IsPunct+0xaa>
    4568:	f04f 0301 	mov.w	r3, #1
    456c:	e001      	b.n	4572 <ASCII_IsPunct+0xae>
    456e:	f04f 0300 	mov.w	r3, #0
    4572:	2b01      	cmp	r3, #1
    4574:	d102      	bne.n	457c <ASCII_IsPunct+0xb8>
    4576:	f04f 0301 	mov.w	r3, #1
    457a:	e001      	b.n	4580 <ASCII_IsPunct+0xbc>
    457c:	f04f 0300 	mov.w	r3, #0
    4580:	2b00      	cmp	r3, #0
    4582:	d102      	bne.n	458a <ASCII_IsPunct+0xc6>
    4584:	f04f 0301 	mov.w	r3, #1
    4588:	e001      	b.n	458e <ASCII_IsPunct+0xca>
    458a:	f04f 0300 	mov.w	r3, #0
    458e:	73fb      	strb	r3, [r7, #15]

    return (punct);
    4590:	7bfb      	ldrb	r3, [r7, #15]
}
    4592:	4618      	mov	r0, r3
    4594:	f107 0714 	add.w	r7, r7, #20
    4598:	46bd      	mov	sp, r7
    459a:	bc80      	pop	{r7}
    459c:	4770      	bx	lr
    459e:	bf00      	nop

000045a0 <ASCII_IsCtrl>:
*                       0 (NUL) through 0x1F (US), and the character 0x7F (DEL)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsCtrl (CPU_CHAR  c)
{
    45a0:	b480      	push	{r7}
    45a2:	b085      	sub	sp, #20
    45a4:	af00      	add	r7, sp, #0
    45a6:	4603      	mov	r3, r0
    45a8:	71fb      	strb	r3, [r7, #7]
    CPU_BOOLEAN  ctrl;


    ctrl = ASCII_IS_CTRL(c);
    45aa:	79fb      	ldrb	r3, [r7, #7]
    45ac:	b25b      	sxtb	r3, r3
    45ae:	2b00      	cmp	r3, #0
    45b0:	db02      	blt.n	45b8 <ASCII_IsCtrl+0x18>
    45b2:	79fb      	ldrb	r3, [r7, #7]
    45b4:	2b1f      	cmp	r3, #31
    45b6:	d902      	bls.n	45be <ASCII_IsCtrl+0x1e>
    45b8:	79fb      	ldrb	r3, [r7, #7]
    45ba:	2b7f      	cmp	r3, #127	; 0x7f
    45bc:	d102      	bne.n	45c4 <ASCII_IsCtrl+0x24>
    45be:	f04f 0301 	mov.w	r3, #1
    45c2:	e001      	b.n	45c8 <ASCII_IsCtrl+0x28>
    45c4:	f04f 0300 	mov.w	r3, #0
    45c8:	73fb      	strb	r3, [r7, #15]

    return (ctrl);
    45ca:	7bfb      	ldrb	r3, [r7, #15]
}
    45cc:	4618      	mov	r0, r3
    45ce:	f107 0714 	add.w	r7, r7, #20
    45d2:	46bd      	mov	sp, r7
    45d4:	bc80      	pop	{r7}
    45d6:	4770      	bx	lr

000045d8 <ASCII_ToLower>:
*                       (2) "otherwise, the argument is returned unchanged."
*********************************************************************************************************
*/

CPU_CHAR  ASCII_ToLower (CPU_CHAR  c)
{
    45d8:	b480      	push	{r7}
    45da:	b085      	sub	sp, #20
    45dc:	af00      	add	r7, sp, #0
    45de:	4603      	mov	r3, r0
    45e0:	71fb      	strb	r3, [r7, #7]
    CPU_CHAR  lower;


    lower = ASCII_TO_LOWER(c);
    45e2:	79fb      	ldrb	r3, [r7, #7]
    45e4:	2b40      	cmp	r3, #64	; 0x40
    45e6:	d905      	bls.n	45f4 <ASCII_ToLower+0x1c>
    45e8:	79fb      	ldrb	r3, [r7, #7]
    45ea:	2b5a      	cmp	r3, #90	; 0x5a
    45ec:	d802      	bhi.n	45f4 <ASCII_ToLower+0x1c>
    45ee:	f04f 0301 	mov.w	r3, #1
    45f2:	e001      	b.n	45f8 <ASCII_ToLower+0x20>
    45f4:	f04f 0300 	mov.w	r3, #0
    45f8:	2b01      	cmp	r3, #1
    45fa:	d104      	bne.n	4606 <ASCII_ToLower+0x2e>
    45fc:	79fb      	ldrb	r3, [r7, #7]
    45fe:	f103 0320 	add.w	r3, r3, #32
    4602:	b2db      	uxtb	r3, r3
    4604:	e000      	b.n	4608 <ASCII_ToLower+0x30>
    4606:	79fb      	ldrb	r3, [r7, #7]
    4608:	73fb      	strb	r3, [r7, #15]

    return (lower);
    460a:	7bfb      	ldrb	r3, [r7, #15]
}
    460c:	4618      	mov	r0, r3
    460e:	f107 0714 	add.w	r7, r7, #20
    4612:	46bd      	mov	sp, r7
    4614:	bc80      	pop	{r7}
    4616:	4770      	bx	lr

00004618 <ASCII_ToUpper>:
*                       (2) "otherwise, the argument is returned unchanged."
*********************************************************************************************************
*/

CPU_CHAR  ASCII_ToUpper (CPU_CHAR  c)
{
    4618:	b480      	push	{r7}
    461a:	b085      	sub	sp, #20
    461c:	af00      	add	r7, sp, #0
    461e:	4603      	mov	r3, r0
    4620:	71fb      	strb	r3, [r7, #7]
    CPU_CHAR  upper;


    upper = ASCII_TO_UPPER(c);
    4622:	79fb      	ldrb	r3, [r7, #7]
    4624:	2b60      	cmp	r3, #96	; 0x60
    4626:	d905      	bls.n	4634 <ASCII_ToUpper+0x1c>
    4628:	79fb      	ldrb	r3, [r7, #7]
    462a:	2b7a      	cmp	r3, #122	; 0x7a
    462c:	d802      	bhi.n	4634 <ASCII_ToUpper+0x1c>
    462e:	f04f 0301 	mov.w	r3, #1
    4632:	e001      	b.n	4638 <ASCII_ToUpper+0x20>
    4634:	f04f 0300 	mov.w	r3, #0
    4638:	2b01      	cmp	r3, #1
    463a:	d104      	bne.n	4646 <ASCII_ToUpper+0x2e>
    463c:	79fb      	ldrb	r3, [r7, #7]
    463e:	f1a3 0320 	sub.w	r3, r3, #32
    4642:	b2db      	uxtb	r3, r3
    4644:	e000      	b.n	4648 <ASCII_ToUpper+0x30>
    4646:	79fb      	ldrb	r3, [r7, #7]
    4648:	73fb      	strb	r3, [r7, #15]

    return (upper);
    464a:	7bfb      	ldrb	r3, [r7, #15]
}
    464c:	4618      	mov	r0, r3
    464e:	f107 0714 	add.w	r7, r7, #20
    4652:	46bd      	mov	sp, r7
    4654:	bc80      	pop	{r7}
    4656:	4770      	bx	lr

00004658 <ASCII_Cmp>:
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_Cmp (CPU_CHAR  c1,
                        CPU_CHAR  c2)
{
    4658:	b580      	push	{r7, lr}
    465a:	b084      	sub	sp, #16
    465c:	af00      	add	r7, sp, #0
    465e:	4602      	mov	r2, r0
    4660:	460b      	mov	r3, r1
    4662:	71fa      	strb	r2, [r7, #7]
    4664:	71bb      	strb	r3, [r7, #6]
    CPU_CHAR     c1_upper;
    CPU_CHAR     c2_upper;
    CPU_BOOLEAN  cmp;


    c1_upper =  ASCII_ToUpper(c1);
    4666:	79fb      	ldrb	r3, [r7, #7]
    4668:	4618      	mov	r0, r3
    466a:	f7ff ffd5 	bl	4618 <ASCII_ToUpper>
    466e:	4603      	mov	r3, r0
    4670:	73fb      	strb	r3, [r7, #15]
    c2_upper =  ASCII_ToUpper(c2);
    4672:	79bb      	ldrb	r3, [r7, #6]
    4674:	4618      	mov	r0, r3
    4676:	f7ff ffcf 	bl	4618 <ASCII_ToUpper>
    467a:	4603      	mov	r3, r0
    467c:	73bb      	strb	r3, [r7, #14]
    cmp      = (c1_upper == c2_upper) ? (DEF_YES) : (DEF_NO);
    467e:	7bfa      	ldrb	r2, [r7, #15]
    4680:	7bbb      	ldrb	r3, [r7, #14]
    4682:	429a      	cmp	r2, r3
    4684:	bf14      	ite	ne
    4686:	2300      	movne	r3, #0
    4688:	2301      	moveq	r3, #1
    468a:	737b      	strb	r3, [r7, #13]

    return (cmp);
    468c:	7b7b      	ldrb	r3, [r7, #13]
}
    468e:	4618      	mov	r0, r3
    4690:	f107 0710 	add.w	r7, r7, #16
    4694:	46bd      	mov	sp, r7
    4696:	bd80      	pop	{r7, pc}

00004698 <Str_Len>:
*                           the NULL character (see Note #2a2).
*********************************************************************************************************
*/

CPU_SIZE_T  Str_Len (const  CPU_CHAR  *pstr)
{
    4698:	b580      	push	{r7, lr}
    469a:	b084      	sub	sp, #16
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
    CPU_SIZE_T  len;


    len = Str_Len_N(pstr,
    46a0:	6878      	ldr	r0, [r7, #4]
    46a2:	f04f 31ff 	mov.w	r1, #4294967295
    46a6:	f000 f807 	bl	46b8 <Str_Len_N>
    46aa:	60f8      	str	r0, [r7, #12]
                    DEF_INT_CPU_U_MAX_VAL);

    return (len);
    46ac:	68fb      	ldr	r3, [r7, #12]
}
    46ae:	4618      	mov	r0, r3
    46b0:	f107 0710 	add.w	r7, r7, #16
    46b4:	46bd      	mov	sp, r7
    46b6:	bd80      	pop	{r7, pc}

000046b8 <Str_Len_N>:
*********************************************************************************************************
*/

CPU_SIZE_T  Str_Len_N (const  CPU_CHAR    *pstr,
                              CPU_SIZE_T   len_max)
{
    46b8:	b480      	push	{r7}
    46ba:	b085      	sub	sp, #20
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
    46c0:	6039      	str	r1, [r7, #0]
    const  CPU_CHAR    *pstr_len;
           CPU_SIZE_T   len;


    pstr_len = pstr;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	60fb      	str	r3, [r7, #12]
    len      = 0u;
    46c6:	f04f 0300 	mov.w	r3, #0
    46ca:	60bb      	str	r3, [r7, #8]
    while (( pstr_len != (const CPU_CHAR *)  0 ) &&             /* Calc str len until NULL ptr (see Note #3a) ...       */
    46cc:	e007      	b.n	46de <Str_Len_N+0x26>
           (*pstr_len != (      CPU_CHAR  )'\0') &&             /* ... or NULL char found      (see Note #3b) ...       */
           ( len      <  (      CPU_SIZE_T)len_max)) {          /* ... or max nbr chars srch'd (see Note #3c).          */
        pstr_len++;
    46ce:	68fb      	ldr	r3, [r7, #12]
    46d0:	f103 0301 	add.w	r3, r3, #1
    46d4:	60fb      	str	r3, [r7, #12]
        len++;
    46d6:	68bb      	ldr	r3, [r7, #8]
    46d8:	f103 0301 	add.w	r3, r3, #1
    46dc:	60bb      	str	r3, [r7, #8]
           CPU_SIZE_T   len;


    pstr_len = pstr;
    len      = 0u;
    while (( pstr_len != (const CPU_CHAR *)  0 ) &&             /* Calc str len until NULL ptr (see Note #3a) ...       */
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d007      	beq.n	46f4 <Str_Len_N+0x3c>
           (*pstr_len != (      CPU_CHAR  )'\0') &&             /* ... or NULL char found      (see Note #3b) ...       */
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	781b      	ldrb	r3, [r3, #0]
           CPU_SIZE_T   len;


    pstr_len = pstr;
    len      = 0u;
    while (( pstr_len != (const CPU_CHAR *)  0 ) &&             /* Calc str len until NULL ptr (see Note #3a) ...       */
    46e8:	2b00      	cmp	r3, #0
    46ea:	d003      	beq.n	46f4 <Str_Len_N+0x3c>
           (*pstr_len != (      CPU_CHAR  )'\0') &&             /* ... or NULL char found      (see Note #3b) ...       */
    46ec:	68ba      	ldr	r2, [r7, #8]
    46ee:	683b      	ldr	r3, [r7, #0]
    46f0:	429a      	cmp	r2, r3
    46f2:	d3ec      	bcc.n	46ce <Str_Len_N+0x16>
           ( len      <  (      CPU_SIZE_T)len_max)) {          /* ... or max nbr chars srch'd (see Note #3c).          */
        pstr_len++;
        len++;
    }

    return (len);                                               /* Rtn str len (see Note #3b1).                         */
    46f4:	68bb      	ldr	r3, [r7, #8]
}
    46f6:	4618      	mov	r0, r3
    46f8:	f107 0714 	add.w	r7, r7, #20
    46fc:	46bd      	mov	sp, r7
    46fe:	bc80      	pop	{r7}
    4700:	4770      	bx	lr
    4702:	bf00      	nop

00004704 <Str_Copy>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Copy (       CPU_CHAR  *pstr_dest,
                     const  CPU_CHAR  *pstr_src)
{
    4704:	b580      	push	{r7, lr}
    4706:	b084      	sub	sp, #16
    4708:	af00      	add	r7, sp, #0
    470a:	6078      	str	r0, [r7, #4]
    470c:	6039      	str	r1, [r7, #0]
    CPU_CHAR  *pstr_rtn;


    pstr_rtn = Str_Copy_N(pstr_dest,
    470e:	6878      	ldr	r0, [r7, #4]
    4710:	6839      	ldr	r1, [r7, #0]
    4712:	f04f 32ff 	mov.w	r2, #4294967295
    4716:	f000 f807 	bl	4728 <Str_Copy_N>
    471a:	60f8      	str	r0, [r7, #12]
                          pstr_src,
                          DEF_INT_CPU_U_MAX_VAL);

    return (pstr_rtn);
    471c:	68fb      	ldr	r3, [r7, #12]
}
    471e:	4618      	mov	r0, r3
    4720:	f107 0710 	add.w	r7, r7, #16
    4724:	46bd      	mov	sp, r7
    4726:	bd80      	pop	{r7, pc}

00004728 <Str_Copy_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Copy_N (       CPU_CHAR    *pstr_dest,
                       const  CPU_CHAR    *pstr_src,
                              CPU_SIZE_T   len_max)
{
    4728:	b480      	push	{r7}
    472a:	b089      	sub	sp, #36	; 0x24
    472c:	af00      	add	r7, sp, #0
    472e:	60f8      	str	r0, [r7, #12]
    4730:	60b9      	str	r1, [r7, #8]
    4732:	607a      	str	r2, [r7, #4]
           CPU_CHAR    *pstr_copy_dest;
    const  CPU_CHAR    *pstr_copy_src;
           CPU_SIZE_T   len_copy;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
    if (pstr_dest == (CPU_CHAR *)0) {
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	2b00      	cmp	r3, #0
    4738:	d102      	bne.n	4740 <Str_Copy_N+0x18>
        return ((CPU_CHAR *)0);
    473a:	f04f 0300 	mov.w	r3, #0
    473e:	e03d      	b.n	47bc <Str_Copy_N+0x94>
    }
    if (pstr_src  == (const CPU_CHAR *)0) {
    4740:	68bb      	ldr	r3, [r7, #8]
    4742:	2b00      	cmp	r3, #0
    4744:	d102      	bne.n	474c <Str_Copy_N+0x24>
        return ((CPU_CHAR *)0);
    4746:	f04f 0300 	mov.w	r3, #0
    474a:	e037      	b.n	47bc <Str_Copy_N+0x94>
    }


    pstr_copy_dest = pstr_dest;
    474c:	68fb      	ldr	r3, [r7, #12]
    474e:	61fb      	str	r3, [r7, #28]
    pstr_copy_src  = pstr_src;
    4750:	68bb      	ldr	r3, [r7, #8]
    4752:	61bb      	str	r3, [r7, #24]
    len_copy       = 0u;
    4754:	f04f 0300 	mov.w	r3, #0
    4758:	617b      	str	r3, [r7, #20]

    while (( pstr_copy_dest != (      CPU_CHAR *)  0 ) &&       /* Copy str until NULL ptr(s)  [see Note #3b]  ...      */
    475a:	e00f      	b.n	477c <Str_Copy_N+0x54>
           ( pstr_copy_src  != (const CPU_CHAR *)  0 ) &&
           (*pstr_copy_src  != (      CPU_CHAR  )'\0') &&       /* ... or NULL char found      (see Note #3c); ...      */
           ( len_copy       <  (      CPU_SIZE_T)len_max)) {    /* ... or max nbr chars copied (see Note #3d).          */
       *pstr_copy_dest = *pstr_copy_src;
    475c:	69bb      	ldr	r3, [r7, #24]
    475e:	781a      	ldrb	r2, [r3, #0]
    4760:	69fb      	ldr	r3, [r7, #28]
    4762:	701a      	strb	r2, [r3, #0]
        pstr_copy_dest++;
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	f103 0301 	add.w	r3, r3, #1
    476a:	61fb      	str	r3, [r7, #28]
        pstr_copy_src++;
    476c:	69bb      	ldr	r3, [r7, #24]
    476e:	f103 0301 	add.w	r3, r3, #1
    4772:	61bb      	str	r3, [r7, #24]
        len_copy++;
    4774:	697b      	ldr	r3, [r7, #20]
    4776:	f103 0301 	add.w	r3, r3, #1
    477a:	617b      	str	r3, [r7, #20]

    pstr_copy_dest = pstr_dest;
    pstr_copy_src  = pstr_src;
    len_copy       = 0u;

    while (( pstr_copy_dest != (      CPU_CHAR *)  0 ) &&       /* Copy str until NULL ptr(s)  [see Note #3b]  ...      */
    477c:	69fb      	ldr	r3, [r7, #28]
    477e:	2b00      	cmp	r3, #0
    4780:	d00a      	beq.n	4798 <Str_Copy_N+0x70>
    4782:	69bb      	ldr	r3, [r7, #24]
    4784:	2b00      	cmp	r3, #0
    4786:	d007      	beq.n	4798 <Str_Copy_N+0x70>
           ( pstr_copy_src  != (const CPU_CHAR *)  0 ) &&
           (*pstr_copy_src  != (      CPU_CHAR  )'\0') &&       /* ... or NULL char found      (see Note #3c); ...      */
    4788:	69bb      	ldr	r3, [r7, #24]
    478a:	781b      	ldrb	r3, [r3, #0]
    pstr_copy_dest = pstr_dest;
    pstr_copy_src  = pstr_src;
    len_copy       = 0u;

    while (( pstr_copy_dest != (      CPU_CHAR *)  0 ) &&       /* Copy str until NULL ptr(s)  [see Note #3b]  ...      */
           ( pstr_copy_src  != (const CPU_CHAR *)  0 ) &&
    478c:	2b00      	cmp	r3, #0
    478e:	d003      	beq.n	4798 <Str_Copy_N+0x70>
           (*pstr_copy_src  != (      CPU_CHAR  )'\0') &&       /* ... or NULL char found      (see Note #3c); ...      */
    4790:	697a      	ldr	r2, [r7, #20]
    4792:	687b      	ldr	r3, [r7, #4]
    4794:	429a      	cmp	r2, r3
    4796:	d3e1      	bcc.n	475c <Str_Copy_N+0x34>
        pstr_copy_dest++;
        pstr_copy_src++;
        len_copy++;
    }
                                                                /* Rtn NULL if NULL ptr(s) found  (see Note #3b1).      */
    if ((pstr_copy_dest == (      CPU_CHAR *)0) ||
    4798:	69fb      	ldr	r3, [r7, #28]
    479a:	2b00      	cmp	r3, #0
    479c:	d002      	beq.n	47a4 <Str_Copy_N+0x7c>
    479e:	69bb      	ldr	r3, [r7, #24]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d102      	bne.n	47aa <Str_Copy_N+0x82>
        (pstr_copy_src  == (const CPU_CHAR *)0)) {
         return ((CPU_CHAR *)0);
    47a4:	f04f 0300 	mov.w	r3, #0
    47a8:	e008      	b.n	47bc <Str_Copy_N+0x94>
    }

    if (len_copy < len_max) {                                   /* If  copy str len < max buf len (see Note #2a2A), ... */
    47aa:	697a      	ldr	r2, [r7, #20]
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	429a      	cmp	r2, r3
    47b0:	d203      	bcs.n	47ba <Str_Copy_N+0x92>
       *pstr_copy_dest = (CPU_CHAR)'\0';                        /* ... copy NULL char  (see Note #3c1).                 */
    47b2:	69fb      	ldr	r3, [r7, #28]
    47b4:	f04f 0200 	mov.w	r2, #0
    47b8:	701a      	strb	r2, [r3, #0]
    }


    return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
    47ba:	68fb      	ldr	r3, [r7, #12]
}
    47bc:	4618      	mov	r0, r3
    47be:	f107 0724 	add.w	r7, r7, #36	; 0x24
    47c2:	46bd      	mov	sp, r7
    47c4:	bc80      	pop	{r7}
    47c6:	4770      	bx	lr

000047c8 <Str_Cat>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Cat (       CPU_CHAR  *pstr_dest,
                    const  CPU_CHAR  *pstr_cat)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b084      	sub	sp, #16
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
    CPU_CHAR  *pstr_rtn;

    
    pstr_rtn = Str_Cat_N(pstr_dest,
    47d2:	6878      	ldr	r0, [r7, #4]
    47d4:	6839      	ldr	r1, [r7, #0]
    47d6:	f04f 32ff 	mov.w	r2, #4294967295
    47da:	f000 f807 	bl	47ec <Str_Cat_N>
    47de:	60f8      	str	r0, [r7, #12]
                         pstr_cat,
                         DEF_INT_CPU_U_MAX_VAL);

    return (pstr_rtn);
    47e0:	68fb      	ldr	r3, [r7, #12]
}
    47e2:	4618      	mov	r0, r3
    47e4:	f107 0710 	add.w	r7, r7, #16
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}

000047ec <Str_Cat_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Cat_N (       CPU_CHAR    *pstr_dest,
                      const  CPU_CHAR    *pstr_cat,
                             CPU_SIZE_T   len_max)
{
    47ec:	b480      	push	{r7}
    47ee:	b089      	sub	sp, #36	; 0x24
    47f0:	af00      	add	r7, sp, #0
    47f2:	60f8      	str	r0, [r7, #12]
    47f4:	60b9      	str	r1, [r7, #8]
    47f6:	607a      	str	r2, [r7, #4]
           CPU_CHAR    *pstr_cat_dest;
    const  CPU_CHAR    *pstr_cat_src;
           CPU_SIZE_T   len_cat;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
    if (pstr_dest == (CPU_CHAR *)0) {
    47f8:	68fb      	ldr	r3, [r7, #12]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d102      	bne.n	4804 <Str_Cat_N+0x18>
        return ((CPU_CHAR *)0);
    47fe:	f04f 0300 	mov.w	r3, #0
    4802:	e050      	b.n	48a6 <Str_Cat_N+0xba>
    }
    if (pstr_cat  == (const CPU_CHAR *)0) {
    4804:	68bb      	ldr	r3, [r7, #8]
    4806:	2b00      	cmp	r3, #0
    4808:	d102      	bne.n	4810 <Str_Cat_N+0x24>
        return ((CPU_CHAR *)0);
    480a:	f04f 0300 	mov.w	r3, #0
    480e:	e04a      	b.n	48a6 <Str_Cat_N+0xba>
    }

    if (len_max == 0) {                                         /* Rtn dest str if cat len = 0 (see Note #3d2A).        */
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	2b00      	cmp	r3, #0
    4814:	d101      	bne.n	481a <Str_Cat_N+0x2e>
        return ((CPU_CHAR *)pstr_dest);
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	e045      	b.n	48a6 <Str_Cat_N+0xba>
    }


    pstr_cat_dest = pstr_dest;
    481a:	68fb      	ldr	r3, [r7, #12]
    481c:	61fb      	str	r3, [r7, #28]
    while (( pstr_cat_dest != (CPU_CHAR *)  0 ) &&              /* Adv to end of cur dest str until NULL ptr ...        */
    481e:	e003      	b.n	4828 <Str_Cat_N+0x3c>
           (*pstr_cat_dest != (CPU_CHAR  )'\0')) {              /* ... or NULL char found..                             */
        pstr_cat_dest++;
    4820:	69fb      	ldr	r3, [r7, #28]
    4822:	f103 0301 	add.w	r3, r3, #1
    4826:	61fb      	str	r3, [r7, #28]
        return ((CPU_CHAR *)pstr_dest);
    }


    pstr_cat_dest = pstr_dest;
    while (( pstr_cat_dest != (CPU_CHAR *)  0 ) &&              /* Adv to end of cur dest str until NULL ptr ...        */
    4828:	69fb      	ldr	r3, [r7, #28]
    482a:	2b00      	cmp	r3, #0
    482c:	d003      	beq.n	4836 <Str_Cat_N+0x4a>
           (*pstr_cat_dest != (CPU_CHAR  )'\0')) {              /* ... or NULL char found..                             */
    482e:	69fb      	ldr	r3, [r7, #28]
    4830:	781b      	ldrb	r3, [r3, #0]
        return ((CPU_CHAR *)pstr_dest);
    }


    pstr_cat_dest = pstr_dest;
    while (( pstr_cat_dest != (CPU_CHAR *)  0 ) &&              /* Adv to end of cur dest str until NULL ptr ...        */
    4832:	2b00      	cmp	r3, #0
    4834:	d1f4      	bne.n	4820 <Str_Cat_N+0x34>
           (*pstr_cat_dest != (CPU_CHAR  )'\0')) {              /* ... or NULL char found..                             */
        pstr_cat_dest++;
    }
    if (pstr_cat_dest == (CPU_CHAR *)0) {                       /* Rtn NULL if NULL ptr found (see Note #3b1).          */
    4836:	69fb      	ldr	r3, [r7, #28]
    4838:	2b00      	cmp	r3, #0
    483a:	d102      	bne.n	4842 <Str_Cat_N+0x56>
        return ((CPU_CHAR *)0);
    483c:	f04f 0300 	mov.w	r3, #0
    4840:	e031      	b.n	48a6 <Str_Cat_N+0xba>
    }

    pstr_cat_src = pstr_cat;
    4842:	68bb      	ldr	r3, [r7, #8]
    4844:	61bb      	str	r3, [r7, #24]
    len_cat      = 0u;
    4846:	f04f 0300 	mov.w	r3, #0
    484a:	617b      	str	r3, [r7, #20]

    while (( pstr_cat_dest != (      CPU_CHAR *)  0 ) &&        /* Cat str until NULL ptr(s)  [see Note #3b]  ...       */
    484c:	e00f      	b.n	486e <Str_Cat_N+0x82>
           ( pstr_cat_src  != (const CPU_CHAR *)  0 ) &&
           (*pstr_cat_src  != (      CPU_CHAR  )'\0') &&        /* ... or NULL char found     (see Note #3c); ...       */
           ( len_cat       <  (      CPU_SIZE_T)len_max)) {     /* ... or max nbr chars cat'd (see Note #3d).           */
       *pstr_cat_dest = *pstr_cat_src;
    484e:	69bb      	ldr	r3, [r7, #24]
    4850:	781a      	ldrb	r2, [r3, #0]
    4852:	69fb      	ldr	r3, [r7, #28]
    4854:	701a      	strb	r2, [r3, #0]
        pstr_cat_dest++;
    4856:	69fb      	ldr	r3, [r7, #28]
    4858:	f103 0301 	add.w	r3, r3, #1
    485c:	61fb      	str	r3, [r7, #28]
        pstr_cat_src++;
    485e:	69bb      	ldr	r3, [r7, #24]
    4860:	f103 0301 	add.w	r3, r3, #1
    4864:	61bb      	str	r3, [r7, #24]
        len_cat++;
    4866:	697b      	ldr	r3, [r7, #20]
    4868:	f103 0301 	add.w	r3, r3, #1
    486c:	617b      	str	r3, [r7, #20]
    }

    pstr_cat_src = pstr_cat;
    len_cat      = 0u;

    while (( pstr_cat_dest != (      CPU_CHAR *)  0 ) &&        /* Cat str until NULL ptr(s)  [see Note #3b]  ...       */
    486e:	69fb      	ldr	r3, [r7, #28]
    4870:	2b00      	cmp	r3, #0
    4872:	d00a      	beq.n	488a <Str_Cat_N+0x9e>
    4874:	69bb      	ldr	r3, [r7, #24]
    4876:	2b00      	cmp	r3, #0
    4878:	d007      	beq.n	488a <Str_Cat_N+0x9e>
           ( pstr_cat_src  != (const CPU_CHAR *)  0 ) &&
           (*pstr_cat_src  != (      CPU_CHAR  )'\0') &&        /* ... or NULL char found     (see Note #3c); ...       */
    487a:	69bb      	ldr	r3, [r7, #24]
    487c:	781b      	ldrb	r3, [r3, #0]

    pstr_cat_src = pstr_cat;
    len_cat      = 0u;

    while (( pstr_cat_dest != (      CPU_CHAR *)  0 ) &&        /* Cat str until NULL ptr(s)  [see Note #3b]  ...       */
           ( pstr_cat_src  != (const CPU_CHAR *)  0 ) &&
    487e:	2b00      	cmp	r3, #0
    4880:	d003      	beq.n	488a <Str_Cat_N+0x9e>
           (*pstr_cat_src  != (      CPU_CHAR  )'\0') &&        /* ... or NULL char found     (see Note #3c); ...       */
    4882:	697a      	ldr	r2, [r7, #20]
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	429a      	cmp	r2, r3
    4888:	d3e1      	bcc.n	484e <Str_Cat_N+0x62>
        pstr_cat_dest++;
        pstr_cat_src++;
        len_cat++;
    }
                                                                /* Rtn NULL if NULL ptr(s) found (see Note #3b1).       */
    if ((pstr_cat_dest == (      CPU_CHAR *)0) ||
    488a:	69fb      	ldr	r3, [r7, #28]
    488c:	2b00      	cmp	r3, #0
    488e:	d002      	beq.n	4896 <Str_Cat_N+0xaa>
    4890:	69bb      	ldr	r3, [r7, #24]
    4892:	2b00      	cmp	r3, #0
    4894:	d102      	bne.n	489c <Str_Cat_N+0xb0>
        (pstr_cat_src  == (const CPU_CHAR *)0)) {
         return ((CPU_CHAR *)0);
    4896:	f04f 0300 	mov.w	r3, #0
    489a:	e004      	b.n	48a6 <Str_Cat_N+0xba>
    }

   *pstr_cat_dest = (CPU_CHAR)'\0';                             /* Append NULL char    (see Note #2a2C).                */
    489c:	69fb      	ldr	r3, [r7, #28]
    489e:	f04f 0200 	mov.w	r2, #0
    48a2:	701a      	strb	r2, [r3, #0]


    return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
    48a4:	68fb      	ldr	r3, [r7, #12]
}
    48a6:	4618      	mov	r0, r3
    48a8:	f107 0724 	add.w	r7, r7, #36	; 0x24
    48ac:	46bd      	mov	sp, r7
    48ae:	bc80      	pop	{r7}
    48b0:	4770      	bx	lr
    48b2:	bf00      	nop

000048b4 <Str_Cmp>:
*********************************************************************************************************
*/

CPU_INT16S  Str_Cmp (const  CPU_CHAR  *p1_str,
                     const  CPU_CHAR  *p2_str)
{
    48b4:	b580      	push	{r7, lr}
    48b6:	b084      	sub	sp, #16
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
    48bc:	6039      	str	r1, [r7, #0]
    CPU_INT16S  cmp_val;


    cmp_val = Str_Cmp_N(p1_str,
    48be:	6878      	ldr	r0, [r7, #4]
    48c0:	6839      	ldr	r1, [r7, #0]
    48c2:	f04f 32ff 	mov.w	r2, #4294967295
    48c6:	f000 f809 	bl	48dc <Str_Cmp_N>
    48ca:	4603      	mov	r3, r0
    48cc:	81fb      	strh	r3, [r7, #14]
                        p2_str,
                        DEF_INT_CPU_U_MAX_VAL);

    return (cmp_val);
    48ce:	89fb      	ldrh	r3, [r7, #14]
    48d0:	b21b      	sxth	r3, r3
}
    48d2:	4618      	mov	r0, r3
    48d4:	f107 0710 	add.w	r7, r7, #16
    48d8:	46bd      	mov	sp, r7
    48da:	bd80      	pop	{r7, pc}

000048dc <Str_Cmp_N>:
*/
/*$PAGE*/
CPU_INT16S  Str_Cmp_N (const  CPU_CHAR    *p1_str,
                       const  CPU_CHAR    *p2_str,
                              CPU_SIZE_T   len_max)
{
    48dc:	b480      	push	{r7}
    48de:	b08b      	sub	sp, #44	; 0x2c
    48e0:	af00      	add	r7, sp, #0
    48e2:	60f8      	str	r0, [r7, #12]
    48e4:	60b9      	str	r1, [r7, #8]
    48e6:	607a      	str	r2, [r7, #4]
    const  CPU_CHAR    *p2_str_cmp_next;
           CPU_INT16S   cmp_val;
           CPU_SIZE_T   cmp_len;


    if (len_max == 0) {                                         /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d102      	bne.n	48f4 <Str_Cmp_N+0x18>
        return (0);
    48ee:	f04f 0300 	mov.w	r3, #0
    48f2:	e087      	b.n	4a04 <Str_Cmp_N+0x128>
    }

    if (p1_str == (const CPU_CHAR *)0) {
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d10d      	bne.n	4916 <Str_Cmp_N+0x3a>
        if (p2_str == (const CPU_CHAR *)0) {
    48fa:	68bb      	ldr	r3, [r7, #8]
    48fc:	2b00      	cmp	r3, #0
    48fe:	d102      	bne.n	4906 <Str_Cmp_N+0x2a>
            return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
    4900:	f04f 0300 	mov.w	r3, #0
    4904:	e07e      	b.n	4a04 <Str_Cmp_N+0x128>
        }
        cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
    4906:	68bb      	ldr	r3, [r7, #8]
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	f1c3 0300 	rsb	r3, r3, #0
    490e:	b29b      	uxth	r3, r3
    4910:	82fb      	strh	r3, [r7, #22]
        return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
    4912:	8afb      	ldrh	r3, [r7, #22]
    4914:	e076      	b.n	4a04 <Str_Cmp_N+0x128>
    }
    if (p2_str == (const CPU_CHAR *)0) {
    4916:	68bb      	ldr	r3, [r7, #8]
    4918:	2b00      	cmp	r3, #0
    491a:	d104      	bne.n	4926 <Str_Cmp_N+0x4a>
        cmp_val = (CPU_INT16S)(*p1_str);
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	82fb      	strh	r3, [r7, #22]
        return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
    4922:	8afb      	ldrh	r3, [r7, #22]
    4924:	e06e      	b.n	4a04 <Str_Cmp_N+0x128>
    }


    p1_str_cmp      = p1_str;
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	627b      	str	r3, [r7, #36]	; 0x24
    p2_str_cmp      = p2_str;
    492a:	68bb      	ldr	r3, [r7, #8]
    492c:	623b      	str	r3, [r7, #32]
    p1_str_cmp_next = p1_str_cmp;
    492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4930:	61fb      	str	r3, [r7, #28]
    p2_str_cmp_next = p2_str_cmp;
    4932:	6a3b      	ldr	r3, [r7, #32]
    4934:	61bb      	str	r3, [r7, #24]
    p1_str_cmp_next++;
    4936:	69fb      	ldr	r3, [r7, #28]
    4938:	f103 0301 	add.w	r3, r3, #1
    493c:	61fb      	str	r3, [r7, #28]
    p2_str_cmp_next++;
    493e:	69bb      	ldr	r3, [r7, #24]
    4940:	f103 0301 	add.w	r3, r3, #1
    4944:	61bb      	str	r3, [r7, #24]
    cmp_len         = 0u;
    4946:	f04f 0300 	mov.w	r3, #0
    494a:	613b      	str	r3, [r7, #16]

    while ((*p1_str_cmp      == *p2_str_cmp)      &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    494c:	e013      	b.n	4976 <Str_Cmp_N+0x9a>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
           ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2);   */
           ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
           ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
        p1_str_cmp++;
    494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4950:	f103 0301 	add.w	r3, r3, #1
    4954:	627b      	str	r3, [r7, #36]	; 0x24
        p2_str_cmp++;
    4956:	6a3b      	ldr	r3, [r7, #32]
    4958:	f103 0301 	add.w	r3, r3, #1
    495c:	623b      	str	r3, [r7, #32]
        p1_str_cmp_next++;
    495e:	69fb      	ldr	r3, [r7, #28]
    4960:	f103 0301 	add.w	r3, r3, #1
    4964:	61fb      	str	r3, [r7, #28]
        p2_str_cmp_next++;
    4966:	69bb      	ldr	r3, [r7, #24]
    4968:	f103 0301 	add.w	r3, r3, #1
    496c:	61bb      	str	r3, [r7, #24]
        cmp_len++;
    496e:	693b      	ldr	r3, [r7, #16]
    4970:	f103 0301 	add.w	r3, r3, #1
    4974:	613b      	str	r3, [r7, #16]
    p2_str_cmp_next = p2_str_cmp;
    p1_str_cmp_next++;
    p2_str_cmp_next++;
    cmp_len         = 0u;

    while ((*p1_str_cmp      == *p2_str_cmp)      &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    4976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4978:	781a      	ldrb	r2, [r3, #0]
    497a:	6a3b      	ldr	r3, [r7, #32]
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	429a      	cmp	r2, r3
    4980:	d10d      	bne.n	499e <Str_Cmp_N+0xc2>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
    4982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4984:	781b      	ldrb	r3, [r3, #0]
    p2_str_cmp_next = p2_str_cmp;
    p1_str_cmp_next++;
    p2_str_cmp_next++;
    cmp_len         = 0u;

    while ((*p1_str_cmp      == *p2_str_cmp)      &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    4986:	2b00      	cmp	r3, #0
    4988:	d009      	beq.n	499e <Str_Cmp_N+0xc2>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
    498a:	69fb      	ldr	r3, [r7, #28]
    498c:	2b00      	cmp	r3, #0
    498e:	d006      	beq.n	499e <Str_Cmp_N+0xc2>
           ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2);   */
    4990:	69bb      	ldr	r3, [r7, #24]
    4992:	2b00      	cmp	r3, #0
    4994:	d003      	beq.n	499e <Str_Cmp_N+0xc2>
           ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
    4996:	693a      	ldr	r2, [r7, #16]
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	429a      	cmp	r2, r3
    499c:	d3d7      	bcc.n	494e <Str_Cmp_N+0x72>
        p2_str_cmp_next++;
        cmp_len++;
    }


    if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
    499e:	693a      	ldr	r2, [r7, #16]
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	429a      	cmp	r2, r3
    49a4:	d102      	bne.n	49ac <Str_Cmp_N+0xd0>
        return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
    49a6:	f04f 0300 	mov.w	r3, #0
    49aa:	e02b      	b.n	4a04 <Str_Cmp_N+0x128>
    }

    if (*p1_str_cmp != *p2_str_cmp) {                           /* If strs NOT identical, ...                           */
    49ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ae:	781a      	ldrb	r2, [r3, #0]
    49b0:	6a3b      	ldr	r3, [r7, #32]
    49b2:	781b      	ldrb	r3, [r3, #0]
    49b4:	429a      	cmp	r2, r3
    49b6:	d008      	beq.n	49ca <Str_Cmp_N+0xee>
                                                                /* ... calc & rtn char diff  (see Note #3c1).           */
         cmp_val = (CPU_INT16S)(*p1_str_cmp) - (CPU_INT16S)(*p2_str_cmp);
    49b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	461a      	mov	r2, r3
    49be:	6a3b      	ldr	r3, [r7, #32]
    49c0:	781b      	ldrb	r3, [r3, #0]
    49c2:	1ad3      	subs	r3, r2, r3
    49c4:	b29b      	uxth	r3, r3
    49c6:	82fb      	strh	r3, [r7, #22]
    49c8:	e01b      	b.n	4a02 <Str_Cmp_N+0x126>

    } else if (*p1_str_cmp  == (CPU_CHAR)'\0') {                /* If NULL char(s) found, ...                           */
    49ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	2b00      	cmp	r3, #0
    49d0:	d103      	bne.n	49da <Str_Cmp_N+0xfe>
         cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
    49d2:	f04f 0300 	mov.w	r3, #0
    49d6:	82fb      	strh	r3, [r7, #22]
    49d8:	e013      	b.n	4a02 <Str_Cmp_N+0x126>

    } else {
        if (p1_str_cmp_next == (const CPU_CHAR *)0) {
    49da:	69fb      	ldr	r3, [r7, #28]
    49dc:	2b00      	cmp	r3, #0
    49de:	d10d      	bne.n	49fc <Str_Cmp_N+0x120>
            if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
    49e0:	69bb      	ldr	r3, [r7, #24]
    49e2:	2b00      	cmp	r3, #0
    49e4:	d103      	bne.n	49ee <Str_Cmp_N+0x112>
                cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
    49e6:	f04f 0300 	mov.w	r3, #0
    49ea:	82fb      	strh	r3, [r7, #22]
    49ec:	e009      	b.n	4a02 <Str_Cmp_N+0x126>
            } else {                                            /* If p1_str_cmp_next NULL, ...                         */
                                                                /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
                cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_cmp_next);
    49ee:	69bb      	ldr	r3, [r7, #24]
    49f0:	781b      	ldrb	r3, [r3, #0]
    49f2:	f1c3 0300 	rsb	r3, r3, #0
    49f6:	b29b      	uxth	r3, r3
    49f8:	82fb      	strh	r3, [r7, #22]
    49fa:	e002      	b.n	4a02 <Str_Cmp_N+0x126>
            }
        } else {                                                /* If p2_str_cmp_next NULL, ...                         */
            cmp_val = (CPU_INT16S)(*p1_str_cmp_next);           /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
    49fc:	69fb      	ldr	r3, [r7, #28]
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	82fb      	strh	r3, [r7, #22]
        }
    }


    return (cmp_val);
    4a02:	8afb      	ldrh	r3, [r7, #22]
    4a04:	b21b      	sxth	r3, r3
}
    4a06:	4618      	mov	r0, r3
    4a08:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    4a0c:	46bd      	mov	sp, r7
    4a0e:	bc80      	pop	{r7}
    4a10:	4770      	bx	lr
    4a12:	bf00      	nop

00004a14 <Str_CmpIgnoreCase>:
*********************************************************************************************************
*/
/*$PAGE*/
CPU_INT16S  Str_CmpIgnoreCase (const  CPU_CHAR  *p1_str,
                               const  CPU_CHAR  *p2_str)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	b084      	sub	sp, #16
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
    4a1c:	6039      	str	r1, [r7, #0]
    CPU_INT16S  cmp_val;


    cmp_val = Str_CmpIgnoreCase_N(p1_str,
    4a1e:	6878      	ldr	r0, [r7, #4]
    4a20:	6839      	ldr	r1, [r7, #0]
    4a22:	f04f 32ff 	mov.w	r2, #4294967295
    4a26:	f000 f809 	bl	4a3c <Str_CmpIgnoreCase_N>
    4a2a:	4603      	mov	r3, r0
    4a2c:	81fb      	strh	r3, [r7, #14]
                                  p2_str,
                                  DEF_INT_CPU_U_MAX_VAL);

    return (cmp_val);
    4a2e:	89fb      	ldrh	r3, [r7, #14]
    4a30:	b21b      	sxth	r3, r3
}
    4a32:	4618      	mov	r0, r3
    4a34:	f107 0710 	add.w	r7, r7, #16
    4a38:	46bd      	mov	sp, r7
    4a3a:	bd80      	pop	{r7, pc}

00004a3c <Str_CmpIgnoreCase_N>:
*/

CPU_INT16S  Str_CmpIgnoreCase_N (const  CPU_CHAR    *p1_str,
                                 const  CPU_CHAR    *p2_str,
                                        CPU_SIZE_T   len_max)
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b08a      	sub	sp, #40	; 0x28
    4a40:	af00      	add	r7, sp, #0
    4a42:	60f8      	str	r0, [r7, #12]
    4a44:	60b9      	str	r1, [r7, #8]
    4a46:	607a      	str	r2, [r7, #4]
           CPU_CHAR     char_2;
           CPU_INT16S   cmp_val;
           CPU_SIZE_T   cmp_len;


    if (len_max == 0) {                                         /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d102      	bne.n	4a54 <Str_CmpIgnoreCase_N+0x18>
        return (0);
    4a4e:	f04f 0300 	mov.w	r3, #0
    4a52:	e0b7      	b.n	4bc4 <Str_CmpIgnoreCase_N+0x188>
    }

    if (p1_str == (const CPU_CHAR *)0) {
    4a54:	68fb      	ldr	r3, [r7, #12]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d114      	bne.n	4a84 <Str_CmpIgnoreCase_N+0x48>
        if (p2_str == (const CPU_CHAR *)0) {
    4a5a:	68bb      	ldr	r3, [r7, #8]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d102      	bne.n	4a66 <Str_CmpIgnoreCase_N+0x2a>
            return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
    4a60:	f04f 0300 	mov.w	r3, #0
    4a64:	e0ae      	b.n	4bc4 <Str_CmpIgnoreCase_N+0x188>
        }
        char_2  =  ASCII_ToLower(*p2_str);
    4a66:	68bb      	ldr	r3, [r7, #8]
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	4618      	mov	r0, r3
    4a6c:	f7ff fdb4 	bl	45d8 <ASCII_ToLower>
    4a70:	4603      	mov	r3, r0
    4a72:	75bb      	strb	r3, [r7, #22]
        cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;
    4a74:	7dbb      	ldrb	r3, [r7, #22]
    4a76:	b29b      	uxth	r3, r3
    4a78:	f1c3 0300 	rsb	r3, r3, #0
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	82bb      	strh	r3, [r7, #20]
        return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
    4a80:	8abb      	ldrh	r3, [r7, #20]
    4a82:	e09f      	b.n	4bc4 <Str_CmpIgnoreCase_N+0x188>
    }
    if (p2_str == (const CPU_CHAR *)0) {
    4a84:	68bb      	ldr	r3, [r7, #8]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d10a      	bne.n	4aa0 <Str_CmpIgnoreCase_N+0x64>
        char_1  =  ASCII_ToLower(*p1_str);
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	781b      	ldrb	r3, [r3, #0]
    4a8e:	4618      	mov	r0, r3
    4a90:	f7ff fda2 	bl	45d8 <ASCII_ToLower>
    4a94:	4603      	mov	r3, r0
    4a96:	75fb      	strb	r3, [r7, #23]
        cmp_val = (CPU_INT16S)char_1;
    4a98:	7dfb      	ldrb	r3, [r7, #23]
    4a9a:	82bb      	strh	r3, [r7, #20]
        return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
    4a9c:	8abb      	ldrh	r3, [r7, #20]
    4a9e:	e091      	b.n	4bc4 <Str_CmpIgnoreCase_N+0x188>
    }


    p1_str_cmp      = p1_str;
    4aa0:	68fb      	ldr	r3, [r7, #12]
    4aa2:	627b      	str	r3, [r7, #36]	; 0x24
    p2_str_cmp      = p2_str;
    4aa4:	68bb      	ldr	r3, [r7, #8]
    4aa6:	623b      	str	r3, [r7, #32]
    p1_str_cmp_next = p1_str_cmp;
    4aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4aaa:	61fb      	str	r3, [r7, #28]
    p2_str_cmp_next = p2_str_cmp;
    4aac:	6a3b      	ldr	r3, [r7, #32]
    4aae:	61bb      	str	r3, [r7, #24]
    p1_str_cmp_next++;
    4ab0:	69fb      	ldr	r3, [r7, #28]
    4ab2:	f103 0301 	add.w	r3, r3, #1
    4ab6:	61fb      	str	r3, [r7, #28]
    p2_str_cmp_next++;
    4ab8:	69bb      	ldr	r3, [r7, #24]
    4aba:	f103 0301 	add.w	r3, r3, #1
    4abe:	61bb      	str	r3, [r7, #24]
    char_1          = ASCII_ToLower(*p1_str_cmp);
    4ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	4618      	mov	r0, r3
    4ac6:	f7ff fd87 	bl	45d8 <ASCII_ToLower>
    4aca:	4603      	mov	r3, r0
    4acc:	75fb      	strb	r3, [r7, #23]
    char_2          = ASCII_ToLower(*p2_str_cmp);
    4ace:	6a3b      	ldr	r3, [r7, #32]
    4ad0:	781b      	ldrb	r3, [r3, #0]
    4ad2:	4618      	mov	r0, r3
    4ad4:	f7ff fd80 	bl	45d8 <ASCII_ToLower>
    4ad8:	4603      	mov	r3, r0
    4ada:	75bb      	strb	r3, [r7, #22]
    cmp_len         = 0u;
    4adc:	f04f 0300 	mov.w	r3, #0
    4ae0:	613b      	str	r3, [r7, #16]

    while (( char_1          ==  char_2)          &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    4ae2:	e021      	b.n	4b28 <Str_CmpIgnoreCase_N+0xec>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
           ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2);   */
           ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
           ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
        p1_str_cmp++;
    4ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ae6:	f103 0301 	add.w	r3, r3, #1
    4aea:	627b      	str	r3, [r7, #36]	; 0x24
        p2_str_cmp++;
    4aec:	6a3b      	ldr	r3, [r7, #32]
    4aee:	f103 0301 	add.w	r3, r3, #1
    4af2:	623b      	str	r3, [r7, #32]
        p1_str_cmp_next++;
    4af4:	69fb      	ldr	r3, [r7, #28]
    4af6:	f103 0301 	add.w	r3, r3, #1
    4afa:	61fb      	str	r3, [r7, #28]
        p2_str_cmp_next++;
    4afc:	69bb      	ldr	r3, [r7, #24]
    4afe:	f103 0301 	add.w	r3, r3, #1
    4b02:	61bb      	str	r3, [r7, #24]
        cmp_len++;
    4b04:	693b      	ldr	r3, [r7, #16]
    4b06:	f103 0301 	add.w	r3, r3, #1
    4b0a:	613b      	str	r3, [r7, #16]
        char_1 = ASCII_ToLower(*p1_str_cmp);
    4b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	4618      	mov	r0, r3
    4b12:	f7ff fd61 	bl	45d8 <ASCII_ToLower>
    4b16:	4603      	mov	r3, r0
    4b18:	75fb      	strb	r3, [r7, #23]
        char_2 = ASCII_ToLower(*p2_str_cmp);
    4b1a:	6a3b      	ldr	r3, [r7, #32]
    4b1c:	781b      	ldrb	r3, [r3, #0]
    4b1e:	4618      	mov	r0, r3
    4b20:	f7ff fd5a 	bl	45d8 <ASCII_ToLower>
    4b24:	4603      	mov	r3, r0
    4b26:	75bb      	strb	r3, [r7, #22]
    p2_str_cmp_next++;
    char_1          = ASCII_ToLower(*p1_str_cmp);
    char_2          = ASCII_ToLower(*p2_str_cmp);
    cmp_len         = 0u;

    while (( char_1          ==  char_2)          &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    4b28:	7dfa      	ldrb	r2, [r7, #23]
    4b2a:	7dbb      	ldrb	r3, [r7, #22]
    4b2c:	429a      	cmp	r2, r3
    4b2e:	d10d      	bne.n	4b4c <Str_CmpIgnoreCase_N+0x110>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
    4b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b32:	781b      	ldrb	r3, [r3, #0]
    p2_str_cmp_next++;
    char_1          = ASCII_ToLower(*p1_str_cmp);
    char_2          = ASCII_ToLower(*p2_str_cmp);
    cmp_len         = 0u;

    while (( char_1          ==  char_2)          &&            /* Cmp strs until non-matching chars (see Note #3c) ... */
    4b34:	2b00      	cmp	r3, #0
    4b36:	d009      	beq.n	4b4c <Str_CmpIgnoreCase_N+0x110>
           (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
    4b38:	69fb      	ldr	r3, [r7, #28]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d006      	beq.n	4b4c <Str_CmpIgnoreCase_N+0x110>
           ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2);   */
    4b3e:	69bb      	ldr	r3, [r7, #24]
    4b40:	2b00      	cmp	r3, #0
    4b42:	d003      	beq.n	4b4c <Str_CmpIgnoreCase_N+0x110>
           ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
    4b44:	693a      	ldr	r2, [r7, #16]
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	429a      	cmp	r2, r3
    4b4a:	d3cb      	bcc.n	4ae4 <Str_CmpIgnoreCase_N+0xa8>
        char_1 = ASCII_ToLower(*p1_str_cmp);
        char_2 = ASCII_ToLower(*p2_str_cmp);
    }


    if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
    4b4c:	693a      	ldr	r2, [r7, #16]
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	429a      	cmp	r2, r3
    4b52:	d102      	bne.n	4b5a <Str_CmpIgnoreCase_N+0x11e>
        return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
    4b54:	f04f 0300 	mov.w	r3, #0
    4b58:	e034      	b.n	4bc4 <Str_CmpIgnoreCase_N+0x188>
    }

    if (char_1 != char_2) {                                     /* If strs NOT identical, ...                           */
    4b5a:	7dfa      	ldrb	r2, [r7, #23]
    4b5c:	7dbb      	ldrb	r3, [r7, #22]
    4b5e:	429a      	cmp	r2, r3
    4b60:	d007      	beq.n	4b72 <Str_CmpIgnoreCase_N+0x136>
         cmp_val = (CPU_INT16S)char_1 - (CPU_INT16S)char_2;     /* ... calc & rtn char diff  (see Note #3c1).           */
    4b62:	7dfb      	ldrb	r3, [r7, #23]
    4b64:	b29a      	uxth	r2, r3
    4b66:	7dbb      	ldrb	r3, [r7, #22]
    4b68:	b29b      	uxth	r3, r3
    4b6a:	1ad3      	subs	r3, r2, r3
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	82bb      	strh	r3, [r7, #20]
    4b70:	e027      	b.n	4bc2 <Str_CmpIgnoreCase_N+0x186>

    } else if (char_1 == (CPU_CHAR)'\0') {                      /* If NULL char(s) found, ...                           */
    4b72:	7dfb      	ldrb	r3, [r7, #23]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d103      	bne.n	4b80 <Str_CmpIgnoreCase_N+0x144>
         cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
    4b78:	f04f 0300 	mov.w	r3, #0
    4b7c:	82bb      	strh	r3, [r7, #20]
    4b7e:	e020      	b.n	4bc2 <Str_CmpIgnoreCase_N+0x186>

    } else {
        if (p1_str_cmp_next == (const CPU_CHAR *)0) {
    4b80:	69fb      	ldr	r3, [r7, #28]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <Str_CmpIgnoreCase_N+0x174>
            if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
    4b86:	69bb      	ldr	r3, [r7, #24]
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d103      	bne.n	4b94 <Str_CmpIgnoreCase_N+0x158>
                cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
    4b8c:	f04f 0300 	mov.w	r3, #0
    4b90:	82bb      	strh	r3, [r7, #20]
    4b92:	e016      	b.n	4bc2 <Str_CmpIgnoreCase_N+0x186>
            } else {                                            /* If p1_str_cmp_next NULL, ...                         */
                char_2  =  ASCII_ToLower(*p2_str_cmp_next);
    4b94:	69bb      	ldr	r3, [r7, #24]
    4b96:	781b      	ldrb	r3, [r3, #0]
    4b98:	4618      	mov	r0, r3
    4b9a:	f7ff fd1d 	bl	45d8 <ASCII_ToLower>
    4b9e:	4603      	mov	r3, r0
    4ba0:	75bb      	strb	r3, [r7, #22]
                cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;   /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
    4ba2:	7dbb      	ldrb	r3, [r7, #22]
    4ba4:	b29b      	uxth	r3, r3
    4ba6:	f1c3 0300 	rsb	r3, r3, #0
    4baa:	b29b      	uxth	r3, r3
    4bac:	82bb      	strh	r3, [r7, #20]
    4bae:	e008      	b.n	4bc2 <Str_CmpIgnoreCase_N+0x186>
            }
        } else {                                                /* If p2_str_cmp_next NULL, ...                         */
            char_1  =  ASCII_ToLower(*p1_str_cmp_next);
    4bb0:	69fb      	ldr	r3, [r7, #28]
    4bb2:	781b      	ldrb	r3, [r3, #0]
    4bb4:	4618      	mov	r0, r3
    4bb6:	f7ff fd0f 	bl	45d8 <ASCII_ToLower>
    4bba:	4603      	mov	r3, r0
    4bbc:	75fb      	strb	r3, [r7, #23]
            cmp_val = (CPU_INT16S)char_1;                       /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
    4bbe:	7dfb      	ldrb	r3, [r7, #23]
    4bc0:	82bb      	strh	r3, [r7, #20]
        }
    }


    return (cmp_val);
    4bc2:	8abb      	ldrh	r3, [r7, #20]
    4bc4:	b21b      	sxth	r3, r3
}
    4bc6:	4618      	mov	r0, r3
    4bc8:	f107 0728 	add.w	r7, r7, #40	; 0x28
    4bcc:	46bd      	mov	sp, r7
    4bce:	bd80      	pop	{r7, pc}

00004bd0 <Str_Char>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Char (const  CPU_CHAR  *pstr,
                            CPU_CHAR   srch_char)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b084      	sub	sp, #16
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	6078      	str	r0, [r7, #4]
    4bd8:	460b      	mov	r3, r1
    4bda:	70fb      	strb	r3, [r7, #3]
    CPU_CHAR  *pstr_rtn;


    pstr_rtn = Str_Char_N(pstr,
    4bdc:	78fb      	ldrb	r3, [r7, #3]
    4bde:	6878      	ldr	r0, [r7, #4]
    4be0:	f04f 31ff 	mov.w	r1, #4294967295
    4be4:	461a      	mov	r2, r3
    4be6:	f000 f807 	bl	4bf8 <Str_Char_N>
    4bea:	60f8      	str	r0, [r7, #12]
                          DEF_INT_CPU_U_MAX_VAL,
                          srch_char);

    return (pstr_rtn);
    4bec:	68fb      	ldr	r3, [r7, #12]
}
    4bee:	4618      	mov	r0, r3
    4bf0:	f107 0710 	add.w	r7, r7, #16
    4bf4:	46bd      	mov	sp, r7
    4bf6:	bd80      	pop	{r7, pc}

00004bf8 <Str_Char_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Char_N (const  CPU_CHAR    *pstr,
                              CPU_SIZE_T   len_max,
                              CPU_CHAR     srch_char)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b087      	sub	sp, #28
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	60b9      	str	r1, [r7, #8]
    4c02:	4613      	mov	r3, r2
    4c04:	71fb      	strb	r3, [r7, #7]
    const  CPU_CHAR    *pstr_char;
           CPU_SIZE_T   len_srch;


    if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d102      	bne.n	4c12 <Str_Char_N+0x1a>
        return ((CPU_CHAR *)0);
    4c0c:	f04f 0300 	mov.w	r3, #0
    4c10:	e039      	b.n	4c86 <Str_Char_N+0x8e>
    }

    if (len_max == 0) {                                         /* Rtn NULL if srch len = 0      (see Note #3e1).       */
    4c12:	68bb      	ldr	r3, [r7, #8]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d102      	bne.n	4c1e <Str_Char_N+0x26>
        return ((CPU_CHAR *)0);
    4c18:	f04f 0300 	mov.w	r3, #0
    4c1c:	e033      	b.n	4c86 <Str_Char_N+0x8e>
    }


    pstr_char = pstr;
    4c1e:	68fb      	ldr	r3, [r7, #12]
    4c20:	617b      	str	r3, [r7, #20]
    len_srch  = 0u;
    4c22:	f04f 0300 	mov.w	r3, #0
    4c26:	613b      	str	r3, [r7, #16]

    while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
    4c28:	e007      	b.n	4c3a <Str_Char_N+0x42>
           (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
           (*pstr_char != (      CPU_CHAR  )srch_char) &&       /* ... or srch char found      (see Note #3d); ...      */
           ( len_srch  <  (      CPU_SIZE_T)len_max)) {         /* ... or max nbr chars srch'd (see Note #3e).          */
        pstr_char++;
    4c2a:	697b      	ldr	r3, [r7, #20]
    4c2c:	f103 0301 	add.w	r3, r3, #1
    4c30:	617b      	str	r3, [r7, #20]
        len_srch++;
    4c32:	693b      	ldr	r3, [r7, #16]
    4c34:	f103 0301 	add.w	r3, r3, #1
    4c38:	613b      	str	r3, [r7, #16]


    pstr_char = pstr;
    len_srch  = 0u;

    while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
    4c3a:	697b      	ldr	r3, [r7, #20]
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d00c      	beq.n	4c5a <Str_Char_N+0x62>
           (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
    4c40:	697b      	ldr	r3, [r7, #20]
    4c42:	781b      	ldrb	r3, [r3, #0]


    pstr_char = pstr;
    len_srch  = 0u;

    while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
    4c44:	2b00      	cmp	r3, #0
    4c46:	d008      	beq.n	4c5a <Str_Char_N+0x62>
           (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
           (*pstr_char != (      CPU_CHAR  )srch_char) &&       /* ... or srch char found      (see Note #3d); ...      */
    4c48:	697b      	ldr	r3, [r7, #20]
    4c4a:	781b      	ldrb	r3, [r3, #0]

    pstr_char = pstr;
    len_srch  = 0u;

    while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
           (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
    4c4c:	79fa      	ldrb	r2, [r7, #7]
    4c4e:	429a      	cmp	r2, r3
    4c50:	d003      	beq.n	4c5a <Str_Char_N+0x62>
           (*pstr_char != (      CPU_CHAR  )srch_char) &&       /* ... or srch char found      (see Note #3d); ...      */
    4c52:	693a      	ldr	r2, [r7, #16]
    4c54:	68bb      	ldr	r3, [r7, #8]
    4c56:	429a      	cmp	r2, r3
    4c58:	d3e7      	bcc.n	4c2a <Str_Char_N+0x32>
        pstr_char++;
        len_srch++;
    }


    if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found      (see Note #3b1).     */
    4c5a:	697b      	ldr	r3, [r7, #20]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d102      	bne.n	4c66 <Str_Char_N+0x6e>
        return ((CPU_CHAR *)0);
    4c60:	f04f 0300 	mov.w	r3, #0
    4c64:	e00f      	b.n	4c86 <Str_Char_N+0x8e>
    }

    if (len_srch >= len_max) {                                  /* Rtn NULL if srch char NOT found ...                  */
    4c66:	693a      	ldr	r2, [r7, #16]
    4c68:	68bb      	ldr	r3, [r7, #8]
    4c6a:	429a      	cmp	r2, r3
    4c6c:	d302      	bcc.n	4c74 <Str_Char_N+0x7c>
        return ((CPU_CHAR *)0);                                 /* ... within max nbr of chars     (see Note #3e1).     */
    4c6e:	f04f 0300 	mov.w	r3, #0
    4c72:	e008      	b.n	4c86 <Str_Char_N+0x8e>
    }

    if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found (see Note #3c1).     */
    4c74:	697b      	ldr	r3, [r7, #20]
    4c76:	781b      	ldrb	r3, [r3, #0]
    4c78:	79fa      	ldrb	r2, [r7, #7]
    4c7a:	429a      	cmp	r2, r3
    4c7c:	d002      	beq.n	4c84 <Str_Char_N+0x8c>
         return ((CPU_CHAR *)0);
    4c7e:	f04f 0300 	mov.w	r3, #0
    4c82:	e000      	b.n	4c86 <Str_Char_N+0x8e>
    }


    return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char (see Note #3d1).     */
    4c84:	697b      	ldr	r3, [r7, #20]
}
    4c86:	4618      	mov	r0, r3
    4c88:	f107 071c 	add.w	r7, r7, #28
    4c8c:	46bd      	mov	sp, r7
    4c8e:	bc80      	pop	{r7}
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop

00004c94 <Str_Char_Last>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Char_Last (const  CPU_CHAR  *pstr,
                                 CPU_CHAR   srch_char)
{
    4c94:	b580      	push	{r7, lr}
    4c96:	b084      	sub	sp, #16
    4c98:	af00      	add	r7, sp, #0
    4c9a:	6078      	str	r0, [r7, #4]
    4c9c:	460b      	mov	r3, r1
    4c9e:	70fb      	strb	r3, [r7, #3]
    CPU_CHAR  *pstr_rtn;


    pstr_rtn = Str_Char_Last_N(pstr,
    4ca0:	78fb      	ldrb	r3, [r7, #3]
    4ca2:	6878      	ldr	r0, [r7, #4]
    4ca4:	f04f 31ff 	mov.w	r1, #4294967295
    4ca8:	461a      	mov	r2, r3
    4caa:	f000 f807 	bl	4cbc <Str_Char_Last_N>
    4cae:	60f8      	str	r0, [r7, #12]
                               DEF_INT_CPU_U_MAX_VAL,
                               srch_char);

    return (pstr_rtn);
    4cb0:	68fb      	ldr	r3, [r7, #12]
}
    4cb2:	4618      	mov	r0, r3
    4cb4:	f107 0710 	add.w	r7, r7, #16
    4cb8:	46bd      	mov	sp, r7
    4cba:	bd80      	pop	{r7, pc}

00004cbc <Str_Char_Last_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Char_Last_N (const  CPU_CHAR    *pstr,
                                   CPU_SIZE_T   len_max,
                                   CPU_CHAR     srch_char)
{
    4cbc:	b580      	push	{r7, lr}
    4cbe:	b088      	sub	sp, #32
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	60f8      	str	r0, [r7, #12]
    4cc4:	60b9      	str	r1, [r7, #8]
    4cc6:	4613      	mov	r3, r2
    4cc8:	71fb      	strb	r3, [r7, #7]
    const  CPU_CHAR    *pstr_char;
           CPU_SIZE_T   str_len_max;
           CPU_SIZE_T   str_len;


    if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d102      	bne.n	4cd6 <Str_Char_Last_N+0x1a>
        return ((CPU_CHAR *)0);
    4cd0:	f04f 0300 	mov.w	r3, #0
    4cd4:	e030      	b.n	4d38 <Str_Char_Last_N+0x7c>
    }

    if (len_max == 0) {                                         /* Rtn NULL if srch len = 0      (see Note #3e1).       */
    4cd6:	68bb      	ldr	r3, [r7, #8]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d102      	bne.n	4ce2 <Str_Char_Last_N+0x26>
        return ((CPU_CHAR *)0);
    4cdc:	f04f 0300 	mov.w	r3, #0
    4ce0:	e02a      	b.n	4d38 <Str_Char_Last_N+0x7c>
    }


    pstr_char    = pstr;
    4ce2:	68fb      	ldr	r3, [r7, #12]
    4ce4:	61fb      	str	r3, [r7, #28]
     str_len_max = len_max - sizeof((CPU_CHAR)'\0');            /* Str len adj'd for NULL char len.                     */
    4ce6:	68bb      	ldr	r3, [r7, #8]
    4ce8:	f103 33ff 	add.w	r3, r3, #4294967295
    4cec:	61bb      	str	r3, [r7, #24]
     str_len     = Str_Len_N(pstr_char, str_len_max);
    4cee:	69f8      	ldr	r0, [r7, #28]
    4cf0:	69b9      	ldr	r1, [r7, #24]
    4cf2:	f7ff fce1 	bl	46b8 <Str_Len_N>
    4cf6:	6178      	str	r0, [r7, #20]
    pstr_char   += str_len;
    4cf8:	69fa      	ldr	r2, [r7, #28]
    4cfa:	697b      	ldr	r3, [r7, #20]
    4cfc:	18d3      	adds	r3, r2, r3
    4cfe:	61fb      	str	r3, [r7, #28]

    if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found       (see Note #3b1).    */
    4d00:	69fb      	ldr	r3, [r7, #28]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d106      	bne.n	4d14 <Str_Char_Last_N+0x58>
        return ((CPU_CHAR *)0);
    4d06:	f04f 0300 	mov.w	r3, #0
    4d0a:	e015      	b.n	4d38 <Str_Char_Last_N+0x7c>
    }

    while (( pstr_char != pstr) &&                              /* Srch str from end until begining (see Note #3c) ...  */
           (*pstr_char != srch_char)) {                         /* ... until srch char found        (see Note #3d).     */
        pstr_char--;
    4d0c:	69fb      	ldr	r3, [r7, #28]
    4d0e:	f103 33ff 	add.w	r3, r3, #4294967295
    4d12:	61fb      	str	r3, [r7, #28]

    if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found       (see Note #3b1).    */
        return ((CPU_CHAR *)0);
    }

    while (( pstr_char != pstr) &&                              /* Srch str from end until begining (see Note #3c) ...  */
    4d14:	69fa      	ldr	r2, [r7, #28]
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	429a      	cmp	r2, r3
    4d1a:	d004      	beq.n	4d26 <Str_Char_Last_N+0x6a>
           (*pstr_char != srch_char)) {                         /* ... until srch char found        (see Note #3d).     */
    4d1c:	69fb      	ldr	r3, [r7, #28]
    4d1e:	781b      	ldrb	r3, [r3, #0]

    if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found       (see Note #3b1).    */
        return ((CPU_CHAR *)0);
    }

    while (( pstr_char != pstr) &&                              /* Srch str from end until begining (see Note #3c) ...  */
    4d20:	79fa      	ldrb	r2, [r7, #7]
    4d22:	429a      	cmp	r2, r3
    4d24:	d1f2      	bne.n	4d0c <Str_Char_Last_N+0x50>
           (*pstr_char != srch_char)) {                         /* ... until srch char found        (see Note #3d).     */
        pstr_char--;
    }


    if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found  (see Note #3c1).    */
    4d26:	69fb      	ldr	r3, [r7, #28]
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	79fa      	ldrb	r2, [r7, #7]
    4d2c:	429a      	cmp	r2, r3
    4d2e:	d002      	beq.n	4d36 <Str_Char_Last_N+0x7a>
         return ((CPU_CHAR *)0);
    4d30:	f04f 0300 	mov.w	r3, #0
    4d34:	e000      	b.n	4d38 <Str_Char_Last_N+0x7c>
    }


    return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char  (see Note #3d1).    */
    4d36:	69fb      	ldr	r3, [r7, #28]
}
    4d38:	4618      	mov	r0, r3
    4d3a:	f107 0720 	add.w	r7, r7, #32
    4d3e:	46bd      	mov	sp, r7
    4d40:	bd80      	pop	{r7, pc}
    4d42:	bf00      	nop

00004d44 <Str_Str>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Str (const  CPU_CHAR  *pstr,
                    const  CPU_CHAR  *pstr_srch)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b084      	sub	sp, #16
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
    4d4c:	6039      	str	r1, [r7, #0]
    CPU_CHAR  *pstr_rtn;


    pstr_rtn = Str_Str_N(pstr,
    4d4e:	6878      	ldr	r0, [r7, #4]
    4d50:	6839      	ldr	r1, [r7, #0]
    4d52:	f04f 32ff 	mov.w	r2, #4294967295
    4d56:	f000 f807 	bl	4d68 <Str_Str_N>
    4d5a:	60f8      	str	r0, [r7, #12]
                         pstr_srch,
                         DEF_INT_CPU_U_MAX_VAL);

    return (pstr_rtn);
    4d5c:	68fb      	ldr	r3, [r7, #12]
}
    4d5e:	4618      	mov	r0, r3
    4d60:	f107 0710 	add.w	r7, r7, #16
    4d64:	46bd      	mov	sp, r7
    4d66:	bd80      	pop	{r7, pc}

00004d68 <Str_Str_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Str_N (const  CPU_CHAR    *pstr,
                      const  CPU_CHAR    *pstr_srch,
                             CPU_SIZE_T   len_max)
{
    4d68:	b580      	push	{r7, lr}
    4d6a:	b08e      	sub	sp, #56	; 0x38
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	60f8      	str	r0, [r7, #12]
    4d70:	60b9      	str	r1, [r7, #8]
    4d72:	607a      	str	r2, [r7, #4]
           CPU_INT16S    srch_cmp;
    const  CPU_CHAR     *pstr_str;
    const  CPU_CHAR     *pstr_srch_ix;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #3a).          */
    if (pstr == (const CPU_CHAR *)0) {
    4d74:	68fb      	ldr	r3, [r7, #12]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d102      	bne.n	4d80 <Str_Str_N+0x18>
        return ((CPU_CHAR *)0);
    4d7a:	f04f 0300 	mov.w	r3, #0
    4d7e:	e06f      	b.n	4e60 <Str_Str_N+0xf8>
    }
    if (pstr_srch == (const CPU_CHAR *)0) {
    4d80:	68bb      	ldr	r3, [r7, #8]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d102      	bne.n	4d8c <Str_Str_N+0x24>
        return ((CPU_CHAR *)0);
    4d86:	f04f 0300 	mov.w	r3, #0
    4d8a:	e069      	b.n	4e60 <Str_Str_N+0xf8>
    }

    if (len_max == 0) {                                         /* Rtn NULL if srch len = 0    (see Note #3g).          */
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d102      	bne.n	4d98 <Str_Str_N+0x30>
        return ((CPU_CHAR *)0);
    4d92:	f04f 0300 	mov.w	r3, #0
    4d96:	e063      	b.n	4e60 <Str_Str_N+0xf8>
    }

                                                                /* Lim max srch str len (to chk > str len).             */
    len_max_srch = (len_max <       DEF_INT_CPU_U_MAX_VAL)
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d9e:	d003      	beq.n	4da8 <Str_Str_N+0x40>
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	f103 0301 	add.w	r3, r3, #1
    4da6:	e001      	b.n	4dac <Str_Str_N+0x44>
    4da8:	f04f 33ff 	mov.w	r3, #4294967295
    4dac:	633b      	str	r3, [r7, #48]	; 0x30
                 ? (len_max + 1u) : DEF_INT_CPU_U_MAX_VAL;

    str_len      = Str_Len_N(pstr,      len_max);
    4dae:	68f8      	ldr	r0, [r7, #12]
    4db0:	6879      	ldr	r1, [r7, #4]
    4db2:	f7ff fc81 	bl	46b8 <Str_Len_N>
    4db6:	62f8      	str	r0, [r7, #44]	; 0x2c
    str_len_srch = Str_Len_N(pstr_srch, len_max_srch);
    4db8:	68b8      	ldr	r0, [r7, #8]
    4dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4dbc:	f7ff fc7c 	bl	46b8 <Str_Len_N>
    4dc0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (str_len_srch == 0) {                                    /* Rtn ptr to str if srch str len = 0 (see Note #2b2).  */
    4dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d101      	bne.n	4dcc <Str_Str_N+0x64>
        return ((CPU_CHAR *)pstr);
    4dc8:	68fb      	ldr	r3, [r7, #12]
    4dca:	e049      	b.n	4e60 <Str_Str_N+0xf8>
    }
    if (str_len_srch > str_len) {                               /* Rtn NULL if srch str len > str len (see Note #3d).   */
    4dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4dd0:	429a      	cmp	r2, r3
    4dd2:	d902      	bls.n	4dda <Str_Str_N+0x72>
        return ((CPU_CHAR *)0);
    4dd4:	f04f 0300 	mov.w	r3, #0
    4dd8:	e042      	b.n	4e60 <Str_Str_N+0xf8>
    }
                                                                /* Rtn NULL if NULL ptr found         (see Note #3b1).  */
    pstr_str = pstr      + str_len;
    4dda:	68fa      	ldr	r2, [r7, #12]
    4ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4dde:	18d3      	adds	r3, r2, r3
    4de0:	627b      	str	r3, [r7, #36]	; 0x24
    if (pstr_str == (const CPU_CHAR *)0) {
    4de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4de4:	2b00      	cmp	r3, #0
    4de6:	d102      	bne.n	4dee <Str_Str_N+0x86>
        return ((CPU_CHAR *)0);
    4de8:	f04f 0300 	mov.w	r3, #0
    4dec:	e038      	b.n	4e60 <Str_Str_N+0xf8>
    }
    pstr_str = pstr_srch + str_len_srch;
    4dee:	68ba      	ldr	r2, [r7, #8]
    4df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4df2:	18d3      	adds	r3, r2, r3
    4df4:	627b      	str	r3, [r7, #36]	; 0x24
    if (pstr_str == (const CPU_CHAR *)0) {
    4df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d102      	bne.n	4e02 <Str_Str_N+0x9a>
        return ((CPU_CHAR *)0);
    4dfc:	f04f 0300 	mov.w	r3, #0
    4e00:	e02e      	b.n	4e60 <Str_Str_N+0xf8>
    }


    srch_len  = str_len - str_len_srch;                         /* Calc srch len (see Note #3e2).                       */
    4e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4e06:	1ad3      	subs	r3, r2, r3
    4e08:	623b      	str	r3, [r7, #32]
    srch_ix   = 0u;
    4e0a:	f04f 0300 	mov.w	r3, #0
    4e0e:	637b      	str	r3, [r7, #52]	; 0x34
    srch_done = DEF_NO;
    4e10:	f04f 0300 	mov.w	r3, #0
    4e14:	77fb      	strb	r3, [r7, #31]

    do {
        pstr_srch_ix = (const CPU_CHAR *)(pstr + srch_ix);
    4e16:	68fa      	ldr	r2, [r7, #12]
    4e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e1a:	18d3      	adds	r3, r2, r3
    4e1c:	61bb      	str	r3, [r7, #24]
        srch_cmp     =  Str_Cmp_N(pstr_srch_ix, pstr_srch, str_len_srch);
    4e1e:	69b8      	ldr	r0, [r7, #24]
    4e20:	68b9      	ldr	r1, [r7, #8]
    4e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4e24:	f7ff fd5a 	bl	48dc <Str_Cmp_N>
    4e28:	4603      	mov	r3, r0
    4e2a:	82fb      	strh	r3, [r7, #22]
        srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
    4e2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    4e30:	2b00      	cmp	r3, #0
    4e32:	bf14      	ite	ne
    4e34:	2300      	movne	r3, #0
    4e36:	2301      	moveq	r3, #1
    4e38:	77fb      	strb	r3, [r7, #31]
        srch_ix++;
    4e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e3c:	f103 0301 	add.w	r3, r3, #1
    4e40:	637b      	str	r3, [r7, #52]	; 0x34
    } while ((srch_done == DEF_NO) && (srch_ix <= srch_len));
    4e42:	7ffb      	ldrb	r3, [r7, #31]
    4e44:	2b00      	cmp	r3, #0
    4e46:	d103      	bne.n	4e50 <Str_Str_N+0xe8>
    4e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4e4a:	6a3b      	ldr	r3, [r7, #32]
    4e4c:	429a      	cmp	r2, r3
    4e4e:	d9e2      	bls.n	4e16 <Str_Str_N+0xae>


    if (srch_cmp != 0) {                                        /* Rtn NULL if srch str NOT found (see Note #3e2).      */
    4e50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d002      	beq.n	4e5e <Str_Str_N+0xf6>
        return ((CPU_CHAR *)0);
    4e58:	f04f 0300 	mov.w	r3, #0
    4e5c:	e000      	b.n	4e60 <Str_Str_N+0xf8>
    }

    return ((CPU_CHAR *)pstr_srch_ix);                          /* Else rtn ptr to found srch str (see Note #3f1).      */
    4e5e:	69bb      	ldr	r3, [r7, #24]
}
    4e60:	4618      	mov	r0, r3
    4e62:	f107 0738 	add.w	r7, r7, #56	; 0x38
    4e66:	46bd      	mov	sp, r7
    4e68:	bd80      	pop	{r7, pc}
    4e6a:	bf00      	nop

00004e6c <Str_FmtNbr_Int32U>:
                              CPU_INT08U    nbr_base,
                              CPU_CHAR      lead_char,
                              CPU_BOOLEAN   lower_case,
                              CPU_BOOLEAN   nul,
                              CPU_CHAR     *pstr)
{
    4e6c:	b580      	push	{r7, lr}
    4e6e:	b088      	sub	sp, #32
    4e70:	af04      	add	r7, sp, #16
    4e72:	6078      	str	r0, [r7, #4]
    4e74:	70f9      	strb	r1, [r7, #3]
    4e76:	70ba      	strb	r2, [r7, #2]
    4e78:	707b      	strb	r3, [r7, #1]
    CPU_CHAR  *pstr_fmt;


    pstr_fmt = Str_FmtNbr_Int32(nbr,                            /* Fmt unsigned int into str.                           */
    4e7a:	78fa      	ldrb	r2, [r7, #3]
    4e7c:	78bb      	ldrb	r3, [r7, #2]
    4e7e:	7879      	ldrb	r1, [r7, #1]
    4e80:	9100      	str	r1, [sp, #0]
    4e82:	7e39      	ldrb	r1, [r7, #24]
    4e84:	9101      	str	r1, [sp, #4]
    4e86:	7f39      	ldrb	r1, [r7, #28]
    4e88:	9102      	str	r1, [sp, #8]
    4e8a:	6a39      	ldr	r1, [r7, #32]
    4e8c:	9103      	str	r1, [sp, #12]
    4e8e:	6878      	ldr	r0, [r7, #4]
    4e90:	4611      	mov	r1, r2
    4e92:	461a      	mov	r2, r3
    4e94:	f04f 0300 	mov.w	r3, #0
    4e98:	f000 f880 	bl	4f9c <Str_FmtNbr_Int32>
    4e9c:	60f8      	str	r0, [r7, #12]
                                lead_char,
                                lower_case,
                                nul,
                                pstr);

    return (pstr_fmt);
    4e9e:	68fb      	ldr	r3, [r7, #12]
}
    4ea0:	4618      	mov	r0, r3
    4ea2:	f107 0710 	add.w	r7, r7, #16
    4ea6:	46bd      	mov	sp, r7
    4ea8:	bd80      	pop	{r7, pc}
    4eaa:	bf00      	nop

00004eac <Str_FmtNbr_Int32S>:
                              CPU_INT08U    nbr_base,
                              CPU_CHAR      lead_char,
                              CPU_BOOLEAN   lower_case,
                              CPU_BOOLEAN   nul,
                              CPU_CHAR     *pstr)
{
    4eac:	b590      	push	{r4, r7, lr}
    4eae:	b08b      	sub	sp, #44	; 0x2c
    4eb0:	af04      	add	r7, sp, #16
    4eb2:	6078      	str	r0, [r7, #4]
    4eb4:	70f9      	strb	r1, [r7, #3]
    4eb6:	70ba      	strb	r2, [r7, #2]
    4eb8:	707b      	strb	r3, [r7, #1]
    CPU_CHAR     *pstr_fmt;
    CPU_INT32S    nbr_fmt;
    CPU_BOOLEAN   nbr_neg;


    if (nbr < 0) {                                              /* If nbr neg, ...                                      */
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	da07      	bge.n	4ed0 <Str_FmtNbr_Int32S+0x24>
        nbr_fmt = -nbr;                                         /* ... negate nbr.                                      */
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	f1c3 0300 	rsb	r3, r3, #0
    4ec6:	617b      	str	r3, [r7, #20]
        nbr_neg =  DEF_YES;
    4ec8:	f04f 0301 	mov.w	r3, #1
    4ecc:	74fb      	strb	r3, [r7, #19]
    4ece:	e004      	b.n	4eda <Str_FmtNbr_Int32S+0x2e>
    } else {
        nbr_fmt =  nbr;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	617b      	str	r3, [r7, #20]
        nbr_neg =  DEF_NO;
    4ed4:	f04f 0300 	mov.w	r3, #0
    4ed8:	74fb      	strb	r3, [r7, #19]
    }

    pstr_fmt = Str_FmtNbr_Int32((CPU_INT32U)nbr_fmt,            /* Fmt signed int into str.                             */
    4eda:	6978      	ldr	r0, [r7, #20]
    4edc:	78f9      	ldrb	r1, [r7, #3]
    4ede:	78ba      	ldrb	r2, [r7, #2]
    4ee0:	7cfb      	ldrb	r3, [r7, #19]
    4ee2:	787c      	ldrb	r4, [r7, #1]
    4ee4:	9400      	str	r4, [sp, #0]
    4ee6:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
    4eea:	9401      	str	r4, [sp, #4]
    4eec:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
    4ef0:	9402      	str	r4, [sp, #8]
    4ef2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    4ef4:	9403      	str	r4, [sp, #12]
    4ef6:	f000 f851 	bl	4f9c <Str_FmtNbr_Int32>
    4efa:	60f8      	str	r0, [r7, #12]
                                            lead_char,
                                            lower_case,
                                            nul,
                                            pstr);

    return (pstr_fmt);
    4efc:	68fb      	ldr	r3, [r7, #12]
}
    4efe:	4618      	mov	r0, r3
    4f00:	f107 071c 	add.w	r7, r7, #28
    4f04:	46bd      	mov	sp, r7
    4f06:	bd90      	pop	{r4, r7, pc}

00004f08 <Str_ParseNbr_Int32U>:
*/

CPU_INT32U  Str_ParseNbr_Int32U (const  CPU_CHAR     *pstr,
                                        CPU_CHAR    **pstr_next,
                                        CPU_INT08U    nbr_base)
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b088      	sub	sp, #32
    4f0c:	af02      	add	r7, sp, #8
    4f0e:	60f8      	str	r0, [r7, #12]
    4f10:	60b9      	str	r1, [r7, #8]
    4f12:	4613      	mov	r3, r2
    4f14:	71fb      	strb	r3, [r7, #7]
    CPU_INT32U  nbr;


    nbr = Str_ParseNbr_Int32(               pstr,               /* Parse/convert str ...                                */
    4f16:	79fb      	ldrb	r3, [r7, #7]
    4f18:	f04f 0200 	mov.w	r2, #0
    4f1c:	9200      	str	r2, [sp, #0]
    4f1e:	68f8      	ldr	r0, [r7, #12]
    4f20:	68b9      	ldr	r1, [r7, #8]
    4f22:	461a      	mov	r2, r3
    4f24:	f04f 0300 	mov.w	r3, #0
    4f28:	f000 f99a 	bl	5260 <Str_ParseNbr_Int32>
    4f2c:	6178      	str	r0, [r7, #20]
                                            pstr_next,
                                            nbr_base,
                                            DEF_NO,             /* ... as unsigned int (see Note #2a2).                 */
                             (CPU_BOOLEAN *)0);

    return (nbr);
    4f2e:	697b      	ldr	r3, [r7, #20]
}
    4f30:	4618      	mov	r0, r3
    4f32:	f107 0718 	add.w	r7, r7, #24
    4f36:	46bd      	mov	sp, r7
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	bf00      	nop

00004f3c <Str_ParseNbr_Int32S>:
*/

CPU_INT32S  Str_ParseNbr_Int32S (const  CPU_CHAR     *pstr,
                                        CPU_CHAR    **pstr_next,
                                        CPU_INT08U    nbr_base)
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b08a      	sub	sp, #40	; 0x28
    4f40:	af02      	add	r7, sp, #8
    4f42:	60f8      	str	r0, [r7, #12]
    4f44:	60b9      	str	r1, [r7, #8]
    4f46:	4613      	mov	r3, r2
    4f48:	71fb      	strb	r3, [r7, #7]
    CPU_INT32S   nbr;
    CPU_INT32U   nbr_abs;
    CPU_BOOLEAN  nbr_neg;


    nbr_abs = Str_ParseNbr_Int32(pstr,                          /* Parse/convert str ...                                */
    4f4a:	79fb      	ldrb	r3, [r7, #7]
    4f4c:	f107 0217 	add.w	r2, r7, #23
    4f50:	9200      	str	r2, [sp, #0]
    4f52:	68f8      	ldr	r0, [r7, #12]
    4f54:	68b9      	ldr	r1, [r7, #8]
    4f56:	461a      	mov	r2, r3
    4f58:	f04f 0301 	mov.w	r3, #1
    4f5c:	f000 f980 	bl	5260 <Str_ParseNbr_Int32>
    4f60:	61b8      	str	r0, [r7, #24]
                                 pstr_next,
                                 nbr_base,
                                 DEF_YES,                       /* ... as signed int (see Note #2a2).                   */
                                &nbr_neg);

    if (nbr_neg == DEF_NO) {                                    /* Chk for neg nbr & ovf/undf (see Note #2a3A1).        */
    4f62:	7dfb      	ldrb	r3, [r7, #23]
    4f64:	2b00      	cmp	r3, #0
    4f66:	d108      	bne.n	4f7a <Str_ParseNbr_Int32S+0x3e>
        nbr = (nbr_abs > (CPU_INT32U) DEF_INT_32S_MAX_VAL)          ?  (CPU_INT32S)DEF_INT_32S_MAX_VAL
    4f68:	69bb      	ldr	r3, [r7, #24]
                                                                    :  (CPU_INT32S)nbr_abs;
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	db01      	blt.n	4f72 <Str_ParseNbr_Int32S+0x36>
    4f6e:	69bb      	ldr	r3, [r7, #24]
    4f70:	e001      	b.n	4f76 <Str_ParseNbr_Int32S+0x3a>
    4f72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                 nbr_base,
                                 DEF_YES,                       /* ... as signed int (see Note #2a2).                   */
                                &nbr_neg);

    if (nbr_neg == DEF_NO) {                                    /* Chk for neg nbr & ovf/undf (see Note #2a3A1).        */
        nbr = (nbr_abs > (CPU_INT32U) DEF_INT_32S_MAX_VAL)          ?  (CPU_INT32S)DEF_INT_32S_MAX_VAL
    4f76:	61fb      	str	r3, [r7, #28]
    4f78:	e009      	b.n	4f8e <Str_ParseNbr_Int32S+0x52>
                                                                    :  (CPU_INT32S)nbr_abs;
    } else {
        nbr = (nbr_abs > (CPU_INT32U)-DEF_INT_32S_MIN_VAL_ONES_CPL) ?  (CPU_INT32S)DEF_INT_32S_MIN_VAL
    4f7a:	69bb      	ldr	r3, [r7, #24]
                                                                    : -(CPU_INT32S)nbr_abs;
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	db03      	blt.n	4f88 <Str_ParseNbr_Int32S+0x4c>
    4f80:	69bb      	ldr	r3, [r7, #24]
    4f82:	f1c3 0300 	rsb	r3, r3, #0
    4f86:	e001      	b.n	4f8c <Str_ParseNbr_Int32S+0x50>
    4f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000

    if (nbr_neg == DEF_NO) {                                    /* Chk for neg nbr & ovf/undf (see Note #2a3A1).        */
        nbr = (nbr_abs > (CPU_INT32U) DEF_INT_32S_MAX_VAL)          ?  (CPU_INT32S)DEF_INT_32S_MAX_VAL
                                                                    :  (CPU_INT32S)nbr_abs;
    } else {
        nbr = (nbr_abs > (CPU_INT32U)-DEF_INT_32S_MIN_VAL_ONES_CPL) ?  (CPU_INT32S)DEF_INT_32S_MIN_VAL
    4f8c:	61fb      	str	r3, [r7, #28]
                                                                    : -(CPU_INT32S)nbr_abs;
    }

    return (nbr);
    4f8e:	69fb      	ldr	r3, [r7, #28]
}
    4f90:	4618      	mov	r0, r3
    4f92:	f107 0720 	add.w	r7, r7, #32
    4f96:	46bd      	mov	sp, r7
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	bf00      	nop

00004f9c <Str_FmtNbr_Int32>:
                                     CPU_BOOLEAN   nbr_neg,
                                     CPU_CHAR      lead_char,
                                     CPU_BOOLEAN   lower_case,
                                     CPU_BOOLEAN   nul,
                                     CPU_CHAR     *pstr)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b08a      	sub	sp, #40	; 0x28
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
    4fa4:	70f9      	strb	r1, [r7, #3]
    4fa6:	70ba      	strb	r2, [r7, #2]
    4fa8:	707b      	strb	r3, [r7, #1]
    CPU_BOOLEAN   nbr_neg_fmtd;


/*$PAGE*/
                                                                /* ---------------- VALIDATE FMT ARGS ----------------- */
    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if str ptr NULL (see Note #6a).             */
    4faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4fac:	2b00      	cmp	r3, #0
    4fae:	d102      	bne.n	4fb6 <Str_FmtNbr_Int32+0x1a>
        return ((CPU_CHAR *)0);
    4fb0:	f04f 0300 	mov.w	r3, #0
    4fb4:	e14e      	b.n	5254 <Str_FmtNbr_Int32+0x2b8>
    }

    fmt_invalid = DEF_NO;
    4fb6:	f04f 0300 	mov.w	r3, #0
    4fba:	757b      	strb	r3, [r7, #21]

    if (nbr_dig < 1) {                                          /* If nbr digs = 0, ...                                 */
    4fbc:	78fb      	ldrb	r3, [r7, #3]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d102      	bne.n	4fc8 <Str_FmtNbr_Int32+0x2c>
        fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6b).                  */
    4fc2:	f04f 0301 	mov.w	r3, #1
    4fc6:	757b      	strb	r3, [r7, #21]
    }
                                                                /* If invalid base, ...                                 */
    if ((nbr_base <  2) ||
    4fc8:	78bb      	ldrb	r3, [r7, #2]
    4fca:	2b01      	cmp	r3, #1
    4fcc:	d902      	bls.n	4fd4 <Str_FmtNbr_Int32+0x38>
    4fce:	78bb      	ldrb	r3, [r7, #2]
    4fd0:	2b24      	cmp	r3, #36	; 0x24
    4fd2:	d902      	bls.n	4fda <Str_FmtNbr_Int32+0x3e>
        (nbr_base > 36)) {
        fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6d).                  */
    4fd4:	f04f 0301 	mov.w	r3, #1
    4fd8:	757b      	strb	r3, [r7, #21]
    }

    if (lead_char != (CPU_CHAR)'\0') {
    4fda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d044      	beq.n	506c <Str_FmtNbr_Int32+0xd0>
        print_char =  ASCII_IsPrint(lead_char);
    4fe2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    4fe6:	4618      	mov	r0, r3
    4fe8:	f7ff fa3c 	bl	4464 <ASCII_IsPrint>
    4fec:	4603      	mov	r3, r0
    4fee:	74fb      	strb	r3, [r7, #19]
        if (print_char != DEF_YES) {                            /* If lead char non-printable (see Note #3a1), ...      */
    4ff0:	7cfb      	ldrb	r3, [r7, #19]
    4ff2:	2b01      	cmp	r3, #1
    4ff4:	d003      	beq.n	4ffe <Str_FmtNbr_Int32+0x62>
            fmt_invalid = DEF_YES;                              /* ... fmt invalid str        (see Note #6e).           */
    4ff6:	f04f 0301 	mov.w	r3, #1
    4ffa:	757b      	strb	r3, [r7, #21]
    4ffc:	e036      	b.n	506c <Str_FmtNbr_Int32+0xd0>

        } else if (lead_char != '0') {                          /* Chk lead char for non-0 nbr base dig.                */
    4ffe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    5002:	2b30      	cmp	r3, #48	; 0x30
    5004:	d032      	beq.n	506c <Str_FmtNbr_Int32+0xd0>
            lead_char_delta_0 = (CPU_INT08U)(lead_char - '0');
    5006:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    500a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    500e:	74bb      	strb	r3, [r7, #18]
            if (lower_case != DEF_YES) {
    5010:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    5014:	2b01      	cmp	r3, #1
    5016:	d005      	beq.n	5024 <Str_FmtNbr_Int32+0x88>
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'A');
    5018:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    501c:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    5020:	75fb      	strb	r3, [r7, #23]
    5022:	e004      	b.n	502e <Str_FmtNbr_Int32+0x92>
            } else {
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
    5024:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    5028:	f1a3 0361 	sub.w	r3, r3, #97	; 0x61
    502c:	75fb      	strb	r3, [r7, #23]
            }

            lead_char_dig = (((nbr_base <= 10) &&  (lead_char_delta_0 <  nbr_base))     ||
    502e:	78bb      	ldrb	r3, [r7, #2]
    5030:	2b0a      	cmp	r3, #10
    5032:	d803      	bhi.n	503c <Str_FmtNbr_Int32+0xa0>
    5034:	7cba      	ldrb	r2, [r7, #18]
    5036:	78bb      	ldrb	r3, [r7, #2]
    5038:	429a      	cmp	r2, r3
    503a:	d30b      	bcc.n	5054 <Str_FmtNbr_Int32+0xb8>
                             ((nbr_base >  10) && ((lead_char_delta_0 <             10) ||
                                                   (lead_char_delta_a < (nbr_base - 10))))) ? DEF_YES : DEF_NO;
    503c:	78bb      	ldrb	r3, [r7, #2]
    503e:	2b0a      	cmp	r3, #10
    5040:	d90b      	bls.n	505a <Str_FmtNbr_Int32+0xbe>
            } else {
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
            }

            lead_char_dig = (((nbr_base <= 10) &&  (lead_char_delta_0 <  nbr_base))     ||
                             ((nbr_base >  10) && ((lead_char_delta_0 <             10) ||
    5042:	7cbb      	ldrb	r3, [r7, #18]
    5044:	2b09      	cmp	r3, #9
    5046:	d905      	bls.n	5054 <Str_FmtNbr_Int32+0xb8>
                                                   (lead_char_delta_a < (nbr_base - 10))))) ? DEF_YES : DEF_NO;
    5048:	7dfa      	ldrb	r2, [r7, #23]
    504a:	78bb      	ldrb	r3, [r7, #2]
    504c:	f1a3 030a 	sub.w	r3, r3, #10
            } else {
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
            }

            lead_char_dig = (((nbr_base <= 10) &&  (lead_char_delta_0 <  nbr_base))     ||
                             ((nbr_base >  10) && ((lead_char_delta_0 <             10) ||
    5050:	429a      	cmp	r2, r3
    5052:	da02      	bge.n	505a <Str_FmtNbr_Int32+0xbe>
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'A');
            } else {
                lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
            }

            lead_char_dig = (((nbr_base <= 10) &&  (lead_char_delta_0 <  nbr_base))     ||
    5054:	f04f 0301 	mov.w	r3, #1
    5058:	e001      	b.n	505e <Str_FmtNbr_Int32+0xc2>
    505a:	f04f 0300 	mov.w	r3, #0
    505e:	747b      	strb	r3, [r7, #17]
                             ((nbr_base >  10) && ((lead_char_delta_0 <             10) ||
                                                   (lead_char_delta_a < (nbr_base - 10))))) ? DEF_YES : DEF_NO;

            if (lead_char_dig == DEF_YES) {                     /* If lead char non-0 nbr base dig (see Note #3a2A), ...*/
    5060:	7c7b      	ldrb	r3, [r7, #17]
    5062:	2b01      	cmp	r3, #1
    5064:	d102      	bne.n	506c <Str_FmtNbr_Int32+0xd0>
                fmt_invalid = DEF_YES;                          /* ... fmt invalid str             (see Note #6e).      */
    5066:	f04f 0301 	mov.w	r3, #1
    506a:	757b      	strb	r3, [r7, #21]
        }
    }


                                                                /* ----------------- PREPARE NBR FMT ------------------ */
    pstr_fmt = pstr;
    506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    506e:	627b      	str	r3, [r7, #36]	; 0x24

    if (fmt_invalid == DEF_NO) {
    5070:	7d7b      	ldrb	r3, [r7, #21]
    5072:	2b00      	cmp	r3, #0
    5074:	d153      	bne.n	511e <Str_FmtNbr_Int32+0x182>
        nbr_fmt     = nbr;
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	623b      	str	r3, [r7, #32]
        nbr_log     = nbr;
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	61fb      	str	r3, [r7, #28]
        nbr_dig_max = 1u;
    507e:	f04f 0301 	mov.w	r3, #1
    5082:	76fb      	strb	r3, [r7, #27]
        while (nbr_log >= nbr_base) {                           /* While nbr base digs avail, ...                       */
    5084:	e008      	b.n	5098 <Str_FmtNbr_Int32+0xfc>
            nbr_dig_max++;                                      /* ... calc max nbr digs.                               */
    5086:	7efb      	ldrb	r3, [r7, #27]
    5088:	f103 0301 	add.w	r3, r3, #1
    508c:	76fb      	strb	r3, [r7, #27]
            nbr_log /= nbr_base;
    508e:	78bb      	ldrb	r3, [r7, #2]
    5090:	69fa      	ldr	r2, [r7, #28]
    5092:	fbb2 f3f3 	udiv	r3, r2, r3
    5096:	61fb      	str	r3, [r7, #28]

    if (fmt_invalid == DEF_NO) {
        nbr_fmt     = nbr;
        nbr_log     = nbr;
        nbr_dig_max = 1u;
        while (nbr_log >= nbr_base) {                           /* While nbr base digs avail, ...                       */
    5098:	78ba      	ldrb	r2, [r7, #2]
    509a:	69fb      	ldr	r3, [r7, #28]
    509c:	429a      	cmp	r2, r3
    509e:	d9f2      	bls.n	5086 <Str_FmtNbr_Int32+0xea>
            nbr_dig_max++;                                      /* ... calc max nbr digs.                               */
            nbr_log /= nbr_base;
        }

        nbr_neg_sign = (nbr_neg == DEF_YES) ? 1u : 0u;
    50a0:	787b      	ldrb	r3, [r7, #1]
    50a2:	2b01      	cmp	r3, #1
    50a4:	d102      	bne.n	50ac <Str_FmtNbr_Int32+0x110>
    50a6:	f04f 0301 	mov.w	r3, #1
    50aa:	e001      	b.n	50b0 <Str_FmtNbr_Int32+0x114>
    50ac:	f04f 0300 	mov.w	r3, #0
    50b0:	743b      	strb	r3, [r7, #16]
        if (nbr_dig >= (nbr_dig_max + nbr_neg_sign)) {          /* If req'd nbr digs >= (max nbr digs + neg sign), ...  */
    50b2:	78fa      	ldrb	r2, [r7, #3]
    50b4:	7ef9      	ldrb	r1, [r7, #27]
    50b6:	7c3b      	ldrb	r3, [r7, #16]
    50b8:	18cb      	adds	r3, r1, r3
    50ba:	429a      	cmp	r2, r3
    50bc:	db2c      	blt.n	5118 <Str_FmtNbr_Int32+0x17c>
            nbr_neg_fmtd = DEF_NO;
    50be:	f04f 0300 	mov.w	r3, #0
    50c2:	753b      	strb	r3, [r7, #20]
            nbr_dig_min  = DEF_MIN(nbr_dig_max, nbr_dig);
    50c4:	78fa      	ldrb	r2, [r7, #3]
    50c6:	7efb      	ldrb	r3, [r7, #27]
    50c8:	429a      	cmp	r2, r3
    50ca:	bf38      	it	cc
    50cc:	4613      	movcc	r3, r2
    50ce:	73fb      	strb	r3, [r7, #15]
                                                                /* ... calc nbr digs to fmt & nbr lead chars.           */
            if (lead_char != (CPU_CHAR)'\0') {
    50d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    50d4:	2b00      	cmp	r3, #0
    50d6:	d009      	beq.n	50ec <Str_FmtNbr_Int32+0x150>
                nbr_dig_fmtd  = nbr_dig;
    50d8:	78fb      	ldrb	r3, [r7, #3]
    50da:	76bb      	strb	r3, [r7, #26]
                nbr_lead_char = nbr_dig     -
    50dc:	78fa      	ldrb	r2, [r7, #3]
    50de:	7bfb      	ldrb	r3, [r7, #15]
    50e0:	1ad3      	subs	r3, r2, r3
    50e2:	b2da      	uxtb	r2, r3
    50e4:	7c3b      	ldrb	r3, [r7, #16]
    50e6:	1ad3      	subs	r3, r2, r3
    50e8:	767b      	strb	r3, [r7, #25]
    50ea:	e006      	b.n	50fa <Str_FmtNbr_Int32+0x15e>
                                nbr_dig_min - nbr_neg_sign;
            } else {
                nbr_dig_fmtd  = nbr_dig_min + nbr_neg_sign;
    50ec:	7bfa      	ldrb	r2, [r7, #15]
    50ee:	7c3b      	ldrb	r3, [r7, #16]
    50f0:	18d3      	adds	r3, r2, r3
    50f2:	76bb      	strb	r3, [r7, #26]
                nbr_lead_char = 0u;
    50f4:	f04f 0300 	mov.w	r3, #0
    50f8:	767b      	strb	r3, [r7, #25]
            }

            if (nbr_lead_char > 0) {                            /* If lead chars to fmt, ...                            */
    50fa:	7e7b      	ldrb	r3, [r7, #25]
    50fc:	2b00      	cmp	r3, #0
    50fe:	d007      	beq.n	5110 <Str_FmtNbr_Int32+0x174>
                lead_char_0 = (lead_char == '0')                /* ... chk if lead char a '0' dig (see Note #3a2B).     */
    5100:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    5104:	2b30      	cmp	r3, #48	; 0x30
    5106:	bf14      	ite	ne
    5108:	2300      	movne	r3, #0
    510a:	2301      	moveq	r3, #1
    510c:	75bb      	strb	r3, [r7, #22]
    510e:	e006      	b.n	511e <Str_FmtNbr_Int32+0x182>
                            ?  DEF_YES : DEF_NO;
            } else {
                lead_char_0 =  DEF_NO;
    5110:	f04f 0300 	mov.w	r3, #0
    5114:	75bb      	strb	r3, [r7, #22]
    5116:	e002      	b.n	511e <Str_FmtNbr_Int32+0x182>
            }

        } else {                                                /* Else if nbr trunc'd, ...                             */
            fmt_invalid = DEF_YES;                              /* ... fmt invalid str (see Note #6c).                  */
    5118:	f04f 0301 	mov.w	r3, #1
    511c:	757b      	strb	r3, [r7, #21]
        }
    }

    if (fmt_invalid != DEF_NO) {
    511e:	7d7b      	ldrb	r3, [r7, #21]
    5120:	2b00      	cmp	r3, #0
    5122:	d001      	beq.n	5128 <Str_FmtNbr_Int32+0x18c>
        nbr_dig_fmtd = nbr_dig;
    5124:	78fb      	ldrb	r3, [r7, #3]
    5126:	76bb      	strb	r3, [r7, #26]
    }


/*$PAGE*/
                                                                /* ------------------- FMT NBR STR -------------------- */
    pstr_fmt += nbr_dig_fmtd;                                   /* Start fmt @ least-sig dig.                           */
    5128:	7ebb      	ldrb	r3, [r7, #26]
    512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    512c:	18d3      	adds	r3, r2, r3
    512e:	627b      	str	r3, [r7, #36]	; 0x24

    if (nul != DEF_NO) {                                        /* If NOT DISABLED, append NULL char (see Note #4).     */
    5130:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5134:	2b00      	cmp	r3, #0
    5136:	d003      	beq.n	5140 <Str_FmtNbr_Int32+0x1a4>
       *pstr_fmt = (CPU_CHAR)'\0';
    5138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    513a:	f04f 0200 	mov.w	r2, #0
    513e:	701a      	strb	r2, [r3, #0]
    }
    pstr_fmt--;
    5140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5142:	f103 33ff 	add.w	r3, r3, #4294967295
    5146:	627b      	str	r3, [r7, #36]	; 0x24


    for (i = 0u; i < nbr_dig_fmtd; i++) {                       /* Fmt str for desired nbr digs :                       */
    5148:	f04f 0300 	mov.w	r3, #0
    514c:	763b      	strb	r3, [r7, #24]
    514e:	e076      	b.n	523e <Str_FmtNbr_Int32+0x2a2>
        if (fmt_invalid == DEF_NO) {
    5150:	7d7b      	ldrb	r3, [r7, #21]
    5152:	2b00      	cmp	r3, #0
    5154:	d165      	bne.n	5222 <Str_FmtNbr_Int32+0x286>
            if ((nbr_fmt > 0) ||                                /* If fmt nbr > 0                               ...     */
    5156:	6a3b      	ldr	r3, [r7, #32]
    5158:	2b00      	cmp	r3, #0
    515a:	d102      	bne.n	5162 <Str_FmtNbr_Int32+0x1c6>
    515c:	7e3b      	ldrb	r3, [r7, #24]
    515e:	2b00      	cmp	r3, #0
    5160:	d134      	bne.n	51cc <Str_FmtNbr_Int32+0x230>
                (i == 0)) {                                     /* ... OR on one's  dig to fmt (see Note #3c1), ...     */
                                                                /* ... calc & fmt dig val;                      ...     */
                dig_val = (CPU_INT08U)(nbr_fmt % nbr_base);
    5162:	78ba      	ldrb	r2, [r7, #2]
    5164:	6a3b      	ldr	r3, [r7, #32]
    5166:	fbb3 f1f2 	udiv	r1, r3, r2
    516a:	fb02 f201 	mul.w	r2, r2, r1
    516e:	1a9b      	subs	r3, r3, r2
    5170:	73bb      	strb	r3, [r7, #14]
                if (dig_val <= 9) {
    5172:	7bbb      	ldrb	r3, [r7, #14]
    5174:	2b09      	cmp	r3, #9
    5176:	d80a      	bhi.n	518e <Str_FmtNbr_Int32+0x1f2>
                   *pstr_fmt-- = (CPU_CHAR)(dig_val + '0');
    5178:	7bbb      	ldrb	r3, [r7, #14]
    517a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    517e:	b2da      	uxtb	r2, r3
    5180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5182:	701a      	strb	r2, [r3, #0]
    5184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5186:	f103 33ff 	add.w	r3, r3, #4294967295
    518a:	627b      	str	r3, [r7, #36]	; 0x24
    518c:	e018      	b.n	51c0 <Str_FmtNbr_Int32+0x224>
                } else {
                    if (lower_case !=  DEF_YES) {
    518e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    5192:	2b01      	cmp	r3, #1
    5194:	d00a      	beq.n	51ac <Str_FmtNbr_Int32+0x210>
                       *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'A');
    5196:	7bbb      	ldrb	r3, [r7, #14]
    5198:	f103 0337 	add.w	r3, r3, #55	; 0x37
    519c:	b2da      	uxtb	r2, r3
    519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51a0:	701a      	strb	r2, [r3, #0]
    51a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51a4:	f103 33ff 	add.w	r3, r3, #4294967295
    51a8:	627b      	str	r3, [r7, #36]	; 0x24
    51aa:	e009      	b.n	51c0 <Str_FmtNbr_Int32+0x224>
                    } else {
                       *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'a');
    51ac:	7bbb      	ldrb	r3, [r7, #14]
    51ae:	f103 0357 	add.w	r3, r3, #87	; 0x57
    51b2:	b2da      	uxtb	r2, r3
    51b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51b6:	701a      	strb	r2, [r3, #0]
    51b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51ba:	f103 33ff 	add.w	r3, r3, #4294967295
    51be:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                nbr_fmt /= nbr_base;                            /* Shift to next more-sig dig.                          */
    51c0:	78bb      	ldrb	r3, [r7, #2]
    51c2:	6a3a      	ldr	r2, [r7, #32]
    51c4:	fbb2 f3f3 	udiv	r3, r2, r3
    51c8:	623b      	str	r3, [r7, #32]
    51ca:	e034      	b.n	5236 <Str_FmtNbr_Int32+0x29a>

            } else if ((nbr_neg      == DEF_YES)  &&            /* ... else if nbr neg             AND          ...     */
    51cc:	787b      	ldrb	r3, [r7, #1]
    51ce:	2b01      	cmp	r3, #1
    51d0:	d11a      	bne.n	5208 <Str_FmtNbr_Int32+0x26c>
    51d2:	7dbb      	ldrb	r3, [r7, #22]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d102      	bne.n	51de <Str_FmtNbr_Int32+0x242>
                     (((lead_char_0  == DEF_NO )  &&            /* ... lead char NOT a '0' dig                  ...     */
    51d8:	7d3b      	ldrb	r3, [r7, #20]
    51da:	2b00      	cmp	r3, #0
    51dc:	d008      	beq.n	51f0 <Str_FmtNbr_Int32+0x254>
                       (nbr_neg_fmtd == DEF_NO )) ||            /* ... but neg sign NOT yet fmt'd  OR           ...     */
    51de:	7dbb      	ldrb	r3, [r7, #22]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d011      	beq.n	5208 <Str_FmtNbr_Int32+0x26c>
                      ((lead_char_0  != DEF_NO )  &&            /* ... lead char is  a '0' dig                  ...     */
                       (i == (nbr_dig_fmtd - 1))))) {           /* ... & on most-sig dig to fmt,                ...     */
    51e4:	7e3a      	ldrb	r2, [r7, #24]
    51e6:	7ebb      	ldrb	r3, [r7, #26]
    51e8:	f103 33ff 	add.w	r3, r3, #4294967295
                nbr_fmt /= nbr_base;                            /* Shift to next more-sig dig.                          */

            } else if ((nbr_neg      == DEF_YES)  &&            /* ... else if nbr neg             AND          ...     */
                     (((lead_char_0  == DEF_NO )  &&            /* ... lead char NOT a '0' dig                  ...     */
                       (nbr_neg_fmtd == DEF_NO )) ||            /* ... but neg sign NOT yet fmt'd  OR           ...     */
                      ((lead_char_0  != DEF_NO )  &&            /* ... lead char is  a '0' dig                  ...     */
    51ec:	429a      	cmp	r2, r3
    51ee:	d10b      	bne.n	5208 <Str_FmtNbr_Int32+0x26c>
                       (i == (nbr_dig_fmtd - 1))))) {           /* ... & on most-sig dig to fmt,                ...     */

               *pstr_fmt--   = '-';                             /* ... prepend neg sign (see Note #3b);         ...     */
    51f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51f2:	f04f 022d 	mov.w	r2, #45	; 0x2d
    51f6:	701a      	strb	r2, [r3, #0]
    51f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51fa:	f103 33ff 	add.w	r3, r3, #4294967295
    51fe:	627b      	str	r3, [r7, #36]	; 0x24
                nbr_neg_fmtd = DEF_YES;
    5200:	f04f 0301 	mov.w	r3, #1
    5204:	753b      	strb	r3, [r7, #20]
    5206:	e016      	b.n	5236 <Str_FmtNbr_Int32+0x29a>

            } else if (lead_char != (CPU_CHAR)'\0') {           /* ... else if avail,                           ...     */
    5208:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    520c:	2b00      	cmp	r3, #0
    520e:	d011      	beq.n	5234 <Str_FmtNbr_Int32+0x298>
               *pstr_fmt-- = lead_char;                         /* ... fmt lead char.                                   */
    5210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5212:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    5216:	701a      	strb	r2, [r3, #0]
    5218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    521a:	f103 33ff 	add.w	r3, r3, #4294967295
    521e:	627b      	str	r3, [r7, #36]	; 0x24
    5220:	e008      	b.n	5234 <Str_FmtNbr_Int32+0x298>
            }

        } else {                                                /* Else fmt '?' for invalid str (see Note #7).          */
           *pstr_fmt-- = '?';
    5222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5224:	f04f 023f 	mov.w	r2, #63	; 0x3f
    5228:	701a      	strb	r2, [r3, #0]
    522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    522c:	f103 33ff 	add.w	r3, r3, #4294967295
    5230:	627b      	str	r3, [r7, #36]	; 0x24
    5232:	e000      	b.n	5236 <Str_FmtNbr_Int32+0x29a>

               *pstr_fmt--   = '-';                             /* ... prepend neg sign (see Note #3b);         ...     */
                nbr_neg_fmtd = DEF_YES;

            } else if (lead_char != (CPU_CHAR)'\0') {           /* ... else if avail,                           ...     */
               *pstr_fmt-- = lead_char;                         /* ... fmt lead char.                                   */
    5234:	bf00      	nop
       *pstr_fmt = (CPU_CHAR)'\0';
    }
    pstr_fmt--;


    for (i = 0u; i < nbr_dig_fmtd; i++) {                       /* Fmt str for desired nbr digs :                       */
    5236:	7e3b      	ldrb	r3, [r7, #24]
    5238:	f103 0301 	add.w	r3, r3, #1
    523c:	763b      	strb	r3, [r7, #24]
    523e:	7e3a      	ldrb	r2, [r7, #24]
    5240:	7ebb      	ldrb	r3, [r7, #26]
    5242:	429a      	cmp	r2, r3
    5244:	d384      	bcc.n	5150 <Str_FmtNbr_Int32+0x1b4>
           *pstr_fmt-- = '?';
        }
    }


    if (fmt_invalid != DEF_NO) {                                /* Rtn NULL for invalid str fmt (see Notes #6a - #6e).  */
    5246:	7d7b      	ldrb	r3, [r7, #21]
    5248:	2b00      	cmp	r3, #0
    524a:	d002      	beq.n	5252 <Str_FmtNbr_Int32+0x2b6>
        return ((CPU_CHAR *)0);
    524c:	f04f 0300 	mov.w	r3, #0
    5250:	e000      	b.n	5254 <Str_FmtNbr_Int32+0x2b8>
    }


    return (pstr);                                              /* Rtn ptr to fmt'd str (see Note #6f).                 */
    5252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    5254:	4618      	mov	r0, r3
    5256:	f107 0728 	add.w	r7, r7, #40	; 0x28
    525a:	46bd      	mov	sp, r7
    525c:	bd80      	pop	{r7, pc}
    525e:	bf00      	nop

00005260 <Str_ParseNbr_Int32>:
static  CPU_INT32U  Str_ParseNbr_Int32 (const  CPU_CHAR      *pstr,
                                               CPU_CHAR     **pstr_next,
                                               CPU_INT08U     nbr_base,
                                               CPU_BOOLEAN    nbr_signed,
                                               CPU_BOOLEAN   *pnbr_neg)
{
    5260:	b580      	push	{r7, lr}
    5262:	b08e      	sub	sp, #56	; 0x38
    5264:	af00      	add	r7, sp, #0
    5266:	60f8      	str	r0, [r7, #12]
    5268:	60b9      	str	r1, [r7, #8]
    526a:	71fa      	strb	r2, [r7, #7]
    526c:	71bb      	strb	r3, [r7, #6]
           CPU_BOOLEAN   neg;
           CPU_BOOLEAN   ovf;
           CPU_BOOLEAN   done;

                                                                /* --------------- VALIDATE PARSE ARGS ---------------- */
    if (pstr_next == (CPU_CHAR **) 0) {                         /* If NOT avail, ...                                    */
    526e:	68bb      	ldr	r3, [r7, #8]
    5270:	2b00      	cmp	r3, #0
    5272:	d102      	bne.n	527a <Str_ParseNbr_Int32+0x1a>
        pstr_next  = (CPU_CHAR **)&pstr_parse_unused;           /* ... re-cfg NULL rtn ptr to unused local var.         */
    5274:	f107 0318 	add.w	r3, r7, #24
    5278:	60bb      	str	r3, [r7, #8]
       (void)&pstr_parse_unused;                                /* Prevent possible 'variable unused' warning.          */
    }
   *pstr_next = (CPU_CHAR *)pstr;                               /* Init rtn str for err (see Note #5).                  */
    527a:	68bb      	ldr	r3, [r7, #8]
    527c:	68fa      	ldr	r2, [r7, #12]
    527e:	601a      	str	r2, [r3, #0]

    if (pnbr_neg == (CPU_BOOLEAN *) 0) {                        /* If NOT avail, ...                                    */
    5280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5282:	2b00      	cmp	r3, #0
    5284:	d102      	bne.n	528c <Str_ParseNbr_Int32+0x2c>
        pnbr_neg  = (CPU_BOOLEAN *)&nbr_neg_unused;             /* ... re-cfg NULL rtn ptr to unused local var.         */
    5286:	f107 0317 	add.w	r3, r7, #23
    528a:	643b      	str	r3, [r7, #64]	; 0x40
       (void)&nbr_neg_unused;                                   /* Prevent possible 'variable unused' warning.          */
    }
   *pnbr_neg = DEF_NO;                                          /* Init nbr neg for err (see Note #5).                  */
    528c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    528e:	f04f 0200 	mov.w	r2, #0
    5292:	701a      	strb	r2, [r3, #0]


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn zero if str ptr NULL (see Note #4b1).            */
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	2b00      	cmp	r3, #0
    5298:	d102      	bne.n	52a0 <Str_ParseNbr_Int32+0x40>
        return (0u);
    529a:	f04f 0300 	mov.w	r3, #0
    529e:	e14b      	b.n	5538 <Str_ParseNbr_Int32+0x2d8>
    }
                                                                /* Rtn zero if invalid base (see Note #4a).             */
    if ((nbr_base == 1) ||
    52a0:	79fb      	ldrb	r3, [r7, #7]
    52a2:	2b01      	cmp	r3, #1
    52a4:	d002      	beq.n	52ac <Str_ParseNbr_Int32+0x4c>
    52a6:	79fb      	ldrb	r3, [r7, #7]
    52a8:	2b24      	cmp	r3, #36	; 0x24
    52aa:	d902      	bls.n	52b2 <Str_ParseNbr_Int32+0x52>
        (nbr_base > 36)) {
        return (0u);
    52ac:	f04f 0300 	mov.w	r3, #0
    52b0:	e142      	b.n	5538 <Str_ParseNbr_Int32+0x2d8>
    }


                                                                /* ------------- IGNORE PRECEDING CHAR(S) ------------- */
    pstr_parse = pstr;                                          /* Save ptr to init'l str for err (see Note #2a2A2).    */
    52b2:	68fb      	ldr	r3, [r7, #12]
    52b4:	637b      	str	r3, [r7, #52]	; 0x34

    whitespace = ASCII_IsSpace(*pstr_parse);
    52b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52b8:	781b      	ldrb	r3, [r3, #0]
    52ba:	4618      	mov	r0, r3
    52bc:	f7ff f8ae 	bl	441c <ASCII_IsSpace>
    52c0:	4603      	mov	r3, r0
    52c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (whitespace == DEF_YES) {                             /* Ignore initial white-space char(s) [see Note #2a1A]. */
    52c6:	e00b      	b.n	52e0 <Str_ParseNbr_Int32+0x80>
        pstr_parse++;
    52c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ca:	f103 0301 	add.w	r3, r3, #1
    52ce:	637b      	str	r3, [r7, #52]	; 0x34
        whitespace = ASCII_IsSpace(*pstr_parse);
    52d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52d2:	781b      	ldrb	r3, [r3, #0]
    52d4:	4618      	mov	r0, r3
    52d6:	f7ff f8a1 	bl	441c <ASCII_IsSpace>
    52da:	4603      	mov	r3, r0
    52dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                                                                /* ------------- IGNORE PRECEDING CHAR(S) ------------- */
    pstr_parse = pstr;                                          /* Save ptr to init'l str for err (see Note #2a2A2).    */

    whitespace = ASCII_IsSpace(*pstr_parse);
    while (whitespace == DEF_YES) {                             /* Ignore initial white-space char(s) [see Note #2a1A]. */
    52e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    52e4:	2b01      	cmp	r3, #1
    52e6:	d0ef      	beq.n	52c8 <Str_ParseNbr_Int32+0x68>
        pstr_parse++;
        whitespace = ASCII_IsSpace(*pstr_parse);
    }

    switch (*pstr_parse) {
    52e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ea:	781b      	ldrb	r3, [r3, #0]
    52ec:	2b2b      	cmp	r3, #43	; 0x2b
    52ee:	d002      	beq.n	52f6 <Str_ParseNbr_Int32+0x96>
    52f0:	2b2d      	cmp	r3, #45	; 0x2d
    52f2:	d009      	beq.n	5308 <Str_ParseNbr_Int32+0xa8>
    52f4:	e014      	b.n	5320 <Str_ParseNbr_Int32+0xc0>
        case '+':                                               /* Ignore   pos sign (see Note #2a1B2).                 */
             pstr_parse++;
    52f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52f8:	f103 0301 	add.w	r3, r3, #1
    52fc:	637b      	str	r3, [r7, #52]	; 0x34
             neg = DEF_NO;
    52fe:	f04f 0300 	mov.w	r3, #0
    5302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
             break;
    5306:	e010      	b.n	532a <Str_ParseNbr_Int32+0xca>


        case '-':                                               /* Validate neg sign (see Note #2a1B2a).                */
             if (nbr_signed == DEF_YES) {
    5308:	79bb      	ldrb	r3, [r7, #6]
    530a:	2b01      	cmp	r3, #1
    530c:	d103      	bne.n	5316 <Str_ParseNbr_Int32+0xb6>
                 pstr_parse++;
    530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5310:	f103 0301 	add.w	r3, r3, #1
    5314:	637b      	str	r3, [r7, #52]	; 0x34
             }
             neg = DEF_YES;
    5316:	f04f 0301 	mov.w	r3, #1
    531a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
             break;
    531e:	e004      	b.n	532a <Str_ParseNbr_Int32+0xca>


        default:
             neg = DEF_NO;
    5320:	f04f 0300 	mov.w	r3, #0
    5324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
             break;
    5328:	bf00      	nop
    }


/*$PAGE*/
                                                                /* --------- IGNORE NBR BASE PRECEDING CHAR(S) -------- */
    pstr_parse_nbr = pstr_parse;                                /* Save ptr to str's nbr (see Note #2a1A1).             */
    532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    532c:	627b      	str	r3, [r7, #36]	; 0x24

    switch (nbr_base) {
    532e:	79fb      	ldrb	r3, [r7, #7]
    5330:	2b08      	cmp	r3, #8
    5332:	d034      	beq.n	539e <Str_ParseNbr_Int32+0x13e>
    5334:	2b10      	cmp	r3, #16
    5336:	d03b      	beq.n	53b0 <Str_ParseNbr_Int32+0x150>
    5338:	2b00      	cmp	r3, #0
    533a:	d15f      	bne.n	53fc <Str_ParseNbr_Int32+0x19c>
        case  0u:                                               /* Determine unspecified nbr base (see Notes #2a1B1a).  */
             if (*pstr_parse == '0') {                          /* If avail, ...                                        */
    533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	2b30      	cmp	r3, #48	; 0x30
    5342:	d128      	bne.n	5396 <Str_ParseNbr_Int32+0x136>
                  pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
    5344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5346:	f103 0301 	add.w	r3, r3, #1
    534a:	637b      	str	r3, [r7, #52]	; 0x34
                  switch (*pstr_parse) {
    534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    534e:	781b      	ldrb	r3, [r3, #0]
    5350:	2b58      	cmp	r3, #88	; 0x58
    5352:	d001      	beq.n	5358 <Str_ParseNbr_Int32+0xf8>
    5354:	2b78      	cmp	r3, #120	; 0x78
    5356:	d117      	bne.n	5388 <Str_ParseNbr_Int32+0x128>
                      case 'x':                                 /* For '0x' prefix, ...                                 */
                      case 'X':
                           nbr_base   = 16u;                    /* ... set nbr base = 16    (see Note #2a1B1a3).        */
    5358:	f04f 0310 	mov.w	r3, #16
    535c:	71fb      	strb	r3, [r7, #7]
                           parse_char = (CPU_CHAR)(*(pstr_parse + 1));
    535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5360:	785b      	ldrb	r3, [r3, #1]
    5362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           nbr_hex    =  ASCII_IsDigHex(parse_char);
    5366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    536a:	4618      	mov	r0, r3
    536c:	f7ff f81a 	bl	43a4 <ASCII_IsDigHex>
    5370:	4603      	mov	r3, r0
    5372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                           if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
    5376:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    537a:	2b01      	cmp	r3, #1
    537c:	d109      	bne.n	5392 <Str_ParseNbr_Int32+0x132>
                               pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
    537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5380:	f103 0301 	add.w	r3, r3, #1
    5384:	637b      	str	r3, [r7, #52]	; 0x34
                           }
                           break;
    5386:	e004      	b.n	5392 <Str_ParseNbr_Int32+0x132>


                      default:                                  /* For '0'  prefix, ...                                 */
                           nbr_base =  8u;                      /* ... set nbr base =  8    (see Note #2a1B1a2).        */
    5388:	f04f 0308 	mov.w	r3, #8
    538c:	71fb      	strb	r3, [r7, #7]
                           break;
    538e:	bf00      	nop
                  }

             } else {                                           /* For non-'0' prefix, ...                              */
                 nbr_base = 10u;                                /* ... set nbr base = 10    (see Note #2a1B1a1).        */
             }
             break;
    5390:	e038      	b.n	5404 <Str_ParseNbr_Int32+0x1a4>
                           parse_char = (CPU_CHAR)(*(pstr_parse + 1));
                           nbr_hex    =  ASCII_IsDigHex(parse_char);
                           if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
                               pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
                           }
                           break;
    5392:	bf00      	nop
                  }

             } else {                                           /* For non-'0' prefix, ...                              */
                 nbr_base = 10u;                                /* ... set nbr base = 10    (see Note #2a1B1a1).        */
             }
             break;
    5394:	e036      	b.n	5404 <Str_ParseNbr_Int32+0x1a4>
                           nbr_base =  8u;                      /* ... set nbr base =  8    (see Note #2a1B1a2).        */
                           break;
                  }

             } else {                                           /* For non-'0' prefix, ...                              */
                 nbr_base = 10u;                                /* ... set nbr base = 10    (see Note #2a1B1a1).        */
    5396:	f04f 030a 	mov.w	r3, #10
    539a:	71fb      	strb	r3, [r7, #7]
             }
             break;
    539c:	e032      	b.n	5404 <Str_ParseNbr_Int32+0x1a4>


        case  8u:                                               /* See Note #2a1B1a2.                                   */
             if (*pstr_parse == '0') {                          /* If avail, ...                                        */
    539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	2b30      	cmp	r3, #48	; 0x30
    53a4:	d12b      	bne.n	53fe <Str_ParseNbr_Int32+0x19e>
                  pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2B).       */
    53a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53a8:	f103 0301 	add.w	r3, r3, #1
    53ac:	637b      	str	r3, [r7, #52]	; 0x34
             }
             break;
    53ae:	e026      	b.n	53fe <Str_ParseNbr_Int32+0x19e>


        case 16u:                                               /* See Note #2a1B1a3.                                   */
             if (*pstr_parse == '0') {                          /* If avail, ...                                        */
    53b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53b2:	781b      	ldrb	r3, [r3, #0]
    53b4:	2b30      	cmp	r3, #48	; 0x30
    53b6:	d124      	bne.n	5402 <Str_ParseNbr_Int32+0x1a2>
                  pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
    53b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ba:	f103 0301 	add.w	r3, r3, #1
    53be:	637b      	str	r3, [r7, #52]	; 0x34
                  switch (*pstr_parse) {
    53c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53c2:	781b      	ldrb	r3, [r3, #0]
    53c4:	2b58      	cmp	r3, #88	; 0x58
    53c6:	d001      	beq.n	53cc <Str_ParseNbr_Int32+0x16c>
    53c8:	2b78      	cmp	r3, #120	; 0x78
    53ca:	d114      	bne.n	53f6 <Str_ParseNbr_Int32+0x196>
                      case 'x':
                      case 'X':
                           parse_char = (CPU_CHAR)(*(pstr_parse + 1));
    53cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ce:	785b      	ldrb	r3, [r3, #1]
    53d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           nbr_hex    =  ASCII_IsDigHex(parse_char);
    53d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    53d8:	4618      	mov	r0, r3
    53da:	f7fe ffe3 	bl	43a4 <ASCII_IsDigHex>
    53de:	4603      	mov	r3, r0
    53e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                           if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
    53e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    53e8:	2b01      	cmp	r3, #1
    53ea:	d105      	bne.n	53f8 <Str_ParseNbr_Int32+0x198>
                               pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
    53ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ee:	f103 0301 	add.w	r3, r3, #1
    53f2:	637b      	str	r3, [r7, #52]	; 0x34
                           }
                           break;
    53f4:	e000      	b.n	53f8 <Str_ParseNbr_Int32+0x198>


                      default:
                           break;
    53f6:	e000      	b.n	53fa <Str_ParseNbr_Int32+0x19a>
                           parse_char = (CPU_CHAR)(*(pstr_parse + 1));
                           nbr_hex    =  ASCII_IsDigHex(parse_char);
                           if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
                               pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
                           }
                           break;
    53f8:	bf00      	nop

                      default:
                           break;
                  }
             }
             break;
    53fa:	e002      	b.n	5402 <Str_ParseNbr_Int32+0x1a2>


        default:                                                /* See Note #2a1B1b.                                    */
             break;
    53fc:	e002      	b.n	5404 <Str_ParseNbr_Int32+0x1a4>

        case  8u:                                               /* See Note #2a1B1a2.                                   */
             if (*pstr_parse == '0') {                          /* If avail, ...                                        */
                  pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2B).       */
             }
             break;
    53fe:	bf00      	nop
    5400:	e000      	b.n	5404 <Str_ParseNbr_Int32+0x1a4>

                      default:
                           break;
                  }
             }
             break;
    5402:	bf00      	nop
    }


/*$PAGE*/
                                                                /* ------------------ PARSE INT STR ------------------- */
    nbr  = 0u;
    5404:	f04f 0300 	mov.w	r3, #0
    5408:	62fb      	str	r3, [r7, #44]	; 0x2c
    ovf  = DEF_NO;
    540a:	f04f 0300 	mov.w	r3, #0
    540e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    done = DEF_NO;
    5412:	f04f 0300 	mov.w	r3, #0
    5416:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    while (done == DEF_NO) {                                    /* Parse str for desired nbr base digs (see Note #2a2). */
    541a:	e072      	b.n	5502 <Str_ParseNbr_Int32+0x2a2>
        parse_char = (CPU_CHAR)*pstr_parse;
    541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    541e:	781b      	ldrb	r3, [r3, #0]
    5420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        nbr_alpha  =  ASCII_IsAlphaNum(parse_char);
    5424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5428:	4618      	mov	r0, r3
    542a:	f7fe ff1b 	bl	4264 <ASCII_IsAlphaNum>
    542e:	4603      	mov	r3, r0
    5430:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (nbr_alpha == DEF_YES) {                             /* If valid alpha num nbr dig avail, ...                */
    5434:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    5438:	2b01      	cmp	r3, #1
    543a:	d15e      	bne.n	54fa <Str_ParseNbr_Int32+0x29a>
                                                                /* ... convert parse char into nbr dig.                 */
            nbr_dig = ASCII_IsDig(parse_char);
    543c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5440:	4618      	mov	r0, r3
    5442:	f7fe ff7f 	bl	4344 <ASCII_IsDig>
    5446:	4603      	mov	r3, r0
    5448:	f887 3020 	strb.w	r3, [r7, #32]
            if (nbr_dig == DEF_YES) {
    544c:	f897 3020 	ldrb.w	r3, [r7, #32]
    5450:	2b01      	cmp	r3, #1
    5452:	d106      	bne.n	5462 <Str_ParseNbr_Int32+0x202>
                parse_dig = (CPU_INT08U)(parse_char - '0');
    5454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5458:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    545c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    5460:	e016      	b.n	5490 <Str_ParseNbr_Int32+0x230>
            } else {
                nbr_hex_lower = ASCII_IsLower(parse_char);
    5462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5466:	4618      	mov	r0, r3
    5468:	f7fe ff3c 	bl	42e4 <ASCII_IsLower>
    546c:	4603      	mov	r3, r0
    546e:	77fb      	strb	r3, [r7, #31]
                if (nbr_hex_lower == DEF_YES) {
    5470:	7ffb      	ldrb	r3, [r7, #31]
    5472:	2b01      	cmp	r3, #1
    5474:	d106      	bne.n	5484 <Str_ParseNbr_Int32+0x224>
                    parse_dig = (CPU_INT08U)((parse_char - 'a') + 10u);
    5476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    547a:	f1a3 0357 	sub.w	r3, r3, #87	; 0x57
    547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    5482:	e005      	b.n	5490 <Str_ParseNbr_Int32+0x230>
                } else {
                    parse_dig = (CPU_INT08U)((parse_char - 'A') + 10u);
    5484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    5488:	f1a3 0337 	sub.w	r3, r3, #55	; 0x37
    548c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                }
            }

            if (parse_dig < nbr_base) {                         /* If parse char valid for nbr base ...                 */
    5490:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
    5494:	79fb      	ldrb	r3, [r7, #7]
    5496:	429a      	cmp	r2, r3
    5498:	d22a      	bcs.n	54f0 <Str_ParseNbr_Int32+0x290>
                if (ovf == DEF_NO) {                            /* ... & nbr NOT yet ovf'd,         ...                 */
    549a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    549e:	2b00      	cmp	r3, #0
    54a0:	d121      	bne.n	54e6 <Str_ParseNbr_Int32+0x286>
                    if (nbr <= Str_MultOvfThTbl_Int32U[nbr_base]) {
    54a2:	79fa      	ldrb	r2, [r7, #7]
    54a4:	f64c 0300 	movw	r3, #51200	; 0xc800
    54a8:	f2c0 0302 	movt	r3, #2
    54ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    54b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54b2:	429a      	cmp	r2, r3
    54b4:	d313      	bcc.n	54de <Str_ParseNbr_Int32+0x27e>
                                                                /* ... merge parse char dig into nbr.                   */
                        nbr *= nbr_base;
    54b6:	79fa      	ldrb	r2, [r7, #7]
    54b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54ba:	fb02 f303 	mul.w	r3, r2, r3
    54be:	62fb      	str	r3, [r7, #44]	; 0x2c
                        nbr += parse_dig;
    54c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    54c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    54c6:	18d3      	adds	r3, r2, r3
    54c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (nbr < parse_dig) {
    54ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
    54ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54d0:	429a      	cmp	r2, r3
    54d2:	d908      	bls.n	54e6 <Str_ParseNbr_Int32+0x286>
                            ovf = DEF_YES;
    54d4:	f04f 0301 	mov.w	r3, #1
    54d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    54dc:	e003      	b.n	54e6 <Str_ParseNbr_Int32+0x286>
                        }
                    } else {
                        ovf = DEF_YES;
    54de:	f04f 0301 	mov.w	r3, #1
    54e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    }
                }
                pstr_parse++;
    54e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54e8:	f103 0301 	add.w	r3, r3, #1
    54ec:	637b      	str	r3, [r7, #52]	; 0x34
    54ee:	e008      	b.n	5502 <Str_ParseNbr_Int32+0x2a2>

            } else {                                            /* Invalid         char parsed (see Note #2a1C1a).      */
                done = DEF_YES;
    54f0:	f04f 0301 	mov.w	r3, #1
    54f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    54f8:	e003      	b.n	5502 <Str_ParseNbr_Int32+0x2a2>
            }

        } else {                                                /* Invalid OR NULL char parsed (see Note #2a1C1).       */
            done = DEF_YES;
    54fa:	f04f 0301 	mov.w	r3, #1
    54fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                                                                /* ------------------ PARSE INT STR ------------------- */
    nbr  = 0u;
    ovf  = DEF_NO;
    done = DEF_NO;

    while (done == DEF_NO) {                                    /* Parse str for desired nbr base digs (see Note #2a2). */
    5502:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    5506:	2b00      	cmp	r3, #0
    5508:	d088      	beq.n	541c <Str_ParseNbr_Int32+0x1bc>
        } else {                                                /* Invalid OR NULL char parsed (see Note #2a1C1).       */
            done = DEF_YES;
        }
    }

    if (ovf == DEF_YES) {                                       /* If nbr ovf'd, ...                                    */
    550a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    550e:	2b01      	cmp	r3, #1
    5510:	d102      	bne.n	5518 <Str_ParseNbr_Int32+0x2b8>
        nbr  = DEF_INT_32U_MAX_VAL;                             /* ... rtn max int val (see Note #2a3A1).               */
    5512:	f04f 33ff 	mov.w	r3, #4294967295
    5516:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (pstr_parse !=             pstr_parse_nbr) {             /* If final parse str != init'l parse nbr str,       .. */
    5518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    551c:	429a      	cmp	r2, r3
    551e:	d003      	beq.n	5528 <Str_ParseNbr_Int32+0x2c8>
       *pstr_next   = (CPU_CHAR *)pstr_parse;                   /* .. rtn   parse str's next char (see Note #2a2B2); .. */
    5520:	68bb      	ldr	r3, [r7, #8]
    5522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5524:	601a      	str	r2, [r3, #0]
    5526:	e002      	b.n	552e <Str_ParseNbr_Int32+0x2ce>
    } else {
       *pstr_next   = (CPU_CHAR *)pstr;                         /* .. else rtn initial parse str  (see Note #2a2A2).    */
    5528:	68bb      	ldr	r3, [r7, #8]
    552a:	68fa      	ldr	r2, [r7, #12]
    552c:	601a      	str	r2, [r3, #0]
    }

   *pnbr_neg = neg;                                             /* Rtn neg nbr status.                                  */
    552e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5530:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    5534:	701a      	strb	r2, [r3, #0]


    return (nbr);
    5536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    5538:	4618      	mov	r0, r3
    553a:	f107 0738 	add.w	r7, r7, #56	; 0x38
    553e:	46bd      	mov	sp, r7
    5540:	bd80      	pop	{r7, pc}
    5542:	bf00      	nop

00005544 <Mem_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  Mem_Init (void)
{
    5544:	b480      	push	{r7}
    5546:	b083      	sub	sp, #12
    5548:	af00      	add	r7, sp, #0
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
    MEM_POOL  *pmem_pool;

                                                                        /* --------- INIT MEM HEAP SEG / POOL --------- */
    pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
    554a:	f643 43fc 	movw	r3, #15612	; 0x3cfc
    554e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5552:	607b      	str	r3, [r7, #4]
    pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
    5554:	687a      	ldr	r2, [r7, #4]
    5556:	f244 5348 	movw	r3, #17736	; 0x4548
    555a:	f2c5 0341 	movt	r3, #20545	; 0x5041
    555e:	6013      	str	r3, [r2, #0]
    pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	f04f 0200 	mov.w	r2, #0
    5566:	605a      	str	r2, [r3, #4]
    pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	f04f 0200 	mov.w	r2, #0
    556e:	609a      	str	r2, [r3, #8]
    pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	f04f 0200 	mov.w	r2, #0
    5576:	60da      	str	r2, [r3, #12]
    pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	f04f 0200 	mov.w	r2, #0
    557e:	611a      	str	r2, [r3, #16]
    pmem_pool->PoolAddrStart    = (void       *) 0;
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	f04f 0200 	mov.w	r2, #0
    5586:	615a      	str	r2, [r3, #20]
    pmem_pool->PoolAddrEnd      = (void       *) 0;
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	f04f 0200 	mov.w	r2, #0
    558e:	619a      	str	r2, [r3, #24]
    pmem_pool->PoolPtrs         = (void      **) 0;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	f04f 0200 	mov.w	r2, #0
    5596:	61da      	str	r2, [r3, #28]
    pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0u;
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	f04f 0200 	mov.w	r2, #0
    559e:	62da      	str	r2, [r3, #44]	; 0x2c
    pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0u;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	f04f 0200 	mov.w	r2, #0
    55a6:	629a      	str	r2, [r3, #40]	; 0x28
    pmem_pool->BlkIx            = (MEM_POOL_IX ) 0u;
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	f04f 0200 	mov.w	r2, #0
    55ae:	841a      	strh	r2, [r3, #32]

#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
    pmem_pool->SegAddr          = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
    55b0:	687a      	ldr	r2, [r7, #4]
    55b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    55b6:	f2c2 0308 	movt	r3, #8200	; 0x2008
    55ba:	6353      	str	r3, [r2, #52]	; 0x34
    pmem_pool->SegAddrNextAvail = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
    55bc:	687a      	ldr	r2, [r7, #4]
    55be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    55c2:	f2c2 0308 	movt	r3, #8200	; 0x2008
    55c6:	6393      	str	r3, [r2, #56]	; 0x38
#else
    pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
    pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
#endif

    pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    55ce:	63da      	str	r2, [r3, #60]	; 0x3c
    pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    55d6:	641a      	str	r2, [r3, #64]	; 0x40

                                                                        /* ------------ INIT MEM POOL TBL ------------- */
    Mem_PoolTbl = &Mem_PoolHeap;
    55d8:	f643 5340 	movw	r3, #15680	; 0x3d40
    55dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55e0:	f643 42fc 	movw	r2, #15612	; 0x3cfc
    55e4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    55e8:	601a      	str	r2, [r3, #0]
#endif
}
    55ea:	f107 070c 	add.w	r7, r7, #12
    55ee:	46bd      	mov	sp, r7
    55f0:	bc80      	pop	{r7}
    55f2:	4770      	bx	lr

000055f4 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b082      	sub	sp, #8
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
    55fc:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
    55fe:	6878      	ldr	r0, [r7, #4]
    5600:	f04f 0100 	mov.w	r1, #0
    5604:	683a      	ldr	r2, [r7, #0]
    5606:	f000 f805 	bl	5614 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
    560a:	f107 0708 	add.w	r7, r7, #8
    560e:	46bd      	mov	sp, r7
    5610:	bd80      	pop	{r7, pc}
    5612:	bf00      	nop

00005614 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
    5614:	b480      	push	{r7}
    5616:	b08b      	sub	sp, #44	; 0x2c
    5618:	af00      	add	r7, sp, #0
    561a:	60f8      	str	r0, [r7, #12]
    561c:	460b      	mov	r3, r1
    561e:	607a      	str	r2, [r7, #4]
    5620:	72fb      	strb	r3, [r7, #11]
    CPU_INT08U  *pmem_08;
    CPU_INT08U   mem_align_modulo;
    CPU_INT08U   i;


    if (size < 1) {                                             /* See Note #1.                                         */
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	2b00      	cmp	r3, #0
    5626:	d05f      	beq.n	56e8 <__cs3_region_zero_size_ram+0x20>
        return;
    }
    if (pmem == (void *)0) {
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	2b00      	cmp	r3, #0
    562c:	d05e      	beq.n	56ec <__cs3_region_zero_size_ram+0x24>
        return;
    }


    data_align = 0u;
    562e:	f04f 0300 	mov.w	r3, #0
    5632:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
    5634:	f04f 0300 	mov.w	r3, #0
    5638:	75fb      	strb	r3, [r7, #23]
    563a:	e00b      	b.n	5654 <Mem_Set+0x40>
        data_align <<=  DEF_OCTET_NBR_BITS;
    563c:	6a3b      	ldr	r3, [r7, #32]
    563e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5642:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
    5644:	7afb      	ldrb	r3, [r7, #11]
    5646:	6a3a      	ldr	r2, [r7, #32]
    5648:	4313      	orrs	r3, r2
    564a:	623b      	str	r3, [r7, #32]
        return;
    }


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
    564c:	7dfb      	ldrb	r3, [r7, #23]
    564e:	f103 0301 	add.w	r3, r3, #1
    5652:	75fb      	strb	r3, [r7, #23]
    5654:	7dfb      	ldrb	r3, [r7, #23]
    5656:	2b03      	cmp	r3, #3
    5658:	d9f0      	bls.n	563c <Mem_Set+0x28>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem         =  size;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */
    565e:	68fb      	ldr	r3, [r7, #12]
    5660:	b2db      	uxtb	r3, r3
    5662:	f003 0303 	and.w	r3, r3, #3
    5666:	75bb      	strb	r3, [r7, #22]

    pmem_08 = (CPU_INT08U *)pmem;
    5668:	68fb      	ldr	r3, [r7, #12]
    566a:	61bb      	str	r3, [r7, #24]
    if (mem_align_modulo != 0u) {                               /* If leading octets avail,                   ...       */
    566c:	7dbb      	ldrb	r3, [r7, #22]
    566e:	2b00      	cmp	r3, #0
    5670:	d017      	beq.n	56a2 <Mem_Set+0x8e>
        i = mem_align_modulo;
    5672:	7dbb      	ldrb	r3, [r7, #22]
    5674:	75fb      	strb	r3, [r7, #23]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
    5676:	e00e      	b.n	5696 <Mem_Set+0x82>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
    5678:	69bb      	ldr	r3, [r7, #24]
    567a:	7afa      	ldrb	r2, [r7, #11]
    567c:	701a      	strb	r2, [r3, #0]
    567e:	69bb      	ldr	r3, [r7, #24]
    5680:	f103 0301 	add.w	r3, r3, #1
    5684:	61bb      	str	r3, [r7, #24]
            size_rem -= sizeof(CPU_INT08U);
    5686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5688:	f103 33ff 	add.w	r3, r3, #4294967295
    568c:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
    568e:	7dfb      	ldrb	r3, [r7, #23]
    5690:	f103 0301 	add.w	r3, r3, #1
    5694:	75fb      	strb	r3, [r7, #23]
    mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_modulo != 0u) {                               /* If leading octets avail,                   ...       */
        i = mem_align_modulo;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
    5696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5698:	2b00      	cmp	r3, #0
    569a:	d002      	beq.n	56a2 <Mem_Set+0x8e>
    569c:	7dfb      	ldrb	r3, [r7, #23]
    569e:	2b03      	cmp	r3, #3
    56a0:	d9ea      	bls.n	5678 <Mem_Set+0x64>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
    56a2:	69bb      	ldr	r3, [r7, #24]
    56a4:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
    56a6:	e00a      	b.n	56be <Mem_Set+0xaa>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
    56a8:	69fb      	ldr	r3, [r7, #28]
    56aa:	6a3a      	ldr	r2, [r7, #32]
    56ac:	601a      	str	r2, [r3, #0]
    56ae:	69fb      	ldr	r3, [r7, #28]
    56b0:	f103 0304 	add.w	r3, r3, #4
    56b4:	61fb      	str	r3, [r7, #28]
        size_rem    -= sizeof(CPU_ALIGN);
    56b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56b8:	f1a3 0304 	sub.w	r3, r3, #4
    56bc:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
    56be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56c0:	2b03      	cmp	r3, #3
    56c2:	d8f1      	bhi.n	56a8 <Mem_Set+0x94>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    56c4:	69fb      	ldr	r3, [r7, #28]
    56c6:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
    56c8:	e00a      	b.n	56e0 <__cs3_region_zero_size_ram+0x18>
       *pmem_08++   = data_val;
    56ca:	69bb      	ldr	r3, [r7, #24]
    56cc:	7afa      	ldrb	r2, [r7, #11]
    56ce:	701a      	strb	r2, [r3, #0]
    56d0:	69bb      	ldr	r3, [r7, #24]
    56d2:	f103 0301 	add.w	r3, r3, #1
    56d6:	61bb      	str	r3, [r7, #24]
        size_rem   -= sizeof(CPU_INT08U);
    56d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56da:	f103 33ff 	add.w	r3, r3, #4294967295
    56de:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
    56e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56e2:	2b00      	cmp	r3, #0
    56e4:	d1f1      	bne.n	56ca <__cs3_region_zero_size_ram+0x2>
    56e6:	e002      	b.n	56ee <__cs3_region_zero_size_ram+0x26>
    CPU_INT08U   mem_align_modulo;
    CPU_INT08U   i;


    if (size < 1) {                                             /* See Note #1.                                         */
        return;
    56e8:	bf00      	nop
    56ea:	e000      	b.n	56ee <__cs3_region_zero_size_ram+0x26>
    }
    if (pmem == (void *)0) {
        return;
    56ec:	bf00      	nop
    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
    56ee:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    56f2:	46bd      	mov	sp, r7
    56f4:	bc80      	pop	{r7}
    56f6:	4770      	bx	lr

000056f8 <Mem_Copy>:
/*$PAGE*/
#if (LIB_MEM_CFG_OPTIMIZE_ASM_EN != DEF_ENABLED)
void  Mem_Copy (       void        *pdest,
                const  void        *psrc,
                       CPU_SIZE_T   size)
{
    56f8:	b480      	push	{r7}
    56fa:	b08b      	sub	sp, #44	; 0x2c
    56fc:	af00      	add	r7, sp, #0
    56fe:	60f8      	str	r0, [r7, #12]
    5700:	60b9      	str	r1, [r7, #8]
    5702:	607a      	str	r2, [r7, #4]
           CPU_INT08U    mem_align_modulo_dest;
           CPU_INT08U    mem_align_modulo_src;
           CPU_BOOLEAN   mem_aligned;


    if (size < 1) {                                             /* See Note #1.                                         */
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	2b00      	cmp	r3, #0
    5708:	d070      	beq.n	57ec <Mem_Copy+0xf4>
        return;
    }
    if (pdest == (void *)0) {
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	2b00      	cmp	r3, #0
    570e:	d06f      	beq.n	57f0 <Mem_Copy+0xf8>
        return;
    }
    if (psrc  == (void *)0) {
    5710:	68bb      	ldr	r3, [r7, #8]
    5712:	2b00      	cmp	r3, #0
    5714:	d06e      	beq.n	57f4 <Mem_Copy+0xfc>
        return;
    }


    size_rem              =  size;
    5716:	687b      	ldr	r3, [r7, #4]
    5718:	627b      	str	r3, [r7, #36]	; 0x24

    pmem_08_dest          = (      CPU_INT08U *)pdest;
    571a:	68fb      	ldr	r3, [r7, #12]
    571c:	61bb      	str	r3, [r7, #24]
    pmem_08_src           = (const CPU_INT08U *)psrc;
    571e:	68bb      	ldr	r3, [r7, #8]
    5720:	617b      	str	r3, [r7, #20]
                                                                /* See Note #4.                                         */
    mem_align_modulo_dest = (CPU_INT08U)((CPU_ADDR)pmem_08_dest % sizeof(CPU_ALIGN));
    5722:	69bb      	ldr	r3, [r7, #24]
    5724:	b2db      	uxtb	r3, r3
    5726:	f003 0303 	and.w	r3, r3, #3
    572a:	74bb      	strb	r3, [r7, #18]
    mem_align_modulo_src  = (CPU_INT08U)((CPU_ADDR)pmem_08_src  % sizeof(CPU_ALIGN));
    572c:	697b      	ldr	r3, [r7, #20]
    572e:	b2db      	uxtb	r3, r3
    5730:	f003 0303 	and.w	r3, r3, #3
    5734:	747b      	strb	r3, [r7, #17]

    mem_aligned           = (mem_align_modulo_dest == mem_align_modulo_src) ? DEF_YES : DEF_NO;
    5736:	7cba      	ldrb	r2, [r7, #18]
    5738:	7c7b      	ldrb	r3, [r7, #17]
    573a:	429a      	cmp	r2, r3
    573c:	bf14      	ite	ne
    573e:	2300      	movne	r3, #0
    5740:	2301      	moveq	r3, #1
    5742:	743b      	strb	r3, [r7, #16]

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
    5744:	7c3b      	ldrb	r3, [r7, #16]
    5746:	2b01      	cmp	r3, #1
    5748:	d14c      	bne.n	57e4 <Mem_Copy+0xec>
                                                                /* ... optimize copy for mem buf alignment.             */
        if (mem_align_modulo_dest != 0u) {                      /* If leading octets avail,                   ...       */
    574a:	7cbb      	ldrb	r3, [r7, #18]
    574c:	2b00      	cmp	r3, #0
    574e:	d01c      	beq.n	578a <Mem_Copy+0x92>
            i = mem_align_modulo_dest;
    5750:	7cbb      	ldrb	r3, [r7, #18]
    5752:	74fb      	strb	r3, [r7, #19]
            while ((size_rem   >  0) &&                         /* ... start mem buf copy with leading octets ...       */
    5754:	e013      	b.n	577e <Mem_Copy+0x86>
                   (i          <  sizeof(CPU_ALIGN ))) {        /* ... until next CPU_ALIGN word boundary.              */
               *pmem_08_dest++ = *pmem_08_src++;
    5756:	697b      	ldr	r3, [r7, #20]
    5758:	781a      	ldrb	r2, [r3, #0]
    575a:	69bb      	ldr	r3, [r7, #24]
    575c:	701a      	strb	r2, [r3, #0]
    575e:	69bb      	ldr	r3, [r7, #24]
    5760:	f103 0301 	add.w	r3, r3, #1
    5764:	61bb      	str	r3, [r7, #24]
    5766:	697b      	ldr	r3, [r7, #20]
    5768:	f103 0301 	add.w	r3, r3, #1
    576c:	617b      	str	r3, [r7, #20]
                size_rem      -=  sizeof(CPU_INT08U);
    576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5770:	f103 33ff 	add.w	r3, r3, #4294967295
    5774:	627b      	str	r3, [r7, #36]	; 0x24
                i++;
    5776:	7cfb      	ldrb	r3, [r7, #19]
    5778:	f103 0301 	add.w	r3, r3, #1
    577c:	74fb      	strb	r3, [r7, #19]

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
                                                                /* ... optimize copy for mem buf alignment.             */
        if (mem_align_modulo_dest != 0u) {                      /* If leading octets avail,                   ...       */
            i = mem_align_modulo_dest;
            while ((size_rem   >  0) &&                         /* ... start mem buf copy with leading octets ...       */
    577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5780:	2b00      	cmp	r3, #0
    5782:	d002      	beq.n	578a <Mem_Copy+0x92>
    5784:	7cfb      	ldrb	r3, [r7, #19]
    5786:	2b03      	cmp	r3, #3
    5788:	d9e5      	bls.n	5756 <Mem_Copy+0x5e>
                size_rem      -=  sizeof(CPU_INT08U);
                i++;
            }
        }

        pmem_align_dest = (      CPU_ALIGN *)pmem_08_dest;      /* See Note #3a.                                        */
    578a:	69bb      	ldr	r3, [r7, #24]
    578c:	623b      	str	r3, [r7, #32]
        pmem_align_src  = (const CPU_ALIGN *)pmem_08_src;
    578e:	697b      	ldr	r3, [r7, #20]
    5790:	61fb      	str	r3, [r7, #28]
        while (size_rem      >=  sizeof(CPU_ALIGN)) {           /* While mem bufs aligned on CPU_ALIGN word boundaries, */
    5792:	e00f      	b.n	57b4 <Mem_Copy+0xbc>
           *pmem_align_dest++ = *pmem_align_src++;              /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
    5794:	69fb      	ldr	r3, [r7, #28]
    5796:	681a      	ldr	r2, [r3, #0]
    5798:	6a3b      	ldr	r3, [r7, #32]
    579a:	601a      	str	r2, [r3, #0]
    579c:	6a3b      	ldr	r3, [r7, #32]
    579e:	f103 0304 	add.w	r3, r3, #4
    57a2:	623b      	str	r3, [r7, #32]
    57a4:	69fb      	ldr	r3, [r7, #28]
    57a6:	f103 0304 	add.w	r3, r3, #4
    57aa:	61fb      	str	r3, [r7, #28]
            size_rem         -=  sizeof(CPU_ALIGN);
    57ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57ae:	f1a3 0304 	sub.w	r3, r3, #4
    57b2:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }

        pmem_align_dest = (      CPU_ALIGN *)pmem_08_dest;      /* See Note #3a.                                        */
        pmem_align_src  = (const CPU_ALIGN *)pmem_08_src;
        while (size_rem      >=  sizeof(CPU_ALIGN)) {           /* While mem bufs aligned on CPU_ALIGN word boundaries, */
    57b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57b6:	2b03      	cmp	r3, #3
    57b8:	d8ec      	bhi.n	5794 <Mem_Copy+0x9c>
           *pmem_align_dest++ = *pmem_align_src++;              /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
            size_rem         -=  sizeof(CPU_ALIGN);
        }

        pmem_08_dest = (      CPU_INT08U *)pmem_align_dest;
    57ba:	6a3b      	ldr	r3, [r7, #32]
    57bc:	61bb      	str	r3, [r7, #24]
        pmem_08_src  = (const CPU_INT08U *)pmem_align_src;
    57be:	69fb      	ldr	r3, [r7, #28]
    57c0:	617b      	str	r3, [r7, #20]
    }

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
    57c2:	e00f      	b.n	57e4 <Mem_Copy+0xec>
       *pmem_08_dest++ = *pmem_08_src++;                        /* ... copy psrc to pdest by octets.                    */
    57c4:	697b      	ldr	r3, [r7, #20]
    57c6:	781a      	ldrb	r2, [r3, #0]
    57c8:	69bb      	ldr	r3, [r7, #24]
    57ca:	701a      	strb	r2, [r3, #0]
    57cc:	69bb      	ldr	r3, [r7, #24]
    57ce:	f103 0301 	add.w	r3, r3, #1
    57d2:	61bb      	str	r3, [r7, #24]
    57d4:	697b      	ldr	r3, [r7, #20]
    57d6:	f103 0301 	add.w	r3, r3, #1
    57da:	617b      	str	r3, [r7, #20]
        size_rem      -=  sizeof(CPU_INT08U);
    57dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57de:	f103 33ff 	add.w	r3, r3, #4294967295
    57e2:	627b      	str	r3, [r7, #36]	; 0x24

        pmem_08_dest = (      CPU_INT08U *)pmem_align_dest;
        pmem_08_src  = (const CPU_INT08U *)pmem_align_src;
    }

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
    57e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57e6:	2b00      	cmp	r3, #0
    57e8:	d1ec      	bne.n	57c4 <Mem_Copy+0xcc>
    57ea:	e004      	b.n	57f6 <Mem_Copy+0xfe>
           CPU_INT08U    mem_align_modulo_src;
           CPU_BOOLEAN   mem_aligned;


    if (size < 1) {                                             /* See Note #1.                                         */
        return;
    57ec:	bf00      	nop
    57ee:	e002      	b.n	57f6 <Mem_Copy+0xfe>
    }
    if (pdest == (void *)0) {
        return;
    57f0:	bf00      	nop
    57f2:	e000      	b.n	57f6 <Mem_Copy+0xfe>
    }
    if (psrc  == (void *)0) {
        return;
    57f4:	bf00      	nop

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
       *pmem_08_dest++ = *pmem_08_src++;                        /* ... copy psrc to pdest by octets.                    */
        size_rem      -=  sizeof(CPU_INT08U);
    }
}
    57f6:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    57fa:	46bd      	mov	sp, r7
    57fc:	bc80      	pop	{r7}
    57fe:	4770      	bx	lr

00005800 <Mem_Cmp>:
*/
/*$PAGE*/
CPU_BOOLEAN  Mem_Cmp (const  void        *p1_mem,
                      const  void        *p2_mem,
                             CPU_SIZE_T   size)
{
    5800:	b480      	push	{r7}
    5802:	b08d      	sub	sp, #52	; 0x34
    5804:	af00      	add	r7, sp, #0
    5806:	60f8      	str	r0, [r7, #12]
    5808:	60b9      	str	r1, [r7, #8]
    580a:	607a      	str	r2, [r7, #4]
           CPU_INT08U    mem_align_modulo_2;
           CPU_BOOLEAN   mem_aligned;
           CPU_BOOLEAN   mem_cmp;


    if (size < 1) {                                             /* See Note #1.                                         */
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	2b00      	cmp	r3, #0
    5810:	d102      	bne.n	5818 <Mem_Cmp+0x18>
        return (DEF_YES);
    5812:	f04f 0301 	mov.w	r3, #1
    5816:	e098      	b.n	594a <Mem_Cmp+0x14a>
    }
    if (p1_mem == (void *)0) {
    5818:	68fb      	ldr	r3, [r7, #12]
    581a:	2b00      	cmp	r3, #0
    581c:	d102      	bne.n	5824 <Mem_Cmp+0x24>
        return (DEF_NO);
    581e:	f04f 0300 	mov.w	r3, #0
    5822:	e092      	b.n	594a <Mem_Cmp+0x14a>
    }
    if (p2_mem == (void *)0) {
    5824:	68bb      	ldr	r3, [r7, #8]
    5826:	2b00      	cmp	r3, #0
    5828:	d102      	bne.n	5830 <Mem_Cmp+0x30>
        return (DEF_NO);
    582a:	f04f 0300 	mov.w	r3, #0
    582e:	e08c      	b.n	594a <Mem_Cmp+0x14a>
    }


    mem_cmp            =  DEF_YES;                              /* Assume mem bufs are identical until cmp fails.       */
    5830:	f04f 0301 	mov.w	r3, #1
    5834:	76bb      	strb	r3, [r7, #26]
    size_rem           =  size;
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	62fb      	str	r3, [r7, #44]	; 0x2c
                                                                /* Start @ end of mem bufs (see Note #2).               */
    p1_mem_08          = (const CPU_INT08U *)p1_mem + size;
    583a:	68fa      	ldr	r2, [r7, #12]
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	18d3      	adds	r3, r2, r3
    5840:	623b      	str	r3, [r7, #32]
    p2_mem_08          = (const CPU_INT08U *)p2_mem + size;
    5842:	68ba      	ldr	r2, [r7, #8]
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	18d3      	adds	r3, r2, r3
    5848:	61fb      	str	r3, [r7, #28]
                                                                /* See Note #4.                                         */
    mem_align_modulo_1 = (CPU_INT08U)((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
    584a:	6a3b      	ldr	r3, [r7, #32]
    584c:	b2db      	uxtb	r3, r3
    584e:	f003 0303 	and.w	r3, r3, #3
    5852:	767b      	strb	r3, [r7, #25]
    mem_align_modulo_2 = (CPU_INT08U)((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
    5854:	69fb      	ldr	r3, [r7, #28]
    5856:	b2db      	uxtb	r3, r3
    5858:	f003 0303 	and.w	r3, r3, #3
    585c:	763b      	strb	r3, [r7, #24]

    mem_aligned        = (mem_align_modulo_1 == mem_align_modulo_2) ? DEF_YES : DEF_NO;
    585e:	7e7a      	ldrb	r2, [r7, #25]
    5860:	7e3b      	ldrb	r3, [r7, #24]
    5862:	429a      	cmp	r2, r3
    5864:	bf14      	ite	ne
    5866:	2300      	movne	r3, #0
    5868:	2301      	moveq	r3, #1
    586a:	75fb      	strb	r3, [r7, #23]

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
    586c:	7dfb      	ldrb	r3, [r7, #23]
    586e:	2b01      	cmp	r3, #1
    5870:	d164      	bne.n	593c <Mem_Cmp+0x13c>
                                                                /* ... optimize cmp for mem buf alignment.              */
        if (mem_align_modulo_1 != 0u) {                         /* If trailing octets avail,                  ...       */
    5872:	7e7b      	ldrb	r3, [r7, #25]
    5874:	2b00      	cmp	r3, #0
    5876:	d024      	beq.n	58c2 <Mem_Cmp+0xc2>
            i = mem_align_modulo_1;
    5878:	7e7b      	ldrb	r3, [r7, #25]
    587a:	76fb      	strb	r3, [r7, #27]
            while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
    587c:	e018      	b.n	58b0 <Mem_Cmp+0xb0>
                   (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
                   (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
                p1_mem_08--;
    587e:	6a3b      	ldr	r3, [r7, #32]
    5880:	f103 33ff 	add.w	r3, r3, #4294967295
    5884:	623b      	str	r3, [r7, #32]
                p2_mem_08--;
    5886:	69fb      	ldr	r3, [r7, #28]
    5888:	f103 33ff 	add.w	r3, r3, #4294967295
    588c:	61fb      	str	r3, [r7, #28]
                if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
    588e:	6a3b      	ldr	r3, [r7, #32]
    5890:	781a      	ldrb	r2, [r3, #0]
    5892:	69fb      	ldr	r3, [r7, #28]
    5894:	781b      	ldrb	r3, [r3, #0]
    5896:	429a      	cmp	r2, r3
    5898:	d002      	beq.n	58a0 <Mem_Cmp+0xa0>
                     mem_cmp = DEF_NO;
    589a:	f04f 0300 	mov.w	r3, #0
    589e:	76bb      	strb	r3, [r7, #26]
                }
                size_rem -= sizeof(CPU_INT08U);
    58a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    58a2:	f103 33ff 	add.w	r3, r3, #4294967295
    58a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                i--;
    58a8:	7efb      	ldrb	r3, [r7, #27]
    58aa:	f103 33ff 	add.w	r3, r3, #4294967295
    58ae:	76fb      	strb	r3, [r7, #27]

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
                                                                /* ... optimize cmp for mem buf alignment.              */
        if (mem_align_modulo_1 != 0u) {                         /* If trailing octets avail,                  ...       */
            i = mem_align_modulo_1;
            while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
    58b0:	7ebb      	ldrb	r3, [r7, #26]
    58b2:	2b01      	cmp	r3, #1
    58b4:	d105      	bne.n	58c2 <Mem_Cmp+0xc2>
    58b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    58b8:	2b00      	cmp	r3, #0
    58ba:	d002      	beq.n	58c2 <Mem_Cmp+0xc2>
                   (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
    58bc:	7efb      	ldrb	r3, [r7, #27]
    58be:	2b00      	cmp	r3, #0
    58c0:	d1dd      	bne.n	587e <Mem_Cmp+0x7e>
                size_rem -= sizeof(CPU_INT08U);
                i--;
            }
        }

        if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
    58c2:	7ebb      	ldrb	r3, [r7, #26]
    58c4:	2b01      	cmp	r3, #1
    58c6:	d139      	bne.n	593c <Mem_Cmp+0x13c>
            p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
    58c8:	6a3b      	ldr	r3, [r7, #32]
    58ca:	62bb      	str	r3, [r7, #40]	; 0x28
            p2_mem_align = (CPU_ALIGN *)p2_mem_08;
    58cc:	69fb      	ldr	r3, [r7, #28]
    58ce:	627b      	str	r3, [r7, #36]	; 0x24

            while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
    58d0:	e014      	b.n	58fc <Mem_Cmp+0xfc>
                   (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
                p1_mem_align--;
    58d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    58d4:	f1a3 0304 	sub.w	r3, r3, #4
    58d8:	62bb      	str	r3, [r7, #40]	; 0x28
                p2_mem_align--;
    58da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58dc:	f1a3 0304 	sub.w	r3, r3, #4
    58e0:	627b      	str	r3, [r7, #36]	; 0x24
                if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
    58e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    58e4:	681a      	ldr	r2, [r3, #0]
    58e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58e8:	681b      	ldr	r3, [r3, #0]
    58ea:	429a      	cmp	r2, r3
    58ec:	d002      	beq.n	58f4 <Mem_Cmp+0xf4>
                     mem_cmp = DEF_NO;
    58ee:	f04f 0300 	mov.w	r3, #0
    58f2:	76bb      	strb	r3, [r7, #26]
                }
                size_rem -= sizeof(CPU_ALIGN);
    58f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    58f6:	f1a3 0304 	sub.w	r3, r3, #4
    58fa:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
            p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
            p2_mem_align = (CPU_ALIGN *)p2_mem_08;

            while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
    58fc:	7ebb      	ldrb	r3, [r7, #26]
    58fe:	2b01      	cmp	r3, #1
    5900:	d102      	bne.n	5908 <Mem_Cmp+0x108>
    5902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5904:	2b03      	cmp	r3, #3
    5906:	d8e4      	bhi.n	58d2 <Mem_Cmp+0xd2>
                     mem_cmp = DEF_NO;
                }
                size_rem -= sizeof(CPU_ALIGN);
            }

            p1_mem_08 = (CPU_INT08U *)p1_mem_align;
    5908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    590a:	623b      	str	r3, [r7, #32]
            p2_mem_08 = (CPU_INT08U *)p2_mem_align;
    590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    590e:	61fb      	str	r3, [r7, #28]
        }
    }

    while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
    5910:	e014      	b.n	593c <Mem_Cmp+0x13c>
           (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
        p1_mem_08--;
    5912:	6a3b      	ldr	r3, [r7, #32]
    5914:	f103 33ff 	add.w	r3, r3, #4294967295
    5918:	623b      	str	r3, [r7, #32]
        p2_mem_08--;
    591a:	69fb      	ldr	r3, [r7, #28]
    591c:	f103 33ff 	add.w	r3, r3, #4294967295
    5920:	61fb      	str	r3, [r7, #28]
        if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
    5922:	6a3b      	ldr	r3, [r7, #32]
    5924:	781a      	ldrb	r2, [r3, #0]
    5926:	69fb      	ldr	r3, [r7, #28]
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	429a      	cmp	r2, r3
    592c:	d002      	beq.n	5934 <Mem_Cmp+0x134>
             mem_cmp = DEF_NO;
    592e:	f04f 0300 	mov.w	r3, #0
    5932:	76bb      	strb	r3, [r7, #26]
        }
        size_rem -= sizeof(CPU_INT08U);
    5934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5936:	f103 33ff 	add.w	r3, r3, #4294967295
    593a:	62fb      	str	r3, [r7, #44]	; 0x2c
            p1_mem_08 = (CPU_INT08U *)p1_mem_align;
            p2_mem_08 = (CPU_INT08U *)p2_mem_align;
        }
    }

    while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
    593c:	7ebb      	ldrb	r3, [r7, #26]
    593e:	2b01      	cmp	r3, #1
    5940:	d102      	bne.n	5948 <Mem_Cmp+0x148>
    5942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5944:	2b00      	cmp	r3, #0
    5946:	d1e4      	bne.n	5912 <Mem_Cmp+0x112>
             mem_cmp = DEF_NO;
        }
        size_rem -= sizeof(CPU_INT08U);
    }

    return (mem_cmp);
    5948:	7ebb      	ldrb	r3, [r7, #26]
}
    594a:	4618      	mov	r0, r3
    594c:	f107 0734 	add.w	r7, r7, #52	; 0x34
    5950:	46bd      	mov	sp, r7
    5952:	bc80      	pop	{r7}
    5954:	4770      	bx	lr
    5956:	bf00      	nop

00005958 <Mem_HeapAlloc>:
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
void  *Mem_HeapAlloc (CPU_SIZE_T   size,
                      CPU_SIZE_T   align,
                      CPU_SIZE_T  *poctets_reqd,
                      LIB_ERR     *perr)
{
    5958:	b580      	push	{r7, lr}
    595a:	b08c      	sub	sp, #48	; 0x30
    595c:	af00      	add	r7, sp, #0
    595e:	60f8      	str	r0, [r7, #12]
    5960:	60b9      	str	r1, [r7, #8]
    5962:	607a      	str	r2, [r7, #4]
    5964:	603b      	str	r3, [r7, #0]
    void        *pmem_addr;
    void        *pmem_blk;
    CPU_SIZE_T   octets_reqd_unused;
    CPU_SIZE_T   size_rem;
    CPU_SIZE_T   size_req;
    CPU_SR_ALLOC();
    5966:	f04f 0300 	mov.w	r3, #0
    596a:	62fb      	str	r3, [r7, #44]	; 0x2c
        CPU_SW_EXCEPTION((void *)0);
    }
#endif

                                                                    /* ------------ VALIDATE RTN OCTETS PTR ----------- */
    if (poctets_reqd == (CPU_SIZE_T *) 0) {                         /* If NOT avail, ...                                */
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	2b00      	cmp	r3, #0
    5970:	d102      	bne.n	5978 <Mem_HeapAlloc+0x20>
        poctets_reqd  = (CPU_SIZE_T *)&octets_reqd_unused;          /* ... re-cfg NULL rtn ptr to unused local var.     */
    5972:	f107 0314 	add.w	r3, r7, #20
    5976:	607b      	str	r3, [r7, #4]
       (void)&octets_reqd_unused;                                   /* Prevent possible 'variable unused' warning.      */
    }
   *poctets_reqd = 0u;                                              /* Init octets req'd for err (see Note #1).         */
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	f04f 0200 	mov.w	r2, #0
    597e:	601a      	str	r2, [r3, #0]
        return ((void *)0);
    }
#endif

                                                                    /* -------------- ALLOC HEAP MEM BLK -------------- */
    pmem_pool_heap = &Mem_PoolHeap;
    5980:	f643 43fc 	movw	r3, #15612	; 0x3cfc
    5984:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5988:	62bb      	str	r3, [r7, #40]	; 0x28

    CPU_CRITICAL_ENTER();
    598a:	f012 fa2b 	bl	17de4 <CPU_SR_Save>
    598e:	62f8      	str	r0, [r7, #44]	; 0x2c
    5990:	f7fb ff92 	bl	18b8 <CPU_IntDisMeasStart>

    pmem_addr = pmem_pool_heap->SegAddrNextAvail;
    5994:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5998:	627b      	str	r3, [r7, #36]	; 0x24
    size_rem  = pmem_pool_heap->SegSizeRem;
    599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    599e:	623b      	str	r3, [r7, #32]
    size_req  = Mem_PoolSegCalcTotSize(pmem_addr,
    59a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    59a2:	f04f 0101 	mov.w	r1, #1
    59a6:	68fa      	ldr	r2, [r7, #12]
    59a8:	68bb      	ldr	r3, [r7, #8]
    59aa:	f000 fb29 	bl	6000 <Mem_PoolSegCalcTotSize>
    59ae:	61f8      	str	r0, [r7, #28]
       *perr         = LIB_MEM_ERR_HEAP_OVF;
        return ((void *)0);
    }
#endif

    if (size_req > size_rem) {                                      /* If req'd size > rem heap size, ...               */
    59b0:	69fa      	ldr	r2, [r7, #28]
    59b2:	6a3b      	ldr	r3, [r7, #32]
    59b4:	429a      	cmp	r2, r3
    59b6:	d910      	bls.n	59da <Mem_HeapAlloc+0x82>
        CPU_CRITICAL_EXIT();
    59b8:	f7fb ffaa 	bl	1910 <CPU_IntDisMeasStop>
    59bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59be:	f012 fa15 	bl	17dec <CPU_SR_Restore>
       *poctets_reqd = size_req - size_rem;                         /* ... rtn add'l heap size needed.                  */
    59c2:	69fa      	ldr	r2, [r7, #28]
    59c4:	6a3b      	ldr	r3, [r7, #32]
    59c6:	1ad2      	subs	r2, r2, r3
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	601a      	str	r2, [r3, #0]
       *perr         = LIB_MEM_ERR_HEAP_EMPTY;
    59cc:	683b      	ldr	r3, [r7, #0]
    59ce:	f242 72e3 	movw	r2, #10211	; 0x27e3
    59d2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    59d4:	f04f 0300 	mov.w	r3, #0
    59d8:	e021      	b.n	5a1e <Mem_HeapAlloc+0xc6>
    }

    pmem_blk = Mem_PoolSegAlloc(pmem_pool_heap, size, align);
    59da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    59dc:	68f9      	ldr	r1, [r7, #12]
    59de:	68ba      	ldr	r2, [r7, #8]
    59e0:	f000 fb52 	bl	6088 <Mem_PoolSegAlloc>
    59e4:	61b8      	str	r0, [r7, #24]
    if (pmem_blk == (void *)0) {                                    /* If mem blk NOT avail from heap, ...              */
    59e6:	69bb      	ldr	r3, [r7, #24]
    59e8:	2b00      	cmp	r3, #0
    59ea:	d10e      	bne.n	5a0a <Mem_HeapAlloc+0xb2>
        CPU_CRITICAL_EXIT();
    59ec:	f7fb ff90 	bl	1910 <CPU_IntDisMeasStop>
    59f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59f2:	f012 f9fb 	bl	17dec <CPU_SR_Restore>
       *poctets_reqd = size_req;                                    /* ... rtn add'l heap size needed.                  */
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	69fa      	ldr	r2, [r7, #28]
    59fa:	601a      	str	r2, [r3, #0]
       *perr         = LIB_MEM_ERR_HEAP_EMPTY;
    59fc:	683b      	ldr	r3, [r7, #0]
    59fe:	f242 72e3 	movw	r2, #10211	; 0x27e3
    5a02:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    5a04:	f04f 0300 	mov.w	r3, #0
    5a08:	e009      	b.n	5a1e <Mem_HeapAlloc+0xc6>
    }

    CPU_CRITICAL_EXIT();
    5a0a:	f7fb ff81 	bl	1910 <CPU_IntDisMeasStop>
    5a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5a10:	f012 f9ec 	bl	17dec <CPU_SR_Restore>

   *perr =  LIB_MEM_ERR_NONE;
    5a14:	683b      	ldr	r3, [r7, #0]
    5a16:	f242 7210 	movw	r2, #10000	; 0x2710
    5a1a:	801a      	strh	r2, [r3, #0]

    return (pmem_blk);
    5a1c:	69bb      	ldr	r3, [r7, #24]
}
    5a1e:	4618      	mov	r0, r3
    5a20:	f107 0730 	add.w	r7, r7, #48	; 0x30
    5a24:	46bd      	mov	sp, r7
    5a26:	bd80      	pop	{r7, pc}

00005a28 <Mem_PoolClr>:
*/

#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
void  Mem_PoolClr (MEM_POOL  *pmem_pool,
                   LIB_ERR   *perr)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]
        CPU_SW_EXCEPTION(;);
    }
#endif

                                                                /* -------------- VALIDATE MEM POOL PTR --------------- */
    if (pmem_pool == (MEM_POOL *)0) {
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d104      	bne.n	5a42 <Mem_PoolClr+0x1a>
       *perr = LIB_MEM_ERR_NULL_PTR;
    5a38:	683b      	ldr	r3, [r7, #0]
    5a3a:	f242 7211 	movw	r2, #10001	; 0x2711
    5a3e:	801a      	strh	r2, [r3, #0]
        return;
    5a40:	e049      	b.n	5ad6 <Mem_PoolClr+0xae>
    }


    pmem_pool->Type             = (LIB_MEM_TYPE)LIB_MEM_TYPE_NONE;
    5a42:	687a      	ldr	r2, [r7, #4]
    5a44:	f644 734e 	movw	r3, #20302	; 0x4f4e
    5a48:	f2c4 534e 	movt	r3, #17742	; 0x454e
    5a4c:	6013      	str	r3, [r2, #0]
    pmem_pool->SegPrevPtr       = (MEM_POOL   *)0;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	f04f 0200 	mov.w	r2, #0
    5a54:	605a      	str	r2, [r3, #4]
    pmem_pool->SegNextPtr       = (MEM_POOL   *)0;
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	f04f 0200 	mov.w	r2, #0
    5a5c:	609a      	str	r2, [r3, #8]
    pmem_pool->PoolPrevPtr      = (MEM_POOL   *)0;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	f04f 0200 	mov.w	r2, #0
    5a64:	60da      	str	r2, [r3, #12]
    pmem_pool->PoolNextPtr      = (MEM_POOL   *)0;
    5a66:	687b      	ldr	r3, [r7, #4]
    5a68:	f04f 0200 	mov.w	r2, #0
    5a6c:	611a      	str	r2, [r3, #16]
    pmem_pool->PoolAddrStart    = (void       *)0;
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	f04f 0200 	mov.w	r2, #0
    5a74:	615a      	str	r2, [r3, #20]
    pmem_pool->PoolAddrEnd      = (void       *)0;
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	f04f 0200 	mov.w	r2, #0
    5a7c:	619a      	str	r2, [r3, #24]
    pmem_pool->PoolPtrs         = (void      **)0;
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	f04f 0200 	mov.w	r2, #0
    5a84:	61da      	str	r2, [r3, #28]
    pmem_pool->PoolSize         = (CPU_SIZE_T  )0u;
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	f04f 0200 	mov.w	r2, #0
    5a8c:	625a      	str	r2, [r3, #36]	; 0x24
    pmem_pool->BlkAlign         = (CPU_SIZE_T  )0u;
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	f04f 0200 	mov.w	r2, #0
    5a94:	631a      	str	r2, [r3, #48]	; 0x30
    pmem_pool->BlkSize          = (CPU_SIZE_T  )0u;
    5a96:	687b      	ldr	r3, [r7, #4]
    5a98:	f04f 0200 	mov.w	r2, #0
    5a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    pmem_pool->BlkNbr           = (CPU_SIZE_T  )0u;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	f04f 0200 	mov.w	r2, #0
    5aa4:	629a      	str	r2, [r3, #40]	; 0x28
    pmem_pool->BlkIx            = (MEM_POOL_IX )0u;
    5aa6:	687b      	ldr	r3, [r7, #4]
    5aa8:	f04f 0200 	mov.w	r2, #0
    5aac:	841a      	strh	r2, [r3, #32]
    pmem_pool->SegAddr          = (void       *)0;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	f04f 0200 	mov.w	r2, #0
    5ab4:	635a      	str	r2, [r3, #52]	; 0x34
    pmem_pool->SegAddrNextAvail = (void       *)0;
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	f04f 0200 	mov.w	r2, #0
    5abc:	639a      	str	r2, [r3, #56]	; 0x38
    pmem_pool->SegSizeTot       = (CPU_SIZE_T  )0u;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	f04f 0200 	mov.w	r2, #0
    5ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    pmem_pool->SegSizeRem       = (CPU_SIZE_T  )0u;
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	f04f 0200 	mov.w	r2, #0
    5acc:	641a      	str	r2, [r3, #64]	; 0x40


   *perr = LIB_MEM_ERR_NONE;
    5ace:	683b      	ldr	r3, [r7, #0]
    5ad0:	f242 7210 	movw	r2, #10000	; 0x2710
    5ad4:	801a      	strh	r2, [r3, #0]
}
    5ad6:	f107 070c 	add.w	r7, r7, #12
    5ada:	46bd      	mov	sp, r7
    5adc:	bc80      	pop	{r7}
    5ade:	4770      	bx	lr

00005ae0 <Mem_PoolCreate>:
                      CPU_SIZE_T   blk_nbr,
                      CPU_SIZE_T   blk_size,
                      CPU_SIZE_T   blk_align,
                      CPU_SIZE_T  *poctets_reqd,
                      LIB_ERR     *perr)
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b09a      	sub	sp, #104	; 0x68
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	60f8      	str	r0, [r7, #12]
    5ae8:	60b9      	str	r1, [r7, #8]
    5aea:	607a      	str	r2, [r7, #4]
    5aec:	603b      	str	r3, [r7, #0]
    CPU_SIZE_T    size_tot_pool;
    CPU_SIZE_T    size_rem;
    CPU_SIZE_T    size_pool_ptrs;
    CPU_SIZE_T    blk_rem;
    CPU_SIZE_T    i;
    CPU_SR_ALLOC();
    5aee:	f04f 0300 	mov.w	r3, #0
    5af2:	64bb      	str	r3, [r7, #72]	; 0x48
        CPU_SW_EXCEPTION(;);
    }
#endif

                                                                    /* ------------ VALIDATE RTN OCTETS PTR ----------- */
    if (poctets_reqd == (CPU_SIZE_T *) 0) {                         /* If NOT avail, ...                                */
    5af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5af6:	2b00      	cmp	r3, #0
    5af8:	d102      	bne.n	5b00 <Mem_PoolCreate+0x20>
        poctets_reqd  = (CPU_SIZE_T *)&octets_reqd_unused;          /* ... re-cfg NULL rtn ptr to unused local var.     */
    5afa:	f107 0314 	add.w	r3, r7, #20
    5afe:	67bb      	str	r3, [r7, #120]	; 0x78
       (void)&octets_reqd_unused;                                   /* Prevent possible 'variable unused' warning.      */
    }
   *poctets_reqd = 0u;                                              /* Init octets req'd for err (see Note #4).         */
    5b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5b02:	f04f 0200 	mov.w	r2, #0
    5b06:	601a      	str	r2, [r3, #0]



    Mem_PoolClr(pmem_pool, perr);                                   /* Init mem pool     for err (see Note #4).         */
    5b08:	68f8      	ldr	r0, [r7, #12]
    5b0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    5b0c:	f7ff ff8c 	bl	5a28 <Mem_PoolClr>
    if (*perr != LIB_MEM_ERR_NONE) {
    5b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5b12:	881a      	ldrh	r2, [r3, #0]
    5b14:	f242 7310 	movw	r3, #10000	; 0x2710
    5b18:	429a      	cmp	r2, r3
    5b1a:	f040 81e0 	bne.w	5ede <Mem_PoolCreate+0x3fe>
    }
#endif


                                                                    /* ------------ VALIDATE MEM POOL TBL ------------- */
    if (Mem_PoolTbl == (MEM_POOL *)0) {
    5b1e:	f643 5340 	movw	r3, #15680	; 0x3d40
    5b22:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d104      	bne.n	5b36 <Mem_PoolCreate+0x56>
       *perr = LIB_MEM_ERR_HEAP_NOT_FOUND;
    5b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5b2e:	f242 72e2 	movw	r2, #10210	; 0x27e2
    5b32:	801a      	strh	r2, [r3, #0]
        return;
    5b34:	e1d4      	b.n	5ee0 <Mem_PoolCreate+0x400>



/*$PAGE*/
                                                                    /* ---------------- CREATE MEM POOL --------------- */
    pmem_pool_heap = (MEM_POOL *)&Mem_PoolHeap;
    5b36:	f643 43fc 	movw	r3, #15612	; 0x3cfc
    5b3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5b3e:	647b      	str	r3, [r7, #68]	; 0x44
    size_tot       = (CPU_SIZE_T) 0u;
    5b40:	f04f 0300 	mov.w	r3, #0
    5b44:	657b      	str	r3, [r7, #84]	; 0x54

    CPU_CRITICAL_ENTER();
    5b46:	f012 f94d 	bl	17de4 <CPU_SR_Save>
    5b4a:	64b8      	str	r0, [r7, #72]	; 0x48
    5b4c:	f7fb feb4 	bl	18b8 <CPU_IntDisMeasStart>

    if (pmem_base_addr == (void *)0) {                              /* If no base addr, cfg mem pool from heap.         */
    5b50:	68bb      	ldr	r3, [r7, #8]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d137      	bne.n	5bc6 <Mem_PoolCreate+0xe6>
        pmem_pool_blk   =  pmem_pool_heap;
    5b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b58:	65fb      	str	r3, [r7, #92]	; 0x5c
        pmem_pool_prev  =  pmem_pool_heap;
    5b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b5c:	667b      	str	r3, [r7, #100]	; 0x64
        pmem_pool_next  =  pmem_pool_heap;
    5b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b60:	663b      	str	r3, [r7, #96]	; 0x60

                                                                    /* --------------- VALIDATE MEM SEG --------------- */
                                                                    /* Calc tot mem   size for mem pool ptrs.           */
        pmem_addr_ptrs  = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
    5b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5b66:	643b      	str	r3, [r7, #64]	; 0x40
        size_tot_ptrs   =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_ptrs,
    5b68:	6c38      	ldr	r0, [r7, #64]	; 0x40
    5b6a:	6839      	ldr	r1, [r7, #0]
    5b6c:	f04f 0204 	mov.w	r2, #4
    5b70:	f04f 0304 	mov.w	r3, #4
    5b74:	f000 fa44 	bl	6000 <Mem_PoolSegCalcTotSize>
    5b78:	63f8      	str	r0, [r7, #60]	; 0x3c
           *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
            return;
        }
#endif
                                                                    /* Calc tot mem   size for mem blks.                */
        pmem_addr_pool  =  pmem_addr_ptrs + size_tot_ptrs;          /* Adj next avail addr for mem pool blks.           */
    5b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b7e:	18d3      	adds	r3, r2, r3
    5b80:	65bb      	str	r3, [r7, #88]	; 0x58
        size_tot_pool   =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_pool,
    5b82:	6db8      	ldr	r0, [r7, #88]	; 0x58
    5b84:	6839      	ldr	r1, [r7, #0]
    5b86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    5b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    5b8a:	f000 fa39 	bl	6000 <Mem_PoolSegCalcTotSize>
    5b8e:	6538      	str	r0, [r7, #80]	; 0x50
           *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
            return;
        }
#endif

        size_tot = size_tot_ptrs + size_tot_pool;
    5b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5b94:	18d3      	adds	r3, r2, r3
    5b96:	657b      	str	r3, [r7, #84]	; 0x54
           *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
            return;
        }
#endif

        size_rem = pmem_pool_heap->SegSizeRem;
    5b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5b9c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size_tot > size_rem) {                                  /* If tot size > rem  size, ...                     */
    5b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5ba2:	429a      	cmp	r2, r3
    5ba4:	f240 80c1 	bls.w	5d2a <Mem_PoolCreate+0x24a>
            CPU_CRITICAL_EXIT();
    5ba8:	f7fb feb2 	bl	1910 <CPU_IntDisMeasStop>
    5bac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5bae:	f012 f91d 	bl	17dec <CPU_SR_Restore>
           *poctets_reqd = size_tot - size_rem;                     /* ... rtn add'l heap size needed.                  */
    5bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bb6:	1ad2      	subs	r2, r2, r3
    5bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5bba:	601a      	str	r2, [r3, #0]
           *perr         = LIB_MEM_ERR_HEAP_EMPTY;
    5bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5bbe:	f242 72e3 	movw	r2, #10211	; 0x27e3
    5bc2:	801a      	strh	r2, [r3, #0]
            return;
    5bc4:	e18c      	b.n	5ee0 <Mem_PoolCreate+0x400>
        }

/*$PAGE*/
    } else {                                                        /* Else cfg mem pool from dedicated mem.            */
                                                                    /* -------- SRCH ALL MEM SEGS FOR MEM POOL -------- */
        pmem_base_addr_start = (CPU_INT08U *)pmem_base_addr;
    5bc6:	68bb      	ldr	r3, [r7, #8]
    5bc8:	637b      	str	r3, [r7, #52]	; 0x34
        pmem_base_addr_end   = (CPU_INT08U *)pmem_base_addr + mem_size - 1;
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	f103 33ff 	add.w	r3, r3, #4294967295
    5bd0:	68ba      	ldr	r2, [r7, #8]
    5bd2:	18d3      	adds	r3, r2, r3
    5bd4:	633b      	str	r3, [r7, #48]	; 0x30
           *perr = LIB_MEM_ERR_INVALID_BLK_ADDR;
            return;
        }
#endif

        pmem_pool_blk  = (MEM_POOL *)0;
    5bd6:	f04f 0300 	mov.w	r3, #0
    5bda:	65fb      	str	r3, [r7, #92]	; 0x5c
        pmem_pool_prev = (MEM_POOL *)0;
    5bdc:	f04f 0300 	mov.w	r3, #0
    5be0:	667b      	str	r3, [r7, #100]	; 0x64
        pmem_pool_next =  Mem_PoolTbl;
    5be2:	f643 5340 	movw	r3, #15680	; 0x3d40
    5be6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5bea:	681b      	ldr	r3, [r3, #0]
    5bec:	663b      	str	r3, [r7, #96]	; 0x60

        while (pmem_pool_next != (MEM_POOL *)0) {                   /* Srch tbl for mem seg with same base addr/size.   */
    5bee:	e044      	b.n	5c7a <Mem_PoolCreate+0x19a>

            if ((pmem_base_addr == pmem_pool_next->SegAddr) &&      /* If same base addr/size found, ...                */
    5bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5bf4:	68bb      	ldr	r3, [r7, #8]
    5bf6:	429a      	cmp	r2, r3
    5bf8:	d109      	bne.n	5c0e <Mem_PoolCreate+0x12e>
                (mem_size       == pmem_pool_next->SegSizeTot)) {
    5bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        pmem_pool_prev = (MEM_POOL *)0;
        pmem_pool_next =  Mem_PoolTbl;

        while (pmem_pool_next != (MEM_POOL *)0) {                   /* Srch tbl for mem seg with same base addr/size.   */

            if ((pmem_base_addr == pmem_pool_next->SegAddr) &&      /* If same base addr/size found, ...                */
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	429a      	cmp	r2, r3
    5c02:	d104      	bne.n	5c0e <Mem_PoolCreate+0x12e>
                (mem_size       == pmem_pool_next->SegSizeTot)) {

                 pmem_pool_blk   = pmem_pool_next;
    5c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c06:	65fb      	str	r3, [r7, #92]	; 0x5c
                 pmem_pool_prev  = pmem_pool_next;
    5c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c0a:	667b      	str	r3, [r7, #100]	; 0x64
                 break;                                             /* ... prev mem seg    found in tbl.                */
    5c0c:	e03a      	b.n	5c84 <Mem_PoolCreate+0x1a4>

            } else {
                pmem_seg_addr_start = (CPU_INT08U *)pmem_pool_next->SegAddr;
    5c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5c12:	62fb      	str	r3, [r7, #44]	; 0x2c
                pmem_seg_addr_end   = (CPU_INT08U *)pmem_pool_next->SegAddr + pmem_pool_next->SegSizeTot - 1;
    5c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5c1c:	f103 33ff 	add.w	r3, r3, #4294967295
    5c20:	18d3      	adds	r3, r2, r3
    5c22:	62bb      	str	r3, [r7, #40]	; 0x28

                                                                    
                if (pmem_base_addr_end < pmem_seg_addr_start) {     /* If mem seg addr/size prior to next mem seg, ...  */
    5c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c28:	429a      	cmp	r2, r3
    5c2a:	d32a      	bcc.n	5c82 <Mem_PoolCreate+0x1a2>
                    break;                                          /* ... new mem seg NOT avail in tbl.                */

                                                                    /* If mem seg overlaps prev mem seg(s) in tbl, ...  */
                } else if (((pmem_base_addr_start <= pmem_seg_addr_start)  &&
    5c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c30:	429a      	cmp	r2, r3
    5c32:	d803      	bhi.n	5c3c <Mem_PoolCreate+0x15c>
    5c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c38:	429a      	cmp	r2, r3
    5c3a:	d20f      	bcs.n	5c5c <Mem_PoolCreate+0x17c>
                            (pmem_base_addr_end   >= pmem_seg_addr_start)) ||
    5c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c40:	429a      	cmp	r2, r3
    5c42:	d303      	bcc.n	5c4c <Mem_PoolCreate+0x16c>
                           ((pmem_base_addr_start >= pmem_seg_addr_start)  &&
    5c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5c48:	429a      	cmp	r2, r3
    5c4a:	d907      	bls.n	5c5c <Mem_PoolCreate+0x17c>
                            (pmem_base_addr_end   <= pmem_seg_addr_end  )) ||
    5c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5c50:	429a      	cmp	r2, r3
    5c52:	d80d      	bhi.n	5c70 <Mem_PoolCreate+0x190>
                           ((pmem_base_addr_start <= pmem_seg_addr_end  )  &&
    5c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5c58:	429a      	cmp	r2, r3
    5c5a:	d309      	bcc.n	5c70 <Mem_PoolCreate+0x190>
                            (pmem_base_addr_end   >= pmem_seg_addr_end  ))) {
                    CPU_CRITICAL_EXIT();
    5c5c:	f7fb fe58 	bl	1910 <CPU_IntDisMeasStop>
    5c60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5c62:	f012 f8c3 	bl	17dec <CPU_SR_Restore>
                   *perr = LIB_MEM_ERR_INVALID_SEG_OVERLAP;         /* ... rtn err.                                     */
    5c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5c68:	f242 727f 	movw	r2, #10111	; 0x277f
    5c6c:	801a      	strh	r2, [r3, #0]
                    return;
    5c6e:	e137      	b.n	5ee0 <Mem_PoolCreate+0x400>
                }
            }
                                                                    /* If mem seg NOT found, adv to next mem seg.       */
            pmem_pool_prev = pmem_pool_next;
    5c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c72:	667b      	str	r3, [r7, #100]	; 0x64
            pmem_pool_next = pmem_pool_next->SegNextPtr;
    5c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c76:	689b      	ldr	r3, [r3, #8]
    5c78:	663b      	str	r3, [r7, #96]	; 0x60

        pmem_pool_blk  = (MEM_POOL *)0;
        pmem_pool_prev = (MEM_POOL *)0;
        pmem_pool_next =  Mem_PoolTbl;

        while (pmem_pool_next != (MEM_POOL *)0) {                   /* Srch tbl for mem seg with same base addr/size.   */
    5c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d1b7      	bne.n	5bf0 <Mem_PoolCreate+0x110>
    5c80:	e000      	b.n	5c84 <Mem_PoolCreate+0x1a4>
                pmem_seg_addr_start = (CPU_INT08U *)pmem_pool_next->SegAddr;
                pmem_seg_addr_end   = (CPU_INT08U *)pmem_pool_next->SegAddr + pmem_pool_next->SegSizeTot - 1;

                                                                    
                if (pmem_base_addr_end < pmem_seg_addr_start) {     /* If mem seg addr/size prior to next mem seg, ...  */
                    break;                                          /* ... new mem seg NOT avail in tbl.                */
    5c82:	bf00      	nop
                                                                    /* If mem seg NOT found, adv to next mem seg.       */
            pmem_pool_prev = pmem_pool_next;
            pmem_pool_next = pmem_pool_next->SegNextPtr;
        }

        if (pmem_pool_blk == (MEM_POOL *)0) {                       /* If mem seg NOT found, add    new  mem seg.       */
    5c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5c86:	2b00      	cmp	r3, #0
    5c88:	d10d      	bne.n	5ca6 <Mem_PoolCreate+0x1c6>
            pmem_pool_blk               = pmem_pool;
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            pmem_pool->SegAddr          = pmem_base_addr;
    5c8e:	68fb      	ldr	r3, [r7, #12]
    5c90:	68ba      	ldr	r2, [r7, #8]
    5c92:	635a      	str	r2, [r3, #52]	; 0x34
            pmem_pool->SegAddrNextAvail = pmem_base_addr;
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	68ba      	ldr	r2, [r7, #8]
    5c98:	639a      	str	r2, [r3, #56]	; 0x38
            pmem_pool->SegSizeTot       = mem_size;
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	687a      	ldr	r2, [r7, #4]
    5c9e:	63da      	str	r2, [r3, #60]	; 0x3c
            pmem_pool->SegSizeRem       = mem_size;
    5ca0:	68fb      	ldr	r3, [r7, #12]
    5ca2:	687a      	ldr	r2, [r7, #4]
    5ca4:	641a      	str	r2, [r3, #64]	; 0x40
        }

/*$PAGE*/
                                                                    /* --------------- VALIDATE MEM SEG --------------- */
                                                                    /* Calc tot mem size for mem pool ptrs.             */
        pmem_addr_ptrs = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
    5ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5caa:	643b      	str	r3, [r7, #64]	; 0x40
        size_tot_ptrs  =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_ptrs,
    5cac:	6c38      	ldr	r0, [r7, #64]	; 0x40
    5cae:	6839      	ldr	r1, [r7, #0]
    5cb0:	f04f 0204 	mov.w	r2, #4
    5cb4:	f04f 0304 	mov.w	r3, #4
    5cb8:	f000 f9a2 	bl	6000 <Mem_PoolSegCalcTotSize>
    5cbc:	63f8      	str	r0, [r7, #60]	; 0x3c
           *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
            return;
        }
#endif

        size_rem = pmem_pool_heap->SegSizeRem;
    5cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5cc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size_tot_ptrs > size_rem) {                             /* If ptr size > rem  size, ...                     */
    5cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5cc8:	429a      	cmp	r2, r3
    5cca:	d90e      	bls.n	5cea <Mem_PoolCreate+0x20a>
            CPU_CRITICAL_EXIT();
    5ccc:	f7fb fe20 	bl	1910 <CPU_IntDisMeasStop>
    5cd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5cd2:	f012 f88b 	bl	17dec <CPU_SR_Restore>
           *poctets_reqd = size_tot_ptrs - size_rem;                /* ... rtn add'l heap size needed.                  */
    5cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5cda:	1ad2      	subs	r2, r2, r3
    5cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5cde:	601a      	str	r2, [r3, #0]
           *perr         = LIB_MEM_ERR_HEAP_EMPTY;
    5ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5ce2:	f242 72e3 	movw	r2, #10211	; 0x27e3
    5ce6:	801a      	strh	r2, [r3, #0]
            return;
    5ce8:	e0fa      	b.n	5ee0 <Mem_PoolCreate+0x400>
        }

                                                                    /* Calc tot mem size for mem blks.                  */
        pmem_addr_pool = (CPU_INT08U *)pmem_pool_blk->SegAddrNextAvail;
    5cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5cee:	65bb      	str	r3, [r7, #88]	; 0x58
        size_tot_pool  =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_pool,
    5cf0:	6db8      	ldr	r0, [r7, #88]	; 0x58
    5cf2:	6839      	ldr	r1, [r7, #0]
    5cf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    5cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    5cf8:	f000 f982 	bl	6000 <Mem_PoolSegCalcTotSize>
    5cfc:	6538      	str	r0, [r7, #80]	; 0x50
           *perr = LIB_MEM_ERR_SEG_OVF;                             /* ... rtn err but add'l seg  size NOT avail.       */
            return;
        }
#endif

        size_rem = pmem_pool_blk->SegSizeRem;
    5cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5d02:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size_tot_pool > size_rem) {                             /* If tot size > rem  size, ...                     */
    5d04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d08:	429a      	cmp	r2, r3
    5d0a:	d90e      	bls.n	5d2a <Mem_PoolCreate+0x24a>
            CPU_CRITICAL_EXIT();
    5d0c:	f7fb fe00 	bl	1910 <CPU_IntDisMeasStop>
    5d10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5d12:	f012 f86b 	bl	17dec <CPU_SR_Restore>
           *poctets_reqd = size_tot_pool - size_rem;                /* ... rtn add'l seg  size needed.                  */
    5d16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d1a:	1ad2      	subs	r2, r2, r3
    5d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5d1e:	601a      	str	r2, [r3, #0]
           *perr         = LIB_MEM_ERR_SEG_EMPTY;
    5d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5d22:	f242 72d8 	movw	r2, #10200	; 0x27d8
    5d26:	801a      	strh	r2, [r3, #0]
            return;
    5d28:	e0da      	b.n	5ee0 <Mem_PoolCreate+0x400>
    }


/*$PAGE*/
                                                                    /* ---------------- ALLOC MEM BLKs ---------------- */
    size_pool_ptrs =  blk_nbr * sizeof(void *);
    5d2a:	683b      	ldr	r3, [r7, #0]
    5d2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d30:	627b      	str	r3, [r7, #36]	; 0x24
                                                                    /* Alloc stk of ptrs for mem blks from heap.        */
    ppool_ptr      = (void **)Mem_PoolSegAlloc((MEM_POOL *)pmem_pool_heap,
    5d32:	6c78      	ldr	r0, [r7, #68]	; 0x44
    5d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5d36:	f04f 0204 	mov.w	r2, #4
    5d3a:	f000 f9a5 	bl	6088 <Mem_PoolSegAlloc>
    5d3e:	6238      	str	r0, [r7, #32]
                                               (CPU_SIZE_T)size_pool_ptrs,
                                               (CPU_SIZE_T)sizeof(void *));
    if (ppool_ptr == (void **)0) {                                  /* If mem pool ptrs alloc failed, ...               */
    5d40:	6a3b      	ldr	r3, [r7, #32]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d12a      	bne.n	5d9c <Mem_PoolCreate+0x2bc>
        size_rem = pmem_pool_heap->SegSizeRem;
    5d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        CPU_CRITICAL_EXIT();
    5d4c:	f7fb fde0 	bl	1910 <CPU_IntDisMeasStop>
    5d50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5d52:	f012 f84b 	bl	17dec <CPU_SR_Restore>
                                                                    /* ... rtn add'l heap size needed.                  */
        if (pmem_base_addr == (void *)0) {
    5d56:	68bb      	ldr	r3, [r7, #8]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d10d      	bne.n	5d78 <Mem_PoolCreate+0x298>
            if (size_tot > size_rem) {
    5d5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d60:	429a      	cmp	r2, r3
    5d62:	d905      	bls.n	5d70 <Mem_PoolCreate+0x290>
               *poctets_reqd = size_tot       - size_rem;
    5d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d68:	1ad2      	subs	r2, r2, r3
    5d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5d6c:	601a      	str	r2, [r3, #0]
    5d6e:	e010      	b.n	5d92 <Mem_PoolCreate+0x2b2>
            } else {
               *poctets_reqd = size_tot;
    5d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d74:	601a      	str	r2, [r3, #0]
    5d76:	e00c      	b.n	5d92 <Mem_PoolCreate+0x2b2>
            }
        } else {
            if (size_pool_ptrs > size_rem) {
    5d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d7c:	429a      	cmp	r2, r3
    5d7e:	d905      	bls.n	5d8c <Mem_PoolCreate+0x2ac>
               *poctets_reqd = size_pool_ptrs - size_rem;
    5d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d84:	1ad2      	subs	r2, r2, r3
    5d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5d88:	601a      	str	r2, [r3, #0]
    5d8a:	e002      	b.n	5d92 <Mem_PoolCreate+0x2b2>
            } else {
               *poctets_reqd = size_pool_ptrs;
    5d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d90:	601a      	str	r2, [r3, #0]
            }
        }
       *perr = LIB_MEM_ERR_HEAP_EMPTY;
    5d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5d94:	f242 72e3 	movw	r2, #10211	; 0x27e3
    5d98:	801a      	strh	r2, [r3, #0]
        return;
    5d9a:	e0a1      	b.n	5ee0 <Mem_PoolCreate+0x400>
    }

    for (i = 0u; i < blk_nbr; i++) {                                /* Alloc mem blks from blk seg ptr.                 */
    5d9c:	f04f 0300 	mov.w	r3, #0
    5da0:	64fb      	str	r3, [r7, #76]	; 0x4c
    5da2:	e03b      	b.n	5e1c <Mem_PoolCreate+0x33c>
        pmem_blk = (void *)Mem_PoolSegAlloc(pmem_pool_blk, blk_size, blk_align);
    5da4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    5da6:	6f39      	ldr	r1, [r7, #112]	; 0x70
    5da8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    5daa:	f000 f96d 	bl	6088 <Mem_PoolSegAlloc>
    5dae:	61f8      	str	r0, [r7, #28]
        if (pmem_blk == (void *)0) {                                /* If    mem blks alloc failed, ...                 */
    5db0:	69fb      	ldr	r3, [r7, #28]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d127      	bne.n	5e06 <Mem_PoolCreate+0x326>
            pmem_addr_pool = (CPU_INT08U *)pmem_pool_blk->SegAddrNextAvail;
    5db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5dba:	65bb      	str	r3, [r7, #88]	; 0x58
            size_rem       = (CPU_SIZE_T  )pmem_pool_blk->SegSizeRem;
    5dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5dc0:	63bb      	str	r3, [r7, #56]	; 0x38
            CPU_CRITICAL_EXIT();
    5dc2:	f7fb fda5 	bl	1910 <CPU_IntDisMeasStop>
    5dc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5dc8:	f012 f810 	bl	17dec <CPU_SR_Restore>
            blk_rem        =  blk_nbr - i;
    5dcc:	683a      	ldr	r2, [r7, #0]
    5dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5dd0:	1ad3      	subs	r3, r2, r3
    5dd2:	61bb      	str	r3, [r7, #24]
            size_tot       =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_pool,
    5dd4:	6db8      	ldr	r0, [r7, #88]	; 0x58
    5dd6:	69b9      	ldr	r1, [r7, #24]
    5dd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    5dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    5ddc:	f000 f910 	bl	6000 <Mem_PoolSegCalcTotSize>
    5de0:	6578      	str	r0, [r7, #84]	; 0x54
                                                     (CPU_SIZE_T)blk_rem,
                                                     (CPU_SIZE_T)blk_size,
                                                     (CPU_SIZE_T)blk_align);
                                                                    /* ... rtn add'l seg  size needed.                  */
            if (size_tot > size_rem) {
    5de2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5de6:	429a      	cmp	r2, r3
    5de8:	d905      	bls.n	5df6 <Mem_PoolCreate+0x316>
               *poctets_reqd = size_tot - size_rem;
    5dea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5dee:	1ad2      	subs	r2, r2, r3
    5df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5df2:	601a      	str	r2, [r3, #0]
    5df4:	e002      	b.n	5dfc <Mem_PoolCreate+0x31c>
            } else {
               *poctets_reqd = size_tot;
    5df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    5df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5dfa:	601a      	str	r2, [r3, #0]
            }
           *perr = LIB_MEM_ERR_SEG_EMPTY;
    5dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5dfe:	f242 72d8 	movw	r2, #10200	; 0x27d8
    5e02:	801a      	strh	r2, [r3, #0]
            return;
    5e04:	e06c      	b.n	5ee0 <Mem_PoolCreate+0x400>
        }
        ppool_ptr[i] = pmem_blk;
    5e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5e08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e0c:	6a3a      	ldr	r2, [r7, #32]
    5e0e:	18d3      	adds	r3, r2, r3
    5e10:	69fa      	ldr	r2, [r7, #28]
    5e12:	601a      	str	r2, [r3, #0]
        }
       *perr = LIB_MEM_ERR_HEAP_EMPTY;
        return;
    }

    for (i = 0u; i < blk_nbr; i++) {                                /* Alloc mem blks from blk seg ptr.                 */
    5e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5e16:	f103 0301 	add.w	r3, r3, #1
    5e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    5e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5e1e:	683b      	ldr	r3, [r7, #0]
    5e20:	429a      	cmp	r2, r3
    5e22:	d3bf      	bcc.n	5da4 <Mem_PoolCreate+0x2c4>
    }


/*$PAGE*/
                                                                    /* ------------- UPDATE MEM POOL TBL -------------- */
    if (pmem_pool_prev == pmem_pool_next) {                         /* Add new mem seg  to list.                        */
    5e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e28:	429a      	cmp	r2, r3
    5e2a:	d112      	bne.n	5e52 <Mem_PoolCreate+0x372>

        pmem_pool_next             = pmem_pool_blk->PoolNextPtr;
    5e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5e2e:	691b      	ldr	r3, [r3, #16]
    5e30:	663b      	str	r3, [r7, #96]	; 0x60
        pmem_pool->PoolPrevPtr     = pmem_pool_blk;
    5e32:	68fb      	ldr	r3, [r7, #12]
    5e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    5e36:	60da      	str	r2, [r3, #12]
        pmem_pool->PoolNextPtr     = pmem_pool_next;
    5e38:	68fb      	ldr	r3, [r7, #12]
    5e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e3c:	611a      	str	r2, [r3, #16]
        pmem_pool_blk->PoolNextPtr = pmem_pool;
    5e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5e40:	68fa      	ldr	r2, [r7, #12]
    5e42:	611a      	str	r2, [r3, #16]
        if (pmem_pool_next != (MEM_POOL *)0) {
    5e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e46:	2b00      	cmp	r3, #0
    5e48:	d01c      	beq.n	5e84 <Mem_PoolCreate+0x3a4>
            pmem_pool_next->PoolPrevPtr = pmem_pool;
    5e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e4c:	68fa      	ldr	r2, [r7, #12]
    5e4e:	60da      	str	r2, [r3, #12]
    5e50:	e018      	b.n	5e84 <Mem_PoolCreate+0x3a4>
        }

    } else {                                                        /* Add new mem pool to mem seg.                     */

        pmem_pool->SegPrevPtr = pmem_pool_prev;
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e56:	605a      	str	r2, [r3, #4]
        pmem_pool->SegNextPtr = pmem_pool_next;
    5e58:	68fb      	ldr	r3, [r7, #12]
    5e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e5c:	609a      	str	r2, [r3, #8]

        if (pmem_pool_prev != (MEM_POOL *)0) {                      /* Update prev mem pool link.                       */
    5e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e60:	2b00      	cmp	r3, #0
    5e62:	d003      	beq.n	5e6c <Mem_PoolCreate+0x38c>
            pmem_pool_prev->SegNextPtr = pmem_pool;
    5e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e66:	68fa      	ldr	r2, [r7, #12]
    5e68:	609a      	str	r2, [r3, #8]
    5e6a:	e005      	b.n	5e78 <Mem_PoolCreate+0x398>
        } else {
            Mem_PoolTbl                = pmem_pool;                 /* Update      mem pool head.                       */
    5e6c:	f643 5340 	movw	r3, #15680	; 0x3d40
    5e70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5e74:	68fa      	ldr	r2, [r7, #12]
    5e76:	601a      	str	r2, [r3, #0]
        }

        if (pmem_pool_next != (MEM_POOL *)0) {                      /* Update next mem pool link.                       */
    5e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d002      	beq.n	5e84 <Mem_PoolCreate+0x3a4>
            pmem_pool_next->SegPrevPtr = pmem_pool;
    5e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e80:	68fa      	ldr	r2, [r7, #12]
    5e82:	605a      	str	r2, [r3, #4]
        }
    }


                                                                    /* ----------------- CFG MEM POOL ----------------- */
    pmem_pool->Type          = (LIB_MEM_TYPE) LIB_MEM_TYPE_POOL;
    5e84:	68fa      	ldr	r2, [r7, #12]
    5e86:	f644 7350 	movw	r3, #20304	; 0x4f50
    5e8a:	f6c4 434f 	movt	r3, #19535	; 0x4c4f
    5e8e:	6013      	str	r3, [r2, #0]
    pmem_pool->PoolAddrStart = (void       *) pmem_addr_pool;
    5e90:	68fb      	ldr	r3, [r7, #12]
    5e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5e94:	615a      	str	r2, [r3, #20]
    pmem_pool->PoolAddrEnd   = (void       *)(pmem_addr_pool + size_tot_pool - 1);
    5e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5e98:	f103 33ff 	add.w	r3, r3, #4294967295
    5e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5e9e:	18d2      	adds	r2, r2, r3
    5ea0:	68fb      	ldr	r3, [r7, #12]
    5ea2:	619a      	str	r2, [r3, #24]
    pmem_pool->PoolPtrs      = (void      **) ppool_ptr;
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	6a3a      	ldr	r2, [r7, #32]
    5ea8:	61da      	str	r2, [r3, #28]
    pmem_pool->PoolSize      = (CPU_SIZE_T  ) size_tot_pool;
    5eaa:	68fb      	ldr	r3, [r7, #12]
    5eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5eae:	625a      	str	r2, [r3, #36]	; 0x24
    pmem_pool->BlkAlign      = (CPU_SIZE_T  ) blk_align;
    5eb0:	68fb      	ldr	r3, [r7, #12]
    5eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    5eb4:	631a      	str	r2, [r3, #48]	; 0x30
    pmem_pool->BlkSize       = (CPU_SIZE_T  ) blk_size;
    5eb6:	68fb      	ldr	r3, [r7, #12]
    5eb8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    5eba:	62da      	str	r2, [r3, #44]	; 0x2c
    pmem_pool->BlkNbr        = (CPU_SIZE_T  ) blk_nbr;
    5ebc:	68fb      	ldr	r3, [r7, #12]
    5ebe:	683a      	ldr	r2, [r7, #0]
    5ec0:	629a      	str	r2, [r3, #40]	; 0x28
    pmem_pool->BlkIx         = (MEM_POOL_IX ) blk_nbr;
    5ec2:	683b      	ldr	r3, [r7, #0]
    5ec4:	b29a      	uxth	r2, r3
    5ec6:	68fb      	ldr	r3, [r7, #12]
    5ec8:	841a      	strh	r2, [r3, #32]


    CPU_CRITICAL_EXIT();
    5eca:	f7fb fd21 	bl	1910 <CPU_IntDisMeasStop>
    5ece:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    5ed0:	f011 ff8c 	bl	17dec <CPU_SR_Restore>

   *perr = LIB_MEM_ERR_NONE;
    5ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5ed6:	f242 7210 	movw	r2, #10000	; 0x2710
    5eda:	801a      	strh	r2, [r3, #0]
    5edc:	e000      	b.n	5ee0 <Mem_PoolCreate+0x400>



    Mem_PoolClr(pmem_pool, perr);                                   /* Init mem pool     for err (see Note #4).         */
    if (*perr != LIB_MEM_ERR_NONE) {
         return;
    5ede:	bf00      	nop


    CPU_CRITICAL_EXIT();

   *perr = LIB_MEM_ERR_NONE;
}
    5ee0:	f107 0768 	add.w	r7, r7, #104	; 0x68
    5ee4:	46bd      	mov	sp, r7
    5ee6:	bd80      	pop	{r7, pc}

00005ee8 <Mem_PoolBlkGet>:
/*$PAGE*/
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
void  *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
                       CPU_SIZE_T   size,
                       LIB_ERR     *perr)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b086      	sub	sp, #24
    5eec:	af00      	add	r7, sp, #0
    5eee:	60f8      	str	r0, [r7, #12]
    5ef0:	60b9      	str	r1, [r7, #8]
    5ef2:	607a      	str	r2, [r7, #4]
    void  *pmem_blk;
    CPU_SR_ALLOC();
    5ef4:	f04f 0300 	mov.w	r3, #0
    5ef8:	617b      	str	r3, [r7, #20]
       *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
        return ((void *)0);
    }
#endif

    CPU_CRITICAL_ENTER();
    5efa:	f011 ff73 	bl	17de4 <CPU_SR_Save>
    5efe:	6178      	str	r0, [r7, #20]
    5f00:	f7fb fcda 	bl	18b8 <CPU_IntDisMeasStart>
    }
#endif

   (void)&size;                                                     /* Prevent possible 'variable unused' warning.      */

    if (pmem_pool->BlkIx < 1) {                                     /* Validate mem pool as NOT empty.                  */
    5f04:	68fb      	ldr	r3, [r7, #12]
    5f06:	8c1b      	ldrh	r3, [r3, #32]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d10b      	bne.n	5f24 <Mem_PoolBlkGet+0x3c>
        CPU_CRITICAL_EXIT();
    5f0c:	f7fb fd00 	bl	1910 <CPU_IntDisMeasStop>
    5f10:	6978      	ldr	r0, [r7, #20]
    5f12:	f011 ff6b 	bl	17dec <CPU_SR_Restore>
       *perr = LIB_MEM_ERR_POOL_EMPTY;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	f242 72de 	movw	r2, #10206	; 0x27de
    5f1c:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    5f1e:	f04f 0300 	mov.w	r3, #0
    5f22:	e02c      	b.n	5f7e <Mem_PoolBlkGet+0x96>
    }

    if (pmem_pool->BlkIx > pmem_pool->BlkNbr) {                     /* Validate mem pool ix NOT corrupt.                */
    5f24:	68fb      	ldr	r3, [r7, #12]
    5f26:	8c1b      	ldrh	r3, [r3, #32]
    5f28:	461a      	mov	r2, r3
    5f2a:	68fb      	ldr	r3, [r7, #12]
    5f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f2e:	429a      	cmp	r2, r3
    5f30:	d90b      	bls.n	5f4a <Mem_PoolBlkGet+0x62>
        CPU_CRITICAL_EXIT();
    5f32:	f7fb fced 	bl	1910 <CPU_IntDisMeasStop>
    5f36:	6978      	ldr	r0, [r7, #20]
    5f38:	f011 ff58 	bl	17dec <CPU_SR_Restore>
       *perr = LIB_MEM_ERR_INVALID_BLK_IX;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	f242 7295 	movw	r2, #10133	; 0x2795
    5f42:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    5f44:	f04f 0300 	mov.w	r3, #0
    5f48:	e019      	b.n	5f7e <Mem_PoolBlkGet+0x96>
    }

                                                                    /* ------------ GET MEM BLK FROM POOL ------------- */
    pmem_pool->BlkIx--;
    5f4a:	68fb      	ldr	r3, [r7, #12]
    5f4c:	8c1b      	ldrh	r3, [r3, #32]
    5f4e:	f103 33ff 	add.w	r3, r3, #4294967295
    5f52:	b29a      	uxth	r2, r3
    5f54:	68fb      	ldr	r3, [r7, #12]
    5f56:	841a      	strh	r2, [r3, #32]
    pmem_blk = pmem_pool->PoolPtrs[pmem_pool->BlkIx];
    5f58:	68fb      	ldr	r3, [r7, #12]
    5f5a:	69da      	ldr	r2, [r3, #28]
    5f5c:	68fb      	ldr	r3, [r7, #12]
    5f5e:	8c1b      	ldrh	r3, [r3, #32]
    5f60:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f64:	18d3      	adds	r3, r2, r3
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	613b      	str	r3, [r7, #16]

    CPU_CRITICAL_EXIT();
    5f6a:	f7fb fcd1 	bl	1910 <CPU_IntDisMeasStop>
    5f6e:	6978      	ldr	r0, [r7, #20]
    5f70:	f011 ff3c 	bl	17dec <CPU_SR_Restore>

   *perr =  LIB_MEM_ERR_NONE;
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	f242 7210 	movw	r2, #10000	; 0x2710
    5f7a:	801a      	strh	r2, [r3, #0]

    return (pmem_blk);
    5f7c:	693b      	ldr	r3, [r7, #16]
}
    5f7e:	4618      	mov	r0, r3
    5f80:	f107 0718 	add.w	r7, r7, #24
    5f84:	46bd      	mov	sp, r7
    5f86:	bd80      	pop	{r7, pc}

00005f88 <Mem_PoolBlkFree>:
/*$PAGE*/
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
void  Mem_PoolBlkFree (MEM_POOL  *pmem_pool,
                       void      *pmem_blk,
                       LIB_ERR   *perr)
{
    5f88:	b580      	push	{r7, lr}
    5f8a:	b086      	sub	sp, #24
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	60f8      	str	r0, [r7, #12]
    5f90:	60b9      	str	r1, [r7, #8]
    5f92:	607a      	str	r2, [r7, #4]
#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
    CPU_BOOLEAN  addr_valid;
    MEM_POOL_IX  i;
#endif
    CPU_SR_ALLOC();
    5f94:	f04f 0300 	mov.w	r3, #0
    5f98:	617b      	str	r3, [r7, #20]
       *perr = LIB_MEM_ERR_NULL_PTR;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
    5f9a:	f011 ff23 	bl	17de4 <CPU_SR_Save>
    5f9e:	6178      	str	r0, [r7, #20]
    5fa0:	f7fb fc8a 	bl	18b8 <CPU_IntDisMeasStart>
            return;
        }
    }
#endif

    if (pmem_pool->BlkIx >= pmem_pool->BlkNbr) {                    /* Validate mem pool NOT already full.              */
    5fa4:	68fb      	ldr	r3, [r7, #12]
    5fa6:	8c1b      	ldrh	r3, [r3, #32]
    5fa8:	461a      	mov	r2, r3
    5faa:	68fb      	ldr	r3, [r7, #12]
    5fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fae:	429a      	cmp	r2, r3
    5fb0:	d309      	bcc.n	5fc6 <Mem_PoolBlkFree+0x3e>
        CPU_CRITICAL_EXIT();
    5fb2:	f7fb fcad 	bl	1910 <CPU_IntDisMeasStop>
    5fb6:	6978      	ldr	r0, [r7, #20]
    5fb8:	f011 ff18 	bl	17dec <CPU_SR_Restore>
       *perr = LIB_MEM_ERR_POOL_FULL;
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	f242 72dd 	movw	r2, #10205	; 0x27dd
    5fc2:	801a      	strh	r2, [r3, #0]
        return;
    5fc4:	e018      	b.n	5ff8 <Mem_PoolBlkFree+0x70>
    }

                                                                    /* ------------- FREE MEM BLK TO POOL ------------- */
    pmem_pool->PoolPtrs[pmem_pool->BlkIx] = pmem_blk;
    5fc6:	68fb      	ldr	r3, [r7, #12]
    5fc8:	69da      	ldr	r2, [r3, #28]
    5fca:	68fb      	ldr	r3, [r7, #12]
    5fcc:	8c1b      	ldrh	r3, [r3, #32]
    5fce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fd2:	18d3      	adds	r3, r2, r3
    5fd4:	68ba      	ldr	r2, [r7, #8]
    5fd6:	601a      	str	r2, [r3, #0]
    pmem_pool->BlkIx++;
    5fd8:	68fb      	ldr	r3, [r7, #12]
    5fda:	8c1b      	ldrh	r3, [r3, #32]
    5fdc:	f103 0301 	add.w	r3, r3, #1
    5fe0:	b29a      	uxth	r2, r3
    5fe2:	68fb      	ldr	r3, [r7, #12]
    5fe4:	841a      	strh	r2, [r3, #32]

    CPU_CRITICAL_EXIT();
    5fe6:	f7fb fc93 	bl	1910 <CPU_IntDisMeasStop>
    5fea:	6978      	ldr	r0, [r7, #20]
    5fec:	f011 fefe 	bl	17dec <CPU_SR_Restore>

   *perr = LIB_MEM_ERR_NONE;
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	f242 7210 	movw	r2, #10000	; 0x2710
    5ff6:	801a      	strh	r2, [r3, #0]
}
    5ff8:	f107 0718 	add.w	r7, r7, #24
    5ffc:	46bd      	mov	sp, r7
    5ffe:	bd80      	pop	{r7, pc}

00006000 <Mem_PoolSegCalcTotSize>:
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
static  CPU_SIZE_T  Mem_PoolSegCalcTotSize (void        *pmem_addr,
                                            CPU_SIZE_T   blk_nbr,
                                            CPU_SIZE_T   blk_size,
                                            CPU_SIZE_T   blk_align)
{
    6000:	b480      	push	{r7}
    6002:	b089      	sub	sp, #36	; 0x24
    6004:	af00      	add	r7, sp, #0
    6006:	60f8      	str	r0, [r7, #12]
    6008:	60b9      	str	r1, [r7, #8]
    600a:	607a      	str	r2, [r7, #4]
    600c:	603b      	str	r3, [r7, #0]
    CPU_SIZE_T  mem_align_offset;
    CPU_SIZE_T  blk_align_offset;
    CPU_SIZE_T  size_tot;

                                                                    /* Calc mem align (see Note #2a).                   */
    align_offset = (CPU_ADDR)pmem_addr % blk_align;
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	683a      	ldr	r2, [r7, #0]
    6012:	fbb3 f2f2 	udiv	r2, r3, r2
    6016:	6839      	ldr	r1, [r7, #0]
    6018:	fb01 f202 	mul.w	r2, r1, r2
    601c:	1a9b      	subs	r3, r3, r2
    601e:	617b      	str	r3, [r7, #20]
    if (align_offset != 0u) {
    6020:	697b      	ldr	r3, [r7, #20]
    6022:	2b00      	cmp	r3, #0
    6024:	d004      	beq.n	6030 <Mem_PoolSegCalcTotSize+0x30>
        mem_align_offset = blk_align - align_offset;
    6026:	683a      	ldr	r2, [r7, #0]
    6028:	697b      	ldr	r3, [r7, #20]
    602a:	1ad3      	subs	r3, r2, r3
    602c:	61fb      	str	r3, [r7, #28]
    602e:	e002      	b.n	6036 <Mem_PoolSegCalcTotSize+0x36>
    } else {
        mem_align_offset = 0u;
    6030:	f04f 0300 	mov.w	r3, #0
    6034:	61fb      	str	r3, [r7, #28]
    }
                                                                    /* Calc blk align (see Note #2b).                   */
    align_offset = blk_size % blk_align;
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	683a      	ldr	r2, [r7, #0]
    603a:	fbb3 f2f2 	udiv	r2, r3, r2
    603e:	6839      	ldr	r1, [r7, #0]
    6040:	fb01 f202 	mul.w	r2, r1, r2
    6044:	1a9b      	subs	r3, r3, r2
    6046:	617b      	str	r3, [r7, #20]
    if (align_offset != 0u) {
    6048:	697b      	ldr	r3, [r7, #20]
    604a:	2b00      	cmp	r3, #0
    604c:	d004      	beq.n	6058 <Mem_PoolSegCalcTotSize+0x58>
        blk_align_offset = blk_align - align_offset;
    604e:	683a      	ldr	r2, [r7, #0]
    6050:	697b      	ldr	r3, [r7, #20]
    6052:	1ad3      	subs	r3, r2, r3
    6054:	61bb      	str	r3, [r7, #24]
    6056:	e002      	b.n	605e <Mem_PoolSegCalcTotSize+0x5e>
    } else {
        blk_align_offset = 0u;
    6058:	f04f 0300 	mov.w	r3, #0
    605c:	61bb      	str	r3, [r7, #24]
    }
                                                                    /* Calc tot size  (see Note #2c).                   */
    size_tot = mem_align_offset + ((blk_size + blk_align_offset) * (blk_nbr - 1)) + blk_size;
    605e:	687a      	ldr	r2, [r7, #4]
    6060:	69bb      	ldr	r3, [r7, #24]
    6062:	18d3      	adds	r3, r2, r3
    6064:	68ba      	ldr	r2, [r7, #8]
    6066:	f102 32ff 	add.w	r2, r2, #4294967295
    606a:	fb02 f203 	mul.w	r2, r2, r3
    606e:	69fb      	ldr	r3, [r7, #28]
    6070:	18d2      	adds	r2, r2, r3
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	18d3      	adds	r3, r2, r3
    6076:	613b      	str	r3, [r7, #16]
            return (0u);
        }
    }
#endif

    return (size_tot);
    6078:	693b      	ldr	r3, [r7, #16]
}
    607a:	4618      	mov	r0, r3
    607c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6080:	46bd      	mov	sp, r7
    6082:	bc80      	pop	{r7}
    6084:	4770      	bx	lr
    6086:	bf00      	nop

00006088 <Mem_PoolSegAlloc>:

#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
static  void  *Mem_PoolSegAlloc (MEM_POOL    *pmem_pool,
                                 CPU_SIZE_T   size,
                                 CPU_SIZE_T   align)
{
    6088:	b480      	push	{r7}
    608a:	b08b      	sub	sp, #44	; 0x2c
    608c:	af00      	add	r7, sp, #0
    608e:	60f8      	str	r0, [r7, #12]
    6090:	60b9      	str	r1, [r7, #8]
    6092:	607a      	str	r2, [r7, #4]
    CPU_SIZE_T   mem_align;
    CPU_SIZE_T   align_offset;
    CPU_SIZE_T   size_tot;


    pmem_addr = (CPU_INT08U *)pmem_pool->SegAddrNextAvail;
    6094:	68fb      	ldr	r3, [r7, #12]
    6096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6098:	623b      	str	r3, [r7, #32]

    mem_align = (CPU_SIZE_T)((CPU_ADDR)pmem_addr % align);          /* Calc mem align.                                  */
    609a:	6a3b      	ldr	r3, [r7, #32]
    609c:	687a      	ldr	r2, [r7, #4]
    609e:	fbb3 f2f2 	udiv	r2, r3, r2
    60a2:	6879      	ldr	r1, [r7, #4]
    60a4:	fb01 f202 	mul.w	r2, r1, r2
    60a8:	1a9b      	subs	r3, r3, r2
    60aa:	61fb      	str	r3, [r7, #28]

    if (mem_align != 0u) {
    60ac:	69fb      	ldr	r3, [r7, #28]
    60ae:	2b00      	cmp	r3, #0
    60b0:	d004      	beq.n	60bc <Mem_PoolSegAlloc+0x34>
        align_offset = align - mem_align;
    60b2:	687a      	ldr	r2, [r7, #4]
    60b4:	69fb      	ldr	r3, [r7, #28]
    60b6:	1ad3      	subs	r3, r2, r3
    60b8:	627b      	str	r3, [r7, #36]	; 0x24
    60ba:	e002      	b.n	60c2 <Mem_PoolSegAlloc+0x3a>
    } else {
        align_offset = 0u;
    60bc:	f04f 0300 	mov.w	r3, #0
    60c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_tot = align_offset + size;
    60c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60c4:	68bb      	ldr	r3, [r7, #8]
    60c6:	18d3      	adds	r3, r2, r3
    60c8:	61bb      	str	r3, [r7, #24]
    if (size_tot > pmem_pool->SegSizeRem) {                         /* If insufficiemt mem seg size rem, ...            */
    60ca:	68fb      	ldr	r3, [r7, #12]
    60cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    60ce:	69bb      	ldr	r3, [r7, #24]
    60d0:	429a      	cmp	r2, r3
    60d2:	d202      	bcs.n	60da <Mem_PoolSegAlloc+0x52>
        return ((void *)0);                                         /* ... rtn NULL.                                    */
    60d4:	f04f 0300 	mov.w	r3, #0
    60d8:	e011      	b.n	60fe <Mem_PoolSegAlloc+0x76>
        (size_tot < size)) {
        return ((void *)0);                                         /* ... rtn NULL.                                    */
    }
#endif

    pmem_addr_next = pmem_addr + size_tot;
    60da:	6a3a      	ldr	r2, [r7, #32]
    60dc:	69bb      	ldr	r3, [r7, #24]
    60de:	18d3      	adds	r3, r2, r3
    60e0:	617b      	str	r3, [r7, #20]
    if (pmem_addr_next < pmem_addr) {                               /* If addr ovf, ...                                 */
        return ((void *)0);                                         /* ... rtn NULL.                                    */
    }
#endif

    pmem_addr += align_offset;                                      /* Align mem addr.                                  */
    60e2:	6a3a      	ldr	r2, [r7, #32]
    60e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60e6:	18d3      	adds	r3, r2, r3
    60e8:	623b      	str	r3, [r7, #32]

    pmem_pool->SegAddrNextAvail  = (void     *)pmem_addr_next;      /* Adv next avail addr.                             */
    60ea:	68fb      	ldr	r3, [r7, #12]
    60ec:	697a      	ldr	r2, [r7, #20]
    60ee:	639a      	str	r2, [r3, #56]	; 0x38
    pmem_pool->SegSizeRem       -= (CPU_SIZE_T)size_tot;            /* Adj rem mem seg size.                            */
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    60f4:	69bb      	ldr	r3, [r7, #24]
    60f6:	1ad2      	subs	r2, r2, r3
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	641a      	str	r2, [r3, #64]	; 0x40

    return ((void *)pmem_addr);
    60fc:	6a3b      	ldr	r3, [r7, #32]
}
    60fe:	4618      	mov	r0, r3
    6100:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    6104:	46bd      	mov	sp, r7
    6106:	bc80      	pop	{r7}
    6108:	4770      	bx	lr
    610a:	bf00      	nop

0000610c <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
    610c:	b480      	push	{r7}
    610e:	b083      	sub	sp, #12
    6110:	af00      	add	r7, sp, #0
    CPU_DATA   i;
    CPU_DATA  *p_tbl;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
    6112:	f04f 0300 	mov.w	r3, #0
    6116:	607b      	str	r3, [r7, #4]
    6118:	e010      	b.n	613c <OS_PrioInit+0x30>
         p_tbl = &OSPrioTbl[i];
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6120:	f643 5344 	movw	r3, #15684	; 0x3d44
    6124:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6128:	18d3      	adds	r3, r2, r3
    612a:	603b      	str	r3, [r7, #0]
        *p_tbl = (CPU_DATA)0;
    612c:	683b      	ldr	r3, [r7, #0]
    612e:	f04f 0200 	mov.w	r2, #0
    6132:	601a      	str	r2, [r3, #0]
    CPU_DATA   i;
    CPU_DATA  *p_tbl;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	f103 0301 	add.w	r3, r3, #1
    613a:	607b      	str	r3, [r7, #4]
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	2b01      	cmp	r3, #1
    6140:	d9eb      	bls.n	611a <OS_PrioInit+0xe>
         p_tbl = &OSPrioTbl[i];
        *p_tbl = (CPU_DATA)0;
    }
}
    6142:	f107 070c 	add.w	r7, r7, #12
    6146:	46bd      	mov	sp, r7
    6148:	bc80      	pop	{r7}
    614a:	4770      	bx	lr

0000614c <OS_PrioGetHighest>:
*                 operation to be done at run-time.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
    614c:	b580      	push	{r7, lr}
    614e:	b082      	sub	sp, #8
    6150:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;



    prio  = (OS_PRIO)0;
    6152:	f04f 0300 	mov.w	r3, #0
    6156:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
    6158:	f643 5344 	movw	r3, #15684	; 0x3d44
    615c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6160:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
    6162:	e007      	b.n	6174 <OS_PrioGetHighest+0x28>
        prio += sizeof(CPU_DATA) * 8u;                      /* Compute the step of each CPU_DATA entry                */
    6164:	78fb      	ldrb	r3, [r7, #3]
    6166:	f103 0320 	add.w	r3, r3, #32
    616a:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	f103 0304 	add.w	r3, r3, #4
    6172:	607b      	str	r3, [r7, #4]



    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	2b00      	cmp	r3, #0
    617a:	d0f3      	beq.n	6164 <OS_PrioGetHighest+0x18>
        prio += sizeof(CPU_DATA) * 8u;                      /* Compute the step of each CPU_DATA entry                */
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	4618      	mov	r0, r3
    6182:	f011 fe36 	bl	17df2 <CPU_CntLeadZeros>
    6186:	4603      	mov	r3, r0
    6188:	b2da      	uxtb	r2, r3
    618a:	78fb      	ldrb	r3, [r7, #3]
    618c:	18d3      	adds	r3, r2, r3
    618e:	70fb      	strb	r3, [r7, #3]
    return (prio);
    6190:	78fb      	ldrb	r3, [r7, #3]
}
    6192:	4618      	mov	r0, r3
    6194:	f107 0708 	add.w	r7, r7, #8
    6198:	46bd      	mov	sp, r7
    619a:	bd80      	pop	{r7, pc}

0000619c <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
    619c:	b480      	push	{r7}
    619e:	b087      	sub	sp, #28
    61a0:	af00      	add	r7, sp, #0
    61a2:	4603      	mov	r3, r0
    61a4:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / (sizeof(CPU_DATA) * 8u);
    61a6:	79fb      	ldrb	r3, [r7, #7]
    61a8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    61ac:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (sizeof(CPU_DATA) * 8u - 1u);
    61ae:	79fb      	ldrb	r3, [r7, #7]
    61b0:	f003 031f 	and.w	r3, r3, #31
    61b4:	613b      	str	r3, [r7, #16]
    bit            = 1u;
    61b6:	f04f 0301 	mov.w	r3, #1
    61ba:	60fb      	str	r3, [r7, #12]
    bit          <<= (sizeof(CPU_DATA) * 8u - 1u) - bit_nbr;
    61bc:	693b      	ldr	r3, [r7, #16]
    61be:	f1c3 031f 	rsb	r3, r3, #31
    61c2:	68fa      	ldr	r2, [r7, #12]
    61c4:	fa02 f303 	lsl.w	r3, r2, r3
    61c8:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
    61ca:	7dfa      	ldrb	r2, [r7, #23]
    61cc:	7df9      	ldrb	r1, [r7, #23]
    61ce:	f643 5344 	movw	r3, #15684	; 0x3d44
    61d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    61da:	68fb      	ldr	r3, [r7, #12]
    61dc:	4319      	orrs	r1, r3
    61de:	f643 5344 	movw	r3, #15684	; 0x3d44
    61e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    61ea:	f107 071c 	add.w	r7, r7, #28
    61ee:	46bd      	mov	sp, r7
    61f0:	bc80      	pop	{r7}
    61f2:	4770      	bx	lr

000061f4 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
    61f4:	b480      	push	{r7}
    61f6:	b087      	sub	sp, #28
    61f8:	af00      	add	r7, sp, #0
    61fa:	4603      	mov	r3, r0
    61fc:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;



    ix             = prio / (sizeof(CPU_DATA) * 8u);
    61fe:	79fb      	ldrb	r3, [r7, #7]
    6200:	ea4f 1353 	mov.w	r3, r3, lsr #5
    6204:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (sizeof(CPU_DATA) * 8u - 1u);
    6206:	79fb      	ldrb	r3, [r7, #7]
    6208:	f003 031f 	and.w	r3, r3, #31
    620c:	613b      	str	r3, [r7, #16]
    bit            = 1u;
    620e:	f04f 0301 	mov.w	r3, #1
    6212:	60fb      	str	r3, [r7, #12]
    bit          <<= (sizeof(CPU_DATA) * 8u - 1u) - bit_nbr;
    6214:	693b      	ldr	r3, [r7, #16]
    6216:	f1c3 031f 	rsb	r3, r3, #31
    621a:	68fa      	ldr	r2, [r7, #12]
    621c:	fa02 f303 	lsl.w	r3, r2, r3
    6220:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
    6222:	7dfa      	ldrb	r2, [r7, #23]
    6224:	7df9      	ldrb	r1, [r7, #23]
    6226:	f643 5344 	movw	r3, #15684	; 0x3d44
    622a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    622e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    6232:	68fb      	ldr	r3, [r7, #12]
    6234:	ea6f 0303 	mvn.w	r3, r3
    6238:	4019      	ands	r1, r3
    623a:	f643 5344 	movw	r3, #15684	; 0x3d44
    623e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6246:	f107 071c 	add.w	r7, r7, #28
    624a:	46bd      	mov	sp, r7
    624c:	bc80      	pop	{r7}
    624e:	4770      	bx	lr

00006250 <OSTmrCreate>:
                   OS_TICK              period,
                   OS_OPT               opt,
                   OS_TMR_CALLBACK_PTR  p_callback,
                   void                *p_callback_arg,
                   OS_ERR              *p_err)
{
    6250:	b580      	push	{r7, lr}
    6252:	b086      	sub	sp, #24
    6254:	af00      	add	r7, sp, #0
    6256:	60f8      	str	r0, [r7, #12]
    6258:	60b9      	str	r1, [r7, #8]
    625a:	607a      	str	r2, [r7, #4]
    625c:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
    625e:	f04f 0300 	mov.w	r3, #0
    6262:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to call from an ISR                      */
    6264:	f244 1381 	movw	r3, #16769	; 0x4181
    6268:	f2c1 0300 	movt	r3, #4096	; 0x1000
    626c:	781b      	ldrb	r3, [r3, #0]
    626e:	2b00      	cmp	r3, #0
    6270:	d004      	beq.n	627c <OSTmrCreate+0x2c>
        *p_err = OS_ERR_TMR_ISR;
    6272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6274:	f247 3243 	movw	r2, #29507	; 0x7343
    6278:	801a      	strh	r2, [r3, #0]
        return;
    627a:	e06f      	b.n	635c <OSTmrCreate+0x10c>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {                             /* Validate 'p_tmr'                                       */
    627c:	68fb      	ldr	r3, [r7, #12]
    627e:	2b00      	cmp	r3, #0
    6280:	d104      	bne.n	628c <OSTmrCreate+0x3c>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    6282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6284:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    6288:	801a      	strh	r2, [r3, #0]
        return;
    628a:	e067      	b.n	635c <OSTmrCreate+0x10c>
    }

    switch (opt) {
    628c:	8c3b      	ldrh	r3, [r7, #32]
    628e:	2b01      	cmp	r3, #1
    6290:	d009      	beq.n	62a6 <OSTmrCreate+0x56>
    6292:	2b02      	cmp	r3, #2
    6294:	d10f      	bne.n	62b6 <OSTmrCreate+0x66>
        case OS_OPT_TMR_PERIODIC:
             if (period == (OS_TICK)0) {
    6296:	683b      	ldr	r3, [r7, #0]
    6298:	2b00      	cmp	r3, #0
    629a:	d111      	bne.n	62c0 <OSTmrCreate+0x70>
                 *p_err = OS_ERR_TMR_INVALID_PERIOD;
    629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    629e:	f247 3240 	movw	r2, #29504	; 0x7340
    62a2:	801a      	strh	r2, [r3, #0]
                 return;
    62a4:	e05a      	b.n	635c <OSTmrCreate+0x10c>
             }
             break;

        case OS_OPT_TMR_ONE_SHOT:
             if (dly == (OS_TICK)0) {
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	2b00      	cmp	r3, #0
    62aa:	d10b      	bne.n	62c4 <OSTmrCreate+0x74>
                 *p_err = OS_ERR_TMR_INVALID_DLY;
    62ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62ae:	f247 323f 	movw	r2, #29503	; 0x733f
    62b2:	801a      	strh	r2, [r3, #0]
                 return;
    62b4:	e052      	b.n	635c <OSTmrCreate+0x10c>
             }
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    62b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62b8:	f645 6225 	movw	r2, #24101	; 0x5e25
    62bc:	801a      	strh	r2, [r3, #0]
             return;
    62be:	e04d      	b.n	635c <OSTmrCreate+0x10c>
        case OS_OPT_TMR_PERIODIC:
             if (period == (OS_TICK)0) {
                 *p_err = OS_ERR_TMR_INVALID_PERIOD;
                 return;
             }
             break;
    62c0:	bf00      	nop
    62c2:	e000      	b.n	62c6 <OSTmrCreate+0x76>
        case OS_OPT_TMR_ONE_SHOT:
             if (dly == (OS_TICK)0) {
                 *p_err = OS_ERR_TMR_INVALID_DLY;
                 return;
             }
             break;
    62c4:	bf00      	nop
             *p_err = OS_ERR_OPT_INVALID;
             return;
    }
#endif

    CPU_CRITICAL_ENTER();
    62c6:	f011 fd8d 	bl	17de4 <CPU_SR_Save>
    62ca:	6178      	str	r0, [r7, #20]
    62cc:	f7fb faf4 	bl	18b8 <CPU_IntDisMeasStart>
    p_tmr->State          = (OS_STATE           )OS_TMR_STATE_STOPPED;     /* Initialize the timer fields             */
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	f04f 0201 	mov.w	r2, #1
    62d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    p_tmr->Type           = (OS_OBJ_TYPE        )OS_OBJ_TYPE_TMR;
    62da:	68fa      	ldr	r2, [r7, #12]
    62dc:	f242 0354 	movw	r3, #8276	; 0x2054
    62e0:	f2c5 234d 	movt	r3, #21069	; 0x524d
    62e4:	6013      	str	r3, [r2, #0]
    p_tmr->NamePtr        = (CPU_CHAR          *)p_name;
    62e6:	68fb      	ldr	r3, [r7, #12]
    62e8:	68ba      	ldr	r2, [r7, #8]
    62ea:	605a      	str	r2, [r3, #4]
    p_tmr->Dly            = (OS_TICK            )dly;
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	687a      	ldr	r2, [r7, #4]
    62f0:	621a      	str	r2, [r3, #32]
    p_tmr->Match          = (OS_TICK            )0;
    62f2:	68fb      	ldr	r3, [r7, #12]
    62f4:	f04f 0200 	mov.w	r2, #0
    62f8:	619a      	str	r2, [r3, #24]
    p_tmr->Remain         = (OS_TICK            )0;
    62fa:	68fb      	ldr	r3, [r7, #12]
    62fc:	f04f 0200 	mov.w	r2, #0
    6300:	61da      	str	r2, [r3, #28]
    p_tmr->Period         = (OS_TICK            )period;
    6302:	68fb      	ldr	r3, [r7, #12]
    6304:	683a      	ldr	r2, [r7, #0]
    6306:	625a      	str	r2, [r3, #36]	; 0x24
    p_tmr->Opt            = (OS_OPT             )opt;
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	8c3a      	ldrh	r2, [r7, #32]
    630c:	851a      	strh	r2, [r3, #40]	; 0x28
    p_tmr->CallbackPtr    = (OS_TMR_CALLBACK_PTR)p_callback;
    630e:	68fb      	ldr	r3, [r7, #12]
    6310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6312:	609a      	str	r2, [r3, #8]
    p_tmr->CallbackPtrArg = (void              *)p_callback_arg;
    6314:	68fb      	ldr	r3, [r7, #12]
    6316:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6318:	60da      	str	r2, [r3, #12]
    p_tmr->NextPtr        = (OS_TMR            *)0;
    631a:	68fb      	ldr	r3, [r7, #12]
    631c:	f04f 0200 	mov.w	r2, #0
    6320:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr        = (OS_TMR            *)0;
    6322:	68fb      	ldr	r3, [r7, #12]
    6324:	f04f 0200 	mov.w	r2, #0
    6328:	615a      	str	r2, [r3, #20]

#if OS_CFG_DBG_EN > 0u
    OS_TmrDbgListAdd(p_tmr);
    632a:	68f8      	ldr	r0, [r7, #12]
    632c:	f000 fb12 	bl	6954 <OS_TmrDbgListAdd>
#endif
    OSTmrQty++;                                             /* Keep track of the number of timers created             */
    6330:	f244 432c 	movw	r3, #17452	; 0x442c
    6334:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6338:	881b      	ldrh	r3, [r3, #0]
    633a:	f103 0301 	add.w	r3, r3, #1
    633e:	b29a      	uxth	r2, r3
    6340:	f244 432c 	movw	r3, #17452	; 0x442c
    6344:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6348:	801a      	strh	r2, [r3, #0]

    CPU_CRITICAL_EXIT();
    634a:	f7fb fae1 	bl	1910 <CPU_IntDisMeasStop>
    634e:	6978      	ldr	r0, [r7, #20]
    6350:	f011 fd4c 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    6354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6356:	f04f 0200 	mov.w	r2, #0
    635a:	801a      	strh	r2, [r3, #0]
}
    635c:	f107 0718 	add.w	r7, r7, #24
    6360:	46bd      	mov	sp, r7
    6362:	bd80      	pop	{r7, pc}

00006364 <OSTmrDel>:
*/

#if OS_CFG_TMR_DEL_EN > 0u
CPU_BOOLEAN  OSTmrDel (OS_TMR  *p_tmr,
                       OS_ERR  *p_err)
{
    6364:	b580      	push	{r7, lr}
    6366:	b084      	sub	sp, #16
    6368:	af00      	add	r7, sp, #0
    636a:	6078      	str	r0, [r7, #4]
    636c:	6039      	str	r1, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to call from an ISR                      */
    636e:	f244 1381 	movw	r3, #16769	; 0x4181
    6372:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6376:	781b      	ldrb	r3, [r3, #0]
    6378:	2b00      	cmp	r3, #0
    637a:	d006      	beq.n	638a <OSTmrDel+0x26>
        *p_err  = OS_ERR_TMR_ISR;
    637c:	683b      	ldr	r3, [r7, #0]
    637e:	f247 3243 	movw	r2, #29507	; 0x7343
    6382:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    6384:	f04f 0300 	mov.w	r3, #0
    6388:	e076      	b.n	6478 <OSTmrDel+0x114>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {
    638a:	687b      	ldr	r3, [r7, #4]
    638c:	2b00      	cmp	r3, #0
    638e:	d106      	bne.n	639e <OSTmrDel+0x3a>
        *p_err = OS_ERR_TMR_INVALID;
    6390:	683b      	ldr	r3, [r7, #0]
    6392:	f247 3242 	movw	r2, #29506	; 0x7342
    6396:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    6398:	f04f 0300 	mov.w	r3, #0
    639c:	e06c      	b.n	6478 <OSTmrDel+0x114>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_tmr->Type != OS_OBJ_TYPE_TMR) {                   /* Make sure timer was created                            */
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	681a      	ldr	r2, [r3, #0]
    63a2:	f242 0354 	movw	r3, #8276	; 0x2054
    63a6:	f2c5 234d 	movt	r3, #21069	; 0x524d
    63aa:	429a      	cmp	r2, r3
    63ac:	d006      	beq.n	63bc <OSTmrDel+0x58>
        *p_err = OS_ERR_OBJ_TYPE;
    63ae:	683b      	ldr	r3, [r7, #0]
    63b0:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    63b4:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    63b6:	f04f 0300 	mov.w	r3, #0
    63ba:	e05d      	b.n	6478 <OSTmrDel+0x114>
    }
#endif

    OSSchedLock(&err);
    63bc:	f107 030e 	add.w	r3, r7, #14
    63c0:	4618      	mov	r0, r3
    63c2:	f008 f999 	bl	e6f8 <OSSchedLock>
#if OS_CFG_DBG_EN > 0u
    OS_TmrDbgListRemove(p_tmr);
    63c6:	6878      	ldr	r0, [r7, #4]
    63c8:	f000 faf2 	bl	69b0 <OS_TmrDbgListRemove>
#endif
    OSTmrQty--;                                             /* One less timer                                         */
    63cc:	f244 432c 	movw	r3, #17452	; 0x442c
    63d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    63d4:	881b      	ldrh	r3, [r3, #0]
    63d6:	f103 33ff 	add.w	r3, r3, #4294967295
    63da:	b29a      	uxth	r2, r3
    63dc:	f244 432c 	movw	r3, #17452	; 0x442c
    63e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    63e4:	801a      	strh	r2, [r3, #0]

    switch (p_tmr->State) {
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    63ec:	2b03      	cmp	r3, #3
    63ee:	d838      	bhi.n	6462 <OSTmrDel+0xfe>
    63f0:	a201      	add	r2, pc, #4	; (adr r2, 63f8 <OSTmrDel+0x94>)
    63f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    63f6:	bf00      	nop
    63f8:	0000644b 	.word	0x0000644b
    63fc:	0000642d 	.word	0x0000642d
    6400:	00006409 	.word	0x00006409
    6404:	0000642d 	.word	0x0000642d
        case OS_TMR_STATE_RUNNING:
             OS_TmrUnlink(p_tmr);                           /* Remove from current wheel spoke                        */
    6408:	6878      	ldr	r0, [r7, #4]
    640a:	f000 fcd5 	bl	6db8 <OS_TmrUnlink>
             OS_TmrClr(p_tmr);
    640e:	6878      	ldr	r0, [r7, #4]
    6410:	f000 fa62 	bl	68d8 <OS_TmrClr>
             OSSchedUnlock(&err);
    6414:	f107 030e 	add.w	r3, r7, #14
    6418:	4618      	mov	r0, r3
    641a:	f008 f9ad 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_NONE;
    641e:	683b      	ldr	r3, [r7, #0]
    6420:	f04f 0200 	mov.w	r2, #0
    6424:	801a      	strh	r2, [r3, #0]
             return (DEF_TRUE);
    6426:	f04f 0301 	mov.w	r3, #1
    642a:	e025      	b.n	6478 <OSTmrDel+0x114>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OS_TmrClr(p_tmr);                              /* Clear timer fields                                     */
    642c:	6878      	ldr	r0, [r7, #4]
    642e:	f000 fa53 	bl	68d8 <OS_TmrClr>
             OSSchedUnlock(&err);
    6432:	f107 030e 	add.w	r3, r7, #14
    6436:	4618      	mov	r0, r3
    6438:	f008 f99e 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_NONE;
    643c:	683b      	ldr	r3, [r7, #0]
    643e:	f04f 0200 	mov.w	r2, #0
    6442:	801a      	strh	r2, [r3, #0]
             return (DEF_TRUE);
    6444:	f04f 0301 	mov.w	r3, #1
    6448:	e016      	b.n	6478 <OSTmrDel+0x114>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSSchedUnlock(&err);
    644a:	f107 030e 	add.w	r3, r7, #14
    644e:	4618      	mov	r0, r3
    6450:	f008 f992 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INACTIVE;
    6454:	683b      	ldr	r3, [r7, #0]
    6456:	f247 323d 	movw	r2, #29501	; 0x733d
    645a:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    645c:	f04f 0300 	mov.w	r3, #0
    6460:	e00a      	b.n	6478 <OSTmrDel+0x114>

        default:
             OSSchedUnlock(&err);
    6462:	f107 030e 	add.w	r3, r7, #14
    6466:	4618      	mov	r0, r3
    6468:	f008 f986 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INVALID_STATE;
    646c:	683b      	ldr	r3, [r7, #0]
    646e:	f247 3241 	movw	r2, #29505	; 0x7341
    6472:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    6474:	f04f 0300 	mov.w	r3, #0
    }
}
    6478:	4618      	mov	r0, r3
    647a:	f107 0710 	add.w	r7, r7, #16
    647e:	46bd      	mov	sp, r7
    6480:	bd80      	pop	{r7, pc}
    6482:	bf00      	nop

00006484 <OSTmrRemainGet>:
************************************************************************************************************************
*/

OS_TICK  OSTmrRemainGet (OS_TMR  *p_tmr,
                         OS_ERR  *p_err)
{
    6484:	b580      	push	{r7, lr}
    6486:	b084      	sub	sp, #16
    6488:	af00      	add	r7, sp, #0
    648a:	6078      	str	r0, [r7, #4]
    648c:	6039      	str	r1, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to call from an ISR                      */
    648e:	f244 1381 	movw	r3, #16769	; 0x4181
    6492:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	2b00      	cmp	r3, #0
    649a:	d006      	beq.n	64aa <OSTmrRemainGet+0x26>
        *p_err = OS_ERR_TMR_ISR;
    649c:	683b      	ldr	r3, [r7, #0]
    649e:	f247 3243 	movw	r2, #29507	; 0x7343
    64a2:	801a      	strh	r2, [r3, #0]
        return ((OS_TICK)0);
    64a4:	f04f 0300 	mov.w	r3, #0
    64a8:	e089      	b.n	65be <OSTmrRemainGet+0x13a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	2b00      	cmp	r3, #0
    64ae:	d106      	bne.n	64be <OSTmrRemainGet+0x3a>
        *p_err = OS_ERR_TMR_INVALID;
    64b0:	683b      	ldr	r3, [r7, #0]
    64b2:	f247 3242 	movw	r2, #29506	; 0x7342
    64b6:	801a      	strh	r2, [r3, #0]
        return ((OS_TICK)0);
    64b8:	f04f 0300 	mov.w	r3, #0
    64bc:	e07f      	b.n	65be <OSTmrRemainGet+0x13a>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_tmr->Type != OS_OBJ_TYPE_TMR) {                   /* Make sure timer was created                            */
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	681a      	ldr	r2, [r3, #0]
    64c2:	f242 0354 	movw	r3, #8276	; 0x2054
    64c6:	f2c5 234d 	movt	r3, #21069	; 0x524d
    64ca:	429a      	cmp	r2, r3
    64cc:	d006      	beq.n	64dc <OSTmrRemainGet+0x58>
        *p_err = OS_ERR_OBJ_TYPE;
    64ce:	683b      	ldr	r3, [r7, #0]
    64d0:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    64d4:	801a      	strh	r2, [r3, #0]
        return ((OS_TICK)0);
    64d6:	f04f 0300 	mov.w	r3, #0
    64da:	e070      	b.n	65be <OSTmrRemainGet+0x13a>
    }
#endif

    OSSchedLock(&err);
    64dc:	f107 030a 	add.w	r3, r7, #10
    64e0:	4618      	mov	r0, r3
    64e2:	f008 f909 	bl	e6f8 <OSSchedLock>
    switch (p_tmr->State) {
    64e6:	687b      	ldr	r3, [r7, #4]
    64e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    64ec:	2b03      	cmp	r3, #3
    64ee:	d85b      	bhi.n	65a8 <OSTmrRemainGet+0x124>
    64f0:	a201      	add	r2, pc, #4	; (adr r2, 64f8 <OSTmrRemainGet+0x74>)
    64f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    64f6:	bf00      	nop
    64f8:	00006591 	.word	0x00006591
    64fc:	00006537 	.word	0x00006537
    6500:	00006509 	.word	0x00006509
    6504:	00006579 	.word	0x00006579
        case OS_TMR_STATE_RUNNING:
             remain        = p_tmr->Match                   /* Determine how much time is left to timeout             */
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	699a      	ldr	r2, [r3, #24]
                           - OSTmrTickCtr;
    650c:	f244 1354 	movw	r3, #16724	; 0x4154
    6510:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6514:	681b      	ldr	r3, [r3, #0]
#endif

    OSSchedLock(&err);
    switch (p_tmr->State) {
        case OS_TMR_STATE_RUNNING:
             remain        = p_tmr->Match                   /* Determine how much time is left to timeout             */
    6516:	1ad3      	subs	r3, r2, r3
    6518:	60fb      	str	r3, [r7, #12]
                           - OSTmrTickCtr;
             p_tmr->Remain = remain;
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	68fa      	ldr	r2, [r7, #12]
    651e:	61da      	str	r2, [r3, #28]
             OSSchedUnlock(&err);
    6520:	f107 030a 	add.w	r3, r7, #10
    6524:	4618      	mov	r0, r3
    6526:	f008 f927 	bl	e778 <OSSchedUnlock>
             *p_err        = OS_ERR_NONE;
    652a:	683b      	ldr	r3, [r7, #0]
    652c:	f04f 0200 	mov.w	r2, #0
    6530:	801a      	strh	r2, [r3, #0]
             return (remain);
    6532:	68fb      	ldr	r3, [r7, #12]
    6534:	e043      	b.n	65be <OSTmrRemainGet+0x13a>

        case OS_TMR_STATE_STOPPED:                          /* It's assumed that the timer has not started yet        */
             if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    653a:	2b02      	cmp	r3, #2
    653c:	d10b      	bne.n	6556 <OSTmrRemainGet+0xd2>
                 if (p_tmr->Dly == 0u) {
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	6a1b      	ldr	r3, [r3, #32]
    6542:	2b00      	cmp	r3, #0
    6544:	d103      	bne.n	654e <OSTmrRemainGet+0xca>
                     remain = p_tmr->Period;
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    654a:	60fb      	str	r3, [r7, #12]
    654c:	e006      	b.n	655c <OSTmrRemainGet+0xd8>
                 } else {
                     remain = p_tmr->Dly;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	6a1b      	ldr	r3, [r3, #32]
    6552:	60fb      	str	r3, [r7, #12]
    6554:	e002      	b.n	655c <OSTmrRemainGet+0xd8>
                 }
             } else {
                 remain = p_tmr->Dly;
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	6a1b      	ldr	r3, [r3, #32]
    655a:	60fb      	str	r3, [r7, #12]
             }
             p_tmr->Remain = remain;
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	68fa      	ldr	r2, [r7, #12]
    6560:	61da      	str	r2, [r3, #28]
             OSSchedUnlock(&err);
    6562:	f107 030a 	add.w	r3, r7, #10
    6566:	4618      	mov	r0, r3
    6568:	f008 f906 	bl	e778 <OSSchedUnlock>
             *p_err        = OS_ERR_NONE;
    656c:	683b      	ldr	r3, [r7, #0]
    656e:	f04f 0200 	mov.w	r2, #0
    6572:	801a      	strh	r2, [r3, #0]
             return (remain);
    6574:	68fb      	ldr	r3, [r7, #12]
    6576:	e022      	b.n	65be <OSTmrRemainGet+0x13a>

        case OS_TMR_STATE_COMPLETED:                        /* Only ONE-SHOT that timed out can be in this state      */
             OSSchedUnlock(&err);
    6578:	f107 030a 	add.w	r3, r7, #10
    657c:	4618      	mov	r0, r3
    657e:	f008 f8fb 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_NONE;
    6582:	683b      	ldr	r3, [r7, #0]
    6584:	f04f 0200 	mov.w	r2, #0
    6588:	801a      	strh	r2, [r3, #0]
             return ((OS_TICK)0);
    658a:	f04f 0300 	mov.w	r3, #0
    658e:	e016      	b.n	65be <OSTmrRemainGet+0x13a>

        case OS_TMR_STATE_UNUSED:
             OSSchedUnlock(&err);
    6590:	f107 030a 	add.w	r3, r7, #10
    6594:	4618      	mov	r0, r3
    6596:	f008 f8ef 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INACTIVE;
    659a:	683b      	ldr	r3, [r7, #0]
    659c:	f247 323d 	movw	r2, #29501	; 0x733d
    65a0:	801a      	strh	r2, [r3, #0]
             return ((OS_TICK)0);
    65a2:	f04f 0300 	mov.w	r3, #0
    65a6:	e00a      	b.n	65be <OSTmrRemainGet+0x13a>

        default:
             OSSchedUnlock(&err);
    65a8:	f107 030a 	add.w	r3, r7, #10
    65ac:	4618      	mov	r0, r3
    65ae:	f008 f8e3 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INVALID_STATE;
    65b2:	683b      	ldr	r3, [r7, #0]
    65b4:	f247 3241 	movw	r2, #29505	; 0x7341
    65b8:	801a      	strh	r2, [r3, #0]
             return ((OS_TICK)0);
    65ba:	f04f 0300 	mov.w	r3, #0
    }
}
    65be:	4618      	mov	r0, r3
    65c0:	f107 0710 	add.w	r7, r7, #16
    65c4:	46bd      	mov	sp, r7
    65c6:	bd80      	pop	{r7, pc}

000065c8 <OSTmrStart>:
************************************************************************************************************************
*/

CPU_BOOLEAN  OSTmrStart (OS_TMR   *p_tmr,
                         OS_ERR   *p_err)
{
    65c8:	b580      	push	{r7, lr}
    65ca:	b084      	sub	sp, #16
    65cc:	af00      	add	r7, sp, #0
    65ce:	6078      	str	r0, [r7, #4]
    65d0:	6039      	str	r1, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to call from an ISR                      */
    65d2:	f244 1381 	movw	r3, #16769	; 0x4181
    65d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    65da:	781b      	ldrb	r3, [r3, #0]
    65dc:	2b00      	cmp	r3, #0
    65de:	d006      	beq.n	65ee <OSTmrStart+0x26>
        *p_err = OS_ERR_TMR_ISR;
    65e0:	683b      	ldr	r3, [r7, #0]
    65e2:	f247 3243 	movw	r2, #29507	; 0x7343
    65e6:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    65e8:	f04f 0300 	mov.w	r3, #0
    65ec:	e06a      	b.n	66c4 <OSTmrStart+0xfc>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	2b00      	cmp	r3, #0
    65f2:	d106      	bne.n	6602 <OSTmrStart+0x3a>
        *p_err = OS_ERR_TMR_INVALID;
    65f4:	683b      	ldr	r3, [r7, #0]
    65f6:	f247 3242 	movw	r2, #29506	; 0x7342
    65fa:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    65fc:	f04f 0300 	mov.w	r3, #0
    6600:	e060      	b.n	66c4 <OSTmrStart+0xfc>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_tmr->Type != OS_OBJ_TYPE_TMR) {                   /* Make sure timer was created                            */
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	681a      	ldr	r2, [r3, #0]
    6606:	f242 0354 	movw	r3, #8276	; 0x2054
    660a:	f2c5 234d 	movt	r3, #21069	; 0x524d
    660e:	429a      	cmp	r2, r3
    6610:	d006      	beq.n	6620 <OSTmrStart+0x58>
        *p_err = OS_ERR_OBJ_TYPE;
    6612:	683b      	ldr	r3, [r7, #0]
    6614:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    6618:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    661a:	f04f 0300 	mov.w	r3, #0
    661e:	e051      	b.n	66c4 <OSTmrStart+0xfc>
    }
#endif

    OSSchedLock(&err);
    6620:	f107 030e 	add.w	r3, r7, #14
    6624:	4618      	mov	r0, r3
    6626:	f008 f867 	bl	e6f8 <OSSchedLock>
    switch (p_tmr->State) {
    662a:	687b      	ldr	r3, [r7, #4]
    662c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    6630:	2b03      	cmp	r3, #3
    6632:	d83c      	bhi.n	66ae <OSTmrStart+0xe6>
    6634:	a201      	add	r2, pc, #4	; (adr r2, 663c <OSTmrStart+0x74>)
    6636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    663a:	bf00      	nop
    663c:	00006697 	.word	0x00006697
    6640:	00006675 	.word	0x00006675
    6644:	0000664d 	.word	0x0000664d
    6648:	00006675 	.word	0x00006675
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OS_TmrUnlink(p_tmr);                           /* ... Stop the timer                                     */
    664c:	6878      	ldr	r0, [r7, #4]
    664e:	f000 fbb3 	bl	6db8 <OS_TmrUnlink>
             OS_TmrLink(p_tmr, OS_OPT_LINK_DLY);            /* ... Link timer to timer wheel                          */
    6652:	6878      	ldr	r0, [r7, #4]
    6654:	f04f 0100 	mov.w	r1, #0
    6658:	f000 fabe 	bl	6bd8 <OS_TmrLink>
             OSSchedUnlock(&err);
    665c:	f107 030e 	add.w	r3, r7, #14
    6660:	4618      	mov	r0, r3
    6662:	f008 f889 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_NONE;
    6666:	683b      	ldr	r3, [r7, #0]
    6668:	f04f 0200 	mov.w	r2, #0
    666c:	801a      	strh	r2, [r3, #0]
             return (DEF_TRUE);
    666e:	f04f 0301 	mov.w	r3, #1
    6672:	e027      	b.n	66c4 <OSTmrStart+0xfc>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OS_TmrLink(p_tmr, OS_OPT_LINK_DLY);            /* ... Link timer to timer wheel                          */
    6674:	6878      	ldr	r0, [r7, #4]
    6676:	f04f 0100 	mov.w	r1, #0
    667a:	f000 faad 	bl	6bd8 <OS_TmrLink>
             OSSchedUnlock(&err);
    667e:	f107 030e 	add.w	r3, r7, #14
    6682:	4618      	mov	r0, r3
    6684:	f008 f878 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_NONE;
    6688:	683b      	ldr	r3, [r7, #0]
    668a:	f04f 0200 	mov.w	r2, #0
    668e:	801a      	strh	r2, [r3, #0]
             return (DEF_TRUE);
    6690:	f04f 0301 	mov.w	r3, #1
    6694:	e016      	b.n	66c4 <OSTmrStart+0xfc>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSSchedUnlock(&err);
    6696:	f107 030e 	add.w	r3, r7, #14
    669a:	4618      	mov	r0, r3
    669c:	f008 f86c 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INACTIVE;
    66a0:	683b      	ldr	r3, [r7, #0]
    66a2:	f247 323d 	movw	r2, #29501	; 0x733d
    66a6:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    66a8:	f04f 0300 	mov.w	r3, #0
    66ac:	e00a      	b.n	66c4 <OSTmrStart+0xfc>

        default:
             OSSchedUnlock(&err);
    66ae:	f107 030e 	add.w	r3, r7, #14
    66b2:	4618      	mov	r0, r3
    66b4:	f008 f860 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INVALID_STATE;
    66b8:	683b      	ldr	r3, [r7, #0]
    66ba:	f247 3241 	movw	r2, #29505	; 0x7341
    66be:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    66c0:	f04f 0300 	mov.w	r3, #0
    }
}
    66c4:	4618      	mov	r0, r3
    66c6:	f107 0710 	add.w	r7, r7, #16
    66ca:	46bd      	mov	sp, r7
    66cc:	bd80      	pop	{r7, pc}
    66ce:	bf00      	nop

000066d0 <OSTmrStateGet>:
************************************************************************************************************************
*/

OS_STATE  OSTmrStateGet (OS_TMR  *p_tmr,
                         OS_ERR  *p_err)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b084      	sub	sp, #16
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
    OS_STATE  state;
    CPU_SR_ALLOC();
    66da:	f04f 0300 	mov.w	r3, #0
    66de:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to call from an ISR                      */
    66e0:	f244 1381 	movw	r3, #16769	; 0x4181
    66e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d006      	beq.n	66fc <OSTmrStateGet+0x2c>
        *p_err = OS_ERR_TMR_ISR;
    66ee:	683b      	ldr	r3, [r7, #0]
    66f0:	f247 3243 	movw	r2, #29507	; 0x7343
    66f4:	801a      	strh	r2, [r3, #0]
        return (OS_TMR_STATE_UNUSED);
    66f6:	f04f 0300 	mov.w	r3, #0
    66fa:	e036      	b.n	676a <OSTmrStateGet+0x9a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	2b00      	cmp	r3, #0
    6700:	d106      	bne.n	6710 <OSTmrStateGet+0x40>
        *p_err = OS_ERR_TMR_INVALID;
    6702:	683b      	ldr	r3, [r7, #0]
    6704:	f247 3242 	movw	r2, #29506	; 0x7342
    6708:	801a      	strh	r2, [r3, #0]
        return (OS_TMR_STATE_UNUSED);
    670a:	f04f 0300 	mov.w	r3, #0
    670e:	e02c      	b.n	676a <OSTmrStateGet+0x9a>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_tmr->Type != OS_OBJ_TYPE_TMR) {                   /* Make sure timer was created                            */
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	681a      	ldr	r2, [r3, #0]
    6714:	f242 0354 	movw	r3, #8276	; 0x2054
    6718:	f2c5 234d 	movt	r3, #21069	; 0x524d
    671c:	429a      	cmp	r2, r3
    671e:	d006      	beq.n	672e <OSTmrStateGet+0x5e>
        *p_err = OS_ERR_OBJ_TYPE;
    6720:	683b      	ldr	r3, [r7, #0]
    6722:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    6726:	801a      	strh	r2, [r3, #0]
        return (OS_TMR_STATE_UNUSED);
    6728:	f04f 0300 	mov.w	r3, #0
    672c:	e01d      	b.n	676a <OSTmrStateGet+0x9a>
    }
#endif

    CPU_CRITICAL_ENTER();
    672e:	f011 fb59 	bl	17de4 <CPU_SR_Save>
    6732:	60f8      	str	r0, [r7, #12]
    6734:	f7fb f8c0 	bl	18b8 <CPU_IntDisMeasStart>
    state = p_tmr->State;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    673e:	72fb      	strb	r3, [r7, #11]
    switch (state) {
    6740:	7afb      	ldrb	r3, [r7, #11]
    6742:	f103 0300 	add.w	r3, r3, #0
    6746:	2b03      	cmp	r3, #3
    6748:	d804      	bhi.n	6754 <OSTmrStateGet+0x84>
        case OS_TMR_STATE_UNUSED:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:
             *p_err = OS_ERR_NONE;
    674a:	683b      	ldr	r3, [r7, #0]
    674c:	f04f 0200 	mov.w	r2, #0
    6750:	801a      	strh	r2, [r3, #0]
             break;
    6752:	e004      	b.n	675e <OSTmrStateGet+0x8e>

        default:
             *p_err = OS_ERR_TMR_INVALID_STATE;
    6754:	683b      	ldr	r3, [r7, #0]
    6756:	f247 3241 	movw	r2, #29505	; 0x7341
    675a:	801a      	strh	r2, [r3, #0]
             break;
    675c:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
    675e:	f7fb f8d7 	bl	1910 <CPU_IntDisMeasStop>
    6762:	68f8      	ldr	r0, [r7, #12]
    6764:	f011 fb42 	bl	17dec <CPU_SR_Restore>
    return (state);
    6768:	7afb      	ldrb	r3, [r7, #11]
}
    676a:	4618      	mov	r0, r3
    676c:	f107 0710 	add.w	r7, r7, #16
    6770:	46bd      	mov	sp, r7
    6772:	bd80      	pop	{r7, pc}

00006774 <OSTmrStop>:

CPU_BOOLEAN  OSTmrStop (OS_TMR   *p_tmr,
                        OS_OPT    opt,
                        void     *p_callback_arg,
                        OS_ERR   *p_err)
{
    6774:	b580      	push	{r7, lr}
    6776:	b086      	sub	sp, #24
    6778:	af00      	add	r7, sp, #0
    677a:	60f8      	str	r0, [r7, #12]
    677c:	607a      	str	r2, [r7, #4]
    677e:	603b      	str	r3, [r7, #0]
    6780:	460b      	mov	r3, r1
    6782:	817b      	strh	r3, [r7, #10]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {                        /* See if trying to call from an ISR            */
    6784:	f244 1381 	movw	r3, #16769	; 0x4181
    6788:	f2c1 0300 	movt	r3, #4096	; 0x1000
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	2b00      	cmp	r3, #0
    6790:	d006      	beq.n	67a0 <OSTmrStop+0x2c>
        *p_err = OS_ERR_TMR_ISR;
    6792:	683b      	ldr	r3, [r7, #0]
    6794:	f247 3243 	movw	r2, #29507	; 0x7343
    6798:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    679a:	f04f 0300 	mov.w	r3, #0
    679e:	e096      	b.n	68ce <OSTmrStop+0x15a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tmr == (OS_TMR *)0) {
    67a0:	68fb      	ldr	r3, [r7, #12]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d106      	bne.n	67b4 <OSTmrStop+0x40>
        *p_err = OS_ERR_TMR_INVALID;
    67a6:	683b      	ldr	r3, [r7, #0]
    67a8:	f247 3242 	movw	r2, #29506	; 0x7342
    67ac:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    67ae:	f04f 0300 	mov.w	r3, #0
    67b2:	e08c      	b.n	68ce <OSTmrStop+0x15a>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_tmr->Type != OS_OBJ_TYPE_TMR) {                             /* Make sure timer was created                  */
    67b4:	68fb      	ldr	r3, [r7, #12]
    67b6:	681a      	ldr	r2, [r3, #0]
    67b8:	f242 0354 	movw	r3, #8276	; 0x2054
    67bc:	f2c5 234d 	movt	r3, #21069	; 0x524d
    67c0:	429a      	cmp	r2, r3
    67c2:	d006      	beq.n	67d2 <OSTmrStop+0x5e>
        *p_err = OS_ERR_OBJ_TYPE;
    67c4:	683b      	ldr	r3, [r7, #0]
    67c6:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    67ca:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    67cc:	f04f 0300 	mov.w	r3, #0
    67d0:	e07d      	b.n	68ce <OSTmrStop+0x15a>
    }
#endif

    OSSchedLock(&err);
    67d2:	f107 0312 	add.w	r3, r7, #18
    67d6:	4618      	mov	r0, r3
    67d8:	f007 ff8e 	bl	e6f8 <OSSchedLock>
    switch (p_tmr->State) {
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    67e2:	2b03      	cmp	r3, #3
    67e4:	d868      	bhi.n	68b8 <OSTmrStop+0x144>
    67e6:	a201      	add	r2, pc, #4	; (adr r2, 67ec <OSTmrStop+0x78>)
    67e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    67ec:	000068a1 	.word	0x000068a1
    67f0:	00006889 	.word	0x00006889
    67f4:	000067fd 	.word	0x000067fd
    67f8:	00006889 	.word	0x00006889
        case OS_TMR_STATE_RUNNING:
             OS_TmrUnlink(p_tmr);                                     /* Remove from current wheel spoke              */
    67fc:	68f8      	ldr	r0, [r7, #12]
    67fe:	f000 fadb 	bl	6db8 <OS_TmrUnlink>
             *p_err = OS_ERR_NONE;
    6802:	683b      	ldr	r3, [r7, #0]
    6804:	f04f 0200 	mov.w	r2, #0
    6808:	801a      	strh	r2, [r3, #0]
             switch (opt) {
    680a:	897b      	ldrh	r3, [r7, #10]
    680c:	2b03      	cmp	r3, #3
    680e:	d004      	beq.n	681a <OSTmrStop+0xa6>
    6810:	2b04      	cmp	r3, #4
    6812:	d014      	beq.n	683e <OSTmrStop+0xca>
    6814:	2b00      	cmp	r3, #0
    6816:	d02e      	beq.n	6876 <OSTmrStop+0x102>
    6818:	e021      	b.n	685e <OSTmrStop+0xea>
                 case OS_OPT_TMR_CALLBACK:
                      p_fnct = p_tmr->CallbackPtr;                         /* Execute callback function ...           */
    681a:	68fb      	ldr	r3, [r7, #12]
    681c:	689b      	ldr	r3, [r3, #8]
    681e:	617b      	str	r3, [r7, #20]
                      if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {              /* ... if available                        */
    6820:	697b      	ldr	r3, [r7, #20]
    6822:	2b00      	cmp	r3, #0
    6824:	d006      	beq.n	6834 <OSTmrStop+0xc0>
                          (*p_fnct)((void *)p_tmr, p_tmr->CallbackPtrArg); /* Use callback arg when timer was created */
    6826:	68fb      	ldr	r3, [r7, #12]
    6828:	68da      	ldr	r2, [r3, #12]
    682a:	697b      	ldr	r3, [r7, #20]
    682c:	68f8      	ldr	r0, [r7, #12]
    682e:	4611      	mov	r1, r2
    6830:	4798      	blx	r3
                      } else {
                          *p_err = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    6832:	e021      	b.n	6878 <OSTmrStop+0x104>
                 case OS_OPT_TMR_CALLBACK:
                      p_fnct = p_tmr->CallbackPtr;                         /* Execute callback function ...           */
                      if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {              /* ... if available                        */
                          (*p_fnct)((void *)p_tmr, p_tmr->CallbackPtrArg); /* Use callback arg when timer was created */
                      } else {
                          *p_err = OS_ERR_TMR_NO_CALLBACK;
    6834:	683b      	ldr	r3, [r7, #0]
    6836:	f247 3244 	movw	r2, #29508	; 0x7344
    683a:	801a      	strh	r2, [r3, #0]
                      }
                      break;
    683c:	e01c      	b.n	6878 <OSTmrStop+0x104>

                 case OS_OPT_TMR_CALLBACK_ARG:
                      p_fnct = p_tmr->CallbackPtr;                    /* Execute callback function if available ...   */
    683e:	68fb      	ldr	r3, [r7, #12]
    6840:	689b      	ldr	r3, [r3, #8]
    6842:	617b      	str	r3, [r7, #20]
                      if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
    6844:	697b      	ldr	r3, [r7, #20]
    6846:	2b00      	cmp	r3, #0
    6848:	d004      	beq.n	6854 <OSTmrStop+0xe0>
                          (*p_fnct)((void *)p_tmr, p_callback_arg);   /* .. using the 'callback_arg' provided in call */
    684a:	697b      	ldr	r3, [r7, #20]
    684c:	68f8      	ldr	r0, [r7, #12]
    684e:	6879      	ldr	r1, [r7, #4]
    6850:	4798      	blx	r3
                      } else {
                          *p_err = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    6852:	e011      	b.n	6878 <OSTmrStop+0x104>
                 case OS_OPT_TMR_CALLBACK_ARG:
                      p_fnct = p_tmr->CallbackPtr;                    /* Execute callback function if available ...   */
                      if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
                          (*p_fnct)((void *)p_tmr, p_callback_arg);   /* .. using the 'callback_arg' provided in call */
                      } else {
                          *p_err = OS_ERR_TMR_NO_CALLBACK;
    6854:	683b      	ldr	r3, [r7, #0]
    6856:	f247 3244 	movw	r2, #29508	; 0x7344
    685a:	801a      	strh	r2, [r3, #0]
                      }
                      break;
    685c:	e00c      	b.n	6878 <OSTmrStop+0x104>

                 case OS_OPT_TMR_NONE:
                      break;

                 default:
                     OSSchedUnlock(&err);
    685e:	f107 0312 	add.w	r3, r7, #18
    6862:	4618      	mov	r0, r3
    6864:	f007 ff88 	bl	e778 <OSSchedUnlock>
                     *p_err = OS_ERR_OPT_INVALID;
    6868:	683b      	ldr	r3, [r7, #0]
    686a:	f645 6225 	movw	r2, #24101	; 0x5e25
    686e:	801a      	strh	r2, [r3, #0]
                     return (DEF_FALSE);
    6870:	f04f 0300 	mov.w	r3, #0
    6874:	e02b      	b.n	68ce <OSTmrStop+0x15a>
                          *p_err = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_OPT_TMR_NONE:
                      break;
    6876:	bf00      	nop
                 default:
                     OSSchedUnlock(&err);
                     *p_err = OS_ERR_OPT_INVALID;
                     return (DEF_FALSE);
             }
             OSSchedUnlock(&err);
    6878:	f107 0312 	add.w	r3, r7, #18
    687c:	4618      	mov	r0, r3
    687e:	f007 ff7b 	bl	e778 <OSSchedUnlock>
             return (DEF_TRUE);
    6882:	f04f 0301 	mov.w	r3, #1
    6886:	e022      	b.n	68ce <OSTmrStop+0x15a>

        case OS_TMR_STATE_COMPLETED:                                  /* Timer has already completed the ONE-SHOT or  */
        case OS_TMR_STATE_STOPPED:                                    /* ... timer has not started yet.               */
             OSSchedUnlock(&err);
    6888:	f107 0312 	add.w	r3, r7, #18
    688c:	4618      	mov	r0, r3
    688e:	f007 ff73 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_STOPPED;
    6892:	683b      	ldr	r3, [r7, #0]
    6894:	f247 3247 	movw	r2, #29511	; 0x7347
    6898:	801a      	strh	r2, [r3, #0]
             return (DEF_TRUE);
    689a:	f04f 0301 	mov.w	r3, #1
    689e:	e016      	b.n	68ce <OSTmrStop+0x15a>

        case OS_TMR_STATE_UNUSED:                                     /* Timer was not created                        */
             OSSchedUnlock(&err);
    68a0:	f107 0312 	add.w	r3, r7, #18
    68a4:	4618      	mov	r0, r3
    68a6:	f007 ff67 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INACTIVE;
    68aa:	683b      	ldr	r3, [r7, #0]
    68ac:	f247 323d 	movw	r2, #29501	; 0x733d
    68b0:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    68b2:	f04f 0300 	mov.w	r3, #0
    68b6:	e00a      	b.n	68ce <OSTmrStop+0x15a>

        default:
             OSSchedUnlock(&err);
    68b8:	f107 0312 	add.w	r3, r7, #18
    68bc:	4618      	mov	r0, r3
    68be:	f007 ff5b 	bl	e778 <OSSchedUnlock>
             *p_err = OS_ERR_TMR_INVALID_STATE;
    68c2:	683b      	ldr	r3, [r7, #0]
    68c4:	f247 3241 	movw	r2, #29505	; 0x7341
    68c8:	801a      	strh	r2, [r3, #0]
             return (DEF_FALSE);
    68ca:	f04f 0300 	mov.w	r3, #0
    }
}
    68ce:	4618      	mov	r0, r3
    68d0:	f107 0718 	add.w	r7, r7, #24
    68d4:	46bd      	mov	sp, r7
    68d6:	bd80      	pop	{r7, pc}

000068d8 <OS_TmrClr>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrClr (OS_TMR *p_tmr)
{
    68d8:	b480      	push	{r7}
    68da:	b083      	sub	sp, #12
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
    p_tmr->State          = OS_TMR_STATE_UNUSED;            /* Clear timer fields                                     */
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	f04f 0200 	mov.w	r2, #0
    68e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    p_tmr->Type           = OS_OBJ_TYPE_NONE;
    68ea:	687a      	ldr	r2, [r7, #4]
    68ec:	f644 734e 	movw	r3, #20302	; 0x4f4e
    68f0:	f2c4 534e 	movt	r3, #17742	; 0x454e
    68f4:	6013      	str	r3, [r2, #0]
    p_tmr->NamePtr        = (CPU_CHAR          *)((void *)"?TMR");
    68f6:	687a      	ldr	r2, [r7, #4]
    68f8:	f64c 0394 	movw	r3, #51348	; 0xc894
    68fc:	f2c0 0302 	movt	r3, #2
    6900:	6053      	str	r3, [r2, #4]
    p_tmr->Dly            = (OS_TICK            )0;
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	f04f 0200 	mov.w	r2, #0
    6908:	621a      	str	r2, [r3, #32]
    p_tmr->Match          = (OS_TICK            )0;
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	f04f 0200 	mov.w	r2, #0
    6910:	619a      	str	r2, [r3, #24]
    p_tmr->Remain         = (OS_TICK            )0;
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	f04f 0200 	mov.w	r2, #0
    6918:	61da      	str	r2, [r3, #28]
    p_tmr->Period         = (OS_TICK            )0;
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	f04f 0200 	mov.w	r2, #0
    6920:	625a      	str	r2, [r3, #36]	; 0x24
    p_tmr->Opt            = (OS_OPT             )0;
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	f04f 0200 	mov.w	r2, #0
    6928:	851a      	strh	r2, [r3, #40]	; 0x28
    p_tmr->CallbackPtr    = (OS_TMR_CALLBACK_PTR)0;
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	f04f 0200 	mov.w	r2, #0
    6930:	609a      	str	r2, [r3, #8]
    p_tmr->CallbackPtrArg = (void              *)0;
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	f04f 0200 	mov.w	r2, #0
    6938:	60da      	str	r2, [r3, #12]
    p_tmr->NextPtr        = (OS_TMR            *)0;
    693a:	687b      	ldr	r3, [r7, #4]
    693c:	f04f 0200 	mov.w	r2, #0
    6940:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr        = (OS_TMR            *)0;
    6942:	687b      	ldr	r3, [r7, #4]
    6944:	f04f 0200 	mov.w	r2, #0
    6948:	615a      	str	r2, [r3, #20]
}
    694a:	f107 070c 	add.w	r7, r7, #12
    694e:	46bd      	mov	sp, r7
    6950:	bc80      	pop	{r7}
    6952:	4770      	bx	lr

00006954 <OS_TmrDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_TmrDbgListAdd (OS_TMR  *p_tmr)
{
    6954:	b480      	push	{r7}
    6956:	b083      	sub	sp, #12
    6958:	af00      	add	r7, sp, #0
    695a:	6078      	str	r0, [r7, #4]
    p_tmr->DbgPrevPtr               = (OS_TMR *)0;
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	f04f 0200 	mov.w	r2, #0
    6962:	62da      	str	r2, [r3, #44]	; 0x2c
    if (OSTmrDbgListPtr == (OS_TMR *)0) {
    6964:	f244 5328 	movw	r3, #17704	; 0x4528
    6968:	f2c1 0300 	movt	r3, #4096	; 0x1000
    696c:	681b      	ldr	r3, [r3, #0]
    696e:	2b00      	cmp	r3, #0
    6970:	d104      	bne.n	697c <OS_TmrDbgListAdd+0x28>
        p_tmr->DbgNextPtr           = (OS_TMR *)0;
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	f04f 0200 	mov.w	r2, #0
    6978:	631a      	str	r2, [r3, #48]	; 0x30
    697a:	e00d      	b.n	6998 <OS_TmrDbgListAdd+0x44>
    } else {
        p_tmr->DbgNextPtr           =  OSTmrDbgListPtr;
    697c:	f244 5328 	movw	r3, #17704	; 0x4528
    6980:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6984:	681a      	ldr	r2, [r3, #0]
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	631a      	str	r2, [r3, #48]	; 0x30
        OSTmrDbgListPtr->DbgPrevPtr =  p_tmr;
    698a:	f244 5328 	movw	r3, #17704	; 0x4528
    698e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	687a      	ldr	r2, [r7, #4]
    6996:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    OSTmrDbgListPtr                 =  p_tmr;
    6998:	f244 5328 	movw	r3, #17704	; 0x4528
    699c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    69a0:	687a      	ldr	r2, [r7, #4]
    69a2:	601a      	str	r2, [r3, #0]
}
    69a4:	f107 070c 	add.w	r7, r7, #12
    69a8:	46bd      	mov	sp, r7
    69aa:	bc80      	pop	{r7}
    69ac:	4770      	bx	lr
    69ae:	bf00      	nop

000069b0 <OS_TmrDbgListRemove>:



void  OS_TmrDbgListRemove (OS_TMR  *p_tmr)
{
    69b0:	b480      	push	{r7}
    69b2:	b085      	sub	sp, #20
    69b4:	af00      	add	r7, sp, #0
    69b6:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr_next;
    OS_TMR  *p_tmr_prev;


    p_tmr_prev = p_tmr->DbgPrevPtr;
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    69bc:	60fb      	str	r3, [r7, #12]
    p_tmr_next = p_tmr->DbgNextPtr;
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    69c2:	60bb      	str	r3, [r7, #8]

    if (p_tmr_prev == (OS_TMR *)0) {
    69c4:	68fb      	ldr	r3, [r7, #12]
    69c6:	2b00      	cmp	r3, #0
    69c8:	d111      	bne.n	69ee <OS_TmrDbgListRemove+0x3e>
        OSTmrDbgListPtr = p_tmr_next;
    69ca:	f244 5328 	movw	r3, #17704	; 0x4528
    69ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    69d2:	68ba      	ldr	r2, [r7, #8]
    69d4:	601a      	str	r2, [r3, #0]
        if (p_tmr_next != (OS_TMR *)0) {
    69d6:	68bb      	ldr	r3, [r7, #8]
    69d8:	2b00      	cmp	r3, #0
    69da:	d003      	beq.n	69e4 <OS_TmrDbgListRemove+0x34>
            p_tmr_next->DbgPrevPtr = (OS_TMR *)0;
    69dc:	68bb      	ldr	r3, [r7, #8]
    69de:	f04f 0200 	mov.w	r2, #0
    69e2:	62da      	str	r2, [r3, #44]	; 0x2c
        }
        p_tmr->DbgNextPtr = (OS_TMR *)0;
    69e4:	687b      	ldr	r3, [r7, #4]
    69e6:	f04f 0200 	mov.w	r2, #0
    69ea:	631a      	str	r2, [r3, #48]	; 0x30
    69ec:	e019      	b.n	6a22 <OS_TmrDbgListRemove+0x72>

    } else if (p_tmr_next == (OS_TMR *)0) {
    69ee:	68bb      	ldr	r3, [r7, #8]
    69f0:	2b00      	cmp	r3, #0
    69f2:	d108      	bne.n	6a06 <OS_TmrDbgListRemove+0x56>
        p_tmr_prev->DbgNextPtr = (OS_TMR *)0;
    69f4:	68fb      	ldr	r3, [r7, #12]
    69f6:	f04f 0200 	mov.w	r2, #0
    69fa:	631a      	str	r2, [r3, #48]	; 0x30
        p_tmr->DbgPrevPtr      = (OS_TMR *)0;
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	f04f 0200 	mov.w	r2, #0
    6a02:	62da      	str	r2, [r3, #44]	; 0x2c
    6a04:	e00d      	b.n	6a22 <OS_TmrDbgListRemove+0x72>

    } else {
        p_tmr_prev->DbgNextPtr =  p_tmr_next;
    6a06:	68fb      	ldr	r3, [r7, #12]
    6a08:	68ba      	ldr	r2, [r7, #8]
    6a0a:	631a      	str	r2, [r3, #48]	; 0x30
        p_tmr_next->DbgPrevPtr =  p_tmr_prev;
    6a0c:	68bb      	ldr	r3, [r7, #8]
    6a0e:	68fa      	ldr	r2, [r7, #12]
    6a10:	62da      	str	r2, [r3, #44]	; 0x2c
        p_tmr->DbgNextPtr      = (OS_TMR *)0;
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	f04f 0200 	mov.w	r2, #0
    6a18:	631a      	str	r2, [r3, #48]	; 0x30
        p_tmr->DbgPrevPtr      = (OS_TMR *)0;
    6a1a:	687b      	ldr	r3, [r7, #4]
    6a1c:	f04f 0200 	mov.w	r2, #0
    6a20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
}
    6a22:	f107 0714 	add.w	r7, r7, #20
    6a26:	46bd      	mov	sp, r7
    6a28:	bc80      	pop	{r7}
    6a2a:	4770      	bx	lr

00006a2c <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b08e      	sub	sp, #56	; 0x38
    6a30:	af0a      	add	r7, sp, #40	; 0x28
    6a32:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
    6a34:	f244 5328 	movw	r3, #17704	; 0x4528
    6a38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6a3c:	f04f 0200 	mov.w	r2, #0
    6a40:	601a      	str	r2, [r3, #0]
#endif

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
    6a42:	f64c 1370 	movw	r3, #51568	; 0xc970
    6a46:	f2c0 0302 	movt	r3, #2
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d011      	beq.n	6a74 <OS_TmrInit+0x48>
        OSTmrUpdateCnt = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
    6a50:	f64c 134c 	movw	r3, #51532	; 0xc94c
    6a54:	f2c0 0302 	movt	r3, #2
    6a58:	681a      	ldr	r2, [r3, #0]
    6a5a:	f64c 1370 	movw	r3, #51568	; 0xc970
    6a5e:	f2c0 0302 	movt	r3, #2
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	fbb2 f2f3 	udiv	r2, r2, r3
    6a68:	f244 5330 	movw	r3, #17712	; 0x4530
    6a6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6a70:	601a      	str	r2, [r3, #0]
    6a72:	e011      	b.n	6a98 <OS_TmrInit+0x6c>
    } else {
        OSTmrUpdateCnt = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
    6a74:	f64c 134c 	movw	r3, #51532	; 0xc94c
    6a78:	f2c0 0302 	movt	r3, #2
    6a7c:	681a      	ldr	r2, [r3, #0]
    6a7e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    6a82:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    6a86:	fba3 1302 	umull	r1, r3, r3, r2
    6a8a:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    6a8e:	f244 5330 	movw	r3, #17712	; 0x4530
    6a92:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6a96:	601a      	str	r2, [r3, #0]
    }
    OSTmrUpdateCtr   = OSTmrUpdateCnt;
    6a98:	f244 5330 	movw	r3, #17712	; 0x4530
    6a9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6aa0:	681a      	ldr	r2, [r3, #0]
    6aa2:	f244 5340 	movw	r3, #17728	; 0x4540
    6aa6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6aaa:	601a      	str	r2, [r3, #0]

    OSTmrTickCtr     = (OS_TMR_TICK)0;
    6aac:	f244 1354 	movw	r3, #16724	; 0x4154
    6ab0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6ab4:	f04f 0200 	mov.w	r2, #0
    6ab8:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax = (CPU_TS)0;
    6aba:	f244 1370 	movw	r3, #16752	; 0x4170
    6abe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6ac2:	f04f 0200 	mov.w	r2, #0
    6ac6:	601a      	str	r2, [r3, #0]

    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
    6ac8:	f04f 0300 	mov.w	r3, #0
    6acc:	81fb      	strh	r3, [r7, #14]
    6ace:	e018      	b.n	6b02 <OS_TmrInit+0xd6>
        p_spoke                = &OSCfg_TmrWheel[i];
    6ad0:	89fb      	ldrh	r3, [r7, #14]
    6ad2:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    6ad6:	f245 230c 	movw	r3, #21004	; 0x520c
    6ada:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6ade:	18d3      	adds	r3, r2, r3
    6ae0:	60bb      	str	r3, [r7, #8]
        p_spoke->NbrEntries    = (OS_OBJ_QTY)0;
    6ae2:	68bb      	ldr	r3, [r7, #8]
    6ae4:	f04f 0200 	mov.w	r2, #0
    6ae8:	809a      	strh	r2, [r3, #4]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY)0;
    6aea:	68bb      	ldr	r3, [r7, #8]
    6aec:	f04f 0200 	mov.w	r2, #0
    6af0:	80da      	strh	r2, [r3, #6]
        p_spoke->FirstPtr      = (OS_TMR   *)0;
    6af2:	68bb      	ldr	r3, [r7, #8]
    6af4:	f04f 0200 	mov.w	r2, #0
    6af8:	601a      	str	r2, [r3, #0]

    OSTmrTickCtr     = (OS_TMR_TICK)0;

    OSTmrTaskTimeMax = (CPU_TS)0;

    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
    6afa:	89fb      	ldrh	r3, [r7, #14]
    6afc:	f103 0301 	add.w	r3, r3, #1
    6b00:	81fb      	strh	r3, [r7, #14]
    6b02:	f64c 1384 	movw	r3, #51588	; 0xc984
    6b06:	f2c0 0302 	movt	r3, #2
    6b0a:	881b      	ldrh	r3, [r3, #0]
    6b0c:	89fa      	ldrh	r2, [r7, #14]
    6b0e:	429a      	cmp	r2, r3
    6b10:	d3de      	bcc.n	6ad0 <OS_TmrInit+0xa4>
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY)0;
        p_spoke->FirstPtr      = (OS_TMR   *)0;
    }

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
    6b12:	f64c 1374 	movw	r3, #51572	; 0xc974
    6b16:	f2c0 0302 	movt	r3, #2
    6b1a:	681b      	ldr	r3, [r3, #0]
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d104      	bne.n	6b2a <OS_TmrInit+0xfe>
        *p_err = OS_ERR_TMR_STK_INVALID;
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	f247 3246 	movw	r2, #29510	; 0x7346
    6b26:	801a      	strh	r2, [r3, #0]
        return;
    6b28:	e052      	b.n	6bd0 <OS_TmrInit+0x1a4>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
    6b2a:	f64c 137c 	movw	r3, #51580	; 0xc97c
    6b2e:	f2c0 0302 	movt	r3, #2
    6b32:	681a      	ldr	r2, [r3, #0]
    6b34:	f64c 1348 	movw	r3, #51528	; 0xc948
    6b38:	f2c0 0302 	movt	r3, #2
    6b3c:	681b      	ldr	r3, [r3, #0]
    6b3e:	429a      	cmp	r2, r3
    6b40:	d204      	bcs.n	6b4c <OS_TmrInit+0x120>
        *p_err = OS_ERR_TMR_STK_INVALID;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	f247 3246 	movw	r2, #29510	; 0x7346
    6b48:	801a      	strh	r2, [r3, #0]
        return;
    6b4a:	e041      	b.n	6bd0 <OS_TmrInit+0x1a4>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
    6b4c:	f64c 136c 	movw	r3, #51564	; 0xc96c
    6b50:	f2c0 0302 	movt	r3, #2
    6b54:	781b      	ldrb	r3, [r3, #0]
    6b56:	2b3e      	cmp	r3, #62	; 0x3e
    6b58:	d904      	bls.n	6b64 <OS_TmrInit+0x138>
        *p_err = OS_ERR_PRIO_INVALID;
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	f246 2273 	movw	r2, #25203	; 0x6273
    6b60:	801a      	strh	r2, [r3, #0]
        return;
    6b62:	e035      	b.n	6bd0 <OS_TmrInit+0x1a4>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
    6b64:	f64c 136c 	movw	r3, #51564	; 0xc96c
    6b68:	f2c0 0302 	movt	r3, #2
    6b6c:	7818      	ldrb	r0, [r3, #0]
    6b6e:	f64c 1374 	movw	r3, #51572	; 0xc974
    6b72:	f2c0 0302 	movt	r3, #2
    6b76:	6819      	ldr	r1, [r3, #0]
    6b78:	f64c 1378 	movw	r3, #51576	; 0xc978
    6b7c:	f2c0 0302 	movt	r3, #2
    6b80:	681a      	ldr	r2, [r3, #0]
    6b82:	f64c 137c 	movw	r3, #51580	; 0xc97c
    6b86:	f2c0 0302 	movt	r3, #2
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	9000      	str	r0, [sp, #0]
    6b8e:	9101      	str	r1, [sp, #4]
    6b90:	9202      	str	r2, [sp, #8]
    6b92:	9303      	str	r3, [sp, #12]
    6b94:	f04f 0300 	mov.w	r3, #0
    6b98:	9304      	str	r3, [sp, #16]
    6b9a:	f04f 0300 	mov.w	r3, #0
    6b9e:	9305      	str	r3, [sp, #20]
    6ba0:	f04f 0300 	mov.w	r3, #0
    6ba4:	9306      	str	r3, [sp, #24]
    6ba6:	f04f 0303 	mov.w	r3, #3
    6baa:	9307      	str	r3, [sp, #28]
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	9308      	str	r3, [sp, #32]
    6bb0:	f244 1088 	movw	r0, #16776	; 0x4188
    6bb4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    6bb8:	f64c 019c 	movw	r1, #51356	; 0xc89c
    6bbc:	f2c0 0102 	movt	r1, #2
    6bc0:	f646 6265 	movw	r2, #28261	; 0x6e65
    6bc4:	f2c0 0200 	movt	r2, #0
    6bc8:	f04f 0300 	mov.w	r3, #0
    6bcc:	f000 fd54 	bl	7678 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
    6bd0:	f107 0710 	add.w	r7, r7, #16
    6bd4:	46bd      	mov	sp, r7
    6bd6:	bd80      	pop	{r7, pc}

00006bd8 <OS_TmrLink>:
************************************************************************************************************************
*/

void  OS_TmrLink (OS_TMR      *p_tmr,
                  OS_OPT       opt)
{
    6bd8:	b480      	push	{r7}
    6bda:	b087      	sub	sp, #28
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
    6be0:	460b      	mov	r3, r1
    6be2:	807b      	strh	r3, [r7, #2]
    OS_TMR           *p_tmr1;
    OS_TMR_SPOKE_IX   spoke;



    p_tmr->State = OS_TMR_STATE_RUNNING;
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	f04f 0202 	mov.w	r2, #2
    6bea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    if (opt == OS_OPT_LINK_PERIODIC) {                      /* Determine when timer will expire                      */
    6bee:	887b      	ldrh	r3, [r7, #2]
    6bf0:	2b01      	cmp	r3, #1
    6bf2:	d10a      	bne.n	6c0a <OS_TmrLink+0x32>
        p_tmr->Match = p_tmr->Period + OSTmrTickCtr;
    6bf4:	687b      	ldr	r3, [r7, #4]
    6bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6bf8:	f244 1354 	movw	r3, #16724	; 0x4154
    6bfc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	18d2      	adds	r2, r2, r3
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	619a      	str	r2, [r3, #24]
    6c08:	e018      	b.n	6c3c <OS_TmrLink+0x64>
    } else {
        if (p_tmr->Dly == (OS_TICK)0) {
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	6a1b      	ldr	r3, [r3, #32]
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d10a      	bne.n	6c28 <OS_TmrLink+0x50>
            p_tmr->Match = p_tmr->Period + OSTmrTickCtr;
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6c16:	f244 1354 	movw	r3, #16724	; 0x4154
    6c1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	18d2      	adds	r2, r2, r3
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	619a      	str	r2, [r3, #24]
    6c26:	e009      	b.n	6c3c <OS_TmrLink+0x64>
        } else {
            p_tmr->Match = p_tmr->Dly    + OSTmrTickCtr;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	6a1a      	ldr	r2, [r3, #32]
    6c2c:	f244 1354 	movw	r3, #16724	; 0x4154
    6c30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6c34:	681b      	ldr	r3, [r3, #0]
    6c36:	18d2      	adds	r2, r2, r3
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	619a      	str	r2, [r3, #24]
        }
    }
    spoke  = (OS_TMR_SPOKE_IX)(p_tmr->Match % OSCfg_TmrWheelSize);
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	699a      	ldr	r2, [r3, #24]
    6c40:	f64c 1384 	movw	r3, #51588	; 0xc984
    6c44:	f2c0 0302 	movt	r3, #2
    6c48:	881b      	ldrh	r3, [r3, #0]
    6c4a:	fbb2 f1f3 	udiv	r1, r2, r3
    6c4e:	fb03 f301 	mul.w	r3, r3, r1
    6c52:	1ad3      	subs	r3, r2, r3
    6c54:	827b      	strh	r3, [r7, #18]
    p_spoke = &OSCfg_TmrWheel[spoke];
    6c56:	8a7b      	ldrh	r3, [r7, #18]
    6c58:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    6c5c:	f245 230c 	movw	r3, #21004	; 0x520c
    6c60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6c64:	18d3      	adds	r3, r2, r3
    6c66:	60fb      	str	r3, [r7, #12]

    if (p_spoke->FirstPtr ==  (OS_TMR *)0) {                /* Link into timer wheel                                  */
    6c68:	68fb      	ldr	r3, [r7, #12]
    6c6a:	681b      	ldr	r3, [r3, #0]
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d10f      	bne.n	6c90 <OS_TmrLink+0xb8>
        p_tmr->NextPtr      = (OS_TMR *)0;
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	f04f 0200 	mov.w	r2, #0
    6c76:	611a      	str	r2, [r3, #16]
        p_tmr->PrevPtr      = (OS_TMR *)0;
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	f04f 0200 	mov.w	r2, #0
    6c7e:	615a      	str	r2, [r3, #20]
        p_spoke->FirstPtr   = p_tmr;
    6c80:	68fb      	ldr	r3, [r7, #12]
    6c82:	687a      	ldr	r2, [r7, #4]
    6c84:	601a      	str	r2, [r3, #0]
        p_spoke->NbrEntries = 1u;
    6c86:	68fb      	ldr	r3, [r7, #12]
    6c88:	f04f 0201 	mov.w	r2, #1
    6c8c:	809a      	strh	r2, [r3, #4]
    6c8e:	e061      	b.n	6d54 <OS_TmrLink+0x17c>
    } else {
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	699a      	ldr	r2, [r3, #24]
                       - OSTmrTickCtr;
    6c94:	f244 1354 	movw	r3, #16724	; 0x4154
    6c98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6c9c:	681b      	ldr	r3, [r3, #0]
    6c9e:	1ad2      	subs	r2, r2, r3
        p_tmr->NextPtr      = (OS_TMR *)0;
        p_tmr->PrevPtr      = (OS_TMR *)0;
        p_spoke->FirstPtr   = p_tmr;
        p_spoke->NbrEntries = 1u;
    } else {
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
    6ca0:	687b      	ldr	r3, [r7, #4]
    6ca2:	61da      	str	r2, [r3, #28]
                       - OSTmrTickCtr;
        p_tmr1         = p_spoke->FirstPtr;                 /* Point to current first timer in the list               */
    6ca4:	68fb      	ldr	r3, [r7, #12]
    6ca6:	681b      	ldr	r3, [r3, #0]
    6ca8:	617b      	str	r3, [r7, #20]
        while (p_tmr1 != (OS_TMR *)0) {
    6caa:	e049      	b.n	6d40 <OS_TmrLink+0x168>
            p_tmr1->Remain = p_tmr1->Match                  /* Compute time remaining of current timer in list        */
    6cac:	697b      	ldr	r3, [r7, #20]
    6cae:	699a      	ldr	r2, [r3, #24]
                           - OSTmrTickCtr;
    6cb0:	f244 1354 	movw	r3, #16724	; 0x4154
    6cb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6cb8:	681b      	ldr	r3, [r3, #0]
    6cba:	1ad2      	subs	r2, r2, r3
    } else {
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
                       - OSTmrTickCtr;
        p_tmr1         = p_spoke->FirstPtr;                 /* Point to current first timer in the list               */
        while (p_tmr1 != (OS_TMR *)0) {
            p_tmr1->Remain = p_tmr1->Match                  /* Compute time remaining of current timer in list        */
    6cbc:	697b      	ldr	r3, [r7, #20]
    6cbe:	61da      	str	r2, [r3, #28]
                           - OSTmrTickCtr;
            if (p_tmr->Remain > p_tmr1->Remain) {           /* Do we need to insert AFTER current timer in list?      */
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	69da      	ldr	r2, [r3, #28]
    6cc4:	697b      	ldr	r3, [r7, #20]
    6cc6:	69db      	ldr	r3, [r3, #28]
    6cc8:	429a      	cmp	r2, r3
    6cca:	d915      	bls.n	6cf8 <OS_TmrLink+0x120>
                if (p_tmr->NextPtr != (OS_TMR *)0) {        /* Yes, are we pointing at the last timer in the list?    */
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	691b      	ldr	r3, [r3, #16]
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	d003      	beq.n	6cdc <OS_TmrLink+0x104>
                    p_tmr1            = p_tmr1->NextPtr;    /* No,  Point to next timer in the list                   */
    6cd4:	697b      	ldr	r3, [r7, #20]
    6cd6:	691b      	ldr	r3, [r3, #16]
    6cd8:	617b      	str	r3, [r7, #20]
    6cda:	e031      	b.n	6d40 <OS_TmrLink+0x168>
                } else {
                    p_tmr->NextPtr    = (OS_TMR *)0;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	f04f 0200 	mov.w	r2, #0
    6ce2:	611a      	str	r2, [r3, #16]
                    p_tmr->PrevPtr    =  p_tmr1;
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	697a      	ldr	r2, [r7, #20]
    6ce8:	615a      	str	r2, [r3, #20]
                    p_tmr1->NextPtr   =  p_tmr;             /* Yes, timer to insert is now new last entry in the list */
    6cea:	697b      	ldr	r3, [r7, #20]
    6cec:	687a      	ldr	r2, [r7, #4]
    6cee:	611a      	str	r2, [r3, #16]
                    p_tmr1            = (OS_TMR *)0;        /* Break loop                                             */
    6cf0:	f04f 0300 	mov.w	r3, #0
    6cf4:	617b      	str	r3, [r7, #20]
    6cf6:	e023      	b.n	6d40 <OS_TmrLink+0x168>
                }
            } else {                                        /* Insert before the current timer                        */
                if (p_tmr1->PrevPtr == (OS_TMR *)0) {       /* Are we inserting before the first timer?               */
    6cf8:	697b      	ldr	r3, [r7, #20]
    6cfa:	695b      	ldr	r3, [r3, #20]
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d10d      	bne.n	6d1c <OS_TmrLink+0x144>
                    p_tmr->PrevPtr    = (OS_TMR *)0;
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	f04f 0200 	mov.w	r2, #0
    6d06:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr    = p_tmr1;
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	697a      	ldr	r2, [r7, #20]
    6d0c:	611a      	str	r2, [r3, #16]
                    p_tmr1->PrevPtr   = p_tmr;
    6d0e:	697b      	ldr	r3, [r7, #20]
    6d10:	687a      	ldr	r2, [r7, #4]
    6d12:	615a      	str	r2, [r3, #20]
                    p_spoke->FirstPtr = p_tmr;
    6d14:	68fb      	ldr	r3, [r7, #12]
    6d16:	687a      	ldr	r2, [r7, #4]
    6d18:	601a      	str	r2, [r3, #0]
    6d1a:	e00e      	b.n	6d3a <OS_TmrLink+0x162>
                } else {                                    /* Insert in between 2 timers already in the list         */
                    p_tmr0            = p_tmr1->PrevPtr;
    6d1c:	697b      	ldr	r3, [r7, #20]
    6d1e:	695b      	ldr	r3, [r3, #20]
    6d20:	60bb      	str	r3, [r7, #8]
                    p_tmr->PrevPtr    = p_tmr0;
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	68ba      	ldr	r2, [r7, #8]
    6d26:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr    = p_tmr1;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	697a      	ldr	r2, [r7, #20]
    6d2c:	611a      	str	r2, [r3, #16]
                    p_tmr0->NextPtr   = p_tmr;
    6d2e:	68bb      	ldr	r3, [r7, #8]
    6d30:	687a      	ldr	r2, [r7, #4]
    6d32:	611a      	str	r2, [r3, #16]
                    p_tmr1->PrevPtr   = p_tmr;
    6d34:	697b      	ldr	r3, [r7, #20]
    6d36:	687a      	ldr	r2, [r7, #4]
    6d38:	615a      	str	r2, [r3, #20]
                }
                p_tmr1 = (OS_TMR *)0;                       /* Break loop                                             */
    6d3a:	f04f 0300 	mov.w	r3, #0
    6d3e:	617b      	str	r3, [r7, #20]
        p_spoke->NbrEntries = 1u;
    } else {
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
                       - OSTmrTickCtr;
        p_tmr1         = p_spoke->FirstPtr;                 /* Point to current first timer in the list               */
        while (p_tmr1 != (OS_TMR *)0) {
    6d40:	697b      	ldr	r3, [r7, #20]
    6d42:	2b00      	cmp	r3, #0
    6d44:	d1b2      	bne.n	6cac <OS_TmrLink+0xd4>
                    p_tmr1->PrevPtr   = p_tmr;
                }
                p_tmr1 = (OS_TMR *)0;                       /* Break loop                                             */
            }
        }
        p_spoke->NbrEntries++;
    6d46:	68fb      	ldr	r3, [r7, #12]
    6d48:	889b      	ldrh	r3, [r3, #4]
    6d4a:	f103 0301 	add.w	r3, r3, #1
    6d4e:	b29a      	uxth	r2, r3
    6d50:	68fb      	ldr	r3, [r7, #12]
    6d52:	809a      	strh	r2, [r3, #4]
    }
    if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {     /* Keep track of maximum number of entries in each spoke  */
    6d54:	68fb      	ldr	r3, [r7, #12]
    6d56:	88da      	ldrh	r2, [r3, #6]
    6d58:	68fb      	ldr	r3, [r7, #12]
    6d5a:	889b      	ldrh	r3, [r3, #4]
    6d5c:	429a      	cmp	r2, r3
    6d5e:	d203      	bcs.n	6d68 <OS_TmrLink+0x190>
        p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
    6d60:	68fb      	ldr	r3, [r7, #12]
    6d62:	889a      	ldrh	r2, [r3, #4]
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	80da      	strh	r2, [r3, #6]
    }
}
    6d68:	f107 071c 	add.w	r7, r7, #28
    6d6c:	46bd      	mov	sp, r7
    6d6e:	bc80      	pop	{r7}
    6d70:	4770      	bx	lr
    6d72:	bf00      	nop

00006d74 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
    6d74:	b480      	push	{r7}
    6d76:	b083      	sub	sp, #12
    6d78:	af00      	add	r7, sp, #0
    OS_TMR_SPOKE     *p_spoke;
    OS_TMR_SPOKE_IX   i;



    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
    6d7a:	f04f 0300 	mov.w	r3, #0
    6d7e:	80fb      	strh	r3, [r7, #6]
    6d80:	e00c      	b.n	6d9c <OS_TmrResetPeak+0x28>
        p_spoke                = (OS_TMR_SPOKE *)&OSCfg_TmrWheel[0];
    6d82:	f245 230c 	movw	r3, #21004	; 0x520c
    6d86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6d8a:	603b      	str	r3, [r7, #0]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY    )0u;
    6d8c:	683b      	ldr	r3, [r7, #0]
    6d8e:	f04f 0200 	mov.w	r2, #0
    6d92:	80da      	strh	r2, [r3, #6]
    OS_TMR_SPOKE     *p_spoke;
    OS_TMR_SPOKE_IX   i;



    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
    6d94:	88fb      	ldrh	r3, [r7, #6]
    6d96:	f103 0301 	add.w	r3, r3, #1
    6d9a:	80fb      	strh	r3, [r7, #6]
    6d9c:	f64c 1384 	movw	r3, #51588	; 0xc984
    6da0:	f2c0 0302 	movt	r3, #2
    6da4:	881b      	ldrh	r3, [r3, #0]
    6da6:	88fa      	ldrh	r2, [r7, #6]
    6da8:	429a      	cmp	r2, r3
    6daa:	d3ea      	bcc.n	6d82 <OS_TmrResetPeak+0xe>
        p_spoke                = (OS_TMR_SPOKE *)&OSCfg_TmrWheel[0];
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY    )0u;
    }
}
    6dac:	f107 070c 	add.w	r7, r7, #12
    6db0:	46bd      	mov	sp, r7
    6db2:	bc80      	pop	{r7}
    6db4:	4770      	bx	lr
    6db6:	bf00      	nop

00006db8 <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR *p_tmr)
{
    6db8:	b480      	push	{r7}
    6dba:	b087      	sub	sp, #28
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
    OS_TMR          *p_tmr2;
    OS_TMR_SPOKE_IX  spoke;



    spoke   = (OS_TMR_SPOKE_IX)(p_tmr->Match % OSCfg_TmrWheelSize);
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	699a      	ldr	r2, [r3, #24]
    6dc4:	f64c 1384 	movw	r3, #51588	; 0xc984
    6dc8:	f2c0 0302 	movt	r3, #2
    6dcc:	881b      	ldrh	r3, [r3, #0]
    6dce:	fbb2 f1f3 	udiv	r1, r2, r3
    6dd2:	fb03 f301 	mul.w	r3, r3, r1
    6dd6:	1ad3      	subs	r3, r2, r3
    6dd8:	82fb      	strh	r3, [r7, #22]
    p_spoke = &OSCfg_TmrWheel[spoke];
    6dda:	8afb      	ldrh	r3, [r7, #22]
    6ddc:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    6de0:	f245 230c 	movw	r3, #21004	; 0x520c
    6de4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6de8:	18d3      	adds	r3, r2, r3
    6dea:	613b      	str	r3, [r7, #16]

    if (p_spoke->FirstPtr == p_tmr) {                       /* See if timer to remove is at the beginning of list     */
    6dec:	693b      	ldr	r3, [r7, #16]
    6dee:	681a      	ldr	r2, [r3, #0]
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	429a      	cmp	r2, r3
    6df4:	d10d      	bne.n	6e12 <OS_TmrUnlink+0x5a>
        p_tmr1            = (OS_TMR *)p_tmr->NextPtr;
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	691b      	ldr	r3, [r3, #16]
    6dfa:	60fb      	str	r3, [r7, #12]
        p_spoke->FirstPtr = (OS_TMR *)p_tmr1;
    6dfc:	693b      	ldr	r3, [r7, #16]
    6dfe:	68fa      	ldr	r2, [r7, #12]
    6e00:	601a      	str	r2, [r3, #0]
        if (p_tmr1 != (OS_TMR *)0) {
    6e02:	68fb      	ldr	r3, [r7, #12]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d013      	beq.n	6e30 <OS_TmrUnlink+0x78>
            p_tmr1->PrevPtr = (OS_TMR *)0;
    6e08:	68fb      	ldr	r3, [r7, #12]
    6e0a:	f04f 0200 	mov.w	r2, #0
    6e0e:	615a      	str	r2, [r3, #20]
    6e10:	e00e      	b.n	6e30 <OS_TmrUnlink+0x78>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	695b      	ldr	r3, [r3, #20]
    6e16:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	691b      	ldr	r3, [r3, #16]
    6e1c:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
    6e1e:	68fb      	ldr	r3, [r7, #12]
    6e20:	68ba      	ldr	r2, [r7, #8]
    6e22:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
    6e24:	68bb      	ldr	r3, [r7, #8]
    6e26:	2b00      	cmp	r3, #0
    6e28:	d002      	beq.n	6e30 <OS_TmrUnlink+0x78>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
    6e2a:	68bb      	ldr	r3, [r7, #8]
    6e2c:	68fa      	ldr	r2, [r7, #12]
    6e2e:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	f04f 0201 	mov.w	r2, #1
    6e36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    p_tmr->NextPtr = (OS_TMR *)0;
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	f04f 0200 	mov.w	r2, #0
    6e40:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	f04f 0200 	mov.w	r2, #0
    6e48:	615a      	str	r2, [r3, #20]
    p_spoke->NbrEntries--;
    6e4a:	693b      	ldr	r3, [r7, #16]
    6e4c:	889b      	ldrh	r3, [r3, #4]
    6e4e:	f103 33ff 	add.w	r3, r3, #4294967295
    6e52:	b29a      	uxth	r2, r3
    6e54:	693b      	ldr	r3, [r7, #16]
    6e56:	809a      	strh	r2, [r3, #4]
}
    6e58:	f107 071c 	add.w	r7, r7, #28
    6e5c:	46bd      	mov	sp, r7
    6e5e:	bc80      	pop	{r7}
    6e60:	4770      	bx	lr
    6e62:	bf00      	nop

00006e64 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void *p_arg)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b08c      	sub	sp, #48	; 0x30
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
    6e6c:	e000      	b.n	6e70 <OS_TmrTask+0xc>
        ts_end = OS_TS_GET() - ts_start;                         /* Measure execution time of timer task              */
        OSSchedUnlock(&err);
        if (ts_end > OSTmrTaskTimeMax) {
            OSTmrTaskTimeMax = ts_end;
        }
    }
    6e6e:	bf00      	nop



    p_arg = p_arg;                                               /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
    6e70:	f04f 0000 	mov.w	r0, #0
    6e74:	f04f 0100 	mov.w	r1, #0
    6e78:	f107 0308 	add.w	r3, r7, #8
    6e7c:	461a      	mov	r2, r3
    6e7e:	f107 030e 	add.w	r3, r7, #14
    6e82:	f001 fb13 	bl	84ac <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);

        OSSchedLock(&err);
    6e86:	f107 030e 	add.w	r3, r7, #14
    6e8a:	4618      	mov	r0, r3
    6e8c:	f007 fc34 	bl	e6f8 <OSSchedLock>
        ts_start = OS_TS_GET();
    6e90:	f7fc fa44 	bl	331c <CPU_TS_TmrRd>
    6e94:	6278      	str	r0, [r7, #36]	; 0x24
        OSTmrTickCtr++;                                          /* Increment the current time                        */
    6e96:	f244 1354 	movw	r3, #16724	; 0x4154
    6e9a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	f103 0201 	add.w	r2, r3, #1
    6ea4:	f244 1354 	movw	r3, #16724	; 0x4154
    6ea8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6eac:	601a      	str	r2, [r3, #0]
        spoke    = (OS_TMR_SPOKE_IX)(OSTmrTickCtr % OSCfg_TmrWheelSize);
    6eae:	f244 1354 	movw	r3, #16724	; 0x4154
    6eb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6eb6:	681a      	ldr	r2, [r3, #0]
    6eb8:	f64c 1384 	movw	r3, #51588	; 0xc984
    6ebc:	f2c0 0302 	movt	r3, #2
    6ec0:	881b      	ldrh	r3, [r3, #0]
    6ec2:	fbb2 f1f3 	udiv	r1, r2, r3
    6ec6:	fb03 f301 	mul.w	r3, r3, r1
    6eca:	1ad3      	subs	r3, r2, r3
    6ecc:	847b      	strh	r3, [r7, #34]	; 0x22
        p_spoke  = &OSCfg_TmrWheel[spoke];
    6ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    6ed0:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    6ed4:	f245 230c 	movw	r3, #21004	; 0x520c
    6ed8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6edc:	18d3      	adds	r3, r2, r3
    6ede:	61fb      	str	r3, [r7, #28]
        p_tmr    = p_spoke->FirstPtr;
    6ee0:	69fb      	ldr	r3, [r7, #28]
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	62bb      	str	r3, [r7, #40]	; 0x28
        done     = DEF_FALSE;
    6ee6:	f04f 0300 	mov.w	r3, #0
    6eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        while (done == DEF_FALSE) {
    6eee:	e038      	b.n	6f62 <OS_TmrTask+0xfe>
            if (p_tmr != (OS_TMR *)0) {
    6ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d031      	beq.n	6f5a <OS_TmrTask+0xf6>
                p_tmr_next = (OS_TMR *)p_tmr->NextPtr;           /* Point to next tmr to update because current ...   */
    6ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ef8:	691b      	ldr	r3, [r3, #16]
    6efa:	61bb      	str	r3, [r7, #24]
                                                                 /* ... timer could get unlinked from the wheel.      */
                if (OSTmrTickCtr == p_tmr->Match) {              /* Process each timer that expires                   */
    6efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6efe:	699a      	ldr	r2, [r3, #24]
    6f00:	f244 1354 	movw	r3, #16724	; 0x4154
    6f04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6f08:	681b      	ldr	r3, [r3, #0]
    6f0a:	429a      	cmp	r2, r3
    6f0c:	d120      	bne.n	6f50 <OS_TmrTask+0xec>
                    OS_TmrUnlink(p_tmr);                         /* Remove from current wheel spoke                   */
    6f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6f10:	f7ff ff52 	bl	6db8 <OS_TmrUnlink>
                    if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
    6f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6f18:	2b02      	cmp	r3, #2
    6f1a:	d105      	bne.n	6f28 <OS_TmrTask+0xc4>
                        OS_TmrLink(p_tmr,
    6f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6f1e:	f04f 0101 	mov.w	r1, #1
    6f22:	f7ff fe59 	bl	6bd8 <OS_TmrLink>
    6f26:	e004      	b.n	6f32 <OS_TmrTask+0xce>
                                   OS_OPT_LINK_PERIODIC);        /* Recalculate new position of timer in wheel        */
                    } else {
                        p_tmr->State = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    6f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f2a:	f04f 0203 	mov.w	r2, #3
    6f2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    }
                    p_fnct = p_tmr->CallbackPtr;                 /* Execute callback function if available            */
    6f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f34:	689b      	ldr	r3, [r3, #8]
    6f36:	617b      	str	r3, [r7, #20]
                    if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
    6f38:	697b      	ldr	r3, [r7, #20]
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d005      	beq.n	6f4a <OS_TmrTask+0xe6>
                        (*p_fnct)((void *)p_tmr,
                                  p_tmr->CallbackPtrArg);
    6f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                    } else {
                        p_tmr->State = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                    }
                    p_fnct = p_tmr->CallbackPtr;                 /* Execute callback function if available            */
                    if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
                        (*p_fnct)((void *)p_tmr,
    6f40:	68da      	ldr	r2, [r3, #12]
    6f42:	697b      	ldr	r3, [r7, #20]
    6f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6f46:	4611      	mov	r1, r2
    6f48:	4798      	blx	r3
                                  p_tmr->CallbackPtrArg);
                    }
                    p_tmr = p_tmr_next;                          /* See if next timer matches                         */
    6f4a:	69bb      	ldr	r3, [r7, #24]
    6f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    6f4e:	e008      	b.n	6f62 <OS_TmrTask+0xfe>
                } else {
                    done  = DEF_TRUE;
    6f50:	f04f 0301 	mov.w	r3, #1
    6f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    6f58:	e003      	b.n	6f62 <OS_TmrTask+0xfe>
                }
            } else {
                done = DEF_TRUE;
    6f5a:	f04f 0301 	mov.w	r3, #1
    6f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        OSTmrTickCtr++;                                          /* Increment the current time                        */
        spoke    = (OS_TMR_SPOKE_IX)(OSTmrTickCtr % OSCfg_TmrWheelSize);
        p_spoke  = &OSCfg_TmrWheel[spoke];
        p_tmr    = p_spoke->FirstPtr;
        done     = DEF_FALSE;
        while (done == DEF_FALSE) {
    6f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    6f66:	2b00      	cmp	r3, #0
    6f68:	d0c2      	beq.n	6ef0 <OS_TmrTask+0x8c>
                }
            } else {
                done = DEF_TRUE;
            }
        }
        ts_end = OS_TS_GET() - ts_start;                         /* Measure execution time of timer task              */
    6f6a:	f7fc f9d7 	bl	331c <CPU_TS_TmrRd>
    6f6e:	4602      	mov	r2, r0
    6f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f72:	1ad3      	subs	r3, r2, r3
    6f74:	613b      	str	r3, [r7, #16]
        OSSchedUnlock(&err);
    6f76:	f107 030e 	add.w	r3, r7, #14
    6f7a:	4618      	mov	r0, r3
    6f7c:	f007 fbfc 	bl	e778 <OSSchedUnlock>
        if (ts_end > OSTmrTaskTimeMax) {
    6f80:	f244 1370 	movw	r3, #16752	; 0x4170
    6f84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6f88:	681b      	ldr	r3, [r3, #0]
    6f8a:	693a      	ldr	r2, [r7, #16]
    6f8c:	429a      	cmp	r2, r3
    6f8e:	f67f af6e 	bls.w	6e6e <OS_TmrTask+0xa>
            OSTmrTaskTimeMax = ts_end;
    6f92:	f244 1370 	movw	r3, #16752	; 0x4170
    6f96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6f9a:	693a      	ldr	r2, [r7, #16]
    6f9c:	601a      	str	r2, [r3, #0]
        }
    }
    6f9e:	e766      	b.n	6e6e <OS_TmrTask+0xa>

00006fa0 <OSPendMulti>:
OS_OBJ_QTY  OSPendMulti (OS_PEND_DATA  *p_pend_data_tbl,
                         OS_OBJ_QTY     tbl_size,
                         OS_TICK        timeout,
                         OS_OPT         opt,
                         OS_ERR        *p_err)
{
    6fa0:	b580      	push	{r7, lr}
    6fa2:	b086      	sub	sp, #24
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	60f8      	str	r0, [r7, #12]
    6fa8:	607a      	str	r2, [r7, #4]
    6faa:	460a      	mov	r2, r1
    6fac:	817a      	strh	r2, [r7, #10]
    6fae:	813b      	strh	r3, [r7, #8]
    CPU_BOOLEAN   valid;
    OS_OBJ_QTY    nbr_obj_rdy;
    CPU_SR_ALLOC();
    6fb0:	f04f 0300 	mov.w	r3, #0
    6fb4:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't pend from an ISR                                 */
    6fb6:	f244 1381 	movw	r3, #16769	; 0x4181
    6fba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d006      	beq.n	6fd2 <OSPendMulti+0x32>
       *p_err = OS_ERR_PEND_ISR;
    6fc4:	6a3b      	ldr	r3, [r7, #32]
    6fc6:	f246 12ae 	movw	r2, #25006	; 0x61ae
    6fca:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    6fcc:	f04f 0300 	mov.w	r3, #0
    6fd0:	e0f5      	b.n	71be <OSPendMulti+0x21e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_pend_data_tbl == (OS_PEND_DATA *)0) {             /* Validate 'p_pend_data_tbl'                             */
    6fd2:	68fb      	ldr	r3, [r7, #12]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d106      	bne.n	6fe6 <OSPendMulti+0x46>
        *p_err = OS_ERR_PTR_INVALID;
    6fd8:	6a3b      	ldr	r3, [r7, #32]
    6fda:	f246 22d5 	movw	r2, #25301	; 0x62d5
    6fde:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    6fe0:	f04f 0300 	mov.w	r3, #0
    6fe4:	e0eb      	b.n	71be <OSPendMulti+0x21e>
    }
    if (tbl_size == (OS_OBJ_QTY)0) {                        /* Array size must be > 0                                 */
    6fe6:	897b      	ldrh	r3, [r7, #10]
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d106      	bne.n	6ffa <OSPendMulti+0x5a>
        *p_err = OS_ERR_PTR_INVALID;
    6fec:	6a3b      	ldr	r3, [r7, #32]
    6fee:	f246 22d5 	movw	r2, #25301	; 0x62d5
    6ff2:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    6ff4:	f04f 0300 	mov.w	r3, #0
    6ff8:	e0e1      	b.n	71be <OSPendMulti+0x21e>
    }
    switch (opt) {
    6ffa:	893b      	ldrh	r3, [r7, #8]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d009      	beq.n	7014 <OSPendMulti+0x74>
    7000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7004:	d006      	beq.n	7014 <OSPendMulti+0x74>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    7006:	6a3b      	ldr	r3, [r7, #32]
    7008:	f645 6225 	movw	r2, #24101	; 0x5e25
    700c:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0);
    700e:	f04f 0300 	mov.w	r3, #0
    7012:	e0d4      	b.n	71be <OSPendMulti+0x21e>
        return ((OS_OBJ_QTY)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
    7014:	bf00      	nop
             *p_err = OS_ERR_OPT_INVALID;
             return ((OS_OBJ_QTY)0);
    }
#endif

    valid = OS_PendMultiValidate(p_pend_data_tbl,           /* -------- Validate objects to be OS_SEM or OS_Q ------- */
    7016:	897b      	ldrh	r3, [r7, #10]
    7018:	68f8      	ldr	r0, [r7, #12]
    701a:	4619      	mov	r1, r3
    701c:	f000 f95e 	bl	72dc <OS_PendMultiValidate>
    7020:	4603      	mov	r3, r0
    7022:	74fb      	strb	r3, [r7, #19]
                                 tbl_size);
    if (valid == DEF_FALSE) {
    7024:	7cfb      	ldrb	r3, [r7, #19]
    7026:	2b00      	cmp	r3, #0
    7028:	d106      	bne.n	7038 <OSPendMulti+0x98>
        *p_err = OS_ERR_OBJ_TYPE;                           /* Invalid, not OS_SEM or OS_Q                            */
    702a:	6a3b      	ldr	r3, [r7, #32]
    702c:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    7030:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    7032:	f04f 0300 	mov.w	r3, #0
    7036:	e0c2      	b.n	71be <OSPendMulti+0x21e>
    }

/*$PAGE*/
    CPU_CRITICAL_ENTER();
    7038:	f010 fed4 	bl	17de4 <CPU_SR_Save>
    703c:	6178      	str	r0, [r7, #20]
    703e:	f7fa fc3b 	bl	18b8 <CPU_IntDisMeasStart>
    nbr_obj_rdy = OS_PendMultiGetRdy(p_pend_data_tbl,       /* --------- SEE IF OBJECT(s) HAVE BEEN POSTED ---------- */
    7042:	897b      	ldrh	r3, [r7, #10]
    7044:	68f8      	ldr	r0, [r7, #12]
    7046:	4619      	mov	r1, r3
    7048:	f000 f8be 	bl	71c8 <OS_PendMultiGetRdy>
    704c:	4603      	mov	r3, r0
    704e:	823b      	strh	r3, [r7, #16]
                                     tbl_size);
    if (nbr_obj_rdy > (OS_OBJ_QTY)0) {
    7050:	8a3b      	ldrh	r3, [r7, #16]
    7052:	2b00      	cmp	r3, #0
    7054:	d00a      	beq.n	706c <OSPendMulti+0xcc>
        CPU_CRITICAL_EXIT();
    7056:	f7fa fc5b 	bl	1910 <CPU_IntDisMeasStop>
    705a:	6978      	ldr	r0, [r7, #20]
    705c:	f010 fec6 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_NONE;
    7060:	6a3b      	ldr	r3, [r7, #32]
    7062:	f04f 0200 	mov.w	r2, #0
    7066:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)nbr_obj_rdy);
    7068:	8a3b      	ldrh	r3, [r7, #16]
    706a:	e0a8      	b.n	71be <OSPendMulti+0x21e>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    706c:	893b      	ldrh	r3, [r7, #8]
    706e:	b21b      	sxth	r3, r3
    7070:	2b00      	cmp	r3, #0
    7072:	da0b      	bge.n	708c <OSPendMulti+0xec>
        CPU_CRITICAL_EXIT();
    7074:	f7fa fc4c 	bl	1910 <CPU_IntDisMeasStop>
    7078:	6978      	ldr	r0, [r7, #20]
    707a:	f010 feb7 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;                   /* No                                                     */
    707e:	6a3b      	ldr	r3, [r7, #32]
    7080:	f246 12b0 	movw	r2, #25008	; 0x61b0
    7084:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    7086:	f04f 0300 	mov.w	r3, #0
    708a:	e098      	b.n	71be <OSPendMulti+0x21e>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
    708c:	f643 5350 	movw	r3, #15696	; 0x3d50
    7090:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	2b00      	cmp	r3, #0
    7098:	d00b      	beq.n	70b2 <OSPendMulti+0x112>
            CPU_CRITICAL_EXIT();
    709a:	f7fa fc39 	bl	1910 <CPU_IntDisMeasStop>
    709e:	6978      	ldr	r0, [r7, #20]
    70a0:	f010 fea4 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    70a4:	6a3b      	ldr	r3, [r7, #32]
    70a6:	f646 5262 	movw	r2, #28002	; 0x6d62
    70aa:	801a      	strh	r2, [r3, #0]
            return ((OS_OBJ_QTY)0);
    70ac:	f04f 0300 	mov.w	r3, #0
    70b0:	e085      	b.n	71be <OSPendMulti+0x21e>
        }
    }
    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    70b2:	f643 5350 	movw	r3, #15696	; 0x3d50
    70b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    70ba:	781b      	ldrb	r3, [r3, #0]
    70bc:	f103 0301 	add.w	r3, r3, #1
    70c0:	b2da      	uxtb	r2, r3
    70c2:	f643 5350 	movw	r3, #15696	; 0x3d50
    70c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    70ca:	701a      	strb	r2, [r3, #0]
    70cc:	f643 5350 	movw	r3, #15696	; 0x3d50
    70d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	2b01      	cmp	r3, #1
    70d8:	d101      	bne.n	70de <OSPendMulti+0x13e>
    70da:	f008 fb8b 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    70de:	f7fa fc17 	bl	1910 <CPU_IntDisMeasStop>
    70e2:	6978      	ldr	r0, [r7, #20]
    70e4:	f010 fe82 	bl	17dec <CPU_SR_Restore>
                                                            /* ------ NO OBJECT READY, PEND ON MULTIPLE OBJECTS ----- */
    OS_PendMultiWait(p_pend_data_tbl,                       /* Suspend task until object posted or timeout occurs     */
    70e8:	897b      	ldrh	r3, [r7, #10]
    70ea:	68f8      	ldr	r0, [r7, #12]
    70ec:	4619      	mov	r1, r3
    70ee:	687a      	ldr	r2, [r7, #4]
    70f0:	f000 f940 	bl	7374 <OS_PendMultiWait>
                     tbl_size,
                     timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
    70f4:	f010 fe76 	bl	17de4 <CPU_SR_Save>
    70f8:	6178      	str	r0, [r7, #20]
    70fa:	f7fa fbdd 	bl	18b8 <CPU_IntDisMeasStart>
    70fe:	f643 5350 	movw	r3, #15696	; 0x3d50
    7102:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	f103 33ff 	add.w	r3, r3, #4294967295
    710c:	b2da      	uxtb	r2, r3
    710e:	f643 5350 	movw	r3, #15696	; 0x3d50
    7112:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7116:	701a      	strb	r2, [r3, #0]
    7118:	f643 5350 	movw	r3, #15696	; 0x3d50
    711c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7120:	781b      	ldrb	r3, [r3, #0]
    7122:	2b00      	cmp	r3, #0
    7124:	d101      	bne.n	712a <OSPendMulti+0x18a>
    7126:	f008 fb77 	bl	f818 <OS_SchedLockTimeMeasStop>
    712a:	f7fa fbf1 	bl	1910 <CPU_IntDisMeasStop>
    712e:	6978      	ldr	r0, [r7, #20]
    7130:	f010 fe5c 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find next highest priority task ready                  */
    7134:	f007 fa74 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    7138:	f010 fe54 	bl	17de4 <CPU_SR_Save>
    713c:	6178      	str	r0, [r7, #20]
    713e:	f7fa fbbb 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    7142:	f244 135c 	movw	r3, #16732	; 0x415c
    7146:	f2c1 0300 	movt	r3, #4096	; 0x1000
    714a:	681b      	ldr	r3, [r3, #0]
    714c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    7150:	2b03      	cmp	r3, #3
    7152:	d81f      	bhi.n	7194 <OSPendMulti+0x1f4>
    7154:	a201      	add	r2, pc, #4	; (adr r2, 715c <OSPendMulti+0x1bc>)
    7156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    715a:	bf00      	nop
    715c:	0000716d 	.word	0x0000716d
    7160:	00007177 	.word	0x00007177
    7164:	0000718b 	.word	0x0000718b
    7168:	00007181 	.word	0x00007181
        case OS_STATUS_PEND_OK:                             /* We got one of the objects posted to                    */
             *p_err = OS_ERR_NONE;
    716c:	6a3b      	ldr	r3, [r7, #32]
    716e:	f04f 0200 	mov.w	r2, #0
    7172:	801a      	strh	r2, [r3, #0]
             break;
    7174:	e013      	b.n	719e <OSPendMulti+0x1fe>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that the multi-pend was aborted               */
             *p_err = OS_ERR_PEND_ABORT;
    7176:	6a3b      	ldr	r3, [r7, #32]
    7178:	f246 12a9 	movw	r2, #25001	; 0x61a9
    717c:	801a      	strh	r2, [r3, #0]
             break;
    717e:	e00e      	b.n	719e <OSPendMulti+0x1fe>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
             *p_err = OS_ERR_TIMEOUT;
    7180:	6a3b      	ldr	r3, [r7, #32]
    7182:	f247 22d9 	movw	r2, #29401	; 0x72d9
    7186:	801a      	strh	r2, [r3, #0]
             break;
    7188:	e009      	b.n	719e <OSPendMulti+0x1fe>

        case OS_STATUS_PEND_DEL:                            /* Indicate that an object pended on has been deleted     */
             *p_err = OS_ERR_OBJ_DEL;
    718a:	6a3b      	ldr	r3, [r7, #32]
    718c:	f645 52c2 	movw	r2, #24002	; 0x5dc2
    7190:	801a      	strh	r2, [r3, #0]
            break;
    7192:	e004      	b.n	719e <OSPendMulti+0x1fe>

        default:
             *p_err = OS_ERR_STATUS_INVALID;
    7194:	6a3b      	ldr	r3, [r7, #32]
    7196:	f646 622b 	movw	r2, #28203	; 0x6e2b
    719a:	801a      	strh	r2, [r3, #0]
             break;
    719c:	bf00      	nop
    }

    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
    719e:	f244 135c 	movw	r3, #16732	; 0x415c
    71a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    71a6:	681b      	ldr	r3, [r3, #0]
    71a8:	f04f 0200 	mov.w	r2, #0
    71ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    CPU_CRITICAL_EXIT();
    71b0:	f7fa fbae 	bl	1910 <CPU_IntDisMeasStop>
    71b4:	6978      	ldr	r0, [r7, #20]
    71b6:	f010 fe19 	bl	17dec <CPU_SR_Restore>

    return ((OS_OBJ_QTY)1);
    71ba:	f04f 0301 	mov.w	r3, #1
}
    71be:	4618      	mov	r0, r3
    71c0:	f107 0718 	add.w	r7, r7, #24
    71c4:	46bd      	mov	sp, r7
    71c6:	bd80      	pop	{r7, pc}

000071c8 <OS_PendMultiGetRdy>:
************************************************************************************************************************
*/

OS_OBJ_QTY  OS_PendMultiGetRdy (OS_PEND_DATA  *p_pend_data_tbl,
                                OS_OBJ_QTY     tbl_size)
{
    71c8:	b580      	push	{r7, lr}
    71ca:	b088      	sub	sp, #32
    71cc:	af00      	add	r7, sp, #0
    71ce:	6078      	str	r0, [r7, #4]
    71d0:	460b      	mov	r3, r1
    71d2:	807b      	strh	r3, [r7, #2]
    OS_SEM      *p_sem;
#endif



    nbr_obj_rdy = (OS_OBJ_QTY)0;
    71d4:	f04f 0300 	mov.w	r3, #0
    71d8:	83bb      	strh	r3, [r7, #28]
    for (i = 0u; i < tbl_size; i++) {
    71da:	f04f 0300 	mov.w	r3, #0
    71de:	83fb      	strh	r3, [r7, #30]
    71e0:	e072      	b.n	72c8 <OS_PendMultiGetRdy+0x100>
        p_pend_data_tbl->RdyObjPtr  = (void         *)0;         /* Clear all fields                                  */
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	f04f 0200 	mov.w	r2, #0
    71e8:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
    71ea:	687b      	ldr	r3, [r7, #4]
    71ec:	f04f 0200 	mov.w	r2, #0
    71f0:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
    71f2:	687b      	ldr	r3, [r7, #4]
    71f4:	f04f 0200 	mov.w	r2, #0
    71f8:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	f04f 0200 	mov.w	r2, #0
    7200:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	f04f 0200 	mov.w	r2, #0
    7208:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	f04f 0200 	mov.w	r2, #0
    7210:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->TCBPtr     = (OS_TCB       *)0;
    7212:	687b      	ldr	r3, [r7, #4]
    7214:	f04f 0200 	mov.w	r2, #0
    7218:	609a      	str	r2, [r3, #8]
#if OS_CFG_Q_EN > 0u
        p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* Assume we are pointing to a message queue object  */
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	68db      	ldr	r3, [r3, #12]
    721e:	61bb      	str	r3, [r7, #24]
        if (p_q->Type == OS_OBJ_TYPE_Q) {                        /* Is it a message queue?                            */
    7220:	69bb      	ldr	r3, [r7, #24]
    7222:	681a      	ldr	r2, [r3, #0]
    7224:	f245 5351 	movw	r3, #21841	; 0x5551
    7228:	f2c5 5345 	movt	r3, #21829	; 0x5545
    722c:	429a      	cmp	r2, r3
    722e:	d122      	bne.n	7276 <OS_PendMultiGetRdy+0xae>
            p_void = OS_MsgQGet(&p_q->MsgQ,                      /* Yes, Any message waiting in the message queue?    */
    7230:	69bb      	ldr	r3, [r7, #24]
    7232:	f103 0320 	add.w	r3, r3, #32
    7236:	4618      	mov	r0, r3
    7238:	f107 030c 	add.w	r3, r7, #12
    723c:	4619      	mov	r1, r3
    723e:	f107 0308 	add.w	r3, r7, #8
    7242:	461a      	mov	r2, r3
    7244:	f107 030e 	add.w	r3, r7, #14
    7248:	f009 f91c 	bl	10484 <OS_MsgQGet>
    724c:	6178      	str	r0, [r7, #20]
                                &msg_size,
                                &ts,
                                &err);
            if (err == OS_ERR_NONE) {
    724e:	89fb      	ldrh	r3, [r7, #14]
    7250:	2b00      	cmp	r3, #0
    7252:	d110      	bne.n	7276 <OS_PendMultiGetRdy+0xae>
                p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	68da      	ldr	r2, [r3, #12]
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	611a      	str	r2, [r3, #16]
                p_pend_data_tbl->RdyMsgPtr  = p_void;            /*      Yes, save the message received               */
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	697a      	ldr	r2, [r7, #20]
    7260:	615a      	str	r2, [r3, #20]
                p_pend_data_tbl->RdyMsgSize = msg_size;
    7262:	89ba      	ldrh	r2, [r7, #12]
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	831a      	strh	r2, [r3, #24]
                p_pend_data_tbl->RdyTS      = ts;
    7268:	68ba      	ldr	r2, [r7, #8]
    726a:	687b      	ldr	r3, [r7, #4]
    726c:	61da      	str	r2, [r3, #28]
                nbr_obj_rdy++;
    726e:	8bbb      	ldrh	r3, [r7, #28]
    7270:	f103 0301 	add.w	r3, r3, #1
    7274:	83bb      	strh	r3, [r7, #28]
            }
        }
#endif

#if OS_CFG_SEM_EN > 0u
        p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* Assume we are pointing to a semaphore object      */
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	68db      	ldr	r3, [r3, #12]
    727a:	613b      	str	r3, [r7, #16]
        if (p_sem->Type == OS_OBJ_TYPE_SEM) {                    /* Is it a semaphore?                                */
    727c:	693b      	ldr	r3, [r7, #16]
    727e:	681a      	ldr	r2, [r3, #0]
    7280:	f244 5353 	movw	r3, #17747	; 0x4553
    7284:	f2c4 134d 	movt	r3, #16717	; 0x414d
    7288:	429a      	cmp	r2, r3
    728a:	d115      	bne.n	72b8 <OS_PendMultiGetRdy+0xf0>
            if (p_sem->Ctr > 0u) {                               /* Yes, Semaphore has been signaled?                 */
    728c:	693b      	ldr	r3, [r7, #16]
    728e:	6a1b      	ldr	r3, [r3, #32]
    7290:	2b00      	cmp	r3, #0
    7292:	d011      	beq.n	72b8 <OS_PendMultiGetRdy+0xf0>
                p_sem->Ctr--;                                    /*      Yes, caller may proceed                      */
    7294:	693b      	ldr	r3, [r7, #16]
    7296:	6a1b      	ldr	r3, [r3, #32]
    7298:	f103 32ff 	add.w	r2, r3, #4294967295
    729c:	693b      	ldr	r3, [r7, #16]
    729e:	621a      	str	r2, [r3, #32]
                p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	68da      	ldr	r2, [r3, #12]
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	611a      	str	r2, [r3, #16]
                p_pend_data_tbl->RdyTS      = p_sem->TS;
    72a8:	693b      	ldr	r3, [r7, #16]
    72aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    72ac:	687b      	ldr	r3, [r7, #4]
    72ae:	61da      	str	r2, [r3, #28]
                nbr_obj_rdy++;
    72b0:	8bbb      	ldrh	r3, [r7, #28]
    72b2:	f103 0301 	add.w	r3, r3, #1
    72b6:	83bb      	strh	r3, [r7, #28]
            }
        }
#endif

        p_pend_data_tbl++;
    72b8:	687b      	ldr	r3, [r7, #4]
    72ba:	f103 0320 	add.w	r3, r3, #32
    72be:	607b      	str	r3, [r7, #4]
#endif



    nbr_obj_rdy = (OS_OBJ_QTY)0;
    for (i = 0u; i < tbl_size; i++) {
    72c0:	8bfb      	ldrh	r3, [r7, #30]
    72c2:	f103 0301 	add.w	r3, r3, #1
    72c6:	83fb      	strh	r3, [r7, #30]
    72c8:	8bfa      	ldrh	r2, [r7, #30]
    72ca:	887b      	ldrh	r3, [r7, #2]
    72cc:	429a      	cmp	r2, r3
    72ce:	d388      	bcc.n	71e2 <OS_PendMultiGetRdy+0x1a>
        }
#endif

        p_pend_data_tbl++;
    }
    return (nbr_obj_rdy);
    72d0:	8bbb      	ldrh	r3, [r7, #28]
}
    72d2:	4618      	mov	r0, r3
    72d4:	f107 0720 	add.w	r7, r7, #32
    72d8:	46bd      	mov	sp, r7
    72da:	bd80      	pop	{r7, pc}

000072dc <OS_PendMultiValidate>:
************************************************************************************************************************
*/

CPU_BOOLEAN  OS_PendMultiValidate (OS_PEND_DATA  *p_pend_data_tbl,
                                   OS_OBJ_QTY     tbl_size)
{
    72dc:	b480      	push	{r7}
    72de:	b087      	sub	sp, #28
    72e0:	af00      	add	r7, sp, #0
    72e2:	6078      	str	r0, [r7, #4]
    72e4:	460b      	mov	r3, r1
    72e6:	807b      	strh	r3, [r7, #2]
#if OS_CFG_Q_EN > 0u
    OS_Q        *p_q;
#endif


    for (i = 0u; i < tbl_size; i++) {
    72e8:	f04f 0300 	mov.w	r3, #0
    72ec:	82fb      	strh	r3, [r7, #22]
    72ee:	e035      	b.n	735c <OS_PendMultiValidate+0x80>
        if (p_pend_data_tbl->PendObjPtr == (OS_PEND_OBJ *)0) {   /* All .PendObjPtr in the table MUST be non NULL     */
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	68db      	ldr	r3, [r3, #12]
    72f4:	2b00      	cmp	r3, #0
    72f6:	d102      	bne.n	72fe <OS_PendMultiValidate+0x22>
            return (DEF_FALSE);
    72f8:	f04f 0300 	mov.w	r3, #0
    72fc:	e034      	b.n	7368 <OS_PendMultiValidate+0x8c>
        }

        ctr = 0u;
    72fe:	f04f 0300 	mov.w	r3, #0
    7302:	82bb      	strh	r3, [r7, #20]
#if OS_CFG_SEM_EN  > 0u
        p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* All objects to pend on must be of type OS_SEM ... */
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	68db      	ldr	r3, [r3, #12]
    7308:	613b      	str	r3, [r7, #16]
        if (p_sem->Type == OS_OBJ_TYPE_SEM) {
    730a:	693b      	ldr	r3, [r7, #16]
    730c:	681a      	ldr	r2, [r3, #0]
    730e:	f244 5353 	movw	r3, #17747	; 0x4553
    7312:	f2c4 134d 	movt	r3, #16717	; 0x414d
    7316:	429a      	cmp	r2, r3
    7318:	d103      	bne.n	7322 <OS_PendMultiValidate+0x46>
            ctr++;
    731a:	8abb      	ldrh	r3, [r7, #20]
    731c:	f103 0301 	add.w	r3, r3, #1
    7320:	82bb      	strh	r3, [r7, #20]
        }
#endif

#if OS_CFG_Q_EN > 0u
        p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* ... or of type OS_Q                               */
    7322:	687b      	ldr	r3, [r7, #4]
    7324:	68db      	ldr	r3, [r3, #12]
    7326:	60fb      	str	r3, [r7, #12]
        if (p_q->Type == OS_OBJ_TYPE_Q) {
    7328:	68fb      	ldr	r3, [r7, #12]
    732a:	681a      	ldr	r2, [r3, #0]
    732c:	f245 5351 	movw	r3, #21841	; 0x5551
    7330:	f2c5 5345 	movt	r3, #21829	; 0x5545
    7334:	429a      	cmp	r2, r3
    7336:	d103      	bne.n	7340 <OS_PendMultiValidate+0x64>
            ctr++;
    7338:	8abb      	ldrh	r3, [r7, #20]
    733a:	f103 0301 	add.w	r3, r3, #1
    733e:	82bb      	strh	r3, [r7, #20]
        }
#endif

        if (ctr == (OS_OBJ_QTY)0) {
    7340:	8abb      	ldrh	r3, [r7, #20]
    7342:	2b00      	cmp	r3, #0
    7344:	d102      	bne.n	734c <OS_PendMultiValidate+0x70>
            return (DEF_FALSE);                                  /* Found at least one invalid object type            */
    7346:	f04f 0300 	mov.w	r3, #0
    734a:	e00d      	b.n	7368 <OS_PendMultiValidate+0x8c>
        }
        p_pend_data_tbl++;
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	f103 0320 	add.w	r3, r3, #32
    7352:	607b      	str	r3, [r7, #4]
#if OS_CFG_Q_EN > 0u
    OS_Q        *p_q;
#endif


    for (i = 0u; i < tbl_size; i++) {
    7354:	8afb      	ldrh	r3, [r7, #22]
    7356:	f103 0301 	add.w	r3, r3, #1
    735a:	82fb      	strh	r3, [r7, #22]
    735c:	8afa      	ldrh	r2, [r7, #22]
    735e:	887b      	ldrh	r3, [r7, #2]
    7360:	429a      	cmp	r2, r3
    7362:	d3c5      	bcc.n	72f0 <OS_PendMultiValidate+0x14>
        if (ctr == (OS_OBJ_QTY)0) {
            return (DEF_FALSE);                                  /* Found at least one invalid object type            */
        }
        p_pend_data_tbl++;
    }
    return (DEF_TRUE);
    7364:	f04f 0301 	mov.w	r3, #1
}
    7368:	4618      	mov	r0, r3
    736a:	f107 071c 	add.w	r7, r7, #28
    736e:	46bd      	mov	sp, r7
    7370:	bc80      	pop	{r7}
    7372:	4770      	bx	lr

00007374 <OS_PendMultiWait>:
*/

void  OS_PendMultiWait (OS_PEND_DATA  *p_pend_data_tbl,
                        OS_OBJ_QTY     tbl_size,
                        OS_TICK        timeout)
{
    7374:	b580      	push	{r7, lr}
    7376:	b088      	sub	sp, #32
    7378:	af00      	add	r7, sp, #0
    737a:	60f8      	str	r0, [r7, #12]
    737c:	460b      	mov	r3, r1
    737e:	607a      	str	r2, [r7, #4]
    7380:	817b      	strh	r3, [r7, #10]
    OS_SEM         *p_sem;
#endif



    OSTCBCurPtr->PendOn             = OS_TASK_PEND_ON_MULTI;   /* Resource not available, wait until it is            */
    7382:	f244 135c 	movw	r3, #16732	; 0x415c
    7386:	f2c1 0300 	movt	r3, #4096	; 0x1000
    738a:	681b      	ldr	r3, [r3, #0]
    738c:	f04f 0203 	mov.w	r2, #3
    7390:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    OSTCBCurPtr->PendStatus         = OS_STATUS_PEND_OK;
    7394:	f244 135c 	movw	r3, #16732	; 0x415c
    7398:	f2c1 0300 	movt	r3, #4096	; 0x1000
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	f04f 0200 	mov.w	r2, #0
    73a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    OSTCBCurPtr->PendDataTblEntries = tbl_size;
    73a6:	f244 135c 	movw	r3, #16732	; 0x415c
    73aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    73ae:	681b      	ldr	r3, [r3, #0]
    73b0:	897a      	ldrh	r2, [r7, #10]
    73b2:	869a      	strh	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendDataTblPtr     = p_pend_data_tbl;
    73b4:	f244 135c 	movw	r3, #16732	; 0x415c
    73b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    73bc:	681b      	ldr	r3, [r3, #0]
    73be:	68fa      	ldr	r2, [r7, #12]
    73c0:	631a      	str	r2, [r3, #48]	; 0x30

    OS_TaskBlock(OSTCBCurPtr,                                  /* Block the task waiting for object to be posted ...  */
    73c2:	f244 135c 	movw	r3, #16732	; 0x415c
    73c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    73ca:	681b      	ldr	r3, [r3, #0]
    73cc:	4618      	mov	r0, r3
    73ce:	6879      	ldr	r1, [r7, #4]
    73d0:	f008 fad6 	bl	f980 <OS_TaskBlock>
                 timeout);                                     /* ... but with a timeout if not                       */

    for (i = 0u; i < tbl_size; i++) {
    73d4:	f04f 0300 	mov.w	r3, #0
    73d8:	83fb      	strh	r3, [r7, #30]
    73da:	e034      	b.n	7446 <OS_PendMultiWait+0xd2>
        p_pend_data_tbl->TCBPtr = OSTCBCurPtr;                 /* Every entry points back to the TCB of the task      */
    73dc:	f244 135c 	movw	r3, #16732	; 0x415c
    73e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    73e4:	681a      	ldr	r2, [r3, #0]
    73e6:	68fb      	ldr	r3, [r7, #12]
    73e8:	609a      	str	r2, [r3, #8]

#if OS_CFG_SEM_EN > 0u
        p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr);
    73ea:	68fb      	ldr	r3, [r7, #12]
    73ec:	68db      	ldr	r3, [r3, #12]
    73ee:	61bb      	str	r3, [r7, #24]
        if (p_sem->Type == OS_OBJ_TYPE_SEM) {
    73f0:	69bb      	ldr	r3, [r7, #24]
    73f2:	681a      	ldr	r2, [r3, #0]
    73f4:	f244 5353 	movw	r3, #17747	; 0x4553
    73f8:	f2c4 134d 	movt	r3, #16717	; 0x414d
    73fc:	429a      	cmp	r2, r3
    73fe:	d107      	bne.n	7410 <OS_PendMultiWait+0x9c>
            p_pend_list = &p_sem->PendList;
    7400:	69bb      	ldr	r3, [r7, #24]
    7402:	f103 0308 	add.w	r3, r3, #8
    7406:	617b      	str	r3, [r7, #20]
            OS_PendListInsertPrio(p_pend_list,
    7408:	6978      	ldr	r0, [r7, #20]
    740a:	68f9      	ldr	r1, [r7, #12]
    740c:	f007 fdc8 	bl	efa0 <OS_PendListInsertPrio>
                                  p_pend_data_tbl);
        }
#endif

#if OS_CFG_Q_EN > 0u
        p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);
    7410:	68fb      	ldr	r3, [r7, #12]
    7412:	68db      	ldr	r3, [r3, #12]
    7414:	613b      	str	r3, [r7, #16]
        if (p_q->Type == OS_OBJ_TYPE_Q) {
    7416:	693b      	ldr	r3, [r7, #16]
    7418:	681a      	ldr	r2, [r3, #0]
    741a:	f245 5351 	movw	r3, #21841	; 0x5551
    741e:	f2c5 5345 	movt	r3, #21829	; 0x5545
    7422:	429a      	cmp	r2, r3
    7424:	d107      	bne.n	7436 <OS_PendMultiWait+0xc2>
            p_pend_list = &p_q->PendList;
    7426:	693b      	ldr	r3, [r7, #16]
    7428:	f103 0308 	add.w	r3, r3, #8
    742c:	617b      	str	r3, [r7, #20]
            OS_PendListInsertPrio(p_pend_list,
    742e:	6978      	ldr	r0, [r7, #20]
    7430:	68f9      	ldr	r1, [r7, #12]
    7432:	f007 fdb5 	bl	efa0 <OS_PendListInsertPrio>
                                  p_pend_data_tbl);
        }
#endif

        p_pend_data_tbl++;
    7436:	68fb      	ldr	r3, [r7, #12]
    7438:	f103 0320 	add.w	r3, r3, #32
    743c:	60fb      	str	r3, [r7, #12]
    OSTCBCurPtr->PendDataTblPtr     = p_pend_data_tbl;

    OS_TaskBlock(OSTCBCurPtr,                                  /* Block the task waiting for object to be posted ...  */
                 timeout);                                     /* ... but with a timeout if not                       */

    for (i = 0u; i < tbl_size; i++) {
    743e:	8bfb      	ldrh	r3, [r7, #30]
    7440:	f103 0301 	add.w	r3, r3, #1
    7444:	83fb      	strh	r3, [r7, #30]
    7446:	8bfa      	ldrh	r2, [r7, #30]
    7448:	897b      	ldrh	r3, [r7, #10]
    744a:	429a      	cmp	r2, r3
    744c:	d3c6      	bcc.n	73dc <OS_PendMultiWait+0x68>
        }
#endif

        p_pend_data_tbl++;
    }
}
    744e:	f107 0720 	add.w	r7, r7, #32
    7452:	46bd      	mov	sp, r7
    7454:	bd80      	pop	{r7, pc}
    7456:	bf00      	nop

00007458 <OSTaskChangePrio>:

#if OS_CFG_TASK_CHANGE_PRIO_EN > 0u
void  OSTaskChangePrio (OS_TCB   *p_tcb,
                        OS_PRIO   prio_new,
                        OS_ERR   *p_err)
{
    7458:	b580      	push	{r7, lr}
    745a:	b086      	sub	sp, #24
    745c:	af00      	add	r7, sp, #0
    745e:	60f8      	str	r0, [r7, #12]
    7460:	460b      	mov	r3, r1
    7462:	607a      	str	r2, [r7, #4]
    7464:	72fb      	strb	r3, [r7, #11]
    CPU_BOOLEAN   self;
    CPU_SR_ALLOC();
    7466:	f04f 0300 	mov.w	r3, #0
    746a:	613b      	str	r3, [r7, #16]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
    746c:	f244 1381 	movw	r3, #16769	; 0x4181
    7470:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7474:	781b      	ldrb	r3, [r3, #0]
    7476:	2b00      	cmp	r3, #0
    7478:	d004      	beq.n	7484 <OSTaskChangePrio+0x2c>
        *p_err = OS_ERR_TASK_CHANGE_PRIO_ISR;
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	f247 1249 	movw	r2, #29001	; 0x7149
    7480:	801a      	strh	r2, [r3, #0]
        return;
    7482:	e0f4      	b.n	766e <OSTaskChangePrio+0x216>
    }
#endif

    if (prio_new >= (OS_CFG_PRIO_MAX - 1u)) {               /* Cannot set to Idle Task priority                       */
    7484:	7afb      	ldrb	r3, [r7, #11]
    7486:	2b3e      	cmp	r3, #62	; 0x3e
    7488:	d904      	bls.n	7494 <OSTaskChangePrio+0x3c>
        *p_err = OS_ERR_PRIO_INVALID;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	f246 2273 	movw	r2, #25203	; 0x6273
    7490:	801a      	strh	r2, [r3, #0]
        return;
    7492:	e0ec      	b.n	766e <OSTaskChangePrio+0x216>
    }

    if (p_tcb == (OS_TCB *)0) {                             /* See if want to change priority of 'self'               */
    7494:	68fb      	ldr	r3, [r7, #12]
    7496:	2b00      	cmp	r3, #0
    7498:	d113      	bne.n	74c2 <OSTaskChangePrio+0x6a>
        CPU_CRITICAL_ENTER();
    749a:	f010 fca3 	bl	17de4 <CPU_SR_Save>
    749e:	6138      	str	r0, [r7, #16]
    74a0:	f7fa fa0a 	bl	18b8 <CPU_IntDisMeasStart>
        p_tcb = OSTCBCurPtr;
    74a4:	f244 135c 	movw	r3, #16732	; 0x415c
    74a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    74ac:	681b      	ldr	r3, [r3, #0]
    74ae:	60fb      	str	r3, [r7, #12]
        CPU_CRITICAL_EXIT();
    74b0:	f7fa fa2e 	bl	1910 <CPU_IntDisMeasStop>
    74b4:	6938      	ldr	r0, [r7, #16]
    74b6:	f010 fc99 	bl	17dec <CPU_SR_Restore>
        self  = DEF_TRUE;
    74ba:	f04f 0301 	mov.w	r3, #1
    74be:	75fb      	strb	r3, [r7, #23]
    74c0:	e002      	b.n	74c8 <OSTaskChangePrio+0x70>
    } else {
        self  = DEF_FALSE;
    74c2:	f04f 0300 	mov.w	r3, #0
    74c6:	75fb      	strb	r3, [r7, #23]
    }

    OS_CRITICAL_ENTER();
    74c8:	f010 fc8c 	bl	17de4 <CPU_SR_Save>
    74cc:	6138      	str	r0, [r7, #16]
    74ce:	f7fa f9f3 	bl	18b8 <CPU_IntDisMeasStart>
    74d2:	f643 5350 	movw	r3, #15696	; 0x3d50
    74d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	f103 0301 	add.w	r3, r3, #1
    74e0:	b2da      	uxtb	r2, r3
    74e2:	f643 5350 	movw	r3, #15696	; 0x3d50
    74e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    74ea:	701a      	strb	r2, [r3, #0]
    74ec:	f643 5350 	movw	r3, #15696	; 0x3d50
    74f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	2b01      	cmp	r3, #1
    74f8:	d101      	bne.n	74fe <OSTaskChangePrio+0xa6>
    74fa:	f008 f97b 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    74fe:	f7fa fa07 	bl	1910 <CPU_IntDisMeasStop>
    7502:	6938      	ldr	r0, [r7, #16]
    7504:	f010 fc72 	bl	17dec <CPU_SR_Restore>
    switch (p_tcb->TaskState) {
    7508:	68fb      	ldr	r3, [r7, #12]
    750a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    750e:	2b07      	cmp	r3, #7
    7510:	d84d      	bhi.n	75ae <OSTaskChangePrio+0x156>
    7512:	f04f 524c 	mov.w	r2, #855638016	; 0x33000000
    7516:	fa02 f203 	lsl.w	r2, r2, r3
    751a:	2a00      	cmp	r2, #0
    751c:	db28      	blt.n	7570 <OSTaskChangePrio+0x118>
    751e:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
    7522:	fa02 f203 	lsl.w	r2, r2, r3
    7526:	2a00      	cmp	r2, #0
    7528:	db1d      	blt.n	7566 <OSTaskChangePrio+0x10e>
    752a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    752e:	fa02 f303 	lsl.w	r3, r2, r3
    7532:	2b00      	cmp	r3, #0
    7534:	da3b      	bge.n	75ae <OSTaskChangePrio+0x156>
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);                       /* Remove from current priority                           */
    7536:	68f8      	ldr	r0, [r7, #12]
    7538:	f008 f8be 	bl	f6b8 <OS_RdyListRemove>
             p_tcb->Prio = prio_new;                        /* Set new task priority                                  */
    753c:	68fb      	ldr	r3, [r7, #12]
    753e:	7afa      	ldrb	r2, [r7, #11]
    7540:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
             OS_PrioInsert(p_tcb->Prio);
    7544:	68fb      	ldr	r3, [r7, #12]
    7546:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    754a:	4618      	mov	r0, r3
    754c:	f7fe fe26 	bl	619c <OS_PrioInsert>
             if (self == DEF_TRUE) {
    7550:	7dfb      	ldrb	r3, [r7, #23]
    7552:	2b01      	cmp	r3, #1
    7554:	d103      	bne.n	755e <OSTaskChangePrio+0x106>
                 OS_RdyListInsertHead(p_tcb);
    7556:	68f8      	ldr	r0, [r7, #12]
    7558:	f007 ffd0 	bl	f4fc <OS_RdyListInsertHead>
             } else {
                 OS_RdyListInsertTail(p_tcb);
             }
             break;
    755c:	e061      	b.n	7622 <OSTaskChangePrio+0x1ca>
             p_tcb->Prio = prio_new;                        /* Set new task priority                                  */
             OS_PrioInsert(p_tcb->Prio);
             if (self == DEF_TRUE) {
                 OS_RdyListInsertHead(p_tcb);
             } else {
                 OS_RdyListInsertTail(p_tcb);
    755e:	68f8      	ldr	r0, [r7, #12]
    7560:	f008 f816 	bl	f590 <OS_RdyListInsertTail>
             }
             break;
    7564:	e05d      	b.n	7622 <OSTaskChangePrio+0x1ca>

        case OS_TASK_STATE_DLY:                             /* Nothing to do except change the priority in the OS_TCB */
        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->Prio = prio_new;                        /* Set new task priority                                  */
    7566:	68fb      	ldr	r3, [r7, #12]
    7568:	7afa      	ldrb	r2, [r7, #11]
    756a:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
             break;
    756e:	e058      	b.n	7622 <OSTaskChangePrio+0x1ca>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             switch (p_tcb->PendOn) {                       /* What to do depends on what we are pending on           */
    7570:	68fb      	ldr	r3, [r7, #12]
    7572:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    7576:	2b07      	cmp	r3, #7
    7578:	d817      	bhi.n	75aa <OSTaskChangePrio+0x152>
    757a:	f04f 42c2 	mov.w	r2, #1627389952	; 0x61000000
    757e:	fa02 f203 	lsl.w	r2, r2, r3
    7582:	2a00      	cmp	r2, #0
    7584:	db06      	blt.n	7594 <OSTaskChangePrio+0x13c>
    7586:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
    758a:	fa02 f303 	lsl.w	r3, r2, r3
    758e:	2b00      	cmp	r3, #0
    7590:	db05      	blt.n	759e <OSTaskChangePrio+0x146>
    7592:	e00a      	b.n	75aa <OSTaskChangePrio+0x152>
                 case OS_TASK_PEND_ON_TASK_Q:               /* Nothing to do except change the priority in the OS_TCB */
                 case OS_TASK_PEND_ON_TASK_SEM:
                 case OS_TASK_PEND_ON_FLAG:
                      p_tcb->Prio = prio_new;               /* Set new task priority                                  */
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	7afa      	ldrb	r2, [r7, #11]
    7598:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
                      break;
    759c:	e006      	b.n	75ac <OSTaskChangePrio+0x154>

                 case OS_TASK_PEND_ON_MUTEX:
                 case OS_TASK_PEND_ON_MULTI:
                 case OS_TASK_PEND_ON_Q:
                 case OS_TASK_PEND_ON_SEM:
                      OS_PendListChangePrio(p_tcb,
    759e:	7afb      	ldrb	r3, [r7, #11]
    75a0:	68f8      	ldr	r0, [r7, #12]
    75a2:	4619      	mov	r1, r3
    75a4:	f007 fc86 	bl	eeb4 <OS_PendListChangePrio>
                                            prio_new);
                      break;
    75a8:	e000      	b.n	75ac <OSTaskChangePrio+0x154>

                 default:
                      break;
    75aa:	bf00      	nop
            }
             break;
    75ac:	e039      	b.n	7622 <OSTaskChangePrio+0x1ca>

        default:
             OS_CRITICAL_EXIT();
    75ae:	f010 fc19 	bl	17de4 <CPU_SR_Save>
    75b2:	6138      	str	r0, [r7, #16]
    75b4:	f7fa f980 	bl	18b8 <CPU_IntDisMeasStart>
    75b8:	f643 5350 	movw	r3, #15696	; 0x3d50
    75bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    75c0:	781b      	ldrb	r3, [r3, #0]
    75c2:	f103 33ff 	add.w	r3, r3, #4294967295
    75c6:	b2da      	uxtb	r2, r3
    75c8:	f643 5350 	movw	r3, #15696	; 0x3d50
    75cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    75d0:	701a      	strb	r2, [r3, #0]
    75d2:	f643 5350 	movw	r3, #15696	; 0x3d50
    75d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    75da:	781b      	ldrb	r3, [r3, #0]
    75dc:	2b00      	cmp	r3, #0
    75de:	d116      	bne.n	760e <OSTaskChangePrio+0x1b6>
    75e0:	f008 f91a 	bl	f818 <OS_SchedLockTimeMeasStop>
    75e4:	f244 533c 	movw	r3, #17724	; 0x453c
    75e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    75ec:	881b      	ldrh	r3, [r3, #0]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d007      	beq.n	7602 <OSTaskChangePrio+0x1aa>
    75f2:	f7fa f98d 	bl	1910 <CPU_IntDisMeasStop>
    75f6:	6938      	ldr	r0, [r7, #16]
    75f8:	f010 fbf8 	bl	17dec <CPU_SR_Restore>
    75fc:	f008 f8c0 	bl	f780 <OS_Sched0>
    7600:	e00a      	b.n	7618 <OSTaskChangePrio+0x1c0>
    7602:	f7fa f985 	bl	1910 <CPU_IntDisMeasStop>
    7606:	6938      	ldr	r0, [r7, #16]
    7608:	f010 fbf0 	bl	17dec <CPU_SR_Restore>
    760c:	e004      	b.n	7618 <OSTaskChangePrio+0x1c0>
    760e:	f7fa f97f 	bl	1910 <CPU_IntDisMeasStop>
    7612:	6938      	ldr	r0, [r7, #16]
    7614:	f010 fbea 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATE_INVALID;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	f646 622a 	movw	r2, #28202	; 0x6e2a
    761e:	801a      	strh	r2, [r3, #0]
             return;
    7620:	e025      	b.n	766e <OSTaskChangePrio+0x216>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
    7622:	f010 fbdf 	bl	17de4 <CPU_SR_Save>
    7626:	6138      	str	r0, [r7, #16]
    7628:	f7fa f946 	bl	18b8 <CPU_IntDisMeasStart>
    762c:	f643 5350 	movw	r3, #15696	; 0x3d50
    7630:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	f103 33ff 	add.w	r3, r3, #4294967295
    763a:	b2da      	uxtb	r2, r3
    763c:	f643 5350 	movw	r3, #15696	; 0x3d50
    7640:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7644:	701a      	strb	r2, [r3, #0]
    7646:	f643 5350 	movw	r3, #15696	; 0x3d50
    764a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    764e:	781b      	ldrb	r3, [r3, #0]
    7650:	2b00      	cmp	r3, #0
    7652:	d101      	bne.n	7658 <OSTaskChangePrio+0x200>
    7654:	f008 f8e0 	bl	f818 <OS_SchedLockTimeMeasStop>
    7658:	f7fa f95a 	bl	1910 <CPU_IntDisMeasStop>
    765c:	6938      	ldr	r0, [r7, #16]
    765e:	f010 fbc5 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Run highest priority task ready                        */
    7662:	f006 ffdd 	bl	e620 <OSSched>

    *p_err = OS_ERR_NONE;
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	f04f 0200 	mov.w	r2, #0
    766c:	801a      	strh	r2, [r3, #0]
}
    766e:	f107 0718 	add.w	r7, r7, #24
    7672:	46bd      	mov	sp, r7
    7674:	bd80      	pop	{r7, pc}
    7676:	bf00      	nop

00007678 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
    7678:	b580      	push	{r7, lr}
    767a:	b08c      	sub	sp, #48	; 0x30
    767c:	af02      	add	r7, sp, #8
    767e:	60f8      	str	r0, [r7, #12]
    7680:	60b9      	str	r1, [r7, #8]
    7682:	607a      	str	r2, [r7, #4]
    7684:	603b      	str	r3, [r7, #0]
#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OS_OBJ_QTY     reg_nbr;
#endif
    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
    7686:	f04f 0300 	mov.w	r3, #0
    768a:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
    768c:	f244 1381 	movw	r3, #16769	; 0x4181
    7690:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7694:	781b      	ldrb	r3, [r3, #0]
    7696:	2b00      	cmp	r3, #0
    7698:	d004      	beq.n	76a4 <OSTaskCreate+0x2c>
        *p_err = OS_ERR_TASK_CREATE_ISR;
    769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    769c:	f247 124a 	movw	r2, #29002	; 0x714a
    76a0:	801a      	strh	r2, [r3, #0]
        return;
    76a2:	e194      	b.n	79ce <OSTaskCreate+0x356>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
    76a4:	68fb      	ldr	r3, [r7, #12]
    76a6:	2b00      	cmp	r3, #0
    76a8:	d104      	bne.n	76b4 <OSTaskCreate+0x3c>
        *p_err = OS_ERR_TCB_INVALID;
    76aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    76ac:	f247 12ad 	movw	r2, #29101	; 0x71ad
    76b0:	801a      	strh	r2, [r3, #0]
        return;
    76b2:	e18c      	b.n	79ce <OSTaskCreate+0x356>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	2b00      	cmp	r3, #0
    76b8:	d104      	bne.n	76c4 <OSTaskCreate+0x4c>
        *p_err = OS_ERR_TASK_INVALID;
    76ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    76bc:	f247 124f 	movw	r2, #29007	; 0x714f
    76c0:	801a      	strh	r2, [r3, #0]
        return;
    76c2:	e184      	b.n	79ce <OSTaskCreate+0x356>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
    76c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    76c6:	2b00      	cmp	r3, #0
    76c8:	d104      	bne.n	76d4 <OSTaskCreate+0x5c>
        *p_err = OS_ERR_STK_INVALID;
    76ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    76cc:	f646 622c 	movw	r2, #28204	; 0x6e2c
    76d0:	801a      	strh	r2, [r3, #0]
        return;
    76d2:	e17c      	b.n	79ce <OSTaskCreate+0x356>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
    76d4:	f64c 1348 	movw	r3, #51528	; 0xc948
    76d8:	f2c0 0302 	movt	r3, #2
    76dc:	681b      	ldr	r3, [r3, #0]
    76de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    76e0:	429a      	cmp	r2, r3
    76e2:	d204      	bcs.n	76ee <OSTaskCreate+0x76>
        *p_err = OS_ERR_STK_SIZE_INVALID;
    76e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    76e6:	f646 622d 	movw	r2, #28205	; 0x6e2d
    76ea:	801a      	strh	r2, [r3, #0]
        return;
    76ec:	e16f      	b.n	79ce <OSTaskCreate+0x356>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
    76ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
    76f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    76f2:	429a      	cmp	r2, r3
    76f4:	d304      	bcc.n	7700 <OSTaskCreate+0x88>
        *p_err = OS_ERR_STK_LIMIT_INVALID;
    76f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    76f8:	f646 622e 	movw	r2, #28206	; 0x6e2e
    76fc:	801a      	strh	r2, [r3, #0]
        return;
    76fe:	e166      	b.n	79ce <OSTaskCreate+0x356>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
    7700:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    7704:	2b3f      	cmp	r3, #63	; 0x3f
    7706:	d904      	bls.n	7712 <OSTaskCreate+0x9a>
        *p_err = OS_ERR_PRIO_INVALID;
    7708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    770a:	f246 2273 	movw	r2, #25203	; 0x6273
    770e:	801a      	strh	r2, [r3, #0]
        return;
    7710:	e15d      	b.n	79ce <OSTaskCreate+0x356>
    }
#endif

    CPU_CRITICAL_ENTER();
    7712:	f010 fb67 	bl	17de4 <CPU_SR_Save>
    7716:	61b8      	str	r0, [r7, #24]
    7718:	f7fa f8ce 	bl	18b8 <CPU_IntDisMeasStart>

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (prio == (OS_PRIO)0) {
    771c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    7720:	2b00      	cmp	r3, #0
    7722:	d110      	bne.n	7746 <OSTaskCreate+0xce>
        if (p_tcb != &OSIntQTaskTCB) {
    7724:	68fa      	ldr	r2, [r7, #12]
    7726:	f244 3340 	movw	r3, #17216	; 0x4340
    772a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    772e:	429a      	cmp	r2, r3
    7730:	d009      	beq.n	7746 <OSTaskCreate+0xce>
            CPU_CRITICAL_EXIT();                            /* Not allowed to use priority 0                          */
    7732:	f7fa f8ed 	bl	1910 <CPU_IntDisMeasStop>
    7736:	69b8      	ldr	r0, [r7, #24]
    7738:	f010 fb58 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_PRIO_INVALID;
    773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    773e:	f246 2273 	movw	r2, #25203	; 0x6273
    7742:	801a      	strh	r2, [r3, #0]
            return;
    7744:	e143      	b.n	79ce <OSTaskCreate+0x356>
        }
    }
#endif

    if (OSRdyList[OS_CFG_PRIO_MAX - 1u].NbrEntries > 0u) {  /* -- ONLY ONE TASK ALLOWED AT THE IDLE TASK PRIORITY --- */
    7746:	f643 5364 	movw	r3, #15716	; 0x3d64
    774a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    774e:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
    7752:	2b00      	cmp	r3, #0
    7754:	d00d      	beq.n	7772 <OSTaskCreate+0xfa>
        if (prio == (OS_CFG_PRIO_MAX - 1u)) {
    7756:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    775a:	2b3f      	cmp	r3, #63	; 0x3f
    775c:	d109      	bne.n	7772 <OSTaskCreate+0xfa>
            CPU_CRITICAL_EXIT();
    775e:	f7fa f8d7 	bl	1910 <CPU_IntDisMeasStop>
    7762:	69b8      	ldr	r0, [r7, #24]
    7764:	f010 fb42 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_PRIO_INVALID;
    7768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    776a:	f246 2273 	movw	r2, #25203	; 0x6273
    776e:	801a      	strh	r2, [r3, #0]
            return;
    7770:	e12d      	b.n	79ce <OSTaskCreate+0x356>
        }
    }
    CPU_CRITICAL_EXIT();
    7772:	f7fa f8cd 	bl	1910 <CPU_IntDisMeasStop>
    7776:	69b8      	ldr	r0, [r7, #24]
    7778:	f010 fb38 	bl	17dec <CPU_SR_Restore>

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
    777c:	68f8      	ldr	r0, [r7, #12]
    777e:	f001 fb8f 	bl	8ea0 <OS_TaskInitTCB>

    *p_err = OS_ERR_NONE;
    7782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7784:	f04f 0200 	mov.w	r2, #0
    7788:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
    778a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    778e:	f003 0301 	and.w	r3, r3, #1
    7792:	b2db      	uxtb	r3, r3
    7794:	2b00      	cmp	r3, #0
    7796:	d01b      	beq.n	77d0 <OSTaskCreate+0x158>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
    7798:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    779c:	f003 0302 	and.w	r3, r3, #2
    77a0:	2b00      	cmp	r3, #0
    77a2:	d015      	beq.n	77d0 <OSTaskCreate+0x158>
            p_sp = p_stk_base;
    77a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    77a6:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
    77a8:	f04f 0300 	mov.w	r3, #0
    77ac:	627b      	str	r3, [r7, #36]	; 0x24
    77ae:	e00b      	b.n	77c8 <OSTaskCreate+0x150>
                *p_sp = (CPU_STK)0;                         /* Clear from bottom of stack and up!                     */
    77b0:	69fb      	ldr	r3, [r7, #28]
    77b2:	f04f 0200 	mov.w	r2, #0
    77b6:	601a      	str	r2, [r3, #0]
                p_sp++;
    77b8:	69fb      	ldr	r3, [r7, #28]
    77ba:	f103 0304 	add.w	r3, r3, #4
    77be:	61fb      	str	r3, [r7, #28]
    *p_err = OS_ERR_NONE;
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
            p_sp = p_stk_base;
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
    77c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    77c2:	f103 0301 	add.w	r3, r3, #1
    77c6:	627b      	str	r3, [r7, #36]	; 0x24
    77c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    77ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    77cc:	429a      	cmp	r2, r3
    77ce:	d3ef      	bcc.n	77b0 <OSTaskCreate+0x138>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
    77d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    77d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    77d8:	18d3      	adds	r3, r2, r3
    77da:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
    77dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    77de:	9300      	str	r3, [sp, #0]
    77e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    77e4:	9301      	str	r3, [sp, #4]
    77e6:	6878      	ldr	r0, [r7, #4]
    77e8:	6839      	ldr	r1, [r7, #0]
    77ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    77ec:	697b      	ldr	r3, [r7, #20]
    77ee:	f7f9 f84f 	bl	890 <OSTaskStkInit>
    77f2:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
    77f4:	68fb      	ldr	r3, [r7, #12]
    77f6:	687a      	ldr	r2, [r7, #4]
    77f8:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
    77fa:	68fb      	ldr	r3, [r7, #12]
    77fc:	683a      	ldr	r2, [r7, #0]
    77fe:	62da      	str	r2, [r3, #44]	; 0x2c

    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
    7800:	68fb      	ldr	r3, [r7, #12]
    7802:	68ba      	ldr	r2, [r7, #8]
    7804:	621a      	str	r2, [r3, #32]

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
    7806:	68fb      	ldr	r3, [r7, #12]
    7808:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    780c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
    7810:	68fb      	ldr	r3, [r7, #12]
    7812:	69fa      	ldr	r2, [r7, #28]
    7814:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
    7816:	68fb      	ldr	r3, [r7, #12]
    7818:	697a      	ldr	r2, [r7, #20]
    781a:	609a      	str	r2, [r3, #8]

    p_tcb->TimeQuanta    = time_quanta;                     /* Save the #ticks for time slice (0 means not sliced)    */
    781c:	68fb      	ldr	r3, [r7, #12]
    781e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7820:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    if (time_quanta == (OS_TICK)0) {
    7824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7826:	2b00      	cmp	r3, #0
    7828:	d108      	bne.n	783c <OSTaskCreate+0x1c4>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
    782a:	f244 4318 	movw	r3, #17432	; 0x4418
    782e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7832:	681a      	ldr	r2, [r3, #0]
    7834:	68fb      	ldr	r3, [r7, #12]
    7836:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    783a:	e003      	b.n	7844 <OSTaskCreate+0x1cc>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7840:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
#endif
    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
    7844:	68fb      	ldr	r3, [r7, #12]
    7846:	6cba      	ldr	r2, [r7, #72]	; 0x48
    7848:	605a      	str	r2, [r3, #4]
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
    784a:	68fb      	ldr	r3, [r7, #12]
    784c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    784e:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
    7850:	68fb      	ldr	r3, [r7, #12]
    7852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7854:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->Opt           = opt;                             /* Save task options                                      */
    7856:	68fb      	ldr	r3, [r7, #12]
    7858:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
    785c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
    7860:	f04f 0300 	mov.w	r3, #0
    7864:	847b      	strh	r3, [r7, #34]	; 0x22
    7866:	e00b      	b.n	7880 <OSTaskCreate+0x208>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    7868:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    786a:	68fb      	ldr	r3, [r7, #12]
    786c:	f102 021a 	add.w	r2, r2, #26
    7870:	f04f 0100 	mov.w	r1, #0
    7874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
    p_tcb->Opt           = opt;                             /* Save task options                                      */

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
    7878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    787a:	f103 0301 	add.w	r3, r3, #1
    787e:	847b      	strh	r3, [r7, #34]	; 0x22
    7880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    7882:	2b00      	cmp	r3, #0
    7884:	d0f0      	beq.n	7868 <OSTaskCreate+0x1f0>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
    7886:	68fb      	ldr	r3, [r7, #12]
    7888:	f103 0244 	add.w	r2, r3, #68	; 0x44
    788c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    7890:	4610      	mov	r0, r2
    7892:	4619      	mov	r1, r3
    7894:	f008 fdd8 	bl	10448 <OS_MsgQInit>
                q_size);
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
    7898:	68f8      	ldr	r0, [r7, #12]
    789a:	f7f8 ffb7 	bl	80c <OSTaskCreateHook>

                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
    789e:	f010 faa1 	bl	17de4 <CPU_SR_Save>
    78a2:	61b8      	str	r0, [r7, #24]
    78a4:	f7fa f808 	bl	18b8 <CPU_IntDisMeasStart>
    78a8:	f643 5350 	movw	r3, #15696	; 0x3d50
    78ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    78b0:	781b      	ldrb	r3, [r3, #0]
    78b2:	f103 0301 	add.w	r3, r3, #1
    78b6:	b2da      	uxtb	r2, r3
    78b8:	f643 5350 	movw	r3, #15696	; 0x3d50
    78bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    78c0:	701a      	strb	r2, [r3, #0]
    78c2:	f643 5350 	movw	r3, #15696	; 0x3d50
    78c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	2b01      	cmp	r3, #1
    78ce:	d101      	bne.n	78d4 <OSTaskCreate+0x25c>
    78d0:	f007 ff90 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    78d4:	f7fa f81c 	bl	1910 <CPU_IntDisMeasStop>
    78d8:	69b8      	ldr	r0, [r7, #24]
    78da:	f010 fa87 	bl	17dec <CPU_SR_Restore>
    OS_PrioInsert(p_tcb->Prio);
    78de:	68fb      	ldr	r3, [r7, #12]
    78e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    78e4:	4618      	mov	r0, r3
    78e6:	f7fe fc59 	bl	619c <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
    78ea:	68f8      	ldr	r0, [r7, #12]
    78ec:	f007 fe50 	bl	f590 <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
    78f0:	68f8      	ldr	r0, [r7, #12]
    78f2:	f001 fa39 	bl	8d68 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
    78f6:	f244 1382 	movw	r3, #16770	; 0x4182
    78fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    78fe:	881b      	ldrh	r3, [r3, #0]
    7900:	f103 0301 	add.w	r3, r3, #1
    7904:	b29a      	uxth	r2, r3
    7906:	f244 1382 	movw	r3, #16770	; 0x4182
    790a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    790e:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
    7910:	f643 5360 	movw	r3, #15712	; 0x3d60
    7914:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7918:	781b      	ldrb	r3, [r3, #0]
    791a:	2b01      	cmp	r3, #1
    791c:	d035      	beq.n	798a <OSTaskCreate+0x312>
        OS_CRITICAL_EXIT();
    791e:	f010 fa61 	bl	17de4 <CPU_SR_Save>
    7922:	61b8      	str	r0, [r7, #24]
    7924:	f7f9 ffc8 	bl	18b8 <CPU_IntDisMeasStart>
    7928:	f643 5350 	movw	r3, #15696	; 0x3d50
    792c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	f103 33ff 	add.w	r3, r3, #4294967295
    7936:	b2da      	uxtb	r2, r3
    7938:	f643 5350 	movw	r3, #15696	; 0x3d50
    793c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7940:	701a      	strb	r2, [r3, #0]
    7942:	f643 5350 	movw	r3, #15696	; 0x3d50
    7946:	f2c1 0300 	movt	r3, #4096	; 0x1000
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	2b00      	cmp	r3, #0
    794e:	d116      	bne.n	797e <OSTaskCreate+0x306>
    7950:	f007 ff62 	bl	f818 <OS_SchedLockTimeMeasStop>
    7954:	f244 533c 	movw	r3, #17724	; 0x453c
    7958:	f2c1 0300 	movt	r3, #4096	; 0x1000
    795c:	881b      	ldrh	r3, [r3, #0]
    795e:	2b00      	cmp	r3, #0
    7960:	d007      	beq.n	7972 <OSTaskCreate+0x2fa>
    7962:	f7f9 ffd5 	bl	1910 <CPU_IntDisMeasStop>
    7966:	69b8      	ldr	r0, [r7, #24]
    7968:	f010 fa40 	bl	17dec <CPU_SR_Restore>
    796c:	f007 ff08 	bl	f780 <OS_Sched0>
        return;
    7970:	e02d      	b.n	79ce <OSTaskCreate+0x356>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
        OS_CRITICAL_EXIT();
    7972:	f7f9 ffcd 	bl	1910 <CPU_IntDisMeasStop>
    7976:	69b8      	ldr	r0, [r7, #24]
    7978:	f010 fa38 	bl	17dec <CPU_SR_Restore>
        return;
    797c:	e027      	b.n	79ce <OSTaskCreate+0x356>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
        OS_CRITICAL_EXIT();
    797e:	f7f9 ffc7 	bl	1910 <CPU_IntDisMeasStop>
    7982:	69b8      	ldr	r0, [r7, #24]
    7984:	f010 fa32 	bl	17dec <CPU_SR_Restore>
        return;
    7988:	e021      	b.n	79ce <OSTaskCreate+0x356>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
    798a:	f010 fa2b 	bl	17de4 <CPU_SR_Save>
    798e:	61b8      	str	r0, [r7, #24]
    7990:	f7f9 ff92 	bl	18b8 <CPU_IntDisMeasStart>
    7994:	f643 5350 	movw	r3, #15696	; 0x3d50
    7998:	f2c1 0300 	movt	r3, #4096	; 0x1000
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	f103 33ff 	add.w	r3, r3, #4294967295
    79a2:	b2da      	uxtb	r2, r3
    79a4:	f643 5350 	movw	r3, #15696	; 0x3d50
    79a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    79ac:	701a      	strb	r2, [r3, #0]
    79ae:	f643 5350 	movw	r3, #15696	; 0x3d50
    79b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	2b00      	cmp	r3, #0
    79ba:	d101      	bne.n	79c0 <OSTaskCreate+0x348>
    79bc:	f007 ff2c 	bl	f818 <OS_SchedLockTimeMeasStop>
    79c0:	f7f9 ffa6 	bl	1910 <CPU_IntDisMeasStop>
    79c4:	69b8      	ldr	r0, [r7, #24]
    79c6:	f010 fa11 	bl	17dec <CPU_SR_Restore>

    OSSched();
    79ca:	f006 fe29 	bl	e620 <OSSched>
}
    79ce:	f107 0728 	add.w	r7, r7, #40	; 0x28
    79d2:	46bd      	mov	sp, r7
    79d4:	bd80      	pop	{r7, pc}
    79d6:	bf00      	nop

000079d8 <OSTaskDel>:
*/

#if OS_CFG_TASK_DEL_EN > 0u
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
    79d8:	b580      	push	{r7, lr}
    79da:	b084      	sub	sp, #16
    79dc:	af00      	add	r7, sp, #0
    79de:	6078      	str	r0, [r7, #4]
    79e0:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    79e2:	f04f 0300 	mov.w	r3, #0
    79e6:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to delete from ISR                       */
    79e8:	f244 1381 	movw	r3, #16769	; 0x4181
    79ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    79f0:	781b      	ldrb	r3, [r3, #0]
    79f2:	2b00      	cmp	r3, #0
    79f4:	d004      	beq.n	7a00 <OSTaskDel+0x28>
        *p_err = OS_ERR_TASK_DEL_ISR;
    79f6:	683b      	ldr	r3, [r7, #0]
    79f8:	f247 124e 	movw	r2, #29006	; 0x714e
    79fc:	801a      	strh	r2, [r3, #0]
        return;
    79fe:	e109      	b.n	7c14 <OSTaskDel+0x23c>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Not allowed to delete the idle task                    */
    7a00:	687a      	ldr	r2, [r7, #4]
    7a02:	f244 2368 	movw	r3, #17000	; 0x4268
    7a06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a0a:	429a      	cmp	r2, r3
    7a0c:	d104      	bne.n	7a18 <OSTaskDel+0x40>
        *p_err = OS_ERR_TASK_DEL_IDLE;
    7a0e:	683b      	ldr	r3, [r7, #0]
    7a10:	f247 124c 	movw	r2, #29004	; 0x714c
    7a14:	801a      	strh	r2, [r3, #0]
        return;
    7a16:	e0fd      	b.n	7c14 <OSTaskDel+0x23c>
    }

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (p_tcb == &OSIntQTaskTCB) {                          /* Cannot delete the ISR handler task                     */
    7a18:	687a      	ldr	r2, [r7, #4]
    7a1a:	f244 3340 	movw	r3, #17216	; 0x4340
    7a1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a22:	429a      	cmp	r2, r3
    7a24:	d104      	bne.n	7a30 <OSTaskDel+0x58>
        *p_err = OS_ERR_TASK_DEL_INVALID;
    7a26:	683b      	ldr	r3, [r7, #0]
    7a28:	f247 124d 	movw	r2, #29005	; 0x714d
    7a2c:	801a      	strh	r2, [r3, #0]
        return;
    7a2e:	e0f1      	b.n	7c14 <OSTaskDel+0x23c>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                             /* Delete 'Self'?                                         */
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	2b00      	cmp	r3, #0
    7a34:	d10f      	bne.n	7a56 <OSTaskDel+0x7e>
        CPU_CRITICAL_ENTER();
    7a36:	f010 f9d5 	bl	17de4 <CPU_SR_Save>
    7a3a:	60f8      	str	r0, [r7, #12]
    7a3c:	f7f9 ff3c 	bl	18b8 <CPU_IntDisMeasStart>
        p_tcb  = OSTCBCurPtr;                               /* Yes.                                                   */
    7a40:	f244 135c 	movw	r3, #16732	; 0x415c
    7a44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a48:	681b      	ldr	r3, [r3, #0]
    7a4a:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
    7a4c:	f7f9 ff60 	bl	1910 <CPU_IntDisMeasStop>
    7a50:	68f8      	ldr	r0, [r7, #12]
    7a52:	f010 f9cb 	bl	17dec <CPU_SR_Restore>
    }

    OS_CRITICAL_ENTER();
    7a56:	f010 f9c5 	bl	17de4 <CPU_SR_Save>
    7a5a:	60f8      	str	r0, [r7, #12]
    7a5c:	f7f9 ff2c 	bl	18b8 <CPU_IntDisMeasStart>
    7a60:	f643 5350 	movw	r3, #15696	; 0x3d50
    7a64:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	f103 0301 	add.w	r3, r3, #1
    7a6e:	b2da      	uxtb	r2, r3
    7a70:	f643 5350 	movw	r3, #15696	; 0x3d50
    7a74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a78:	701a      	strb	r2, [r3, #0]
    7a7a:	f643 5350 	movw	r3, #15696	; 0x3d50
    7a7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	2b01      	cmp	r3, #1
    7a86:	d101      	bne.n	7a8c <OSTaskDel+0xb4>
    7a88:	f007 feb4 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    7a8c:	f7f9 ff40 	bl	1910 <CPU_IntDisMeasStop>
    7a90:	68f8      	ldr	r0, [r7, #12]
    7a92:	f010 f9ab 	bl	17dec <CPU_SR_Restore>
    switch (p_tcb->TaskState) {
    7a96:	687b      	ldr	r3, [r7, #4]
    7a98:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    7a9c:	2b07      	cmp	r3, #7
    7a9e:	d837      	bhi.n	7b10 <OSTaskDel+0x138>
    7aa0:	a201      	add	r2, pc, #4	; (adr r2, 7aa8 <OSTaskDel+0xd0>)
    7aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7aa6:	bf00      	nop
    7aa8:	00007ac9 	.word	0x00007ac9
    7aac:	00007ad1 	.word	0x00007ad1
    7ab0:	00007ad9 	.word	0x00007ad9
    7ab4:	00007ad9 	.word	0x00007ad9
    7ab8:	00007b85 	.word	0x00007b85
    7abc:	00007ad1 	.word	0x00007ad1
    7ac0:	00007ad9 	.word	0x00007ad9
    7ac4:	00007ad9 	.word	0x00007ad9
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
    7ac8:	6878      	ldr	r0, [r7, #4]
    7aca:	f007 fdf5 	bl	f6b8 <OS_RdyListRemove>
             break;
    7ace:	e05a      	b.n	7b86 <OSTaskDel+0x1ae>
        case OS_TASK_STATE_SUSPENDED:
             break;

        case OS_TASK_STATE_DLY:                             /* Task is only delayed, not on any wait list             */
        case OS_TASK_STATE_DLY_SUSPENDED:
             OS_TickListRemove(p_tcb);
    7ad0:	6878      	ldr	r0, [r7, #4]
    7ad2:	f008 f96f 	bl	fdb4 <OS_TickListRemove>
             break;
    7ad6:	e056      	b.n	7b86 <OSTaskDel+0x1ae>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             OS_TickListRemove(p_tcb);
    7ad8:	6878      	ldr	r0, [r7, #4]
    7ada:	f008 f96b 	bl	fdb4 <OS_TickListRemove>
             switch (p_tcb->PendOn) {                       /* See what we are pending on                             */
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    7ae4:	2b07      	cmp	r3, #7
    7ae6:	d80f      	bhi.n	7b08 <OSTaskDel+0x130>
    7ae8:	f04f 4221 	mov.w	r2, #2701131776	; 0xa1000000
    7aec:	fa02 f203 	lsl.w	r2, r2, r3
    7af0:	2a00      	cmp	r2, #0
    7af2:	db0b      	blt.n	7b0c <OSTaskDel+0x134>
    7af4:	f04f 42bc 	mov.w	r2, #1577058304	; 0x5e000000
    7af8:	fa02 f303 	lsl.w	r3, r2, r3
    7afc:	2b00      	cmp	r3, #0
    7afe:	da03      	bge.n	7b08 <OSTaskDel+0x130>
                 case OS_TASK_PEND_ON_FLAG:                 /* Remove from wait list                                  */
                 case OS_TASK_PEND_ON_MULTI:
                 case OS_TASK_PEND_ON_MUTEX:
                 case OS_TASK_PEND_ON_Q:
                 case OS_TASK_PEND_ON_SEM:
                      OS_PendListRemove(p_tcb);
    7b00:	6878      	ldr	r0, [r7, #4]
    7b02:	f007 fac7 	bl	f094 <OS_PendListRemove>
                      break;
    7b06:	e002      	b.n	7b0e <OSTaskDel+0x136>

                 default:
                      break;
    7b08:	bf00      	nop
    7b0a:	e000      	b.n	7b0e <OSTaskDel+0x136>
             OS_TickListRemove(p_tcb);
             switch (p_tcb->PendOn) {                       /* See what we are pending on                             */
                 case OS_TASK_PEND_ON_NOTHING:
                 case OS_TASK_PEND_ON_TASK_Q:               /* There is no wait list for these two                    */
                 case OS_TASK_PEND_ON_TASK_SEM:
                      break;
    7b0c:	bf00      	nop
                      break;

                 default:
                      break;
             }
             break;
    7b0e:	e03a      	b.n	7b86 <OSTaskDel+0x1ae>

        default:
            OS_CRITICAL_EXIT();
    7b10:	f010 f968 	bl	17de4 <CPU_SR_Save>
    7b14:	60f8      	str	r0, [r7, #12]
    7b16:	f7f9 fecf 	bl	18b8 <CPU_IntDisMeasStart>
    7b1a:	f643 5350 	movw	r3, #15696	; 0x3d50
    7b1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b22:	781b      	ldrb	r3, [r3, #0]
    7b24:	f103 33ff 	add.w	r3, r3, #4294967295
    7b28:	b2da      	uxtb	r2, r3
    7b2a:	f643 5350 	movw	r3, #15696	; 0x3d50
    7b2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b32:	701a      	strb	r2, [r3, #0]
    7b34:	f643 5350 	movw	r3, #15696	; 0x3d50
    7b38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	2b00      	cmp	r3, #0
    7b40:	d116      	bne.n	7b70 <OSTaskDel+0x198>
    7b42:	f007 fe69 	bl	f818 <OS_SchedLockTimeMeasStop>
    7b46:	f244 533c 	movw	r3, #17724	; 0x453c
    7b4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b4e:	881b      	ldrh	r3, [r3, #0]
    7b50:	2b00      	cmp	r3, #0
    7b52:	d007      	beq.n	7b64 <OSTaskDel+0x18c>
    7b54:	f7f9 fedc 	bl	1910 <CPU_IntDisMeasStop>
    7b58:	68f8      	ldr	r0, [r7, #12]
    7b5a:	f010 f947 	bl	17dec <CPU_SR_Restore>
    7b5e:	f007 fe0f 	bl	f780 <OS_Sched0>
    7b62:	e00a      	b.n	7b7a <OSTaskDel+0x1a2>
    7b64:	f7f9 fed4 	bl	1910 <CPU_IntDisMeasStop>
    7b68:	68f8      	ldr	r0, [r7, #12]
    7b6a:	f010 f93f 	bl	17dec <CPU_SR_Restore>
    7b6e:	e004      	b.n	7b7a <OSTaskDel+0x1a2>
    7b70:	f7f9 fece 	bl	1910 <CPU_IntDisMeasStop>
    7b74:	68f8      	ldr	r0, [r7, #12]
    7b76:	f010 f939 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
    7b7a:	683b      	ldr	r3, [r7, #0]
    7b7c:	f646 622a 	movw	r2, #28202	; 0x6e2a
    7b80:	801a      	strh	r2, [r3, #0]
            return;
    7b82:	e047      	b.n	7c14 <OSTaskDel+0x23c>
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
             break;

        case OS_TASK_STATE_SUSPENDED:
             break;
    7b84:	bf00      	nop
            *p_err = OS_ERR_STATE_INVALID;
            return;
    }

#if OS_CFG_TASK_Q_EN > 0u
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                     /* Free task's message queue messages                     */
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	f103 0344 	add.w	r3, r3, #68	; 0x44
    7b8c:	4618      	mov	r0, r3
    7b8e:	f008 fc0b 	bl	103a8 <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                   /* Call user defined hook                                 */
    7b92:	6878      	ldr	r0, [r7, #4]
    7b94:	f7f8 fe50 	bl	838 <OSTaskDelHook>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListRemove(p_tcb);
    7b98:	6878      	ldr	r0, [r7, #4]
    7b9a:	f001 f917 	bl	8dcc <OS_TaskDbgListRemove>
#endif
    OSTaskQty--;                                            /* One less task being managed                            */
    7b9e:	f244 1382 	movw	r3, #16770	; 0x4182
    7ba2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ba6:	881b      	ldrh	r3, [r3, #0]
    7ba8:	f103 33ff 	add.w	r3, r3, #4294967295
    7bac:	b29a      	uxth	r2, r3
    7bae:	f244 1382 	movw	r3, #16770	; 0x4182
    7bb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7bb6:	801a      	strh	r2, [r3, #0]

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
    7bb8:	6878      	ldr	r0, [r7, #4]
    7bba:	f001 f971 	bl	8ea0 <OS_TaskInitTCB>
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;         /* Indicate that the task was deleted                     */
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    7bc4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

    OS_CRITICAL_EXIT_NO_SCHED();
    7bc8:	f010 f90c 	bl	17de4 <CPU_SR_Save>
    7bcc:	60f8      	str	r0, [r7, #12]
    7bce:	f7f9 fe73 	bl	18b8 <CPU_IntDisMeasStart>
    7bd2:	f643 5350 	movw	r3, #15696	; 0x3d50
    7bd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7bda:	781b      	ldrb	r3, [r3, #0]
    7bdc:	f103 33ff 	add.w	r3, r3, #4294967295
    7be0:	b2da      	uxtb	r2, r3
    7be2:	f643 5350 	movw	r3, #15696	; 0x3d50
    7be6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7bea:	701a      	strb	r2, [r3, #0]
    7bec:	f643 5350 	movw	r3, #15696	; 0x3d50
    7bf0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7bf4:	781b      	ldrb	r3, [r3, #0]
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d101      	bne.n	7bfe <OSTaskDel+0x226>
    7bfa:	f007 fe0d 	bl	f818 <OS_SchedLockTimeMeasStop>
    7bfe:	f7f9 fe87 	bl	1910 <CPU_IntDisMeasStop>
    7c02:	68f8      	ldr	r0, [r7, #12]
    7c04:	f010 f8f2 	bl	17dec <CPU_SR_Restore>
    OSSched();                                              /* Find new highest priority task                         */
    7c08:	f006 fd0a 	bl	e620 <OSSched>

    *p_err = OS_ERR_NONE;
    7c0c:	683b      	ldr	r3, [r7, #0]
    7c0e:	f04f 0200 	mov.w	r2, #0
    7c12:	801a      	strh	r2, [r3, #0]
}
    7c14:	f107 0710 	add.w	r7, r7, #16
    7c18:	46bd      	mov	sp, r7
    7c1a:	bd80      	pop	{r7, pc}

00007c1c <OSTaskQFlush>:
*/

#if OS_CFG_TASK_Q_EN > 0u
OS_MSG_QTY  OSTaskQFlush (OS_TCB  *p_tcb,
                          OS_ERR  *p_err)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b084      	sub	sp, #16
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
    7c24:	6039      	str	r1, [r7, #0]
    OS_MSG_QTY  entries;
    CPU_SR_ALLOC();
    7c26:	f04f 0300 	mov.w	r3, #0
    7c2a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't flush a message queue from an ISR                */
    7c2c:	f244 1381 	movw	r3, #16769	; 0x4181
    7c30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	2b00      	cmp	r3, #0
    7c38:	d006      	beq.n	7c48 <OSTaskQFlush+0x2c>
        *p_err = OS_ERR_FLUSH_ISR;
    7c3a:	683b      	ldr	r3, [r7, #0]
    7c3c:	f44f 526c 	mov.w	r2, #15104	; 0x3b00
    7c40:	801a      	strh	r2, [r3, #0]
        return ((OS_MSG_QTY)0);
    7c42:	f04f 0300 	mov.w	r3, #0
    7c46:	e074      	b.n	7d32 <OSTaskQFlush+0x116>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                             /* Flush message queue of calling task?                   */
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	2b00      	cmp	r3, #0
    7c4c:	d10f      	bne.n	7c6e <OSTaskQFlush+0x52>
        CPU_CRITICAL_ENTER();
    7c4e:	f010 f8c9 	bl	17de4 <CPU_SR_Save>
    7c52:	60f8      	str	r0, [r7, #12]
    7c54:	f7f9 fe30 	bl	18b8 <CPU_IntDisMeasStart>
        p_tcb = OSTCBCurPtr;
    7c58:	f244 135c 	movw	r3, #16732	; 0x415c
    7c5c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c60:	681b      	ldr	r3, [r3, #0]
    7c62:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
    7c64:	f7f9 fe54 	bl	1910 <CPU_IntDisMeasStop>
    7c68:	68f8      	ldr	r0, [r7, #12]
    7c6a:	f010 f8bf 	bl	17dec <CPU_SR_Restore>
    }

    OS_CRITICAL_ENTER();
    7c6e:	f010 f8b9 	bl	17de4 <CPU_SR_Save>
    7c72:	60f8      	str	r0, [r7, #12]
    7c74:	f7f9 fe20 	bl	18b8 <CPU_IntDisMeasStart>
    7c78:	f643 5350 	movw	r3, #15696	; 0x3d50
    7c7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c80:	781b      	ldrb	r3, [r3, #0]
    7c82:	f103 0301 	add.w	r3, r3, #1
    7c86:	b2da      	uxtb	r2, r3
    7c88:	f643 5350 	movw	r3, #15696	; 0x3d50
    7c8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c90:	701a      	strb	r2, [r3, #0]
    7c92:	f643 5350 	movw	r3, #15696	; 0x3d50
    7c96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c9a:	781b      	ldrb	r3, [r3, #0]
    7c9c:	2b01      	cmp	r3, #1
    7c9e:	d101      	bne.n	7ca4 <OSTaskQFlush+0x88>
    7ca0:	f007 fda8 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    7ca4:	f7f9 fe34 	bl	1910 <CPU_IntDisMeasStop>
    7ca8:	68f8      	ldr	r0, [r7, #12]
    7caa:	f010 f89f 	bl	17dec <CPU_SR_Restore>
    entries = OS_MsgQFreeAll(&p_tcb->MsgQ);                 /* Return all OS_MSGs to the OS_MSG pool                  */
    7cae:	687b      	ldr	r3, [r7, #4]
    7cb0:	f103 0344 	add.w	r3, r3, #68	; 0x44
    7cb4:	4618      	mov	r0, r3
    7cb6:	f008 fb77 	bl	103a8 <OS_MsgQFreeAll>
    7cba:	4603      	mov	r3, r0
    7cbc:	817b      	strh	r3, [r7, #10]
    OS_CRITICAL_EXIT();
    7cbe:	f010 f891 	bl	17de4 <CPU_SR_Save>
    7cc2:	60f8      	str	r0, [r7, #12]
    7cc4:	f7f9 fdf8 	bl	18b8 <CPU_IntDisMeasStart>
    7cc8:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ccc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7cd0:	781b      	ldrb	r3, [r3, #0]
    7cd2:	f103 33ff 	add.w	r3, r3, #4294967295
    7cd6:	b2da      	uxtb	r2, r3
    7cd8:	f643 5350 	movw	r3, #15696	; 0x3d50
    7cdc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ce0:	701a      	strb	r2, [r3, #0]
    7ce2:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ce6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7cea:	781b      	ldrb	r3, [r3, #0]
    7cec:	2b00      	cmp	r3, #0
    7cee:	d116      	bne.n	7d1e <OSTaskQFlush+0x102>
    7cf0:	f007 fd92 	bl	f818 <OS_SchedLockTimeMeasStop>
    7cf4:	f244 533c 	movw	r3, #17724	; 0x453c
    7cf8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7cfc:	881b      	ldrh	r3, [r3, #0]
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d007      	beq.n	7d12 <OSTaskQFlush+0xf6>
    7d02:	f7f9 fe05 	bl	1910 <CPU_IntDisMeasStop>
    7d06:	68f8      	ldr	r0, [r7, #12]
    7d08:	f010 f870 	bl	17dec <CPU_SR_Restore>
    7d0c:	f007 fd38 	bl	f780 <OS_Sched0>
    7d10:	e00a      	b.n	7d28 <OSTaskQFlush+0x10c>
    7d12:	f7f9 fdfd 	bl	1910 <CPU_IntDisMeasStop>
    7d16:	68f8      	ldr	r0, [r7, #12]
    7d18:	f010 f868 	bl	17dec <CPU_SR_Restore>
    7d1c:	e004      	b.n	7d28 <OSTaskQFlush+0x10c>
    7d1e:	f7f9 fdf7 	bl	1910 <CPU_IntDisMeasStop>
    7d22:	68f8      	ldr	r0, [r7, #12]
    7d24:	f010 f862 	bl	17dec <CPU_SR_Restore>
    *p_err  = OS_ERR_NONE;
    7d28:	683b      	ldr	r3, [r7, #0]
    7d2a:	f04f 0200 	mov.w	r2, #0
    7d2e:	801a      	strh	r2, [r3, #0]
    return (entries);
    7d30:	897b      	ldrh	r3, [r7, #10]
}
    7d32:	4618      	mov	r0, r3
    7d34:	f107 0710 	add.w	r7, r7, #16
    7d38:	46bd      	mov	sp, r7
    7d3a:	bd80      	pop	{r7, pc}

00007d3c <OSTaskQPend>:
void  *OSTaskQPend (OS_TICK        timeout,
                    OS_OPT         opt,
                    OS_MSG_SIZE   *p_msg_size,
                    CPU_TS        *p_ts,
                    OS_ERR        *p_err)
{
    7d3c:	b590      	push	{r4, r7, lr}
    7d3e:	b089      	sub	sp, #36	; 0x24
    7d40:	af00      	add	r7, sp, #0
    7d42:	60f8      	str	r0, [r7, #12]
    7d44:	607a      	str	r2, [r7, #4]
    7d46:	603b      	str	r3, [r7, #0]
    7d48:	460b      	mov	r3, r1
    7d4a:	817b      	strh	r3, [r7, #10]
    OS_MSG_Q     *p_msg_q;
    void         *p_void;
    CPU_SR_ALLOC();
    7d4c:	f04f 0300 	mov.w	r3, #0
    7d50:	61bb      	str	r3, [r7, #24]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't Pend from an ISR                                 */
    7d52:	f244 1381 	movw	r3, #16769	; 0x4181
    7d56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d006      	beq.n	7d6e <OSTaskQPend+0x32>
        *p_err = OS_ERR_PEND_ISR;
    7d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d62:	f246 12ae 	movw	r2, #25006	; 0x61ae
    7d66:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    7d68:	f04f 0300 	mov.w	r3, #0
    7d6c:	e15a      	b.n	8024 <__cs3_region_size_ram+0x24>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_msg_size == (OS_MSG_SIZE *)0) {                   /* User must supply a valid destination for msg size      */
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	2b00      	cmp	r3, #0
    7d72:	d106      	bne.n	7d82 <OSTaskQPend+0x46>
        *p_err = OS_ERR_PTR_INVALID;
    7d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d76:	f246 22d5 	movw	r2, #25301	; 0x62d5
    7d7a:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    7d7c:	f04f 0300 	mov.w	r3, #0
    7d80:	e150      	b.n	8024 <__cs3_region_size_ram+0x24>
    }
    switch (opt) {                                          /* User must supply a valid option                        */
    7d82:	897b      	ldrh	r3, [r7, #10]
    7d84:	2b00      	cmp	r3, #0
    7d86:	d009      	beq.n	7d9c <OSTaskQPend+0x60>
    7d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7d8c:	d006      	beq.n	7d9c <OSTaskQPend+0x60>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    7d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d90:	f645 6225 	movw	r2, #24101	; 0x5e25
    7d94:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
    7d96:	f04f 0300 	mov.w	r3, #0
    7d9a:	e143      	b.n	8024 <__cs3_region_size_ram+0x24>
        return ((void *)0);
    }
    switch (opt) {                                          /* User must supply a valid option                        */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
    7d9c:	bf00      	nop
             *p_err = OS_ERR_OPT_INVALID;
             return ((void *)0);
    }
#endif

    if (p_ts != (CPU_TS *)0) {
    7d9e:	683b      	ldr	r3, [r7, #0]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d003      	beq.n	7dac <OSTaskQPend+0x70>
        *p_ts = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
    7da4:	683b      	ldr	r3, [r7, #0]
    7da6:	f04f 0200 	mov.w	r2, #0
    7daa:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
    7dac:	f010 f81a 	bl	17de4 <CPU_SR_Save>
    7db0:	61b8      	str	r0, [r7, #24]
    7db2:	f7f9 fd81 	bl	18b8 <CPU_IntDisMeasStart>
    p_msg_q = &OSTCBCurPtr->MsgQ;                           /* Any message waiting in the message queue?              */
    7db6:	f244 135c 	movw	r3, #16732	; 0x415c
    7dba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7dbe:	681b      	ldr	r3, [r3, #0]
    7dc0:	f103 0344 	add.w	r3, r3, #68	; 0x44
    7dc4:	617b      	str	r3, [r7, #20]
    p_void  = OS_MsgQGet(p_msg_q,
    7dc6:	6978      	ldr	r0, [r7, #20]
    7dc8:	6879      	ldr	r1, [r7, #4]
    7dca:	683a      	ldr	r2, [r7, #0]
    7dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7dce:	f008 fb59 	bl	10484 <OS_MsgQGet>
    7dd2:	61f8      	str	r0, [r7, #28]
                         p_msg_size,
                         p_ts,
                         p_err);
    if (*p_err == OS_ERR_NONE) {
    7dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7dd6:	881b      	ldrh	r3, [r3, #0]
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d12f      	bne.n	7e3c <OSTaskQPend+0x100>
#if OS_CFG_TASK_PROFILE_EN > 0u
        if (p_ts != (CPU_TS *)0) {
    7ddc:	683b      	ldr	r3, [r7, #0]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d025      	beq.n	7e2e <OSTaskQPend+0xf2>
            OSTCBCurPtr->MsgQPendTime = OS_TS_GET() - *p_ts;
    7de2:	f244 135c 	movw	r3, #16732	; 0x415c
    7de6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7dea:	681c      	ldr	r4, [r3, #0]
    7dec:	f7fb fa96 	bl	331c <CPU_TS_TmrRd>
    7df0:	4602      	mov	r2, r0
    7df2:	683b      	ldr	r3, [r7, #0]
    7df4:	681b      	ldr	r3, [r3, #0]
    7df6:	1ad3      	subs	r3, r2, r3
    7df8:	6563      	str	r3, [r4, #84]	; 0x54
            if (OSTCBCurPtr->MsgQPendTime > OSTCBCurPtr->MsgQPendTimeMax) {
    7dfa:	f244 135c 	movw	r3, #16732	; 0x415c
    7dfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e02:	681b      	ldr	r3, [r3, #0]
    7e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7e06:	f244 135c 	movw	r3, #16732	; 0x415c
    7e0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e0e:	681b      	ldr	r3, [r3, #0]
    7e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    7e12:	429a      	cmp	r2, r3
    7e14:	d90b      	bls.n	7e2e <OSTaskQPend+0xf2>
                OSTCBCurPtr->MsgQPendTimeMax = OSTCBCurPtr->MsgQPendTime;
    7e16:	f244 135c 	movw	r3, #16732	; 0x415c
    7e1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e1e:	681a      	ldr	r2, [r3, #0]
    7e20:	f244 135c 	movw	r3, #16732	; 0x415c
    7e24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e28:	681b      	ldr	r3, [r3, #0]
    7e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7e2c:	6593      	str	r3, [r2, #88]	; 0x58
            }
        }
#endif
        CPU_CRITICAL_EXIT();
    7e2e:	f7f9 fd6f 	bl	1910 <CPU_IntDisMeasStop>
    7e32:	69b8      	ldr	r0, [r7, #24]
    7e34:	f00f ffda 	bl	17dec <CPU_SR_Restore>
        return (p_void);                                    /* Yes, Return oldest message received                    */
    7e38:	69fb      	ldr	r3, [r7, #28]
    7e3a:	e0f3      	b.n	8024 <__cs3_region_size_ram+0x24>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    7e3c:	897b      	ldrh	r3, [r7, #10]
    7e3e:	b21b      	sxth	r3, r3
    7e40:	2b00      	cmp	r3, #0
    7e42:	da0b      	bge.n	7e5c <OSTaskQPend+0x120>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;                   /* No                                                     */
    7e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7e46:	f246 12b0 	movw	r2, #25008	; 0x61b0
    7e4a:	801a      	strh	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
    7e4c:	f7f9 fd60 	bl	1910 <CPU_IntDisMeasStop>
    7e50:	69b8      	ldr	r0, [r7, #24]
    7e52:	f00f ffcb 	bl	17dec <CPU_SR_Restore>
        return ((void *)0);
    7e56:	f04f 0300 	mov.w	r3, #0
    7e5a:	e0e3      	b.n	8024 <__cs3_region_size_ram+0x24>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /*     Can't block when the scheduler is locked           */
    7e5c:	f643 5350 	movw	r3, #15696	; 0x3d50
    7e60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d00b      	beq.n	7e82 <OSTaskQPend+0x146>
            CPU_CRITICAL_EXIT();
    7e6a:	f7f9 fd51 	bl	1910 <CPU_IntDisMeasStop>
    7e6e:	69b8      	ldr	r0, [r7, #24]
    7e70:	f00f ffbc 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    7e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7e76:	f646 5262 	movw	r2, #28002	; 0x6d62
    7e7a:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
    7e7c:	f04f 0300 	mov.w	r3, #0
    7e80:	e0d0      	b.n	8024 <__cs3_region_size_ram+0x24>
        }
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    7e82:	f643 5350 	movw	r3, #15696	; 0x3d50
    7e86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	f103 0301 	add.w	r3, r3, #1
    7e90:	b2da      	uxtb	r2, r3
    7e92:	f643 5350 	movw	r3, #15696	; 0x3d50
    7e96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e9a:	701a      	strb	r2, [r3, #0]
    7e9c:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ea0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	2b01      	cmp	r3, #1
    7ea8:	d101      	bne.n	7eae <OSTaskQPend+0x172>
    7eaa:	f007 fca3 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    7eae:	f7f9 fd2f 	bl	1910 <CPU_IntDisMeasStop>
    7eb2:	69b8      	ldr	r0, [r7, #24]
    7eb4:	f00f ff9a 	bl	17dec <CPU_SR_Restore>
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Message                          */
    7eb8:	f04f 0000 	mov.w	r0, #0
    7ebc:	f04f 0100 	mov.w	r1, #0
    7ec0:	f04f 0202 	mov.w	r2, #2
    7ec4:	68fb      	ldr	r3, [r7, #12]
    7ec6:	f006 fe43 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_Q,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
    7eca:	f00f ff8b 	bl	17de4 <CPU_SR_Save>
    7ece:	61b8      	str	r0, [r7, #24]
    7ed0:	f7f9 fcf2 	bl	18b8 <CPU_IntDisMeasStart>
    7ed4:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ed8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7edc:	781b      	ldrb	r3, [r3, #0]
    7ede:	f103 33ff 	add.w	r3, r3, #4294967295
    7ee2:	b2da      	uxtb	r2, r3
    7ee4:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ee8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7eec:	701a      	strb	r2, [r3, #0]
    7eee:	f643 5350 	movw	r3, #15696	; 0x3d50
    7ef2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d101      	bne.n	7f00 <OSTaskQPend+0x1c4>
    7efc:	f007 fc8c 	bl	f818 <OS_SchedLockTimeMeasStop>
    7f00:	f7f9 fd06 	bl	1910 <CPU_IntDisMeasStop>
    7f04:	69b8      	ldr	r0, [r7, #24]
    7f06:	f00f ff71 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find the next highest priority task ready to run       */
    7f0a:	f006 fb89 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    7f0e:	f00f ff69 	bl	17de4 <CPU_SR_Save>
    7f12:	61b8      	str	r0, [r7, #24]
    7f14:	f7f9 fcd0 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    7f18:	f244 135c 	movw	r3, #16732	; 0x415c
    7f1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f20:	681b      	ldr	r3, [r3, #0]
    7f22:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    7f26:	2b00      	cmp	r3, #0
    7f28:	d002      	beq.n	7f30 <OSTaskQPend+0x1f4>
    7f2a:	2b01      	cmp	r3, #1
    7f2c:	d04a      	beq.n	7fc4 <OSTaskQPend+0x288>
    7f2e:	e05c      	b.n	7fea <OSTaskQPend+0x2ae>
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void      = OSTCBCurPtr->MsgPtr;
    7f30:	f244 135c 	movw	r3, #16732	; 0x415c
    7f34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7f3c:	61fb      	str	r3, [r7, #28]
             *p_msg_size = OSTCBCurPtr->MsgSize;
    7f3e:	f244 135c 	movw	r3, #16732	; 0x415c
    7f42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f46:	681b      	ldr	r3, [r3, #0]
    7f48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    7f50:	683b      	ldr	r3, [r7, #0]
    7f52:	2b00      	cmp	r3, #0
    7f54:	d031      	beq.n	7fba <OSTaskQPend+0x27e>
                *p_ts  = OSTCBCurPtr->TS;
    7f56:	f244 135c 	movw	r3, #16732	; 0x415c
    7f5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f5e:	681b      	ldr	r3, [r3, #0]
    7f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7f62:	683b      	ldr	r3, [r7, #0]
    7f64:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->MsgQPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
    7f66:	f244 135c 	movw	r3, #16732	; 0x415c
    7f6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f6e:	681c      	ldr	r4, [r3, #0]
    7f70:	f7fb f9d4 	bl	331c <CPU_TS_TmrRd>
    7f74:	4602      	mov	r2, r0
    7f76:	f244 135c 	movw	r3, #16732	; 0x415c
    7f7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f7e:	681b      	ldr	r3, [r3, #0]
    7f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7f82:	1ad3      	subs	r3, r2, r3
    7f84:	6563      	str	r3, [r4, #84]	; 0x54
                if (OSTCBCurPtr->MsgQPendTime > OSTCBCurPtr->MsgQPendTimeMax) {
    7f86:	f244 135c 	movw	r3, #16732	; 0x415c
    7f8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7f92:	f244 135c 	movw	r3, #16732	; 0x415c
    7f96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f9a:	681b      	ldr	r3, [r3, #0]
    7f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    7f9e:	429a      	cmp	r2, r3
    7fa0:	d90b      	bls.n	7fba <OSTaskQPend+0x27e>
                    OSTCBCurPtr->MsgQPendTimeMax = OSTCBCurPtr->MsgQPendTime;
    7fa2:	f244 135c 	movw	r3, #16732	; 0x415c
    7fa6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7faa:	681a      	ldr	r2, [r3, #0]
    7fac:	f244 135c 	movw	r3, #16732	; 0x415c
    7fb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7fb4:	681b      	ldr	r3, [r3, #0]
    7fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7fb8:	6593      	str	r3, [r2, #88]	; 0x58
                }
#endif
             }
             *p_err = OS_ERR_NONE;
    7fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7fbc:	f04f 0200 	mov.w	r2, #0
    7fc0:	801a      	strh	r2, [r3, #0]
             break;
    7fc2:	e029      	b.n	8018 <__cs3_region_size_ram+0x18>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void      = (void      *)0;
    7fc4:	f04f 0300 	mov.w	r3, #0
    7fc8:	61fb      	str	r3, [r7, #28]
             *p_msg_size = (OS_MSG_SIZE)0;
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	f04f 0200 	mov.w	r2, #0
    7fd0:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    7fd2:	683b      	ldr	r3, [r7, #0]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d003      	beq.n	7fe0 <OSTaskQPend+0x2a4>
                *p_ts  = (CPU_TS  )0;
    7fd8:	683b      	ldr	r3, [r7, #0]
    7fda:	f04f 0200 	mov.w	r2, #0
    7fde:	601a      	str	r2, [r3, #0]
             }
             *p_err =  OS_ERR_PEND_ABORT;
    7fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7fe2:	f246 12a9 	movw	r2, #25001	; 0x61a9
    7fe6:	801a      	strh	r2, [r3, #0]
             break;
    7fe8:	e016      	b.n	8018 <__cs3_region_size_ram+0x18>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
        default:
             p_void      = (void      *)0;
    7fea:	f04f 0300 	mov.w	r3, #0
    7fee:	61fb      	str	r3, [r7, #28]
             *p_msg_size = (OS_MSG_SIZE)0;
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	f04f 0200 	mov.w	r2, #0
    7ff6:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    7ff8:	683b      	ldr	r3, [r7, #0]
    7ffa:	2b00      	cmp	r3, #0
    7ffc:	d007      	beq.n	800e <__cs3_region_size_ram+0xe>
                *p_ts  =  OSTCBCurPtr->TS;
    7ffe:	f244 135c 	movw	r3, #16732	; 0x415c
    8002:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8006:	681b      	ldr	r3, [r3, #0]
    8008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    800a:	683b      	ldr	r3, [r7, #0]
    800c:	601a      	str	r2, [r3, #0]
             }
             *p_err =  OS_ERR_TIMEOUT;
    800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8010:	f247 22d9 	movw	r2, #29401	; 0x72d9
    8014:	801a      	strh	r2, [r3, #0]
             break;
    8016:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
    8018:	f7f9 fc7a 	bl	1910 <CPU_IntDisMeasStop>
    801c:	69b8      	ldr	r0, [r7, #24]
    801e:	f00f fee5 	bl	17dec <CPU_SR_Restore>
    return (p_void);                                        /* Return received message                                */
    8022:	69fb      	ldr	r3, [r7, #28]
}
    8024:	4618      	mov	r0, r3
    8026:	f107 0724 	add.w	r7, r7, #36	; 0x24
    802a:	46bd      	mov	sp, r7
    802c:	bd90      	pop	{r4, r7, pc}
    802e:	bf00      	nop

00008030 <OSTaskQPendAbort>:

#if (OS_CFG_TASK_Q_EN > 0u) && (OS_CFG_TASK_Q_PEND_ABORT_EN > 0u)
CPU_BOOLEAN  OSTaskQPendAbort (OS_TCB  *p_tcb,
                               OS_OPT   opt,
                               OS_ERR  *p_err)
{
    8030:	b580      	push	{r7, lr}
    8032:	b086      	sub	sp, #24
    8034:	af00      	add	r7, sp, #0
    8036:	60f8      	str	r0, [r7, #12]
    8038:	460b      	mov	r3, r1
    803a:	607a      	str	r2, [r7, #4]
    803c:	817b      	strh	r3, [r7, #10]
    CPU_TS         ts;
    CPU_SR_ALLOC();
    803e:	f04f 0300 	mov.w	r3, #0
    8042:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    8044:	f244 1381 	movw	r3, #16769	; 0x4181
    8048:	f2c1 0300 	movt	r3, #4096	; 0x1000
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	2b00      	cmp	r3, #0
    8050:	d006      	beq.n	8060 <OSTaskQPendAbort+0x30>
        *p_err = OS_ERR_PEND_ABORT_ISR;                     /* ... can't Pend Abort from an ISR                       */
    8052:	687b      	ldr	r3, [r7, #4]
    8054:	f246 12aa 	movw	r2, #25002	; 0x61aa
    8058:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    805a:	f04f 0300 	mov.w	r3, #0
    805e:	e07c      	b.n	815a <OSTaskQPendAbort+0x12a>
    }
#endif

    CPU_CRITICAL_ENTER();
    8060:	f00f fec0 	bl	17de4 <CPU_SR_Save>
    8064:	6178      	str	r0, [r7, #20]
    8066:	f7f9 fc27 	bl	18b8 <CPU_IntDisMeasStart>
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* Pend abort self?                                       */
    806a:	68fb      	ldr	r3, [r7, #12]
    806c:	2b00      	cmp	r3, #0
    806e:	d007      	beq.n	8080 <OSTaskQPendAbort+0x50>
        (p_tcb == OSTCBCurPtr)) {
    8070:	f244 135c 	movw	r3, #16732	; 0x415c
    8074:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8078:	681b      	ldr	r3, [r3, #0]
    }
#endif

    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* Pend abort self?                                       */
    807a:	68fa      	ldr	r2, [r7, #12]
    807c:	429a      	cmp	r2, r3
    807e:	d10b      	bne.n	8098 <OSTaskQPendAbort+0x68>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
    8080:	f7f9 fc46 	bl	1910 <CPU_IntDisMeasStop>
    8084:	6978      	ldr	r0, [r7, #20]
    8086:	f00f feb1 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_ABORT_SELF;                    /* ... doesn't make sense                                 */
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	f246 12ac 	movw	r2, #25004	; 0x61ac
    8090:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    8092:	f04f 0300 	mov.w	r3, #0
    8096:	e060      	b.n	815a <OSTaskQPendAbort+0x12a>
    }
#endif

    if (p_tcb->PendOn != OS_TASK_PEND_ON_TASK_Q) {          /* Is task waiting for a message?                         */
    8098:	68fb      	ldr	r3, [r7, #12]
    809a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    809e:	2b02      	cmp	r3, #2
    80a0:	d00b      	beq.n	80ba <OSTaskQPendAbort+0x8a>
        CPU_CRITICAL_EXIT();                                /* No                                                     */
    80a2:	f7f9 fc35 	bl	1910 <CPU_IntDisMeasStop>
    80a6:	6978      	ldr	r0, [r7, #20]
    80a8:	f00f fea0 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_ABORT_NONE;
    80ac:	687b      	ldr	r3, [r7, #4]
    80ae:	f246 12ab 	movw	r2, #25003	; 0x61ab
    80b2:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    80b4:	f04f 0300 	mov.w	r3, #0
    80b8:	e04f      	b.n	815a <OSTaskQPendAbort+0x12a>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    80ba:	f643 5350 	movw	r3, #15696	; 0x3d50
    80be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	f103 0301 	add.w	r3, r3, #1
    80c8:	b2da      	uxtb	r2, r3
    80ca:	f643 5350 	movw	r3, #15696	; 0x3d50
    80ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80d2:	701a      	strb	r2, [r3, #0]
    80d4:	f643 5350 	movw	r3, #15696	; 0x3d50
    80d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80dc:	781b      	ldrb	r3, [r3, #0]
    80de:	2b01      	cmp	r3, #1
    80e0:	d101      	bne.n	80e6 <OSTaskQPendAbort+0xb6>
    80e2:	f007 fb87 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    80e6:	f7f9 fc13 	bl	1910 <CPU_IntDisMeasStop>
    80ea:	6978      	ldr	r0, [r7, #20]
    80ec:	f00f fe7e 	bl	17dec <CPU_SR_Restore>
    ts = OS_TS_GET();                                       /* Get timestamp of when the abort occurred               */
    80f0:	f7fb f914 	bl	331c <CPU_TS_TmrRd>
    80f4:	6138      	str	r0, [r7, #16]
    OS_PendAbort((OS_PEND_OBJ *)0,                          /* Abort the pend                                         */
    80f6:	f04f 0000 	mov.w	r0, #0
    80fa:	68f9      	ldr	r1, [r7, #12]
    80fc:	693a      	ldr	r2, [r7, #16]
    80fe:	f006 fd81 	bl	ec04 <OS_PendAbort>
                 p_tcb,
                 ts);
    OS_CRITICAL_EXIT_NO_SCHED();
    8102:	f00f fe6f 	bl	17de4 <CPU_SR_Save>
    8106:	6178      	str	r0, [r7, #20]
    8108:	f7f9 fbd6 	bl	18b8 <CPU_IntDisMeasStart>
    810c:	f643 5350 	movw	r3, #15696	; 0x3d50
    8110:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8114:	781b      	ldrb	r3, [r3, #0]
    8116:	f103 33ff 	add.w	r3, r3, #4294967295
    811a:	b2da      	uxtb	r2, r3
    811c:	f643 5350 	movw	r3, #15696	; 0x3d50
    8120:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8124:	701a      	strb	r2, [r3, #0]
    8126:	f643 5350 	movw	r3, #15696	; 0x3d50
    812a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    812e:	781b      	ldrb	r3, [r3, #0]
    8130:	2b00      	cmp	r3, #0
    8132:	d101      	bne.n	8138 <OSTaskQPendAbort+0x108>
    8134:	f007 fb70 	bl	f818 <OS_SchedLockTimeMeasStop>
    8138:	f7f9 fbea 	bl	1910 <CPU_IntDisMeasStop>
    813c:	6978      	ldr	r0, [r7, #20]
    813e:	f00f fe55 	bl	17dec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    8142:	897b      	ldrh	r3, [r7, #10]
    8144:	b21b      	sxth	r3, r3
    8146:	2b00      	cmp	r3, #0
    8148:	db01      	blt.n	814e <OSTaskQPendAbort+0x11e>
        OSSched();                                          /* Run the scheduler                                      */
    814a:	f006 fa69 	bl	e620 <OSSched>
    }
    *p_err = OS_ERR_NONE;
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	f04f 0200 	mov.w	r2, #0
    8154:	801a      	strh	r2, [r3, #0]
    return (DEF_TRUE);
    8156:	f04f 0301 	mov.w	r3, #1
}
    815a:	4618      	mov	r0, r3
    815c:	f107 0718 	add.w	r7, r7, #24
    8160:	46bd      	mov	sp, r7
    8162:	bd80      	pop	{r7, pc}

00008164 <OSTaskQPost>:
void  OSTaskQPost (OS_TCB      *p_tcb,
                   void        *p_void,
                   OS_MSG_SIZE  msg_size,
                   OS_OPT       opt,
                   OS_ERR      *p_err)
{
    8164:	b580      	push	{r7, lr}
    8166:	b08a      	sub	sp, #40	; 0x28
    8168:	af04      	add	r7, sp, #16
    816a:	60f8      	str	r0, [r7, #12]
    816c:	60b9      	str	r1, [r7, #8]
    816e:	80fa      	strh	r2, [r7, #6]
    8170:	80bb      	strh	r3, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    8172:	f7fb f8d3 	bl	331c <CPU_TS_TmrRd>
    8176:	6178      	str	r0, [r7, #20]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {
    8178:	f244 1381 	movw	r3, #16769	; 0x4181
    817c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	2b00      	cmp	r3, #0
    8184:	d012      	beq.n	81ac <OSTaskQPost+0x48>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_TASK_MSG,      /* Post to ISR queue                                      */
    8186:	88fb      	ldrh	r3, [r7, #6]
    8188:	f04f 0200 	mov.w	r2, #0
    818c:	9200      	str	r2, [sp, #0]
    818e:	88ba      	ldrh	r2, [r7, #4]
    8190:	9201      	str	r2, [sp, #4]
    8192:	697a      	ldr	r2, [r7, #20]
    8194:	9202      	str	r2, [sp, #8]
    8196:	6a3a      	ldr	r2, [r7, #32]
    8198:	9203      	str	r2, [sp, #12]
    819a:	f644 5054 	movw	r0, #19796	; 0x4d54
    819e:	f2c4 7053 	movt	r0, #18259	; 0x4753
    81a2:	68f9      	ldr	r1, [r7, #12]
    81a4:	68ba      	ldr	r2, [r7, #8]
    81a6:	f008 fc39 	bl	10a1c <OS_IntQPost>
                    (OS_MSG_SIZE)msg_size,
                    (OS_FLAGS   )0,
                    (OS_OPT     )opt,
                    (CPU_TS     )ts,
                    (OS_ERR    *)p_err);
        return;
    81aa:	e009      	b.n	81c0 <OSTaskQPost+0x5c>
    }
#endif

    OS_TaskQPost(p_tcb,
    81ac:	88fa      	ldrh	r2, [r7, #6]
    81ae:	88bb      	ldrh	r3, [r7, #4]
    81b0:	6979      	ldr	r1, [r7, #20]
    81b2:	9100      	str	r1, [sp, #0]
    81b4:	6a39      	ldr	r1, [r7, #32]
    81b6:	9101      	str	r1, [sp, #4]
    81b8:	68f8      	ldr	r0, [r7, #12]
    81ba:	68b9      	ldr	r1, [r7, #8]
    81bc:	f000 ff78 	bl	90b0 <OS_TaskQPost>
                 p_void,
                 msg_size,
                 opt,
                 ts,
                 p_err);
}
    81c0:	f107 0718 	add.w	r7, r7, #24
    81c4:	46bd      	mov	sp, r7
    81c6:	bd80      	pop	{r7, pc}

000081c8 <OSTaskRegGet>:

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
OS_REG  OSTaskRegGet (OS_TCB     *p_tcb,
                      OS_REG_ID   id,
                      OS_ERR     *p_err)
{
    81c8:	b580      	push	{r7, lr}
    81ca:	b086      	sub	sp, #24
    81cc:	af00      	add	r7, sp, #0
    81ce:	60f8      	str	r0, [r7, #12]
    81d0:	460b      	mov	r3, r1
    81d2:	607a      	str	r2, [r7, #4]
    81d4:	72fb      	strb	r3, [r7, #11]
    OS_REG     value;
    CPU_SR_ALLOC();
    81d6:	f04f 0300 	mov.w	r3, #0
    81da:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (id >= OS_CFG_TASK_REG_TBL_SIZE) {
    81dc:	7afb      	ldrb	r3, [r7, #11]
    81de:	2b00      	cmp	r3, #0
    81e0:	d006      	beq.n	81f0 <OSTaskRegGet+0x28>
        *p_err = OS_ERR_REG_ID_INVALID;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	f646 1279 	movw	r2, #27001	; 0x6979
    81e8:	801a      	strh	r2, [r3, #0]
        return ((OS_REG)0);
    81ea:	f04f 0300 	mov.w	r3, #0
    81ee:	e01e      	b.n	822e <OSTaskRegGet+0x66>
    }
#endif

    CPU_CRITICAL_ENTER();
    81f0:	f00f fdf8 	bl	17de4 <CPU_SR_Save>
    81f4:	6178      	str	r0, [r7, #20]
    81f6:	f7f9 fb5f 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {
    81fa:	68fb      	ldr	r3, [r7, #12]
    81fc:	2b00      	cmp	r3, #0
    81fe:	d105      	bne.n	820c <OSTaskRegGet+0x44>
        p_tcb = OSTCBCurPtr;
    8200:	f244 135c 	movw	r3, #16732	; 0x415c
    8204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8208:	681b      	ldr	r3, [r3, #0]
    820a:	60fb      	str	r3, [r7, #12]
    }
    value  = p_tcb->RegTbl[id];
    820c:	7afa      	ldrb	r2, [r7, #11]
    820e:	68fb      	ldr	r3, [r7, #12]
    8210:	f102 021a 	add.w	r2, r2, #26
    8214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8218:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
    821a:	f7f9 fb79 	bl	1910 <CPU_IntDisMeasStop>
    821e:	6978      	ldr	r0, [r7, #20]
    8220:	f00f fde4 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    8224:	687b      	ldr	r3, [r7, #4]
    8226:	f04f 0200 	mov.w	r2, #0
    822a:	801a      	strh	r2, [r3, #0]
    return ((OS_REG)value);
    822c:	693b      	ldr	r3, [r7, #16]
}
    822e:	4618      	mov	r0, r3
    8230:	f107 0718 	add.w	r7, r7, #24
    8234:	46bd      	mov	sp, r7
    8236:	bd80      	pop	{r7, pc}

00008238 <OSTaskRegSet>:
#if OS_CFG_TASK_REG_TBL_SIZE > 0u
void  OSTaskRegSet (OS_TCB    *p_tcb,
                    OS_REG_ID  id,
                    OS_REG     value,
                    OS_ERR    *p_err)
{
    8238:	b580      	push	{r7, lr}
    823a:	b086      	sub	sp, #24
    823c:	af00      	add	r7, sp, #0
    823e:	60f8      	str	r0, [r7, #12]
    8240:	607a      	str	r2, [r7, #4]
    8242:	603b      	str	r3, [r7, #0]
    8244:	460b      	mov	r3, r1
    8246:	72fb      	strb	r3, [r7, #11]
    CPU_SR_ALLOC();
    8248:	f04f 0300 	mov.w	r3, #0
    824c:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (id >= OS_CFG_TASK_REG_TBL_SIZE) {
    824e:	7afb      	ldrb	r3, [r7, #11]
    8250:	2b00      	cmp	r3, #0
    8252:	d004      	beq.n	825e <OSTaskRegSet+0x26>
        *p_err = OS_ERR_REG_ID_INVALID;
    8254:	683b      	ldr	r3, [r7, #0]
    8256:	f646 1279 	movw	r2, #27001	; 0x6979
    825a:	801a      	strh	r2, [r3, #0]
        return;
    825c:	e01d      	b.n	829a <OSTaskRegSet+0x62>
    }
#endif

    CPU_CRITICAL_ENTER();
    825e:	f00f fdc1 	bl	17de4 <CPU_SR_Save>
    8262:	6178      	str	r0, [r7, #20]
    8264:	f7f9 fb28 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {
    8268:	68fb      	ldr	r3, [r7, #12]
    826a:	2b00      	cmp	r3, #0
    826c:	d105      	bne.n	827a <OSTaskRegSet+0x42>
        p_tcb = OSTCBCurPtr;
    826e:	f244 135c 	movw	r3, #16732	; 0x415c
    8272:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8276:	681b      	ldr	r3, [r3, #0]
    8278:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->RegTbl[id] = value;
    827a:	7afa      	ldrb	r2, [r7, #11]
    827c:	68fb      	ldr	r3, [r7, #12]
    827e:	f102 021a 	add.w	r2, r2, #26
    8282:	6879      	ldr	r1, [r7, #4]
    8284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    CPU_CRITICAL_EXIT();
    8288:	f7f9 fb42 	bl	1910 <CPU_IntDisMeasStop>
    828c:	6978      	ldr	r0, [r7, #20]
    828e:	f00f fdad 	bl	17dec <CPU_SR_Restore>
    *p_err            = OS_ERR_NONE;
    8292:	683b      	ldr	r3, [r7, #0]
    8294:	f04f 0200 	mov.w	r2, #0
    8298:	801a      	strh	r2, [r3, #0]
}
    829a:	f107 0718 	add.w	r7, r7, #24
    829e:	46bd      	mov	sp, r7
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop

000082a4 <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
    82a4:	b580      	push	{r7, lr}
    82a6:	b084      	sub	sp, #16
    82a8:	af00      	add	r7, sp, #0
    82aa:	6078      	str	r0, [r7, #4]
    82ac:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    82ae:	f04f 0300 	mov.w	r3, #0
    82b2:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    82b4:	f244 1381 	movw	r3, #16769	; 0x4181
    82b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82bc:	781b      	ldrb	r3, [r3, #0]
    82be:	2b00      	cmp	r3, #0
    82c0:	d004      	beq.n	82cc <OSTaskResume+0x28>
        *p_err = OS_ERR_TASK_RESUME_ISR;
    82c2:	683b      	ldr	r3, [r7, #0]
    82c4:	f247 1255 	movw	r2, #29013	; 0x7155
    82c8:	801a      	strh	r2, [r3, #0]
        return;
    82ca:	e0ea      	b.n	84a2 <OSTaskResume+0x1fe>
    }
#endif


    CPU_CRITICAL_ENTER();
    82cc:	f00f fd8a 	bl	17de4 <CPU_SR_Save>
    82d0:	60f8      	str	r0, [r7, #12]
    82d2:	f7f9 faf1 	bl	18b8 <CPU_IntDisMeasStart>
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
    82d6:	687b      	ldr	r3, [r7, #4]
    82d8:	2b00      	cmp	r3, #0
    82da:	d007      	beq.n	82ec <OSTaskResume+0x48>
        (p_tcb == OSTCBCurPtr)) {
    82dc:	f244 135c 	movw	r3, #16732	; 0x415c
    82e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82e4:	681b      	ldr	r3, [r3, #0]
#endif


    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
    82e6:	687a      	ldr	r2, [r7, #4]
    82e8:	429a      	cmp	r2, r3
    82ea:	d109      	bne.n	8300 <OSTaskResume+0x5c>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
    82ec:	f7f9 fb10 	bl	1910 <CPU_IntDisMeasStop>
    82f0:	68f8      	ldr	r0, [r7, #12]
    82f2:	f00f fd7b 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_TASK_RESUME_SELF;
    82f6:	683b      	ldr	r3, [r7, #0]
    82f8:	f247 1257 	movw	r2, #29015	; 0x7157
    82fc:	801a      	strh	r2, [r3, #0]
        return;
    82fe:	e0d0      	b.n	84a2 <OSTaskResume+0x1fe>
    }
#endif

    *p_err  = OS_ERR_NONE;
    8300:	683b      	ldr	r3, [r7, #0]
    8302:	f04f 0200 	mov.w	r2, #0
    8306:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    830e:	2b07      	cmp	r3, #7
    8310:	f200 80bb 	bhi.w	848a <OSTaskResume+0x1e6>
    8314:	a201      	add	r2, pc, #4	; (adr r2, 831c <OSTaskResume+0x78>)
    8316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    831a:	bf00      	nop
    831c:	0000833d 	.word	0x0000833d
    8320:	0000833d 	.word	0x0000833d
    8324:	0000833d 	.word	0x0000833d
    8328:	0000833d 	.word	0x0000833d
    832c:	00008351 	.word	0x00008351
    8330:	000083f5 	.word	0x000083f5
    8334:	00008427 	.word	0x00008427
    8338:	00008459 	.word	0x00008459
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
    833c:	f7f9 fae8 	bl	1910 <CPU_IntDisMeasStop>
    8340:	68f8      	ldr	r0, [r7, #12]
    8342:	f00f fd53 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_TASK_NOT_SUSPENDED;
    8346:	683b      	ldr	r3, [r7, #0]
    8348:	f247 1253 	movw	r2, #29011	; 0x7153
    834c:	801a      	strh	r2, [r3, #0]
             break;
    834e:	e0a6      	b.n	849e <OSTaskResume+0x1fa>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    8350:	f643 5350 	movw	r3, #15696	; 0x3d50
    8354:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	f103 0301 	add.w	r3, r3, #1
    835e:	b2da      	uxtb	r2, r3
    8360:	f643 5350 	movw	r3, #15696	; 0x3d50
    8364:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8368:	701a      	strb	r2, [r3, #0]
    836a:	f643 5350 	movw	r3, #15696	; 0x3d50
    836e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	2b01      	cmp	r3, #1
    8376:	d101      	bne.n	837c <OSTaskResume+0xd8>
    8378:	f007 fa3c 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    837c:	f7f9 fac8 	bl	1910 <CPU_IntDisMeasStop>
    8380:	68f8      	ldr	r0, [r7, #12]
    8382:	f00f fd33 	bl	17dec <CPU_SR_Restore>
             p_tcb->SuspendCtr--;
    8386:	687b      	ldr	r3, [r7, #4]
    8388:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    838c:	f103 33ff 	add.w	r3, r3, #4294967295
    8390:	b2da      	uxtb	r2, r3
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    839e:	2b00      	cmp	r3, #0
    83a0:	d107      	bne.n	83b2 <OSTaskResume+0x10e>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
    83a2:	687b      	ldr	r3, [r7, #4]
    83a4:	f04f 0200 	mov.w	r2, #0
    83a8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
                 OS_TaskRdy(p_tcb);
    83ac:	6878      	ldr	r0, [r7, #4]
    83ae:	f007 fb13 	bl	f9d8 <OS_TaskRdy>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
    83b2:	f00f fd17 	bl	17de4 <CPU_SR_Save>
    83b6:	60f8      	str	r0, [r7, #12]
    83b8:	f7f9 fa7e 	bl	18b8 <CPU_IntDisMeasStart>
    83bc:	f643 5350 	movw	r3, #15696	; 0x3d50
    83c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	f103 33ff 	add.w	r3, r3, #4294967295
    83ca:	b2da      	uxtb	r2, r3
    83cc:	f643 5350 	movw	r3, #15696	; 0x3d50
    83d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    83d4:	701a      	strb	r2, [r3, #0]
    83d6:	f643 5350 	movw	r3, #15696	; 0x3d50
    83da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    83de:	781b      	ldrb	r3, [r3, #0]
    83e0:	2b00      	cmp	r3, #0
    83e2:	d101      	bne.n	83e8 <OSTaskResume+0x144>
    83e4:	f007 fa18 	bl	f818 <OS_SchedLockTimeMeasStop>
    83e8:	f7f9 fa92 	bl	1910 <CPU_IntDisMeasStop>
    83ec:	68f8      	ldr	r0, [r7, #12]
    83ee:	f00f fcfd 	bl	17dec <CPU_SR_Restore>
             break;
    83f2:	e054      	b.n	849e <OSTaskResume+0x1fa>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
    83f4:	687b      	ldr	r3, [r7, #4]
    83f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    83fa:	f103 33ff 	add.w	r3, r3, #4294967295
    83fe:	b2da      	uxtb	r2, r3
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
    8406:	687b      	ldr	r3, [r7, #4]
    8408:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    840c:	2b00      	cmp	r3, #0
    840e:	d104      	bne.n	841a <OSTaskResume+0x176>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	f04f 0201 	mov.w	r2, #1
    8416:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             }
             CPU_CRITICAL_EXIT();
    841a:	f7f9 fa79 	bl	1910 <CPU_IntDisMeasStop>
    841e:	68f8      	ldr	r0, [r7, #12]
    8420:	f00f fce4 	bl	17dec <CPU_SR_Restore>
             break;
    8424:	e03b      	b.n	849e <OSTaskResume+0x1fa>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    842c:	f103 33ff 	add.w	r3, r3, #4294967295
    8430:	b2da      	uxtb	r2, r3
    8432:	687b      	ldr	r3, [r7, #4]
    8434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    843e:	2b00      	cmp	r3, #0
    8440:	d104      	bne.n	844c <OSTaskResume+0x1a8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	f04f 0202 	mov.w	r2, #2
    8448:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             }
             CPU_CRITICAL_EXIT();
    844c:	f7f9 fa60 	bl	1910 <CPU_IntDisMeasStop>
    8450:	68f8      	ldr	r0, [r7, #12]
    8452:	f00f fccb 	bl	17dec <CPU_SR_Restore>
             break;
    8456:	e022      	b.n	849e <OSTaskResume+0x1fa>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    845e:	f103 33ff 	add.w	r3, r3, #4294967295
    8462:	b2da      	uxtb	r2, r3
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8470:	2b00      	cmp	r3, #0
    8472:	d104      	bne.n	847e <OSTaskResume+0x1da>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	f04f 0203 	mov.w	r2, #3
    847a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             }
             CPU_CRITICAL_EXIT();
    847e:	f7f9 fa47 	bl	1910 <CPU_IntDisMeasStop>
    8482:	68f8      	ldr	r0, [r7, #12]
    8484:	f00f fcb2 	bl	17dec <CPU_SR_Restore>
             break;
    8488:	e009      	b.n	849e <OSTaskResume+0x1fa>

        default:
             CPU_CRITICAL_EXIT();
    848a:	f7f9 fa41 	bl	1910 <CPU_IntDisMeasStop>
    848e:	68f8      	ldr	r0, [r7, #12]
    8490:	f00f fcac 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATE_INVALID;
    8494:	683b      	ldr	r3, [r7, #0]
    8496:	f646 622a 	movw	r2, #28202	; 0x6e2a
    849a:	801a      	strh	r2, [r3, #0]
             return;
    849c:	e001      	b.n	84a2 <OSTaskResume+0x1fe>
    }

    OSSched();
    849e:	f006 f8bf 	bl	e620 <OSSched>
}
    84a2:	f107 0710 	add.w	r7, r7, #16
    84a6:	46bd      	mov	sp, r7
    84a8:	bd80      	pop	{r7, pc}
    84aa:	bf00      	nop

000084ac <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
    84ac:	b590      	push	{r4, r7, lr}
    84ae:	b087      	sub	sp, #28
    84b0:	af00      	add	r7, sp, #0
    84b2:	60f8      	str	r0, [r7, #12]
    84b4:	607a      	str	r2, [r7, #4]
    84b6:	603b      	str	r3, [r7, #0]
    84b8:	460b      	mov	r3, r1
    84ba:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
    84bc:	f04f 0300 	mov.w	r3, #0
    84c0:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    84c2:	f244 1381 	movw	r3, #16769	; 0x4181
    84c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	2b00      	cmp	r3, #0
    84ce:	d006      	beq.n	84de <OSTaskSemPend+0x32>
        *p_err = OS_ERR_PEND_ISR;
    84d0:	683b      	ldr	r3, [r7, #0]
    84d2:	f246 12ae 	movw	r2, #25006	; 0x61ae
    84d6:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    84d8:	f04f 0300 	mov.w	r3, #0
    84dc:	e146      	b.n	876c <OSTaskSemPend+0x2c0>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
    84de:	687b      	ldr	r3, [r7, #4]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d003      	beq.n	84ec <OSTaskSemPend+0x40>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	f04f 0200 	mov.w	r2, #0
    84ea:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
    84ec:	f00f fc7a 	bl	17de4 <CPU_SR_Save>
    84f0:	6178      	str	r0, [r7, #20]
    84f2:	f7f9 f9e1 	bl	18b8 <CPU_IntDisMeasStart>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
    84f6:	f244 135c 	movw	r3, #16732	; 0x415c
    84fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    84fe:	681b      	ldr	r3, [r3, #0]
    8500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    8502:	2b00      	cmp	r3, #0
    8504:	d04f      	beq.n	85a6 <OSTaskSemPend+0xfa>
        OSTCBCurPtr->SemCtr--;
    8506:	f244 135c 	movw	r3, #16732	; 0x415c
    850a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    8512:	f102 32ff 	add.w	r2, r2, #4294967295
    8516:	66da      	str	r2, [r3, #108]	; 0x6c
        ctr    = OSTCBCurPtr->SemCtr;
    8518:	f244 135c 	movw	r3, #16732	; 0x415c
    851c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8520:	681b      	ldr	r3, [r3, #0]
    8522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    8524:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
    8526:	687b      	ldr	r3, [r7, #4]
    8528:	2b00      	cmp	r3, #0
    852a:	d007      	beq.n	853c <OSTaskSemPend+0x90>
           *p_ts  = OSTCBCurPtr->TS;
    852c:	f244 135c 	movw	r3, #16732	; 0x415c
    8530:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8534:	681b      	ldr	r3, [r3, #0]
    8536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8538:	687b      	ldr	r3, [r7, #4]
    853a:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
    853c:	f244 135c 	movw	r3, #16732	; 0x415c
    8540:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8544:	681c      	ldr	r4, [r3, #0]
    8546:	f7fa fee9 	bl	331c <CPU_TS_TmrRd>
    854a:	4602      	mov	r2, r0
    854c:	f244 135c 	movw	r3, #16732	; 0x415c
    8550:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8558:	1ad3      	subs	r3, r2, r3
    855a:	6723      	str	r3, [r4, #112]	; 0x70
        if (OSTCBCurPtr->SemPendTime > OSTCBCurPtr->SemPendTimeMax) {
    855c:	f244 135c 	movw	r3, #16732	; 0x415c
    8560:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    8568:	f244 135c 	movw	r3, #16732	; 0x415c
    856c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8570:	681b      	ldr	r3, [r3, #0]
    8572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8574:	429a      	cmp	r2, r3
    8576:	d90b      	bls.n	8590 <OSTaskSemPend+0xe4>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
    8578:	f244 135c 	movw	r3, #16732	; 0x415c
    857c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8580:	681a      	ldr	r2, [r3, #0]
    8582:	f244 135c 	movw	r3, #16732	; 0x415c
    8586:	f2c1 0300 	movt	r3, #4096	; 0x1000
    858a:	681b      	ldr	r3, [r3, #0]
    858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    858e:	6753      	str	r3, [r2, #116]	; 0x74
        }
#endif
        CPU_CRITICAL_EXIT();
    8590:	f7f9 f9be 	bl	1910 <CPU_IntDisMeasStop>
    8594:	6978      	ldr	r0, [r7, #20]
    8596:	f00f fc29 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_NONE;
    859a:	683b      	ldr	r3, [r7, #0]
    859c:	f04f 0200 	mov.w	r2, #0
    85a0:	801a      	strh	r2, [r3, #0]
        return (ctr);
    85a2:	693b      	ldr	r3, [r7, #16]
    85a4:	e0e2      	b.n	876c <OSTaskSemPend+0x2c0>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    85a6:	897b      	ldrh	r3, [r7, #10]
    85a8:	b21b      	sxth	r3, r3
    85aa:	2b00      	cmp	r3, #0
    85ac:	da0b      	bge.n	85c6 <OSTaskSemPend+0x11a>
        CPU_CRITICAL_EXIT();
    85ae:	f7f9 f9af 	bl	1910 <CPU_IntDisMeasStop>
    85b2:	6978      	ldr	r0, [r7, #20]
    85b4:	f00f fc1a 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;                   /* No                                                     */
    85b8:	683b      	ldr	r3, [r7, #0]
    85ba:	f246 12b0 	movw	r2, #25008	; 0x61b0
    85be:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    85c0:	f04f 0300 	mov.w	r3, #0
    85c4:	e0d2      	b.n	876c <OSTaskSemPend+0x2c0>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
    85c6:	f643 5350 	movw	r3, #15696	; 0x3d50
    85ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	2b00      	cmp	r3, #0
    85d2:	d00b      	beq.n	85ec <OSTaskSemPend+0x140>
            CPU_CRITICAL_EXIT();
    85d4:	f7f9 f99c 	bl	1910 <CPU_IntDisMeasStop>
    85d8:	6978      	ldr	r0, [r7, #20]
    85da:	f00f fc07 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    85de:	683b      	ldr	r3, [r7, #0]
    85e0:	f646 5262 	movw	r2, #28002	; 0x6d62
    85e4:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
    85e6:	f04f 0300 	mov.w	r3, #0
    85ea:	e0bf      	b.n	876c <OSTaskSemPend+0x2c0>
        }
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    85ec:	f643 5350 	movw	r3, #15696	; 0x3d50
    85f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    85f4:	781b      	ldrb	r3, [r3, #0]
    85f6:	f103 0301 	add.w	r3, r3, #1
    85fa:	b2da      	uxtb	r2, r3
    85fc:	f643 5350 	movw	r3, #15696	; 0x3d50
    8600:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8604:	701a      	strb	r2, [r3, #0]
    8606:	f643 5350 	movw	r3, #15696	; 0x3d50
    860a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	2b01      	cmp	r3, #1
    8612:	d101      	bne.n	8618 <OSTaskSemPend+0x16c>
    8614:	f007 f8ee 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    8618:	f7f9 f97a 	bl	1910 <CPU_IntDisMeasStop>
    861c:	6978      	ldr	r0, [r7, #20]
    861e:	f00f fbe5 	bl	17dec <CPU_SR_Restore>
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
    8622:	f04f 0000 	mov.w	r0, #0
    8626:	f04f 0100 	mov.w	r1, #0
    862a:	f04f 0207 	mov.w	r2, #7
    862e:	68fb      	ldr	r3, [r7, #12]
    8630:	f006 fa8e 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
    8634:	f00f fbd6 	bl	17de4 <CPU_SR_Save>
    8638:	6178      	str	r0, [r7, #20]
    863a:	f7f9 f93d 	bl	18b8 <CPU_IntDisMeasStart>
    863e:	f643 5350 	movw	r3, #15696	; 0x3d50
    8642:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	f103 33ff 	add.w	r3, r3, #4294967295
    864c:	b2da      	uxtb	r2, r3
    864e:	f643 5350 	movw	r3, #15696	; 0x3d50
    8652:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8656:	701a      	strb	r2, [r3, #0]
    8658:	f643 5350 	movw	r3, #15696	; 0x3d50
    865c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8660:	781b      	ldrb	r3, [r3, #0]
    8662:	2b00      	cmp	r3, #0
    8664:	d101      	bne.n	866a <OSTaskSemPend+0x1be>
    8666:	f007 f8d7 	bl	f818 <OS_SchedLockTimeMeasStop>
    866a:	f7f9 f951 	bl	1910 <CPU_IntDisMeasStop>
    866e:	6978      	ldr	r0, [r7, #20]
    8670:	f00f fbbc 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find next highest priority task ready to run           */
    8674:	f005 ffd4 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    8678:	f00f fbb4 	bl	17de4 <CPU_SR_Save>
    867c:	6178      	str	r0, [r7, #20]
    867e:	f7f9 f91b 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
    8682:	f244 135c 	movw	r3, #16732	; 0x415c
    8686:	f2c1 0300 	movt	r3, #4096	; 0x1000
    868a:	681b      	ldr	r3, [r3, #0]
    868c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    8690:	2b01      	cmp	r3, #1
    8692:	d03d      	beq.n	8710 <OSTaskSemPend+0x264>
    8694:	2b03      	cmp	r3, #3
    8696:	d04b      	beq.n	8730 <OSTaskSemPend+0x284>
    8698:	2b00      	cmp	r3, #0
    869a:	d155      	bne.n	8748 <OSTaskSemPend+0x29c>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
    869c:	687b      	ldr	r3, [r7, #4]
    869e:	2b00      	cmp	r3, #0
    86a0:	d031      	beq.n	8706 <OSTaskSemPend+0x25a>
                *p_ts                    =  OSTCBCurPtr->TS;
    86a2:	f244 135c 	movw	r3, #16732	; 0x415c
    86a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86aa:	681b      	ldr	r3, [r3, #0]
    86ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
    86b2:	f244 135c 	movw	r3, #16732	; 0x415c
    86b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86ba:	681c      	ldr	r4, [r3, #0]
    86bc:	f7fa fe2e 	bl	331c <CPU_TS_TmrRd>
    86c0:	4602      	mov	r2, r0
    86c2:	f244 135c 	movw	r3, #16732	; 0x415c
    86c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86ca:	681b      	ldr	r3, [r3, #0]
    86cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    86ce:	1ad3      	subs	r3, r2, r3
    86d0:	6723      	str	r3, [r4, #112]	; 0x70
                if (OSTCBCurPtr->SemPendTime > OSTCBCurPtr->SemPendTimeMax) {
    86d2:	f244 135c 	movw	r3, #16732	; 0x415c
    86d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86da:	681b      	ldr	r3, [r3, #0]
    86dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    86de:	f244 135c 	movw	r3, #16732	; 0x415c
    86e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86e6:	681b      	ldr	r3, [r3, #0]
    86e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    86ea:	429a      	cmp	r2, r3
    86ec:	d90b      	bls.n	8706 <OSTaskSemPend+0x25a>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
    86ee:	f244 135c 	movw	r3, #16732	; 0x415c
    86f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86f6:	681a      	ldr	r2, [r3, #0]
    86f8:	f244 135c 	movw	r3, #16732	; 0x415c
    86fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8700:	681b      	ldr	r3, [r3, #0]
    8702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8704:	6753      	str	r3, [r2, #116]	; 0x74
                }
#endif
             }
             *p_err = OS_ERR_NONE;
    8706:	683b      	ldr	r3, [r7, #0]
    8708:	f04f 0200 	mov.w	r2, #0
    870c:	801a      	strh	r2, [r3, #0]
             break;
    870e:	e020      	b.n	8752 <OSTaskSemPend+0x2a6>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	2b00      	cmp	r3, #0
    8714:	d007      	beq.n	8726 <OSTaskSemPend+0x27a>
                *p_ts  =  OSTCBCurPtr->TS;
    8716:	f244 135c 	movw	r3, #16732	; 0x415c
    871a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_PEND_ABORT;                    /* Indicate that we aborted                               */
    8726:	683b      	ldr	r3, [r7, #0]
    8728:	f246 12a9 	movw	r2, #25001	; 0x61a9
    872c:	801a      	strh	r2, [r3, #0]
             break;
    872e:	e010      	b.n	8752 <OSTaskSemPend+0x2a6>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	2b00      	cmp	r3, #0
    8734:	d003      	beq.n	873e <OSTaskSemPend+0x292>
                *p_ts  = (CPU_TS  )0;
    8736:	687b      	ldr	r3, [r7, #4]
    8738:	f04f 0200 	mov.w	r2, #0
    873c:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_TIMEOUT;                       /* Indicate that we didn't get event within TO            */
    873e:	683b      	ldr	r3, [r7, #0]
    8740:	f247 22d9 	movw	r2, #29401	; 0x72d9
    8744:	801a      	strh	r2, [r3, #0]
             break;
    8746:	e004      	b.n	8752 <OSTaskSemPend+0x2a6>

        default:
             *p_err = OS_ERR_STATUS_INVALID;
    8748:	683b      	ldr	r3, [r7, #0]
    874a:	f646 622b 	movw	r2, #28203	; 0x6e2b
    874e:	801a      	strh	r2, [r3, #0]
             break;
    8750:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
    8752:	f244 135c 	movw	r3, #16732	; 0x415c
    8756:	f2c1 0300 	movt	r3, #4096	; 0x1000
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    875e:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
    8760:	f7f9 f8d6 	bl	1910 <CPU_IntDisMeasStop>
    8764:	6978      	ldr	r0, [r7, #20]
    8766:	f00f fb41 	bl	17dec <CPU_SR_Restore>
    return (ctr);
    876a:	693b      	ldr	r3, [r7, #16]
}
    876c:	4618      	mov	r0, r3
    876e:	f107 071c 	add.w	r7, r7, #28
    8772:	46bd      	mov	sp, r7
    8774:	bd90      	pop	{r4, r7, pc}
    8776:	bf00      	nop

00008778 <OSTaskSemPendAbort>:

#if OS_CFG_TASK_SEM_PEND_ABORT_EN > 0u
CPU_BOOLEAN  OSTaskSemPendAbort (OS_TCB  *p_tcb,
                                 OS_OPT   opt,
                                 OS_ERR  *p_err)
{
    8778:	b580      	push	{r7, lr}
    877a:	b086      	sub	sp, #24
    877c:	af00      	add	r7, sp, #0
    877e:	60f8      	str	r0, [r7, #12]
    8780:	460b      	mov	r3, r1
    8782:	607a      	str	r2, [r7, #4]
    8784:	817b      	strh	r3, [r7, #10]
    CPU_TS         ts;
    CPU_SR_ALLOC();
    8786:	f04f 0300 	mov.w	r3, #0
    878a:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    878c:	f244 1381 	movw	r3, #16769	; 0x4181
    8790:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	2b00      	cmp	r3, #0
    8798:	d006      	beq.n	87a8 <OSTaskSemPendAbort+0x30>
        *p_err = OS_ERR_PEND_ABORT_ISR;                     /* ... can't Pend Abort from an ISR                       */
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	f246 12aa 	movw	r2, #25002	; 0x61aa
    87a0:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    87a2:	f04f 0300 	mov.w	r3, #0
    87a6:	e086      	b.n	88b6 <OSTaskSemPendAbort+0x13e>
    }
#endif

    CPU_CRITICAL_ENTER();
    87a8:	f00f fb1c 	bl	17de4 <CPU_SR_Save>
    87ac:	6178      	str	r0, [r7, #20]
    87ae:	f7f9 f883 	bl	18b8 <CPU_IntDisMeasStart>
    if ((p_tcb == (OS_TCB *)0) ||                           /* Pend abort self?                                       */
    87b2:	68fb      	ldr	r3, [r7, #12]
    87b4:	2b00      	cmp	r3, #0
    87b6:	d007      	beq.n	87c8 <OSTaskSemPendAbort+0x50>
        (p_tcb == OSTCBCurPtr)) {
    87b8:	f244 135c 	movw	r3, #16732	; 0x415c
    87bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    87c0:	681b      	ldr	r3, [r3, #0]
        return (DEF_FALSE);
    }
#endif

    CPU_CRITICAL_ENTER();
    if ((p_tcb == (OS_TCB *)0) ||                           /* Pend abort self?                                       */
    87c2:	68fa      	ldr	r2, [r7, #12]
    87c4:	429a      	cmp	r2, r3
    87c6:	d10b      	bne.n	87e0 <OSTaskSemPendAbort+0x68>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();                                /* ... doesn't make sense!                                */
    87c8:	f7f9 f8a2 	bl	1910 <CPU_IntDisMeasStop>
    87cc:	6978      	ldr	r0, [r7, #20]
    87ce:	f00f fb0d 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_ABORT_SELF;
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	f246 12ac 	movw	r2, #25004	; 0x61ac
    87d8:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    87da:	f04f 0300 	mov.w	r3, #0
    87de:	e06a      	b.n	88b6 <OSTaskSemPendAbort+0x13e>
    }

    if (p_tcb->PendOn != OS_TASK_PEND_ON_TASK_SEM) {        /* Is task waiting for a signal?                          */
    87e0:	68fb      	ldr	r3, [r7, #12]
    87e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    87e6:	2b07      	cmp	r3, #7
    87e8:	d00b      	beq.n	8802 <OSTaskSemPendAbort+0x8a>
        CPU_CRITICAL_EXIT();
    87ea:	f7f9 f891 	bl	1910 <CPU_IntDisMeasStop>
    87ee:	6978      	ldr	r0, [r7, #20]
    87f0:	f00f fafc 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_ABORT_NONE;
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	f246 12ab 	movw	r2, #25003	; 0x61ab
    87fa:	801a      	strh	r2, [r3, #0]
        return (DEF_FALSE);
    87fc:	f04f 0300 	mov.w	r3, #0
    8800:	e059      	b.n	88b6 <OSTaskSemPendAbort+0x13e>
    }
    CPU_CRITICAL_EXIT();
    8802:	f7f9 f885 	bl	1910 <CPU_IntDisMeasStop>
    8806:	6978      	ldr	r0, [r7, #20]
    8808:	f00f faf0 	bl	17dec <CPU_SR_Restore>

    OS_CRITICAL_ENTER();
    880c:	f00f faea 	bl	17de4 <CPU_SR_Save>
    8810:	6178      	str	r0, [r7, #20]
    8812:	f7f9 f851 	bl	18b8 <CPU_IntDisMeasStart>
    8816:	f643 5350 	movw	r3, #15696	; 0x3d50
    881a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	f103 0301 	add.w	r3, r3, #1
    8824:	b2da      	uxtb	r2, r3
    8826:	f643 5350 	movw	r3, #15696	; 0x3d50
    882a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    882e:	701a      	strb	r2, [r3, #0]
    8830:	f643 5350 	movw	r3, #15696	; 0x3d50
    8834:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8838:	781b      	ldrb	r3, [r3, #0]
    883a:	2b01      	cmp	r3, #1
    883c:	d101      	bne.n	8842 <OSTaskSemPendAbort+0xca>
    883e:	f006 ffd9 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    8842:	f7f9 f865 	bl	1910 <CPU_IntDisMeasStop>
    8846:	6978      	ldr	r0, [r7, #20]
    8848:	f00f fad0 	bl	17dec <CPU_SR_Restore>
    ts = OS_TS_GET();
    884c:	f7fa fd66 	bl	331c <CPU_TS_TmrRd>
    8850:	6138      	str	r0, [r7, #16]
    OS_PendAbort((OS_PEND_OBJ *)0,
    8852:	f04f 0000 	mov.w	r0, #0
    8856:	68f9      	ldr	r1, [r7, #12]
    8858:	693a      	ldr	r2, [r7, #16]
    885a:	f006 f9d3 	bl	ec04 <OS_PendAbort>
                 p_tcb,
                 ts);
    OS_CRITICAL_EXIT_NO_SCHED();
    885e:	f00f fac1 	bl	17de4 <CPU_SR_Save>
    8862:	6178      	str	r0, [r7, #20]
    8864:	f7f9 f828 	bl	18b8 <CPU_IntDisMeasStart>
    8868:	f643 5350 	movw	r3, #15696	; 0x3d50
    886c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	f103 33ff 	add.w	r3, r3, #4294967295
    8876:	b2da      	uxtb	r2, r3
    8878:	f643 5350 	movw	r3, #15696	; 0x3d50
    887c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8880:	701a      	strb	r2, [r3, #0]
    8882:	f643 5350 	movw	r3, #15696	; 0x3d50
    8886:	f2c1 0300 	movt	r3, #4096	; 0x1000
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	2b00      	cmp	r3, #0
    888e:	d101      	bne.n	8894 <OSTaskSemPendAbort+0x11c>
    8890:	f006 ffc2 	bl	f818 <OS_SchedLockTimeMeasStop>
    8894:	f7f9 f83c 	bl	1910 <CPU_IntDisMeasStop>
    8898:	6978      	ldr	r0, [r7, #20]
    889a:	f00f faa7 	bl	17dec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    889e:	897b      	ldrh	r3, [r7, #10]
    88a0:	b21b      	sxth	r3, r3
    88a2:	2b00      	cmp	r3, #0
    88a4:	db01      	blt.n	88aa <OSTaskSemPendAbort+0x132>
        OSSched();                                          /* Run the scheduler                                      */
    88a6:	f005 febb 	bl	e620 <OSSched>
    }
    *p_err = OS_ERR_NONE;
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	f04f 0200 	mov.w	r2, #0
    88b0:	801a      	strh	r2, [r3, #0]
    return (DEF_TRUE);
    88b2:	f04f 0301 	mov.w	r3, #1
}
    88b6:	4618      	mov	r0, r3
    88b8:	f107 0718 	add.w	r7, r7, #24
    88bc:	46bd      	mov	sp, r7
    88be:	bd80      	pop	{r7, pc}

000088c0 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
    88c0:	b580      	push	{r7, lr}
    88c2:	b08a      	sub	sp, #40	; 0x28
    88c4:	af04      	add	r7, sp, #16
    88c6:	60f8      	str	r0, [r7, #12]
    88c8:	460b      	mov	r3, r1
    88ca:	607a      	str	r2, [r7, #4]
    88cc:	817b      	strh	r3, [r7, #10]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    88ce:	f7fa fd25 	bl	331c <CPU_TS_TmrRd>
    88d2:	6178      	str	r0, [r7, #20]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
    88d4:	f244 1381 	movw	r3, #16769	; 0x4181
    88d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88dc:	781b      	ldrb	r3, [r3, #0]
    88de:	2b00      	cmp	r3, #0
    88e0:	d017      	beq.n	8912 <OSTaskSemPost+0x52>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_TASK_SIGNAL,   /* Post to ISR queue                                      */
    88e2:	f04f 0300 	mov.w	r3, #0
    88e6:	9300      	str	r3, [sp, #0]
    88e8:	f04f 0300 	mov.w	r3, #0
    88ec:	9301      	str	r3, [sp, #4]
    88ee:	697b      	ldr	r3, [r7, #20]
    88f0:	9302      	str	r3, [sp, #8]
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	9303      	str	r3, [sp, #12]
    88f6:	f245 3054 	movw	r0, #21332	; 0x5354
    88fa:	f2c4 7049 	movt	r0, #18249	; 0x4749
    88fe:	68f9      	ldr	r1, [r7, #12]
    8900:	f04f 0200 	mov.w	r2, #0
    8904:	f04f 0300 	mov.w	r3, #0
    8908:	f008 f888 	bl	10a1c <OS_IntQPost>
                    (OS_MSG_SIZE)0,
                    (OS_FLAGS   )0,
                    (OS_OPT     )0,
                    (CPU_TS     )ts,
                    (OS_ERR    *)p_err);
        return ((OS_SEM_CTR)0);
    890c:	f04f 0300 	mov.w	r3, #0
    8910:	e008      	b.n	8924 <OSTaskSemPost+0x64>
    }
#endif

    ctr = OS_TaskSemPost(p_tcb,
    8912:	897b      	ldrh	r3, [r7, #10]
    8914:	68f8      	ldr	r0, [r7, #12]
    8916:	4619      	mov	r1, r3
    8918:	697a      	ldr	r2, [r7, #20]
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	f000 fd24 	bl	9368 <OS_TaskSemPost>
    8920:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
    8922:	693b      	ldr	r3, [r7, #16]
}
    8924:	4618      	mov	r0, r3
    8926:	f107 0718 	add.w	r7, r7, #24
    892a:	46bd      	mov	sp, r7
    892c:	bd80      	pop	{r7, pc}
    892e:	bf00      	nop

00008930 <OSTaskSemSet>:
*/

OS_SEM_CTR  OSTaskSemSet (OS_TCB      *p_tcb,
                          OS_SEM_CTR   cnt,
                          OS_ERR      *p_err)
{
    8930:	b580      	push	{r7, lr}
    8932:	b086      	sub	sp, #24
    8934:	af00      	add	r7, sp, #0
    8936:	60f8      	str	r0, [r7, #12]
    8938:	60b9      	str	r1, [r7, #8]
    893a:	607a      	str	r2, [r7, #4]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
    893c:	f04f 0300 	mov.w	r3, #0
    8940:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    8942:	f244 1381 	movw	r3, #16769	; 0x4181
    8946:	f2c1 0300 	movt	r3, #4096	; 0x1000
    894a:	781b      	ldrb	r3, [r3, #0]
    894c:	2b00      	cmp	r3, #0
    894e:	d006      	beq.n	895e <OSTaskSemSet+0x2e>
        *p_err = OS_ERR_SET_ISR;
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	f646 52c6 	movw	r2, #28102	; 0x6dc6
    8956:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    8958:	f04f 0300 	mov.w	r3, #0
    895c:	e01d      	b.n	899a <OSTaskSemSet+0x6a>
    }
#endif

    CPU_CRITICAL_ENTER();
    895e:	f00f fa41 	bl	17de4 <CPU_SR_Save>
    8962:	6178      	str	r0, [r7, #20]
    8964:	f7f8 ffa8 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {
    8968:	68fb      	ldr	r3, [r7, #12]
    896a:	2b00      	cmp	r3, #0
    896c:	d105      	bne.n	897a <OSTaskSemSet+0x4a>
        p_tcb = OSTCBCurPtr;
    896e:	f244 135c 	movw	r3, #16732	; 0x415c
    8972:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8976:	681b      	ldr	r3, [r3, #0]
    8978:	60fb      	str	r3, [r7, #12]
    }
    ctr           = p_tcb->SemCtr;
    897a:	68fb      	ldr	r3, [r7, #12]
    897c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    897e:	613b      	str	r3, [r7, #16]
    p_tcb->SemCtr = (OS_SEM_CTR)cnt;
    8980:	68fb      	ldr	r3, [r7, #12]
    8982:	68ba      	ldr	r2, [r7, #8]
    8984:	66da      	str	r2, [r3, #108]	; 0x6c
    CPU_CRITICAL_EXIT();
    8986:	f7f8 ffc3 	bl	1910 <CPU_IntDisMeasStop>
    898a:	6978      	ldr	r0, [r7, #20]
    898c:	f00f fa2e 	bl	17dec <CPU_SR_Restore>
    *p_err        =  OS_ERR_NONE;
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	f04f 0200 	mov.w	r2, #0
    8996:	801a      	strh	r2, [r3, #0]
    return (ctr);
    8998:	693b      	ldr	r3, [r7, #16]
}
    899a:	4618      	mov	r0, r3
    899c:	f107 0718 	add.w	r7, r7, #24
    89a0:	46bd      	mov	sp, r7
    89a2:	bd80      	pop	{r7, pc}

000089a4 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB       *p_tcb,
                    CPU_STK_SIZE *p_free,
                    CPU_STK_SIZE *p_used,
                    OS_ERR       *p_err)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b088      	sub	sp, #32
    89a8:	af00      	add	r7, sp, #0
    89aa:	60f8      	str	r0, [r7, #12]
    89ac:	60b9      	str	r1, [r7, #8]
    89ae:	607a      	str	r2, [r7, #4]
    89b0:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
    89b2:	f04f 0300 	mov.w	r3, #0
    89b6:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
    89b8:	f244 1381 	movw	r3, #16769	; 0x4181
    89bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	2b00      	cmp	r3, #0
    89c4:	d004      	beq.n	89d0 <OSTaskStkChk+0x2c>
        *p_err = OS_ERR_TASK_STK_CHK_ISR;
    89c6:	683b      	ldr	r3, [r7, #0]
    89c8:	f247 1258 	movw	r2, #29016	; 0x7158
    89cc:	801a      	strh	r2, [r3, #0]
        return;
    89ce:	e071      	b.n	8ab4 <OSTaskStkChk+0x110>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
    89d0:	68bb      	ldr	r3, [r7, #8]
    89d2:	2b00      	cmp	r3, #0
    89d4:	d104      	bne.n	89e0 <OSTaskStkChk+0x3c>
        *p_err = OS_ERR_PTR_INVALID;
    89d6:	683b      	ldr	r3, [r7, #0]
    89d8:	f246 22d5 	movw	r2, #25301	; 0x62d5
    89dc:	801a      	strh	r2, [r3, #0]
        return;
    89de:	e069      	b.n	8ab4 <OSTaskStkChk+0x110>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	2b00      	cmp	r3, #0
    89e4:	d104      	bne.n	89f0 <OSTaskStkChk+0x4c>
        *p_err = OS_ERR_PTR_INVALID;
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	f246 22d5 	movw	r2, #25301	; 0x62d5
    89ec:	801a      	strh	r2, [r3, #0]
        return;
    89ee:	e061      	b.n	8ab4 <OSTaskStkChk+0x110>
    }
#endif

    CPU_CRITICAL_ENTER();
    89f0:	f00f f9f8 	bl	17de4 <CPU_SR_Save>
    89f4:	6178      	str	r0, [r7, #20]
    89f6:	f7f8 ff5f 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
    89fa:	68fb      	ldr	r3, [r7, #12]
    89fc:	2b00      	cmp	r3, #0
    89fe:	d105      	bne.n	8a0c <OSTaskStkChk+0x68>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
    8a00:	f244 135c 	movw	r3, #16732	; 0x415c
    8a04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a08:	681b      	ldr	r3, [r3, #0]
    8a0a:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
    8a0c:	68fb      	ldr	r3, [r7, #12]
    8a0e:	681b      	ldr	r3, [r3, #0]
    8a10:	2b00      	cmp	r3, #0
    8a12:	d111      	bne.n	8a38 <OSTaskStkChk+0x94>
        CPU_CRITICAL_EXIT();
    8a14:	f7f8 ff7c 	bl	1910 <CPU_IntDisMeasStop>
    8a18:	6978      	ldr	r0, [r7, #20]
    8a1a:	f00f f9e7 	bl	17dec <CPU_SR_Restore>
        *p_free = (CPU_STK_SIZE)0;
    8a1e:	68bb      	ldr	r3, [r7, #8]
    8a20:	f04f 0200 	mov.w	r2, #0
    8a24:	601a      	str	r2, [r3, #0]
        *p_used = (CPU_STK_SIZE)0;
    8a26:	687b      	ldr	r3, [r7, #4]
    8a28:	f04f 0200 	mov.w	r2, #0
    8a2c:	601a      	str	r2, [r3, #0]
        *p_err  = (OS_ERR      )OS_ERR_TASK_NOT_EXIST;
    8a2e:	683b      	ldr	r3, [r7, #0]
    8a30:	f247 1252 	movw	r2, #29010	; 0x7152
    8a34:	801a      	strh	r2, [r3, #0]
        return;
    8a36:	e03d      	b.n	8ab4 <OSTaskStkChk+0x110>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
    8a38:	68fb      	ldr	r3, [r7, #12]
    8a3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    8a3e:	f003 0301 	and.w	r3, r3, #1
    8a42:	2b00      	cmp	r3, #0
    8a44:	d111      	bne.n	8a6a <OSTaskStkChk+0xc6>
        CPU_CRITICAL_EXIT();
    8a46:	f7f8 ff63 	bl	1910 <CPU_IntDisMeasStop>
    8a4a:	6978      	ldr	r0, [r7, #20]
    8a4c:	f00f f9ce 	bl	17dec <CPU_SR_Restore>
        *p_free = (CPU_STK_SIZE)0;
    8a50:	68bb      	ldr	r3, [r7, #8]
    8a52:	f04f 0200 	mov.w	r2, #0
    8a56:	601a      	str	r2, [r3, #0]
        *p_used = (CPU_STK_SIZE)0;
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	f04f 0200 	mov.w	r2, #0
    8a5e:	601a      	str	r2, [r3, #0]
        *p_err  = (OS_ERR      )OS_ERR_TASK_OPT;
    8a60:	683b      	ldr	r3, [r7, #0]
    8a62:	f247 1254 	movw	r2, #29012	; 0x7154
    8a66:	801a      	strh	r2, [r3, #0]
        return;
    8a68:	e024      	b.n	8ab4 <OSTaskStkChk+0x110>
    }
    CPU_CRITICAL_EXIT();
    8a6a:	f7f8 ff51 	bl	1910 <CPU_IntDisMeasStop>
    8a6e:	6978      	ldr	r0, [r7, #20]
    8a70:	f00f f9bc 	bl	17dec <CPU_SR_Restore>

    free_stk  = 0u;
    8a74:	f04f 0300 	mov.w	r3, #0
    8a78:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    8a7a:	68fb      	ldr	r3, [r7, #12]
    8a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a7e:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
    8a80:	e007      	b.n	8a92 <OSTaskStkChk+0xee>
        p_stk++;
    8a82:	69bb      	ldr	r3, [r7, #24]
    8a84:	f103 0304 	add.w	r3, r3, #4
    8a88:	61bb      	str	r3, [r7, #24]
        free_stk++;
    8a8a:	69fb      	ldr	r3, [r7, #28]
    8a8c:	f103 0301 	add.w	r3, r3, #1
    8a90:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();

    free_stk  = 0u;
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
    8a92:	69bb      	ldr	r3, [r7, #24]
    8a94:	681b      	ldr	r3, [r3, #0]
    8a96:	2b00      	cmp	r3, #0
    8a98:	d0f3      	beq.n	8a82 <OSTaskStkChk+0xde>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
    *p_free = free_stk;
    8a9a:	68bb      	ldr	r3, [r7, #8]
    8a9c:	69fa      	ldr	r2, [r7, #28]
    8a9e:	601a      	str	r2, [r3, #0]
    *p_used = (p_tcb->StkSize - free_stk);                  /* Compute number of entries used on the stack            */
    8aa0:	68fb      	ldr	r3, [r7, #12]
    8aa2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    8aa4:	69fb      	ldr	r3, [r7, #28]
    8aa6:	1ad2      	subs	r2, r2, r3
    8aa8:	687b      	ldr	r3, [r7, #4]
    8aaa:	601a      	str	r2, [r3, #0]
    *p_err  = OS_ERR_NONE;
    8aac:	683b      	ldr	r3, [r7, #0]
    8aae:	f04f 0200 	mov.w	r2, #0
    8ab2:	801a      	strh	r2, [r3, #0]
}
    8ab4:	f107 0720 	add.w	r7, r7, #32
    8ab8:	46bd      	mov	sp, r7
    8aba:	bd80      	pop	{r7, pc}

00008abc <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
    8abc:	b580      	push	{r7, lr}
    8abe:	b084      	sub	sp, #16
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	6078      	str	r0, [r7, #4]
    8ac4:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    8ac6:	f04f 0300 	mov.w	r3, #0
    8aca:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    8acc:	f244 1381 	movw	r3, #16769	; 0x4181
    8ad0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	d004      	beq.n	8ae4 <OSTaskSuspend+0x28>
        *p_err = OS_ERR_TASK_SUSPEND_ISR;
    8ada:	683b      	ldr	r3, [r7, #0]
    8adc:	f247 125c 	movw	r2, #29020	; 0x715c
    8ae0:	801a      	strh	r2, [r3, #0]
        return;
    8ae2:	e0ef      	b.n	8cc4 <OSTaskSuspend+0x208>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
    8ae4:	687a      	ldr	r2, [r7, #4]
    8ae6:	f244 2368 	movw	r3, #17000	; 0x4268
    8aea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8aee:	429a      	cmp	r2, r3
    8af0:	d104      	bne.n	8afc <OSTaskSuspend+0x40>
        *p_err = OS_ERR_TASK_SUSPEND_IDLE;
    8af2:	683b      	ldr	r3, [r7, #0]
    8af4:	f247 125a 	movw	r2, #29018	; 0x715a
    8af8:	801a      	strh	r2, [r3, #0]
        return;
    8afa:	e0e3      	b.n	8cc4 <OSTaskSuspend+0x208>
    }

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (p_tcb == &OSIntQTaskTCB) {                          /* Not allowed to suspend the ISR handler task            */
    8afc:	687a      	ldr	r2, [r7, #4]
    8afe:	f244 3340 	movw	r3, #17216	; 0x4340
    8b02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b06:	429a      	cmp	r2, r3
    8b08:	d104      	bne.n	8b14 <OSTaskSuspend+0x58>
        *p_err = OS_ERR_TASK_SUSPEND_INT_HANDLER;
    8b0a:	683b      	ldr	r3, [r7, #0]
    8b0c:	f247 125b 	movw	r2, #29019	; 0x715b
    8b10:	801a      	strh	r2, [r3, #0]
        return;
    8b12:	e0d7      	b.n	8cc4 <OSTaskSuspend+0x208>
    }
#endif

    CPU_CRITICAL_ENTER();
    8b14:	f00f f966 	bl	17de4 <CPU_SR_Save>
    8b18:	60f8      	str	r0, [r7, #12]
    8b1a:	f7f8 fecd 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
    8b1e:	687b      	ldr	r3, [r7, #4]
    8b20:	2b00      	cmp	r3, #0
    8b22:	d105      	bne.n	8b30 <OSTaskSuspend+0x74>
        p_tcb = OSTCBCurPtr;
    8b24:	f244 135c 	movw	r3, #16732	; 0x415c
    8b28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
    8b30:	f244 135c 	movw	r3, #16732	; 0x415c
    8b34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b38:	681b      	ldr	r3, [r3, #0]
    8b3a:	687a      	ldr	r2, [r7, #4]
    8b3c:	429a      	cmp	r2, r3
    8b3e:	d110      	bne.n	8b62 <OSTaskSuspend+0xa6>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
    8b40:	f643 5350 	movw	r3, #15696	; 0x3d50
    8b44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d009      	beq.n	8b62 <OSTaskSuspend+0xa6>
            CPU_CRITICAL_EXIT();
    8b4e:	f7f8 fedf 	bl	1910 <CPU_IntDisMeasStop>
    8b52:	68f8      	ldr	r0, [r7, #12]
    8b54:	f00f f94a 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    8b58:	683b      	ldr	r3, [r7, #0]
    8b5a:	f646 5262 	movw	r2, #28002	; 0x6d62
    8b5e:	801a      	strh	r2, [r3, #0]
            return;
    8b60:	e0b0      	b.n	8cc4 <OSTaskSuspend+0x208>
        }
    }

    *p_err = OS_ERR_NONE;
    8b62:	683b      	ldr	r3, [r7, #0]
    8b64:	f04f 0200 	mov.w	r2, #0
    8b68:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    8b70:	2b07      	cmp	r3, #7
    8b72:	f200 809b 	bhi.w	8cac <OSTaskSuspend+0x1f0>
    8b76:	a201      	add	r2, pc, #4	; (adr r2, 8b7c <OSTaskSuspend+0xc0>)
    8b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b7c:	00008b9d 	.word	0x00008b9d
    8b80:	00008c2f 	.word	0x00008c2f
    8b84:	00008c4f 	.word	0x00008c4f
    8b88:	00008c6f 	.word	0x00008c6f
    8b8c:	00008c8f 	.word	0x00008c8f
    8b90:	00008c8f 	.word	0x00008c8f
    8b94:	00008c8f 	.word	0x00008c8f
    8b98:	00008c8f 	.word	0x00008c8f
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    8b9c:	f643 5350 	movw	r3, #15696	; 0x3d50
    8ba0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	f103 0301 	add.w	r3, r3, #1
    8baa:	b2da      	uxtb	r2, r3
    8bac:	f643 5350 	movw	r3, #15696	; 0x3d50
    8bb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bb4:	701a      	strb	r2, [r3, #0]
    8bb6:	f643 5350 	movw	r3, #15696	; 0x3d50
    8bba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	2b01      	cmp	r3, #1
    8bc2:	d101      	bne.n	8bc8 <OSTaskSuspend+0x10c>
    8bc4:	f006 fe16 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    8bc8:	f7f8 fea2 	bl	1910 <CPU_IntDisMeasStop>
    8bcc:	68f8      	ldr	r0, [r7, #12]
    8bce:	f00f f90d 	bl	17dec <CPU_SR_Restore>
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	f04f 0204 	mov.w	r2, #4
    8bd8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	f04f 0201 	mov.w	r2, #1
    8be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             OS_RdyListRemove(p_tcb);
    8be6:	6878      	ldr	r0, [r7, #4]
    8be8:	f006 fd66 	bl	f6b8 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
    8bec:	f00f f8fa 	bl	17de4 <CPU_SR_Save>
    8bf0:	60f8      	str	r0, [r7, #12]
    8bf2:	f7f8 fe61 	bl	18b8 <CPU_IntDisMeasStart>
    8bf6:	f643 5350 	movw	r3, #15696	; 0x3d50
    8bfa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bfe:	781b      	ldrb	r3, [r3, #0]
    8c00:	f103 33ff 	add.w	r3, r3, #4294967295
    8c04:	b2da      	uxtb	r2, r3
    8c06:	f643 5350 	movw	r3, #15696	; 0x3d50
    8c0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c0e:	701a      	strb	r2, [r3, #0]
    8c10:	f643 5350 	movw	r3, #15696	; 0x3d50
    8c14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d101      	bne.n	8c22 <OSTaskSuspend+0x166>
    8c1e:	f006 fdfb 	bl	f818 <OS_SchedLockTimeMeasStop>
    8c22:	f7f8 fe75 	bl	1910 <CPU_IntDisMeasStop>
    8c26:	68f8      	ldr	r0, [r7, #12]
    8c28:	f00f f8e0 	bl	17dec <CPU_SR_Restore>
             break;
    8c2c:	e048      	b.n	8cc0 <OSTaskSuspend+0x204>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	f04f 0205 	mov.w	r2, #5
    8c34:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	f04f 0201 	mov.w	r2, #1
    8c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             CPU_CRITICAL_EXIT();
    8c42:	f7f8 fe65 	bl	1910 <CPU_IntDisMeasStop>
    8c46:	68f8      	ldr	r0, [r7, #12]
    8c48:	f00f f8d0 	bl	17dec <CPU_SR_Restore>
             break;
    8c4c:	e038      	b.n	8cc0 <OSTaskSuspend+0x204>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	f04f 0206 	mov.w	r2, #6
    8c54:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	f04f 0201 	mov.w	r2, #1
    8c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             CPU_CRITICAL_EXIT();
    8c62:	f7f8 fe55 	bl	1910 <CPU_IntDisMeasStop>
    8c66:	68f8      	ldr	r0, [r7, #12]
    8c68:	f00f f8c0 	bl	17dec <CPU_SR_Restore>
             break;
    8c6c:	e028      	b.n	8cc0 <OSTaskSuspend+0x204>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	f04f 0207 	mov.w	r2, #7
    8c74:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
    8c78:	687b      	ldr	r3, [r7, #4]
    8c7a:	f04f 0201 	mov.w	r2, #1
    8c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             CPU_CRITICAL_EXIT();
    8c82:	f7f8 fe45 	bl	1910 <CPU_IntDisMeasStop>
    8c86:	68f8      	ldr	r0, [r7, #12]
    8c88:	f00f f8b0 	bl	17dec <CPU_SR_Restore>
             break;
    8c8c:	e018      	b.n	8cc0 <OSTaskSuspend+0x204>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
    8c8e:	687b      	ldr	r3, [r7, #4]
    8c90:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8c94:	f103 0301 	add.w	r3, r3, #1
    8c98:	b2da      	uxtb	r2, r3
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
             CPU_CRITICAL_EXIT();
    8ca0:	f7f8 fe36 	bl	1910 <CPU_IntDisMeasStop>
    8ca4:	68f8      	ldr	r0, [r7, #12]
    8ca6:	f00f f8a1 	bl	17dec <CPU_SR_Restore>
             break;
    8caa:	e009      	b.n	8cc0 <OSTaskSuspend+0x204>

        default:
             CPU_CRITICAL_EXIT();
    8cac:	f7f8 fe30 	bl	1910 <CPU_IntDisMeasStop>
    8cb0:	68f8      	ldr	r0, [r7, #12]
    8cb2:	f00f f89b 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATE_INVALID;
    8cb6:	683b      	ldr	r3, [r7, #0]
    8cb8:	f646 622a 	movw	r2, #28202	; 0x6e2a
    8cbc:	801a      	strh	r2, [r3, #0]
             return;
    8cbe:	e001      	b.n	8cc4 <OSTaskSuspend+0x208>
    }

    OSSched();
    8cc0:	f005 fcae 	bl	e620 <OSSched>
}
    8cc4:	f107 0710 	add.w	r7, r7, #16
    8cc8:	46bd      	mov	sp, r7
    8cca:	bd80      	pop	{r7, pc}

00008ccc <OSTaskTimeQuantaSet>:

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
void  OSTaskTimeQuantaSet (OS_TCB   *p_tcb,
                           OS_TICK   time_quanta,
                           OS_ERR   *p_err)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b086      	sub	sp, #24
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	60f8      	str	r0, [r7, #12]
    8cd4:	60b9      	str	r1, [r7, #8]
    8cd6:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
    8cd8:	f04f 0300 	mov.w	r3, #0
    8cdc:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't call this function from an ISR                   */
    8cde:	f244 1381 	movw	r3, #16769	; 0x4181
    8ce2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d004      	beq.n	8cf6 <OSTaskTimeQuantaSet+0x2a>
        *p_err = OS_ERR_SET_ISR;
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	f646 52c6 	movw	r2, #28102	; 0x6dc6
    8cf2:	801a      	strh	r2, [r3, #0]
        return;
    8cf4:	e034      	b.n	8d60 <OSTaskTimeQuantaSet+0x94>
    }
#endif

    CPU_CRITICAL_ENTER();
    8cf6:	f00f f875 	bl	17de4 <CPU_SR_Save>
    8cfa:	6178      	str	r0, [r7, #20]
    8cfc:	f7f8 fddc 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {
    8d00:	68fb      	ldr	r3, [r7, #12]
    8d02:	2b00      	cmp	r3, #0
    8d04:	d105      	bne.n	8d12 <OSTaskTimeQuantaSet+0x46>
        p_tcb = OSTCBCurPtr;
    8d06:	f244 135c 	movw	r3, #16732	; 0x415c
    8d0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d0e:	681b      	ldr	r3, [r3, #0]
    8d10:	60fb      	str	r3, [r7, #12]
    }

    if (time_quanta == 0u) {
    8d12:	68bb      	ldr	r3, [r7, #8]
    8d14:	2b00      	cmp	r3, #0
    8d16:	d108      	bne.n	8d2a <OSTaskTimeQuantaSet+0x5e>
        p_tcb->TimeQuanta    = OSSchedRoundRobinDfltTimeQuanta;
    8d18:	f244 4318 	movw	r3, #17432	; 0x4418
    8d1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d20:	681a      	ldr	r2, [r3, #0]
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    8d28:	e003      	b.n	8d32 <OSTaskTimeQuantaSet+0x66>
    } else {
        p_tcb->TimeQuanta    = time_quanta;
    8d2a:	68fb      	ldr	r3, [r7, #12]
    8d2c:	68ba      	ldr	r2, [r7, #8]
    8d2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    if (p_tcb->TimeQuanta > p_tcb->TimeQuantaCtr) {
    8d32:	68fb      	ldr	r3, [r7, #12]
    8d34:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8d38:	68fb      	ldr	r3, [r7, #12]
    8d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    8d3e:	429a      	cmp	r2, r3
    8d40:	d905      	bls.n	8d4e <OSTaskTimeQuantaSet+0x82>
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;
    8d42:	68fb      	ldr	r3, [r7, #12]
    8d44:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    8d48:	68fb      	ldr	r3, [r7, #12]
    8d4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    CPU_CRITICAL_EXIT();
    8d4e:	f7f8 fddf 	bl	1910 <CPU_IntDisMeasStop>
    8d52:	6978      	ldr	r0, [r7, #20]
    8d54:	f00f f84a 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    8d58:	687b      	ldr	r3, [r7, #4]
    8d5a:	f04f 0200 	mov.w	r2, #0
    8d5e:	801a      	strh	r2, [r3, #0]
}
    8d60:	f107 0718 	add.w	r7, r7, #24
    8d64:	46bd      	mov	sp, r7
    8d66:	bd80      	pop	{r7, pc}

00008d68 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
    8d68:	b480      	push	{r7}
    8d6a:	b083      	sub	sp, #12
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	f04f 0200 	mov.w	r2, #0
    8d76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
    8d7a:	f244 136c 	movw	r3, #16748	; 0x416c
    8d7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d82:	681b      	ldr	r3, [r3, #0]
    8d84:	2b00      	cmp	r3, #0
    8d86:	d105      	bne.n	8d94 <OS_TaskDbgListAdd+0x2c>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	f04f 0200 	mov.w	r2, #0
    8d8e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    8d92:	e00f      	b.n	8db4 <OS_TaskDbgListAdd+0x4c>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
    8d94:	f244 136c 	movw	r3, #16748	; 0x416c
    8d98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d9c:	681a      	ldr	r2, [r3, #0]
    8d9e:	687b      	ldr	r3, [r7, #4]
    8da0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
    8da4:	f244 136c 	movw	r3, #16748	; 0x416c
    8da8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8dac:	681b      	ldr	r3, [r3, #0]
    8dae:	687a      	ldr	r2, [r7, #4]
    8db0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }
    OSTaskDbgListPtr                 =  p_tcb;
    8db4:	f244 136c 	movw	r3, #16748	; 0x416c
    8db8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8dbc:	687a      	ldr	r2, [r7, #4]
    8dbe:	601a      	str	r2, [r3, #0]
}
    8dc0:	f107 070c 	add.w	r7, r7, #12
    8dc4:	46bd      	mov	sp, r7
    8dc6:	bc80      	pop	{r7}
    8dc8:	4770      	bx	lr
    8dca:	bf00      	nop

00008dcc <OS_TaskDbgListRemove>:



void  OS_TaskDbgListRemove (OS_TCB  *p_tcb)
{
    8dcc:	b480      	push	{r7}
    8dce:	b085      	sub	sp, #20
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    8dda:	60fb      	str	r3, [r7, #12]
    p_tcb_next = p_tcb->DbgNextPtr;
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    8de2:	60bb      	str	r3, [r7, #8]

    if (p_tcb_prev == (OS_TCB *)0) {
    8de4:	68fb      	ldr	r3, [r7, #12]
    8de6:	2b00      	cmp	r3, #0
    8de8:	d113      	bne.n	8e12 <OS_TaskDbgListRemove+0x46>
        OSTaskDbgListPtr = p_tcb_next;
    8dea:	f244 136c 	movw	r3, #16748	; 0x416c
    8dee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8df2:	68ba      	ldr	r2, [r7, #8]
    8df4:	601a      	str	r2, [r3, #0]
        if (p_tcb_next != (OS_TCB *)0) {
    8df6:	68bb      	ldr	r3, [r7, #8]
    8df8:	2b00      	cmp	r3, #0
    8dfa:	d004      	beq.n	8e06 <OS_TaskDbgListRemove+0x3a>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
    8dfc:	68bb      	ldr	r3, [r7, #8]
    8dfe:	f04f 0200 	mov.w	r2, #0
    8e02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	f04f 0200 	mov.w	r2, #0
    8e0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    8e10:	e01f      	b.n	8e52 <OS_TaskDbgListRemove+0x86>

    } else if (p_tcb_next == (OS_TCB *)0) {
    8e12:	68bb      	ldr	r3, [r7, #8]
    8e14:	2b00      	cmp	r3, #0
    8e16:	d10a      	bne.n	8e2e <OS_TaskDbgListRemove+0x62>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
    8e18:	68fb      	ldr	r3, [r7, #12]
    8e1a:	f04f 0200 	mov.w	r2, #0
    8e1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    8e22:	687b      	ldr	r3, [r7, #4]
    8e24:	f04f 0200 	mov.w	r2, #0
    8e28:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    8e2c:	e011      	b.n	8e52 <OS_TaskDbgListRemove+0x86>

    } else {
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
    8e2e:	68fb      	ldr	r3, [r7, #12]
    8e30:	68ba      	ldr	r2, [r7, #8]
    8e32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
    8e36:	68bb      	ldr	r3, [r7, #8]
    8e38:	68fa      	ldr	r2, [r7, #12]
    8e3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	f04f 0200 	mov.w	r2, #0
    8e44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	f04f 0200 	mov.w	r2, #0
    8e4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }
}
    8e52:	f107 0714 	add.w	r7, r7, #20
    8e56:	46bd      	mov	sp, r7
    8e58:	bc80      	pop	{r7}
    8e5a:	4770      	bx	lr

00008e5c <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
    8e5c:	b480      	push	{r7}
    8e5e:	b083      	sub	sp, #12
    8e60:	af00      	add	r7, sp, #0
    8e62:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
    8e64:	f244 136c 	movw	r3, #16748	; 0x416c
    8e68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e6c:	f04f 0200 	mov.w	r2, #0
    8e70:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
    8e72:	f244 1382 	movw	r3, #16770	; 0x4182
    8e76:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e7a:	f04f 0200 	mov.w	r2, #0
    8e7e:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
    8e80:	f244 137c 	movw	r3, #16764	; 0x417c
    8e84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e88:	f04f 0200 	mov.w	r2, #0
    8e8c:	601a      	str	r2, [r3, #0]

    *p_err           = OS_ERR_NONE;
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	f04f 0200 	mov.w	r2, #0
    8e94:	801a      	strh	r2, [r3, #0]
}
    8e96:	f107 070c 	add.w	r7, r7, #12
    8e9a:	46bd      	mov	sp, r7
    8e9c:	bc80      	pop	{r7}
    8e9e:	4770      	bx	lr

00008ea0 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB *p_tcb)
{
    8ea0:	b580      	push	{r7, lr}
    8ea2:	b084      	sub	sp, #16
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	f04f 0200 	mov.w	r2, #0
    8eae:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	f04f 0200 	mov.w	r2, #0
    8eb6:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr             = (void          *)0;
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	f04f 0200 	mov.w	r2, #0
    8ebe:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	f04f 0200 	mov.w	r2, #0
    8ec6:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	f04f 0200 	mov.w	r2, #0
    8ece:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
    8ed0:	687b      	ldr	r3, [r7, #4]
    8ed2:	f04f 0200 	mov.w	r2, #0
    8ed6:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	f04f 0200 	mov.w	r2, #0
    8ede:	619a      	str	r2, [r3, #24]
    p_tcb->TickSpokePtr       = (OS_TICK_SPOKE *)0;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	f04f 0200 	mov.w	r2, #0
    8ee6:	61da      	str	r2, [r3, #28]

    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
    8ee8:	687a      	ldr	r2, [r7, #4]
    8eea:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    8eee:	f2c0 0302 	movt	r3, #2
    8ef2:	6213      	str	r3, [r2, #32]

    p_tcb->StkBasePtr         = (CPU_STK       *)0;
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	f04f 0200 	mov.w	r2, #0
    8efa:	625a      	str	r2, [r3, #36]	; 0x24

    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	f04f 0200 	mov.w	r2, #0
    8f02:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	f04f 0200 	mov.w	r2, #0
    8f0a:	62da      	str	r2, [r3, #44]	; 0x2c

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	f04f 0200 	mov.w	r2, #0
    8f12:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	f04f 0200 	mov.w	r2, #0
    8f1a:	869a      	strh	r2, [r3, #52]	; 0x34
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	f04f 0200 	mov.w	r2, #0
    8f22:	639a      	str	r2, [r3, #56]	; 0x38

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	f04f 0200 	mov.w	r2, #0
    8f2a:	63da      	str	r2, [r3, #60]	; 0x3c
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	f04f 0200 	mov.w	r2, #0
    8f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
    8f36:	687b      	ldr	r3, [r7, #4]
    8f38:	f103 0344 	add.w	r3, r3, #68	; 0x44
    8f3c:	4618      	mov	r0, r3
    8f3e:	f04f 0100 	mov.w	r1, #0
    8f42:	f007 fa81 	bl	10448 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	f04f 0200 	mov.w	r2, #0
    8f4c:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	f04f 0200 	mov.w	r2, #0
    8f54:	659a      	str	r2, [r3, #88]	; 0x58
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	f04f 0200 	mov.w	r2, #0
    8f5c:	65da      	str	r2, [r3, #92]	; 0x5c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	f04f 0200 	mov.w	r2, #0
    8f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	f04f 0200 	mov.w	r2, #0
    8f6e:	665a      	str	r2, [r3, #100]	; 0x64
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (id = 0u; id < OS_CFG_TASK_REG_TBL_SIZE; id++) {
    8f70:	f04f 0300 	mov.w	r3, #0
    8f74:	73fb      	strb	r3, [r7, #15]
    8f76:	e00b      	b.n	8f90 <OS_TaskInitTCB+0xf0>
        p_tcb->RegTbl[id] = (OS_REG)0u;
    8f78:	7bfa      	ldrb	r2, [r7, #15]
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	f102 021a 	add.w	r2, r2, #26
    8f80:	f04f 0100 	mov.w	r1, #0
    8f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (id = 0u; id < OS_CFG_TASK_REG_TBL_SIZE; id++) {
    8f88:	7bfb      	ldrb	r3, [r7, #15]
    8f8a:	f103 0301 	add.w	r3, r3, #1
    8f8e:	73fb      	strb	r3, [r7, #15]
    8f90:	7bfb      	ldrb	r3, [r7, #15]
    8f92:	2b00      	cmp	r3, #0
    8f94:	d0f0      	beq.n	8f78 <OS_TaskInitTCB+0xd8>
        p_tcb->RegTbl[id] = (OS_REG)0u;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	f04f 0200 	mov.w	r2, #0
    8f9c:	66da      	str	r2, [r3, #108]	; 0x6c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	f04f 0200 	mov.w	r2, #0
    8fa4:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	f04f 0200 	mov.w	r2, #0
    8fac:	675a      	str	r2, [r3, #116]	; 0x74
#endif

    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	f04f 0200 	mov.w	r2, #0
    8fb4:	67da      	str	r2, [r3, #124]	; 0x7c


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
    8fb6:	687b      	ldr	r3, [r7, #4]
    8fb8:	f04f 0200 	mov.w	r2, #0
    8fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	f04f 0200 	mov.w	r2, #0
    8fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	f04f 0200 	mov.w	r2, #0
    8fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	f04f 0200 	mov.w	r2, #0
    8fda:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

    p_tcb->TickCtrPrev        = (OS_TICK        )OS_TICK_TH_INIT;
    8fde:	687b      	ldr	r3, [r7, #4]
    8fe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->TickCtrMatch       = (OS_TICK        )0u;
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	f04f 0200 	mov.w	r2, #0
    8fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_tcb->TickRemain         = (OS_TICK        )0u;
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	f04f 0200 	mov.w	r2, #0
    8ff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    8ffc:	687b      	ldr	r3, [r7, #4]
    8ffe:	f04f 0200 	mov.w	r2, #0
    9002:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	f04f 0200 	mov.w	r2, #0
    900c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
    9010:	687b      	ldr	r3, [r7, #4]
    9012:	f04f 0200 	mov.w	r2, #0
    9016:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	f04f 0200 	mov.w	r2, #0
    9020:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	f04f 0200 	mov.w	r2, #0
    902a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
    902e:	f7fa f975 	bl	331c <CPU_TS_TmrRd>
    9032:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	68ba      	ldr	r2, [r7, #8]
    9038:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
    903c:	6879      	ldr	r1, [r7, #4]
    903e:	f04f 0200 	mov.w	r2, #0
    9042:	f04f 0300 	mov.w	r3, #0
    9046:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	f04f 0200 	mov.w	r2, #0
    9050:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
    9054:	687b      	ldr	r3, [r7, #4]
    9056:	f04f 0200 	mov.w	r2, #0
    905a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	f04f 0200 	mov.w	r2, #0
    9064:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	f04f 0200 	mov.w	r2, #0
    906e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	f04f 0200 	mov.w	r2, #0
    9078:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	f04f 02ff 	mov.w	r2, #255	; 0xff
    9082:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
    9086:	687b      	ldr	r3, [r7, #4]
    9088:	f04f 0200 	mov.w	r2, #0
    908c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
    9090:	687b      	ldr	r3, [r7, #4]
    9092:	f04f 0200 	mov.w	r2, #0
    9096:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
    909a:	687a      	ldr	r2, [r7, #4]
    909c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
    90a0:	f2c0 0302 	movt	r3, #2
    90a4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
#endif
}
    90a8:	f107 0710 	add.w	r7, r7, #16
    90ac:	46bd      	mov	sp, r7
    90ae:	bd80      	pop	{r7, pc}

000090b0 <OS_TaskQPost>:
                    void        *p_void,
                    OS_MSG_SIZE  msg_size,
                    OS_OPT       opt,
                    CPU_TS       ts,
                    OS_ERR      *p_err)
{
    90b0:	b580      	push	{r7, lr}
    90b2:	b088      	sub	sp, #32
    90b4:	af02      	add	r7, sp, #8
    90b6:	60f8      	str	r0, [r7, #12]
    90b8:	60b9      	str	r1, [r7, #8]
    90ba:	80fa      	strh	r2, [r7, #6]
    90bc:	80bb      	strh	r3, [r7, #4]
    CPU_SR_ALLOC();
    90be:	f04f 0300 	mov.w	r3, #0
    90c2:	617b      	str	r3, [r7, #20]



    OS_CRITICAL_ENTER();
    90c4:	f00e fe8e 	bl	17de4 <CPU_SR_Save>
    90c8:	6178      	str	r0, [r7, #20]
    90ca:	f7f8 fbf5 	bl	18b8 <CPU_IntDisMeasStart>
    90ce:	f643 5350 	movw	r3, #15696	; 0x3d50
    90d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	f103 0301 	add.w	r3, r3, #1
    90dc:	b2da      	uxtb	r2, r3
    90de:	f643 5350 	movw	r3, #15696	; 0x3d50
    90e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90e6:	701a      	strb	r2, [r3, #0]
    90e8:	f643 5350 	movw	r3, #15696	; 0x3d50
    90ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	2b01      	cmp	r3, #1
    90f4:	d101      	bne.n	90fa <OS_TaskQPost+0x4a>
    90f6:	f006 fb7d 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    90fa:	f7f8 fc09 	bl	1910 <CPU_IntDisMeasStop>
    90fe:	6978      	ldr	r0, [r7, #20]
    9100:	f00e fe74 	bl	17dec <CPU_SR_Restore>
    if (p_tcb == (OS_TCB *)0) {                             /* Post msg to 'self'?                                    */
    9104:	68fb      	ldr	r3, [r7, #12]
    9106:	2b00      	cmp	r3, #0
    9108:	d105      	bne.n	9116 <OS_TaskQPost+0x66>
        p_tcb = OSTCBCurPtr;
    910a:	f244 135c 	movw	r3, #16732	; 0x415c
    910e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9112:	681b      	ldr	r3, [r3, #0]
    9114:	60fb      	str	r3, [r7, #12]
    }
    *p_err  = OS_ERR_NONE;                                  /* Assume we won't have any errors                        */
    9116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9118:	f04f 0200 	mov.w	r2, #0
    911c:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
    911e:	68fb      	ldr	r3, [r7, #12]
    9120:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    9124:	2b07      	cmp	r3, #7
    9126:	f200 80c9 	bhi.w	92bc <OS_TaskQPost+0x20c>
    912a:	f04f 524c 	mov.w	r2, #855638016	; 0x33000000
    912e:	fa02 f203 	lsl.w	r2, r2, r3
    9132:	2a00      	cmp	r2, #0
    9134:	db49      	blt.n	91ca <OS_TaskQPost+0x11a>
    9136:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    913a:	fa02 f303 	lsl.w	r3, r2, r3
    913e:	2b00      	cmp	r3, #0
    9140:	f280 80bc 	bge.w	92bc <OS_TaskQPost+0x20c>
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
             OS_MsgQPut(&p_tcb->MsgQ,                       /* Deposit the message in the queue                       */
    9144:	68fb      	ldr	r3, [r7, #12]
    9146:	f103 0144 	add.w	r1, r3, #68	; 0x44
    914a:	88fa      	ldrh	r2, [r7, #6]
    914c:	88bb      	ldrh	r3, [r7, #4]
    914e:	6a38      	ldr	r0, [r7, #32]
    9150:	9000      	str	r0, [sp, #0]
    9152:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9154:	9001      	str	r0, [sp, #4]
    9156:	4608      	mov	r0, r1
    9158:	68b9      	ldr	r1, [r7, #8]
    915a:	f007 fa0b 	bl	10574 <OS_MsgQPut>
                        p_void,
                        msg_size,
                        opt,
                        ts,
                        p_err);
             OS_CRITICAL_EXIT();
    915e:	f00e fe41 	bl	17de4 <CPU_SR_Save>
    9162:	6178      	str	r0, [r7, #20]
    9164:	f7f8 fba8 	bl	18b8 <CPU_IntDisMeasStart>
    9168:	f643 5350 	movw	r3, #15696	; 0x3d50
    916c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9170:	781b      	ldrb	r3, [r3, #0]
    9172:	f103 33ff 	add.w	r3, r3, #4294967295
    9176:	b2da      	uxtb	r2, r3
    9178:	f643 5350 	movw	r3, #15696	; 0x3d50
    917c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9180:	701a      	strb	r2, [r3, #0]
    9182:	f643 5350 	movw	r3, #15696	; 0x3d50
    9186:	f2c1 0300 	movt	r3, #4096	; 0x1000
    918a:	781b      	ldrb	r3, [r3, #0]
    918c:	2b00      	cmp	r3, #0
    918e:	d116      	bne.n	91be <OS_TaskQPost+0x10e>
    9190:	f006 fb42 	bl	f818 <OS_SchedLockTimeMeasStop>
    9194:	f244 533c 	movw	r3, #17724	; 0x453c
    9198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    919c:	881b      	ldrh	r3, [r3, #0]
    919e:	2b00      	cmp	r3, #0
    91a0:	d007      	beq.n	91b2 <OS_TaskQPost+0x102>
    91a2:	f7f8 fbb5 	bl	1910 <CPU_IntDisMeasStop>
    91a6:	6978      	ldr	r0, [r7, #20]
    91a8:	f00e fe20 	bl	17dec <CPU_SR_Restore>
    91ac:	f006 fae8 	bl	f780 <OS_Sched0>
             break;
    91b0:	e0c0      	b.n	9334 <OS_TaskQPost+0x284>
                        p_void,
                        msg_size,
                        opt,
                        ts,
                        p_err);
             OS_CRITICAL_EXIT();
    91b2:	f7f8 fbad 	bl	1910 <CPU_IntDisMeasStop>
    91b6:	6978      	ldr	r0, [r7, #20]
    91b8:	f00e fe18 	bl	17dec <CPU_SR_Restore>
             break;
    91bc:	e0ba      	b.n	9334 <OS_TaskQPost+0x284>
                        p_void,
                        msg_size,
                        opt,
                        ts,
                        p_err);
             OS_CRITICAL_EXIT();
    91be:	f7f8 fba7 	bl	1910 <CPU_IntDisMeasStop>
    91c2:	6978      	ldr	r0, [r7, #20]
    91c4:	f00e fe12 	bl	17dec <CPU_SR_Restore>
             break;
    91c8:	e0b4      	b.n	9334 <OS_TaskQPost+0x284>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_Q) { /* Is task waiting for a message to be sent to it?        */
    91ca:	68fb      	ldr	r3, [r7, #12]
    91cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    91d0:	2b02      	cmp	r3, #2
    91d2:	d130      	bne.n	9236 <OS_TaskQPost+0x186>
                 OS_Post((OS_PEND_OBJ *)0,
    91d4:	88fb      	ldrh	r3, [r7, #6]
    91d6:	6a3a      	ldr	r2, [r7, #32]
    91d8:	9200      	str	r2, [sp, #0]
    91da:	f04f 0000 	mov.w	r0, #0
    91de:	68f9      	ldr	r1, [r7, #12]
    91e0:	68ba      	ldr	r2, [r7, #8]
    91e2:	f006 f87d 	bl	f2e0 <OS_Post>
                         p_tcb,
                         p_void,
                         msg_size,
                         ts);
                 OS_CRITICAL_EXIT_NO_SCHED();
    91e6:	f00e fdfd 	bl	17de4 <CPU_SR_Save>
    91ea:	6178      	str	r0, [r7, #20]
    91ec:	f7f8 fb64 	bl	18b8 <CPU_IntDisMeasStart>
    91f0:	f643 5350 	movw	r3, #15696	; 0x3d50
    91f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    91f8:	781b      	ldrb	r3, [r3, #0]
    91fa:	f103 33ff 	add.w	r3, r3, #4294967295
    91fe:	b2da      	uxtb	r2, r3
    9200:	f643 5350 	movw	r3, #15696	; 0x3d50
    9204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9208:	701a      	strb	r2, [r3, #0]
    920a:	f643 5350 	movw	r3, #15696	; 0x3d50
    920e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9212:	781b      	ldrb	r3, [r3, #0]
    9214:	2b00      	cmp	r3, #0
    9216:	d101      	bne.n	921c <OS_TaskQPost+0x16c>
    9218:	f006 fafe 	bl	f818 <OS_SchedLockTimeMeasStop>
    921c:	f7f8 fb78 	bl	1910 <CPU_IntDisMeasStop>
    9220:	6978      	ldr	r0, [r7, #20]
    9222:	f00e fde3 	bl	17dec <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
    9226:	88bb      	ldrh	r3, [r7, #4]
    9228:	b21b      	sxth	r3, r3
    922a:	2b00      	cmp	r3, #0
    922c:	f2c0 8081 	blt.w	9332 <OS_TaskQPost+0x282>
                     OSSched();                             /* Run the scheduler                                      */
    9230:	f005 f9f6 	bl	e620 <OSSched>
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
             }
             break;
    9234:	e07d      	b.n	9332 <OS_TaskQPost+0x282>
                 OS_CRITICAL_EXIT_NO_SCHED();
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
                     OSSched();                             /* Run the scheduler                                      */
                 }
             } else {
                 OS_MsgQPut(&p_tcb->MsgQ,                   /* No,  Task is pending on something else ...             */
    9236:	68fb      	ldr	r3, [r7, #12]
    9238:	f103 0144 	add.w	r1, r3, #68	; 0x44
    923c:	88fa      	ldrh	r2, [r7, #6]
    923e:	88bb      	ldrh	r3, [r7, #4]
    9240:	6a38      	ldr	r0, [r7, #32]
    9242:	9000      	str	r0, [sp, #0]
    9244:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9246:	9001      	str	r0, [sp, #4]
    9248:	4608      	mov	r0, r1
    924a:	68b9      	ldr	r1, [r7, #8]
    924c:	f007 f992 	bl	10574 <OS_MsgQPut>
                            p_void,                         /*      ... Deposit the message in the task's queue       */
                            msg_size,
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
    9250:	f00e fdc8 	bl	17de4 <CPU_SR_Save>
    9254:	6178      	str	r0, [r7, #20]
    9256:	f7f8 fb2f 	bl	18b8 <CPU_IntDisMeasStart>
    925a:	f643 5350 	movw	r3, #15696	; 0x3d50
    925e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9262:	781b      	ldrb	r3, [r3, #0]
    9264:	f103 33ff 	add.w	r3, r3, #4294967295
    9268:	b2da      	uxtb	r2, r3
    926a:	f643 5350 	movw	r3, #15696	; 0x3d50
    926e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9272:	701a      	strb	r2, [r3, #0]
    9274:	f643 5350 	movw	r3, #15696	; 0x3d50
    9278:	f2c1 0300 	movt	r3, #4096	; 0x1000
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	2b00      	cmp	r3, #0
    9280:	d116      	bne.n	92b0 <OS_TaskQPost+0x200>
    9282:	f006 fac9 	bl	f818 <OS_SchedLockTimeMeasStop>
    9286:	f244 533c 	movw	r3, #17724	; 0x453c
    928a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    928e:	881b      	ldrh	r3, [r3, #0]
    9290:	2b00      	cmp	r3, #0
    9292:	d007      	beq.n	92a4 <OS_TaskQPost+0x1f4>
    9294:	f7f8 fb3c 	bl	1910 <CPU_IntDisMeasStop>
    9298:	6978      	ldr	r0, [r7, #20]
    929a:	f00e fda7 	bl	17dec <CPU_SR_Restore>
    929e:	f006 fa6f 	bl	f780 <OS_Sched0>
             }
             break;
    92a2:	e046      	b.n	9332 <OS_TaskQPost+0x282>
                            p_void,                         /*      ... Deposit the message in the task's queue       */
                            msg_size,
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
    92a4:	f7f8 fb34 	bl	1910 <CPU_IntDisMeasStop>
    92a8:	6978      	ldr	r0, [r7, #20]
    92aa:	f00e fd9f 	bl	17dec <CPU_SR_Restore>
             }
             break;
    92ae:	e040      	b.n	9332 <OS_TaskQPost+0x282>
                            p_void,                         /*      ... Deposit the message in the task's queue       */
                            msg_size,
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
    92b0:	f7f8 fb2e 	bl	1910 <CPU_IntDisMeasStop>
    92b4:	6978      	ldr	r0, [r7, #20]
    92b6:	f00e fd99 	bl	17dec <CPU_SR_Restore>
             }
             break;
    92ba:	e03a      	b.n	9332 <OS_TaskQPost+0x282>

        default:
             OS_CRITICAL_EXIT();
    92bc:	f00e fd92 	bl	17de4 <CPU_SR_Save>
    92c0:	6178      	str	r0, [r7, #20]
    92c2:	f7f8 faf9 	bl	18b8 <CPU_IntDisMeasStart>
    92c6:	f643 5350 	movw	r3, #15696	; 0x3d50
    92ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	f103 33ff 	add.w	r3, r3, #4294967295
    92d4:	b2da      	uxtb	r2, r3
    92d6:	f643 5350 	movw	r3, #15696	; 0x3d50
    92da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92de:	701a      	strb	r2, [r3, #0]
    92e0:	f643 5350 	movw	r3, #15696	; 0x3d50
    92e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	2b00      	cmp	r3, #0
    92ec:	d116      	bne.n	931c <OS_TaskQPost+0x26c>
    92ee:	f006 fa93 	bl	f818 <OS_SchedLockTimeMeasStop>
    92f2:	f244 533c 	movw	r3, #17724	; 0x453c
    92f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92fa:	881b      	ldrh	r3, [r3, #0]
    92fc:	2b00      	cmp	r3, #0
    92fe:	d007      	beq.n	9310 <OS_TaskQPost+0x260>
    9300:	f7f8 fb06 	bl	1910 <CPU_IntDisMeasStop>
    9304:	6978      	ldr	r0, [r7, #20]
    9306:	f00e fd71 	bl	17dec <CPU_SR_Restore>
    930a:	f006 fa39 	bl	f780 <OS_Sched0>
    930e:	e00a      	b.n	9326 <OS_TaskQPost+0x276>
    9310:	f7f8 fafe 	bl	1910 <CPU_IntDisMeasStop>
    9314:	6978      	ldr	r0, [r7, #20]
    9316:	f00e fd69 	bl	17dec <CPU_SR_Restore>
    931a:	e004      	b.n	9326 <OS_TaskQPost+0x276>
    931c:	f7f8 faf8 	bl	1910 <CPU_IntDisMeasStop>
    9320:	6978      	ldr	r0, [r7, #20]
    9322:	f00e fd63 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATE_INVALID;
    9326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9328:	f646 622a 	movw	r2, #28202	; 0x6e2a
    932c:	801a      	strh	r2, [r3, #0]
             break;
    932e:	bf00      	nop
    9330:	e000      	b.n	9334 <OS_TaskQPost+0x284>
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
             }
             break;
    9332:	bf00      	nop
        default:
             OS_CRITICAL_EXIT();
             *p_err = OS_ERR_STATE_INVALID;
             break;
    }
}
    9334:	f107 0718 	add.w	r7, r7, #24
    9338:	46bd      	mov	sp, r7
    933a:	bd80      	pop	{r7, pc}

0000933c <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
    933c:	b580      	push	{r7, lr}
    933e:	b082      	sub	sp, #8
    9340:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
    9342:	f244 135c 	movw	r3, #16732	; 0x415c
    9346:	f2c1 0300 	movt	r3, #4096	; 0x1000
    934a:	681b      	ldr	r3, [r3, #0]
    934c:	4618      	mov	r0, r3
    934e:	f7f7 fa89 	bl	864 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
    9352:	f04f 0000 	mov.w	r0, #0
    9356:	f107 0306 	add.w	r3, r7, #6
    935a:	4619      	mov	r1, r3
    935c:	f7fe fb3c 	bl	79d8 <OSTaskDel>
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
#endif
}
    9360:	f107 0708 	add.w	r7, r7, #8
    9364:	46bd      	mov	sp, r7
    9366:	bd80      	pop	{r7, pc}

00009368 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
    9368:	b580      	push	{r7, lr}
    936a:	b088      	sub	sp, #32
    936c:	af02      	add	r7, sp, #8
    936e:	60f8      	str	r0, [r7, #12]
    9370:	607a      	str	r2, [r7, #4]
    9372:	603b      	str	r3, [r7, #0]
    9374:	460b      	mov	r3, r1
    9376:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
    9378:	f04f 0300 	mov.w	r3, #0
    937c:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
    937e:	f00e fd31 	bl	17de4 <CPU_SR_Save>
    9382:	6138      	str	r0, [r7, #16]
    9384:	f7f8 fa98 	bl	18b8 <CPU_IntDisMeasStart>
    9388:	f643 5350 	movw	r3, #15696	; 0x3d50
    938c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9390:	781b      	ldrb	r3, [r3, #0]
    9392:	f103 0301 	add.w	r3, r3, #1
    9396:	b2da      	uxtb	r2, r3
    9398:	f643 5350 	movw	r3, #15696	; 0x3d50
    939c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93a0:	701a      	strb	r2, [r3, #0]
    93a2:	f643 5350 	movw	r3, #15696	; 0x3d50
    93a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93aa:	781b      	ldrb	r3, [r3, #0]
    93ac:	2b01      	cmp	r3, #1
    93ae:	d101      	bne.n	93b4 <OS_TaskSemPost+0x4c>
    93b0:	f006 fa20 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    93b4:	f7f8 faac 	bl	1910 <CPU_IntDisMeasStop>
    93b8:	6938      	ldr	r0, [r7, #16]
    93ba:	f00e fd17 	bl	17dec <CPU_SR_Restore>
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
    93be:	68fb      	ldr	r3, [r7, #12]
    93c0:	2b00      	cmp	r3, #0
    93c2:	d105      	bne.n	93d0 <OS_TaskSemPost+0x68>
        p_tcb = OSTCBCurPtr;
    93c4:	f244 135c 	movw	r3, #16732	; 0x415c
    93c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93cc:	681b      	ldr	r3, [r3, #0]
    93ce:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
    93d0:	68fb      	ldr	r3, [r7, #12]
    93d2:	687a      	ldr	r2, [r7, #4]
    93d4:	639a      	str	r2, [r3, #56]	; 0x38
    *p_err    = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
    93d6:	683b      	ldr	r3, [r7, #0]
    93d8:	f04f 0200 	mov.w	r2, #0
    93dc:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
    93de:	68fb      	ldr	r3, [r7, #12]
    93e0:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    93e4:	2b07      	cmp	r3, #7
    93e6:	f200 8108 	bhi.w	95fa <OS_TaskSemPost+0x292>
    93ea:	f04f 524c 	mov.w	r2, #855638016	; 0x33000000
    93ee:	fa02 f203 	lsl.w	r2, r2, r3
    93f2:	2a00      	cmp	r2, #0
    93f4:	f2c0 8088 	blt.w	9508 <OS_TaskSemPost+0x1a0>
    93f8:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    93fc:	fa02 f303 	lsl.w	r3, r2, r3
    9400:	2b00      	cmp	r3, #0
    9402:	f280 80fa 	bge.w	95fa <OS_TaskSemPost+0x292>
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
    9406:	68fb      	ldr	r3, [r7, #12]
    9408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    940a:	f1b3 3fff 	cmp.w	r3, #4294967295
    940e:	d13b      	bne.n	9488 <OS_TaskSemPost+0x120>
                          OS_CRITICAL_EXIT();
    9410:	f00e fce8 	bl	17de4 <CPU_SR_Save>
    9414:	6138      	str	r0, [r7, #16]
    9416:	f7f8 fa4f 	bl	18b8 <CPU_IntDisMeasStart>
    941a:	f643 5350 	movw	r3, #15696	; 0x3d50
    941e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	f103 33ff 	add.w	r3, r3, #4294967295
    9428:	b2da      	uxtb	r2, r3
    942a:	f643 5350 	movw	r3, #15696	; 0x3d50
    942e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9432:	701a      	strb	r2, [r3, #0]
    9434:	f643 5350 	movw	r3, #15696	; 0x3d50
    9438:	f2c1 0300 	movt	r3, #4096	; 0x1000
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	2b00      	cmp	r3, #0
    9440:	d116      	bne.n	9470 <OS_TaskSemPost+0x108>
    9442:	f006 f9e9 	bl	f818 <OS_SchedLockTimeMeasStop>
    9446:	f244 533c 	movw	r3, #17724	; 0x453c
    944a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    944e:	881b      	ldrh	r3, [r3, #0]
    9450:	2b00      	cmp	r3, #0
    9452:	d007      	beq.n	9464 <OS_TaskSemPost+0xfc>
    9454:	f7f8 fa5c 	bl	1910 <CPU_IntDisMeasStop>
    9458:	6938      	ldr	r0, [r7, #16]
    945a:	f00e fcc7 	bl	17dec <CPU_SR_Restore>
    945e:	f006 f98f 	bl	f780 <OS_Sched0>
    9462:	e00a      	b.n	947a <OS_TaskSemPost+0x112>
    9464:	f7f8 fa54 	bl	1910 <CPU_IntDisMeasStop>
    9468:	6938      	ldr	r0, [r7, #16]
    946a:	f00e fcbf 	bl	17dec <CPU_SR_Restore>
    946e:	e004      	b.n	947a <OS_TaskSemPost+0x112>
    9470:	f7f8 fa4e 	bl	1910 <CPU_IntDisMeasStop>
    9474:	6938      	ldr	r0, [r7, #16]
    9476:	f00e fcb9 	bl	17dec <CPU_SR_Restore>
                          *p_err = OS_ERR_SEM_OVF;
    947a:	683b      	ldr	r3, [r7, #0]
    947c:	f646 52c5 	movw	r2, #28101	; 0x6dc5
    9480:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
    9482:	f04f 0300 	mov.w	r3, #0
    9486:	e0f7      	b.n	9678 <OS_TaskSemPost+0x310>
                      }
                      break;
    9488:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
    948a:	68fb      	ldr	r3, [r7, #12]
    948c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    948e:	f103 0201 	add.w	r2, r3, #1
    9492:	68fb      	ldr	r3, [r7, #12]
    9494:	66da      	str	r2, [r3, #108]	; 0x6c
             ctr = p_tcb->SemCtr;
    9496:	68fb      	ldr	r3, [r7, #12]
    9498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    949a:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
    949c:	f00e fca2 	bl	17de4 <CPU_SR_Save>
    94a0:	6138      	str	r0, [r7, #16]
    94a2:	f7f8 fa09 	bl	18b8 <CPU_IntDisMeasStart>
    94a6:	f643 5350 	movw	r3, #15696	; 0x3d50
    94aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	f103 33ff 	add.w	r3, r3, #4294967295
    94b4:	b2da      	uxtb	r2, r3
    94b6:	f643 5350 	movw	r3, #15696	; 0x3d50
    94ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94be:	701a      	strb	r2, [r3, #0]
    94c0:	f643 5350 	movw	r3, #15696	; 0x3d50
    94c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94c8:	781b      	ldrb	r3, [r3, #0]
    94ca:	2b00      	cmp	r3, #0
    94cc:	d116      	bne.n	94fc <OS_TaskSemPost+0x194>
    94ce:	f006 f9a3 	bl	f818 <OS_SchedLockTimeMeasStop>
    94d2:	f244 533c 	movw	r3, #17724	; 0x453c
    94d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94da:	881b      	ldrh	r3, [r3, #0]
    94dc:	2b00      	cmp	r3, #0
    94de:	d007      	beq.n	94f0 <OS_TaskSemPost+0x188>
    94e0:	f7f8 fa16 	bl	1910 <CPU_IntDisMeasStop>
    94e4:	6938      	ldr	r0, [r7, #16]
    94e6:	f00e fc81 	bl	17dec <CPU_SR_Restore>
    94ea:	f006 f949 	bl	f780 <OS_Sched0>
             break;
    94ee:	e0c2      	b.n	9676 <OS_TaskSemPost+0x30e>
                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
             ctr = p_tcb->SemCtr;
             OS_CRITICAL_EXIT();
    94f0:	f7f8 fa0e 	bl	1910 <CPU_IntDisMeasStop>
    94f4:	6938      	ldr	r0, [r7, #16]
    94f6:	f00e fc79 	bl	17dec <CPU_SR_Restore>
             break;
    94fa:	e0bc      	b.n	9676 <OS_TaskSemPost+0x30e>
                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
             ctr = p_tcb->SemCtr;
             OS_CRITICAL_EXIT();
    94fc:	f7f8 fa08 	bl	1910 <CPU_IntDisMeasStop>
    9500:	6938      	ldr	r0, [r7, #16]
    9502:	f00e fc73 	bl	17dec <CPU_SR_Restore>
             break;
    9506:	e0b6      	b.n	9676 <OS_TaskSemPost+0x30e>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
    9508:	68fb      	ldr	r3, [r7, #12]
    950a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    950e:	2b07      	cmp	r3, #7
    9510:	d134      	bne.n	957c <OS_TaskSemPost+0x214>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	9300      	str	r3, [sp, #0]
    9516:	f04f 0000 	mov.w	r0, #0
    951a:	68f9      	ldr	r1, [r7, #12]
    951c:	f04f 0200 	mov.w	r2, #0
    9520:	f04f 0300 	mov.w	r3, #0
    9524:	f005 fedc 	bl	f2e0 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
    9528:	68fb      	ldr	r3, [r7, #12]
    952a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    952c:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
    952e:	f00e fc59 	bl	17de4 <CPU_SR_Save>
    9532:	6138      	str	r0, [r7, #16]
    9534:	f7f8 f9c0 	bl	18b8 <CPU_IntDisMeasStart>
    9538:	f643 5350 	movw	r3, #15696	; 0x3d50
    953c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	f103 33ff 	add.w	r3, r3, #4294967295
    9546:	b2da      	uxtb	r2, r3
    9548:	f643 5350 	movw	r3, #15696	; 0x3d50
    954c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9550:	701a      	strb	r2, [r3, #0]
    9552:	f643 5350 	movw	r3, #15696	; 0x3d50
    9556:	f2c1 0300 	movt	r3, #4096	; 0x1000
    955a:	781b      	ldrb	r3, [r3, #0]
    955c:	2b00      	cmp	r3, #0
    955e:	d101      	bne.n	9564 <OS_TaskSemPost+0x1fc>
    9560:	f006 f95a 	bl	f818 <OS_SchedLockTimeMeasStop>
    9564:	f7f8 f9d4 	bl	1910 <CPU_IntDisMeasStop>
    9568:	6938      	ldr	r0, [r7, #16]
    956a:	f00e fc3f 	bl	17dec <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    956e:	897b      	ldrh	r3, [r7, #10]
    9570:	b21b      	sxth	r3, r3
    9572:	2b00      	cmp	r3, #0
    9574:	db7e      	blt.n	9674 <OS_TaskSemPost+0x30c>
                     OSSched();                                 /* Run the scheduler                                  */
    9576:	f005 f853 	bl	e620 <OSSched>
             } else {
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
    957a:	e07b      	b.n	9674 <OS_TaskSemPost+0x30c>
                 OS_CRITICAL_EXIT_NO_SCHED();
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
                     OSSched();                                 /* Run the scheduler                                  */
                 }
             } else {
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
    957c:	68fb      	ldr	r3, [r7, #12]
    957e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    9580:	f103 0201 	add.w	r2, r3, #1
    9584:	68fb      	ldr	r3, [r7, #12]
    9586:	66da      	str	r2, [r3, #108]	; 0x6c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
    9588:	68fb      	ldr	r3, [r7, #12]
    958a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    958c:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
    958e:	f00e fc29 	bl	17de4 <CPU_SR_Save>
    9592:	6138      	str	r0, [r7, #16]
    9594:	f7f8 f990 	bl	18b8 <CPU_IntDisMeasStart>
    9598:	f643 5350 	movw	r3, #15696	; 0x3d50
    959c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	f103 33ff 	add.w	r3, r3, #4294967295
    95a6:	b2da      	uxtb	r2, r3
    95a8:	f643 5350 	movw	r3, #15696	; 0x3d50
    95ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    95b0:	701a      	strb	r2, [r3, #0]
    95b2:	f643 5350 	movw	r3, #15696	; 0x3d50
    95b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    95ba:	781b      	ldrb	r3, [r3, #0]
    95bc:	2b00      	cmp	r3, #0
    95be:	d116      	bne.n	95ee <OS_TaskSemPost+0x286>
    95c0:	f006 f92a 	bl	f818 <OS_SchedLockTimeMeasStop>
    95c4:	f244 533c 	movw	r3, #17724	; 0x453c
    95c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    95cc:	881b      	ldrh	r3, [r3, #0]
    95ce:	2b00      	cmp	r3, #0
    95d0:	d007      	beq.n	95e2 <OS_TaskSemPost+0x27a>
    95d2:	f7f8 f99d 	bl	1910 <CPU_IntDisMeasStop>
    95d6:	6938      	ldr	r0, [r7, #16]
    95d8:	f00e fc08 	bl	17dec <CPU_SR_Restore>
    95dc:	f006 f8d0 	bl	f780 <OS_Sched0>
             }
             break;
    95e0:	e048      	b.n	9674 <OS_TaskSemPost+0x30c>
                     OSSched();                                 /* Run the scheduler                                  */
                 }
             } else {
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
    95e2:	f7f8 f995 	bl	1910 <CPU_IntDisMeasStop>
    95e6:	6938      	ldr	r0, [r7, #16]
    95e8:	f00e fc00 	bl	17dec <CPU_SR_Restore>
             }
             break;
    95ec:	e042      	b.n	9674 <OS_TaskSemPost+0x30c>
                     OSSched();                                 /* Run the scheduler                                  */
                 }
             } else {
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
    95ee:	f7f8 f98f 	bl	1910 <CPU_IntDisMeasStop>
    95f2:	6938      	ldr	r0, [r7, #16]
    95f4:	f00e fbfa 	bl	17dec <CPU_SR_Restore>
             }
             break;
    95f8:	e03c      	b.n	9674 <OS_TaskSemPost+0x30c>

        default:
             OS_CRITICAL_EXIT();
    95fa:	f00e fbf3 	bl	17de4 <CPU_SR_Save>
    95fe:	6138      	str	r0, [r7, #16]
    9600:	f7f8 f95a 	bl	18b8 <CPU_IntDisMeasStart>
    9604:	f643 5350 	movw	r3, #15696	; 0x3d50
    9608:	f2c1 0300 	movt	r3, #4096	; 0x1000
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	f103 33ff 	add.w	r3, r3, #4294967295
    9612:	b2da      	uxtb	r2, r3
    9614:	f643 5350 	movw	r3, #15696	; 0x3d50
    9618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    961c:	701a      	strb	r2, [r3, #0]
    961e:	f643 5350 	movw	r3, #15696	; 0x3d50
    9622:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9626:	781b      	ldrb	r3, [r3, #0]
    9628:	2b00      	cmp	r3, #0
    962a:	d116      	bne.n	965a <OS_TaskSemPost+0x2f2>
    962c:	f006 f8f4 	bl	f818 <OS_SchedLockTimeMeasStop>
    9630:	f244 533c 	movw	r3, #17724	; 0x453c
    9634:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9638:	881b      	ldrh	r3, [r3, #0]
    963a:	2b00      	cmp	r3, #0
    963c:	d007      	beq.n	964e <OS_TaskSemPost+0x2e6>
    963e:	f7f8 f967 	bl	1910 <CPU_IntDisMeasStop>
    9642:	6938      	ldr	r0, [r7, #16]
    9644:	f00e fbd2 	bl	17dec <CPU_SR_Restore>
    9648:	f006 f89a 	bl	f780 <OS_Sched0>
    964c:	e00a      	b.n	9664 <OS_TaskSemPost+0x2fc>
    964e:	f7f8 f95f 	bl	1910 <CPU_IntDisMeasStop>
    9652:	6938      	ldr	r0, [r7, #16]
    9654:	f00e fbca 	bl	17dec <CPU_SR_Restore>
    9658:	e004      	b.n	9664 <OS_TaskSemPost+0x2fc>
    965a:	f7f8 f959 	bl	1910 <CPU_IntDisMeasStop>
    965e:	6938      	ldr	r0, [r7, #16]
    9660:	f00e fbc4 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATE_INVALID;
    9664:	683b      	ldr	r3, [r7, #0]
    9666:	f646 622a 	movw	r2, #28202	; 0x6e2a
    966a:	801a      	strh	r2, [r3, #0]
             ctr = (OS_SEM_CTR)0;
    966c:	f04f 0300 	mov.w	r3, #0
    9670:	617b      	str	r3, [r7, #20]
             break;
    9672:	e000      	b.n	9676 <OS_TaskSemPost+0x30e>
             } else {
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
    9674:	bf00      	nop
             OS_CRITICAL_EXIT();
             *p_err = OS_ERR_STATE_INVALID;
             ctr = (OS_SEM_CTR)0;
             break;
    }
    return (ctr);
    9676:	697b      	ldr	r3, [r7, #20]
}
    9678:	4618      	mov	r0, r3
    967a:	f107 0718 	add.w	r7, r7, #24
    967e:	46bd      	mov	sp, r7
    9680:	bd80      	pop	{r7, pc}
    9682:	bf00      	nop

00009684 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
    9684:	b580      	push	{r7, lr}
    9686:	b086      	sub	sp, #24
    9688:	af00      	add	r7, sp, #0
    968a:	60f8      	str	r0, [r7, #12]
    968c:	460b      	mov	r3, r1
    968e:	607a      	str	r2, [r7, #4]
    9690:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
    9692:	f04f 0300 	mov.w	r3, #0
    9696:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
    9698:	f244 1381 	movw	r3, #16769	; 0x4181
    969c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d004      	beq.n	96b0 <OSTimeDly+0x2c>
       *p_err = OS_ERR_TIME_DLY_ISR;
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	f247 2275 	movw	r2, #29301	; 0x7275
    96ac:	801a      	strh	r2, [r3, #0]
        return;
    96ae:	e0bb      	b.n	9828 <OSTimeDly+0x1a4>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
    96b0:	f643 5350 	movw	r3, #15696	; 0x3d50
    96b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	2b00      	cmp	r3, #0
    96bc:	d004      	beq.n	96c8 <OSTimeDly+0x44>
       *p_err = OS_ERR_SCHED_LOCKED;
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	f646 5262 	movw	r2, #28002	; 0x6d62
    96c4:	801a      	strh	r2, [r3, #0]
        return;
    96c6:	e0af      	b.n	9828 <OSTimeDly+0x1a4>
    }

    switch (opt) {
    96c8:	897b      	ldrh	r3, [r7, #10]
    96ca:	2b08      	cmp	r3, #8
    96cc:	d81c      	bhi.n	9708 <OSTimeDly+0x84>
    96ce:	a201      	add	r2, pc, #4	; (adr r2, 96d4 <OSTimeDly+0x50>)
    96d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    96d4:	000096f9 	.word	0x000096f9
    96d8:	00009709 	.word	0x00009709
    96dc:	000096f9 	.word	0x000096f9
    96e0:	00009709 	.word	0x00009709
    96e4:	00009713 	.word	0x00009713
    96e8:	00009709 	.word	0x00009709
    96ec:	00009709 	.word	0x00009709
    96f0:	00009709 	.word	0x00009709
    96f4:	000096f9 	.word	0x000096f9
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
    96f8:	68fb      	ldr	r3, [r7, #12]
    96fa:	2b00      	cmp	r3, #0
    96fc:	d10b      	bne.n	9716 <OSTimeDly+0x92>
                *p_err = OS_ERR_TIME_ZERO_DLY;
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	f247 227e 	movw	r2, #29310	; 0x727e
    9704:	801a      	strh	r2, [r3, #0]
                 return;
    9706:	e08f      	b.n	9828 <OSTimeDly+0x1a4>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	f645 6225 	movw	r2, #24101	; 0x5e25
    970e:	801a      	strh	r2, [r3, #0]
             return;
    9710:	e08a      	b.n	9828 <OSTimeDly+0x1a4>
                 return;
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
    9712:	bf00      	nop
    9714:	e000      	b.n	9718 <OSTimeDly+0x94>
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
                *p_err = OS_ERR_TIME_ZERO_DLY;
                 return;
             }
             break;
    9716:	bf00      	nop
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
    9718:	f00e fb64 	bl	17de4 <CPU_SR_Save>
    971c:	6178      	str	r0, [r7, #20]
    971e:	f7f8 f8cb 	bl	18b8 <CPU_IntDisMeasStart>
    9722:	f643 5350 	movw	r3, #15696	; 0x3d50
    9726:	f2c1 0300 	movt	r3, #4096	; 0x1000
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	f103 0301 	add.w	r3, r3, #1
    9730:	b2da      	uxtb	r2, r3
    9732:	f643 5350 	movw	r3, #15696	; 0x3d50
    9736:	f2c1 0300 	movt	r3, #4096	; 0x1000
    973a:	701a      	strb	r2, [r3, #0]
    973c:	f643 5350 	movw	r3, #15696	; 0x3d50
    9740:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	2b01      	cmp	r3, #1
    9748:	d101      	bne.n	974e <OSTimeDly+0xca>
    974a:	f006 f853 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    974e:	f7f8 f8df 	bl	1910 <CPU_IntDisMeasStop>
    9752:	6978      	ldr	r0, [r7, #20]
    9754:	f00e fb4a 	bl	17dec <CPU_SR_Restore>
    OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
    9758:	f244 135c 	movw	r3, #16732	; 0x415c
    975c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9760:	681b      	ldr	r3, [r3, #0]
    9762:	f04f 0201 	mov.w	r2, #1
    9766:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    OS_TickListInsert(OSTCBCurPtr,
    976a:	f244 135c 	movw	r3, #16732	; 0x415c
    976e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9772:	681a      	ldr	r2, [r3, #0]
    9774:	897b      	ldrh	r3, [r7, #10]
    9776:	4610      	mov	r0, r2
    9778:	68f9      	ldr	r1, [r7, #12]
    977a:	461a      	mov	r2, r3
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	f006 f9e7 	bl	fb50 <OS_TickListInsert>
                      dly,
                      opt,
                      p_err);
    if (*p_err != OS_ERR_NONE) {
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	881b      	ldrh	r3, [r3, #0]
    9786:	2b00      	cmp	r3, #0
    9788:	d020      	beq.n	97cc <OSTimeDly+0x148>
         OS_CRITICAL_EXIT_NO_SCHED();
    978a:	f00e fb2b 	bl	17de4 <CPU_SR_Save>
    978e:	6178      	str	r0, [r7, #20]
    9790:	f7f8 f892 	bl	18b8 <CPU_IntDisMeasStart>
    9794:	f643 5350 	movw	r3, #15696	; 0x3d50
    9798:	f2c1 0300 	movt	r3, #4096	; 0x1000
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	f103 33ff 	add.w	r3, r3, #4294967295
    97a2:	b2da      	uxtb	r2, r3
    97a4:	f643 5350 	movw	r3, #15696	; 0x3d50
    97a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    97ac:	701a      	strb	r2, [r3, #0]
    97ae:	f643 5350 	movw	r3, #15696	; 0x3d50
    97b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d101      	bne.n	97c0 <OSTimeDly+0x13c>
    97bc:	f006 f82c 	bl	f818 <OS_SchedLockTimeMeasStop>
    97c0:	f7f8 f8a6 	bl	1910 <CPU_IntDisMeasStop>
    97c4:	6978      	ldr	r0, [r7, #20]
    97c6:	f00e fb11 	bl	17dec <CPU_SR_Restore>
         return;
    97ca:	e02d      	b.n	9828 <OSTimeDly+0x1a4>
    }
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
    97cc:	f244 135c 	movw	r3, #16732	; 0x415c
    97d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    97d4:	681b      	ldr	r3, [r3, #0]
    97d6:	4618      	mov	r0, r3
    97d8:	f005 ff6e 	bl	f6b8 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
    97dc:	f00e fb02 	bl	17de4 <CPU_SR_Save>
    97e0:	6178      	str	r0, [r7, #20]
    97e2:	f7f8 f869 	bl	18b8 <CPU_IntDisMeasStart>
    97e6:	f643 5350 	movw	r3, #15696	; 0x3d50
    97ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    97ee:	781b      	ldrb	r3, [r3, #0]
    97f0:	f103 33ff 	add.w	r3, r3, #4294967295
    97f4:	b2da      	uxtb	r2, r3
    97f6:	f643 5350 	movw	r3, #15696	; 0x3d50
    97fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    97fe:	701a      	strb	r2, [r3, #0]
    9800:	f643 5350 	movw	r3, #15696	; 0x3d50
    9804:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	2b00      	cmp	r3, #0
    980c:	d101      	bne.n	9812 <OSTimeDly+0x18e>
    980e:	f006 f803 	bl	f818 <OS_SchedLockTimeMeasStop>
    9812:	f7f8 f87d 	bl	1910 <CPU_IntDisMeasStop>
    9816:	6978      	ldr	r0, [r7, #20]
    9818:	f00e fae8 	bl	17dec <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
    981c:	f004 ff00 	bl	e620 <OSSched>
   *p_err = OS_ERR_NONE;
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	f04f 0200 	mov.w	r2, #0
    9826:	801a      	strh	r2, [r3, #0]
}
    9828:	f107 0718 	add.w	r7, r7, #24
    982c:	46bd      	mov	sp, r7
    982e:	bd80      	pop	{r7, pc}

00009830 <OSTimeDlyHMSM>:
                     CPU_INT16U  minutes,
                     CPU_INT16U  seconds,
                     CPU_INT32U  milli,
                     OS_OPT      opt,
                     OS_ERR     *p_err)
{
    9830:	b580      	push	{r7, lr}
    9832:	b088      	sub	sp, #32
    9834:	af00      	add	r7, sp, #0
    9836:	607b      	str	r3, [r7, #4]
    9838:	4603      	mov	r3, r0
    983a:	81fb      	strh	r3, [r7, #14]
    983c:	460b      	mov	r3, r1
    983e:	81bb      	strh	r3, [r7, #12]
    9840:	4613      	mov	r3, r2
    9842:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
    9844:	f04f 0300 	mov.w	r3, #0
    9848:	61fb      	str	r3, [r7, #28]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
    984a:	f244 1381 	movw	r3, #16769	; 0x4181
    984e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	2b00      	cmp	r3, #0
    9856:	d004      	beq.n	9862 <OSTimeDlyHMSM+0x32>
       *p_err = OS_ERR_TIME_DLY_ISR;
    9858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    985a:	f247 2275 	movw	r2, #29301	; 0x7275
    985e:	801a      	strh	r2, [r3, #0]
        return;
    9860:	e150      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
    9862:	f643 5350 	movw	r3, #15696	; 0x3d50
    9866:	f2c1 0300 	movt	r3, #4096	; 0x1000
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	2b00      	cmp	r3, #0
    986e:	d004      	beq.n	987a <OSTimeDlyHMSM+0x4a>
       *p_err = OS_ERR_SCHED_LOCKED;
    9870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9872:	f646 5262 	movw	r2, #28002	; 0x6d62
    9876:	801a      	strh	r2, [r3, #0]
        return;
    9878:	e144      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
    987a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    987c:	f003 030e 	and.w	r3, r3, #14
    9880:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
    9882:	8b7b      	ldrh	r3, [r7, #26]
    9884:	2b08      	cmp	r3, #8
    9886:	d826      	bhi.n	98d6 <OSTimeDlyHMSM+0xa6>
    9888:	a001      	add	r0, pc, #4	; (adr r0, 9890 <OSTimeDlyHMSM+0x60>)
    988a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    988e:	bf00      	nop
    9890:	000098b5 	.word	0x000098b5
    9894:	000098d7 	.word	0x000098d7
    9898:	000098b5 	.word	0x000098b5
    989c:	000098d7 	.word	0x000098d7
    98a0:	000098e1 	.word	0x000098e1
    98a4:	000098d7 	.word	0x000098d7
    98a8:	000098d7 	.word	0x000098d7
    98ac:	000098d7 	.word	0x000098d7
    98b0:	000098b5 	.word	0x000098b5
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d114      	bne.n	98e4 <OSTimeDlyHMSM+0xb4>
                 if (seconds == (CPU_INT16U)0u) {
    98ba:	897b      	ldrh	r3, [r7, #10]
    98bc:	2b00      	cmp	r3, #0
    98be:	d111      	bne.n	98e4 <OSTimeDlyHMSM+0xb4>
                     if (minutes == (CPU_INT16U)0u) {
    98c0:	89bb      	ldrh	r3, [r7, #12]
    98c2:	2b00      	cmp	r3, #0
    98c4:	d10e      	bne.n	98e4 <OSTimeDlyHMSM+0xb4>
                         if (hours == (CPU_INT16U)0u) {
    98c6:	89fb      	ldrh	r3, [r7, #14]
    98c8:	2b00      	cmp	r3, #0
    98ca:	d10b      	bne.n	98e4 <OSTimeDlyHMSM+0xb4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
    98cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    98ce:	f247 227e 	movw	r2, #29310	; 0x727e
    98d2:	801a      	strh	r2, [r3, #0]
                             return;
    98d4:	e116      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
    98d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    98d8:	f645 6225 	movw	r2, #24101	; 0x5e25
    98dc:	801a      	strh	r2, [r3, #0]
             return;
    98de:	e111      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
                 }
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
    98e0:	bf00      	nop
    98e2:	e000      	b.n	98e6 <OSTimeDlyHMSM+0xb6>
                             return;
                         }
                     }
                 }
             }
             break;
    98e4:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, (OS_OPT)~DEF_OPT_TIME_OPTS_MASK);
    98e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    98e8:	f64f 73e1 	movw	r3, #65505	; 0xffe1
    98ec:	4013      	ands	r3, r2
    98ee:	2b00      	cmp	r3, #0
    98f0:	bf0c      	ite	eq
    98f2:	2300      	moveq	r3, #0
    98f4:	2301      	movne	r3, #1
    98f6:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
    98f8:	7e7b      	ldrb	r3, [r7, #25]
    98fa:	2b01      	cmp	r3, #1
    98fc:	d104      	bne.n	9908 <OSTimeDlyHMSM+0xd8>
       *p_err = OS_ERR_OPT_INVALID;
    98fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9900:	f645 6225 	movw	r2, #24101	; 0x5e25
    9904:	801a      	strh	r2, [r3, #0]
        return;
    9906:	e0fd      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
    9908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    990a:	f003 0310 	and.w	r3, r3, #16
    990e:	2b00      	cmp	r3, #0
    9910:	bf0c      	ite	eq
    9912:	2300      	moveq	r3, #0
    9914:	2301      	movne	r3, #1
    9916:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
    9918:	7e3b      	ldrb	r3, [r7, #24]
    991a:	2b01      	cmp	r3, #1
    991c:	d021      	beq.n	9962 <OSTimeDlyHMSM+0x132>
         if (milli   > (CPU_INT32U)999u) {
    991e:	687a      	ldr	r2, [r7, #4]
    9920:	f240 33e7 	movw	r3, #999	; 0x3e7
    9924:	429a      	cmp	r2, r3
    9926:	d904      	bls.n	9932 <OSTimeDlyHMSM+0x102>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
    9928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    992a:	f247 227b 	movw	r2, #29307	; 0x727b
    992e:	801a      	strh	r2, [r3, #0]
             return;
    9930:	e0e8      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
         }
         if (seconds > (CPU_INT16U)59u) {
    9932:	897b      	ldrh	r3, [r7, #10]
    9934:	2b3b      	cmp	r3, #59	; 0x3b
    9936:	d904      	bls.n	9942 <OSTimeDlyHMSM+0x112>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
    9938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    993a:	f247 227a 	movw	r2, #29306	; 0x727a
    993e:	801a      	strh	r2, [r3, #0]
             return;
    9940:	e0e0      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
         }
         if (minutes > (CPU_INT16U)59u) {
    9942:	89bb      	ldrh	r3, [r7, #12]
    9944:	2b3b      	cmp	r3, #59	; 0x3b
    9946:	d904      	bls.n	9952 <OSTimeDlyHMSM+0x122>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
    9948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    994a:	f247 2279 	movw	r2, #29305	; 0x7279
    994e:	801a      	strh	r2, [r3, #0]
             return;
    9950:	e0d8      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
         }
         if (hours   > (CPU_INT16U)99u) {
    9952:	89fb      	ldrh	r3, [r7, #14]
    9954:	2b63      	cmp	r3, #99	; 0x63
    9956:	d918      	bls.n	998a <OSTimeDlyHMSM+0x15a>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
    9958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    995a:	f247 2278 	movw	r2, #29304	; 0x7278
    995e:	801a      	strh	r2, [r3, #0]
             return;
    9960:	e0d0      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
    9962:	89ba      	ldrh	r2, [r7, #12]
    9964:	f242 730f 	movw	r3, #9999	; 0x270f
    9968:	429a      	cmp	r2, r3
    996a:	d904      	bls.n	9976 <OSTimeDlyHMSM+0x146>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
    996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    996e:	f247 2279 	movw	r2, #29305	; 0x7279
    9972:	801a      	strh	r2, [r3, #0]
             return;
    9974:	e0c6      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
         }
         if (hours   > (CPU_INT16U)999u) {
    9976:	89fa      	ldrh	r2, [r7, #14]
    9978:	f240 33e7 	movw	r3, #999	; 0x3e7
    997c:	429a      	cmp	r2, r3
    997e:	d904      	bls.n	998a <OSTimeDlyHMSM+0x15a>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
    9980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9982:	f247 2278 	movw	r2, #29304	; 0x7278
    9986:	801a      	strh	r2, [r3, #0]
             return;
    9988:	e0bc      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
    998a:	f64c 134c 	movw	r3, #51532	; 0xc94c
    998e:	f2c0 0302 	movt	r3, #2
    9992:	681b      	ldr	r3, [r3, #0]
    9994:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
    9996:	89fb      	ldrh	r3, [r7, #14]
    9998:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    999c:	fb02 f103 	mul.w	r1, r2, r3
    99a0:	89ba      	ldrh	r2, [r7, #12]
    99a2:	4613      	mov	r3, r2
    99a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    99a8:	1a9b      	subs	r3, r3, r2
    99aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99ae:	18ca      	adds	r2, r1, r3
    99b0:	897b      	ldrh	r3, [r7, #10]
    99b2:	18d3      	adds	r3, r2, r3
    99b4:	697a      	ldr	r2, [r7, #20]
    99b6:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
    99ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    99be:	697b      	ldr	r3, [r7, #20]
    99c0:	fbb1 f1f3 	udiv	r1, r1, r3
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	18cb      	adds	r3, r1, r3
    99c8:	6979      	ldr	r1, [r7, #20]
    99ca:	fb01 f103 	mul.w	r1, r1, r3
    99ce:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    99d2:	f2c1 0362 	movt	r3, #4194	; 0x1062
    99d6:	fba3 0301 	umull	r0, r3, r3, r1
    99da:	ea4f 1393 	mov.w	r3, r3, lsr #6
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
    99de:	18d3      	adds	r3, r2, r3
    99e0:	613b      	str	r3, [r7, #16]
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;

    if (ticks > (OS_TICK)0u) {
    99e2:	693b      	ldr	r3, [r7, #16]
    99e4:	2b00      	cmp	r3, #0
    99e6:	f000 8089 	beq.w	9afc <OSTimeDlyHMSM+0x2cc>
        OS_CRITICAL_ENTER();
    99ea:	f00e f9fb 	bl	17de4 <CPU_SR_Save>
    99ee:	61f8      	str	r0, [r7, #28]
    99f0:	f7f7 ff62 	bl	18b8 <CPU_IntDisMeasStart>
    99f4:	f643 5350 	movw	r3, #15696	; 0x3d50
    99f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    99fc:	781b      	ldrb	r3, [r3, #0]
    99fe:	f103 0301 	add.w	r3, r3, #1
    9a02:	b2da      	uxtb	r2, r3
    9a04:	f643 5350 	movw	r3, #15696	; 0x3d50
    9a08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a0c:	701a      	strb	r2, [r3, #0]
    9a0e:	f643 5350 	movw	r3, #15696	; 0x3d50
    9a12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a16:	781b      	ldrb	r3, [r3, #0]
    9a18:	2b01      	cmp	r3, #1
    9a1a:	d101      	bne.n	9a20 <OSTimeDlyHMSM+0x1f0>
    9a1c:	f005 feea 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    9a20:	f7f7 ff76 	bl	1910 <CPU_IntDisMeasStop>
    9a24:	69f8      	ldr	r0, [r7, #28]
    9a26:	f00e f9e1 	bl	17dec <CPU_SR_Restore>
        OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
    9a2a:	f244 135c 	movw	r3, #16732	; 0x415c
    9a2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a32:	681b      	ldr	r3, [r3, #0]
    9a34:	f04f 0201 	mov.w	r2, #1
    9a38:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
        OS_TickListInsert(OSTCBCurPtr,
    9a3c:	f244 135c 	movw	r3, #16732	; 0x415c
    9a40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a44:	681a      	ldr	r2, [r3, #0]
    9a46:	8b7b      	ldrh	r3, [r7, #26]
    9a48:	4610      	mov	r0, r2
    9a4a:	6939      	ldr	r1, [r7, #16]
    9a4c:	461a      	mov	r2, r3
    9a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a50:	f006 f87e 	bl	fb50 <OS_TickListInsert>
                          ticks,
                          opt_time,
                          p_err);
        if (*p_err != OS_ERR_NONE) {
    9a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a56:	881b      	ldrh	r3, [r3, #0]
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d020      	beq.n	9a9e <OSTimeDlyHMSM+0x26e>
             OS_CRITICAL_EXIT_NO_SCHED();
    9a5c:	f00e f9c2 	bl	17de4 <CPU_SR_Save>
    9a60:	61f8      	str	r0, [r7, #28]
    9a62:	f7f7 ff29 	bl	18b8 <CPU_IntDisMeasStart>
    9a66:	f643 5350 	movw	r3, #15696	; 0x3d50
    9a6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a6e:	781b      	ldrb	r3, [r3, #0]
    9a70:	f103 33ff 	add.w	r3, r3, #4294967295
    9a74:	b2da      	uxtb	r2, r3
    9a76:	f643 5350 	movw	r3, #15696	; 0x3d50
    9a7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a7e:	701a      	strb	r2, [r3, #0]
    9a80:	f643 5350 	movw	r3, #15696	; 0x3d50
    9a84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9a88:	781b      	ldrb	r3, [r3, #0]
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d101      	bne.n	9a92 <OSTimeDlyHMSM+0x262>
    9a8e:	f005 fec3 	bl	f818 <OS_SchedLockTimeMeasStop>
    9a92:	f7f7 ff3d 	bl	1910 <CPU_IntDisMeasStop>
    9a96:	69f8      	ldr	r0, [r7, #28]
    9a98:	f00e f9a8 	bl	17dec <CPU_SR_Restore>
             return;
    9a9c:	e032      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
        }
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
    9a9e:	f244 135c 	movw	r3, #16732	; 0x415c
    9aa2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9aa6:	681b      	ldr	r3, [r3, #0]
    9aa8:	4618      	mov	r0, r3
    9aaa:	f005 fe05 	bl	f6b8 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
    9aae:	f00e f999 	bl	17de4 <CPU_SR_Save>
    9ab2:	61f8      	str	r0, [r7, #28]
    9ab4:	f7f7 ff00 	bl	18b8 <CPU_IntDisMeasStart>
    9ab8:	f643 5350 	movw	r3, #15696	; 0x3d50
    9abc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	f103 33ff 	add.w	r3, r3, #4294967295
    9ac6:	b2da      	uxtb	r2, r3
    9ac8:	f643 5350 	movw	r3, #15696	; 0x3d50
    9acc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	f643 5350 	movw	r3, #15696	; 0x3d50
    9ad6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ada:	781b      	ldrb	r3, [r3, #0]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d101      	bne.n	9ae4 <OSTimeDlyHMSM+0x2b4>
    9ae0:	f005 fe9a 	bl	f818 <OS_SchedLockTimeMeasStop>
    9ae4:	f7f7 ff14 	bl	1910 <CPU_IntDisMeasStop>
    9ae8:	69f8      	ldr	r0, [r7, #28]
    9aea:	f00e f97f 	bl	17dec <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
    9aee:	f004 fd97 	bl	e620 <OSSched>
       *p_err = OS_ERR_NONE;
    9af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9af4:	f04f 0200 	mov.w	r2, #0
    9af8:	801a      	strh	r2, [r3, #0]
    9afa:	e003      	b.n	9b04 <OSTimeDlyHMSM+0x2d4>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
    9afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9afe:	f247 227e 	movw	r2, #29310	; 0x727e
    9b02:	801a      	strh	r2, [r3, #0]
    }
}
    9b04:	f107 0720 	add.w	r7, r7, #32
    9b08:	46bd      	mov	sp, r7
    9b0a:	bd80      	pop	{r7, pc}

00009b0c <OSTimeDlyResume>:
*/

#if OS_CFG_TIME_DLY_RESUME_EN > 0u
void  OSTimeDlyResume (OS_TCB  *p_tcb,
                       OS_ERR  *p_err)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b084      	sub	sp, #16
    9b10:	af00      	add	r7, sp, #0
    9b12:	6078      	str	r0, [r7, #4]
    9b14:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    9b16:	f04f 0300 	mov.w	r3, #0
    9b1a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
    9b1c:	f244 1381 	movw	r3, #16769	; 0x4181
    9b20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9b24:	781b      	ldrb	r3, [r3, #0]
    9b26:	2b00      	cmp	r3, #0
    9b28:	d004      	beq.n	9b34 <OSTimeDlyResume+0x28>
        *p_err = OS_ERR_TIME_DLY_RESUME_ISR;
    9b2a:	683b      	ldr	r3, [r7, #0]
    9b2c:	f247 2276 	movw	r2, #29302	; 0x7276
    9b30:	801a      	strh	r2, [r3, #0]
        return;
    9b32:	e100      	b.n	9d36 <OSTimeDlyResume+0x22a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_tcb == (OS_TCB *)0u) {                            /* Not possible for the running task to be delayed!       */
    9b34:	687b      	ldr	r3, [r7, #4]
    9b36:	2b00      	cmp	r3, #0
    9b38:	d104      	bne.n	9b44 <OSTimeDlyResume+0x38>
       *p_err = OS_ERR_TASK_NOT_DLY;
    9b3a:	683b      	ldr	r3, [r7, #0]
    9b3c:	f247 1251 	movw	r2, #29009	; 0x7151
    9b40:	801a      	strh	r2, [r3, #0]
        return;
    9b42:	e0f8      	b.n	9d36 <OSTimeDlyResume+0x22a>
    }
#endif

    CPU_CRITICAL_ENTER();
    9b44:	f00e f94e 	bl	17de4 <CPU_SR_Save>
    9b48:	60f8      	str	r0, [r7, #12]
    9b4a:	f7f7 feb5 	bl	18b8 <CPU_IntDisMeasStart>
    switch (p_tcb->TaskState) {
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    9b54:	2b07      	cmp	r3, #7
    9b56:	f200 80e2 	bhi.w	9d1e <OSTimeDlyResume+0x212>
    9b5a:	a201      	add	r2, pc, #4	; (adr r2, 9b60 <OSTimeDlyResume+0x54>)
    9b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9b60:	00009b81 	.word	0x00009b81
    9b64:	00009b95 	.word	0x00009b95
    9b68:	00009c2b 	.word	0x00009c2b
    9b6c:	00009c3f 	.word	0x00009c3f
    9b70:	00009c53 	.word	0x00009c53
    9b74:	00009c67 	.word	0x00009c67
    9b78:	00009cf7 	.word	0x00009cf7
    9b7c:	00009d0b 	.word	0x00009d0b
        case OS_TASK_STATE_RDY:                             /* Cannot Abort delay if task is ready                    */
             CPU_CRITICAL_EXIT();
    9b80:	f7f7 fec6 	bl	1910 <CPU_IntDisMeasStop>
    9b84:	68f8      	ldr	r0, [r7, #12]
    9b86:	f00e f931 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9b8a:	683b      	ldr	r3, [r7, #0]
    9b8c:	f247 1251 	movw	r2, #29009	; 0x7151
    9b90:	801a      	strh	r2, [r3, #0]
             break;
    9b92:	e0ce      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_DLY:
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    9b94:	f643 5350 	movw	r3, #15696	; 0x3d50
    9b98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9b9c:	781b      	ldrb	r3, [r3, #0]
    9b9e:	f103 0301 	add.w	r3, r3, #1
    9ba2:	b2da      	uxtb	r2, r3
    9ba4:	f643 5350 	movw	r3, #15696	; 0x3d50
    9ba8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9bac:	701a      	strb	r2, [r3, #0]
    9bae:	f643 5350 	movw	r3, #15696	; 0x3d50
    9bb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9bb6:	781b      	ldrb	r3, [r3, #0]
    9bb8:	2b01      	cmp	r3, #1
    9bba:	d101      	bne.n	9bc0 <OSTimeDlyResume+0xb4>
    9bbc:	f005 fe1a 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    9bc0:	f7f7 fea6 	bl	1910 <CPU_IntDisMeasStop>
    9bc4:	68f8      	ldr	r0, [r7, #12]
    9bc6:	f00e f911 	bl	17dec <CPU_SR_Restore>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	f04f 0200 	mov.w	r2, #0
    9bd0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
    9bd4:	6878      	ldr	r0, [r7, #4]
    9bd6:	f006 f8ed 	bl	fdb4 <OS_TickListRemove>
             OS_RdyListInsert(p_tcb);                       /* Add to ready list                                      */
    9bda:	6878      	ldr	r0, [r7, #4]
    9bdc:	f005 fc6e 	bl	f4bc <OS_RdyListInsert>
             OS_CRITICAL_EXIT_NO_SCHED();
    9be0:	f00e f900 	bl	17de4 <CPU_SR_Save>
    9be4:	60f8      	str	r0, [r7, #12]
    9be6:	f7f7 fe67 	bl	18b8 <CPU_IntDisMeasStart>
    9bea:	f643 5350 	movw	r3, #15696	; 0x3d50
    9bee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9bf2:	781b      	ldrb	r3, [r3, #0]
    9bf4:	f103 33ff 	add.w	r3, r3, #4294967295
    9bf8:	b2da      	uxtb	r2, r3
    9bfa:	f643 5350 	movw	r3, #15696	; 0x3d50
    9bfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c02:	701a      	strb	r2, [r3, #0]
    9c04:	f643 5350 	movw	r3, #15696	; 0x3d50
    9c08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	2b00      	cmp	r3, #0
    9c10:	d101      	bne.n	9c16 <OSTimeDlyResume+0x10a>
    9c12:	f005 fe01 	bl	f818 <OS_SchedLockTimeMeasStop>
    9c16:	f7f7 fe7b 	bl	1910 <CPU_IntDisMeasStop>
    9c1a:	68f8      	ldr	r0, [r7, #12]
    9c1c:	f00e f8e6 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_NONE;
    9c20:	683b      	ldr	r3, [r7, #0]
    9c22:	f04f 0200 	mov.w	r2, #0
    9c26:	801a      	strh	r2, [r3, #0]
             break;
    9c28:	e083      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_PEND:
             CPU_CRITICAL_EXIT();
    9c2a:	f7f7 fe71 	bl	1910 <CPU_IntDisMeasStop>
    9c2e:	68f8      	ldr	r0, [r7, #12]
    9c30:	f00e f8dc 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9c34:	683b      	ldr	r3, [r7, #0]
    9c36:	f247 1251 	movw	r2, #29009	; 0x7151
    9c3a:	801a      	strh	r2, [r3, #0]
             break;
    9c3c:	e079      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
    9c3e:	f7f7 fe67 	bl	1910 <CPU_IntDisMeasStop>
    9c42:	68f8      	ldr	r0, [r7, #12]
    9c44:	f00e f8d2 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9c48:	683b      	ldr	r3, [r7, #0]
    9c4a:	f247 1251 	movw	r2, #29009	; 0x7151
    9c4e:	801a      	strh	r2, [r3, #0]
             break;
    9c50:	e06f      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_SUSPENDED:
             CPU_CRITICAL_EXIT();
    9c52:	f7f7 fe5d 	bl	1910 <CPU_IntDisMeasStop>
    9c56:	68f8      	ldr	r0, [r7, #12]
    9c58:	f00e f8c8 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9c5c:	683b      	ldr	r3, [r7, #0]
    9c5e:	f247 1251 	movw	r2, #29009	; 0x7151
    9c62:	801a      	strh	r2, [r3, #0]
             break;
    9c64:	e065      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_DLY_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    9c66:	f643 5350 	movw	r3, #15696	; 0x3d50
    9c6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	f103 0301 	add.w	r3, r3, #1
    9c74:	b2da      	uxtb	r2, r3
    9c76:	f643 5350 	movw	r3, #15696	; 0x3d50
    9c7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	f643 5350 	movw	r3, #15696	; 0x3d50
    9c84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	2b01      	cmp	r3, #1
    9c8c:	d101      	bne.n	9c92 <OSTimeDlyResume+0x186>
    9c8e:	f005 fdb1 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    9c92:	f7f7 fe3d 	bl	1910 <CPU_IntDisMeasStop>
    9c96:	68f8      	ldr	r0, [r7, #12]
    9c98:	f00e f8a8 	bl	17dec <CPU_SR_Restore>
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	f04f 0204 	mov.w	r2, #4
    9ca2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
    9ca6:	6878      	ldr	r0, [r7, #4]
    9ca8:	f006 f884 	bl	fdb4 <OS_TickListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
    9cac:	f00e f89a 	bl	17de4 <CPU_SR_Save>
    9cb0:	60f8      	str	r0, [r7, #12]
    9cb2:	f7f7 fe01 	bl	18b8 <CPU_IntDisMeasStart>
    9cb6:	f643 5350 	movw	r3, #15696	; 0x3d50
    9cba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	f103 33ff 	add.w	r3, r3, #4294967295
    9cc4:	b2da      	uxtb	r2, r3
    9cc6:	f643 5350 	movw	r3, #15696	; 0x3d50
    9cca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9cce:	701a      	strb	r2, [r3, #0]
    9cd0:	f643 5350 	movw	r3, #15696	; 0x3d50
    9cd4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9cd8:	781b      	ldrb	r3, [r3, #0]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d101      	bne.n	9ce2 <OSTimeDlyResume+0x1d6>
    9cde:	f005 fd9b 	bl	f818 <OS_SchedLockTimeMeasStop>
    9ce2:	f7f7 fe15 	bl	1910 <CPU_IntDisMeasStop>
    9ce6:	68f8      	ldr	r0, [r7, #12]
    9ce8:	f00e f880 	bl	17dec <CPU_SR_Restore>
            *p_err            = OS_ERR_TASK_SUSPENDED;
    9cec:	683b      	ldr	r3, [r7, #0]
    9cee:	f247 1259 	movw	r2, #29017	; 0x7159
    9cf2:	801a      	strh	r2, [r3, #0]
             break;
    9cf4:	e01d      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_PEND_SUSPENDED:
             CPU_CRITICAL_EXIT();
    9cf6:	f7f7 fe0b 	bl	1910 <CPU_IntDisMeasStop>
    9cfa:	68f8      	ldr	r0, [r7, #12]
    9cfc:	f00e f876 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9d00:	683b      	ldr	r3, [r7, #0]
    9d02:	f247 1251 	movw	r2, #29009	; 0x7151
    9d06:	801a      	strh	r2, [r3, #0]
             break;
    9d08:	e013      	b.n	9d32 <OSTimeDlyResume+0x226>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             CPU_CRITICAL_EXIT();
    9d0a:	f7f7 fe01 	bl	1910 <CPU_IntDisMeasStop>
    9d0e:	68f8      	ldr	r0, [r7, #12]
    9d10:	f00e f86c 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_DLY;
    9d14:	683b      	ldr	r3, [r7, #0]
    9d16:	f247 1251 	movw	r2, #29009	; 0x7151
    9d1a:	801a      	strh	r2, [r3, #0]
             break;
    9d1c:	e009      	b.n	9d32 <OSTimeDlyResume+0x226>

        default:
             CPU_CRITICAL_EXIT();
    9d1e:	f7f7 fdf7 	bl	1910 <CPU_IntDisMeasStop>
    9d22:	68f8      	ldr	r0, [r7, #12]
    9d24:	f00e f862 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
    9d28:	683b      	ldr	r3, [r7, #0]
    9d2a:	f646 622a 	movw	r2, #28202	; 0x6e2a
    9d2e:	801a      	strh	r2, [r3, #0]
             break;
    9d30:	bf00      	nop
    }

    OSSched();
    9d32:	f004 fc75 	bl	e620 <OSSched>
}
    9d36:	f107 0710 	add.w	r7, r7, #16
    9d3a:	46bd      	mov	sp, r7
    9d3c:	bd80      	pop	{r7, pc}
    9d3e:	bf00      	nop

00009d40 <OSTimeGet>:
* Returns    : The current value of OSTickCtr
************************************************************************************************************************
*/

OS_TICK  OSTimeGet (OS_ERR  *p_err)
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b084      	sub	sp, #16
    9d44:	af00      	add	r7, sp, #0
    9d46:	6078      	str	r0, [r7, #4]
    OS_TICK  ticks;
    CPU_SR_ALLOC();
    9d48:	f04f 0300 	mov.w	r3, #0
    9d4c:	60fb      	str	r3, [r7, #12]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    CPU_CRITICAL_ENTER();
    9d4e:	f00e f849 	bl	17de4 <CPU_SR_Save>
    9d52:	60f8      	str	r0, [r7, #12]
    9d54:	f7f7 fdb0 	bl	18b8 <CPU_IntDisMeasStart>
    ticks = OSTickCtr;
    9d58:	f244 4324 	movw	r3, #17444	; 0x4424
    9d5c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9d60:	681b      	ldr	r3, [r3, #0]
    9d62:	60bb      	str	r3, [r7, #8]
    CPU_CRITICAL_EXIT();
    9d64:	f7f7 fdd4 	bl	1910 <CPU_IntDisMeasStop>
    9d68:	68f8      	ldr	r0, [r7, #12]
    9d6a:	f00e f83f 	bl	17dec <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	f04f 0200 	mov.w	r2, #0
    9d74:	801a      	strh	r2, [r3, #0]
    return (ticks);
    9d76:	68bb      	ldr	r3, [r7, #8]
}
    9d78:	4618      	mov	r0, r3
    9d7a:	f107 0710 	add.w	r7, r7, #16
    9d7e:	46bd      	mov	sp, r7
    9d80:	bd80      	pop	{r7, pc}
    9d82:	bf00      	nop

00009d84 <OSTimeSet>:
************************************************************************************************************************
*/

void  OSTimeSet (OS_TICK   ticks,
                 OS_ERR   *p_err)
{
    9d84:	b580      	push	{r7, lr}
    9d86:	b084      	sub	sp, #16
    9d88:	af00      	add	r7, sp, #0
    9d8a:	6078      	str	r0, [r7, #4]
    9d8c:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
    9d8e:	f04f 0300 	mov.w	r3, #0
    9d92:	60fb      	str	r3, [r7, #12]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    CPU_CRITICAL_ENTER();
    9d94:	f00e f826 	bl	17de4 <CPU_SR_Save>
    9d98:	60f8      	str	r0, [r7, #12]
    9d9a:	f7f7 fd8d 	bl	18b8 <CPU_IntDisMeasStart>
    OSTickCtr = ticks;
    9d9e:	f244 4324 	movw	r3, #17444	; 0x4424
    9da2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9da6:	687a      	ldr	r2, [r7, #4]
    9da8:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
    9daa:	f7f7 fdb1 	bl	1910 <CPU_IntDisMeasStop>
    9dae:	68f8      	ldr	r0, [r7, #12]
    9db0:	f00e f81c 	bl	17dec <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
    9db4:	683b      	ldr	r3, [r7, #0]
    9db6:	f04f 0200 	mov.w	r2, #0
    9dba:	801a      	strh	r2, [r3, #0]
}
    9dbc:	f107 0710 	add.w	r7, r7, #16
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bd80      	pop	{r7, pc}

00009dc4 <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	b086      	sub	sp, #24
    9dc8:	af04      	add	r7, sp, #16
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
    9dca:	f7f6 fe81 	bl	ad0 <OSTimeTickHook>

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    9dce:	f7f9 faa5 	bl	331c <CPU_TS_TmrRd>
    9dd2:	6078      	str	r0, [r7, #4]
    OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
    9dd4:	f244 0378 	movw	r3, #16504	; 0x4078
    9dd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	461a      	mov	r2, r3
                (void      *)&OSRdyList[OSPrioCur],
    9de0:	4613      	mov	r3, r2
    9de2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    9de6:	189b      	adds	r3, r3, r2
    9de8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9dec:	461a      	mov	r2, r3
    OSTimeTickHook();                                       /* Call user definable hook                               */

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
    9dee:	f643 5364 	movw	r3, #15716	; 0x3d64
    9df2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9df6:	18d3      	adds	r3, r2, r3
    9df8:	f04f 0200 	mov.w	r2, #0
    9dfc:	9200      	str	r2, [sp, #0]
    9dfe:	f04f 0200 	mov.w	r2, #0
    9e02:	9201      	str	r2, [sp, #4]
    9e04:	687a      	ldr	r2, [r7, #4]
    9e06:	9202      	str	r2, [sp, #8]
    9e08:	f107 0202 	add.w	r2, r7, #2
    9e0c:	9203      	str	r2, [sp, #12]
    9e0e:	f644 1054 	movw	r0, #18772	; 0x4954
    9e12:	f6c4 3043 	movt	r0, #19267	; 0x4b43
    9e16:	4619      	mov	r1, r3
    9e18:	f04f 0200 	mov.w	r2, #0
    9e1c:	f04f 0300 	mov.w	r3, #0
    9e20:	f006 fdfc 	bl	10a1c <OS_IntQPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
    9e24:	f107 0708 	add.w	r7, r7, #8
    9e28:	46bd      	mov	sp, r7
    9e2a:	bd80      	pop	{r7, pc}

00009e2c <OSSemCreate>:

void  OSSemCreate (OS_SEM      *p_sem,
                   CPU_CHAR    *p_name,
                   OS_SEM_CTR   cnt,
                   OS_ERR      *p_err)
{
    9e2c:	b580      	push	{r7, lr}
    9e2e:	b086      	sub	sp, #24
    9e30:	af00      	add	r7, sp, #0
    9e32:	60f8      	str	r0, [r7, #12]
    9e34:	60b9      	str	r1, [r7, #8]
    9e36:	607a      	str	r2, [r7, #4]
    9e38:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
    9e3a:	f04f 0300 	mov.w	r3, #0
    9e3e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
    9e40:	f244 1381 	movw	r3, #16769	; 0x4181
    9e44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d004      	beq.n	9e58 <OSSemCreate+0x2c>
        *p_err = OS_ERR_CREATE_ISR;
    9e4e:	683b      	ldr	r3, [r7, #0]
    9e50:	f642 62e1 	movw	r2, #12001	; 0x2ee1
    9e54:	801a      	strh	r2, [r3, #0]
        return;
    9e56:	e03b      	b.n	9ed0 <OSSemCreate+0xa4>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
    9e58:	68fb      	ldr	r3, [r7, #12]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d104      	bne.n	9e68 <OSSemCreate+0x3c>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    9e5e:	683b      	ldr	r3, [r7, #0]
    9e60:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    9e64:	801a      	strh	r2, [r3, #0]
        return;
    9e66:	e033      	b.n	9ed0 <OSSemCreate+0xa4>
    }
#endif

    CPU_CRITICAL_ENTER();
    9e68:	f00d ffbc 	bl	17de4 <CPU_SR_Save>
    9e6c:	6178      	str	r0, [r7, #20]
    9e6e:	f7f7 fd23 	bl	18b8 <CPU_IntDisMeasStart>
    p_sem->Type    = OS_OBJ_TYPE_SEM;                       /* Mark the data structure as a semaphore                 */
    9e72:	68fa      	ldr	r2, [r7, #12]
    9e74:	f244 5353 	movw	r3, #17747	; 0x4553
    9e78:	f2c4 134d 	movt	r3, #16717	; 0x414d
    9e7c:	6013      	str	r3, [r2, #0]
    p_sem->Ctr     = cnt;                                   /* Set semaphore value                                    */
    9e7e:	68fb      	ldr	r3, [r7, #12]
    9e80:	687a      	ldr	r2, [r7, #4]
    9e82:	621a      	str	r2, [r3, #32]
    p_sem->TS      = (CPU_TS)0;
    9e84:	68fb      	ldr	r3, [r7, #12]
    9e86:	f04f 0200 	mov.w	r2, #0
    9e8a:	625a      	str	r2, [r3, #36]	; 0x24
    p_sem->NamePtr = p_name;                                /* Save the name of the semaphore                         */
    9e8c:	68fb      	ldr	r3, [r7, #12]
    9e8e:	68ba      	ldr	r2, [r7, #8]
    9e90:	605a      	str	r2, [r3, #4]
    OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
    9e92:	68fb      	ldr	r3, [r7, #12]
    9e94:	f103 0308 	add.w	r3, r3, #8
    9e98:	4618      	mov	r0, r3
    9e9a:	f005 f83f 	bl	ef1c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_SemDbgListAdd(p_sem);
    9e9e:	68f8      	ldr	r0, [r7, #12]
    9ea0:	f000 fbd2 	bl	a648 <OS_SemDbgListAdd>
#endif
    OSSemQty++;
    9ea4:	f244 4310 	movw	r3, #17424	; 0x4410
    9ea8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9eac:	881b      	ldrh	r3, [r3, #0]
    9eae:	f103 0301 	add.w	r3, r3, #1
    9eb2:	b29a      	uxth	r2, r3
    9eb4:	f244 4310 	movw	r3, #17424	; 0x4410
    9eb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ebc:	801a      	strh	r2, [r3, #0]

    CPU_CRITICAL_EXIT();
    9ebe:	f7f7 fd27 	bl	1910 <CPU_IntDisMeasStop>
    9ec2:	6978      	ldr	r0, [r7, #20]
    9ec4:	f00d ff92 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    9ec8:	683b      	ldr	r3, [r7, #0]
    9eca:	f04f 0200 	mov.w	r2, #0
    9ece:	801a      	strh	r2, [r3, #0]
}
    9ed0:	f107 0718 	add.w	r7, r7, #24
    9ed4:	46bd      	mov	sp, r7
    9ed6:	bd80      	pop	{r7, pc}

00009ed8 <OSSemDel>:

#if OS_CFG_SEM_DEL_EN > 0u
OS_OBJ_QTY  OSSemDel (OS_SEM  *p_sem,
                      OS_OPT   opt,
                      OS_ERR  *p_err)
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	b08c      	sub	sp, #48	; 0x30
    9edc:	af00      	add	r7, sp, #0
    9ede:	60f8      	str	r0, [r7, #12]
    9ee0:	460b      	mov	r3, r1
    9ee2:	607a      	str	r2, [r7, #4]
    9ee4:	817b      	strh	r3, [r7, #10]
    OS_OBJ_QTY     nbr_tasks;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    CPU_SR_ALLOC();
    9ee6:	f04f 0300 	mov.w	r3, #0
    9eea:	62bb      	str	r3, [r7, #40]	; 0x28
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to delete a semaphore from an ISR          */
    9eec:	f244 1381 	movw	r3, #16769	; 0x4181
    9ef0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d006      	beq.n	9f08 <OSSemDel+0x30>
        *p_err = OS_ERR_DEL_ISR;
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	f243 22c9 	movw	r2, #13001	; 0x32c9
    9f00:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    9f02:	f04f 0300 	mov.w	r3, #0
    9f06:	e0cc      	b.n	a0a2 <OSSemDel+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate pointer to semaphore                          */
    9f08:	68fb      	ldr	r3, [r7, #12]
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d106      	bne.n	9f1c <OSSemDel+0x44>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    9f0e:	687b      	ldr	r3, [r7, #4]
    9f10:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    9f14:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    9f16:	f04f 0300 	mov.w	r3, #0
    9f1a:	e0c2      	b.n	a0a2 <OSSemDel+0x1ca>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	681a      	ldr	r2, [r3, #0]
    9f20:	f244 5353 	movw	r3, #17747	; 0x4553
    9f24:	f2c4 134d 	movt	r3, #16717	; 0x414d
    9f28:	429a      	cmp	r2, r3
    9f2a:	d006      	beq.n	9f3a <OSSemDel+0x62>
        *p_err = OS_ERR_OBJ_TYPE;
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    9f32:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    9f34:	f04f 0300 	mov.w	r3, #0
    9f38:	e0b3      	b.n	a0a2 <OSSemDel+0x1ca>
    }
#endif

    CPU_CRITICAL_ENTER();
    9f3a:	f00d ff53 	bl	17de4 <CPU_SR_Save>
    9f3e:	62b8      	str	r0, [r7, #40]	; 0x28
    9f40:	f7f7 fcba 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_sem->PendList;
    9f44:	68fb      	ldr	r3, [r7, #12]
    9f46:	f103 0308 	add.w	r3, r3, #8
    9f4a:	627b      	str	r3, [r7, #36]	; 0x24
    cnt         = p_pend_list->NbrEntries;
    9f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f4e:	891b      	ldrh	r3, [r3, #8]
    9f50:	85fb      	strh	r3, [r7, #46]	; 0x2e
    nbr_tasks   = cnt;
    9f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    9f54:	847b      	strh	r3, [r7, #34]	; 0x22
    switch (opt) {
    9f56:	897b      	ldrh	r3, [r7, #10]
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d002      	beq.n	9f62 <OSSemDel+0x8a>
    9f5c:	2b01      	cmp	r3, #1
    9f5e:	d02a      	beq.n	9fb6 <OSSemDel+0xde>
    9f60:	e094      	b.n	a08c <OSSemDel+0x1b4>
        case OS_OPT_DEL_NO_PEND:                            /* Delete semaphore only if no task waiting               */
             if (nbr_tasks == (OS_OBJ_QTY)0) {
    9f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9f64:	2b00      	cmp	r3, #0
    9f66:	d11c      	bne.n	9fa2 <OSSemDel+0xca>
#if OS_CFG_DBG_EN > 0u
                 OS_SemDbgListRemove(p_sem);
    9f68:	68f8      	ldr	r0, [r7, #12]
    9f6a:	f000 fba1 	bl	a6b0 <OS_SemDbgListRemove>
#endif
                 OSSemQty--;
    9f6e:	f244 4310 	movw	r3, #17424	; 0x4410
    9f72:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9f76:	881b      	ldrh	r3, [r3, #0]
    9f78:	f103 33ff 	add.w	r3, r3, #4294967295
    9f7c:	b29a      	uxth	r2, r3
    9f7e:	f244 4310 	movw	r3, #17424	; 0x4410
    9f82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9f86:	801a      	strh	r2, [r3, #0]
                 OS_SemClr(p_sem);
    9f88:	68f8      	ldr	r0, [r7, #12]
    9f8a:	f000 fb3b 	bl	a604 <OS_SemClr>
                 CPU_CRITICAL_EXIT();
    9f8e:	f7f7 fcbf 	bl	1910 <CPU_IntDisMeasStop>
    9f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9f94:	f00d ff2a 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	f04f 0200 	mov.w	r2, #0
    9f9e:	801a      	strh	r2, [r3, #0]
             } else {
                 CPU_CRITICAL_EXIT();
                 *p_err = OS_ERR_TASK_WAITING;
             }
             break;
    9fa0:	e07e      	b.n	a0a0 <OSSemDel+0x1c8>
                 OSSemQty--;
                 OS_SemClr(p_sem);
                 CPU_CRITICAL_EXIT();
                 *p_err = OS_ERR_NONE;
             } else {
                 CPU_CRITICAL_EXIT();
    9fa2:	f7f7 fcb5 	bl	1910 <CPU_IntDisMeasStop>
    9fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9fa8:	f00d ff20 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_TASK_WAITING;
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	f247 125e 	movw	r2, #29022	; 0x715e
    9fb2:	801a      	strh	r2, [r3, #0]
             }
             break;
    9fb4:	e074      	b.n	a0a0 <OSSemDel+0x1c8>

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the semaphore                            */
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    9fb6:	f643 5350 	movw	r3, #15696	; 0x3d50
    9fba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	f103 0301 	add.w	r3, r3, #1
    9fc4:	b2da      	uxtb	r2, r3
    9fc6:	f643 5350 	movw	r3, #15696	; 0x3d50
    9fca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9fce:	701a      	strb	r2, [r3, #0]
    9fd0:	f643 5350 	movw	r3, #15696	; 0x3d50
    9fd4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9fd8:	781b      	ldrb	r3, [r3, #0]
    9fda:	2b01      	cmp	r3, #1
    9fdc:	d101      	bne.n	9fe2 <OSSemDel+0x10a>
    9fde:	f005 fc09 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    9fe2:	f7f7 fc95 	bl	1910 <CPU_IntDisMeasStop>
    9fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9fe8:	f00d ff00 	bl	17dec <CPU_SR_Restore>
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
    9fec:	f7f9 f996 	bl	331c <CPU_TS_TmrRd>
    9ff0:	61f8      	str	r0, [r7, #28]
             while (cnt > 0u) {                             /* Remove all tasks on the pend list                      */
    9ff2:	e00e      	b.n	a012 <OSSemDel+0x13a>
                 p_pend_data = p_pend_list->HeadPtr;
    9ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9ff6:	681b      	ldr	r3, [r3, #0]
    9ff8:	61bb      	str	r3, [r7, #24]
                 p_tcb       = p_pend_data->TCBPtr;
    9ffa:	69bb      	ldr	r3, [r7, #24]
    9ffc:	689b      	ldr	r3, [r3, #8]
    9ffe:	617b      	str	r3, [r7, #20]
                 OS_PendObjDel((OS_PEND_OBJ *)((void *)p_sem),
    a000:	68f8      	ldr	r0, [r7, #12]
    a002:	6979      	ldr	r1, [r7, #20]
    a004:	69fa      	ldr	r2, [r7, #28]
    a006:	f005 f8c3 	bl	f190 <OS_PendObjDel>
                               p_tcb,
                               ts);
                 cnt--;
    a00a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    a00c:	f103 33ff 	add.w	r3, r3, #4294967295
    a010:	85fb      	strh	r3, [r7, #46]	; 0x2e
             break;

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the semaphore                            */
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
             while (cnt > 0u) {                             /* Remove all tasks on the pend list                      */
    a012:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    a014:	2b00      	cmp	r3, #0
    a016:	d1ed      	bne.n	9ff4 <OSSemDel+0x11c>
                               p_tcb,
                               ts);
                 cnt--;
             }
#if OS_CFG_DBG_EN > 0u
             OS_SemDbgListRemove(p_sem);
    a018:	68f8      	ldr	r0, [r7, #12]
    a01a:	f000 fb49 	bl	a6b0 <OS_SemDbgListRemove>
#endif
             OSSemQty--;
    a01e:	f244 4310 	movw	r3, #17424	; 0x4410
    a022:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a026:	881b      	ldrh	r3, [r3, #0]
    a028:	f103 33ff 	add.w	r3, r3, #4294967295
    a02c:	b29a      	uxth	r2, r3
    a02e:	f244 4310 	movw	r3, #17424	; 0x4410
    a032:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a036:	801a      	strh	r2, [r3, #0]
             OS_SemClr(p_sem);
    a038:	68f8      	ldr	r0, [r7, #12]
    a03a:	f000 fae3 	bl	a604 <OS_SemClr>
             OS_CRITICAL_EXIT_NO_SCHED();
    a03e:	f00d fed1 	bl	17de4 <CPU_SR_Save>
    a042:	62b8      	str	r0, [r7, #40]	; 0x28
    a044:	f7f7 fc38 	bl	18b8 <CPU_IntDisMeasStart>
    a048:	f643 5350 	movw	r3, #15696	; 0x3d50
    a04c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	f103 33ff 	add.w	r3, r3, #4294967295
    a056:	b2da      	uxtb	r2, r3
    a058:	f643 5350 	movw	r3, #15696	; 0x3d50
    a05c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a060:	701a      	strb	r2, [r3, #0]
    a062:	f643 5350 	movw	r3, #15696	; 0x3d50
    a066:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	2b00      	cmp	r3, #0
    a06e:	d101      	bne.n	a074 <OSSemDel+0x19c>
    a070:	f005 fbd2 	bl	f818 <OS_SchedLockTimeMeasStop>
    a074:	f7f7 fc4c 	bl	1910 <CPU_IntDisMeasStop>
    a078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a07a:	f00d feb7 	bl	17dec <CPU_SR_Restore>
             OSSched();                                     /* Find highest priority task ready to run                */
    a07e:	f004 facf 	bl	e620 <OSSched>
             *p_err = OS_ERR_NONE;
    a082:	687b      	ldr	r3, [r7, #4]
    a084:	f04f 0200 	mov.w	r2, #0
    a088:	801a      	strh	r2, [r3, #0]
             break;
    a08a:	e009      	b.n	a0a0 <OSSemDel+0x1c8>

        default:
             CPU_CRITICAL_EXIT();
    a08c:	f7f7 fc40 	bl	1910 <CPU_IntDisMeasStop>
    a090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a092:	f00d feab 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	f645 6225 	movw	r2, #24101	; 0x5e25
    a09c:	801a      	strh	r2, [r3, #0]
             break;
    a09e:	bf00      	nop
    }
    return ((OS_OBJ_QTY)nbr_tasks);
    a0a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
    a0a2:	4618      	mov	r0, r3
    a0a4:	f107 0730 	add.w	r7, r7, #48	; 0x30
    a0a8:	46bd      	mov	sp, r7
    a0aa:	bd80      	pop	{r7, pc}

0000a0ac <OSSemPend>:
OS_SEM_CTR  OSSemPend (OS_SEM   *p_sem,
                       OS_TICK   timeout,
                       OS_OPT    opt,
                       CPU_TS   *p_ts,
                       OS_ERR   *p_err)
{
    a0ac:	b580      	push	{r7, lr}
    a0ae:	b08e      	sub	sp, #56	; 0x38
    a0b0:	af00      	add	r7, sp, #0
    a0b2:	60f8      	str	r0, [r7, #12]
    a0b4:	60b9      	str	r1, [r7, #8]
    a0b6:	603b      	str	r3, [r7, #0]
    a0b8:	4613      	mov	r3, r2
    a0ba:	80fb      	strh	r3, [r7, #6]
    OS_SEM_CTR    ctr;
    OS_PEND_DATA  pend_data;
    CPU_SR_ALLOC();
    a0bc:	f04f 0300 	mov.w	r3, #0
    a0c0:	637b      	str	r3, [r7, #52]	; 0x34
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    a0c2:	f244 1381 	movw	r3, #16769	; 0x4181
    a0c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a0ca:	781b      	ldrb	r3, [r3, #0]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d006      	beq.n	a0de <OSSemPend+0x32>
        *p_err = OS_ERR_PEND_ISR;
    a0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0d2:	f246 12ae 	movw	r2, #25006	; 0x61ae
    a0d6:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    a0d8:	f04f 0300 	mov.w	r3, #0
    a0dc:	e127      	b.n	a32e <OSSemPend+0x282>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate arguments                                     */
    a0de:	68fb      	ldr	r3, [r7, #12]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d106      	bne.n	a0f2 <OSSemPend+0x46>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    a0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0e6:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    a0ea:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    a0ec:	f04f 0300 	mov.w	r3, #0
    a0f0:	e11d      	b.n	a32e <OSSemPend+0x282>
    }

    switch (opt) {
    a0f2:	88fb      	ldrh	r3, [r7, #6]
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d009      	beq.n	a10c <OSSemPend+0x60>
    a0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a0fc:	d006      	beq.n	a10c <OSSemPend+0x60>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    a0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a100:	f645 6225 	movw	r2, #24101	; 0x5e25
    a104:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
    a106:	f04f 0300 	mov.w	r3, #0
    a10a:	e110      	b.n	a32e <OSSemPend+0x282>
    }

    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
    a10c:	bf00      	nop
             return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
    a10e:	68fb      	ldr	r3, [r7, #12]
    a110:	681a      	ldr	r2, [r3, #0]
    a112:	f244 5353 	movw	r3, #17747	; 0x4553
    a116:	f2c4 134d 	movt	r3, #16717	; 0x414d
    a11a:	429a      	cmp	r2, r3
    a11c:	d006      	beq.n	a12c <OSSemPend+0x80>
        *p_err = OS_ERR_OBJ_TYPE;
    a11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a120:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    a124:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    a126:	f04f 0300 	mov.w	r3, #0
    a12a:	e100      	b.n	a32e <OSSemPend+0x282>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
    a12c:	683b      	ldr	r3, [r7, #0]
    a12e:	2b00      	cmp	r3, #0
    a130:	d003      	beq.n	a13a <OSSemPend+0x8e>
       *p_ts  = (CPU_TS)0;                                  /* Initialize the returned timestamp                      */
    a132:	683b      	ldr	r3, [r7, #0]
    a134:	f04f 0200 	mov.w	r2, #0
    a138:	601a      	str	r2, [r3, #0]
    }
    CPU_CRITICAL_ENTER();
    a13a:	f00d fe53 	bl	17de4 <CPU_SR_Save>
    a13e:	6378      	str	r0, [r7, #52]	; 0x34
    a140:	f7f7 fbba 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* Resource available?                                    */
    a144:	68fb      	ldr	r3, [r7, #12]
    a146:	6a1b      	ldr	r3, [r3, #32]
    a148:	2b00      	cmp	r3, #0
    a14a:	d01a      	beq.n	a182 <OSSemPend+0xd6>
        p_sem->Ctr--;                                       /* Yes, caller may proceed                                */
    a14c:	68fb      	ldr	r3, [r7, #12]
    a14e:	6a1b      	ldr	r3, [r3, #32]
    a150:	f103 32ff 	add.w	r2, r3, #4294967295
    a154:	68fb      	ldr	r3, [r7, #12]
    a156:	621a      	str	r2, [r3, #32]
        if (p_ts != (CPU_TS *)0) {
    a158:	683b      	ldr	r3, [r7, #0]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d003      	beq.n	a166 <OSSemPend+0xba>
           *p_ts  = p_sem->TS;                              /*      get timestamp of last post                        */
    a15e:	68fb      	ldr	r3, [r7, #12]
    a160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a162:	683b      	ldr	r3, [r7, #0]
    a164:	601a      	str	r2, [r3, #0]
        }
        ctr    = p_sem->Ctr;
    a166:	68fb      	ldr	r3, [r7, #12]
    a168:	6a1b      	ldr	r3, [r3, #32]
    a16a:	633b      	str	r3, [r7, #48]	; 0x30
        CPU_CRITICAL_EXIT();
    a16c:	f7f7 fbd0 	bl	1910 <CPU_IntDisMeasStop>
    a170:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a172:	f00d fe3b 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_NONE;
    a176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a178:	f04f 0200 	mov.w	r2, #0
    a17c:	801a      	strh	r2, [r3, #0]
        return (ctr);
    a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a180:	e0d5      	b.n	a32e <OSSemPend+0x282>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    a182:	88fb      	ldrh	r3, [r7, #6]
    a184:	b21b      	sxth	r3, r3
    a186:	2b00      	cmp	r3, #0
    a188:	da0d      	bge.n	a1a6 <OSSemPend+0xfa>
        ctr    = p_sem->Ctr;                                /* No                                                     */
    a18a:	68fb      	ldr	r3, [r7, #12]
    a18c:	6a1b      	ldr	r3, [r3, #32]
    a18e:	633b      	str	r3, [r7, #48]	; 0x30
        CPU_CRITICAL_EXIT();
    a190:	f7f7 fbbe 	bl	1910 <CPU_IntDisMeasStop>
    a194:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a196:	f00d fe29 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;
    a19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a19c:	f246 12b0 	movw	r2, #25008	; 0x61b0
    a1a0:	801a      	strh	r2, [r3, #0]
        return (ctr);
    a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a1a4:	e0c3      	b.n	a32e <OSSemPend+0x282>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
    a1a6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a1aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1ae:	781b      	ldrb	r3, [r3, #0]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d00b      	beq.n	a1cc <OSSemPend+0x120>
            CPU_CRITICAL_EXIT();
    a1b4:	f7f7 fbac 	bl	1910 <CPU_IntDisMeasStop>
    a1b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a1ba:	f00d fe17 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    a1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a1c0:	f646 5262 	movw	r2, #28002	; 0x6d62
    a1c4:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
    a1c6:	f04f 0300 	mov.w	r3, #0
    a1ca:	e0b0      	b.n	a32e <OSSemPend+0x282>
        }
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    a1cc:	f643 5350 	movw	r3, #15696	; 0x3d50
    a1d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	f103 0301 	add.w	r3, r3, #1
    a1da:	b2da      	uxtb	r2, r3
    a1dc:	f643 5350 	movw	r3, #15696	; 0x3d50
    a1e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1e4:	701a      	strb	r2, [r3, #0]
    a1e6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a1ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1ee:	781b      	ldrb	r3, [r3, #0]
    a1f0:	2b01      	cmp	r3, #1
    a1f2:	d101      	bne.n	a1f8 <OSSemPend+0x14c>
    a1f4:	f005 fafe 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    a1f8:	f7f7 fb8a 	bl	1910 <CPU_IntDisMeasStop>
    a1fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a1fe:	f00d fdf5 	bl	17dec <CPU_SR_Restore>
    OS_Pend(&pend_data,                                     /* Block task pending on Semaphore                        */
    a202:	f107 0310 	add.w	r3, r7, #16
    a206:	4618      	mov	r0, r3
    a208:	68f9      	ldr	r1, [r7, #12]
    a20a:	f04f 0206 	mov.w	r2, #6
    a20e:	68bb      	ldr	r3, [r7, #8]
    a210:	f004 fc9e 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_sem),
            OS_TASK_PEND_ON_SEM,
            timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
    a214:	f00d fde6 	bl	17de4 <CPU_SR_Save>
    a218:	6378      	str	r0, [r7, #52]	; 0x34
    a21a:	f7f7 fb4d 	bl	18b8 <CPU_IntDisMeasStart>
    a21e:	f643 5350 	movw	r3, #15696	; 0x3d50
    a222:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	f103 33ff 	add.w	r3, r3, #4294967295
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f643 5350 	movw	r3, #15696	; 0x3d50
    a232:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f643 5350 	movw	r3, #15696	; 0x3d50
    a23c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	2b00      	cmp	r3, #0
    a244:	d101      	bne.n	a24a <OSSemPend+0x19e>
    a246:	f005 fae7 	bl	f818 <OS_SchedLockTimeMeasStop>
    a24a:	f7f7 fb61 	bl	1910 <CPU_IntDisMeasStop>
    a24e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a250:	f00d fdcc 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find the next highest priority task ready to run       */
    a254:	f004 f9e4 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    a258:	f00d fdc4 	bl	17de4 <CPU_SR_Save>
    a25c:	6378      	str	r0, [r7, #52]	; 0x34
    a25e:	f7f7 fb2b 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    a262:	f244 135c 	movw	r3, #16732	; 0x415c
    a266:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a26a:	681b      	ldr	r3, [r3, #0]
    a26c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    a270:	2b03      	cmp	r3, #3
    a272:	d847      	bhi.n	a304 <OSSemPend+0x258>
    a274:	a201      	add	r2, pc, #4	; (adr r2, a27c <OSSemPend+0x1d0>)
    a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a27a:	bf00      	nop
    a27c:	0000a28d 	.word	0x0000a28d
    a280:	0000a2ad 	.word	0x0000a2ad
    a284:	0000a2e5 	.word	0x0000a2e5
    a288:	0000a2cd 	.word	0x0000a2cd
        case OS_STATUS_PEND_OK:                             /* We got the semaphore                                   */
             if (p_ts != (CPU_TS *)0) {
    a28c:	683b      	ldr	r3, [r7, #0]
    a28e:	2b00      	cmp	r3, #0
    a290:	d007      	beq.n	a2a2 <OSSemPend+0x1f6>
                *p_ts  =  OSTCBCurPtr->TS;
    a292:	f244 135c 	movw	r3, #16732	; 0x415c
    a296:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a29a:	681b      	ldr	r3, [r3, #0]
    a29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a29e:	683b      	ldr	r3, [r7, #0]
    a2a0:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_NONE;
    a2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a2a4:	f04f 0200 	mov.w	r2, #0
    a2a8:	801a      	strh	r2, [r3, #0]
             break;
    a2aa:	e037      	b.n	a31c <OSSemPend+0x270>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
    a2ac:	683b      	ldr	r3, [r7, #0]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d007      	beq.n	a2c2 <OSSemPend+0x216>
                *p_ts  =  OSTCBCurPtr->TS;
    a2b2:	f244 135c 	movw	r3, #16732	; 0x415c
    a2b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a2be:	683b      	ldr	r3, [r7, #0]
    a2c0:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_PEND_ABORT;
    a2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a2c4:	f246 12a9 	movw	r2, #25001	; 0x61a9
    a2c8:	801a      	strh	r2, [r3, #0]
             break;
    a2ca:	e027      	b.n	a31c <OSSemPend+0x270>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
             if (p_ts != (CPU_TS *)0) {
    a2cc:	683b      	ldr	r3, [r7, #0]
    a2ce:	2b00      	cmp	r3, #0
    a2d0:	d003      	beq.n	a2da <OSSemPend+0x22e>
                *p_ts  = (CPU_TS  )0;
    a2d2:	683b      	ldr	r3, [r7, #0]
    a2d4:	f04f 0200 	mov.w	r2, #0
    a2d8:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_TIMEOUT;
    a2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a2dc:	f247 22d9 	movw	r2, #29401	; 0x72d9
    a2e0:	801a      	strh	r2, [r3, #0]
             break;
    a2e2:	e01b      	b.n	a31c <OSSemPend+0x270>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
    a2e4:	683b      	ldr	r3, [r7, #0]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d007      	beq.n	a2fa <OSSemPend+0x24e>
                *p_ts  =  OSTCBCurPtr->TS;
    a2ea:	f244 135c 	movw	r3, #16732	; 0x415c
    a2ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a2f2:	681b      	ldr	r3, [r3, #0]
    a2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a2f6:	683b      	ldr	r3, [r7, #0]
    a2f8:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_OBJ_DEL;
    a2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a2fc:	f645 52c2 	movw	r2, #24002	; 0x5dc2
    a300:	801a      	strh	r2, [r3, #0]
             break;
    a302:	e00b      	b.n	a31c <OSSemPend+0x270>

        default:
             *p_err = OS_ERR_STATUS_INVALID;
    a304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a306:	f646 622b 	movw	r2, #28203	; 0x6e2b
    a30a:	801a      	strh	r2, [r3, #0]
             CPU_CRITICAL_EXIT();
    a30c:	f7f7 fb00 	bl	1910 <CPU_IntDisMeasStop>
    a310:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a312:	f00d fd6b 	bl	17dec <CPU_SR_Restore>
             return ((OS_SEM_CTR)0);
    a316:	f04f 0300 	mov.w	r3, #0
    a31a:	e008      	b.n	a32e <OSSemPend+0x282>
    }
    ctr = p_sem->Ctr;
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	6a1b      	ldr	r3, [r3, #32]
    a320:	633b      	str	r3, [r7, #48]	; 0x30
    CPU_CRITICAL_EXIT();
    a322:	f7f7 faf5 	bl	1910 <CPU_IntDisMeasStop>
    a326:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a328:	f00d fd60 	bl	17dec <CPU_SR_Restore>
    return (ctr);
    a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    a32e:	4618      	mov	r0, r3
    a330:	f107 0738 	add.w	r7, r7, #56	; 0x38
    a334:	46bd      	mov	sp, r7
    a336:	bd80      	pop	{r7, pc}

0000a338 <OSSemPendAbort>:

#if OS_CFG_SEM_PEND_ABORT_EN > 0u
OS_OBJ_QTY  OSSemPendAbort (OS_SEM  *p_sem,
                            OS_OPT   opt,
                            OS_ERR  *p_err)
{
    a338:	b580      	push	{r7, lr}
    a33a:	b08a      	sub	sp, #40	; 0x28
    a33c:	af00      	add	r7, sp, #0
    a33e:	60f8      	str	r0, [r7, #12]
    a340:	460b      	mov	r3, r1
    a342:	607a      	str	r2, [r7, #4]
    a344:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_OBJ_QTY     nbr_tasks;
    CPU_SR_ALLOC();
    a346:	f04f 0300 	mov.w	r3, #0
    a34a:	623b      	str	r3, [r7, #32]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
    a34c:	f244 1381 	movw	r3, #16769	; 0x4181
    a350:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a354:	781b      	ldrb	r3, [r3, #0]
    a356:	2b00      	cmp	r3, #0
    a358:	d006      	beq.n	a368 <OSSemPendAbort+0x30>
       *p_err =  OS_ERR_PEND_ABORT_ISR;
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	f246 12aa 	movw	r2, #25002	; 0x61aa
    a360:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    a362:	f04f 0300 	mov.w	r3, #0
    a366:	e0a3      	b.n	a4b0 <OSSemPendAbort+0x178>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
    a368:	68fb      	ldr	r3, [r7, #12]
    a36a:	2b00      	cmp	r3, #0
    a36c:	d106      	bne.n	a37c <OSSemPendAbort+0x44>
       *p_err =  OS_ERR_OBJ_PTR_NULL;
    a36e:	687b      	ldr	r3, [r7, #4]
    a370:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    a374:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    a376:	f04f 0300 	mov.w	r3, #0
    a37a:	e099      	b.n	a4b0 <OSSemPendAbort+0x178>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
    a37c:	897b      	ldrh	r3, [r7, #10]
    a37e:	2b00      	cmp	r3, #0
    a380:	d009      	beq.n	a396 <OSSemPendAbort+0x5e>
    a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a386:	d006      	beq.n	a396 <OSSemPendAbort+0x5e>
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;

        default:
            *p_err =  OS_ERR_OPT_INVALID;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	f645 6225 	movw	r2, #24101	; 0x5e25
    a38e:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0u);
    a390:	f04f 0300 	mov.w	r3, #0
    a394:	e08c      	b.n	a4b0 <OSSemPendAbort+0x178>
        return ((OS_OBJ_QTY)0u);
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;
    a396:	bf00      	nop
             return ((OS_OBJ_QTY)0u);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
    a398:	68fb      	ldr	r3, [r7, #12]
    a39a:	681a      	ldr	r2, [r3, #0]
    a39c:	f244 5353 	movw	r3, #17747	; 0x4553
    a3a0:	f2c4 134d 	movt	r3, #16717	; 0x414d
    a3a4:	429a      	cmp	r2, r3
    a3a6:	d006      	beq.n	a3b6 <OSSemPendAbort+0x7e>
       *p_err =  OS_ERR_OBJ_TYPE;
    a3a8:	687b      	ldr	r3, [r7, #4]
    a3aa:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    a3ae:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    a3b0:	f04f 0300 	mov.w	r3, #0
    a3b4:	e07c      	b.n	a4b0 <OSSemPendAbort+0x178>
    }
#endif

    CPU_CRITICAL_ENTER();
    a3b6:	f00d fd15 	bl	17de4 <CPU_SR_Save>
    a3ba:	6238      	str	r0, [r7, #32]
    a3bc:	f7f7 fa7c 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_sem->PendList;
    a3c0:	68fb      	ldr	r3, [r7, #12]
    a3c2:	f103 0308 	add.w	r3, r3, #8
    a3c6:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on semaphore?                         */
    a3c8:	69fb      	ldr	r3, [r7, #28]
    a3ca:	891b      	ldrh	r3, [r3, #8]
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	d10b      	bne.n	a3e8 <OSSemPendAbort+0xb0>
        CPU_CRITICAL_EXIT();                                /* No                                                     */
    a3d0:	f7f7 fa9e 	bl	1910 <CPU_IntDisMeasStop>
    a3d4:	6a38      	ldr	r0, [r7, #32]
    a3d6:	f00d fd09 	bl	17dec <CPU_SR_Restore>
       *p_err =  OS_ERR_PEND_ABORT_NONE;
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	f246 12ab 	movw	r2, #25003	; 0x61ab
    a3e0:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    a3e2:	f04f 0300 	mov.w	r3, #0
    a3e6:	e063      	b.n	a4b0 <OSSemPendAbort+0x178>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    a3e8:	f643 5350 	movw	r3, #15696	; 0x3d50
    a3ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a3f0:	781b      	ldrb	r3, [r3, #0]
    a3f2:	f103 0301 	add.w	r3, r3, #1
    a3f6:	b2da      	uxtb	r2, r3
    a3f8:	f643 5350 	movw	r3, #15696	; 0x3d50
    a3fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a400:	701a      	strb	r2, [r3, #0]
    a402:	f643 5350 	movw	r3, #15696	; 0x3d50
    a406:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a40a:	781b      	ldrb	r3, [r3, #0]
    a40c:	2b01      	cmp	r3, #1
    a40e:	d101      	bne.n	a414 <OSSemPendAbort+0xdc>
    a410:	f005 f9f0 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    a414:	f7f7 fa7c 	bl	1910 <CPU_IntDisMeasStop>
    a418:	6a38      	ldr	r0, [r7, #32]
    a41a:	f00d fce7 	bl	17dec <CPU_SR_Restore>
    nbr_tasks = 0u;
    a41e:	f04f 0300 	mov.w	r3, #0
    a422:	84fb      	strh	r3, [r7, #38]	; 0x26
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    a424:	f7f8 ff7a 	bl	331c <CPU_TS_TmrRd>
    a428:	61b8      	str	r0, [r7, #24]
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    a42a:	e010      	b.n	a44e <OSSemPendAbort+0x116>
        p_tcb = p_pend_list->HeadPtr->TCBPtr;
    a42c:	69fb      	ldr	r3, [r7, #28]
    a42e:	681b      	ldr	r3, [r3, #0]
    a430:	689b      	ldr	r3, [r3, #8]
    a432:	617b      	str	r3, [r7, #20]
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_sem),
    a434:	68f8      	ldr	r0, [r7, #12]
    a436:	6979      	ldr	r1, [r7, #20]
    a438:	69ba      	ldr	r2, [r7, #24]
    a43a:	f004 fbe3 	bl	ec04 <OS_PendAbort>
                     p_tcb,
                     ts);
        nbr_tasks++;
    a43e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a440:	f103 0301 	add.w	r3, r3, #1
    a444:	84fb      	strh	r3, [r7, #38]	; 0x26
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
    a446:	897b      	ldrh	r3, [r7, #10]
    a448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a44c:	d104      	bne.n	a458 <OSSemPendAbort+0x120>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    nbr_tasks = 0u;
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    a44e:	69fb      	ldr	r3, [r7, #28]
    a450:	891b      	ldrh	r3, [r3, #8]
    a452:	2b00      	cmp	r3, #0
    a454:	d1ea      	bne.n	a42c <OSSemPendAbort+0xf4>
    a456:	e000      	b.n	a45a <OSSemPendAbort+0x122>
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_sem),
                     p_tcb,
                     ts);
        nbr_tasks++;
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
            break;                                          /* No                                                     */
    a458:	bf00      	nop
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    a45a:	f00d fcc3 	bl	17de4 <CPU_SR_Save>
    a45e:	6238      	str	r0, [r7, #32]
    a460:	f7f7 fa2a 	bl	18b8 <CPU_IntDisMeasStart>
    a464:	f643 5350 	movw	r3, #15696	; 0x3d50
    a468:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a46c:	781b      	ldrb	r3, [r3, #0]
    a46e:	f103 33ff 	add.w	r3, r3, #4294967295
    a472:	b2da      	uxtb	r2, r3
    a474:	f643 5350 	movw	r3, #15696	; 0x3d50
    a478:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a47c:	701a      	strb	r2, [r3, #0]
    a47e:	f643 5350 	movw	r3, #15696	; 0x3d50
    a482:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a486:	781b      	ldrb	r3, [r3, #0]
    a488:	2b00      	cmp	r3, #0
    a48a:	d101      	bne.n	a490 <OSSemPendAbort+0x158>
    a48c:	f005 f9c4 	bl	f818 <OS_SchedLockTimeMeasStop>
    a490:	f7f7 fa3e 	bl	1910 <CPU_IntDisMeasStop>
    a494:	6a38      	ldr	r0, [r7, #32]
    a496:	f00d fca9 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
    a49a:	897b      	ldrh	r3, [r7, #10]
    a49c:	b21b      	sxth	r3, r3
    a49e:	2b00      	cmp	r3, #0
    a4a0:	db01      	blt.n	a4a6 <OSSemPendAbort+0x16e>
        OSSched();                                          /* Run the scheduler                                      */
    a4a2:	f004 f8bd 	bl	e620 <OSSched>
    }

   *p_err = OS_ERR_NONE;
    a4a6:	687b      	ldr	r3, [r7, #4]
    a4a8:	f04f 0200 	mov.w	r2, #0
    a4ac:	801a      	strh	r2, [r3, #0]
    return (nbr_tasks);
    a4ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
    a4b0:	4618      	mov	r0, r3
    a4b2:	f107 0728 	add.w	r7, r7, #40	; 0x28
    a4b6:	46bd      	mov	sp, r7
    a4b8:	bd80      	pop	{r7, pc}
    a4ba:	bf00      	nop

0000a4bc <OSSemPost>:
*/

OS_SEM_CTR  OSSemPost (OS_SEM  *p_sem,
                       OS_OPT   opt,
                       OS_ERR  *p_err)
{
    a4bc:	b580      	push	{r7, lr}
    a4be:	b08a      	sub	sp, #40	; 0x28
    a4c0:	af04      	add	r7, sp, #16
    a4c2:	60f8      	str	r0, [r7, #12]
    a4c4:	460b      	mov	r3, r1
    a4c6:	607a      	str	r2, [r7, #4]
    a4c8:	817b      	strh	r3, [r7, #10]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
    a4ca:	68fb      	ldr	r3, [r7, #12]
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	d106      	bne.n	a4de <OSSemPost+0x22>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    a4d6:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    a4d8:	f04f 0300 	mov.w	r3, #0
    a4dc:	e038      	b.n	a550 <OSSemPost+0x94>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
    a4de:	68fb      	ldr	r3, [r7, #12]
    a4e0:	681a      	ldr	r2, [r3, #0]
    a4e2:	f244 5353 	movw	r3, #17747	; 0x4553
    a4e6:	f2c4 134d 	movt	r3, #16717	; 0x414d
    a4ea:	429a      	cmp	r2, r3
    a4ec:	d006      	beq.n	a4fc <OSSemPost+0x40>
        *p_err = OS_ERR_OBJ_TYPE;
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    a4f4:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
    a4f6:	f04f 0300 	mov.w	r3, #0
    a4fa:	e029      	b.n	a550 <OSSemPost+0x94>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    a4fc:	f7f8 ff0e 	bl	331c <CPU_TS_TmrRd>
    a500:	6178      	str	r0, [r7, #20]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
    a502:	f244 1381 	movw	r3, #16769	; 0x4181
    a506:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	2b00      	cmp	r3, #0
    a50e:	d016      	beq.n	a53e <OSSemPost+0x82>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_SEM,           /* Post to ISR queue                                      */
    a510:	f04f 0300 	mov.w	r3, #0
    a514:	9300      	str	r3, [sp, #0]
    a516:	897b      	ldrh	r3, [r7, #10]
    a518:	9301      	str	r3, [sp, #4]
    a51a:	697b      	ldr	r3, [r7, #20]
    a51c:	9302      	str	r3, [sp, #8]
    a51e:	687b      	ldr	r3, [r7, #4]
    a520:	9303      	str	r3, [sp, #12]
    a522:	f244 5053 	movw	r0, #17747	; 0x4553
    a526:	f2c4 104d 	movt	r0, #16717	; 0x414d
    a52a:	68f9      	ldr	r1, [r7, #12]
    a52c:	f04f 0200 	mov.w	r2, #0
    a530:	f04f 0300 	mov.w	r3, #0
    a534:	f006 fa72 	bl	10a1c <OS_IntQPost>
                    (OS_MSG_SIZE)0,
                    (OS_FLAGS   )0,
                    (OS_OPT     )opt,
                    (CPU_TS     )ts,
                    (OS_ERR    *)p_err);
        return ((OS_SEM_CTR)0);
    a538:	f04f 0300 	mov.w	r3, #0
    a53c:	e008      	b.n	a550 <OSSemPost+0x94>
    }
#endif

    ctr = OS_SemPost(p_sem,                                 /* Post to semaphore                                      */
    a53e:	897b      	ldrh	r3, [r7, #10]
    a540:	68f8      	ldr	r0, [r7, #12]
    a542:	4619      	mov	r1, r3
    a544:	697a      	ldr	r2, [r7, #20]
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	f000 f90c 	bl	a764 <OS_SemPost>
    a54c:	6138      	str	r0, [r7, #16]
                     opt,
                     ts,
                     p_err);

    return (ctr);
    a54e:	693b      	ldr	r3, [r7, #16]
}
    a550:	4618      	mov	r0, r3
    a552:	f107 0718 	add.w	r7, r7, #24
    a556:	46bd      	mov	sp, r7
    a558:	bd80      	pop	{r7, pc}
    a55a:	bf00      	nop

0000a55c <OSSemSet>:

#if OS_CFG_SEM_SET_EN > 0u
void  OSSemSet (OS_SEM      *p_sem,
                OS_SEM_CTR   cnt,
                OS_ERR      *p_err)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	b086      	sub	sp, #24
    a560:	af00      	add	r7, sp, #0
    a562:	60f8      	str	r0, [r7, #12]
    a564:	60b9      	str	r1, [r7, #8]
    a566:	607a      	str	r2, [r7, #4]
    OS_PEND_LIST  *p_pend_list;
    CPU_SR_ALLOC();
    a568:	f04f 0300 	mov.w	r3, #0
    a56c:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't call this function from an ISR                   */
    a56e:	f244 1381 	movw	r3, #16769	; 0x4181
    a572:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a576:	781b      	ldrb	r3, [r3, #0]
    a578:	2b00      	cmp	r3, #0
    a57a:	d004      	beq.n	a586 <OSSemSet+0x2a>
        *p_err = OS_ERR_SET_ISR;
    a57c:	687b      	ldr	r3, [r7, #4]
    a57e:	f646 52c6 	movw	r2, #28102	; 0x6dc6
    a582:	801a      	strh	r2, [r3, #0]
        return;
    a584:	e03a      	b.n	a5fc <OSSemSet+0xa0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
    a586:	68fb      	ldr	r3, [r7, #12]
    a588:	2b00      	cmp	r3, #0
    a58a:	d104      	bne.n	a596 <OSSemSet+0x3a>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    a58c:	687b      	ldr	r3, [r7, #4]
    a58e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    a592:	801a      	strh	r2, [r3, #0]
        return;
    a594:	e032      	b.n	a5fc <OSSemSet+0xa0>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
    a596:	68fb      	ldr	r3, [r7, #12]
    a598:	681a      	ldr	r2, [r3, #0]
    a59a:	f244 5353 	movw	r3, #17747	; 0x4553
    a59e:	f2c4 134d 	movt	r3, #16717	; 0x414d
    a5a2:	429a      	cmp	r2, r3
    a5a4:	d004      	beq.n	a5b0 <OSSemSet+0x54>
        *p_err = OS_ERR_OBJ_TYPE;
    a5a6:	687b      	ldr	r3, [r7, #4]
    a5a8:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    a5ac:	801a      	strh	r2, [r3, #0]
        return;
    a5ae:	e025      	b.n	a5fc <OSSemSet+0xa0>
    }
#endif

    *p_err = OS_ERR_NONE;
    a5b0:	687b      	ldr	r3, [r7, #4]
    a5b2:	f04f 0200 	mov.w	r2, #0
    a5b6:	801a      	strh	r2, [r3, #0]
    CPU_CRITICAL_ENTER();
    a5b8:	f00d fc14 	bl	17de4 <CPU_SR_Save>
    a5bc:	6178      	str	r0, [r7, #20]
    a5be:	f7f7 f97b 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* See if semaphore already has a count                   */
    a5c2:	68fb      	ldr	r3, [r7, #12]
    a5c4:	6a1b      	ldr	r3, [r3, #32]
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	d003      	beq.n	a5d2 <OSSemSet+0x76>
        p_sem->Ctr = cnt;                                   /* Yes, set it to the new value specified.                */
    a5ca:	68fb      	ldr	r3, [r7, #12]
    a5cc:	68ba      	ldr	r2, [r7, #8]
    a5ce:	621a      	str	r2, [r3, #32]
    a5d0:	e00f      	b.n	a5f2 <OSSemSet+0x96>
    } else {
        p_pend_list = &p_sem->PendList;                     /* No                                                     */
    a5d2:	68fb      	ldr	r3, [r7, #12]
    a5d4:	f103 0308 	add.w	r3, r3, #8
    a5d8:	613b      	str	r3, [r7, #16]
        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {     /*      See if task(s) waiting?                           */
    a5da:	693b      	ldr	r3, [r7, #16]
    a5dc:	891b      	ldrh	r3, [r3, #8]
    a5de:	2b00      	cmp	r3, #0
    a5e0:	d103      	bne.n	a5ea <OSSemSet+0x8e>
            p_sem->Ctr = cnt;                               /*      No, OK to set the value                           */
    a5e2:	68fb      	ldr	r3, [r7, #12]
    a5e4:	68ba      	ldr	r2, [r7, #8]
    a5e6:	621a      	str	r2, [r3, #32]
    a5e8:	e003      	b.n	a5f2 <OSSemSet+0x96>
        } else {
            *p_err     = OS_ERR_TASK_WAITING;
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	f247 125e 	movw	r2, #29022	; 0x715e
    a5f0:	801a      	strh	r2, [r3, #0]
        }
    }
    CPU_CRITICAL_EXIT();
    a5f2:	f7f7 f98d 	bl	1910 <CPU_IntDisMeasStop>
    a5f6:	6978      	ldr	r0, [r7, #20]
    a5f8:	f00d fbf8 	bl	17dec <CPU_SR_Restore>
}
    a5fc:	f107 0718 	add.w	r7, r7, #24
    a600:	46bd      	mov	sp, r7
    a602:	bd80      	pop	{r7, pc}

0000a604 <OS_SemClr>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemClr (OS_SEM  *p_sem)
{
    a604:	b580      	push	{r7, lr}
    a606:	b082      	sub	sp, #8
    a608:	af00      	add	r7, sp, #0
    a60a:	6078      	str	r0, [r7, #4]
    p_sem->Type    = OS_OBJ_TYPE_NONE;                      /* Mark the data structure as a NONE                      */
    a60c:	687a      	ldr	r2, [r7, #4]
    a60e:	f644 734e 	movw	r3, #20302	; 0x4f4e
    a612:	f2c4 534e 	movt	r3, #17742	; 0x454e
    a616:	6013      	str	r3, [r2, #0]
    p_sem->Ctr     = (OS_SEM_CTR)0;                         /* Set semaphore value                                    */
    a618:	687b      	ldr	r3, [r7, #4]
    a61a:	f04f 0200 	mov.w	r2, #0
    a61e:	621a      	str	r2, [r3, #32]
    p_sem->TS      = (CPU_TS    )0;                         /* Clear the time stamp                                   */
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	f04f 0200 	mov.w	r2, #0
    a626:	625a      	str	r2, [r3, #36]	; 0x24
    p_sem->NamePtr = (CPU_CHAR *)((void *)"?SEM");
    a628:	687a      	ldr	r2, [r7, #4]
    a62a:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a62e:	f2c0 0302 	movt	r3, #2
    a632:	6053      	str	r3, [r2, #4]
    OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	f103 0308 	add.w	r3, r3, #8
    a63a:	4618      	mov	r0, r3
    a63c:	f004 fc6e 	bl	ef1c <OS_PendListInit>
}
    a640:	f107 0708 	add.w	r7, r7, #8
    a644:	46bd      	mov	sp, r7
    a646:	bd80      	pop	{r7, pc}

0000a648 <OS_SemDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_SemDbgListAdd (OS_SEM  *p_sem)
{
    a648:	b480      	push	{r7}
    a64a:	b083      	sub	sp, #12
    a64c:	af00      	add	r7, sp, #0
    a64e:	6078      	str	r0, [r7, #4]
    p_sem->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
    a650:	687a      	ldr	r2, [r7, #4]
    a652:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    a656:	f2c0 0302 	movt	r3, #2
    a65a:	61d3      	str	r3, [r2, #28]
    p_sem->DbgPrevPtr               = (OS_SEM   *)0;
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	f04f 0200 	mov.w	r2, #0
    a662:	615a      	str	r2, [r3, #20]
    if (OSSemDbgListPtr == (OS_SEM *)0) {
    a664:	f244 036c 	movw	r3, #16492	; 0x406c
    a668:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a66c:	681b      	ldr	r3, [r3, #0]
    a66e:	2b00      	cmp	r3, #0
    a670:	d104      	bne.n	a67c <OS_SemDbgListAdd+0x34>
        p_sem->DbgNextPtr           = (OS_SEM   *)0;
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	f04f 0200 	mov.w	r2, #0
    a678:	619a      	str	r2, [r3, #24]
    a67a:	e00d      	b.n	a698 <OS_SemDbgListAdd+0x50>
    } else {
        p_sem->DbgNextPtr           =  OSSemDbgListPtr;
    a67c:	f244 036c 	movw	r3, #16492	; 0x406c
    a680:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a684:	681a      	ldr	r2, [r3, #0]
    a686:	687b      	ldr	r3, [r7, #4]
    a688:	619a      	str	r2, [r3, #24]
        OSSemDbgListPtr->DbgPrevPtr =  p_sem;
    a68a:	f244 036c 	movw	r3, #16492	; 0x406c
    a68e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a692:	681b      	ldr	r3, [r3, #0]
    a694:	687a      	ldr	r2, [r7, #4]
    a696:	615a      	str	r2, [r3, #20]
    }
    OSSemDbgListPtr                 =  p_sem;
    a698:	f244 036c 	movw	r3, #16492	; 0x406c
    a69c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a6a0:	687a      	ldr	r2, [r7, #4]
    a6a2:	601a      	str	r2, [r3, #0]
}
    a6a4:	f107 070c 	add.w	r7, r7, #12
    a6a8:	46bd      	mov	sp, r7
    a6aa:	bc80      	pop	{r7}
    a6ac:	4770      	bx	lr
    a6ae:	bf00      	nop

0000a6b0 <OS_SemDbgListRemove>:



void  OS_SemDbgListRemove (OS_SEM  *p_sem)
{
    a6b0:	b480      	push	{r7}
    a6b2:	b085      	sub	sp, #20
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	6078      	str	r0, [r7, #4]
    OS_SEM  *p_sem_next;
    OS_SEM  *p_sem_prev;


    p_sem_prev = p_sem->DbgPrevPtr;
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	695b      	ldr	r3, [r3, #20]
    a6bc:	60fb      	str	r3, [r7, #12]
    p_sem_next = p_sem->DbgNextPtr;
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	699b      	ldr	r3, [r3, #24]
    a6c2:	60bb      	str	r3, [r7, #8]

    if (p_sem_prev == (OS_SEM *)0) {
    a6c4:	68fb      	ldr	r3, [r7, #12]
    a6c6:	2b00      	cmp	r3, #0
    a6c8:	d111      	bne.n	a6ee <OS_SemDbgListRemove+0x3e>
        OSSemDbgListPtr = p_sem_next;
    a6ca:	f244 036c 	movw	r3, #16492	; 0x406c
    a6ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a6d2:	68ba      	ldr	r2, [r7, #8]
    a6d4:	601a      	str	r2, [r3, #0]
        if (p_sem_next != (OS_SEM *)0) {
    a6d6:	68bb      	ldr	r3, [r7, #8]
    a6d8:	2b00      	cmp	r3, #0
    a6da:	d003      	beq.n	a6e4 <OS_SemDbgListRemove+0x34>
            p_sem_next->DbgPrevPtr = (OS_SEM *)0;
    a6dc:	68bb      	ldr	r3, [r7, #8]
    a6de:	f04f 0200 	mov.w	r2, #0
    a6e2:	615a      	str	r2, [r3, #20]
        }
        p_sem->DbgNextPtr = (OS_SEM *)0;
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	f04f 0200 	mov.w	r2, #0
    a6ea:	619a      	str	r2, [r3, #24]
    a6ec:	e019      	b.n	a722 <OS_SemDbgListRemove+0x72>

    } else if (p_sem_next == (OS_SEM *)0) {
    a6ee:	68bb      	ldr	r3, [r7, #8]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d108      	bne.n	a706 <OS_SemDbgListRemove+0x56>
        p_sem_prev->DbgNextPtr = (OS_SEM *)0;
    a6f4:	68fb      	ldr	r3, [r7, #12]
    a6f6:	f04f 0200 	mov.w	r2, #0
    a6fa:	619a      	str	r2, [r3, #24]
        p_sem->DbgPrevPtr      = (OS_SEM *)0;
    a6fc:	687b      	ldr	r3, [r7, #4]
    a6fe:	f04f 0200 	mov.w	r2, #0
    a702:	615a      	str	r2, [r3, #20]
    a704:	e00d      	b.n	a722 <OS_SemDbgListRemove+0x72>

    } else {
        p_sem_prev->DbgNextPtr =  p_sem_next;
    a706:	68fb      	ldr	r3, [r7, #12]
    a708:	68ba      	ldr	r2, [r7, #8]
    a70a:	619a      	str	r2, [r3, #24]
        p_sem_next->DbgPrevPtr =  p_sem_prev;
    a70c:	68bb      	ldr	r3, [r7, #8]
    a70e:	68fa      	ldr	r2, [r7, #12]
    a710:	615a      	str	r2, [r3, #20]
        p_sem->DbgNextPtr      = (OS_SEM *)0;
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	f04f 0200 	mov.w	r2, #0
    a718:	619a      	str	r2, [r3, #24]
        p_sem->DbgPrevPtr      = (OS_SEM *)0;
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	f04f 0200 	mov.w	r2, #0
    a720:	615a      	str	r2, [r3, #20]
    }
}
    a722:	f107 0714 	add.w	r7, r7, #20
    a726:	46bd      	mov	sp, r7
    a728:	bc80      	pop	{r7}
    a72a:	4770      	bx	lr

0000a72c <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
    a72c:	b480      	push	{r7}
    a72e:	b083      	sub	sp, #12
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
    a734:	f244 036c 	movw	r3, #16492	; 0x406c
    a738:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a73c:	f04f 0200 	mov.w	r2, #0
    a740:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
    a742:	f244 4310 	movw	r3, #17424	; 0x4410
    a746:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a74a:	f04f 0200 	mov.w	r2, #0
    a74e:	801a      	strh	r2, [r3, #0]
    *p_err          = OS_ERR_NONE;
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	f04f 0200 	mov.w	r2, #0
    a756:	801a      	strh	r2, [r3, #0]
}
    a758:	f107 070c 	add.w	r7, r7, #12
    a75c:	46bd      	mov	sp, r7
    a75e:	bc80      	pop	{r7}
    a760:	4770      	bx	lr
    a762:	bf00      	nop

0000a764 <OS_SemPost>:

OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,
                        OS_OPT   opt,
                        CPU_TS   ts,
                        OS_ERR  *p_err)
{
    a764:	b580      	push	{r7, lr}
    a766:	b08e      	sub	sp, #56	; 0x38
    a768:	af02      	add	r7, sp, #8
    a76a:	60f8      	str	r0, [r7, #12]
    a76c:	607a      	str	r2, [r7, #4]
    a76e:	603b      	str	r3, [r7, #0]
    a770:	460b      	mov	r3, r1
    a772:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR     ctr;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
    a774:	f04f 0300 	mov.w	r3, #0
    a778:	627b      	str	r3, [r7, #36]	; 0x24



    CPU_CRITICAL_ENTER();
    a77a:	f00d fb33 	bl	17de4 <CPU_SR_Save>
    a77e:	6278      	str	r0, [r7, #36]	; 0x24
    a780:	f7f7 f89a 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_sem->PendList;
    a784:	68fb      	ldr	r3, [r7, #12]
    a786:	f103 0308 	add.w	r3, r3, #8
    a78a:	623b      	str	r3, [r7, #32]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on semaphore?                         */
    a78c:	6a3b      	ldr	r3, [r7, #32]
    a78e:	891b      	ldrh	r3, [r3, #8]
    a790:	2b00      	cmp	r3, #0
    a792:	d128      	bne.n	a7e6 <OS_SemPost+0x82>
                     return ((OS_SEM_CTR)0);
                 }
                 break;

            case 4u:
                 if (p_sem->Ctr == DEF_INT_32U_MAX_VAL) {
    a794:	68fb      	ldr	r3, [r7, #12]
    a796:	6a1b      	ldr	r3, [r3, #32]
    a798:	f1b3 3fff 	cmp.w	r3, #4294967295
    a79c:	d10b      	bne.n	a7b6 <OS_SemPost+0x52>
                     CPU_CRITICAL_EXIT();
    a79e:	f7f7 f8b7 	bl	1910 <CPU_IntDisMeasStop>
    a7a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a7a4:	f00d fb22 	bl	17dec <CPU_SR_Restore>
                     *p_err = OS_ERR_SEM_OVF;
    a7a8:	683b      	ldr	r3, [r7, #0]
    a7aa:	f646 52c5 	movw	r2, #28101	; 0x6dc5
    a7ae:	801a      	strh	r2, [r3, #0]
                     return ((OS_SEM_CTR)0);
    a7b0:	f04f 0300 	mov.w	r3, #0
    a7b4:	e089      	b.n	a8ca <OS_SemPost+0x166>
                 }
                 break;
    a7b6:	bf00      	nop

            default:
                 break;
        }
        p_sem->Ctr++;                                       /* No                                                     */
    a7b8:	68fb      	ldr	r3, [r7, #12]
    a7ba:	6a1b      	ldr	r3, [r3, #32]
    a7bc:	f103 0201 	add.w	r2, r3, #1
    a7c0:	68fb      	ldr	r3, [r7, #12]
    a7c2:	621a      	str	r2, [r3, #32]
        ctr       = p_sem->Ctr;
    a7c4:	68fb      	ldr	r3, [r7, #12]
    a7c6:	6a1b      	ldr	r3, [r3, #32]
    a7c8:	61fb      	str	r3, [r7, #28]
        p_sem->TS = ts;                                     /* Save timestamp in semaphore control block              */
    a7ca:	68fb      	ldr	r3, [r7, #12]
    a7cc:	687a      	ldr	r2, [r7, #4]
    a7ce:	625a      	str	r2, [r3, #36]	; 0x24
        CPU_CRITICAL_EXIT();
    a7d0:	f7f7 f89e 	bl	1910 <CPU_IntDisMeasStop>
    a7d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a7d6:	f00d fb09 	bl	17dec <CPU_SR_Restore>
        *p_err    = OS_ERR_NONE;
    a7da:	683b      	ldr	r3, [r7, #0]
    a7dc:	f04f 0200 	mov.w	r2, #0
    a7e0:	801a      	strh	r2, [r3, #0]
        return (ctr);
    a7e2:	69fb      	ldr	r3, [r7, #28]
    a7e4:	e071      	b.n	a8ca <OS_SemPost+0x166>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    a7e6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a7ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a7ee:	781b      	ldrb	r3, [r3, #0]
    a7f0:	f103 0301 	add.w	r3, r3, #1
    a7f4:	b2da      	uxtb	r2, r3
    a7f6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a7fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a7fe:	701a      	strb	r2, [r3, #0]
    a800:	f643 5350 	movw	r3, #15696	; 0x3d50
    a804:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	2b01      	cmp	r3, #1
    a80c:	d101      	bne.n	a812 <OS_SemPost+0xae>
    a80e:	f004 fff1 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    a812:	f7f7 f87d 	bl	1910 <CPU_IntDisMeasStop>
    a816:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a818:	f00d fae8 	bl	17dec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
    a81c:	897b      	ldrh	r3, [r7, #10]
    a81e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a822:	2b00      	cmp	r3, #0
    a824:	d003      	beq.n	a82e <OS_SemPost+0xca>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    a826:	6a3b      	ldr	r3, [r7, #32]
    a828:	891b      	ldrh	r3, [r3, #8]
    a82a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a82c:	e002      	b.n	a834 <OS_SemPost+0xd0>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    a82e:	f04f 0301 	mov.w	r3, #1
    a832:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    p_pend_data = p_pend_list->HeadPtr;
    a834:	6a3b      	ldr	r3, [r7, #32]
    a836:	681b      	ldr	r3, [r3, #0]
    a838:	62bb      	str	r3, [r7, #40]	; 0x28
    while (cnt > 0u) {
    a83a:	e015      	b.n	a868 <OS_SemPost+0x104>
        p_tcb            = p_pend_data->TCBPtr;
    a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a83e:	689b      	ldr	r3, [r3, #8]
    a840:	61bb      	str	r3, [r7, #24]
        p_pend_data_next = p_pend_data->NextPtr;
    a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a844:	685b      	ldr	r3, [r3, #4]
    a846:	617b      	str	r3, [r7, #20]
        OS_Post((OS_PEND_OBJ *)((void *)p_sem),
    a848:	687b      	ldr	r3, [r7, #4]
    a84a:	9300      	str	r3, [sp, #0]
    a84c:	68f8      	ldr	r0, [r7, #12]
    a84e:	69b9      	ldr	r1, [r7, #24]
    a850:	f04f 0200 	mov.w	r2, #0
    a854:	f04f 0300 	mov.w	r3, #0
    a858:	f004 fd42 	bl	f2e0 <OS_Post>
                p_tcb,
                (void      *)0,
                (OS_MSG_SIZE)0,
                ts);
        p_pend_data = p_pend_data_next;
    a85c:	697b      	ldr	r3, [r7, #20]
    a85e:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
    a860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    a862:	f103 33ff 	add.w	r3, r3, #4294967295
    a866:	85fb      	strh	r3, [r7, #46]	; 0x2e
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
    a868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    a86a:	2b00      	cmp	r3, #0
    a86c:	d1e6      	bne.n	a83c <OS_SemPost+0xd8>
                (OS_MSG_SIZE)0,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    ctr = p_sem->Ctr;
    a86e:	68fb      	ldr	r3, [r7, #12]
    a870:	6a1b      	ldr	r3, [r3, #32]
    a872:	61fb      	str	r3, [r7, #28]
    OS_CRITICAL_EXIT_NO_SCHED();
    a874:	f00d fab6 	bl	17de4 <CPU_SR_Save>
    a878:	6278      	str	r0, [r7, #36]	; 0x24
    a87a:	f7f7 f81d 	bl	18b8 <CPU_IntDisMeasStart>
    a87e:	f643 5350 	movw	r3, #15696	; 0x3d50
    a882:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a886:	781b      	ldrb	r3, [r3, #0]
    a888:	f103 33ff 	add.w	r3, r3, #4294967295
    a88c:	b2da      	uxtb	r2, r3
    a88e:	f643 5350 	movw	r3, #15696	; 0x3d50
    a892:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a896:	701a      	strb	r2, [r3, #0]
    a898:	f643 5350 	movw	r3, #15696	; 0x3d50
    a89c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d101      	bne.n	a8aa <OS_SemPost+0x146>
    a8a6:	f004 ffb7 	bl	f818 <OS_SchedLockTimeMeasStop>
    a8aa:	f7f7 f831 	bl	1910 <CPU_IntDisMeasStop>
    a8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a8b0:	f00d fa9c 	bl	17dec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    a8b4:	897b      	ldrh	r3, [r7, #10]
    a8b6:	b21b      	sxth	r3, r3
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	db01      	blt.n	a8c0 <OS_SemPost+0x15c>
        OSSched();                                          /* Run the scheduler                                      */
    a8bc:	f003 feb0 	bl	e620 <OSSched>
    }
    *p_err = OS_ERR_NONE;
    a8c0:	683b      	ldr	r3, [r7, #0]
    a8c2:	f04f 0200 	mov.w	r2, #0
    a8c6:	801a      	strh	r2, [r3, #0]
    return (ctr);
    a8c8:	69fb      	ldr	r3, [r7, #28]
}
    a8ca:	4618      	mov	r0, r3
    a8cc:	f107 0730 	add.w	r7, r7, #48	; 0x30
    a8d0:	46bd      	mov	sp, r7
    a8d2:	bd80      	pop	{r7, pc}

0000a8d4 <OSFlagCreate>:

void  OSFlagCreate (OS_FLAG_GRP  *p_grp,
                    CPU_CHAR     *p_name,
                    OS_FLAGS      flags,
                    OS_ERR       *p_err)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	b086      	sub	sp, #24
    a8d8:	af00      	add	r7, sp, #0
    a8da:	60f8      	str	r0, [r7, #12]
    a8dc:	60b9      	str	r1, [r7, #8]
    a8de:	607a      	str	r2, [r7, #4]
    a8e0:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
    a8e2:	f04f 0300 	mov.w	r3, #0
    a8e6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    a8e8:	f244 1381 	movw	r3, #16769	; 0x4181
    a8ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	d004      	beq.n	a900 <OSFlagCreate+0x2c>
        *p_err = OS_ERR_CREATE_ISR;                         /* ... can't CREATE from an ISR                           */
    a8f6:	683b      	ldr	r3, [r7, #0]
    a8f8:	f642 62e1 	movw	r2, #12001	; 0x2ee1
    a8fc:	801a      	strh	r2, [r3, #0]
        return;
    a8fe:	e086      	b.n	aa0e <OSFlagCreate+0x13a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
    a900:	68fb      	ldr	r3, [r7, #12]
    a902:	2b00      	cmp	r3, #0
    a904:	d104      	bne.n	a910 <OSFlagCreate+0x3c>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    a906:	683b      	ldr	r3, [r7, #0]
    a908:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    a90c:	801a      	strh	r2, [r3, #0]
        return;
    a90e:	e07e      	b.n	aa0e <OSFlagCreate+0x13a>
    }
#endif

    OS_CRITICAL_ENTER();
    a910:	f00d fa68 	bl	17de4 <CPU_SR_Save>
    a914:	6178      	str	r0, [r7, #20]
    a916:	f7f6 ffcf 	bl	18b8 <CPU_IntDisMeasStart>
    a91a:	f643 5350 	movw	r3, #15696	; 0x3d50
    a91e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a922:	781b      	ldrb	r3, [r3, #0]
    a924:	f103 0301 	add.w	r3, r3, #1
    a928:	b2da      	uxtb	r2, r3
    a92a:	f643 5350 	movw	r3, #15696	; 0x3d50
    a92e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a932:	701a      	strb	r2, [r3, #0]
    a934:	f643 5350 	movw	r3, #15696	; 0x3d50
    a938:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	2b01      	cmp	r3, #1
    a940:	d101      	bne.n	a946 <OSFlagCreate+0x72>
    a942:	f004 ff57 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    a946:	f7f6 ffe3 	bl	1910 <CPU_IntDisMeasStop>
    a94a:	6978      	ldr	r0, [r7, #20]
    a94c:	f00d fa4e 	bl	17dec <CPU_SR_Restore>
    p_grp->Type    = OS_OBJ_TYPE_FLAG;                      /* Set to event flag group type                           */
    a950:	68fa      	ldr	r2, [r7, #12]
    a952:	f644 4346 	movw	r3, #19526	; 0x4c46
    a956:	f2c4 7341 	movt	r3, #18241	; 0x4741
    a95a:	6013      	str	r3, [r2, #0]
    p_grp->NamePtr = p_name;
    a95c:	68fb      	ldr	r3, [r7, #12]
    a95e:	68ba      	ldr	r2, [r7, #8]
    a960:	605a      	str	r2, [r3, #4]
    p_grp->Flags   = flags;                                 /* Set to desired initial value                           */
    a962:	68fb      	ldr	r3, [r7, #12]
    a964:	687a      	ldr	r2, [r7, #4]
    a966:	621a      	str	r2, [r3, #32]
    p_grp->TS      = (CPU_TS)0;
    a968:	68fb      	ldr	r3, [r7, #12]
    a96a:	f04f 0200 	mov.w	r2, #0
    a96e:	625a      	str	r2, [r3, #36]	; 0x24
    OS_PendListInit(&p_grp->PendList);
    a970:	68fb      	ldr	r3, [r7, #12]
    a972:	f103 0308 	add.w	r3, r3, #8
    a976:	4618      	mov	r0, r3
    a978:	f004 fad0 	bl	ef1c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_FlagDbgListAdd(p_grp);
    a97c:	68f8      	ldr	r0, [r7, #12]
    a97e:	f000 ff25 	bl	b7cc <OS_FlagDbgListAdd>
#endif
    OSFlagQty++;
    a982:	f244 4340 	movw	r3, #17472	; 0x4440
    a986:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a98a:	881b      	ldrh	r3, [r3, #0]
    a98c:	f103 0301 	add.w	r3, r3, #1
    a990:	b29a      	uxth	r2, r3
    a992:	f244 4340 	movw	r3, #17472	; 0x4440
    a996:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a99a:	801a      	strh	r2, [r3, #0]

    OS_CRITICAL_EXIT();
    a99c:	f00d fa22 	bl	17de4 <CPU_SR_Save>
    a9a0:	6178      	str	r0, [r7, #20]
    a9a2:	f7f6 ff89 	bl	18b8 <CPU_IntDisMeasStart>
    a9a6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a9aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a9ae:	781b      	ldrb	r3, [r3, #0]
    a9b0:	f103 33ff 	add.w	r3, r3, #4294967295
    a9b4:	b2da      	uxtb	r2, r3
    a9b6:	f643 5350 	movw	r3, #15696	; 0x3d50
    a9ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a9be:	701a      	strb	r2, [r3, #0]
    a9c0:	f643 5350 	movw	r3, #15696	; 0x3d50
    a9c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d116      	bne.n	a9fc <OSFlagCreate+0x128>
    a9ce:	f004 ff23 	bl	f818 <OS_SchedLockTimeMeasStop>
    a9d2:	f244 533c 	movw	r3, #17724	; 0x453c
    a9d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a9da:	881b      	ldrh	r3, [r3, #0]
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d007      	beq.n	a9f0 <OSFlagCreate+0x11c>
    a9e0:	f7f6 ff96 	bl	1910 <CPU_IntDisMeasStop>
    a9e4:	6978      	ldr	r0, [r7, #20]
    a9e6:	f00d fa01 	bl	17dec <CPU_SR_Restore>
    a9ea:	f004 fec9 	bl	f780 <OS_Sched0>
    a9ee:	e00a      	b.n	aa06 <OSFlagCreate+0x132>
    a9f0:	f7f6 ff8e 	bl	1910 <CPU_IntDisMeasStop>
    a9f4:	6978      	ldr	r0, [r7, #20]
    a9f6:	f00d f9f9 	bl	17dec <CPU_SR_Restore>
    a9fa:	e004      	b.n	aa06 <OSFlagCreate+0x132>
    a9fc:	f7f6 ff88 	bl	1910 <CPU_IntDisMeasStop>
    aa00:	6978      	ldr	r0, [r7, #20]
    aa02:	f00d f9f3 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    aa06:	683b      	ldr	r3, [r7, #0]
    aa08:	f04f 0200 	mov.w	r2, #0
    aa0c:	801a      	strh	r2, [r3, #0]
}
    aa0e:	f107 0718 	add.w	r7, r7, #24
    aa12:	46bd      	mov	sp, r7
    aa14:	bd80      	pop	{r7, pc}
    aa16:	bf00      	nop

0000aa18 <OSFlagDel>:

#if OS_CFG_FLAG_DEL_EN > 0u
OS_OBJ_QTY  OSFlagDel (OS_FLAG_GRP  *p_grp,
                       OS_OPT        opt,
                       OS_ERR       *p_err)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b08c      	sub	sp, #48	; 0x30
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	60f8      	str	r0, [r7, #12]
    aa20:	460b      	mov	r3, r1
    aa22:	607a      	str	r2, [r7, #4]
    aa24:	817b      	strh	r3, [r7, #10]
    OS_OBJ_QTY        nbr_tasks;
    OS_PEND_DATA     *p_pend_data;
    OS_PEND_LIST     *p_pend_list;
    OS_TCB           *p_tcb;
    CPU_TS            ts;
    CPU_SR_ALLOC();
    aa26:	f04f 0300 	mov.w	r3, #0
    aa2a:	62bb      	str	r3, [r7, #40]	; 0x28
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    aa2c:	f244 1381 	movw	r3, #16769	; 0x4181
    aa30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aa34:	781b      	ldrb	r3, [r3, #0]
    aa36:	2b00      	cmp	r3, #0
    aa38:	d006      	beq.n	aa48 <OSFlagDel+0x30>
        *p_err = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR                           */
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	f243 22c9 	movw	r2, #13001	; 0x32c9
    aa40:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    aa42:	f04f 0300 	mov.w	r3, #0
    aa46:	e16b      	b.n	ad20 <OSFlagDel+0x308>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
    aa48:	68fb      	ldr	r3, [r7, #12]
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d106      	bne.n	aa5c <OSFlagDel+0x44>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    aa4e:	687b      	ldr	r3, [r7, #4]
    aa50:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    aa54:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    aa56:	f04f 0300 	mov.w	r3, #0
    aa5a:	e161      	b.n	ad20 <OSFlagDel+0x308>
    }
    switch (opt) {
    aa5c:	897b      	ldrh	r3, [r7, #10]
    aa5e:	f103 0300 	add.w	r3, r3, #0
    aa62:	2b01      	cmp	r3, #1
    aa64:	d809      	bhi.n	aa7a <OSFlagDel+0x62>
        case OS_OPT_DEL_NO_PEND:
        case OS_OPT_DEL_ALWAYS:
             break;
    aa66:	bf00      	nop
             return ((OS_OBJ_QTY)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Validate event group object                            */
    aa68:	68fb      	ldr	r3, [r7, #12]
    aa6a:	681a      	ldr	r2, [r3, #0]
    aa6c:	f644 4346 	movw	r3, #19526	; 0x4c46
    aa70:	f2c4 7341 	movt	r3, #18241	; 0x4741
    aa74:	429a      	cmp	r2, r3
    aa76:	d00e      	beq.n	aa96 <OSFlagDel+0x7e>
    aa78:	e006      	b.n	aa88 <OSFlagDel+0x70>
        case OS_OPT_DEL_NO_PEND:
        case OS_OPT_DEL_ALWAYS:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	f645 6225 	movw	r2, #24101	; 0x5e25
    aa80:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0);
    aa82:	f04f 0300 	mov.w	r3, #0
    aa86:	e14b      	b.n	ad20 <OSFlagDel+0x308>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Validate event group object                            */
        *p_err = OS_ERR_OBJ_TYPE;
    aa88:	687b      	ldr	r3, [r7, #4]
    aa8a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    aa8e:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    aa90:	f04f 0300 	mov.w	r3, #0
    aa94:	e144      	b.n	ad20 <OSFlagDel+0x308>
    }
#endif
    OS_CRITICAL_ENTER();
    aa96:	f00d f9a5 	bl	17de4 <CPU_SR_Save>
    aa9a:	62b8      	str	r0, [r7, #40]	; 0x28
    aa9c:	f7f6 ff0c 	bl	18b8 <CPU_IntDisMeasStart>
    aaa0:	f643 5350 	movw	r3, #15696	; 0x3d50
    aaa4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aaa8:	781b      	ldrb	r3, [r3, #0]
    aaaa:	f103 0301 	add.w	r3, r3, #1
    aaae:	b2da      	uxtb	r2, r3
    aab0:	f643 5350 	movw	r3, #15696	; 0x3d50
    aab4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aab8:	701a      	strb	r2, [r3, #0]
    aaba:	f643 5350 	movw	r3, #15696	; 0x3d50
    aabe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aac2:	781b      	ldrb	r3, [r3, #0]
    aac4:	2b01      	cmp	r3, #1
    aac6:	d101      	bne.n	aacc <OSFlagDel+0xb4>
    aac8:	f004 fe94 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    aacc:	f7f6 ff20 	bl	1910 <CPU_IntDisMeasStop>
    aad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aad2:	f00d f98b 	bl	17dec <CPU_SR_Restore>
    p_pend_list = &p_grp->PendList;
    aad6:	68fb      	ldr	r3, [r7, #12]
    aad8:	f103 0308 	add.w	r3, r3, #8
    aadc:	627b      	str	r3, [r7, #36]	; 0x24
    cnt         = p_pend_list->NbrEntries;
    aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aae0:	891b      	ldrh	r3, [r3, #8]
    aae2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    nbr_tasks   = cnt;
    aae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    aae6:	847b      	strh	r3, [r7, #34]	; 0x22
    switch (opt) {
    aae8:	897b      	ldrh	r3, [r7, #10]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d003      	beq.n	aaf6 <OSFlagDel+0xde>
    aaee:	2b01      	cmp	r3, #1
    aaf0:	f000 808b 	beq.w	ac0a <OSFlagDel+0x1f2>
    aaf4:	e0d9      	b.n	acaa <OSFlagDel+0x292>
        case OS_OPT_DEL_NO_PEND:                            /* Delete group if no task waiting                        */
             if (nbr_tasks == (OS_OBJ_QTY)0) {
    aaf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    aaf8:	2b00      	cmp	r3, #0
    aafa:	d14c      	bne.n	ab96 <OSFlagDel+0x17e>
#if OS_CFG_DBG_EN > 0u
                 OS_FlagDbgListRemove(p_grp);
    aafc:	68f8      	ldr	r0, [r7, #12]
    aafe:	f000 fe99 	bl	b834 <OS_FlagDbgListRemove>
#endif
                 OSFlagQty--;
    ab02:	f244 4340 	movw	r3, #17472	; 0x4440
    ab06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab0a:	881b      	ldrh	r3, [r3, #0]
    ab0c:	f103 33ff 	add.w	r3, r3, #4294967295
    ab10:	b29a      	uxth	r2, r3
    ab12:	f244 4340 	movw	r3, #17472	; 0x4440
    ab16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab1a:	801a      	strh	r2, [r3, #0]
                 OS_FlagClr(p_grp);
    ab1c:	68f8      	ldr	r0, [r7, #12]
    ab1e:	f000 fe19 	bl	b754 <OS_FlagClr>

                 OS_CRITICAL_EXIT();
    ab22:	f00d f95f 	bl	17de4 <CPU_SR_Save>
    ab26:	62b8      	str	r0, [r7, #40]	; 0x28
    ab28:	f7f6 fec6 	bl	18b8 <CPU_IntDisMeasStart>
    ab2c:	f643 5350 	movw	r3, #15696	; 0x3d50
    ab30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	f103 33ff 	add.w	r3, r3, #4294967295
    ab3a:	b2da      	uxtb	r2, r3
    ab3c:	f643 5350 	movw	r3, #15696	; 0x3d50
    ab40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab44:	701a      	strb	r2, [r3, #0]
    ab46:	f643 5350 	movw	r3, #15696	; 0x3d50
    ab4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	2b00      	cmp	r3, #0
    ab52:	d116      	bne.n	ab82 <OSFlagDel+0x16a>
    ab54:	f004 fe60 	bl	f818 <OS_SchedLockTimeMeasStop>
    ab58:	f244 533c 	movw	r3, #17724	; 0x453c
    ab5c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab60:	881b      	ldrh	r3, [r3, #0]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d007      	beq.n	ab76 <OSFlagDel+0x15e>
    ab66:	f7f6 fed3 	bl	1910 <CPU_IntDisMeasStop>
    ab6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab6c:	f00d f93e 	bl	17dec <CPU_SR_Restore>
    ab70:	f004 fe06 	bl	f780 <OS_Sched0>
    ab74:	e00a      	b.n	ab8c <OSFlagDel+0x174>
    ab76:	f7f6 fecb 	bl	1910 <CPU_IntDisMeasStop>
    ab7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab7c:	f00d f936 	bl	17dec <CPU_SR_Restore>
    ab80:	e004      	b.n	ab8c <OSFlagDel+0x174>
    ab82:	f7f6 fec5 	bl	1910 <CPU_IntDisMeasStop>
    ab86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab88:	f00d f930 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	f04f 0200 	mov.w	r2, #0
    ab92:	801a      	strh	r2, [r3, #0]
             } else {
                 OS_CRITICAL_EXIT();
                 *p_err = OS_ERR_TASK_WAITING;
             }
             break;
    ab94:	e0c3      	b.n	ad1e <OSFlagDel+0x306>
                 OS_FlagClr(p_grp);

                 OS_CRITICAL_EXIT();
                 *p_err = OS_ERR_NONE;
             } else {
                 OS_CRITICAL_EXIT();
    ab96:	f00d f925 	bl	17de4 <CPU_SR_Save>
    ab9a:	62b8      	str	r0, [r7, #40]	; 0x28
    ab9c:	f7f6 fe8c 	bl	18b8 <CPU_IntDisMeasStart>
    aba0:	f643 5350 	movw	r3, #15696	; 0x3d50
    aba4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	f103 33ff 	add.w	r3, r3, #4294967295
    abae:	b2da      	uxtb	r2, r3
    abb0:	f643 5350 	movw	r3, #15696	; 0x3d50
    abb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abb8:	701a      	strb	r2, [r3, #0]
    abba:	f643 5350 	movw	r3, #15696	; 0x3d50
    abbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abc2:	781b      	ldrb	r3, [r3, #0]
    abc4:	2b00      	cmp	r3, #0
    abc6:	d116      	bne.n	abf6 <OSFlagDel+0x1de>
    abc8:	f004 fe26 	bl	f818 <OS_SchedLockTimeMeasStop>
    abcc:	f244 533c 	movw	r3, #17724	; 0x453c
    abd0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abd4:	881b      	ldrh	r3, [r3, #0]
    abd6:	2b00      	cmp	r3, #0
    abd8:	d007      	beq.n	abea <OSFlagDel+0x1d2>
    abda:	f7f6 fe99 	bl	1910 <CPU_IntDisMeasStop>
    abde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abe0:	f00d f904 	bl	17dec <CPU_SR_Restore>
    abe4:	f004 fdcc 	bl	f780 <OS_Sched0>
    abe8:	e00a      	b.n	ac00 <OSFlagDel+0x1e8>
    abea:	f7f6 fe91 	bl	1910 <CPU_IntDisMeasStop>
    abee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abf0:	f00d f8fc 	bl	17dec <CPU_SR_Restore>
    abf4:	e004      	b.n	ac00 <OSFlagDel+0x1e8>
    abf6:	f7f6 fe8b 	bl	1910 <CPU_IntDisMeasStop>
    abfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abfc:	f00d f8f6 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_TASK_WAITING;
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	f247 125e 	movw	r2, #29022	; 0x715e
    ac06:	801a      	strh	r2, [r3, #0]
             }
             break;
    ac08:	e089      	b.n	ad1e <OSFlagDel+0x306>

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the event flag group                     */
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
    ac0a:	f7f8 fb87 	bl	331c <CPU_TS_TmrRd>
    ac0e:	61f8      	str	r0, [r7, #28]
             while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
    ac10:	e00e      	b.n	ac30 <OSFlagDel+0x218>
                 p_pend_data = p_pend_list->HeadPtr;
    ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac14:	681b      	ldr	r3, [r3, #0]
    ac16:	61bb      	str	r3, [r7, #24]
                 p_tcb       = p_pend_data->TCBPtr;
    ac18:	69bb      	ldr	r3, [r7, #24]
    ac1a:	689b      	ldr	r3, [r3, #8]
    ac1c:	617b      	str	r3, [r7, #20]
                 OS_PendObjDel((OS_PEND_OBJ *)((void *)p_grp),
    ac1e:	68f8      	ldr	r0, [r7, #12]
    ac20:	6979      	ldr	r1, [r7, #20]
    ac22:	69fa      	ldr	r2, [r7, #28]
    ac24:	f004 fab4 	bl	f190 <OS_PendObjDel>
                               p_tcb,
                               ts);
                 cnt--;
    ac28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    ac2a:	f103 33ff 	add.w	r3, r3, #4294967295
    ac2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
             }
             break;

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the event flag group                     */
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
             while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
    ac30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    ac32:	2b00      	cmp	r3, #0
    ac34:	d1ed      	bne.n	ac12 <OSFlagDel+0x1fa>
                               p_tcb,
                               ts);
                 cnt--;
             }
#if OS_CFG_DBG_EN > 0u
             OS_FlagDbgListRemove(p_grp);
    ac36:	68f8      	ldr	r0, [r7, #12]
    ac38:	f000 fdfc 	bl	b834 <OS_FlagDbgListRemove>
#endif
             OSFlagQty--;
    ac3c:	f244 4340 	movw	r3, #17472	; 0x4440
    ac40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac44:	881b      	ldrh	r3, [r3, #0]
    ac46:	f103 33ff 	add.w	r3, r3, #4294967295
    ac4a:	b29a      	uxth	r2, r3
    ac4c:	f244 4340 	movw	r3, #17472	; 0x4440
    ac50:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac54:	801a      	strh	r2, [r3, #0]
             OS_FlagClr(p_grp);
    ac56:	68f8      	ldr	r0, [r7, #12]
    ac58:	f000 fd7c 	bl	b754 <OS_FlagClr>
             OS_CRITICAL_EXIT_NO_SCHED();
    ac5c:	f00d f8c2 	bl	17de4 <CPU_SR_Save>
    ac60:	62b8      	str	r0, [r7, #40]	; 0x28
    ac62:	f7f6 fe29 	bl	18b8 <CPU_IntDisMeasStart>
    ac66:	f643 5350 	movw	r3, #15696	; 0x3d50
    ac6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac6e:	781b      	ldrb	r3, [r3, #0]
    ac70:	f103 33ff 	add.w	r3, r3, #4294967295
    ac74:	b2da      	uxtb	r2, r3
    ac76:	f643 5350 	movw	r3, #15696	; 0x3d50
    ac7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac7e:	701a      	strb	r2, [r3, #0]
    ac80:	f643 5350 	movw	r3, #15696	; 0x3d50
    ac84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d101      	bne.n	ac92 <OSFlagDel+0x27a>
    ac8e:	f004 fdc3 	bl	f818 <OS_SchedLockTimeMeasStop>
    ac92:	f7f6 fe3d 	bl	1910 <CPU_IntDisMeasStop>
    ac96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac98:	f00d f8a8 	bl	17dec <CPU_SR_Restore>
             OSSched();                                     /* Find highest priority task ready to run                */
    ac9c:	f003 fcc0 	bl	e620 <OSSched>
             *p_err = OS_ERR_NONE;
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	f04f 0200 	mov.w	r2, #0
    aca6:	801a      	strh	r2, [r3, #0]
             break;
    aca8:	e039      	b.n	ad1e <OSFlagDel+0x306>

        default:
             OS_CRITICAL_EXIT();
    acaa:	f00d f89b 	bl	17de4 <CPU_SR_Save>
    acae:	62b8      	str	r0, [r7, #40]	; 0x28
    acb0:	f7f6 fe02 	bl	18b8 <CPU_IntDisMeasStart>
    acb4:	f643 5350 	movw	r3, #15696	; 0x3d50
    acb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    acbc:	781b      	ldrb	r3, [r3, #0]
    acbe:	f103 33ff 	add.w	r3, r3, #4294967295
    acc2:	b2da      	uxtb	r2, r3
    acc4:	f643 5350 	movw	r3, #15696	; 0x3d50
    acc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    accc:	701a      	strb	r2, [r3, #0]
    acce:	f643 5350 	movw	r3, #15696	; 0x3d50
    acd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    acd6:	781b      	ldrb	r3, [r3, #0]
    acd8:	2b00      	cmp	r3, #0
    acda:	d116      	bne.n	ad0a <OSFlagDel+0x2f2>
    acdc:	f004 fd9c 	bl	f818 <OS_SchedLockTimeMeasStop>
    ace0:	f244 533c 	movw	r3, #17724	; 0x453c
    ace4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ace8:	881b      	ldrh	r3, [r3, #0]
    acea:	2b00      	cmp	r3, #0
    acec:	d007      	beq.n	acfe <OSFlagDel+0x2e6>
    acee:	f7f6 fe0f 	bl	1910 <CPU_IntDisMeasStop>
    acf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    acf4:	f00d f87a 	bl	17dec <CPU_SR_Restore>
    acf8:	f004 fd42 	bl	f780 <OS_Sched0>
    acfc:	e00a      	b.n	ad14 <OSFlagDel+0x2fc>
    acfe:	f7f6 fe07 	bl	1910 <CPU_IntDisMeasStop>
    ad02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad04:	f00d f872 	bl	17dec <CPU_SR_Restore>
    ad08:	e004      	b.n	ad14 <OSFlagDel+0x2fc>
    ad0a:	f7f6 fe01 	bl	1910 <CPU_IntDisMeasStop>
    ad0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad10:	f00d f86c 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    ad14:	687b      	ldr	r3, [r7, #4]
    ad16:	f645 6225 	movw	r2, #24101	; 0x5e25
    ad1a:	801a      	strh	r2, [r3, #0]
             break;
    ad1c:	bf00      	nop
    }
    return (nbr_tasks);
    ad1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
    ad20:	4618      	mov	r0, r3
    ad22:	f107 0730 	add.w	r7, r7, #48	; 0x30
    ad26:	46bd      	mov	sp, r7
    ad28:	bd80      	pop	{r7, pc}
    ad2a:	bf00      	nop

0000ad2c <OSFlagPend>:
                      OS_FLAGS     flags,
                      OS_TICK      timeout,
                      OS_OPT       opt,
                      CPU_TS      *p_ts,
                      OS_ERR      *p_err)
{
    ad2c:	b580      	push	{r7, lr}
    ad2e:	b092      	sub	sp, #72	; 0x48
    ad30:	af02      	add	r7, sp, #8
    ad32:	60f8      	str	r0, [r7, #12]
    ad34:	60b9      	str	r1, [r7, #8]
    ad36:	607a      	str	r2, [r7, #4]
    ad38:	807b      	strh	r3, [r7, #2]
    CPU_BOOLEAN   consume;
    OS_FLAGS      flags_rdy;
    OS_OPT        mode;
    OS_PEND_DATA  pend_data;
    CPU_SR_ALLOC();
    ad3a:	f04f 0300 	mov.w	r3, #0
    ad3e:	63bb      	str	r3, [r7, #56]	; 0x38
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    ad40:	f244 1381 	movw	r3, #16769	; 0x4181
    ad44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	d006      	beq.n	ad5c <OSFlagPend+0x30>
        *p_err = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR                             */
    ad4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad50:	f246 12ae 	movw	r2, #25006	; 0x61ae
    ad54:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    ad56:	f04f 0300 	mov.w	r3, #0
    ad5a:	e379      	b.n	b450 <OSFlagPend+0x724>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate arguments                                     */
    ad5c:	68fb      	ldr	r3, [r7, #12]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d106      	bne.n	ad70 <OSFlagPend+0x44>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    ad62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad64:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    ad68:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    ad6a:	f04f 0300 	mov.w	r3, #0
    ad6e:	e36f      	b.n	b450 <OSFlagPend+0x724>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Validate that we are pointing at an event flag         */
    ad70:	68fb      	ldr	r3, [r7, #12]
    ad72:	681a      	ldr	r2, [r3, #0]
    ad74:	f644 4346 	movw	r3, #19526	; 0x4c46
    ad78:	f2c4 7341 	movt	r3, #18241	; 0x4741
    ad7c:	429a      	cmp	r2, r3
    ad7e:	d006      	beq.n	ad8e <OSFlagPend+0x62>
        *p_err = OS_ERR_OBJ_TYPE;
    ad80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ad82:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    ad86:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    ad88:	f04f 0300 	mov.w	r3, #0
    ad8c:	e360      	b.n	b450 <OSFlagPend+0x724>
    }
#endif

    if ((opt & OS_OPT_PEND_FLAG_CONSUME) != (OS_OPT)0) {    /* See if we need to consume the flags                    */
    ad8e:	887b      	ldrh	r3, [r7, #2]
    ad90:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ad94:	2b00      	cmp	r3, #0
    ad96:	d004      	beq.n	ada2 <OSFlagPend+0x76>
        consume = DEF_TRUE;
    ad98:	f04f 0301 	mov.w	r3, #1
    ad9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    ada0:	e003      	b.n	adaa <OSFlagPend+0x7e>
    } else {
        consume = DEF_FALSE;
    ada2:	f04f 0300 	mov.w	r3, #0
    ada6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    if (p_ts != (CPU_TS *)0) {
    adaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    adac:	2b00      	cmp	r3, #0
    adae:	d003      	beq.n	adb8 <OSFlagPend+0x8c>
        *p_ts = (CPU_TS)0;                                  /* Initialize the returned timestamp                      */
    adb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    adb2:	f04f 0200 	mov.w	r2, #0
    adb6:	601a      	str	r2, [r3, #0]
    }

    mode = opt & OS_OPT_PEND_FLAG_MASK;
    adb8:	887b      	ldrh	r3, [r7, #2]
    adba:	f003 030f 	and.w	r3, r3, #15
    adbe:	86fb      	strh	r3, [r7, #54]	; 0x36
    CPU_CRITICAL_ENTER();
    adc0:	f00d f810 	bl	17de4 <CPU_SR_Save>
    adc4:	63b8      	str	r0, [r7, #56]	; 0x38
    adc6:	f7f6 fd77 	bl	18b8 <CPU_IntDisMeasStart>
    switch (mode) {
    adca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    adcc:	f103 33ff 	add.w	r3, r3, #4294967295
    add0:	2b07      	cmp	r3, #7
    add2:	f200 826d 	bhi.w	b2b0 <OSFlagPend+0x584>
    add6:	a201      	add	r2, pc, #4	; (adr r2, addc <OSFlagPend+0xb0>)
    add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    addc:	0000b057 	.word	0x0000b057
    ade0:	0000b185 	.word	0x0000b185
    ade4:	0000b2b1 	.word	0x0000b2b1
    ade8:	0000adfd 	.word	0x0000adfd
    adec:	0000b2b1 	.word	0x0000b2b1
    adf0:	0000b2b1 	.word	0x0000b2b1
    adf4:	0000b2b1 	.word	0x0000b2b1
    adf8:	0000af2b 	.word	0x0000af2b
        case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all required flags are set                      */
             flags_rdy = (OS_FLAGS)(p_grp->Flags & flags);  /* Extract only the bits we want                          */
    adfc:	68fb      	ldr	r3, [r7, #12]
    adfe:	6a1a      	ldr	r2, [r3, #32]
    ae00:	68bb      	ldr	r3, [r7, #8]
    ae02:	4013      	ands	r3, r2
    ae04:	633b      	str	r3, [r7, #48]	; 0x30
             if (flags_rdy == flags) {                      /* Must match ALL the bits that we want                   */
    ae06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ae08:	68bb      	ldr	r3, [r7, #8]
    ae0a:	429a      	cmp	r2, r3
    ae0c:	d124      	bne.n	ae58 <OSFlagPend+0x12c>
                 if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
    ae0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    ae12:	2b01      	cmp	r3, #1
    ae14:	d107      	bne.n	ae26 <OSFlagPend+0xfa>
                     p_grp->Flags &= ~flags_rdy;            /* Clear ONLY the flags that we wanted                    */
    ae16:	68fb      	ldr	r3, [r7, #12]
    ae18:	6a1a      	ldr	r2, [r3, #32]
    ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae1c:	ea6f 0303 	mvn.w	r3, r3
    ae20:	401a      	ands	r2, r3
    ae22:	68fb      	ldr	r3, [r7, #12]
    ae24:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
    ae26:	f244 135c 	movw	r3, #16732	; 0x415c
    ae2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ae2e:	681b      	ldr	r3, [r3, #0]
    ae30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ae32:	665a      	str	r2, [r3, #100]	; 0x64
                 if (p_ts != (CPU_TS *)0) {
    ae34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ae36:	2b00      	cmp	r3, #0
    ae38:	d003      	beq.n	ae42 <OSFlagPend+0x116>
                    *p_ts  = p_grp->TS;
    ae3a:	68fb      	ldr	r3, [r7, #12]
    ae3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ae3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ae40:	601a      	str	r2, [r3, #0]
                 }
                 CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
    ae42:	f7f6 fd65 	bl	1910 <CPU_IntDisMeasStop>
    ae46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ae48:	f00c ffd0 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    ae4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ae4e:	f04f 0200 	mov.w	r2, #0
    ae52:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
    ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae56:	e2fb      	b.n	b450 <OSFlagPend+0x724>
             } else {                                       /* Block task until events occur or timeout               */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
    ae58:	887b      	ldrh	r3, [r7, #2]
    ae5a:	b21b      	sxth	r3, r3
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	da0b      	bge.n	ae78 <OSFlagPend+0x14c>
                     CPU_CRITICAL_EXIT();
    ae60:	f7f6 fd56 	bl	1910 <CPU_IntDisMeasStop>
    ae64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ae66:	f00c ffc1 	bl	17dec <CPU_SR_Restore>
                     *p_err = OS_ERR_PEND_WOULD_BLOCK;      /* Specified non-blocking so task would block             */
    ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ae6c:	f246 12b0 	movw	r2, #25008	; 0x61b0
    ae70:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
    ae72:	f04f 0300 	mov.w	r3, #0
    ae76:	e2eb      	b.n	b450 <OSFlagPend+0x724>
                 } else {                                   /* Specified blocking so check is scheduler is locked     */
                     if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
    ae78:	f643 5350 	movw	r3, #15696	; 0x3d50
    ae7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	2b00      	cmp	r3, #0
    ae84:	d00b      	beq.n	ae9e <OSFlagPend+0x172>
                         CPU_CRITICAL_EXIT();
    ae86:	f7f6 fd43 	bl	1910 <CPU_IntDisMeasStop>
    ae8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ae8c:	f00c ffae 	bl	17dec <CPU_SR_Restore>
                         *p_err = OS_ERR_SCHED_LOCKED;                /* ... can't PEND when locked                   */
    ae90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ae92:	f646 5262 	movw	r2, #28002	; 0x6d62
    ae96:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
    ae98:	f04f 0300 	mov.w	r3, #0
    ae9c:	e2d8      	b.n	b450 <OSFlagPend+0x724>
                     }
                 }

                 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();     /* Lock the scheduler/re-enable interrupts                */
    ae9e:	f643 5350 	movw	r3, #15696	; 0x3d50
    aea2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	f103 0301 	add.w	r3, r3, #1
    aeac:	b2da      	uxtb	r2, r3
    aeae:	f643 5350 	movw	r3, #15696	; 0x3d50
    aeb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aeb6:	701a      	strb	r2, [r3, #0]
    aeb8:	f643 5350 	movw	r3, #15696	; 0x3d50
    aebc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aec0:	781b      	ldrb	r3, [r3, #0]
    aec2:	2b01      	cmp	r3, #1
    aec4:	d101      	bne.n	aeca <OSFlagPend+0x19e>
    aec6:	f004 fc95 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    aeca:	f7f6 fd21 	bl	1910 <CPU_IntDisMeasStop>
    aece:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    aed0:	f00c ff8c 	bl	17dec <CPU_SR_Restore>
                 OS_FlagBlock(&pend_data,
    aed4:	887b      	ldrh	r3, [r7, #2]
    aed6:	687a      	ldr	r2, [r7, #4]
    aed8:	9200      	str	r2, [sp, #0]
    aeda:	f107 0210 	add.w	r2, r7, #16
    aede:	4610      	mov	r0, r2
    aee0:	68f9      	ldr	r1, [r7, #12]
    aee2:	68ba      	ldr	r2, [r7, #8]
    aee4:	f000 fc0c 	bl	b700 <OS_FlagBlock>
                              p_grp,
                              flags,
                              opt,
                              timeout);
                 OS_CRITICAL_EXIT_NO_SCHED();
    aee8:	f00c ff7c 	bl	17de4 <CPU_SR_Save>
    aeec:	63b8      	str	r0, [r7, #56]	; 0x38
    aeee:	f7f6 fce3 	bl	18b8 <CPU_IntDisMeasStart>
    aef2:	f643 5350 	movw	r3, #15696	; 0x3d50
    aef6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	f103 33ff 	add.w	r3, r3, #4294967295
    af00:	b2da      	uxtb	r2, r3
    af02:	f643 5350 	movw	r3, #15696	; 0x3d50
    af06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    af0a:	701a      	strb	r2, [r3, #0]
    af0c:	f643 5350 	movw	r3, #15696	; 0x3d50
    af10:	f2c1 0300 	movt	r3, #4096	; 0x1000
    af14:	781b      	ldrb	r3, [r3, #0]
    af16:	2b00      	cmp	r3, #0
    af18:	d101      	bne.n	af1e <OSFlagPend+0x1f2>
    af1a:	f004 fc7d 	bl	f818 <OS_SchedLockTimeMeasStop>
    af1e:	f7f6 fcf7 	bl	1910 <CPU_IntDisMeasStop>
    af22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    af24:	f00c ff62 	bl	17dec <CPU_SR_Restore>
             }
             break;
    af28:	e1ce      	b.n	b2c8 <OSFlagPend+0x59c>

        case OS_OPT_PEND_FLAG_SET_ANY:
             flags_rdy = (OS_FLAGS)(p_grp->Flags & flags);  /* Extract only the bits we want                          */
    af2a:	68fb      	ldr	r3, [r7, #12]
    af2c:	6a1a      	ldr	r2, [r3, #32]
    af2e:	68bb      	ldr	r3, [r7, #8]
    af30:	4013      	ands	r3, r2
    af32:	633b      	str	r3, [r7, #48]	; 0x30
             if (flags_rdy != (OS_FLAGS)0) {                /* See if any flag set                                    */
    af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af36:	2b00      	cmp	r3, #0
    af38:	d024      	beq.n	af84 <OSFlagPend+0x258>
                 if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
    af3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    af3e:	2b01      	cmp	r3, #1
    af40:	d107      	bne.n	af52 <OSFlagPend+0x226>
                     p_grp->Flags &= ~flags_rdy;            /* Clear ONLY the flags that we got                       */
    af42:	68fb      	ldr	r3, [r7, #12]
    af44:	6a1a      	ldr	r2, [r3, #32]
    af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af48:	ea6f 0303 	mvn.w	r3, r3
    af4c:	401a      	ands	r2, r3
    af4e:	68fb      	ldr	r3, [r7, #12]
    af50:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
    af52:	f244 135c 	movw	r3, #16732	; 0x415c
    af56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    af5a:	681b      	ldr	r3, [r3, #0]
    af5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    af5e:	665a      	str	r2, [r3, #100]	; 0x64
                 if (p_ts != (CPU_TS *)0) {
    af60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    af62:	2b00      	cmp	r3, #0
    af64:	d003      	beq.n	af6e <OSFlagPend+0x242>
                    *p_ts  = p_grp->TS;
    af66:	68fb      	ldr	r3, [r7, #12]
    af68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    af6c:	601a      	str	r2, [r3, #0]
                 }
                 CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
    af6e:	f7f6 fccf 	bl	1910 <CPU_IntDisMeasStop>
    af72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    af74:	f00c ff3a 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    af78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af7a:	f04f 0200 	mov.w	r2, #0
    af7e:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
    af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af82:	e265      	b.n	b450 <OSFlagPend+0x724>
             } else {                                       /* Block task until events occur or timeout               */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
    af84:	887b      	ldrh	r3, [r7, #2]
    af86:	b21b      	sxth	r3, r3
    af88:	2b00      	cmp	r3, #0
    af8a:	da0b      	bge.n	afa4 <OSFlagPend+0x278>
                     CPU_CRITICAL_EXIT();
    af8c:	f7f6 fcc0 	bl	1910 <CPU_IntDisMeasStop>
    af90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    af92:	f00c ff2b 	bl	17dec <CPU_SR_Restore>
                     *p_err = OS_ERR_PEND_WOULD_BLOCK;      /* Specified non-blocking so task would block             */
    af96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af98:	f246 12b0 	movw	r2, #25008	; 0x61b0
    af9c:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
    af9e:	f04f 0300 	mov.w	r3, #0
    afa2:	e255      	b.n	b450 <OSFlagPend+0x724>
                 } else {                                   /* Specified blocking so check is scheduler is locked     */
                     if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
    afa4:	f643 5350 	movw	r3, #15696	; 0x3d50
    afa8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    afac:	781b      	ldrb	r3, [r3, #0]
    afae:	2b00      	cmp	r3, #0
    afb0:	d00b      	beq.n	afca <OSFlagPend+0x29e>
                         CPU_CRITICAL_EXIT();
    afb2:	f7f6 fcad 	bl	1910 <CPU_IntDisMeasStop>
    afb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    afb8:	f00c ff18 	bl	17dec <CPU_SR_Restore>
                         *p_err = OS_ERR_SCHED_LOCKED;                /* ... can't PEND when locked                   */
    afbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afbe:	f646 5262 	movw	r2, #28002	; 0x6d62
    afc2:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
    afc4:	f04f 0300 	mov.w	r3, #0
    afc8:	e242      	b.n	b450 <OSFlagPend+0x724>
                     }
                 }

                 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();     /* Lock the scheduler/re-enable interrupts                */
    afca:	f643 5350 	movw	r3, #15696	; 0x3d50
    afce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    afd2:	781b      	ldrb	r3, [r3, #0]
    afd4:	f103 0301 	add.w	r3, r3, #1
    afd8:	b2da      	uxtb	r2, r3
    afda:	f643 5350 	movw	r3, #15696	; 0x3d50
    afde:	f2c1 0300 	movt	r3, #4096	; 0x1000
    afe2:	701a      	strb	r2, [r3, #0]
    afe4:	f643 5350 	movw	r3, #15696	; 0x3d50
    afe8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    afec:	781b      	ldrb	r3, [r3, #0]
    afee:	2b01      	cmp	r3, #1
    aff0:	d101      	bne.n	aff6 <OSFlagPend+0x2ca>
    aff2:	f004 fbff 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    aff6:	f7f6 fc8b 	bl	1910 <CPU_IntDisMeasStop>
    affa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    affc:	f00c fef6 	bl	17dec <CPU_SR_Restore>
                 OS_FlagBlock(&pend_data,
    b000:	887b      	ldrh	r3, [r7, #2]
    b002:	687a      	ldr	r2, [r7, #4]
    b004:	9200      	str	r2, [sp, #0]
    b006:	f107 0210 	add.w	r2, r7, #16
    b00a:	4610      	mov	r0, r2
    b00c:	68f9      	ldr	r1, [r7, #12]
    b00e:	68ba      	ldr	r2, [r7, #8]
    b010:	f000 fb76 	bl	b700 <OS_FlagBlock>
                              p_grp,
                              flags,
                              opt,
                              timeout);
                 OS_CRITICAL_EXIT_NO_SCHED();
    b014:	f00c fee6 	bl	17de4 <CPU_SR_Save>
    b018:	63b8      	str	r0, [r7, #56]	; 0x38
    b01a:	f7f6 fc4d 	bl	18b8 <CPU_IntDisMeasStart>
    b01e:	f643 5350 	movw	r3, #15696	; 0x3d50
    b022:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b026:	781b      	ldrb	r3, [r3, #0]
    b028:	f103 33ff 	add.w	r3, r3, #4294967295
    b02c:	b2da      	uxtb	r2, r3
    b02e:	f643 5350 	movw	r3, #15696	; 0x3d50
    b032:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b036:	701a      	strb	r2, [r3, #0]
    b038:	f643 5350 	movw	r3, #15696	; 0x3d50
    b03c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	2b00      	cmp	r3, #0
    b044:	d101      	bne.n	b04a <OSFlagPend+0x31e>
    b046:	f004 fbe7 	bl	f818 <OS_SchedLockTimeMeasStop>
    b04a:	f7f6 fc61 	bl	1910 <CPU_IntDisMeasStop>
    b04e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b050:	f00c fecc 	bl	17dec <CPU_SR_Restore>
             }
             break;
    b054:	e138      	b.n	b2c8 <OSFlagPend+0x59c>

#if OS_CFG_FLAG_MODE_CLR_EN > 0u
        case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all required flags are cleared                  */
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags); /* Extract only the bits we want                          */
    b056:	68fb      	ldr	r3, [r7, #12]
    b058:	6a1b      	ldr	r3, [r3, #32]
    b05a:	ea6f 0203 	mvn.w	r2, r3
    b05e:	68bb      	ldr	r3, [r7, #8]
    b060:	4013      	ands	r3, r2
    b062:	633b      	str	r3, [r7, #48]	; 0x30
             if (flags_rdy == flags) {                      /* Must match ALL the bits that we want                   */
    b064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b066:	68bb      	ldr	r3, [r7, #8]
    b068:	429a      	cmp	r2, r3
    b06a:	d122      	bne.n	b0b2 <OSFlagPend+0x386>
                 if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
    b06c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    b070:	2b01      	cmp	r3, #1
    b072:	d105      	bne.n	b080 <OSFlagPend+0x354>
                     p_grp->Flags |= flags_rdy;             /* Set ONLY the flags that we wanted                      */
    b074:	68fb      	ldr	r3, [r7, #12]
    b076:	6a1a      	ldr	r2, [r3, #32]
    b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b07a:	431a      	orrs	r2, r3
    b07c:	68fb      	ldr	r3, [r7, #12]
    b07e:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
    b080:	f244 135c 	movw	r3, #16732	; 0x415c
    b084:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b088:	681b      	ldr	r3, [r3, #0]
    b08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b08c:	665a      	str	r2, [r3, #100]	; 0x64
                 if (p_ts != (CPU_TS *)0) {
    b08e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b090:	2b00      	cmp	r3, #0
    b092:	d003      	beq.n	b09c <OSFlagPend+0x370>
                    *p_ts  = p_grp->TS;
    b094:	68fb      	ldr	r3, [r7, #12]
    b096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b09a:	601a      	str	r2, [r3, #0]
                 }
                 CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
    b09c:	f7f6 fc38 	bl	1910 <CPU_IntDisMeasStop>
    b0a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b0a2:	f00c fea3 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    b0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0a8:	f04f 0200 	mov.w	r2, #0
    b0ac:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
    b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0b0:	e1ce      	b.n	b450 <OSFlagPend+0x724>
             } else {                                       /* Block task until events occur or timeout               */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
    b0b2:	887b      	ldrh	r3, [r7, #2]
    b0b4:	b21b      	sxth	r3, r3
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	da0b      	bge.n	b0d2 <OSFlagPend+0x3a6>
                     CPU_CRITICAL_EXIT();
    b0ba:	f7f6 fc29 	bl	1910 <CPU_IntDisMeasStop>
    b0be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b0c0:	f00c fe94 	bl	17dec <CPU_SR_Restore>
                     *p_err = OS_ERR_PEND_WOULD_BLOCK;      /* Specified non-blocking so task would block             */
    b0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0c6:	f246 12b0 	movw	r2, #25008	; 0x61b0
    b0ca:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
    b0cc:	f04f 0300 	mov.w	r3, #0
    b0d0:	e1be      	b.n	b450 <OSFlagPend+0x724>
                 } else {                                   /* Specified blocking so check is scheduler is locked     */
                     if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
    b0d2:	f643 5350 	movw	r3, #15696	; 0x3d50
    b0d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b0da:	781b      	ldrb	r3, [r3, #0]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d00b      	beq.n	b0f8 <OSFlagPend+0x3cc>
                         CPU_CRITICAL_EXIT();
    b0e0:	f7f6 fc16 	bl	1910 <CPU_IntDisMeasStop>
    b0e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b0e6:	f00c fe81 	bl	17dec <CPU_SR_Restore>
                         *p_err = OS_ERR_SCHED_LOCKED;                /* ... can't PEND when locked                   */
    b0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0ec:	f646 5262 	movw	r2, #28002	; 0x6d62
    b0f0:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
    b0f2:	f04f 0300 	mov.w	r3, #0
    b0f6:	e1ab      	b.n	b450 <OSFlagPend+0x724>
                     }
                 }

                 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();     /* Lock the scheduler/re-enable interrupts                */
    b0f8:	f643 5350 	movw	r3, #15696	; 0x3d50
    b0fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	f103 0301 	add.w	r3, r3, #1
    b106:	b2da      	uxtb	r2, r3
    b108:	f643 5350 	movw	r3, #15696	; 0x3d50
    b10c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b110:	701a      	strb	r2, [r3, #0]
    b112:	f643 5350 	movw	r3, #15696	; 0x3d50
    b116:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	2b01      	cmp	r3, #1
    b11e:	d101      	bne.n	b124 <OSFlagPend+0x3f8>
    b120:	f004 fb68 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    b124:	f7f6 fbf4 	bl	1910 <CPU_IntDisMeasStop>
    b128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b12a:	f00c fe5f 	bl	17dec <CPU_SR_Restore>
                 OS_FlagBlock(&pend_data,
    b12e:	887b      	ldrh	r3, [r7, #2]
    b130:	687a      	ldr	r2, [r7, #4]
    b132:	9200      	str	r2, [sp, #0]
    b134:	f107 0210 	add.w	r2, r7, #16
    b138:	4610      	mov	r0, r2
    b13a:	68f9      	ldr	r1, [r7, #12]
    b13c:	68ba      	ldr	r2, [r7, #8]
    b13e:	f000 fadf 	bl	b700 <OS_FlagBlock>
                              p_grp,
                              flags,
                              opt,
                              timeout);
                 OS_CRITICAL_EXIT_NO_SCHED();
    b142:	f00c fe4f 	bl	17de4 <CPU_SR_Save>
    b146:	63b8      	str	r0, [r7, #56]	; 0x38
    b148:	f7f6 fbb6 	bl	18b8 <CPU_IntDisMeasStart>
    b14c:	f643 5350 	movw	r3, #15696	; 0x3d50
    b150:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b154:	781b      	ldrb	r3, [r3, #0]
    b156:	f103 33ff 	add.w	r3, r3, #4294967295
    b15a:	b2da      	uxtb	r2, r3
    b15c:	f643 5350 	movw	r3, #15696	; 0x3d50
    b160:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b164:	701a      	strb	r2, [r3, #0]
    b166:	f643 5350 	movw	r3, #15696	; 0x3d50
    b16a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b16e:	781b      	ldrb	r3, [r3, #0]
    b170:	2b00      	cmp	r3, #0
    b172:	d101      	bne.n	b178 <OSFlagPend+0x44c>
    b174:	f004 fb50 	bl	f818 <OS_SchedLockTimeMeasStop>
    b178:	f7f6 fbca 	bl	1910 <CPU_IntDisMeasStop>
    b17c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b17e:	f00c fe35 	bl	17dec <CPU_SR_Restore>
             }
             break;
    b182:	e0a1      	b.n	b2c8 <OSFlagPend+0x59c>

        case OS_OPT_PEND_FLAG_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags); /* Extract only the bits we want                          */
    b184:	68fb      	ldr	r3, [r7, #12]
    b186:	6a1b      	ldr	r3, [r3, #32]
    b188:	ea6f 0203 	mvn.w	r2, r3
    b18c:	68bb      	ldr	r3, [r7, #8]
    b18e:	4013      	ands	r3, r2
    b190:	633b      	str	r3, [r7, #48]	; 0x30
             if (flags_rdy != (OS_FLAGS)0) {                /* See if any flag cleared                                */
    b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b194:	2b00      	cmp	r3, #0
    b196:	d022      	beq.n	b1de <OSFlagPend+0x4b2>
                 if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
    b198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    b19c:	2b01      	cmp	r3, #1
    b19e:	d105      	bne.n	b1ac <OSFlagPend+0x480>
                     p_grp->Flags |= flags_rdy;             /* Set ONLY the flags that we got                         */
    b1a0:	68fb      	ldr	r3, [r7, #12]
    b1a2:	6a1a      	ldr	r2, [r3, #32]
    b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b1a6:	431a      	orrs	r2, r3
    b1a8:	68fb      	ldr	r3, [r7, #12]
    b1aa:	621a      	str	r2, [r3, #32]
                 }
                 OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
    b1ac:	f244 135c 	movw	r3, #16732	; 0x415c
    b1b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b1b4:	681b      	ldr	r3, [r3, #0]
    b1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b1b8:	665a      	str	r2, [r3, #100]	; 0x64
                 if (p_ts != (CPU_TS *)0) {
    b1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b1bc:	2b00      	cmp	r3, #0
    b1be:	d003      	beq.n	b1c8 <OSFlagPend+0x49c>
                    *p_ts  = p_grp->TS;
    b1c0:	68fb      	ldr	r3, [r7, #12]
    b1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b1c6:	601a      	str	r2, [r3, #0]
                 }
                 CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
    b1c8:	f7f6 fba2 	bl	1910 <CPU_IntDisMeasStop>
    b1cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b1ce:	f00c fe0d 	bl	17dec <CPU_SR_Restore>
                 *p_err    = OS_ERR_NONE;
    b1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b1d4:	f04f 0200 	mov.w	r2, #0
    b1d8:	801a      	strh	r2, [r3, #0]
                 return (flags_rdy);
    b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b1dc:	e138      	b.n	b450 <OSFlagPend+0x724>
             } else {                                       /* Block task until events occur or timeout               */
                 if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
    b1de:	887b      	ldrh	r3, [r7, #2]
    b1e0:	b21b      	sxth	r3, r3
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	da0b      	bge.n	b1fe <OSFlagPend+0x4d2>
                     CPU_CRITICAL_EXIT();
    b1e6:	f7f6 fb93 	bl	1910 <CPU_IntDisMeasStop>
    b1ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b1ec:	f00c fdfe 	bl	17dec <CPU_SR_Restore>
                     *p_err = OS_ERR_PEND_WOULD_BLOCK;      /* Specified non-blocking so task would block             */
    b1f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b1f2:	f246 12b0 	movw	r2, #25008	; 0x61b0
    b1f6:	801a      	strh	r2, [r3, #0]
                     return ((OS_FLAGS)0);
    b1f8:	f04f 0300 	mov.w	r3, #0
    b1fc:	e128      	b.n	b450 <OSFlagPend+0x724>
                 } else {                                   /* Specified blocking so check is scheduler is locked     */
                     if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
    b1fe:	f643 5350 	movw	r3, #15696	; 0x3d50
    b202:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b206:	781b      	ldrb	r3, [r3, #0]
    b208:	2b00      	cmp	r3, #0
    b20a:	d00b      	beq.n	b224 <OSFlagPend+0x4f8>
                         CPU_CRITICAL_EXIT();
    b20c:	f7f6 fb80 	bl	1910 <CPU_IntDisMeasStop>
    b210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b212:	f00c fdeb 	bl	17dec <CPU_SR_Restore>
                         *p_err = OS_ERR_SCHED_LOCKED;                /* ... can't PEND when locked                   */
    b216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b218:	f646 5262 	movw	r2, #28002	; 0x6d62
    b21c:	801a      	strh	r2, [r3, #0]
                         return ((OS_FLAGS)0);
    b21e:	f04f 0300 	mov.w	r3, #0
    b222:	e115      	b.n	b450 <OSFlagPend+0x724>
                     }
                 }

                 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();     /* Lock the scheduler/re-enable interrupts                */
    b224:	f643 5350 	movw	r3, #15696	; 0x3d50
    b228:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b22c:	781b      	ldrb	r3, [r3, #0]
    b22e:	f103 0301 	add.w	r3, r3, #1
    b232:	b2da      	uxtb	r2, r3
    b234:	f643 5350 	movw	r3, #15696	; 0x3d50
    b238:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b23c:	701a      	strb	r2, [r3, #0]
    b23e:	f643 5350 	movw	r3, #15696	; 0x3d50
    b242:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b246:	781b      	ldrb	r3, [r3, #0]
    b248:	2b01      	cmp	r3, #1
    b24a:	d101      	bne.n	b250 <OSFlagPend+0x524>
    b24c:	f004 fad2 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    b250:	f7f6 fb5e 	bl	1910 <CPU_IntDisMeasStop>
    b254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b256:	f00c fdc9 	bl	17dec <CPU_SR_Restore>
                 OS_FlagBlock(&pend_data,
    b25a:	887b      	ldrh	r3, [r7, #2]
    b25c:	687a      	ldr	r2, [r7, #4]
    b25e:	9200      	str	r2, [sp, #0]
    b260:	f107 0210 	add.w	r2, r7, #16
    b264:	4610      	mov	r0, r2
    b266:	68f9      	ldr	r1, [r7, #12]
    b268:	68ba      	ldr	r2, [r7, #8]
    b26a:	f000 fa49 	bl	b700 <OS_FlagBlock>
                              p_grp,
                              flags,
                              opt,
                              timeout);
                 OS_CRITICAL_EXIT_NO_SCHED();
    b26e:	f00c fdb9 	bl	17de4 <CPU_SR_Save>
    b272:	63b8      	str	r0, [r7, #56]	; 0x38
    b274:	f7f6 fb20 	bl	18b8 <CPU_IntDisMeasStart>
    b278:	f643 5350 	movw	r3, #15696	; 0x3d50
    b27c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b280:	781b      	ldrb	r3, [r3, #0]
    b282:	f103 33ff 	add.w	r3, r3, #4294967295
    b286:	b2da      	uxtb	r2, r3
    b288:	f643 5350 	movw	r3, #15696	; 0x3d50
    b28c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b290:	701a      	strb	r2, [r3, #0]
    b292:	f643 5350 	movw	r3, #15696	; 0x3d50
    b296:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	2b00      	cmp	r3, #0
    b29e:	d101      	bne.n	b2a4 <OSFlagPend+0x578>
    b2a0:	f004 faba 	bl	f818 <OS_SchedLockTimeMeasStop>
    b2a4:	f7f6 fb34 	bl	1910 <CPU_IntDisMeasStop>
    b2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b2aa:	f00c fd9f 	bl	17dec <CPU_SR_Restore>
             }
             break;
    b2ae:	e00b      	b.n	b2c8 <OSFlagPend+0x59c>
#endif

        default:
             CPU_CRITICAL_EXIT();
    b2b0:	f7f6 fb2e 	bl	1910 <CPU_IntDisMeasStop>
    b2b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b2b6:	f00c fd99 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    b2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2bc:	f645 6225 	movw	r2, #24101	; 0x5e25
    b2c0:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b2c2:	f04f 0300 	mov.w	r3, #0
    b2c6:	e0c3      	b.n	b450 <OSFlagPend+0x724>
    }

    OSSched();                                              /* Find next HPT ready to run                             */
    b2c8:	f003 f9aa 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    b2cc:	f00c fd8a 	bl	17de4 <CPU_SR_Save>
    b2d0:	63b8      	str	r0, [r7, #56]	; 0x38
    b2d2:	f7f6 faf1 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    b2d6:	f244 135c 	movw	r3, #16732	; 0x415c
    b2da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b2de:	681b      	ldr	r3, [r3, #0]
    b2e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    b2e4:	2b03      	cmp	r3, #3
    b2e6:	d869      	bhi.n	b3bc <OSFlagPend+0x690>
    b2e8:	a201      	add	r2, pc, #4	; (adr r2, b2f0 <OSFlagPend+0x5c4>)
    b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b2ee:	bf00      	nop
    b2f0:	0000b301 	.word	0x0000b301
    b2f4:	0000b33b 	.word	0x0000b33b
    b2f8:	0000b38f 	.word	0x0000b38f
    b2fc:	0000b369 	.word	0x0000b369
        case OS_STATUS_PEND_OK:                             /* We got the vent flags                                  */
             if (p_ts != (CPU_TS *)0) {
    b300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b302:	2b00      	cmp	r3, #0
    b304:	d007      	beq.n	b316 <OSFlagPend+0x5ea>
                *p_ts  = OSTCBCurPtr->TS;
    b306:	f244 135c 	movw	r3, #16732	; 0x415c
    b30a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b30e:	681b      	ldr	r3, [r3, #0]
    b310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b314:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_NONE;
    b316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b318:	f04f 0200 	mov.w	r2, #0
    b31c:	801a      	strh	r2, [r3, #0]
             break;
    b31e:	bf00      	nop
             CPU_CRITICAL_EXIT();
             *p_err = OS_ERR_STATUS_INVALID;
             return ((OS_FLAGS)0);
    }

    flags_rdy = OSTCBCurPtr->FlagsRdy;
    b320:	f244 135c 	movw	r3, #16732	; 0x415c
    b324:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b328:	681b      	ldr	r3, [r3, #0]
    b32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b32c:	633b      	str	r3, [r7, #48]	; 0x30
    if (consume == DEF_TRUE) {                              /* See if we need to consume the flags                    */
    b32e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    b332:	2b01      	cmp	r3, #1
    b334:	f040 8082 	bne.w	b43c <OSFlagPend+0x710>
    b338:	e04c      	b.n	b3d4 <OSFlagPend+0x6a8>
             }
             *p_err = OS_ERR_NONE;
             break;

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
    b33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b33c:	2b00      	cmp	r3, #0
    b33e:	d007      	beq.n	b350 <OSFlagPend+0x624>
                *p_ts  = OSTCBCurPtr->TS;
    b340:	f244 135c 	movw	r3, #16732	; 0x415c
    b344:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b34e:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
    b350:	f7f6 fade 	bl	1910 <CPU_IntDisMeasStop>
    b354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b356:	f00c fd49 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_PEND_ABORT;
    b35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b35c:	f246 12a9 	movw	r2, #25001	; 0x61a9
    b360:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b362:	f04f 0300 	mov.w	r3, #0
    b366:	e073      	b.n	b450 <OSFlagPend+0x724>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
             if (p_ts != (CPU_TS *)0) {
    b368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b36a:	2b00      	cmp	r3, #0
    b36c:	d003      	beq.n	b376 <OSFlagPend+0x64a>
                *p_ts  = (CPU_TS  )0;
    b36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b370:	f04f 0200 	mov.w	r2, #0
    b374:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
    b376:	f7f6 facb 	bl	1910 <CPU_IntDisMeasStop>
    b37a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b37c:	f00c fd36 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_TIMEOUT;
    b380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b382:	f247 22d9 	movw	r2, #29401	; 0x72d9
    b386:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b388:	f04f 0300 	mov.w	r3, #0
    b38c:	e060      	b.n	b450 <OSFlagPend+0x724>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
    b38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b390:	2b00      	cmp	r3, #0
    b392:	d007      	beq.n	b3a4 <OSFlagPend+0x678>
                *p_ts  = OSTCBCurPtr->TS;
    b394:	f244 135c 	movw	r3, #16732	; 0x415c
    b398:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b39c:	681b      	ldr	r3, [r3, #0]
    b39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b3a2:	601a      	str	r2, [r3, #0]
             }
             CPU_CRITICAL_EXIT();
    b3a4:	f7f6 fab4 	bl	1910 <CPU_IntDisMeasStop>
    b3a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b3aa:	f00c fd1f 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OBJ_DEL;
    b3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b3b0:	f645 52c2 	movw	r2, #24002	; 0x5dc2
    b3b4:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b3b6:	f04f 0300 	mov.w	r3, #0
    b3ba:	e049      	b.n	b450 <OSFlagPend+0x724>

        default:
             CPU_CRITICAL_EXIT();
    b3bc:	f7f6 faa8 	bl	1910 <CPU_IntDisMeasStop>
    b3c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b3c2:	f00c fd13 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_STATUS_INVALID;
    b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b3c8:	f646 622b 	movw	r2, #28203	; 0x6e2b
    b3cc:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b3ce:	f04f 0300 	mov.w	r3, #0
    b3d2:	e03d      	b.n	b450 <OSFlagPend+0x724>
    }

    flags_rdy = OSTCBCurPtr->FlagsRdy;
    if (consume == DEF_TRUE) {                              /* See if we need to consume the flags                    */
        switch (mode) {
    b3d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    b3d6:	f103 33ff 	add.w	r3, r3, #4294967295
    b3da:	2b07      	cmp	r3, #7
    b3dc:	d822      	bhi.n	b424 <OSFlagPend+0x6f8>
    b3de:	a201      	add	r2, pc, #4	; (adr r2, b3e4 <OSFlagPend+0x6b8>)
    b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b3e4:	0000b417 	.word	0x0000b417
    b3e8:	0000b417 	.word	0x0000b417
    b3ec:	0000b425 	.word	0x0000b425
    b3f0:	0000b405 	.word	0x0000b405
    b3f4:	0000b425 	.word	0x0000b425
    b3f8:	0000b425 	.word	0x0000b425
    b3fc:	0000b425 	.word	0x0000b425
    b400:	0000b405 	.word	0x0000b405
            case OS_OPT_PEND_FLAG_SET_ALL:
            case OS_OPT_PEND_FLAG_SET_ANY:                  /* Clear ONLY the flags we got                            */
                 p_grp->Flags &= ~flags_rdy;
    b404:	68fb      	ldr	r3, [r7, #12]
    b406:	6a1a      	ldr	r2, [r3, #32]
    b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b40a:	ea6f 0303 	mvn.w	r3, r3
    b40e:	401a      	ands	r2, r3
    b410:	68fb      	ldr	r3, [r7, #12]
    b412:	621a      	str	r2, [r3, #32]
                 break;
    b414:	e012      	b.n	b43c <OSFlagPend+0x710>

#if OS_CFG_FLAG_MODE_CLR_EN > 0u
            case OS_OPT_PEND_FLAG_CLR_ALL:
            case OS_OPT_PEND_FLAG_CLR_ANY:                  /* Set   ONLY the flags we got                            */
                 p_grp->Flags |=  flags_rdy;
    b416:	68fb      	ldr	r3, [r7, #12]
    b418:	6a1a      	ldr	r2, [r3, #32]
    b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b41c:	431a      	orrs	r2, r3
    b41e:	68fb      	ldr	r3, [r7, #12]
    b420:	621a      	str	r2, [r3, #32]
                 break;
    b422:	e00b      	b.n	b43c <OSFlagPend+0x710>
#endif
            default:
                 CPU_CRITICAL_EXIT();
    b424:	f7f6 fa74 	bl	1910 <CPU_IntDisMeasStop>
    b428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b42a:	f00c fcdf 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_OPT_INVALID;
    b42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b430:	f645 6225 	movw	r2, #24101	; 0x5e25
    b434:	801a      	strh	r2, [r3, #0]
                 return ((OS_FLAGS)0);
    b436:	f04f 0300 	mov.w	r3, #0
    b43a:	e009      	b.n	b450 <OSFlagPend+0x724>
        }
    }
    CPU_CRITICAL_EXIT();
    b43c:	f7f6 fa68 	bl	1910 <CPU_IntDisMeasStop>
    b440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b442:	f00c fcd3 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;                                   /* Event(s) must have occurred                            */
    b446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b448:	f04f 0200 	mov.w	r2, #0
    b44c:	801a      	strh	r2, [r3, #0]
    return (flags_rdy);
    b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    b450:	4618      	mov	r0, r3
    b452:	f107 0740 	add.w	r7, r7, #64	; 0x40
    b456:	46bd      	mov	sp, r7
    b458:	bd80      	pop	{r7, pc}
    b45a:	bf00      	nop

0000b45c <OSFlagPendAbort>:

#if OS_CFG_FLAG_PEND_ABORT_EN > 0u
OS_OBJ_QTY  OSFlagPendAbort (OS_FLAG_GRP  *p_grp,
                             OS_OPT        opt,
                             OS_ERR       *p_err)
{
    b45c:	b580      	push	{r7, lr}
    b45e:	b08a      	sub	sp, #40	; 0x28
    b460:	af00      	add	r7, sp, #0
    b462:	60f8      	str	r0, [r7, #12]
    b464:	460b      	mov	r3, r1
    b466:	607a      	str	r2, [r7, #4]
    b468:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_OBJ_QTY     nbr_tasks;
    CPU_SR_ALLOC();
    b46a:	f04f 0300 	mov.w	r3, #0
    b46e:	623b      	str	r3, [r7, #32]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
    b470:	f244 1381 	movw	r3, #16769	; 0x4181
    b474:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2b00      	cmp	r3, #0
    b47c:	d006      	beq.n	b48c <OSFlagPendAbort+0x30>
       *p_err =  OS_ERR_PEND_ABORT_ISR;
    b47e:	687b      	ldr	r3, [r7, #4]
    b480:	f246 12aa 	movw	r2, #25002	; 0x61aa
    b484:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    b486:	f04f 0300 	mov.w	r3, #0
    b48a:	e0a3      	b.n	b5d4 <OSFlagPendAbort+0x178>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
    b48c:	68fb      	ldr	r3, [r7, #12]
    b48e:	2b00      	cmp	r3, #0
    b490:	d106      	bne.n	b4a0 <OSFlagPendAbort+0x44>
       *p_err =  OS_ERR_OBJ_PTR_NULL;
    b492:	687b      	ldr	r3, [r7, #4]
    b494:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    b498:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    b49a:	f04f 0300 	mov.w	r3, #0
    b49e:	e099      	b.n	b5d4 <OSFlagPendAbort+0x178>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
    b4a0:	897b      	ldrh	r3, [r7, #10]
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d009      	beq.n	b4ba <OSFlagPendAbort+0x5e>
    b4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b4aa:	d006      	beq.n	b4ba <OSFlagPendAbort+0x5e>
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;

        default:
            *p_err =  OS_ERR_OPT_INVALID;
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	f645 6225 	movw	r2, #24101	; 0x5e25
    b4b2:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0u);
    b4b4:	f04f 0300 	mov.w	r3, #0
    b4b8:	e08c      	b.n	b5d4 <OSFlagPendAbort+0x178>
        return ((OS_OBJ_QTY)0u);
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;
    b4ba:	bf00      	nop
             return ((OS_OBJ_QTY)0u);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Make sure event flag group was created                 */
    b4bc:	68fb      	ldr	r3, [r7, #12]
    b4be:	681a      	ldr	r2, [r3, #0]
    b4c0:	f644 4346 	movw	r3, #19526	; 0x4c46
    b4c4:	f2c4 7341 	movt	r3, #18241	; 0x4741
    b4c8:	429a      	cmp	r2, r3
    b4ca:	d006      	beq.n	b4da <OSFlagPendAbort+0x7e>
       *p_err =  OS_ERR_OBJ_TYPE;
    b4cc:	687b      	ldr	r3, [r7, #4]
    b4ce:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    b4d2:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    b4d4:	f04f 0300 	mov.w	r3, #0
    b4d8:	e07c      	b.n	b5d4 <OSFlagPendAbort+0x178>
    }
#endif

    CPU_CRITICAL_ENTER();
    b4da:	f00c fc83 	bl	17de4 <CPU_SR_Save>
    b4de:	6238      	str	r0, [r7, #32]
    b4e0:	f7f6 f9ea 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_grp->PendList;
    b4e4:	68fb      	ldr	r3, [r7, #12]
    b4e6:	f103 0308 	add.w	r3, r3, #8
    b4ea:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on flag group?                        */
    b4ec:	69fb      	ldr	r3, [r7, #28]
    b4ee:	891b      	ldrh	r3, [r3, #8]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d10b      	bne.n	b50c <OSFlagPendAbort+0xb0>
        CPU_CRITICAL_EXIT();                                /* No                                                     */
    b4f4:	f7f6 fa0c 	bl	1910 <CPU_IntDisMeasStop>
    b4f8:	6a38      	ldr	r0, [r7, #32]
    b4fa:	f00c fc77 	bl	17dec <CPU_SR_Restore>
       *p_err =  OS_ERR_PEND_ABORT_NONE;
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	f246 12ab 	movw	r2, #25003	; 0x61ab
    b504:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    b506:	f04f 0300 	mov.w	r3, #0
    b50a:	e063      	b.n	b5d4 <OSFlagPendAbort+0x178>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    b50c:	f643 5350 	movw	r3, #15696	; 0x3d50
    b510:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b514:	781b      	ldrb	r3, [r3, #0]
    b516:	f103 0301 	add.w	r3, r3, #1
    b51a:	b2da      	uxtb	r2, r3
    b51c:	f643 5350 	movw	r3, #15696	; 0x3d50
    b520:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b524:	701a      	strb	r2, [r3, #0]
    b526:	f643 5350 	movw	r3, #15696	; 0x3d50
    b52a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b52e:	781b      	ldrb	r3, [r3, #0]
    b530:	2b01      	cmp	r3, #1
    b532:	d101      	bne.n	b538 <OSFlagPendAbort+0xdc>
    b534:	f004 f95e 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    b538:	f7f6 f9ea 	bl	1910 <CPU_IntDisMeasStop>
    b53c:	6a38      	ldr	r0, [r7, #32]
    b53e:	f00c fc55 	bl	17dec <CPU_SR_Restore>
    nbr_tasks = 0u;
    b542:	f04f 0300 	mov.w	r3, #0
    b546:	84fb      	strh	r3, [r7, #38]	; 0x26
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    b548:	f7f7 fee8 	bl	331c <CPU_TS_TmrRd>
    b54c:	61b8      	str	r0, [r7, #24]
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    b54e:	e010      	b.n	b572 <OSFlagPendAbort+0x116>
        p_tcb = p_pend_list->HeadPtr->TCBPtr;
    b550:	69fb      	ldr	r3, [r7, #28]
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	689b      	ldr	r3, [r3, #8]
    b556:	617b      	str	r3, [r7, #20]
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_grp),
    b558:	68f8      	ldr	r0, [r7, #12]
    b55a:	6979      	ldr	r1, [r7, #20]
    b55c:	69ba      	ldr	r2, [r7, #24]
    b55e:	f003 fb51 	bl	ec04 <OS_PendAbort>
                     p_tcb,
                     ts);
        nbr_tasks++;
    b562:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b564:	f103 0301 	add.w	r3, r3, #1
    b568:	84fb      	strh	r3, [r7, #38]	; 0x26
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
    b56a:	897b      	ldrh	r3, [r7, #10]
    b56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b570:	d104      	bne.n	b57c <OSFlagPendAbort+0x120>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    nbr_tasks = 0u;
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    b572:	69fb      	ldr	r3, [r7, #28]
    b574:	891b      	ldrh	r3, [r3, #8]
    b576:	2b00      	cmp	r3, #0
    b578:	d1ea      	bne.n	b550 <OSFlagPendAbort+0xf4>
    b57a:	e000      	b.n	b57e <OSFlagPendAbort+0x122>
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_grp),
                     p_tcb,
                     ts);
        nbr_tasks++;
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
            break;                                          /* No                                                     */
    b57c:	bf00      	nop
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    b57e:	f00c fc31 	bl	17de4 <CPU_SR_Save>
    b582:	6238      	str	r0, [r7, #32]
    b584:	f7f6 f998 	bl	18b8 <CPU_IntDisMeasStart>
    b588:	f643 5350 	movw	r3, #15696	; 0x3d50
    b58c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b590:	781b      	ldrb	r3, [r3, #0]
    b592:	f103 33ff 	add.w	r3, r3, #4294967295
    b596:	b2da      	uxtb	r2, r3
    b598:	f643 5350 	movw	r3, #15696	; 0x3d50
    b59c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b5a0:	701a      	strb	r2, [r3, #0]
    b5a2:	f643 5350 	movw	r3, #15696	; 0x3d50
    b5a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d101      	bne.n	b5b4 <OSFlagPendAbort+0x158>
    b5b0:	f004 f932 	bl	f818 <OS_SchedLockTimeMeasStop>
    b5b4:	f7f6 f9ac 	bl	1910 <CPU_IntDisMeasStop>
    b5b8:	6a38      	ldr	r0, [r7, #32]
    b5ba:	f00c fc17 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
    b5be:	897b      	ldrh	r3, [r7, #10]
    b5c0:	b21b      	sxth	r3, r3
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	db01      	blt.n	b5ca <OSFlagPendAbort+0x16e>
        OSSched();                                          /* Run the scheduler                                      */
    b5c6:	f003 f82b 	bl	e620 <OSSched>
    }

   *p_err = OS_ERR_NONE;
    b5ca:	687b      	ldr	r3, [r7, #4]
    b5cc:	f04f 0200 	mov.w	r2, #0
    b5d0:	801a      	strh	r2, [r3, #0]
    return (nbr_tasks);
    b5d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
    b5d4:	4618      	mov	r0, r3
    b5d6:	f107 0728 	add.w	r7, r7, #40	; 0x28
    b5da:	46bd      	mov	sp, r7
    b5dc:	bd80      	pop	{r7, pc}
    b5de:	bf00      	nop

0000b5e0 <OSFlagPendGetFlagsRdy>:
* Returns    : The flags that caused the task to be ready.
************************************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (OS_ERR  *p_err)
{
    b5e0:	b580      	push	{r7, lr}
    b5e2:	b084      	sub	sp, #16
    b5e4:	af00      	add	r7, sp, #0
    b5e6:	6078      	str	r0, [r7, #4]
    OS_FLAGS   flags;
    CPU_SR_ALLOC();
    b5e8:	f04f 0300 	mov.w	r3, #0
    b5ec:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
    b5ee:	f244 1381 	movw	r3, #16769	; 0x4181
    b5f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d006      	beq.n	b60a <OSFlagPendGetFlagsRdy+0x2a>
        *p_err = OS_ERR_PEND_ISR;                           /* ... can't get from an ISR                              */
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	f246 12ae 	movw	r2, #25006	; 0x61ae
    b602:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    b604:	f04f 0300 	mov.w	r3, #0
    b608:	e015      	b.n	b636 <OSFlagPendGetFlagsRdy+0x56>
    }
#endif

    CPU_CRITICAL_ENTER();
    b60a:	f00c fbeb 	bl	17de4 <CPU_SR_Save>
    b60e:	60f8      	str	r0, [r7, #12]
    b610:	f7f6 f952 	bl	18b8 <CPU_IntDisMeasStart>
    flags  = OSTCBCurPtr->FlagsRdy;
    b614:	f244 135c 	movw	r3, #16732	; 0x415c
    b618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b61c:	681b      	ldr	r3, [r3, #0]
    b61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b620:	60bb      	str	r3, [r7, #8]
    CPU_CRITICAL_EXIT();
    b622:	f7f6 f975 	bl	1910 <CPU_IntDisMeasStop>
    b626:	68f8      	ldr	r0, [r7, #12]
    b628:	f00c fbe0 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	f04f 0200 	mov.w	r2, #0
    b632:	801a      	strh	r2, [r3, #0]
    return (flags);
    b634:	68bb      	ldr	r3, [r7, #8]
}
    b636:	4618      	mov	r0, r3
    b638:	f107 0710 	add.w	r7, r7, #16
    b63c:	46bd      	mov	sp, r7
    b63e:	bd80      	pop	{r7, pc}

0000b640 <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,
                      OS_FLAGS      flags,
                      OS_OPT        opt,
                      OS_ERR       *p_err)
{
    b640:	b580      	push	{r7, lr}
    b642:	b08a      	sub	sp, #40	; 0x28
    b644:	af04      	add	r7, sp, #16
    b646:	60f8      	str	r0, [r7, #12]
    b648:	60b9      	str	r1, [r7, #8]
    b64a:	603b      	str	r3, [r7, #0]
    b64c:	4613      	mov	r3, r2
    b64e:	80fb      	strh	r3, [r7, #6]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
    b650:	68fb      	ldr	r3, [r7, #12]
    b652:	2b00      	cmp	r3, #0
    b654:	d106      	bne.n	b664 <OSFlagPost+0x24>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    b656:	683b      	ldr	r3, [r7, #0]
    b658:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    b65c:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    b65e:	f04f 0300 	mov.w	r3, #0
    b662:	e047      	b.n	b6f4 <OSFlagPost+0xb4>
    }

    switch (opt) {
    b664:	88fb      	ldrh	r3, [r7, #6]
    b666:	f103 0300 	add.w	r3, r3, #0
    b66a:	2b01      	cmp	r3, #1
    b66c:	d809      	bhi.n	b682 <OSFlagPost+0x42>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_CLR:
             break;
    b66e:	bf00      	nop
    }

#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Make sure we are pointing to an event flag grp         */
    b670:	68fb      	ldr	r3, [r7, #12]
    b672:	681a      	ldr	r2, [r3, #0]
    b674:	f644 4346 	movw	r3, #19526	; 0x4c46
    b678:	f2c4 7341 	movt	r3, #18241	; 0x4741
    b67c:	429a      	cmp	r2, r3
    b67e:	d00e      	beq.n	b69e <OSFlagPost+0x5e>
    b680:	e006      	b.n	b690 <OSFlagPost+0x50>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_CLR:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    b682:	683b      	ldr	r3, [r7, #0]
    b684:	f645 6225 	movw	r2, #24101	; 0x5e25
    b688:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b68a:	f04f 0300 	mov.w	r3, #0
    b68e:	e031      	b.n	b6f4 <OSFlagPost+0xb4>

#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Make sure we are pointing to an event flag grp         */
        *p_err = OS_ERR_OBJ_TYPE;
    b690:	683b      	ldr	r3, [r7, #0]
    b692:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    b696:	801a      	strh	r2, [r3, #0]
        return ((OS_FLAGS)0);
    b698:	f04f 0300 	mov.w	r3, #0
    b69c:	e02a      	b.n	b6f4 <OSFlagPost+0xb4>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    b69e:	f7f7 fe3d 	bl	331c <CPU_TS_TmrRd>
    b6a2:	6178      	str	r0, [r7, #20]
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
    b6a4:	f244 1381 	movw	r3, #16769	; 0x4181
    b6a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b6ac:	781b      	ldrb	r3, [r3, #0]
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	d015      	beq.n	b6de <OSFlagPost+0x9e>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_FLAG,          /* Post to ISR queue                                      */
    b6b2:	68bb      	ldr	r3, [r7, #8]
    b6b4:	9300      	str	r3, [sp, #0]
    b6b6:	88fb      	ldrh	r3, [r7, #6]
    b6b8:	9301      	str	r3, [sp, #4]
    b6ba:	697b      	ldr	r3, [r7, #20]
    b6bc:	9302      	str	r3, [sp, #8]
    b6be:	683b      	ldr	r3, [r7, #0]
    b6c0:	9303      	str	r3, [sp, #12]
    b6c2:	f644 4046 	movw	r0, #19526	; 0x4c46
    b6c6:	f2c4 7041 	movt	r0, #18241	; 0x4741
    b6ca:	68f9      	ldr	r1, [r7, #12]
    b6cc:	f04f 0200 	mov.w	r2, #0
    b6d0:	f04f 0300 	mov.w	r3, #0
    b6d4:	f005 f9a2 	bl	10a1c <OS_IntQPost>
                    (OS_MSG_SIZE)0,
                    (OS_FLAGS   )flags,
                    (OS_OPT     )opt,
                    (CPU_TS     )ts,
                    (OS_ERR    *)p_err);
        return ((OS_FLAGS)0);
    b6d8:	f04f 0300 	mov.w	r3, #0
    b6dc:	e00a      	b.n	b6f4 <OSFlagPost+0xb4>
    }
#endif

    flags_cur = OS_FlagPost(p_grp,
    b6de:	88fb      	ldrh	r3, [r7, #6]
    b6e0:	683a      	ldr	r2, [r7, #0]
    b6e2:	9200      	str	r2, [sp, #0]
    b6e4:	68f8      	ldr	r0, [r7, #12]
    b6e6:	68b9      	ldr	r1, [r7, #8]
    b6e8:	461a      	mov	r2, r3
    b6ea:	697b      	ldr	r3, [r7, #20]
    b6ec:	f000 f8e0 	bl	b8b0 <OS_FlagPost>
    b6f0:	6138      	str	r0, [r7, #16]
                            flags,
                            opt,
                            ts,
                            p_err);

    return (flags_cur);
    b6f2:	693b      	ldr	r3, [r7, #16]
}
    b6f4:	4618      	mov	r0, r3
    b6f6:	f107 0718 	add.w	r7, r7, #24
    b6fa:	46bd      	mov	sp, r7
    b6fc:	bd80      	pop	{r7, pc}
    b6fe:	bf00      	nop

0000b700 <OS_FlagBlock>:
void  OS_FlagBlock (OS_PEND_DATA  *p_pend_data,
                    OS_FLAG_GRP   *p_grp,
                    OS_FLAGS       flags,
                    OS_OPT         opt,
                    OS_TICK        timeout)
{
    b700:	b580      	push	{r7, lr}
    b702:	b084      	sub	sp, #16
    b704:	af00      	add	r7, sp, #0
    b706:	60f8      	str	r0, [r7, #12]
    b708:	60b9      	str	r1, [r7, #8]
    b70a:	607a      	str	r2, [r7, #4]
    b70c:	807b      	strh	r3, [r7, #2]
    OSTCBCurPtr->FlagsPend = flags;                         /* Save the flags that we need to wait for                */
    b70e:	f244 135c 	movw	r3, #16732	; 0x415c
    b712:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b716:	681b      	ldr	r3, [r3, #0]
    b718:	687a      	ldr	r2, [r7, #4]
    b71a:	65da      	str	r2, [r3, #92]	; 0x5c
    OSTCBCurPtr->FlagsOpt  = opt;                           /* Save the type of wait we are doing                     */
    b71c:	f244 135c 	movw	r3, #16732	; 0x415c
    b720:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b724:	681b      	ldr	r3, [r3, #0]
    b726:	887a      	ldrh	r2, [r7, #2]
    b728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    OSTCBCurPtr->FlagsRdy  = (OS_FLAGS)0;
    b72c:	f244 135c 	movw	r3, #16732	; 0x415c
    b730:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	f04f 0200 	mov.w	r2, #0
    b73a:	665a      	str	r2, [r3, #100]	; 0x64

    OS_Pend(p_pend_data,
    b73c:	68f8      	ldr	r0, [r7, #12]
    b73e:	68b9      	ldr	r1, [r7, #8]
    b740:	f04f 0201 	mov.w	r2, #1
    b744:	69bb      	ldr	r3, [r7, #24]
    b746:	f003 fa03 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_grp),
             OS_TASK_PEND_ON_FLAG,
             timeout);
}
    b74a:	f107 0710 	add.w	r7, r7, #16
    b74e:	46bd      	mov	sp, r7
    b750:	bd80      	pop	{r7, pc}
    b752:	bf00      	nop

0000b754 <OS_FlagClr>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagClr (OS_FLAG_GRP  *p_grp)
{
    b754:	b580      	push	{r7, lr}
    b756:	b084      	sub	sp, #16
    b758:	af00      	add	r7, sp, #0
    b75a:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST  *p_pend_list;



    p_grp->Type             = OS_OBJ_TYPE_NONE;
    b75c:	687a      	ldr	r2, [r7, #4]
    b75e:	f644 734e 	movw	r3, #20302	; 0x4f4e
    b762:	f2c4 534e 	movt	r3, #17742	; 0x454e
    b766:	6013      	str	r3, [r2, #0]
    p_grp->NamePtr          = (CPU_CHAR *)((void *)"?FLAG");    /* Unknown name                                       */
    b768:	687a      	ldr	r2, [r7, #4]
    b76a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    b76e:	f2c0 0302 	movt	r3, #2
    b772:	6053      	str	r3, [r2, #4]
    p_grp->Flags            = (OS_FLAGS )0;
    b774:	687b      	ldr	r3, [r7, #4]
    b776:	f04f 0200 	mov.w	r2, #0
    b77a:	621a      	str	r2, [r3, #32]
    p_pend_list             = &p_grp->PendList;
    b77c:	687b      	ldr	r3, [r7, #4]
    b77e:	f103 0308 	add.w	r3, r3, #8
    b782:	60fb      	str	r3, [r7, #12]
    OS_PendListInit(p_pend_list);
    b784:	68f8      	ldr	r0, [r7, #12]
    b786:	f003 fbc9 	bl	ef1c <OS_PendListInit>
}
    b78a:	f107 0710 	add.w	r7, r7, #16
    b78e:	46bd      	mov	sp, r7
    b790:	bd80      	pop	{r7, pc}
    b792:	bf00      	nop

0000b794 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
    b794:	b480      	push	{r7}
    b796:	b083      	sub	sp, #12
    b798:	af00      	add	r7, sp, #0
    b79a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
    b79c:	f244 4344 	movw	r3, #17476	; 0x4444
    b7a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b7a4:	f04f 0200 	mov.w	r2, #0
    b7a8:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
    b7aa:	f244 4340 	movw	r3, #17472	; 0x4440
    b7ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b7b2:	f04f 0200 	mov.w	r2, #0
    b7b6:	801a      	strh	r2, [r3, #0]
    *p_err           = OS_ERR_NONE;
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	f04f 0200 	mov.w	r2, #0
    b7be:	801a      	strh	r2, [r3, #0]
}
    b7c0:	f107 070c 	add.w	r7, r7, #12
    b7c4:	46bd      	mov	sp, r7
    b7c6:	bc80      	pop	{r7}
    b7c8:	4770      	bx	lr
    b7ca:	bf00      	nop

0000b7cc <OS_FlagDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
{
    b7cc:	b480      	push	{r7}
    b7ce:	b083      	sub	sp, #12
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
    p_grp->DbgNamePtr                = (CPU_CHAR    *)((void *)" ");
    b7d4:	687a      	ldr	r2, [r7, #4]
    b7d6:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    b7da:	f2c0 0302 	movt	r3, #2
    b7de:	61d3      	str	r3, [r2, #28]
    p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
    b7e0:	687b      	ldr	r3, [r7, #4]
    b7e2:	f04f 0200 	mov.w	r2, #0
    b7e6:	615a      	str	r2, [r3, #20]
    if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
    b7e8:	f244 4344 	movw	r3, #17476	; 0x4444
    b7ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b7f0:	681b      	ldr	r3, [r3, #0]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d104      	bne.n	b800 <OS_FlagDbgListAdd+0x34>
        p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
    b7f6:	687b      	ldr	r3, [r7, #4]
    b7f8:	f04f 0200 	mov.w	r2, #0
    b7fc:	619a      	str	r2, [r3, #24]
    b7fe:	e00d      	b.n	b81c <OS_FlagDbgListAdd+0x50>
    } else {
        p_grp->DbgNextPtr            =  OSFlagDbgListPtr;
    b800:	f244 4344 	movw	r3, #17476	; 0x4444
    b804:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b808:	681a      	ldr	r2, [r3, #0]
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	619a      	str	r2, [r3, #24]
        OSFlagDbgListPtr->DbgPrevPtr =  p_grp;
    b80e:	f244 4344 	movw	r3, #17476	; 0x4444
    b812:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b816:	681b      	ldr	r3, [r3, #0]
    b818:	687a      	ldr	r2, [r7, #4]
    b81a:	615a      	str	r2, [r3, #20]
    }
    OSFlagDbgListPtr                 =  p_grp;
    b81c:	f244 4344 	movw	r3, #17476	; 0x4444
    b820:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b824:	687a      	ldr	r2, [r7, #4]
    b826:	601a      	str	r2, [r3, #0]
}
    b828:	f107 070c 	add.w	r7, r7, #12
    b82c:	46bd      	mov	sp, r7
    b82e:	bc80      	pop	{r7}
    b830:	4770      	bx	lr
    b832:	bf00      	nop

0000b834 <OS_FlagDbgListRemove>:



void  OS_FlagDbgListRemove (OS_FLAG_GRP  *p_grp)
{
    b834:	b480      	push	{r7}
    b836:	b085      	sub	sp, #20
    b838:	af00      	add	r7, sp, #0
    b83a:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *p_grp_next;
    OS_FLAG_GRP  *p_grp_prev;


    p_grp_prev = p_grp->DbgPrevPtr;
    b83c:	687b      	ldr	r3, [r7, #4]
    b83e:	695b      	ldr	r3, [r3, #20]
    b840:	60fb      	str	r3, [r7, #12]
    p_grp_next = p_grp->DbgNextPtr;
    b842:	687b      	ldr	r3, [r7, #4]
    b844:	699b      	ldr	r3, [r3, #24]
    b846:	60bb      	str	r3, [r7, #8]

    if (p_grp_prev == (OS_FLAG_GRP *)0) {
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	2b00      	cmp	r3, #0
    b84c:	d111      	bne.n	b872 <OS_FlagDbgListRemove+0x3e>
        OSFlagDbgListPtr = p_grp_next;
    b84e:	f244 4344 	movw	r3, #17476	; 0x4444
    b852:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b856:	68ba      	ldr	r2, [r7, #8]
    b858:	601a      	str	r2, [r3, #0]
        if (p_grp_next != (OS_FLAG_GRP *)0) {
    b85a:	68bb      	ldr	r3, [r7, #8]
    b85c:	2b00      	cmp	r3, #0
    b85e:	d003      	beq.n	b868 <OS_FlagDbgListRemove+0x34>
            p_grp_next->DbgPrevPtr = (OS_FLAG_GRP *)0;
    b860:	68bb      	ldr	r3, [r7, #8]
    b862:	f04f 0200 	mov.w	r2, #0
    b866:	615a      	str	r2, [r3, #20]
        }
        p_grp->DbgNextPtr = (OS_FLAG_GRP *)0;
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	f04f 0200 	mov.w	r2, #0
    b86e:	619a      	str	r2, [r3, #24]
    b870:	e019      	b.n	b8a6 <OS_FlagDbgListRemove+0x72>

    } else if (p_grp_next == (OS_FLAG_GRP *)0) {
    b872:	68bb      	ldr	r3, [r7, #8]
    b874:	2b00      	cmp	r3, #0
    b876:	d108      	bne.n	b88a <OS_FlagDbgListRemove+0x56>
        p_grp_prev->DbgNextPtr = (OS_FLAG_GRP *)0;
    b878:	68fb      	ldr	r3, [r7, #12]
    b87a:	f04f 0200 	mov.w	r2, #0
    b87e:	619a      	str	r2, [r3, #24]
        p_grp->DbgPrevPtr      = (OS_FLAG_GRP *)0;
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	f04f 0200 	mov.w	r2, #0
    b886:	615a      	str	r2, [r3, #20]
    b888:	e00d      	b.n	b8a6 <OS_FlagDbgListRemove+0x72>

    } else {
        p_grp_prev->DbgNextPtr =  p_grp_next;
    b88a:	68fb      	ldr	r3, [r7, #12]
    b88c:	68ba      	ldr	r2, [r7, #8]
    b88e:	619a      	str	r2, [r3, #24]
        p_grp_next->DbgPrevPtr =  p_grp_prev;
    b890:	68bb      	ldr	r3, [r7, #8]
    b892:	68fa      	ldr	r2, [r7, #12]
    b894:	615a      	str	r2, [r3, #20]
        p_grp->DbgNextPtr      = (OS_FLAG_GRP *)0;
    b896:	687b      	ldr	r3, [r7, #4]
    b898:	f04f 0200 	mov.w	r2, #0
    b89c:	619a      	str	r2, [r3, #24]
        p_grp->DbgPrevPtr      = (OS_FLAG_GRP *)0;
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	f04f 0200 	mov.w	r2, #0
    b8a4:	615a      	str	r2, [r3, #20]
    }
}
    b8a6:	f107 0714 	add.w	r7, r7, #20
    b8aa:	46bd      	mov	sp, r7
    b8ac:	bc80      	pop	{r7}
    b8ae:	4770      	bx	lr

0000b8b0 <OS_FlagPost>:
OS_FLAGS  OS_FlagPost (OS_FLAG_GRP  *p_grp,
                       OS_FLAGS      flags,
                       OS_OPT        opt,
                       CPU_TS        ts,
                       OS_ERR       *p_err)
{
    b8b0:	b580      	push	{r7, lr}
    b8b2:	b08c      	sub	sp, #48	; 0x30
    b8b4:	af00      	add	r7, sp, #0
    b8b6:	60f8      	str	r0, [r7, #12]
    b8b8:	60b9      	str	r1, [r7, #8]
    b8ba:	603b      	str	r3, [r7, #0]
    b8bc:	4613      	mov	r3, r2
    b8be:	80fb      	strh	r3, [r7, #6]
    OS_OPT          mode;
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_DATA   *p_pend_data_next;
    OS_PEND_LIST   *p_pend_list;
    OS_TCB         *p_tcb;
    CPU_SR_ALLOC();
    b8c0:	f04f 0300 	mov.w	r3, #0
    b8c4:	627b      	str	r3, [r7, #36]	; 0x24



    CPU_CRITICAL_ENTER();
    b8c6:	f00c fa8d 	bl	17de4 <CPU_SR_Save>
    b8ca:	6278      	str	r0, [r7, #36]	; 0x24
    b8cc:	f7f5 fff4 	bl	18b8 <CPU_IntDisMeasStart>
    switch (opt) {
    b8d0:	88fb      	ldrh	r3, [r7, #6]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d002      	beq.n	b8dc <OS_FlagPost+0x2c>
    b8d6:	2b01      	cmp	r3, #1
    b8d8:	d007      	beq.n	b8ea <OS_FlagPost+0x3a>
    b8da:	e00f      	b.n	b8fc <OS_FlagPost+0x4c>
        case OS_OPT_POST_FLAG_SET:
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group             */
    b8dc:	68fb      	ldr	r3, [r7, #12]
    b8de:	6a1a      	ldr	r2, [r3, #32]
    b8e0:	68bb      	ldr	r3, [r7, #8]
    b8e2:	431a      	orrs	r2, r3
    b8e4:	68fb      	ldr	r3, [r7, #12]
    b8e6:	621a      	str	r2, [r3, #32]
             break;
    b8e8:	e014      	b.n	b914 <OS_FlagPost+0x64>

        case OS_OPT_POST_FLAG_CLR:
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group             */
    b8ea:	68fb      	ldr	r3, [r7, #12]
    b8ec:	6a1a      	ldr	r2, [r3, #32]
    b8ee:	68bb      	ldr	r3, [r7, #8]
    b8f0:	ea6f 0303 	mvn.w	r3, r3
    b8f4:	401a      	ands	r2, r3
    b8f6:	68fb      	ldr	r3, [r7, #12]
    b8f8:	621a      	str	r2, [r3, #32]
             break;
    b8fa:	e00b      	b.n	b914 <OS_FlagPost+0x64>

        default:
             CPU_CRITICAL_EXIT();                               /* INVALID option                                     */
    b8fc:	f7f6 f808 	bl	1910 <CPU_IntDisMeasStop>
    b900:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b902:	f00c fa73 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b908:	f645 6225 	movw	r2, #24101	; 0x5e25
    b90c:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
    b90e:	f04f 0300 	mov.w	r3, #0
    b912:	e128      	b.n	bb66 <OS_FlagPost+0x2b6>
    }
    p_grp->TS   = ts;
    b914:	68fb      	ldr	r3, [r7, #12]
    b916:	683a      	ldr	r2, [r7, #0]
    b918:	625a      	str	r2, [r3, #36]	; 0x24
    p_pend_list = &p_grp->PendList;
    b91a:	68fb      	ldr	r3, [r7, #12]
    b91c:	f103 0308 	add.w	r3, r3, #8
    b920:	623b      	str	r3, [r7, #32]
    if (p_pend_list->NbrEntries == 0u) {                        /* Any task waiting on event flag group?              */
    b922:	6a3b      	ldr	r3, [r7, #32]
    b924:	891b      	ldrh	r3, [r3, #8]
    b926:	2b00      	cmp	r3, #0
    b928:	d10b      	bne.n	b942 <OS_FlagPost+0x92>
        CPU_CRITICAL_EXIT();                                    /* No                                                 */
    b92a:	f7f5 fff1 	bl	1910 <CPU_IntDisMeasStop>
    b92e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b930:	f00c fa5c 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_NONE;
    b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b936:	f04f 0200 	mov.w	r2, #0
    b93a:	801a      	strh	r2, [r3, #0]
        return (p_grp->Flags);
    b93c:	68fb      	ldr	r3, [r7, #12]
    b93e:	6a1b      	ldr	r3, [r3, #32]
    b940:	e111      	b.n	bb66 <OS_FlagPost+0x2b6>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    b942:	f643 5350 	movw	r3, #15696	; 0x3d50
    b946:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b94a:	781b      	ldrb	r3, [r3, #0]
    b94c:	f103 0301 	add.w	r3, r3, #1
    b950:	b2da      	uxtb	r2, r3
    b952:	f643 5350 	movw	r3, #15696	; 0x3d50
    b956:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b95a:	701a      	strb	r2, [r3, #0]
    b95c:	f643 5350 	movw	r3, #15696	; 0x3d50
    b960:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b964:	781b      	ldrb	r3, [r3, #0]
    b966:	2b01      	cmp	r3, #1
    b968:	d101      	bne.n	b96e <OS_FlagPost+0xbe>
    b96a:	f003 ff43 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    b96e:	f7f5 ffcf 	bl	1910 <CPU_IntDisMeasStop>
    b972:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b974:	f00c fa3a 	bl	17dec <CPU_SR_Restore>
    p_pend_data = p_pend_list->HeadPtr;
    b978:	6a3b      	ldr	r3, [r7, #32]
    b97a:	681b      	ldr	r3, [r3, #0]
    b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_tcb       = p_pend_data->TCBPtr;
    b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b980:	689b      	ldr	r3, [r3, #8]
    b982:	62bb      	str	r3, [r7, #40]	; 0x28
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)      */
    b984:	e0b3      	b.n	baee <OS_FlagPost+0x23e>
        p_pend_data_next = p_pend_data->NextPtr;
    b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b988:	685b      	ldr	r3, [r3, #4]
    b98a:	61fb      	str	r3, [r7, #28]
        mode             = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
    b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b98e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
    b992:	f003 030f 	and.w	r3, r3, #15
    b996:	837b      	strh	r3, [r7, #26]
        switch (mode) {
    b998:	8b7b      	ldrh	r3, [r7, #26]
    b99a:	f103 33ff 	add.w	r3, r3, #4294967295
    b99e:	2b07      	cmp	r3, #7
    b9a0:	d856      	bhi.n	ba50 <OS_FlagPost+0x1a0>
    b9a2:	a201      	add	r2, pc, #4	; (adr r2, b9a8 <OS_FlagPost+0xf8>)
    b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b9a8:	0000ba09 	.word	0x0000ba09
    b9ac:	0000ba2f 	.word	0x0000ba2f
    b9b0:	0000ba51 	.word	0x0000ba51
    b9b4:	0000b9c9 	.word	0x0000b9c9
    b9b8:	0000ba51 	.word	0x0000ba51
    b9bc:	0000ba51 	.word	0x0000ba51
    b9c0:	0000ba51 	.word	0x0000ba51
    b9c4:	0000b9eb 	.word	0x0000b9eb
            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node     */
                 flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
    b9c8:	68fb      	ldr	r3, [r7, #12]
    b9ca:	6a1a      	ldr	r2, [r3, #32]
    b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b9d0:	4013      	ands	r3, r2
    b9d2:	617b      	str	r3, [r7, #20]
                 if (flags_rdy == p_tcb->FlagsPend) {
    b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b9d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b9d8:	697b      	ldr	r3, [r7, #20]
    b9da:	429a      	cmp	r2, r3
    b9dc:	d174      	bne.n	bac8 <OS_FlagPost+0x218>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
    b9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9e0:	6979      	ldr	r1, [r7, #20]
    b9e2:	683a      	ldr	r2, [r7, #0]
    b9e4:	f000 f8c4 	bl	bb70 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
    b9e8:	e06e      	b.n	bac8 <OS_FlagPost+0x218>

            case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                */
                 flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
    b9ea:	68fb      	ldr	r3, [r7, #12]
    b9ec:	6a1a      	ldr	r2, [r3, #32]
    b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b9f2:	4013      	ands	r3, r2
    b9f4:	617b      	str	r3, [r7, #20]
                 if (flags_rdy != (OS_FLAGS)0) {
    b9f6:	697b      	ldr	r3, [r7, #20]
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d067      	beq.n	bacc <OS_FlagPost+0x21c>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
    b9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9fe:	6979      	ldr	r1, [r7, #20]
    ba00:	683a      	ldr	r2, [r7, #0]
    ba02:	f000 f8b5 	bl	bb70 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
    ba06:	e061      	b.n	bacc <OS_FlagPost+0x21c>

#if OS_CFG_FLAG_MODE_CLR_EN > 0u
            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node     */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
    ba08:	68fb      	ldr	r3, [r7, #12]
    ba0a:	6a1b      	ldr	r3, [r3, #32]
    ba0c:	ea6f 0203 	mvn.w	r2, r3
    ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ba12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ba14:	4013      	ands	r3, r2
    ba16:	617b      	str	r3, [r7, #20]
                 if (flags_rdy == p_tcb->FlagsPend) {
    ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ba1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    ba1c:	697b      	ldr	r3, [r7, #20]
    ba1e:	429a      	cmp	r2, r3
    ba20:	d156      	bne.n	bad0 <OS_FlagPost+0x220>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
    ba22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba24:	6979      	ldr	r1, [r7, #20]
    ba26:	683a      	ldr	r2, [r7, #0]
    ba28:	f000 f8a2 	bl	bb70 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
    ba2c:	e050      	b.n	bad0 <OS_FlagPost+0x220>

            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
    ba2e:	68fb      	ldr	r3, [r7, #12]
    ba30:	6a1b      	ldr	r3, [r3, #32]
    ba32:	ea6f 0203 	mvn.w	r2, r3
    ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ba38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ba3a:	4013      	ands	r3, r2
    ba3c:	617b      	str	r3, [r7, #20]
                 if (flags_rdy != (OS_FLAGS)0) {
    ba3e:	697b      	ldr	r3, [r7, #20]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d047      	beq.n	bad4 <OS_FlagPost+0x224>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
    ba44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba46:	6979      	ldr	r1, [r7, #20]
    ba48:	683a      	ldr	r2, [r7, #0]
    ba4a:	f000 f891 	bl	bb70 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
    ba4e:	e041      	b.n	bad4 <OS_FlagPost+0x224>
#endif
            default:
                 OS_CRITICAL_EXIT();
    ba50:	f00c f9c8 	bl	17de4 <CPU_SR_Save>
    ba54:	6278      	str	r0, [r7, #36]	; 0x24
    ba56:	f7f5 ff2f 	bl	18b8 <CPU_IntDisMeasStart>
    ba5a:	f643 5350 	movw	r3, #15696	; 0x3d50
    ba5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba62:	781b      	ldrb	r3, [r3, #0]
    ba64:	f103 33ff 	add.w	r3, r3, #4294967295
    ba68:	b2da      	uxtb	r2, r3
    ba6a:	f643 5350 	movw	r3, #15696	; 0x3d50
    ba6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba72:	701a      	strb	r2, [r3, #0]
    ba74:	f643 5350 	movw	r3, #15696	; 0x3d50
    ba78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba7c:	781b      	ldrb	r3, [r3, #0]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	d116      	bne.n	bab0 <OS_FlagPost+0x200>
    ba82:	f003 fec9 	bl	f818 <OS_SchedLockTimeMeasStop>
    ba86:	f244 533c 	movw	r3, #17724	; 0x453c
    ba8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba8e:	881b      	ldrh	r3, [r3, #0]
    ba90:	2b00      	cmp	r3, #0
    ba92:	d007      	beq.n	baa4 <OS_FlagPost+0x1f4>
    ba94:	f7f5 ff3c 	bl	1910 <CPU_IntDisMeasStop>
    ba98:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ba9a:	f00c f9a7 	bl	17dec <CPU_SR_Restore>
    ba9e:	f003 fe6f 	bl	f780 <OS_Sched0>
    baa2:	e00a      	b.n	baba <OS_FlagPost+0x20a>
    baa4:	f7f5 ff34 	bl	1910 <CPU_IntDisMeasStop>
    baa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    baaa:	f00c f99f 	bl	17dec <CPU_SR_Restore>
    baae:	e004      	b.n	baba <OS_FlagPost+0x20a>
    bab0:	f7f5 ff2e 	bl	1910 <CPU_IntDisMeasStop>
    bab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bab6:	f00c f999 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_FLAG_PEND_OPT;
    baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    babc:	f643 22ff 	movw	r2, #15103	; 0x3aff
    bac0:	801a      	strh	r2, [r3, #0]
                 return ((OS_FLAGS)0);
    bac2:	f04f 0300 	mov.w	r3, #0
    bac6:	e04e      	b.n	bb66 <OS_FlagPost+0x2b6>
                 if (flags_rdy == p_tcb->FlagsPend) {
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
                                    flags_rdy,
                                    ts);
                 }
                 break;
    bac8:	bf00      	nop
    baca:	e004      	b.n	bad6 <OS_FlagPost+0x226>
                 if (flags_rdy != (OS_FLAGS)0) {
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
                                    flags_rdy,
                                    ts);
                 }
                 break;
    bacc:	bf00      	nop
    bace:	e002      	b.n	bad6 <OS_FlagPost+0x226>
                 if (flags_rdy == p_tcb->FlagsPend) {
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
                                    flags_rdy,
                                    ts);
                 }
                 break;
    bad0:	bf00      	nop
    bad2:	e000      	b.n	bad6 <OS_FlagPost+0x226>
                 if (flags_rdy != (OS_FLAGS)0) {
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
                                    flags_rdy,
                                    ts);
                 }
                 break;
    bad4:	bf00      	nop
            default:
                 OS_CRITICAL_EXIT();
                 *p_err = OS_ERR_FLAG_PEND_OPT;
                 return ((OS_FLAGS)0);
        }
        p_pend_data = p_pend_data_next;                         /* Point to next task waiting for event flag(s)       */
    bad6:	69fb      	ldr	r3, [r7, #28]
    bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (p_pend_data != (OS_PEND_DATA *)0) {
    bada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    badc:	2b00      	cmp	r3, #0
    bade:	d003      	beq.n	bae8 <OS_FlagPost+0x238>
            p_tcb = p_pend_data->TCBPtr;
    bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bae2:	689b      	ldr	r3, [r3, #8]
    bae4:	62bb      	str	r3, [r7, #40]	; 0x28
    bae6:	e002      	b.n	baee <OS_FlagPost+0x23e>
        } else {
            p_tcb = (OS_TCB *)0;
    bae8:	f04f 0300 	mov.w	r3, #0
    baec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    p_pend_data = p_pend_list->HeadPtr;
    p_tcb       = p_pend_data->TCBPtr;
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)      */
    baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    baf0:	2b00      	cmp	r3, #0
    baf2:	f47f af48 	bne.w	b986 <OS_FlagPost+0xd6>
            p_tcb = p_pend_data->TCBPtr;
        } else {
            p_tcb = (OS_TCB *)0;
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    baf6:	f00c f975 	bl	17de4 <CPU_SR_Save>
    bafa:	6278      	str	r0, [r7, #36]	; 0x24
    bafc:	f7f5 fedc 	bl	18b8 <CPU_IntDisMeasStart>
    bb00:	f643 5350 	movw	r3, #15696	; 0x3d50
    bb04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb08:	781b      	ldrb	r3, [r3, #0]
    bb0a:	f103 33ff 	add.w	r3, r3, #4294967295
    bb0e:	b2da      	uxtb	r2, r3
    bb10:	f643 5350 	movw	r3, #15696	; 0x3d50
    bb14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb18:	701a      	strb	r2, [r3, #0]
    bb1a:	f643 5350 	movw	r3, #15696	; 0x3d50
    bb1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	2b00      	cmp	r3, #0
    bb26:	d101      	bne.n	bb2c <OS_FlagPost+0x27c>
    bb28:	f003 fe76 	bl	f818 <OS_SchedLockTimeMeasStop>
    bb2c:	f7f5 fef0 	bl	1910 <CPU_IntDisMeasStop>
    bb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bb32:	f00c f95b 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    bb36:	88fb      	ldrh	r3, [r7, #6]
    bb38:	b21b      	sxth	r3, r3
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	db01      	blt.n	bb42 <OS_FlagPost+0x292>
        OSSched();
    bb3e:	f002 fd6f 	bl	e620 <OSSched>
    }

    CPU_CRITICAL_ENTER();
    bb42:	f00c f94f 	bl	17de4 <CPU_SR_Save>
    bb46:	6278      	str	r0, [r7, #36]	; 0x24
    bb48:	f7f5 feb6 	bl	18b8 <CPU_IntDisMeasStart>
    flags_cur = p_grp->Flags;
    bb4c:	68fb      	ldr	r3, [r7, #12]
    bb4e:	6a1b      	ldr	r3, [r3, #32]
    bb50:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
    bb52:	f7f5 fedd 	bl	1910 <CPU_IntDisMeasStop>
    bb56:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bb58:	f00c f948 	bl	17dec <CPU_SR_Restore>
    *p_err    = OS_ERR_NONE;
    bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb5e:	f04f 0200 	mov.w	r2, #0
    bb62:	801a      	strh	r2, [r3, #0]
    return (flags_cur);
    bb64:	693b      	ldr	r3, [r7, #16]
}
    bb66:	4618      	mov	r0, r3
    bb68:	f107 0730 	add.w	r7, r7, #48	; 0x30
    bb6c:	46bd      	mov	sp, r7
    bb6e:	bd80      	pop	{r7, pc}

0000bb70 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b084      	sub	sp, #16
    bb74:	af00      	add	r7, sp, #0
    bb76:	60f8      	str	r0, [r7, #12]
    bb78:	60b9      	str	r1, [r7, #8]
    bb7a:	607a      	str	r2, [r7, #4]
    p_tcb->FlagsRdy   = flags_rdy;
    bb7c:	68fb      	ldr	r3, [r7, #12]
    bb7e:	68ba      	ldr	r2, [r7, #8]
    bb80:	665a      	str	r2, [r3, #100]	; 0x64
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                  /* Clear pend status                                      */
    bb82:	68fb      	ldr	r3, [r7, #12]
    bb84:	f04f 0200 	mov.w	r2, #0
    bb88:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;            /* Indicate no longer pending                             */
    bb8c:	68fb      	ldr	r3, [r7, #12]
    bb8e:	f04f 0200 	mov.w	r2, #0
    bb92:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    p_tcb->TS         = ts;
    bb96:	68fb      	ldr	r3, [r7, #12]
    bb98:	687a      	ldr	r2, [r7, #4]
    bb9a:	639a      	str	r2, [r3, #56]	; 0x38
    switch (p_tcb->TaskState) {
    bb9c:	68fb      	ldr	r3, [r7, #12]
    bb9e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    bba2:	2b07      	cmp	r3, #7
    bba4:	d820      	bhi.n	bbe8 <OS_FlagTaskRdy+0x78>
    bba6:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    bbaa:	fa02 f203 	lsl.w	r2, r2, r3
    bbae:	2a00      	cmp	r2, #0
    bbb0:	db1c      	blt.n	bbec <OS_FlagTaskRdy+0x7c>
    bbb2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
    bbb6:	fa02 f203 	lsl.w	r2, r2, r3
    bbba:	2a00      	cmp	r2, #0
    bbbc:	db0e      	blt.n	bbdc <OS_FlagTaskRdy+0x6c>
    bbbe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    bbc2:	fa02 f303 	lsl.w	r3, r2, r3
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	da0e      	bge.n	bbe8 <OS_FlagTaskRdy+0x78>
        case OS_TASK_STATE_SUSPENDED:
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             OS_TaskRdy(p_tcb);
    bbca:	68f8      	ldr	r0, [r7, #12]
    bbcc:	f003 ff04 	bl	f9d8 <OS_TaskRdy>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
    bbd0:	68fb      	ldr	r3, [r7, #12]
    bbd2:	f04f 0200 	mov.w	r2, #0
    bbd6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             break;
    bbda:	e008      	b.n	bbee <OS_FlagTaskRdy+0x7e>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
    bbdc:	68fb      	ldr	r3, [r7, #12]
    bbde:	f04f 0204 	mov.w	r2, #4
    bbe2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             break;
    bbe6:	e002      	b.n	bbee <OS_FlagTaskRdy+0x7e>

        default:
             break;
    bbe8:	bf00      	nop
    bbea:	e000      	b.n	bbee <OS_FlagTaskRdy+0x7e>
    switch (p_tcb->TaskState) {
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_SUSPENDED:
             break;
    bbec:	bf00      	nop
             break;

        default:
             break;
    }
    OS_PendListRemove(p_tcb);
    bbee:	68f8      	ldr	r0, [r7, #12]
    bbf0:	f003 fa50 	bl	f094 <OS_PendListRemove>
}
    bbf4:	f107 0710 	add.w	r7, r7, #16
    bbf8:	46bd      	mov	sp, r7
    bbfa:	bd80      	pop	{r7, pc}

0000bbfc <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
    bbfc:	b580      	push	{r7, lr}
    bbfe:	b086      	sub	sp, #24
    bc00:	af00      	add	r7, sp, #0
    bc02:	6078      	str	r0, [r7, #4]
    OS_MSG_Q    *p_msg_q;
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
    CPU_SR_ALLOC();
    bc04:	f04f 0300 	mov.w	r3, #0
    bc08:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    OSIntQTaskTimeMax   = (CPU_TS    )0;                    /* Reset the task execution times                         */
    bc0a:	f244 1350 	movw	r3, #16720	; 0x4150
    bc0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc12:	f04f 0200 	mov.w	r2, #0
    bc16:	601a      	str	r2, [r3, #0]
    OSIntQMaxNbrEntries = (OS_OBJ_QTY)0;                    /* Reset the queue maximum number of entries              */
    bc18:	f244 0370 	movw	r3, #16496	; 0x4070
    bc1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc20:	f04f 0200 	mov.w	r2, #0
    bc24:	801a      	strh	r2, [r3, #0]
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskTimeMax  = (CPU_TS)0;
    bc26:	f643 5358 	movw	r3, #15704	; 0x3d58
    bc2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc2e:	f04f 0200 	mov.w	r2, #0
    bc32:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax  = (CPU_TS)0;
    bc34:	f244 532c 	movw	r3, #17708	; 0x452c
    bc38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc3c:	f04f 0200 	mov.w	r2, #0
    bc40:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax   = (CPU_TS)0;
    bc42:	f244 1370 	movw	r3, #16752	; 0x4170
    bc46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc4a:	f04f 0200 	mov.w	r2, #0
    bc4e:	601a      	str	r2, [r3, #0]
#endif

#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax    = (CPU_TS)0;                         /* Reset the maximum interrupt disable time               */
    bc50:	f244 4330 	movw	r3, #17456	; 0x4430
    bc54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc58:	f04f 0200 	mov.w	r2, #0
    bc5c:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax = (CPU_TS)0;                         /* Reset the maximum scheduler lock time                  */
    bc5e:	f244 4348 	movw	r3, #17480	; 0x4448
    bc62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc66:	f04f 0200 	mov.w	r2, #0
    bc6a:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb = OSTaskDbgListPtr;
    bc6c:	f244 136c 	movw	r3, #16748	; 0x416c
    bc70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc74:	681b      	ldr	r3, [r3, #0]
    bc76:	617b      	str	r3, [r7, #20]
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
    bc78:	e03e      	b.n	bcf8 <OSStatReset+0xfc>
        CPU_CRITICAL_ENTER();
    bc7a:	f00c f8b3 	bl	17de4 <CPU_SR_Save>
    bc7e:	60f8      	str	r0, [r7, #12]
    bc80:	f7f5 fe1a 	bl	18b8 <CPU_IntDisMeasStart>

#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
    bc84:	697b      	ldr	r3, [r7, #20]
    bc86:	f04f 0200 	mov.w	r2, #0
    bc8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
    bc8e:	697b      	ldr	r3, [r7, #20]
    bc90:	f04f 0200 	mov.w	r2, #0
    bc94:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
    bc98:	697b      	ldr	r3, [r7, #20]
    bc9a:	f04f 0200 	mov.w	r2, #0
    bc9e:	659a      	str	r2, [r3, #88]	; 0x58
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
    bca0:	697b      	ldr	r3, [r7, #20]
    bca2:	f04f 0200 	mov.w	r2, #0
    bca6:	675a      	str	r2, [r3, #116]	; 0x74
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
    bca8:	697b      	ldr	r3, [r7, #20]
    bcaa:	f04f 0200 	mov.w	r2, #0
    bcae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
    bcb2:	697b      	ldr	r3, [r7, #20]
    bcb4:	f04f 0200 	mov.w	r2, #0
    bcb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
    bcbc:	6979      	ldr	r1, [r7, #20]
    bcbe:	f04f 0200 	mov.w	r2, #0
    bcc2:	f04f 0300 	mov.w	r3, #0
    bcc6:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
        p_tcb->CyclesStart      =  OS_TS_GET();
    bcca:	f7f7 fb27 	bl	331c <CPU_TS_TmrRd>
    bcce:	4602      	mov	r2, r0
    bcd0:	697b      	ldr	r3, [r7, #20]
    bcd2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
    bcd6:	697b      	ldr	r3, [r7, #20]
    bcd8:	f103 0344 	add.w	r3, r3, #68	; 0x44
    bcdc:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
    bcde:	68bb      	ldr	r3, [r7, #8]
    bce0:	f04f 0200 	mov.w	r2, #0
    bce4:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
    bce6:	697b      	ldr	r3, [r7, #20]
    bce8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    bcec:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
    bcee:	f7f5 fe0f 	bl	1910 <CPU_IntDisMeasStop>
    bcf2:	68f8      	ldr	r0, [r7, #12]
    bcf4:	f00c f87a 	bl	17dec <CPU_SR_Restore>
    OSSchedLockTimeMax = (CPU_TS)0;                         /* Reset the maximum scheduler lock time                  */
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb = OSTaskDbgListPtr;
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
    bcf8:	697b      	ldr	r3, [r7, #20]
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	d1bd      	bne.n	bc7a <OSStatReset+0x7e>
        p_tcb                   = p_tcb->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
    bcfe:	f004 f8a7 	bl	fe50 <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
    bd02:	f7fb f837 	bl	6d74 <OS_TmrResetPeak>
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    p_q = OSQDbgListPtr;
    bd06:	f244 3338 	movw	r3, #17208	; 0x4338
    bd0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bd0e:	681b      	ldr	r3, [r3, #0]
    bd10:	613b      	str	r3, [r7, #16]
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
    bd12:	e014      	b.n	bd3e <OSStatReset+0x142>
        CPU_CRITICAL_ENTER();
    bd14:	f00c f866 	bl	17de4 <CPU_SR_Save>
    bd18:	60f8      	str	r0, [r7, #12]
    bd1a:	f7f5 fdcd 	bl	18b8 <CPU_IntDisMeasStart>
        p_msg_q                = &p_q->MsgQ;
    bd1e:	693b      	ldr	r3, [r7, #16]
    bd20:	f103 0320 	add.w	r3, r3, #32
    bd24:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
    bd26:	68bb      	ldr	r3, [r7, #8]
    bd28:	f04f 0200 	mov.w	r2, #0
    bd2c:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
    bd2e:	693b      	ldr	r3, [r7, #16]
    bd30:	699b      	ldr	r3, [r3, #24]
    bd32:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
    bd34:	f7f5 fdec 	bl	1910 <CPU_IntDisMeasStop>
    bd38:	68f8      	ldr	r0, [r7, #12]
    bd3a:	f00c f857 	bl	17dec <CPU_SR_Restore>
    OS_TmrResetPeak();
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    p_q = OSQDbgListPtr;
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
    bd3e:	693b      	ldr	r3, [r7, #16]
    bd40:	2b00      	cmp	r3, #0
    bd42:	d1e7      	bne.n	bd14 <OSStatReset+0x118>
        p_q                    = p_q->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    *p_err = OS_ERR_NONE;
    bd44:	687b      	ldr	r3, [r7, #4]
    bd46:	f04f 0200 	mov.w	r2, #0
    bd4a:	801a      	strh	r2, [r3, #0]
}
    bd4c:	f107 0718 	add.w	r7, r7, #24
    bd50:	46bd      	mov	sp, r7
    bd52:	bd80      	pop	{r7, pc}

0000bd54 <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
    bd54:	b580      	push	{r7, lr}
    bd56:	b086      	sub	sp, #24
    bd58:	af00      	add	r7, sp, #0
    bd5a:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
    bd5c:	f04f 0300 	mov.w	r3, #0
    bd60:	613b      	str	r3, [r7, #16]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
    bd62:	f04f 0002 	mov.w	r0, #2
    bd66:	f04f 0100 	mov.w	r1, #0
    bd6a:	f107 030e 	add.w	r3, r7, #14
    bd6e:	461a      	mov	r2, r3
    bd70:	f7fd fc88 	bl	9684 <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
    bd74:	89fb      	ldrh	r3, [r7, #14]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d003      	beq.n	bd82 <OSStatTaskCPUUsageInit+0x2e>
        *p_err = err;
    bd7a:	89fa      	ldrh	r2, [r7, #14]
    bd7c:	687b      	ldr	r3, [r7, #4]
    bd7e:	801a      	strh	r2, [r3, #0]
        return;
    bd80:	e06b      	b.n	be5a <OSStatTaskCPUUsageInit+0x106>
    }
    CPU_CRITICAL_ENTER();
    bd82:	f00c f82f 	bl	17de4 <CPU_SR_Save>
    bd86:	6138      	str	r0, [r7, #16]
    bd88:	f7f5 fd96 	bl	18b8 <CPU_IntDisMeasStart>
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
    bd8c:	f643 535c 	movw	r3, #15708	; 0x3d5c
    bd90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bd94:	f04f 0200 	mov.w	r2, #0
    bd98:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
    bd9a:	f7f5 fdb9 	bl	1910 <CPU_IntDisMeasStop>
    bd9e:	6938      	ldr	r0, [r7, #16]
    bda0:	f00c f824 	bl	17dec <CPU_SR_Restore>

    dly = (OS_TICK)0;
    bda4:	f04f 0300 	mov.w	r3, #0
    bda8:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
    bdaa:	f64c 134c 	movw	r3, #51532	; 0xc94c
    bdae:	f2c0 0302 	movt	r3, #2
    bdb2:	681a      	ldr	r2, [r3, #0]
    bdb4:	f64c 1334 	movw	r3, #51508	; 0xc934
    bdb8:	f2c0 0302 	movt	r3, #2
    bdbc:	681b      	ldr	r3, [r3, #0]
    bdbe:	429a      	cmp	r2, r3
    bdc0:	d90c      	bls.n	bddc <OSStatTaskCPUUsageInit+0x88>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
    bdc2:	f64c 134c 	movw	r3, #51532	; 0xc94c
    bdc6:	f2c0 0302 	movt	r3, #2
    bdca:	681a      	ldr	r2, [r3, #0]
    bdcc:	f64c 1334 	movw	r3, #51508	; 0xc934
    bdd0:	f2c0 0302 	movt	r3, #2
    bdd4:	681b      	ldr	r3, [r3, #0]
    bdd6:	fbb2 f3f3 	udiv	r3, r2, r3
    bdda:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
    bddc:	697b      	ldr	r3, [r7, #20]
    bdde:	2b00      	cmp	r3, #0
    bde0:	d10d      	bne.n	bdfe <OSStatTaskCPUUsageInit+0xaa>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
    bde2:	f64c 134c 	movw	r3, #51532	; 0xc94c
    bde6:	f2c0 0302 	movt	r3, #2
    bdea:	681a      	ldr	r2, [r3, #0]
    bdec:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    bdf0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    bdf4:	fba3 1302 	umull	r1, r3, r3, r2
    bdf8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    bdfc:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
    bdfe:	6978      	ldr	r0, [r7, #20]
    be00:	f04f 0100 	mov.w	r1, #0
    be04:	f107 030e 	add.w	r3, r7, #14
    be08:	461a      	mov	r2, r3
    be0a:	f7fd fc3b 	bl	9684 <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);
    CPU_CRITICAL_ENTER();
    be0e:	f00b ffe9 	bl	17de4 <CPU_SR_Save>
    be12:	6138      	str	r0, [r7, #16]
    be14:	f7f5 fd50 	bl	18b8 <CPU_IntDisMeasStart>
    OSStatTaskTimeMax = (CPU_TS)0;
    be18:	f643 5358 	movw	r3, #15704	; 0x3d58
    be1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be20:	f04f 0200 	mov.w	r2, #0
    be24:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
    be26:	f643 535c 	movw	r3, #15708	; 0x3d5c
    be2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be2e:	681a      	ldr	r2, [r3, #0]
    be30:	f244 4320 	movw	r3, #17440	; 0x4420
    be34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be38:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
    be3a:	f244 0369 	movw	r3, #16489	; 0x4069
    be3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be42:	f04f 0201 	mov.w	r2, #1
    be46:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
    be48:	f7f5 fd62 	bl	1910 <CPU_IntDisMeasStop>
    be4c:	6938      	ldr	r0, [r7, #16]
    be4e:	f00b ffcd 	bl	17dec <CPU_SR_Restore>
    *p_err            = OS_ERR_NONE;
    be52:	687b      	ldr	r3, [r7, #4]
    be54:	f04f 0200 	mov.w	r2, #0
    be58:	801a      	strh	r2, [r3, #0]
}
    be5a:	f107 0718 	add.w	r7, r7, #24
    be5e:	46bd      	mov	sp, r7
    be60:	bd80      	pop	{r7, pc}
    be62:	bf00      	nop

0000be64 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void *p_arg)
{
    be64:	b580      	push	{r7, lr}
    be66:	b08c      	sub	sp, #48	; 0x30
    be68:	af00      	add	r7, sp, #0
    be6a:	6078      	str	r0, [r7, #4]
#endif
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
    be6c:	f04f 0300 	mov.w	r3, #0
    be70:	61fb      	str	r3, [r7, #28]



    p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
    be72:	e00e      	b.n	be92 <OS_StatTask+0x2e>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
    be74:	f64c 1334 	movw	r3, #51508	; 0xc934
    be78:	f2c0 0302 	movt	r3, #2
    be7c:	681b      	ldr	r3, [r3, #0]
    be7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    be82:	4618      	mov	r0, r3
    be84:	f04f 0100 	mov.w	r1, #0
    be88:	f107 030e 	add.w	r3, r7, #14
    be8c:	461a      	mov	r2, r3
    be8e:	f7fd fbf9 	bl	9684 <OSTimeDly>
    CPU_SR_ALLOC();



    p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
    be92:	f244 0369 	movw	r3, #16489	; 0x4069
    be96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be9a:	781b      	ldrb	r3, [r3, #0]
    be9c:	2b01      	cmp	r3, #1
    be9e:	d1e9      	bne.n	be74 <OS_StatTask+0x10>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
    bea0:	f107 030e 	add.w	r3, r7, #14
    bea4:	4618      	mov	r0, r3
    bea6:	f7ff fea9 	bl	bbfc <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
    beaa:	f04f 0300 	mov.w	r3, #0
    beae:	623b      	str	r3, [r7, #32]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
    beb0:	f64c 134c 	movw	r3, #51532	; 0xc94c
    beb4:	f2c0 0302 	movt	r3, #2
    beb8:	681a      	ldr	r2, [r3, #0]
    beba:	f64c 1334 	movw	r3, #51508	; 0xc934
    bebe:	f2c0 0302 	movt	r3, #2
    bec2:	681b      	ldr	r3, [r3, #0]
    bec4:	429a      	cmp	r2, r3
    bec6:	d90c      	bls.n	bee2 <OS_StatTask+0x7e>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
    bec8:	f64c 134c 	movw	r3, #51532	; 0xc94c
    becc:	f2c0 0302 	movt	r3, #2
    bed0:	681a      	ldr	r2, [r3, #0]
    bed2:	f64c 1334 	movw	r3, #51508	; 0xc934
    bed6:	f2c0 0302 	movt	r3, #2
    beda:	681b      	ldr	r3, [r3, #0]
    bedc:	fbb2 f3f3 	udiv	r3, r2, r3
    bee0:	623b      	str	r3, [r7, #32]
    }
    if (dly == (OS_TICK)0) {
    bee2:	6a3b      	ldr	r3, [r7, #32]
    bee4:	2b00      	cmp	r3, #0
    bee6:	d10d      	bne.n	bf04 <OS_StatTask+0xa0>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
    bee8:	f64c 134c 	movw	r3, #51532	; 0xc94c
    beec:	f2c0 0302 	movt	r3, #2
    bef0:	681a      	ldr	r2, [r3, #0]
    bef2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    bef6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    befa:	fba3 1302 	umull	r1, r3, r3, r2
    befe:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    bf02:	623b      	str	r3, [r7, #32]
    }

    while (DEF_ON) {
        ts_start = OS_TS_GET();
    bf04:	f7f7 fa0a 	bl	331c <CPU_TS_TmrRd>
    bf08:	61b8      	str	r0, [r7, #24]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
    bf0a:	f7f5 fcb9 	bl	1880 <CPU_IntDisMeasMaxGet>
    bf0e:	4602      	mov	r2, r0
    bf10:	f244 4330 	movw	r3, #17456	; 0x4430
    bf14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf18:	601a      	str	r2, [r3, #0]
#endif
        CPU_CRITICAL_ENTER();
    bf1a:	f00b ff63 	bl	17de4 <CPU_SR_Save>
    bf1e:	61f8      	str	r0, [r7, #28]
    bf20:	f7f5 fcca 	bl	18b8 <CPU_IntDisMeasStart>
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
    bf24:	f643 535c 	movw	r3, #15708	; 0x3d5c
    bf28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf2c:	681a      	ldr	r2, [r3, #0]
    bf2e:	f244 4338 	movw	r3, #17464	; 0x4438
    bf32:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf36:	601a      	str	r2, [r3, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
    bf38:	f643 535c 	movw	r3, #15708	; 0x3d5c
    bf3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf40:	f04f 0200 	mov.w	r2, #0
    bf44:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
    bf46:	f7f5 fce3 	bl	1910 <CPU_IntDisMeasStop>
    bf4a:	69f8      	ldr	r0, [r7, #28]
    bf4c:	f00b ff4e 	bl	17dec <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {
    bf50:	f244 4320 	movw	r3, #17440	; 0x4420
    bf54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf58:	681a      	ldr	r2, [r3, #0]
    bf5a:	f244 4338 	movw	r3, #17464	; 0x4438
    bf5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	429a      	cmp	r2, r3
    bf66:	d928      	bls.n	bfba <OS_StatTask+0x156>
            if (OSStatTaskCtrMax > (OS_TICK)0) {
    bf68:	f244 4320 	movw	r3, #17440	; 0x4420
    bf6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf70:	681b      	ldr	r3, [r3, #0]
    bf72:	2b00      	cmp	r3, #0
    bf74:	d019      	beq.n	bfaa <OS_StatTask+0x146>
                OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)100u - 100u * OSStatTaskCtrRun / OSStatTaskCtrMax);
    bf76:	f244 4338 	movw	r3, #17464	; 0x4438
    bf7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf7e:	681b      	ldr	r3, [r3, #0]
    bf80:	f04f 0264 	mov.w	r2, #100	; 0x64
    bf84:	fb02 f203 	mul.w	r2, r2, r3
    bf88:	f244 4320 	movw	r3, #17440	; 0x4420
    bf8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf90:	681b      	ldr	r3, [r3, #0]
    bf92:	fbb2 f3f3 	udiv	r3, r2, r3
    bf96:	b2db      	uxtb	r3, r3
    bf98:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    bf9c:	b2da      	uxtb	r2, r3
    bf9e:	f244 1380 	movw	r3, #16768	; 0x4180
    bfa2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bfa6:	701a      	strb	r2, [r3, #0]
    bfa8:	e00e      	b.n	bfc8 <OS_StatTask+0x164>
            } else {
                OSStatTaskCPUUsage = (OS_CPU_USAGE)100;
    bfaa:	f244 1380 	movw	r3, #16768	; 0x4180
    bfae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bfb2:	f04f 0264 	mov.w	r2, #100	; 0x64
    bfb6:	701a      	strb	r2, [r3, #0]
    bfb8:	e006      	b.n	bfc8 <OS_StatTask+0x164>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)100;
    bfba:	f244 1380 	movw	r3, #16768	; 0x4180
    bfbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bfc2:	f04f 0264 	mov.w	r2, #100	; 0x64
    bfc6:	701a      	strb	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
    bfc8:	f7f4 fc10 	bl	7ec <OSStatTaskHook>

#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
    bfcc:	f04f 0200 	mov.w	r2, #0
    bfd0:	f04f 0300 	mov.w	r3, #0
    bfd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
#endif
        p_tcb = OSTaskDbgListPtr;
    bfd8:	f244 136c 	movw	r3, #16748	; 0x416c
    bfdc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bfe0:	681b      	ldr	r3, [r3, #0]
    bfe2:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tcb != (OS_TCB *)0) {
    bfe4:	e072      	b.n	c0cc <OS_StatTask+0x268>
#if OS_CFG_TASK_PROFILE_EN > 0u
            OS_CRITICAL_ENTER();
    bfe6:	f00b fefd 	bl	17de4 <CPU_SR_Save>
    bfea:	61f8      	str	r0, [r7, #28]
    bfec:	f7f5 fc64 	bl	18b8 <CPU_IntDisMeasStart>
    bff0:	f643 5350 	movw	r3, #15696	; 0x3d50
    bff4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bff8:	781b      	ldrb	r3, [r3, #0]
    bffa:	f103 0301 	add.w	r3, r3, #1
    bffe:	b2da      	uxtb	r2, r3
    c000:	f643 5350 	movw	r3, #15696	; 0x3d50
    c004:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c008:	701a      	strb	r2, [r3, #0]
    c00a:	f643 5350 	movw	r3, #15696	; 0x3d50
    c00e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	2b01      	cmp	r3, #1
    c016:	d101      	bne.n	c01c <OS_StatTask+0x1b8>
    c018:	f003 fbec 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    c01c:	f7f5 fc78 	bl	1910 <CPU_IntDisMeasStop>
    c020:	69f8      	ldr	r0, [r7, #28]
    c022:	f00b fee3 	bl	17dec <CPU_SR_Restore>
            cycles_total += p_tcb->CyclesTotal;
    c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c028:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
    c02c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    c030:	1812      	adds	r2, r2, r0
    c032:	eb43 0301 	adc.w	r3, r3, r1
    c036:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            OS_CRITICAL_EXIT();
    c03a:	f00b fed3 	bl	17de4 <CPU_SR_Save>
    c03e:	61f8      	str	r0, [r7, #28]
    c040:	f7f5 fc3a 	bl	18b8 <CPU_IntDisMeasStart>
    c044:	f643 5350 	movw	r3, #15696	; 0x3d50
    c048:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c04c:	781b      	ldrb	r3, [r3, #0]
    c04e:	f103 33ff 	add.w	r3, r3, #4294967295
    c052:	b2da      	uxtb	r2, r3
    c054:	f643 5350 	movw	r3, #15696	; 0x3d50
    c058:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c05c:	701a      	strb	r2, [r3, #0]
    c05e:	f643 5350 	movw	r3, #15696	; 0x3d50
    c062:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	2b00      	cmp	r3, #0
    c06a:	d116      	bne.n	c09a <OS_StatTask+0x236>
    c06c:	f003 fbd4 	bl	f818 <OS_SchedLockTimeMeasStop>
    c070:	f244 533c 	movw	r3, #17724	; 0x453c
    c074:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c078:	881b      	ldrh	r3, [r3, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d007      	beq.n	c08e <OS_StatTask+0x22a>
    c07e:	f7f5 fc47 	bl	1910 <CPU_IntDisMeasStop>
    c082:	69f8      	ldr	r0, [r7, #28]
    c084:	f00b feb2 	bl	17dec <CPU_SR_Restore>
    c088:	f003 fb7a 	bl	f780 <OS_Sched0>
    c08c:	e00a      	b.n	c0a4 <OS_StatTask+0x240>
    c08e:	f7f5 fc3f 	bl	1910 <CPU_IntDisMeasStop>
    c092:	69f8      	ldr	r0, [r7, #28]
    c094:	f00b feaa 	bl	17dec <CPU_SR_Restore>
    c098:	e004      	b.n	c0a4 <OS_StatTask+0x240>
    c09a:	f7f5 fc39 	bl	1910 <CPU_IntDisMeasStop>
    c09e:	69f8      	ldr	r0, [r7, #28]
    c0a0:	f00b fea4 	bl	17dec <CPU_SR_Restore>
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            if (p_tcb != (OS_TCB *)0) {
    c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0a6:	2b00      	cmp	r3, #0
    c0a8:	d00c      	beq.n	c0c4 <OS_StatTask+0x260>
                OSTaskStkChk(p_tcb,                         /* Calculate stack usage of active tasks only             */
    c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0ac:	f103 0284 	add.w	r2, r3, #132	; 0x84
    c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0b2:	f103 0380 	add.w	r3, r3, #128	; 0x80
    c0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c0b8:	4611      	mov	r1, r2
    c0ba:	461a      	mov	r2, r3
    c0bc:	f107 030e 	add.w	r3, r7, #14
    c0c0:	f7fc fc70 	bl	89a4 <OSTaskStkChk>
                             &p_tcb->StkFree,
                             &p_tcb->StkUsed,
                             &err);
            }
#endif
            p_tcb = p_tcb->DbgNextPtr;
    c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    c0ca:	627b      	str	r3, [r7, #36]	; 0x24
#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
#endif
        p_tcb = OSTaskDbgListPtr;
        while (p_tcb != (OS_TCB *)0) {
    c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d189      	bne.n	bfe6 <OS_StatTask+0x182>
            }
#endif
            p_tcb = p_tcb->DbgNextPtr;
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        if (cycles_total > (OS_CYCLES)0) {
    c0d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    c0d6:	ea52 0103 	orrs.w	r1, r2, r3
    c0da:	d070      	beq.n	c1be <OS_StatTask+0x35a>
            p_tcb = OSTaskDbgListPtr;
    c0dc:	f244 136c 	movw	r3, #16748	; 0x416c
    c0e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0e4:	681b      	ldr	r3, [r3, #0]
    c0e6:	627b      	str	r3, [r7, #36]	; 0x24
            while (p_tcb != (OS_TCB *)0) {                  /* Compute execution time of each task                    */
    c0e8:	e066      	b.n	c1b8 <OS_StatTask+0x354>
                OS_CRITICAL_ENTER();
    c0ea:	f00b fe7b 	bl	17de4 <CPU_SR_Save>
    c0ee:	61f8      	str	r0, [r7, #28]
    c0f0:	f7f5 fbe2 	bl	18b8 <CPU_IntDisMeasStart>
    c0f4:	f643 5350 	movw	r3, #15696	; 0x3d50
    c0f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0fc:	781b      	ldrb	r3, [r3, #0]
    c0fe:	f103 0301 	add.w	r3, r3, #1
    c102:	b2da      	uxtb	r2, r3
    c104:	f643 5350 	movw	r3, #15696	; 0x3d50
    c108:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c10c:	701a      	strb	r2, [r3, #0]
    c10e:	f643 5350 	movw	r3, #15696	; 0x3d50
    c112:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	2b01      	cmp	r3, #1
    c11a:	d101      	bne.n	c120 <OS_StatTask+0x2bc>
    c11c:	f003 fb6a 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    c120:	f7f5 fbf6 	bl	1910 <CPU_IntDisMeasStop>
    c124:	69f8      	ldr	r0, [r7, #28]
    c126:	f00b fe61 	bl	17dec <CPU_SR_Restore>
                usage           = 100; // kuu: 100; (OS_CPU_USAGE)((OS_CYCLES)100 * p_tcb->CyclesTotal / cycles_total);
    c12a:	f04f 0364 	mov.w	r3, #100	; 0x64
    c12e:	75fb      	strb	r3, [r7, #23]
                if (usage > 100u) {
    c130:	7dfb      	ldrb	r3, [r7, #23]
    c132:	2b64      	cmp	r3, #100	; 0x64
    c134:	d903      	bls.n	c13e <OS_StatTask+0x2da>
                    usage           = 100u;
    c136:	f04f 0364 	mov.w	r3, #100	; 0x64
    c13a:	75fb      	strb	r3, [r7, #23]
    c13c:	e003      	b.n	c146 <OS_StatTask+0x2e2>
                } else {
                    p_tcb->CPUUsage = usage;
    c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c140:	7dfa      	ldrb	r2, [r7, #23]
    c142:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                }
                p_tcb = p_tcb->DbgNextPtr;
    c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c148:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    c14c:	627b      	str	r3, [r7, #36]	; 0x24
                OS_CRITICAL_EXIT();
    c14e:	f00b fe49 	bl	17de4 <CPU_SR_Save>
    c152:	61f8      	str	r0, [r7, #28]
    c154:	f7f5 fbb0 	bl	18b8 <CPU_IntDisMeasStart>
    c158:	f643 5350 	movw	r3, #15696	; 0x3d50
    c15c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c160:	781b      	ldrb	r3, [r3, #0]
    c162:	f103 33ff 	add.w	r3, r3, #4294967295
    c166:	b2da      	uxtb	r2, r3
    c168:	f643 5350 	movw	r3, #15696	; 0x3d50
    c16c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c170:	701a      	strb	r2, [r3, #0]
    c172:	f643 5350 	movw	r3, #15696	; 0x3d50
    c176:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c17a:	781b      	ldrb	r3, [r3, #0]
    c17c:	2b00      	cmp	r3, #0
    c17e:	d116      	bne.n	c1ae <OS_StatTask+0x34a>
    c180:	f003 fb4a 	bl	f818 <OS_SchedLockTimeMeasStop>
    c184:	f244 533c 	movw	r3, #17724	; 0x453c
    c188:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c18c:	881b      	ldrh	r3, [r3, #0]
    c18e:	2b00      	cmp	r3, #0
    c190:	d007      	beq.n	c1a2 <OS_StatTask+0x33e>
    c192:	f7f5 fbbd 	bl	1910 <CPU_IntDisMeasStop>
    c196:	69f8      	ldr	r0, [r7, #28]
    c198:	f00b fe28 	bl	17dec <CPU_SR_Restore>
    c19c:	f003 faf0 	bl	f780 <OS_Sched0>
    c1a0:	e00a      	b.n	c1b8 <OS_StatTask+0x354>
    c1a2:	f7f5 fbb5 	bl	1910 <CPU_IntDisMeasStop>
    c1a6:	69f8      	ldr	r0, [r7, #28]
    c1a8:	f00b fe20 	bl	17dec <CPU_SR_Restore>
    c1ac:	e004      	b.n	c1b8 <OS_StatTask+0x354>
    c1ae:	f7f5 fbaf 	bl	1910 <CPU_IntDisMeasStop>
    c1b2:	69f8      	ldr	r0, [r7, #28]
    c1b4:	f00b fe1a 	bl	17dec <CPU_SR_Restore>
            p_tcb = p_tcb->DbgNextPtr;
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        if (cycles_total > (OS_CYCLES)0) {
            p_tcb = OSTaskDbgListPtr;
            while (p_tcb != (OS_TCB *)0) {                  /* Compute execution time of each task                    */
    c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d195      	bne.n	c0ea <OS_StatTask+0x286>
            }
        }
#endif
#endif

        if (OSStatResetFlag == DEF_TRUE) {
    c1be:	f244 434c 	movw	r3, #17484	; 0x444c
    c1c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	2b01      	cmp	r3, #1
    c1ca:	d10b      	bne.n	c1e4 <OS_StatTask+0x380>
            OSStatResetFlag  = DEF_FALSE;
    c1cc:	f244 434c 	movw	r3, #17484	; 0x444c
    c1d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1d4:	f04f 0200 	mov.w	r2, #0
    c1d8:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
    c1da:	f107 030e 	add.w	r3, r7, #14
    c1de:	4618      	mov	r0, r3
    c1e0:	f7ff fd0c 	bl	bbfc <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
    c1e4:	f7f7 f89a 	bl	331c <CPU_TS_TmrRd>
    c1e8:	4602      	mov	r2, r0
    c1ea:	69bb      	ldr	r3, [r7, #24]
    c1ec:	1ad3      	subs	r3, r2, r3
    c1ee:	613b      	str	r3, [r7, #16]
        if (ts_end > OSStatTaskTimeMax) {
    c1f0:	f643 5358 	movw	r3, #15704	; 0x3d58
    c1f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	693a      	ldr	r2, [r7, #16]
    c1fc:	429a      	cmp	r2, r3
    c1fe:	d905      	bls.n	c20c <OS_StatTask+0x3a8>
            OSStatTaskTimeMax = ts_end;
    c200:	f643 5358 	movw	r3, #15704	; 0x3d58
    c204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c208:	693a      	ldr	r2, [r7, #16]
    c20a:	601a      	str	r2, [r3, #0]
        }

        OSTimeDly(dly,
    c20c:	6a38      	ldr	r0, [r7, #32]
    c20e:	f04f 0100 	mov.w	r1, #0
    c212:	f107 030e 	add.w	r3, r7, #14
    c216:	461a      	mov	r2, r3
    c218:	f7fd fa34 	bl	9684 <OSTimeDly>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    c21c:	e672      	b.n	bf04 <OS_StatTask+0xa0>
    c21e:	bf00      	nop

0000c220 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
    c220:	b580      	push	{r7, lr}
    c222:	b08c      	sub	sp, #48	; 0x30
    c224:	af0a      	add	r7, sp, #40	; 0x28
    c226:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
    c228:	f643 535c 	movw	r3, #15708	; 0x3d5c
    c22c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c230:	f04f 0200 	mov.w	r2, #0
    c234:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
    c236:	f244 4338 	movw	r3, #17464	; 0x4438
    c23a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c23e:	f04f 0200 	mov.w	r2, #0
    c242:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
    c244:	f244 4320 	movw	r3, #17440	; 0x4420
    c248:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c24c:	f04f 0200 	mov.w	r2, #0
    c250:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
    c252:	f244 0369 	movw	r3, #16489	; 0x4069
    c256:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c25a:	f04f 0200 	mov.w	r2, #0
    c25e:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
    c260:	f244 434c 	movw	r3, #17484	; 0x444c
    c264:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c268:	f04f 0200 	mov.w	r2, #0
    c26c:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK*)0) {
    c26e:	f64c 1338 	movw	r3, #51512	; 0xc938
    c272:	f2c0 0302 	movt	r3, #2
    c276:	681b      	ldr	r3, [r3, #0]
    c278:	2b00      	cmp	r3, #0
    c27a:	d104      	bne.n	c286 <OS_StatTaskInit+0x66>
        *p_err = OS_ERR_STK_INVALID;
    c27c:	687b      	ldr	r3, [r7, #4]
    c27e:	f646 622c 	movw	r2, #28204	; 0x6e2c
    c282:	801a      	strh	r2, [r3, #0]
        return;
    c284:	e052      	b.n	c32c <OS_StatTaskInit+0x10c>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
    c286:	f64c 1340 	movw	r3, #51520	; 0xc940
    c28a:	f2c0 0302 	movt	r3, #2
    c28e:	681a      	ldr	r2, [r3, #0]
    c290:	f64c 1348 	movw	r3, #51528	; 0xc948
    c294:	f2c0 0302 	movt	r3, #2
    c298:	681b      	ldr	r3, [r3, #0]
    c29a:	429a      	cmp	r2, r3
    c29c:	d204      	bcs.n	c2a8 <OS_StatTaskInit+0x88>
        *p_err = OS_ERR_STK_SIZE_INVALID;
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	f646 622d 	movw	r2, #28205	; 0x6e2d
    c2a4:	801a      	strh	r2, [r3, #0]
        return;
    c2a6:	e041      	b.n	c32c <OS_StatTaskInit+0x10c>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
    c2a8:	f64c 1330 	movw	r3, #51504	; 0xc930
    c2ac:	f2c0 0302 	movt	r3, #2
    c2b0:	781b      	ldrb	r3, [r3, #0]
    c2b2:	2b3e      	cmp	r3, #62	; 0x3e
    c2b4:	d904      	bls.n	c2c0 <OS_StatTaskInit+0xa0>
        *p_err = OS_ERR_PRIO_INVALID;
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	f246 2273 	movw	r2, #25203	; 0x6273
    c2bc:	801a      	strh	r2, [r3, #0]
        return;
    c2be:	e035      	b.n	c32c <OS_StatTaskInit+0x10c>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
    c2c0:	f64c 1330 	movw	r3, #51504	; 0xc930
    c2c4:	f2c0 0302 	movt	r3, #2
    c2c8:	7818      	ldrb	r0, [r3, #0]
    c2ca:	f64c 1338 	movw	r3, #51512	; 0xc938
    c2ce:	f2c0 0302 	movt	r3, #2
    c2d2:	6819      	ldr	r1, [r3, #0]
    c2d4:	f64c 133c 	movw	r3, #51516	; 0xc93c
    c2d8:	f2c0 0302 	movt	r3, #2
    c2dc:	681a      	ldr	r2, [r3, #0]
    c2de:	f64c 1340 	movw	r3, #51520	; 0xc940
    c2e2:	f2c0 0302 	movt	r3, #2
    c2e6:	681b      	ldr	r3, [r3, #0]
    c2e8:	9000      	str	r0, [sp, #0]
    c2ea:	9101      	str	r1, [sp, #4]
    c2ec:	9202      	str	r2, [sp, #8]
    c2ee:	9303      	str	r3, [sp, #12]
    c2f0:	f04f 0300 	mov.w	r3, #0
    c2f4:	9304      	str	r3, [sp, #16]
    c2f6:	f04f 0300 	mov.w	r3, #0
    c2fa:	9305      	str	r3, [sp, #20]
    c2fc:	f04f 0300 	mov.w	r3, #0
    c300:	9306      	str	r3, [sp, #24]
    c302:	f04f 0303 	mov.w	r3, #3
    c306:	9307      	str	r3, [sp, #28]
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	9308      	str	r3, [sp, #32]
    c30c:	f244 4058 	movw	r0, #17496	; 0x4458
    c310:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c314:	f64c 01d8 	movw	r1, #51416	; 0xc8d8
    c318:	f2c0 0102 	movt	r1, #2
    c31c:	f64b 6265 	movw	r2, #48741	; 0xbe65
    c320:	f2c0 0200 	movt	r2, #0
    c324:	f04f 0300 	mov.w	r3, #0
    c328:	f7fb f9a6 	bl	7678 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
    c32c:	f107 0708 	add.w	r7, r7, #8
    c330:	46bd      	mov	sp, r7
    c332:	bd80      	pop	{r7, pc}

0000c334 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
    c334:	b480      	push	{r7}
    c336:	b083      	sub	sp, #12
    c338:	af00      	add	r7, sp, #0
    void const *p_temp;


    p_temp = (void const *)&OSCfg_DataSizeRAM;
    c33a:	f64c 138c 	movw	r3, #51596	; 0xc98c
    c33e:	f2c0 0302 	movt	r3, #2
    c342:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSCfg_IdleTaskStkBasePtr;
    c344:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
    c348:	f2c0 0302 	movt	r3, #2
    c34c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IdleTaskStkLimit;
    c34e:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
    c352:	f2c0 0302 	movt	r3, #2
    c356:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IdleTaskStkSize;
    c358:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
    c35c:	f2c0 0302 	movt	r3, #2
    c360:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IdleTaskStkSizeRAM;
    c362:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
    c366:	f2c0 0302 	movt	r3, #2
    c36a:	607b      	str	r3, [r7, #4]

#if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    p_temp = (void const *)&OSCfg_IntQBasePtr;
    c36c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    c370:	f2c0 0302 	movt	r3, #2
    c374:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQSize;
    c376:	f64c 1300 	movw	r3, #51456	; 0xc900
    c37a:	f2c0 0302 	movt	r3, #2
    c37e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQSizeRAM;
    c380:	f64c 1304 	movw	r3, #51460	; 0xc904
    c384:	f2c0 0302 	movt	r3, #2
    c388:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQTaskStkBasePtr;
    c38a:	f64c 1308 	movw	r3, #51464	; 0xc908
    c38e:	f2c0 0302 	movt	r3, #2
    c392:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQTaskStkLimit;
    c394:	f64c 130c 	movw	r3, #51468	; 0xc90c
    c398:	f2c0 0302 	movt	r3, #2
    c39c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQTaskStkSize;
    c39e:	f64c 1310 	movw	r3, #51472	; 0xc910
    c3a2:	f2c0 0302 	movt	r3, #2
    c3a6:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_IntQTaskStkSizeRAM;
    c3a8:	f64c 1314 	movw	r3, #51476	; 0xc914
    c3ac:	f2c0 0302 	movt	r3, #2
    c3b0:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSCfg_ISRStkBasePtr;
    c3b2:	f64c 1318 	movw	r3, #51480	; 0xc918
    c3b6:	f2c0 0302 	movt	r3, #2
    c3ba:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_ISRStkSize;
    c3bc:	f64c 131c 	movw	r3, #51484	; 0xc91c
    c3c0:	f2c0 0302 	movt	r3, #2
    c3c4:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_ISRStkSizeRAM;
    c3c6:	f64c 1320 	movw	r3, #51488	; 0xc920
    c3ca:	f2c0 0302 	movt	r3, #2
    c3ce:	607b      	str	r3, [r7, #4]

#if (OS_MSG_EN > 0u)
    p_temp = (void const *)&OSCfg_MsgPoolSize;
    c3d0:	f64c 1324 	movw	r3, #51492	; 0xc924
    c3d4:	f2c0 0302 	movt	r3, #2
    c3d8:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_MsgPoolSizeRAM;
    c3da:	f64c 1328 	movw	r3, #51496	; 0xc928
    c3de:	f2c0 0302 	movt	r3, #2
    c3e2:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_MsgPoolBasePtr;
    c3e4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c3e8:	f2c0 0302 	movt	r3, #2
    c3ec:	607b      	str	r3, [r7, #4]
#endif

#if (OS_CFG_STAT_TASK_EN > 0u)
    p_temp = (void const *)&OSCfg_StatTaskPrio;
    c3ee:	f64c 1330 	movw	r3, #51504	; 0xc930
    c3f2:	f2c0 0302 	movt	r3, #2
    c3f6:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_StatTaskRate_Hz;
    c3f8:	f64c 1334 	movw	r3, #51508	; 0xc934
    c3fc:	f2c0 0302 	movt	r3, #2
    c400:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_StatTaskStkBasePtr;
    c402:	f64c 1338 	movw	r3, #51512	; 0xc938
    c406:	f2c0 0302 	movt	r3, #2
    c40a:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_StatTaskStkLimit;
    c40c:	f64c 133c 	movw	r3, #51516	; 0xc93c
    c410:	f2c0 0302 	movt	r3, #2
    c414:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_StatTaskStkSize;
    c416:	f64c 1340 	movw	r3, #51520	; 0xc940
    c41a:	f2c0 0302 	movt	r3, #2
    c41e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_StatTaskStkSizeRAM;
    c420:	f64c 1344 	movw	r3, #51524	; 0xc944
    c424:	f2c0 0302 	movt	r3, #2
    c428:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSCfg_StkSizeMin;
    c42a:	f64c 1348 	movw	r3, #51528	; 0xc948
    c42e:	f2c0 0302 	movt	r3, #2
    c432:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSCfg_TickRate_Hz;
    c434:	f64c 134c 	movw	r3, #51532	; 0xc94c
    c438:	f2c0 0302 	movt	r3, #2
    c43c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickTaskPrio;
    c43e:	f64c 1350 	movw	r3, #51536	; 0xc950
    c442:	f2c0 0302 	movt	r3, #2
    c446:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickTaskStkBasePtr;
    c448:	f64c 1354 	movw	r3, #51540	; 0xc954
    c44c:	f2c0 0302 	movt	r3, #2
    c450:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickTaskStkLimit;
    c452:	f64c 1358 	movw	r3, #51544	; 0xc958
    c456:	f2c0 0302 	movt	r3, #2
    c45a:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickTaskStkSize;
    c45c:	f64c 135c 	movw	r3, #51548	; 0xc95c
    c460:	f2c0 0302 	movt	r3, #2
    c464:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickTaskStkSizeRAM;
    c466:	f64c 1360 	movw	r3, #51552	; 0xc960
    c46a:	f2c0 0302 	movt	r3, #2
    c46e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickWheelSize;
    c470:	f64c 1364 	movw	r3, #51556	; 0xc964
    c474:	f2c0 0302 	movt	r3, #2
    c478:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TickWheelSizeRAM;
    c47a:	f64c 1368 	movw	r3, #51560	; 0xc968
    c47e:	f2c0 0302 	movt	r3, #2
    c482:	607b      	str	r3, [r7, #4]

#if (OS_CFG_TMR_EN > 0u)
    p_temp = (void const *)&OSCfg_TmrTaskPrio;
    c484:	f64c 136c 	movw	r3, #51564	; 0xc96c
    c488:	f2c0 0302 	movt	r3, #2
    c48c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrTaskRate_Hz;
    c48e:	f64c 1370 	movw	r3, #51568	; 0xc970
    c492:	f2c0 0302 	movt	r3, #2
    c496:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrTaskStkBasePtr;
    c498:	f64c 1374 	movw	r3, #51572	; 0xc974
    c49c:	f2c0 0302 	movt	r3, #2
    c4a0:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrTaskStkLimit;
    c4a2:	f64c 1378 	movw	r3, #51576	; 0xc978
    c4a6:	f2c0 0302 	movt	r3, #2
    c4aa:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrTaskStkSize;
    c4ac:	f64c 137c 	movw	r3, #51580	; 0xc97c
    c4b0:	f2c0 0302 	movt	r3, #2
    c4b4:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrTaskStkSizeRAM;
    c4b6:	f64c 1380 	movw	r3, #51584	; 0xc980
    c4ba:	f2c0 0302 	movt	r3, #2
    c4be:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrWheelSize;
    c4c0:	f64c 1384 	movw	r3, #51588	; 0xc984
    c4c4:	f2c0 0302 	movt	r3, #2
    c4c8:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSCfg_TmrWheelSizeRAM;
    c4ca:	f64c 1388 	movw	r3, #51592	; 0xc988
    c4ce:	f2c0 0302 	movt	r3, #2
    c4d2:	607b      	str	r3, [r7, #4]
#endif
    p_temp = p_temp;
}
    c4d4:	f107 070c 	add.w	r7, r7, #12
    c4d8:	46bd      	mov	sp, r7
    c4da:	bc80      	pop	{r7}
    c4dc:	4770      	bx	lr
    c4de:	bf00      	nop

0000c4e0 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX    *p_mutex,
                     CPU_CHAR    *p_name,
                     OS_ERR      *p_err)
{
    c4e0:	b580      	push	{r7, lr}
    c4e2:	b086      	sub	sp, #24
    c4e4:	af00      	add	r7, sp, #0
    c4e6:	60f8      	str	r0, [r7, #12]
    c4e8:	60b9      	str	r1, [r7, #8]
    c4ea:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
    c4ec:	f04f 0300 	mov.w	r3, #0
    c4f0:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
    c4f2:	f244 1381 	movw	r3, #16769	; 0x4181
    c4f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4fa:	781b      	ldrb	r3, [r3, #0]
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	d004      	beq.n	c50a <OSMutexCreate+0x2a>
        *p_err = OS_ERR_CREATE_ISR;
    c500:	687b      	ldr	r3, [r7, #4]
    c502:	f642 62e1 	movw	r2, #12001	; 0x2ee1
    c506:	801a      	strh	r2, [r3, #0]
        return;
    c508:	e046      	b.n	c598 <OSMutexCreate+0xb8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
    c50a:	68fb      	ldr	r3, [r7, #12]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d104      	bne.n	c51a <OSMutexCreate+0x3a>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    c516:	801a      	strh	r2, [r3, #0]
        return;
    c518:	e03e      	b.n	c598 <OSMutexCreate+0xb8>
    }
#endif

    CPU_CRITICAL_ENTER();
    c51a:	f00b fc63 	bl	17de4 <CPU_SR_Save>
    c51e:	6178      	str	r0, [r7, #20]
    c520:	f7f5 f9ca 	bl	18b8 <CPU_IntDisMeasStart>
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
    c524:	68fa      	ldr	r2, [r7, #12]
    c526:	f245 534d 	movw	r3, #21837	; 0x554d
    c52a:	f6c5 0354 	movt	r3, #22612	; 0x5854
    c52e:	6013      	str	r3, [r2, #0]
    p_mutex->NamePtr           =  p_name;
    c530:	68fb      	ldr	r3, [r7, #12]
    c532:	68ba      	ldr	r2, [r7, #8]
    c534:	605a      	str	r2, [r3, #4]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
    c536:	68fb      	ldr	r3, [r7, #12]
    c538:	f04f 0200 	mov.w	r2, #0
    c53c:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
    c53e:	68fb      	ldr	r3, [r7, #12]
    c540:	f04f 0200 	mov.w	r2, #0
    c544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p_mutex->TS                = (CPU_TS        )0;
    c548:	68fb      	ldr	r3, [r7, #12]
    c54a:	f04f 0200 	mov.w	r2, #0
    c54e:	629a      	str	r2, [r3, #40]	; 0x28
    p_mutex->OwnerOriginalPrio =  OS_CFG_PRIO_MAX;
    c550:	68fb      	ldr	r3, [r7, #12]
    c552:	f04f 0240 	mov.w	r2, #64	; 0x40
    c556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
    c55a:	68fb      	ldr	r3, [r7, #12]
    c55c:	f103 0308 	add.w	r3, r3, #8
    c560:	4618      	mov	r0, r3
    c562:	f002 fcdb 	bl	ef1c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
    c566:	68f8      	ldr	r0, [r7, #12]
    c568:	f000 fe6e 	bl	d248 <OS_MutexDbgListAdd>
#endif
    OSMutexQty++;
    c56c:	f244 4350 	movw	r3, #17488	; 0x4450
    c570:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c574:	881b      	ldrh	r3, [r3, #0]
    c576:	f103 0301 	add.w	r3, r3, #1
    c57a:	b29a      	uxth	r2, r3
    c57c:	f244 4350 	movw	r3, #17488	; 0x4450
    c580:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c584:	801a      	strh	r2, [r3, #0]

    CPU_CRITICAL_EXIT();
    c586:	f7f5 f9c3 	bl	1910 <CPU_IntDisMeasStop>
    c58a:	6978      	ldr	r0, [r7, #20]
    c58c:	f00b fc2e 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    c590:	687b      	ldr	r3, [r7, #4]
    c592:	f04f 0200 	mov.w	r2, #0
    c596:	801a      	strh	r2, [r3, #0]
}
    c598:	f107 0718 	add.w	r7, r7, #24
    c59c:	46bd      	mov	sp, r7
    c59e:	bd80      	pop	{r7, pc}

0000c5a0 <OSMutexDel>:

#if OS_CFG_MUTEX_DEL_EN > 0u
OS_OBJ_QTY  OSMutexDel (OS_MUTEX  *p_mutex,
                        OS_OPT     opt,
                        OS_ERR    *p_err)
{
    c5a0:	b580      	push	{r7, lr}
    c5a2:	b08c      	sub	sp, #48	; 0x30
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	60f8      	str	r0, [r7, #12]
    c5a8:	460b      	mov	r3, r1
    c5aa:	607a      	str	r2, [r7, #4]
    c5ac:	817b      	strh	r3, [r7, #10]
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    OS_TCB        *p_tcb_owner;
    CPU_TS         ts;
    CPU_SR_ALLOC();
    c5ae:	f04f 0300 	mov.w	r3, #0
    c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {                   /* Not allowed to delete a mutex from an ISR         */
    c5b4:	f244 1381 	movw	r3, #16769	; 0x4181
    c5b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c5bc:	781b      	ldrb	r3, [r3, #0]
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d006      	beq.n	c5d0 <OSMutexDel+0x30>
        *p_err = OS_ERR_DEL_ISR;
    c5c2:	687b      	ldr	r3, [r7, #4]
    c5c4:	f243 22c9 	movw	r2, #13001	; 0x32c9
    c5c8:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    c5ca:	f04f 0300 	mov.w	r3, #0
    c5ce:	e1e0      	b.n	c992 <OSMutexDel+0x3f2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                              /* Validate pointer to mutex                         */
    c5d0:	68fb      	ldr	r3, [r7, #12]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d106      	bne.n	c5e4 <OSMutexDel+0x44>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    c5dc:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    c5de:	f04f 0300 	mov.w	r3, #0
    c5e2:	e1d6      	b.n	c992 <OSMutexDel+0x3f2>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                    /* Make sure mutex was created                       */
    c5e4:	68fb      	ldr	r3, [r7, #12]
    c5e6:	681a      	ldr	r2, [r3, #0]
    c5e8:	f245 534d 	movw	r3, #21837	; 0x554d
    c5ec:	f6c5 0354 	movt	r3, #22612	; 0x5854
    c5f0:	429a      	cmp	r2, r3
    c5f2:	d006      	beq.n	c602 <OSMutexDel+0x62>
        *p_err = OS_ERR_OBJ_TYPE;
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    c5fa:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    c5fc:	f04f 0300 	mov.w	r3, #0
    c600:	e1c7      	b.n	c992 <OSMutexDel+0x3f2>
    }
#endif

    OS_CRITICAL_ENTER();
    c602:	f00b fbef 	bl	17de4 <CPU_SR_Save>
    c606:	62b8      	str	r0, [r7, #40]	; 0x28
    c608:	f7f5 f956 	bl	18b8 <CPU_IntDisMeasStart>
    c60c:	f643 5350 	movw	r3, #15696	; 0x3d50
    c610:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	f103 0301 	add.w	r3, r3, #1
    c61a:	b2da      	uxtb	r2, r3
    c61c:	f643 5350 	movw	r3, #15696	; 0x3d50
    c620:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c624:	701a      	strb	r2, [r3, #0]
    c626:	f643 5350 	movw	r3, #15696	; 0x3d50
    c62a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	2b01      	cmp	r3, #1
    c632:	d101      	bne.n	c638 <OSMutexDel+0x98>
    c634:	f003 f8de 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    c638:	f7f5 f96a 	bl	1910 <CPU_IntDisMeasStop>
    c63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c63e:	f00b fbd5 	bl	17dec <CPU_SR_Restore>
    p_pend_list = &p_mutex->PendList;
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	f103 0308 	add.w	r3, r3, #8
    c648:	627b      	str	r3, [r7, #36]	; 0x24
    cnt         = p_pend_list->NbrEntries;
    c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c64c:	891b      	ldrh	r3, [r3, #8]
    c64e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    nbr_tasks   = cnt;
    c650:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    c652:	847b      	strh	r3, [r7, #34]	; 0x22
    switch (opt) {
    c654:	897b      	ldrh	r3, [r7, #10]
    c656:	2b00      	cmp	r3, #0
    c658:	d003      	beq.n	c662 <OSMutexDel+0xc2>
    c65a:	2b01      	cmp	r3, #1
    c65c:	f000 808b 	beq.w	c776 <OSMutexDel+0x1d6>
    c660:	e15c      	b.n	c91c <OSMutexDel+0x37c>
        case OS_OPT_DEL_NO_PEND:                                 /* Delete mutex only if no task waiting              */
             if (nbr_tasks == (OS_OBJ_QTY)0) {
    c662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    c664:	2b00      	cmp	r3, #0
    c666:	d14c      	bne.n	c702 <OSMutexDel+0x162>
#if OS_CFG_DBG_EN > 0u
                 OS_MutexDbgListRemove(p_mutex);
    c668:	68f8      	ldr	r0, [r7, #12]
    c66a:	f000 fe21 	bl	d2b0 <OS_MutexDbgListRemove>
#endif
                 OSMutexQty--;
    c66e:	f244 4350 	movw	r3, #17488	; 0x4450
    c672:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c676:	881b      	ldrh	r3, [r3, #0]
    c678:	f103 33ff 	add.w	r3, r3, #4294967295
    c67c:	b29a      	uxth	r2, r3
    c67e:	f244 4350 	movw	r3, #17488	; 0x4450
    c682:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c686:	801a      	strh	r2, [r3, #0]
                 OS_MutexClr(p_mutex);
    c688:	68f8      	ldr	r0, [r7, #12]
    c68a:	f000 fdb1 	bl	d1f0 <OS_MutexClr>
                 OS_CRITICAL_EXIT();
    c68e:	f00b fba9 	bl	17de4 <CPU_SR_Save>
    c692:	62b8      	str	r0, [r7, #40]	; 0x28
    c694:	f7f5 f910 	bl	18b8 <CPU_IntDisMeasStart>
    c698:	f643 5350 	movw	r3, #15696	; 0x3d50
    c69c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c6a0:	781b      	ldrb	r3, [r3, #0]
    c6a2:	f103 33ff 	add.w	r3, r3, #4294967295
    c6a6:	b2da      	uxtb	r2, r3
    c6a8:	f643 5350 	movw	r3, #15696	; 0x3d50
    c6ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c6b0:	701a      	strb	r2, [r3, #0]
    c6b2:	f643 5350 	movw	r3, #15696	; 0x3d50
    c6b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c6ba:	781b      	ldrb	r3, [r3, #0]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d116      	bne.n	c6ee <OSMutexDel+0x14e>
    c6c0:	f003 f8aa 	bl	f818 <OS_SchedLockTimeMeasStop>
    c6c4:	f244 533c 	movw	r3, #17724	; 0x453c
    c6c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c6cc:	881b      	ldrh	r3, [r3, #0]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d007      	beq.n	c6e2 <OSMutexDel+0x142>
    c6d2:	f7f5 f91d 	bl	1910 <CPU_IntDisMeasStop>
    c6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c6d8:	f00b fb88 	bl	17dec <CPU_SR_Restore>
    c6dc:	f003 f850 	bl	f780 <OS_Sched0>
    c6e0:	e00a      	b.n	c6f8 <OSMutexDel+0x158>
    c6e2:	f7f5 f915 	bl	1910 <CPU_IntDisMeasStop>
    c6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c6e8:	f00b fb80 	bl	17dec <CPU_SR_Restore>
    c6ec:	e004      	b.n	c6f8 <OSMutexDel+0x158>
    c6ee:	f7f5 f90f 	bl	1910 <CPU_IntDisMeasStop>
    c6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c6f4:	f00b fb7a 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    c6f8:	687b      	ldr	r3, [r7, #4]
    c6fa:	f04f 0200 	mov.w	r2, #0
    c6fe:	801a      	strh	r2, [r3, #0]
             } else {
                 OS_CRITICAL_EXIT();
                 *p_err = OS_ERR_TASK_WAITING;
             }
             break;
    c700:	e146      	b.n	c990 <OSMutexDel+0x3f0>
                 OSMutexQty--;
                 OS_MutexClr(p_mutex);
                 OS_CRITICAL_EXIT();
                 *p_err = OS_ERR_NONE;
             } else {
                 OS_CRITICAL_EXIT();
    c702:	f00b fb6f 	bl	17de4 <CPU_SR_Save>
    c706:	62b8      	str	r0, [r7, #40]	; 0x28
    c708:	f7f5 f8d6 	bl	18b8 <CPU_IntDisMeasStart>
    c70c:	f643 5350 	movw	r3, #15696	; 0x3d50
    c710:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c714:	781b      	ldrb	r3, [r3, #0]
    c716:	f103 33ff 	add.w	r3, r3, #4294967295
    c71a:	b2da      	uxtb	r2, r3
    c71c:	f643 5350 	movw	r3, #15696	; 0x3d50
    c720:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c724:	701a      	strb	r2, [r3, #0]
    c726:	f643 5350 	movw	r3, #15696	; 0x3d50
    c72a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	2b00      	cmp	r3, #0
    c732:	d116      	bne.n	c762 <OSMutexDel+0x1c2>
    c734:	f003 f870 	bl	f818 <OS_SchedLockTimeMeasStop>
    c738:	f244 533c 	movw	r3, #17724	; 0x453c
    c73c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c740:	881b      	ldrh	r3, [r3, #0]
    c742:	2b00      	cmp	r3, #0
    c744:	d007      	beq.n	c756 <OSMutexDel+0x1b6>
    c746:	f7f5 f8e3 	bl	1910 <CPU_IntDisMeasStop>
    c74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c74c:	f00b fb4e 	bl	17dec <CPU_SR_Restore>
    c750:	f003 f816 	bl	f780 <OS_Sched0>
    c754:	e00a      	b.n	c76c <OSMutexDel+0x1cc>
    c756:	f7f5 f8db 	bl	1910 <CPU_IntDisMeasStop>
    c75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c75c:	f00b fb46 	bl	17dec <CPU_SR_Restore>
    c760:	e004      	b.n	c76c <OSMutexDel+0x1cc>
    c762:	f7f5 f8d5 	bl	1910 <CPU_IntDisMeasStop>
    c766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c768:	f00b fb40 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_TASK_WAITING;
    c76c:	687b      	ldr	r3, [r7, #4]
    c76e:	f247 125e 	movw	r2, #29022	; 0x715e
    c772:	801a      	strh	r2, [r3, #0]
             }
             break;
    c774:	e10c      	b.n	c990 <OSMutexDel+0x3f0>

        case OS_OPT_DEL_ALWAYS:                                            /* Always delete the mutex                 */
             p_tcb_owner = p_mutex->OwnerTCBPtr;                           /* Did we had to change the prio of owner? */
    c776:	68fb      	ldr	r3, [r7, #12]
    c778:	6a1b      	ldr	r3, [r3, #32]
    c77a:	61fb      	str	r3, [r7, #28]
             if ((p_tcb_owner       != (OS_TCB *)0) &&
    c77c:	69fb      	ldr	r3, [r7, #28]
    c77e:	2b00      	cmp	r3, #0
    c780:	d07c      	beq.n	c87c <OSMutexDel+0x2dc>
                 (p_tcb_owner->Prio !=  p_mutex->OwnerOriginalPrio)) {
    c782:	69fb      	ldr	r3, [r7, #28]
    c784:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    c788:	68fb      	ldr	r3, [r7, #12]
    c78a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
             }
             break;

        case OS_OPT_DEL_ALWAYS:                                            /* Always delete the mutex                 */
             p_tcb_owner = p_mutex->OwnerTCBPtr;                           /* Did we had to change the prio of owner? */
             if ((p_tcb_owner       != (OS_TCB *)0) &&
    c78e:	429a      	cmp	r2, r3
    c790:	d074      	beq.n	c87c <OSMutexDel+0x2dc>
                 (p_tcb_owner->Prio !=  p_mutex->OwnerOriginalPrio)) {
                 switch (p_tcb_owner->TaskState) {                         /* yes                                     */
    c792:	69fb      	ldr	r3, [r7, #28]
    c794:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    c798:	2b07      	cmp	r3, #7
    c79a:	d833      	bhi.n	c804 <OSMutexDel+0x264>
    c79c:	f04f 524c 	mov.w	r2, #855638016	; 0x33000000
    c7a0:	fa02 f203 	lsl.w	r2, r2, r3
    c7a4:	2a00      	cmp	r2, #0
    c7a6:	db25      	blt.n	c7f4 <OSMutexDel+0x254>
    c7a8:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
    c7ac:	fa02 f203 	lsl.w	r2, r2, r3
    c7b0:	2a00      	cmp	r2, #0
    c7b2:	db18      	blt.n	c7e6 <OSMutexDel+0x246>
    c7b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c7b8:	fa02 f303 	lsl.w	r3, r2, r3
    c7bc:	2b00      	cmp	r3, #0
    c7be:	da21      	bge.n	c804 <OSMutexDel+0x264>
                     case OS_TASK_STATE_RDY:
                          OS_RdyListRemove(p_tcb_owner);
    c7c0:	69f8      	ldr	r0, [r7, #28]
    c7c2:	f002 ff79 	bl	f6b8 <OS_RdyListRemove>
                          p_tcb_owner->Prio = p_mutex->OwnerOriginalPrio;  /* Lower owner's prio back                 */
    c7c6:	68fb      	ldr	r3, [r7, #12]
    c7c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    c7cc:	69fb      	ldr	r3, [r7, #28]
    c7ce:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
                          OS_PrioInsert(p_tcb_owner->Prio);
    c7d2:	69fb      	ldr	r3, [r7, #28]
    c7d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    c7d8:	4618      	mov	r0, r3
    c7da:	f7f9 fcdf 	bl	619c <OS_PrioInsert>
                          OS_RdyListInsertTail(p_tcb_owner);               /* Insert owner in ready list at new prio  */
    c7de:	69f8      	ldr	r0, [r7, #28]
    c7e0:	f002 fed6 	bl	f590 <OS_RdyListInsertTail>
                          break;
    c7e4:	e04a      	b.n	c87c <OSMutexDel+0x2dc>

                     case OS_TASK_STATE_DLY:
                     case OS_TASK_STATE_SUSPENDED:
                     case OS_TASK_STATE_DLY_SUSPENDED:
                          p_tcb_owner->Prio = p_mutex->OwnerOriginalPrio;  /* Not in any pend list, change the prio   */
    c7e6:	68fb      	ldr	r3, [r7, #12]
    c7e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    c7ec:	69fb      	ldr	r3, [r7, #28]
    c7ee:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
                          break;
    c7f2:	e043      	b.n	c87c <OSMutexDel+0x2dc>
                     case OS_TASK_STATE_PEND:
                     case OS_TASK_STATE_PEND_TIMEOUT:
                     case OS_TASK_STATE_PEND_SUSPENDED:
                     case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                          OS_PendListChangePrio(p_tcb_owner,               /* Owner is pending on another object      */
                                                p_mutex->OwnerOriginalPrio);
    c7f4:	68fb      	ldr	r3, [r7, #12]

                     case OS_TASK_STATE_PEND:
                     case OS_TASK_STATE_PEND_TIMEOUT:
                     case OS_TASK_STATE_PEND_SUSPENDED:
                     case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                          OS_PendListChangePrio(p_tcb_owner,               /* Owner is pending on another object      */
    c7f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c7fa:	69f8      	ldr	r0, [r7, #28]
    c7fc:	4619      	mov	r1, r3
    c7fe:	f002 fb59 	bl	eeb4 <OS_PendListChangePrio>
                                                p_mutex->OwnerOriginalPrio);
                          break;
    c802:	e03b      	b.n	c87c <OSMutexDel+0x2dc>

                     default:
                          OS_CRITICAL_EXIT();
    c804:	f00b faee 	bl	17de4 <CPU_SR_Save>
    c808:	62b8      	str	r0, [r7, #40]	; 0x28
    c80a:	f7f5 f855 	bl	18b8 <CPU_IntDisMeasStart>
    c80e:	f643 5350 	movw	r3, #15696	; 0x3d50
    c812:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c816:	781b      	ldrb	r3, [r3, #0]
    c818:	f103 33ff 	add.w	r3, r3, #4294967295
    c81c:	b2da      	uxtb	r2, r3
    c81e:	f643 5350 	movw	r3, #15696	; 0x3d50
    c822:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c826:	701a      	strb	r2, [r3, #0]
    c828:	f643 5350 	movw	r3, #15696	; 0x3d50
    c82c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c830:	781b      	ldrb	r3, [r3, #0]
    c832:	2b00      	cmp	r3, #0
    c834:	d116      	bne.n	c864 <OSMutexDel+0x2c4>
    c836:	f002 ffef 	bl	f818 <OS_SchedLockTimeMeasStop>
    c83a:	f244 533c 	movw	r3, #17724	; 0x453c
    c83e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c842:	881b      	ldrh	r3, [r3, #0]
    c844:	2b00      	cmp	r3, #0
    c846:	d007      	beq.n	c858 <OSMutexDel+0x2b8>
    c848:	f7f5 f862 	bl	1910 <CPU_IntDisMeasStop>
    c84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c84e:	f00b facd 	bl	17dec <CPU_SR_Restore>
    c852:	f002 ff95 	bl	f780 <OS_Sched0>
    c856:	e00a      	b.n	c86e <OSMutexDel+0x2ce>
    c858:	f7f5 f85a 	bl	1910 <CPU_IntDisMeasStop>
    c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c85e:	f00b fac5 	bl	17dec <CPU_SR_Restore>
    c862:	e004      	b.n	c86e <OSMutexDel+0x2ce>
    c864:	f7f5 f854 	bl	1910 <CPU_IntDisMeasStop>
    c868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c86a:	f00b fabf 	bl	17dec <CPU_SR_Restore>
                          *p_err = OS_ERR_STATE_INVALID;
    c86e:	687b      	ldr	r3, [r7, #4]
    c870:	f646 622a 	movw	r2, #28202	; 0x6e2a
    c874:	801a      	strh	r2, [r3, #0]
                          return ((OS_OBJ_QTY)0);
    c876:	f04f 0300 	mov.w	r3, #0
    c87a:	e08a      	b.n	c992 <OSMutexDel+0x3f2>
                 }
             }

             ts = OS_TS_GET();                                             /* Get timestamp                           */
    c87c:	f7f6 fd4e 	bl	331c <CPU_TS_TmrRd>
    c880:	61b8      	str	r0, [r7, #24]
             while (cnt > 0u) {                                            /* Remove all tasks from the pend list     */
    c882:	e00e      	b.n	c8a2 <OSMutexDel+0x302>
                 p_pend_data = p_pend_list->HeadPtr;
    c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c886:	681b      	ldr	r3, [r3, #0]
    c888:	617b      	str	r3, [r7, #20]
                 p_tcb       = p_pend_data->TCBPtr;
    c88a:	697b      	ldr	r3, [r7, #20]
    c88c:	689b      	ldr	r3, [r3, #8]
    c88e:	613b      	str	r3, [r7, #16]
                 OS_PendObjDel((OS_PEND_OBJ *)((void *)p_mutex),
    c890:	68f8      	ldr	r0, [r7, #12]
    c892:	6939      	ldr	r1, [r7, #16]
    c894:	69ba      	ldr	r2, [r7, #24]
    c896:	f002 fc7b 	bl	f190 <OS_PendObjDel>
                               p_tcb,
                               ts);
                 cnt--;
    c89a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    c89c:	f103 33ff 	add.w	r3, r3, #4294967295
    c8a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          return ((OS_OBJ_QTY)0);
                 }
             }

             ts = OS_TS_GET();                                             /* Get timestamp                           */
             while (cnt > 0u) {                                            /* Remove all tasks from the pend list     */
    c8a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d1ed      	bne.n	c884 <OSMutexDel+0x2e4>
                               p_tcb,
                               ts);
                 cnt--;
             }
#if OS_CFG_DBG_EN > 0u
             OS_MutexDbgListRemove(p_mutex);
    c8a8:	68f8      	ldr	r0, [r7, #12]
    c8aa:	f000 fd01 	bl	d2b0 <OS_MutexDbgListRemove>
#endif
             OSMutexQty--;
    c8ae:	f244 4350 	movw	r3, #17488	; 0x4450
    c8b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c8b6:	881b      	ldrh	r3, [r3, #0]
    c8b8:	f103 33ff 	add.w	r3, r3, #4294967295
    c8bc:	b29a      	uxth	r2, r3
    c8be:	f244 4350 	movw	r3, #17488	; 0x4450
    c8c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c8c6:	801a      	strh	r2, [r3, #0]
             OS_MutexClr(p_mutex);
    c8c8:	68f8      	ldr	r0, [r7, #12]
    c8ca:	f000 fc91 	bl	d1f0 <OS_MutexClr>
             OS_CRITICAL_EXIT_NO_SCHED();
    c8ce:	f00b fa89 	bl	17de4 <CPU_SR_Save>
    c8d2:	62b8      	str	r0, [r7, #40]	; 0x28
    c8d4:	f7f4 fff0 	bl	18b8 <CPU_IntDisMeasStart>
    c8d8:	f643 5350 	movw	r3, #15696	; 0x3d50
    c8dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c8e0:	781b      	ldrb	r3, [r3, #0]
    c8e2:	f103 33ff 	add.w	r3, r3, #4294967295
    c8e6:	b2da      	uxtb	r2, r3
    c8e8:	f643 5350 	movw	r3, #15696	; 0x3d50
    c8ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c8f0:	701a      	strb	r2, [r3, #0]
    c8f2:	f643 5350 	movw	r3, #15696	; 0x3d50
    c8f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c8fa:	781b      	ldrb	r3, [r3, #0]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d101      	bne.n	c904 <OSMutexDel+0x364>
    c900:	f002 ff8a 	bl	f818 <OS_SchedLockTimeMeasStop>
    c904:	f7f5 f804 	bl	1910 <CPU_IntDisMeasStop>
    c908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c90a:	f00b fa6f 	bl	17dec <CPU_SR_Restore>
             OSSched();                                                    /* Find highest priority task ready to run */
    c90e:	f001 fe87 	bl	e620 <OSSched>
             *p_err = OS_ERR_NONE;
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	f04f 0200 	mov.w	r2, #0
    c918:	801a      	strh	r2, [r3, #0]
             break;
    c91a:	e039      	b.n	c990 <OSMutexDel+0x3f0>

        default:
             OS_CRITICAL_EXIT();
    c91c:	f00b fa62 	bl	17de4 <CPU_SR_Save>
    c920:	62b8      	str	r0, [r7, #40]	; 0x28
    c922:	f7f4 ffc9 	bl	18b8 <CPU_IntDisMeasStart>
    c926:	f643 5350 	movw	r3, #15696	; 0x3d50
    c92a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c92e:	781b      	ldrb	r3, [r3, #0]
    c930:	f103 33ff 	add.w	r3, r3, #4294967295
    c934:	b2da      	uxtb	r2, r3
    c936:	f643 5350 	movw	r3, #15696	; 0x3d50
    c93a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c93e:	701a      	strb	r2, [r3, #0]
    c940:	f643 5350 	movw	r3, #15696	; 0x3d50
    c944:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d116      	bne.n	c97c <OSMutexDel+0x3dc>
    c94e:	f002 ff63 	bl	f818 <OS_SchedLockTimeMeasStop>
    c952:	f244 533c 	movw	r3, #17724	; 0x453c
    c956:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c95a:	881b      	ldrh	r3, [r3, #0]
    c95c:	2b00      	cmp	r3, #0
    c95e:	d007      	beq.n	c970 <OSMutexDel+0x3d0>
    c960:	f7f4 ffd6 	bl	1910 <CPU_IntDisMeasStop>
    c964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c966:	f00b fa41 	bl	17dec <CPU_SR_Restore>
    c96a:	f002 ff09 	bl	f780 <OS_Sched0>
    c96e:	e00a      	b.n	c986 <OSMutexDel+0x3e6>
    c970:	f7f4 ffce 	bl	1910 <CPU_IntDisMeasStop>
    c974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c976:	f00b fa39 	bl	17dec <CPU_SR_Restore>
    c97a:	e004      	b.n	c986 <OSMutexDel+0x3e6>
    c97c:	f7f4 ffc8 	bl	1910 <CPU_IntDisMeasStop>
    c980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c982:	f00b fa33 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    c986:	687b      	ldr	r3, [r7, #4]
    c988:	f645 6225 	movw	r2, #24101	; 0x5e25
    c98c:	801a      	strh	r2, [r3, #0]
             break;
    c98e:	bf00      	nop
    }
    return (nbr_tasks);
    c990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
    c992:	4618      	mov	r0, r3
    c994:	f107 0730 	add.w	r7, r7, #48	; 0x30
    c998:	46bd      	mov	sp, r7
    c99a:	bd80      	pop	{r7, pc}

0000c99c <OSMutexPend>:
void  OSMutexPend (OS_MUTEX   *p_mutex,
                   OS_TICK     timeout,
                   OS_OPT      opt,
                   CPU_TS     *p_ts,
                   OS_ERR     *p_err)
{
    c99c:	b580      	push	{r7, lr}
    c99e:	b08e      	sub	sp, #56	; 0x38
    c9a0:	af00      	add	r7, sp, #0
    c9a2:	60f8      	str	r0, [r7, #12]
    c9a4:	60b9      	str	r1, [r7, #8]
    c9a6:	603b      	str	r3, [r7, #0]
    c9a8:	4613      	mov	r3, r2
    c9aa:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
    c9ac:	f04f 0300 	mov.w	r3, #0
    c9b0:	637b      	str	r3, [r7, #52]	; 0x34
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    c9b2:	f244 1381 	movw	r3, #16769	; 0x4181
    c9b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c9ba:	781b      	ldrb	r3, [r3, #0]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d004      	beq.n	c9ca <OSMutexPend+0x2e>
        *p_err = OS_ERR_PEND_ISR;
    c9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9c2:	f246 12ae 	movw	r2, #25006	; 0x61ae
    c9c6:	801a      	strh	r2, [r3, #0]
        return;
    c9c8:	e1ce      	b.n	cd68 <OSMutexPend+0x3cc>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
    c9ca:	68fb      	ldr	r3, [r7, #12]
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d104      	bne.n	c9da <OSMutexPend+0x3e>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    c9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9d2:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    c9d6:	801a      	strh	r2, [r3, #0]
        return;
    c9d8:	e1c6      	b.n	cd68 <OSMutexPend+0x3cc>
    }
    switch (opt) {
    c9da:	88fb      	ldrh	r3, [r7, #6]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d007      	beq.n	c9f0 <OSMutexPend+0x54>
    c9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c9e4:	d004      	beq.n	c9f0 <OSMutexPend+0x54>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    c9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9e8:	f645 6225 	movw	r2, #24101	; 0x5e25
    c9ec:	801a      	strh	r2, [r3, #0]
             return;
    c9ee:	e1bb      	b.n	cd68 <OSMutexPend+0x3cc>
        return;
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
    c9f0:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
    c9f2:	68fb      	ldr	r3, [r7, #12]
    c9f4:	681a      	ldr	r2, [r3, #0]
    c9f6:	f245 534d 	movw	r3, #21837	; 0x554d
    c9fa:	f6c5 0354 	movt	r3, #22612	; 0x5854
    c9fe:	429a      	cmp	r2, r3
    ca00:	d004      	beq.n	ca0c <OSMutexPend+0x70>
        *p_err = OS_ERR_OBJ_TYPE;
    ca02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ca04:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    ca08:	801a      	strh	r2, [r3, #0]
        return;
    ca0a:	e1ad      	b.n	cd68 <OSMutexPend+0x3cc>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
    ca0c:	683b      	ldr	r3, [r7, #0]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d003      	beq.n	ca1a <OSMutexPend+0x7e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
    ca12:	683b      	ldr	r3, [r7, #0]
    ca14:	f04f 0200 	mov.w	r2, #0
    ca18:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
    ca1a:	f00b f9e3 	bl	17de4 <CPU_SR_Save>
    ca1e:	6378      	str	r0, [r7, #52]	; 0x34
    ca20:	f7f4 ff4a 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
    ca24:	68fb      	ldr	r3, [r7, #12]
    ca26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	d126      	bne.n	ca7c <OSMutexPend+0xe0>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
    ca2e:	f244 135c 	movw	r3, #16732	; 0x415c
    ca32:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ca36:	681a      	ldr	r2, [r3, #0]
    ca38:	68fb      	ldr	r3, [r7, #12]
    ca3a:	621a      	str	r2, [r3, #32]
        p_mutex->OwnerOriginalPrio =  OSTCBCurPtr->Prio;
    ca3c:	f244 135c 	movw	r3, #16732	; 0x415c
    ca40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ca44:	681b      	ldr	r3, [r3, #0]
    ca46:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    ca4a:	68fb      	ldr	r3, [r7, #12]
    ca4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
    ca50:	68fb      	ldr	r3, [r7, #12]
    ca52:	f04f 0201 	mov.w	r2, #1
    ca56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if (p_ts != (CPU_TS *)0) {
    ca5a:	683b      	ldr	r3, [r7, #0]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d003      	beq.n	ca68 <OSMutexPend+0xcc>
           *p_ts                   = p_mutex->TS;
    ca60:	68fb      	ldr	r3, [r7, #12]
    ca62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ca64:	683b      	ldr	r3, [r7, #0]
    ca66:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
    ca68:	f7f4 ff52 	bl	1910 <CPU_IntDisMeasStop>
    ca6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    ca6e:	f00b f9bd 	bl	17dec <CPU_SR_Restore>
        *p_err                     =  OS_ERR_NONE;
    ca72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ca74:	f04f 0200 	mov.w	r2, #0
    ca78:	801a      	strh	r2, [r3, #0]
        return;
    ca7a:	e175      	b.n	cd68 <OSMutexPend+0x3cc>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	6a1a      	ldr	r2, [r3, #32]
    ca80:	f244 135c 	movw	r3, #16732	; 0x415c
    ca84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ca88:	681b      	ldr	r3, [r3, #0]
    ca8a:	429a      	cmp	r2, r3
    ca8c:	d119      	bne.n	cac2 <OSMutexPend+0x126>
        p_mutex->OwnerNestingCtr++;
    ca8e:	68fb      	ldr	r3, [r7, #12]
    ca90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    ca94:	f103 0301 	add.w	r3, r3, #1
    ca98:	b2da      	uxtb	r2, r3
    ca9a:	68fb      	ldr	r3, [r7, #12]
    ca9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if (p_ts != (CPU_TS *)0) {
    caa0:	683b      	ldr	r3, [r7, #0]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d003      	beq.n	caae <OSMutexPend+0x112>
           *p_ts  = p_mutex->TS;
    caa6:	68fb      	ldr	r3, [r7, #12]
    caa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    caaa:	683b      	ldr	r3, [r7, #0]
    caac:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
    caae:	f7f4 ff2f 	bl	1910 <CPU_IntDisMeasStop>
    cab2:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cab4:	f00b f99a 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_MUTEX_OWNER;                        /* Indicate that current task already owns the mutex      */
    cab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caba:	f245 7282 	movw	r2, #22402	; 0x5782
    cabe:	801a      	strh	r2, [r3, #0]
        return;
    cac0:	e152      	b.n	cd68 <OSMutexPend+0x3cc>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    cac2:	88fb      	ldrh	r3, [r7, #6]
    cac4:	b21b      	sxth	r3, r3
    cac6:	2b00      	cmp	r3, #0
    cac8:	da09      	bge.n	cade <OSMutexPend+0x142>
        CPU_CRITICAL_EXIT();
    caca:	f7f4 ff21 	bl	1910 <CPU_IntDisMeasStop>
    cace:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cad0:	f00b f98c 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;                   /* No                                                     */
    cad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cad6:	f246 12b0 	movw	r2, #25008	; 0x61b0
    cada:	801a      	strh	r2, [r3, #0]
        return;
    cadc:	e144      	b.n	cd68 <OSMutexPend+0x3cc>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
    cade:	f643 5350 	movw	r3, #15696	; 0x3d50
    cae2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	2b00      	cmp	r3, #0
    caea:	d009      	beq.n	cb00 <OSMutexPend+0x164>
            CPU_CRITICAL_EXIT();
    caec:	f7f4 ff10 	bl	1910 <CPU_IntDisMeasStop>
    caf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    caf2:	f00b f97b 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    caf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caf8:	f646 5262 	movw	r2, #28002	; 0x6d62
    cafc:	801a      	strh	r2, [r3, #0]
            return;
    cafe:	e133      	b.n	cd68 <OSMutexPend+0x3cc>
        }
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    cb00:	f643 5350 	movw	r3, #15696	; 0x3d50
    cb04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	f103 0301 	add.w	r3, r3, #1
    cb0e:	b2da      	uxtb	r2, r3
    cb10:	f643 5350 	movw	r3, #15696	; 0x3d50
    cb14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb18:	701a      	strb	r2, [r3, #0]
    cb1a:	f643 5350 	movw	r3, #15696	; 0x3d50
    cb1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb22:	781b      	ldrb	r3, [r3, #0]
    cb24:	2b01      	cmp	r3, #1
    cb26:	d101      	bne.n	cb2c <OSMutexPend+0x190>
    cb28:	f002 fe64 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    cb2c:	f7f4 fef0 	bl	1910 <CPU_IntDisMeasStop>
    cb30:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cb32:	f00b f95b 	bl	17dec <CPU_SR_Restore>
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
    cb36:	68fb      	ldr	r3, [r7, #12]
    cb38:	6a1b      	ldr	r3, [r3, #32]
    cb3a:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
    cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb3e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    cb42:	f244 135c 	movw	r3, #16732	; 0x415c
    cb46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb4a:	681b      	ldr	r3, [r3, #0]
    cb4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    cb50:	429a      	cmp	r2, r3
    cb52:	d97e      	bls.n	cc52 <OSMutexPend+0x2b6>
        switch (p_tcb->TaskState) {
    cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb56:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    cb5a:	2b07      	cmp	r3, #7
    cb5c:	d83f      	bhi.n	cbde <OSMutexPend+0x242>
    cb5e:	f04f 524c 	mov.w	r2, #855638016	; 0x33000000
    cb62:	fa02 f203 	lsl.w	r2, r2, r3
    cb66:	2a00      	cmp	r2, #0
    cb68:	db2d      	blt.n	cbc6 <OSMutexPend+0x22a>
    cb6a:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
    cb6e:	fa02 f203 	lsl.w	r2, r2, r3
    cb72:	2a00      	cmp	r2, #0
    cb74:	db1c      	blt.n	cbb0 <OSMutexPend+0x214>
    cb76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cb7a:	fa02 f303 	lsl.w	r3, r2, r3
    cb7e:	2b00      	cmp	r3, #0
    cb80:	da2d      	bge.n	cbde <OSMutexPend+0x242>
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from ready list at current priority             */
    cb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
    cb84:	f002 fd98 	bl	f6b8 <OS_RdyListRemove>
                 p_tcb->Prio = OSTCBCurPtr->Prio;           /* Raise owner's priority                                 */
    cb88:	f244 135c 	movw	r3, #16732	; 0x415c
    cb8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb90:	681b      	ldr	r3, [r3, #0]
    cb92:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb98:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
                 OS_PrioInsert(p_tcb->Prio);
    cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb9e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    cba2:	4618      	mov	r0, r3
    cba4:	f7f9 fafa 	bl	619c <OS_PrioInsert>
                 OS_RdyListInsertHead(p_tcb);               /* Insert in ready list at new priority                   */
    cba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    cbaa:	f002 fca7 	bl	f4fc <OS_RdyListInsertHead>
                 break;
    cbae:	e050      	b.n	cc52 <OSMutexPend+0x2b6>

            case OS_TASK_STATE_DLY:
            case OS_TASK_STATE_DLY_SUSPENDED:
            case OS_TASK_STATE_SUSPENDED:
                 p_tcb->Prio = OSTCBCurPtr->Prio;           /* Only need to raise the owner's priority                */
    cbb0:	f244 135c 	movw	r3, #16732	; 0x415c
    cbb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cbb8:	681b      	ldr	r3, [r3, #0]
    cbba:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cbc0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
                 break;
    cbc4:	e045      	b.n	cc52 <OSMutexPend+0x2b6>
            case OS_TASK_STATE_PEND:                        /* Change the position of the task in the wait list       */
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 OS_PendListChangePrio(p_tcb,
                                       OSTCBCurPtr->Prio);
    cbc6:	f244 135c 	movw	r3, #16732	; 0x415c
    cbca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cbce:	681b      	ldr	r3, [r3, #0]

            case OS_TASK_STATE_PEND:                        /* Change the position of the task in the wait list       */
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 OS_PendListChangePrio(p_tcb,
    cbd0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    cbd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    cbd6:	4619      	mov	r1, r3
    cbd8:	f002 f96c 	bl	eeb4 <OS_PendListChangePrio>
                                       OSTCBCurPtr->Prio);
                 break;
    cbdc:	e039      	b.n	cc52 <OSMutexPend+0x2b6>

            default:
                 OS_CRITICAL_EXIT();
    cbde:	f00b f901 	bl	17de4 <CPU_SR_Save>
    cbe2:	6378      	str	r0, [r7, #52]	; 0x34
    cbe4:	f7f4 fe68 	bl	18b8 <CPU_IntDisMeasStart>
    cbe8:	f643 5350 	movw	r3, #15696	; 0x3d50
    cbec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cbf0:	781b      	ldrb	r3, [r3, #0]
    cbf2:	f103 33ff 	add.w	r3, r3, #4294967295
    cbf6:	b2da      	uxtb	r2, r3
    cbf8:	f643 5350 	movw	r3, #15696	; 0x3d50
    cbfc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	f643 5350 	movw	r3, #15696	; 0x3d50
    cc06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	d116      	bne.n	cc3e <OSMutexPend+0x2a2>
    cc10:	f002 fe02 	bl	f818 <OS_SchedLockTimeMeasStop>
    cc14:	f244 533c 	movw	r3, #17724	; 0x453c
    cc18:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc1c:	881b      	ldrh	r3, [r3, #0]
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d007      	beq.n	cc32 <OSMutexPend+0x296>
    cc22:	f7f4 fe75 	bl	1910 <CPU_IntDisMeasStop>
    cc26:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cc28:	f00b f8e0 	bl	17dec <CPU_SR_Restore>
    cc2c:	f002 fda8 	bl	f780 <OS_Sched0>
    cc30:	e00a      	b.n	cc48 <OSMutexPend+0x2ac>
    cc32:	f7f4 fe6d 	bl	1910 <CPU_IntDisMeasStop>
    cc36:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cc38:	f00b f8d8 	bl	17dec <CPU_SR_Restore>
    cc3c:	e004      	b.n	cc48 <OSMutexPend+0x2ac>
    cc3e:	f7f4 fe67 	bl	1910 <CPU_IntDisMeasStop>
    cc42:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cc44:	f00b f8d2 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_STATE_INVALID;
    cc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cc4a:	f646 622a 	movw	r2, #28202	; 0x6e2a
    cc4e:	801a      	strh	r2, [r3, #0]
                 return;
    cc50:	e08a      	b.n	cd68 <OSMutexPend+0x3cc>
        }
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
    cc52:	f107 0310 	add.w	r3, r7, #16
    cc56:	4618      	mov	r0, r3
    cc58:	68f9      	ldr	r1, [r7, #12]
    cc5a:	f04f 0204 	mov.w	r2, #4
    cc5e:	68bb      	ldr	r3, [r7, #8]
    cc60:	f001 ff76 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
            OS_TASK_PEND_ON_MUTEX,
            timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
    cc64:	f00b f8be 	bl	17de4 <CPU_SR_Save>
    cc68:	6378      	str	r0, [r7, #52]	; 0x34
    cc6a:	f7f4 fe25 	bl	18b8 <CPU_IntDisMeasStart>
    cc6e:	f643 5350 	movw	r3, #15696	; 0x3d50
    cc72:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	f103 33ff 	add.w	r3, r3, #4294967295
    cc7c:	b2da      	uxtb	r2, r3
    cc7e:	f643 5350 	movw	r3, #15696	; 0x3d50
    cc82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc86:	701a      	strb	r2, [r3, #0]
    cc88:	f643 5350 	movw	r3, #15696	; 0x3d50
    cc8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	2b00      	cmp	r3, #0
    cc94:	d101      	bne.n	cc9a <OSMutexPend+0x2fe>
    cc96:	f002 fdbf 	bl	f818 <OS_SchedLockTimeMeasStop>
    cc9a:	f7f4 fe39 	bl	1910 <CPU_IntDisMeasStop>
    cc9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cca0:	f00b f8a4 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find the next highest priority task ready to run       */
    cca4:	f001 fcbc 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    cca8:	f00b f89c 	bl	17de4 <CPU_SR_Save>
    ccac:	6378      	str	r0, [r7, #52]	; 0x34
    ccae:	f7f4 fe03 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    ccb2:	f244 135c 	movw	r3, #16732	; 0x415c
    ccb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ccba:	681b      	ldr	r3, [r3, #0]
    ccbc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    ccc0:	2b03      	cmp	r3, #3
    ccc2:	d847      	bhi.n	cd54 <OSMutexPend+0x3b8>
    ccc4:	a201      	add	r2, pc, #4	; (adr r2, cccc <OSMutexPend+0x330>)
    ccc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccca:	bf00      	nop
    cccc:	0000ccdd 	.word	0x0000ccdd
    ccd0:	0000ccfd 	.word	0x0000ccfd
    ccd4:	0000cd35 	.word	0x0000cd35
    ccd8:	0000cd1d 	.word	0x0000cd1d
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
    ccdc:	683b      	ldr	r3, [r7, #0]
    ccde:	2b00      	cmp	r3, #0
    cce0:	d007      	beq.n	ccf2 <OSMutexPend+0x356>
                *p_ts  = OSTCBCurPtr->TS;
    cce2:	f244 135c 	movw	r3, #16732	; 0x415c
    cce6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ccee:	683b      	ldr	r3, [r7, #0]
    ccf0:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_NONE;
    ccf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ccf4:	f04f 0200 	mov.w	r2, #0
    ccf8:	801a      	strh	r2, [r3, #0]
             break;
    ccfa:	e030      	b.n	cd5e <OSMutexPend+0x3c2>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
    ccfc:	683b      	ldr	r3, [r7, #0]
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d007      	beq.n	cd12 <OSMutexPend+0x376>
                *p_ts  = OSTCBCurPtr->TS;
    cd02:	f244 135c 	movw	r3, #16732	; 0x415c
    cd06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    cd0e:	683b      	ldr	r3, [r7, #0]
    cd10:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_PEND_ABORT;
    cd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd14:	f246 12a9 	movw	r2, #25001	; 0x61a9
    cd18:	801a      	strh	r2, [r3, #0]
             break;
    cd1a:	e020      	b.n	cd5e <OSMutexPend+0x3c2>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
    cd1c:	683b      	ldr	r3, [r7, #0]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d003      	beq.n	cd2a <OSMutexPend+0x38e>
                *p_ts  = (CPU_TS  )0;
    cd22:	683b      	ldr	r3, [r7, #0]
    cd24:	f04f 0200 	mov.w	r2, #0
    cd28:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_TIMEOUT;
    cd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd2c:	f247 22d9 	movw	r2, #29401	; 0x72d9
    cd30:	801a      	strh	r2, [r3, #0]
             break;
    cd32:	e014      	b.n	cd5e <OSMutexPend+0x3c2>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
    cd34:	683b      	ldr	r3, [r7, #0]
    cd36:	2b00      	cmp	r3, #0
    cd38:	d007      	beq.n	cd4a <OSMutexPend+0x3ae>
                *p_ts  = OSTCBCurPtr->TS;
    cd3a:	f244 135c 	movw	r3, #16732	; 0x415c
    cd3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    cd46:	683b      	ldr	r3, [r7, #0]
    cd48:	601a      	str	r2, [r3, #0]
             }
             *p_err = OS_ERR_OBJ_DEL;
    cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd4c:	f645 52c2 	movw	r2, #24002	; 0x5dc2
    cd50:	801a      	strh	r2, [r3, #0]
             break;
    cd52:	e004      	b.n	cd5e <OSMutexPend+0x3c2>

        default:
             *p_err = OS_ERR_STATUS_INVALID;
    cd54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd56:	f646 622b 	movw	r2, #28203	; 0x6e2b
    cd5a:	801a      	strh	r2, [r3, #0]
             break;
    cd5c:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
    cd5e:	f7f4 fdd7 	bl	1910 <CPU_IntDisMeasStop>
    cd62:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cd64:	f00b f842 	bl	17dec <CPU_SR_Restore>
}
    cd68:	f107 0738 	add.w	r7, r7, #56	; 0x38
    cd6c:	46bd      	mov	sp, r7
    cd6e:	bd80      	pop	{r7, pc}

0000cd70 <OSMutexPendAbort>:

#if OS_CFG_MUTEX_PEND_ABORT_EN > 0u
OS_OBJ_QTY  OSMutexPendAbort (OS_MUTEX  *p_mutex,
                              OS_OPT     opt,
                              OS_ERR    *p_err)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b08a      	sub	sp, #40	; 0x28
    cd74:	af00      	add	r7, sp, #0
    cd76:	60f8      	str	r0, [r7, #12]
    cd78:	460b      	mov	r3, r1
    cd7a:	607a      	str	r2, [r7, #4]
    cd7c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_OBJ_QTY     nbr_tasks;
    CPU_SR_ALLOC();
    cd7e:	f04f 0300 	mov.w	r3, #0
    cd82:	623b      	str	r3, [r7, #32]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
    cd84:	f244 1381 	movw	r3, #16769	; 0x4181
    cd88:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd8c:	781b      	ldrb	r3, [r3, #0]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d006      	beq.n	cda0 <OSMutexPendAbort+0x30>
       *p_err =  OS_ERR_PEND_ABORT_ISR;
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	f246 12aa 	movw	r2, #25002	; 0x61aa
    cd98:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    cd9a:	f04f 0300 	mov.w	r3, #0
    cd9e:	e0a3      	b.n	cee8 <OSMutexPendAbort+0x178>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
    cda0:	68fb      	ldr	r3, [r7, #12]
    cda2:	2b00      	cmp	r3, #0
    cda4:	d106      	bne.n	cdb4 <OSMutexPendAbort+0x44>
       *p_err =  OS_ERR_OBJ_PTR_NULL;
    cda6:	687b      	ldr	r3, [r7, #4]
    cda8:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    cdac:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    cdae:	f04f 0300 	mov.w	r3, #0
    cdb2:	e099      	b.n	cee8 <OSMutexPendAbort+0x178>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
    cdb4:	897b      	ldrh	r3, [r7, #10]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d009      	beq.n	cdce <OSMutexPendAbort+0x5e>
    cdba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    cdbe:	d006      	beq.n	cdce <OSMutexPendAbort+0x5e>
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;

        default:
            *p_err =  OS_ERR_OPT_INVALID;
    cdc0:	687b      	ldr	r3, [r7, #4]
    cdc2:	f645 6225 	movw	r2, #24101	; 0x5e25
    cdc6:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0u);
    cdc8:	f04f 0300 	mov.w	r3, #0
    cdcc:	e08c      	b.n	cee8 <OSMutexPendAbort+0x178>
        return ((OS_OBJ_QTY)0u);
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;
    cdce:	bf00      	nop
             return ((OS_OBJ_QTY)0u);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
    cdd0:	68fb      	ldr	r3, [r7, #12]
    cdd2:	681a      	ldr	r2, [r3, #0]
    cdd4:	f245 534d 	movw	r3, #21837	; 0x554d
    cdd8:	f6c5 0354 	movt	r3, #22612	; 0x5854
    cddc:	429a      	cmp	r2, r3
    cdde:	d006      	beq.n	cdee <OSMutexPendAbort+0x7e>
       *p_err =  OS_ERR_OBJ_TYPE;
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    cde6:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    cde8:	f04f 0300 	mov.w	r3, #0
    cdec:	e07c      	b.n	cee8 <OSMutexPendAbort+0x178>
    }
#endif

    CPU_CRITICAL_ENTER();
    cdee:	f00a fff9 	bl	17de4 <CPU_SR_Save>
    cdf2:	6238      	str	r0, [r7, #32]
    cdf4:	f7f4 fd60 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_mutex->PendList;
    cdf8:	68fb      	ldr	r3, [r7, #12]
    cdfa:	f103 0308 	add.w	r3, r3, #8
    cdfe:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on mutex?                             */
    ce00:	69fb      	ldr	r3, [r7, #28]
    ce02:	891b      	ldrh	r3, [r3, #8]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d10b      	bne.n	ce20 <OSMutexPendAbort+0xb0>
        CPU_CRITICAL_EXIT();                                /* No                                                     */
    ce08:	f7f4 fd82 	bl	1910 <CPU_IntDisMeasStop>
    ce0c:	6a38      	ldr	r0, [r7, #32]
    ce0e:	f00a ffed 	bl	17dec <CPU_SR_Restore>
       *p_err =  OS_ERR_PEND_ABORT_NONE;
    ce12:	687b      	ldr	r3, [r7, #4]
    ce14:	f246 12ab 	movw	r2, #25003	; 0x61ab
    ce18:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    ce1a:	f04f 0300 	mov.w	r3, #0
    ce1e:	e063      	b.n	cee8 <OSMutexPendAbort+0x178>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    ce20:	f643 5350 	movw	r3, #15696	; 0x3d50
    ce24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce28:	781b      	ldrb	r3, [r3, #0]
    ce2a:	f103 0301 	add.w	r3, r3, #1
    ce2e:	b2da      	uxtb	r2, r3
    ce30:	f643 5350 	movw	r3, #15696	; 0x3d50
    ce34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce38:	701a      	strb	r2, [r3, #0]
    ce3a:	f643 5350 	movw	r3, #15696	; 0x3d50
    ce3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	2b01      	cmp	r3, #1
    ce46:	d101      	bne.n	ce4c <OSMutexPendAbort+0xdc>
    ce48:	f002 fcd4 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    ce4c:	f7f4 fd60 	bl	1910 <CPU_IntDisMeasStop>
    ce50:	6a38      	ldr	r0, [r7, #32]
    ce52:	f00a ffcb 	bl	17dec <CPU_SR_Restore>
    nbr_tasks = 0u;
    ce56:	f04f 0300 	mov.w	r3, #0
    ce5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    ce5c:	f7f6 fa5e 	bl	331c <CPU_TS_TmrRd>
    ce60:	61b8      	str	r0, [r7, #24]
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    ce62:	e010      	b.n	ce86 <OSMutexPendAbort+0x116>
        p_tcb = p_pend_list->HeadPtr->TCBPtr;
    ce64:	69fb      	ldr	r3, [r7, #28]
    ce66:	681b      	ldr	r3, [r3, #0]
    ce68:	689b      	ldr	r3, [r3, #8]
    ce6a:	617b      	str	r3, [r7, #20]
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_mutex),
    ce6c:	68f8      	ldr	r0, [r7, #12]
    ce6e:	6979      	ldr	r1, [r7, #20]
    ce70:	69ba      	ldr	r2, [r7, #24]
    ce72:	f001 fec7 	bl	ec04 <OS_PendAbort>
                     p_tcb,
                     ts);
        nbr_tasks++;
    ce76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ce78:	f103 0301 	add.w	r3, r3, #1
    ce7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
    ce7e:	897b      	ldrh	r3, [r7, #10]
    ce80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ce84:	d104      	bne.n	ce90 <OSMutexPendAbort+0x120>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    nbr_tasks = 0u;
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    ce86:	69fb      	ldr	r3, [r7, #28]
    ce88:	891b      	ldrh	r3, [r3, #8]
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d1ea      	bne.n	ce64 <OSMutexPendAbort+0xf4>
    ce8e:	e000      	b.n	ce92 <OSMutexPendAbort+0x122>
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_mutex),
                     p_tcb,
                     ts);
        nbr_tasks++;
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
            break;                                          /* No                                                     */
    ce90:	bf00      	nop
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    ce92:	f00a ffa7 	bl	17de4 <CPU_SR_Save>
    ce96:	6238      	str	r0, [r7, #32]
    ce98:	f7f4 fd0e 	bl	18b8 <CPU_IntDisMeasStart>
    ce9c:	f643 5350 	movw	r3, #15696	; 0x3d50
    cea0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	f103 33ff 	add.w	r3, r3, #4294967295
    ceaa:	b2da      	uxtb	r2, r3
    ceac:	f643 5350 	movw	r3, #15696	; 0x3d50
    ceb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ceb4:	701a      	strb	r2, [r3, #0]
    ceb6:	f643 5350 	movw	r3, #15696	; 0x3d50
    ceba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cebe:	781b      	ldrb	r3, [r3, #0]
    cec0:	2b00      	cmp	r3, #0
    cec2:	d101      	bne.n	cec8 <OSMutexPendAbort+0x158>
    cec4:	f002 fca8 	bl	f818 <OS_SchedLockTimeMeasStop>
    cec8:	f7f4 fd22 	bl	1910 <CPU_IntDisMeasStop>
    cecc:	6a38      	ldr	r0, [r7, #32]
    cece:	f00a ff8d 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
    ced2:	897b      	ldrh	r3, [r7, #10]
    ced4:	b21b      	sxth	r3, r3
    ced6:	2b00      	cmp	r3, #0
    ced8:	db01      	blt.n	cede <OSMutexPendAbort+0x16e>
        OSSched();                                          /* Run the scheduler                                      */
    ceda:	f001 fba1 	bl	e620 <OSSched>
    }

   *p_err = OS_ERR_NONE;
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	f04f 0200 	mov.w	r2, #0
    cee4:	801a      	strh	r2, [r3, #0]
    return (nbr_tasks);
    cee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
    cee8:	4618      	mov	r0, r3
    ceea:	f107 0728 	add.w	r7, r7, #40	; 0x28
    ceee:	46bd      	mov	sp, r7
    cef0:	bd80      	pop	{r7, pc}
    cef2:	bf00      	nop

0000cef4 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
    cef4:	b580      	push	{r7, lr}
    cef6:	b08a      	sub	sp, #40	; 0x28
    cef8:	af02      	add	r7, sp, #8
    cefa:	60f8      	str	r0, [r7, #12]
    cefc:	460b      	mov	r3, r1
    cefe:	607a      	str	r2, [r7, #4]
    cf00:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    CPU_SR_ALLOC();
    cf02:	f04f 0300 	mov.w	r3, #0
    cf06:	61fb      	str	r3, [r7, #28]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    cf08:	f244 1381 	movw	r3, #16769	; 0x4181
    cf0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf10:	781b      	ldrb	r3, [r3, #0]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d004      	beq.n	cf20 <OSMutexPost+0x2c>
        *p_err = OS_ERR_POST_ISR;
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	f246 220e 	movw	r2, #25102	; 0x620e
    cf1c:	801a      	strh	r2, [r3, #0]
        return;
    cf1e:	e162      	b.n	d1e6 <OSMutexPost+0x2f2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
    cf20:	68fb      	ldr	r3, [r7, #12]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d104      	bne.n	cf30 <OSMutexPost+0x3c>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    cf26:	687b      	ldr	r3, [r7, #4]
    cf28:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    cf2c:	801a      	strh	r2, [r3, #0]
        return;
    cf2e:	e15a      	b.n	d1e6 <OSMutexPost+0x2f2>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
    cf30:	68fb      	ldr	r3, [r7, #12]
    cf32:	681a      	ldr	r2, [r3, #0]
    cf34:	f245 534d 	movw	r3, #21837	; 0x554d
    cf38:	f6c5 0354 	movt	r3, #22612	; 0x5854
    cf3c:	429a      	cmp	r2, r3
    cf3e:	d004      	beq.n	cf4a <OSMutexPost+0x56>
        *p_err = OS_ERR_OBJ_TYPE;
    cf40:	687b      	ldr	r3, [r7, #4]
    cf42:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    cf46:	801a      	strh	r2, [r3, #0]
        return;
    cf48:	e14d      	b.n	d1e6 <OSMutexPost+0x2f2>
    }
#endif

    CPU_CRITICAL_ENTER();
    cf4a:	f00a ff4b 	bl	17de4 <CPU_SR_Save>
    cf4e:	61f8      	str	r0, [r7, #28]
    cf50:	f7f4 fcb2 	bl	18b8 <CPU_IntDisMeasStart>
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
    cf54:	68fb      	ldr	r3, [r7, #12]
    cf56:	6a1a      	ldr	r2, [r3, #32]
    cf58:	f244 135c 	movw	r3, #16732	; 0x415c
    cf5c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf60:	681b      	ldr	r3, [r3, #0]
    cf62:	429a      	cmp	r2, r3
    cf64:	d009      	beq.n	cf7a <OSMutexPost+0x86>
        CPU_CRITICAL_EXIT();
    cf66:	f7f4 fcd3 	bl	1910 <CPU_IntDisMeasStop>
    cf6a:	69f8      	ldr	r0, [r7, #28]
    cf6c:	f00a ff3e 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_MUTEX_NOT_OWNER;
    cf70:	687b      	ldr	r3, [r7, #4]
    cf72:	f245 7281 	movw	r2, #22401	; 0x5781
    cf76:	801a      	strh	r2, [r3, #0]
        return;
    cf78:	e135      	b.n	d1e6 <OSMutexPost+0x2f2>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    cf7a:	f643 5350 	movw	r3, #15696	; 0x3d50
    cf7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	f103 0301 	add.w	r3, r3, #1
    cf88:	b2da      	uxtb	r2, r3
    cf8a:	f643 5350 	movw	r3, #15696	; 0x3d50
    cf8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf92:	701a      	strb	r2, [r3, #0]
    cf94:	f643 5350 	movw	r3, #15696	; 0x3d50
    cf98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf9c:	781b      	ldrb	r3, [r3, #0]
    cf9e:	2b01      	cmp	r3, #1
    cfa0:	d101      	bne.n	cfa6 <OSMutexPost+0xb2>
    cfa2:	f002 fc27 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    cfa6:	f7f4 fcb3 	bl	1910 <CPU_IntDisMeasStop>
    cfaa:	69f8      	ldr	r0, [r7, #28]
    cfac:	f00a ff1e 	bl	17dec <CPU_SR_Restore>
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
    cfb0:	f7f6 f9b4 	bl	331c <CPU_TS_TmrRd>
    cfb4:	61b8      	str	r0, [r7, #24]
    p_mutex->TS = ts;
    cfb6:	68fb      	ldr	r3, [r7, #12]
    cfb8:	69ba      	ldr	r2, [r7, #24]
    cfba:	629a      	str	r2, [r3, #40]	; 0x28
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
    cfbc:	68fb      	ldr	r3, [r7, #12]
    cfbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cfc2:	f103 33ff 	add.w	r3, r3, #4294967295
    cfc6:	b2da      	uxtb	r2, r3
    cfc8:	68fb      	ldr	r3, [r7, #12]
    cfca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
    cfce:	68fb      	ldr	r3, [r7, #12]
    cfd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	d039      	beq.n	d04c <OSMutexPost+0x158>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
    cfd8:	f00a ff04 	bl	17de4 <CPU_SR_Save>
    cfdc:	61f8      	str	r0, [r7, #28]
    cfde:	f7f4 fc6b 	bl	18b8 <CPU_IntDisMeasStart>
    cfe2:	f643 5350 	movw	r3, #15696	; 0x3d50
    cfe6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	f103 33ff 	add.w	r3, r3, #4294967295
    cff0:	b2da      	uxtb	r2, r3
    cff2:	f643 5350 	movw	r3, #15696	; 0x3d50
    cff6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cffa:	701a      	strb	r2, [r3, #0]
    cffc:	f643 5350 	movw	r3, #15696	; 0x3d50
    d000:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d004:	781b      	ldrb	r3, [r3, #0]
    d006:	2b00      	cmp	r3, #0
    d008:	d116      	bne.n	d038 <OSMutexPost+0x144>
    d00a:	f002 fc05 	bl	f818 <OS_SchedLockTimeMeasStop>
    d00e:	f244 533c 	movw	r3, #17724	; 0x453c
    d012:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d016:	881b      	ldrh	r3, [r3, #0]
    d018:	2b00      	cmp	r3, #0
    d01a:	d007      	beq.n	d02c <OSMutexPost+0x138>
    d01c:	f7f4 fc78 	bl	1910 <CPU_IntDisMeasStop>
    d020:	69f8      	ldr	r0, [r7, #28]
    d022:	f00a fee3 	bl	17dec <CPU_SR_Restore>
    d026:	f002 fbab 	bl	f780 <OS_Sched0>
    d02a:	e00a      	b.n	d042 <OSMutexPost+0x14e>
    d02c:	f7f4 fc70 	bl	1910 <CPU_IntDisMeasStop>
    d030:	69f8      	ldr	r0, [r7, #28]
    d032:	f00a fedb 	bl	17dec <CPU_SR_Restore>
    d036:	e004      	b.n	d042 <OSMutexPost+0x14e>
    d038:	f7f4 fc6a 	bl	1910 <CPU_IntDisMeasStop>
    d03c:	69f8      	ldr	r0, [r7, #28]
    d03e:	f00a fed5 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_MUTEX_NESTING;
    d042:	687b      	ldr	r3, [r7, #4]
    d044:	f245 7283 	movw	r2, #22403	; 0x5783
    d048:	801a      	strh	r2, [r3, #0]
        return;
    d04a:	e0cc      	b.n	d1e6 <OSMutexPost+0x2f2>
    }

    p_pend_list = &p_mutex->PendList;
    d04c:	68fb      	ldr	r3, [r7, #12]
    d04e:	f103 0308 	add.w	r3, r3, #8
    d052:	617b      	str	r3, [r7, #20]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
    d054:	697b      	ldr	r3, [r7, #20]
    d056:	891b      	ldrh	r3, [r3, #8]
    d058:	2b00      	cmp	r3, #0
    d05a:	d142      	bne.n	d0e2 <OSMutexPost+0x1ee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
    d05c:	68fb      	ldr	r3, [r7, #12]
    d05e:	f04f 0200 	mov.w	r2, #0
    d062:	621a      	str	r2, [r3, #32]
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
    d064:	68fb      	ldr	r3, [r7, #12]
    d066:	f04f 0200 	mov.w	r2, #0
    d06a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        OS_CRITICAL_EXIT();
    d06e:	f00a feb9 	bl	17de4 <CPU_SR_Save>
    d072:	61f8      	str	r0, [r7, #28]
    d074:	f7f4 fc20 	bl	18b8 <CPU_IntDisMeasStart>
    d078:	f643 5350 	movw	r3, #15696	; 0x3d50
    d07c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d080:	781b      	ldrb	r3, [r3, #0]
    d082:	f103 33ff 	add.w	r3, r3, #4294967295
    d086:	b2da      	uxtb	r2, r3
    d088:	f643 5350 	movw	r3, #15696	; 0x3d50
    d08c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d090:	701a      	strb	r2, [r3, #0]
    d092:	f643 5350 	movw	r3, #15696	; 0x3d50
    d096:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	2b00      	cmp	r3, #0
    d09e:	d116      	bne.n	d0ce <OSMutexPost+0x1da>
    d0a0:	f002 fbba 	bl	f818 <OS_SchedLockTimeMeasStop>
    d0a4:	f244 533c 	movw	r3, #17724	; 0x453c
    d0a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d0ac:	881b      	ldrh	r3, [r3, #0]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d007      	beq.n	d0c2 <OSMutexPost+0x1ce>
    d0b2:	f7f4 fc2d 	bl	1910 <CPU_IntDisMeasStop>
    d0b6:	69f8      	ldr	r0, [r7, #28]
    d0b8:	f00a fe98 	bl	17dec <CPU_SR_Restore>
    d0bc:	f002 fb60 	bl	f780 <OS_Sched0>
    d0c0:	e00a      	b.n	d0d8 <OSMutexPost+0x1e4>
    d0c2:	f7f4 fc25 	bl	1910 <CPU_IntDisMeasStop>
    d0c6:	69f8      	ldr	r0, [r7, #28]
    d0c8:	f00a fe90 	bl	17dec <CPU_SR_Restore>
    d0cc:	e004      	b.n	d0d8 <OSMutexPost+0x1e4>
    d0ce:	f7f4 fc1f 	bl	1910 <CPU_IntDisMeasStop>
    d0d2:	69f8      	ldr	r0, [r7, #28]
    d0d4:	f00a fe8a 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_NONE;
    d0d8:	687b      	ldr	r3, [r7, #4]
    d0da:	f04f 0200 	mov.w	r2, #0
    d0de:	801a      	strh	r2, [r3, #0]
        return;
    d0e0:	e081      	b.n	d1e6 <OSMutexPost+0x2f2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != p_mutex->OwnerOriginalPrio) {
    d0e2:	f244 135c 	movw	r3, #16732	; 0x415c
    d0e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d0ea:	681b      	ldr	r3, [r3, #0]
    d0ec:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    d0f0:	68fb      	ldr	r3, [r7, #12]
    d0f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    d0f6:	429a      	cmp	r2, r3
    d0f8:	d02f      	beq.n	d15a <OSMutexPost+0x266>
        OS_RdyListRemove(OSTCBCurPtr);
    d0fa:	f244 135c 	movw	r3, #16732	; 0x415c
    d0fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d102:	681b      	ldr	r3, [r3, #0]
    d104:	4618      	mov	r0, r3
    d106:	f002 fad7 	bl	f6b8 <OS_RdyListRemove>
        OSTCBCurPtr->Prio = p_mutex->OwnerOriginalPrio;     /* Lower owner's priority back to its original one        */
    d10a:	f244 135c 	movw	r3, #16732	; 0x415c
    d10e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d112:	681b      	ldr	r3, [r3, #0]
    d114:	68fa      	ldr	r2, [r7, #12]
    d116:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    d11a:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
        OS_PrioInsert(OSTCBCurPtr->Prio);
    d11e:	f244 135c 	movw	r3, #16732	; 0x415c
    d122:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d126:	681b      	ldr	r3, [r3, #0]
    d128:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    d12c:	4618      	mov	r0, r3
    d12e:	f7f9 f835 	bl	619c <OS_PrioInsert>
        OS_RdyListInsertTail(OSTCBCurPtr);                  /* Insert owner in ready list at new priority             */
    d132:	f244 135c 	movw	r3, #16732	; 0x415c
    d136:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d13a:	681b      	ldr	r3, [r3, #0]
    d13c:	4618      	mov	r0, r3
    d13e:	f002 fa27 	bl	f590 <OS_RdyListInsertTail>
        OSPrioCur         = OSTCBCurPtr->Prio;
    d142:	f244 135c 	movw	r3, #16732	; 0x415c
    d146:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d14a:	681b      	ldr	r3, [r3, #0]
    d14c:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    d150:	f244 0378 	movw	r3, #16504	; 0x4078
    d154:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d158:	701a      	strb	r2, [r3, #0]
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
    d15a:	697b      	ldr	r3, [r7, #20]
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	689b      	ldr	r3, [r3, #8]
    d160:	613b      	str	r3, [r7, #16]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
    d162:	68fb      	ldr	r3, [r7, #12]
    d164:	693a      	ldr	r2, [r7, #16]
    d166:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerOriginalPrio = p_tcb->Prio;
    d168:	693b      	ldr	r3, [r7, #16]
    d16a:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    d16e:	68fb      	ldr	r3, [r7, #12]
    d170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
    d174:	68fb      	ldr	r3, [r7, #12]
    d176:	f04f 0201 	mov.w	r2, #1
    d17a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
    d17e:	69bb      	ldr	r3, [r7, #24]
    d180:	9300      	str	r3, [sp, #0]
    d182:	68f8      	ldr	r0, [r7, #12]
    d184:	6939      	ldr	r1, [r7, #16]
    d186:	f04f 0200 	mov.w	r2, #0
    d18a:	f04f 0300 	mov.w	r3, #0
    d18e:	f002 f8a7 	bl	f2e0 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
    d192:	f00a fe27 	bl	17de4 <CPU_SR_Save>
    d196:	61f8      	str	r0, [r7, #28]
    d198:	f7f4 fb8e 	bl	18b8 <CPU_IntDisMeasStart>
    d19c:	f643 5350 	movw	r3, #15696	; 0x3d50
    d1a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1a4:	781b      	ldrb	r3, [r3, #0]
    d1a6:	f103 33ff 	add.w	r3, r3, #4294967295
    d1aa:	b2da      	uxtb	r2, r3
    d1ac:	f643 5350 	movw	r3, #15696	; 0x3d50
    d1b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1b4:	701a      	strb	r2, [r3, #0]
    d1b6:	f643 5350 	movw	r3, #15696	; 0x3d50
    d1ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1be:	781b      	ldrb	r3, [r3, #0]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d101      	bne.n	d1c8 <OSMutexPost+0x2d4>
    d1c4:	f002 fb28 	bl	f818 <OS_SchedLockTimeMeasStop>
    d1c8:	f7f4 fba2 	bl	1910 <CPU_IntDisMeasStop>
    d1cc:	69f8      	ldr	r0, [r7, #28]
    d1ce:	f00a fe0d 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    d1d2:	897b      	ldrh	r3, [r7, #10]
    d1d4:	b21b      	sxth	r3, r3
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	db01      	blt.n	d1de <OSMutexPost+0x2ea>
        OSSched();                                          /* Run the scheduler                                      */
    d1da:	f001 fa21 	bl	e620 <OSSched>
    }

    *p_err = OS_ERR_NONE;
    d1de:	687b      	ldr	r3, [r7, #4]
    d1e0:	f04f 0200 	mov.w	r2, #0
    d1e4:	801a      	strh	r2, [r3, #0]
}
    d1e6:	f107 0720 	add.w	r7, r7, #32
    d1ea:	46bd      	mov	sp, r7
    d1ec:	bd80      	pop	{r7, pc}
    d1ee:	bf00      	nop

0000d1f0 <OS_MutexClr>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MutexClr (OS_MUTEX  *p_mutex)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	b082      	sub	sp, #8
    d1f4:	af00      	add	r7, sp, #0
    d1f6:	6078      	str	r0, [r7, #4]
    p_mutex->Type              =  OS_OBJ_TYPE_NONE;         /* Mark the data structure as a NONE                      */
    d1f8:	687a      	ldr	r2, [r7, #4]
    d1fa:	f644 734e 	movw	r3, #20302	; 0x4f4e
    d1fe:	f2c4 534e 	movt	r3, #17742	; 0x454e
    d202:	6013      	str	r3, [r2, #0]
    p_mutex->NamePtr           = (CPU_CHAR     *)((void *)"?MUTEX");
    d204:	687a      	ldr	r2, [r7, #4]
    d206:	f64c 1390 	movw	r3, #51600	; 0xc990
    d20a:	f2c0 0302 	movt	r3, #2
    d20e:	6053      	str	r3, [r2, #4]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	f04f 0200 	mov.w	r2, #0
    d216:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	f04f 0200 	mov.w	r2, #0
    d21e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p_mutex->TS                = (CPU_TS        )0;
    d222:	687b      	ldr	r3, [r7, #4]
    d224:	f04f 0200 	mov.w	r2, #0
    d228:	629a      	str	r2, [r3, #40]	; 0x28
    p_mutex->OwnerOriginalPrio =  OS_CFG_PRIO_MAX;
    d22a:	687b      	ldr	r3, [r7, #4]
    d22c:	f04f 0240 	mov.w	r2, #64	; 0x40
    d230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	f103 0308 	add.w	r3, r3, #8
    d23a:	4618      	mov	r0, r3
    d23c:	f001 fe6e 	bl	ef1c <OS_PendListInit>
}
    d240:	f107 0708 	add.w	r7, r7, #8
    d244:	46bd      	mov	sp, r7
    d246:	bd80      	pop	{r7, pc}

0000d248 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
    d248:	b480      	push	{r7}
    d24a:	b083      	sub	sp, #12
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
    d250:	687a      	ldr	r2, [r7, #4]
    d252:	f64c 1398 	movw	r3, #51608	; 0xc998
    d256:	f2c0 0302 	movt	r3, #2
    d25a:	61d3      	str	r3, [r2, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
    d25c:	687b      	ldr	r3, [r7, #4]
    d25e:	f04f 0200 	mov.w	r2, #0
    d262:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
    d264:	f244 5338 	movw	r3, #17720	; 0x4538
    d268:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d26c:	681b      	ldr	r3, [r3, #0]
    d26e:	2b00      	cmp	r3, #0
    d270:	d104      	bne.n	d27c <OS_MutexDbgListAdd+0x34>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
    d272:	687b      	ldr	r3, [r7, #4]
    d274:	f04f 0200 	mov.w	r2, #0
    d278:	619a      	str	r2, [r3, #24]
    d27a:	e00d      	b.n	d298 <OS_MutexDbgListAdd+0x50>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
    d27c:	f244 5338 	movw	r3, #17720	; 0x4538
    d280:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d284:	681a      	ldr	r2, [r3, #0]
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
    d28a:	f244 5338 	movw	r3, #17720	; 0x4538
    d28e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	687a      	ldr	r2, [r7, #4]
    d296:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
    d298:	f244 5338 	movw	r3, #17720	; 0x4538
    d29c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d2a0:	687a      	ldr	r2, [r7, #4]
    d2a2:	601a      	str	r2, [r3, #0]
}
    d2a4:	f107 070c 	add.w	r7, r7, #12
    d2a8:	46bd      	mov	sp, r7
    d2aa:	bc80      	pop	{r7}
    d2ac:	4770      	bx	lr
    d2ae:	bf00      	nop

0000d2b0 <OS_MutexDbgListRemove>:



void  OS_MutexDbgListRemove (OS_MUTEX  *p_mutex)
{
    d2b0:	b480      	push	{r7}
    d2b2:	b085      	sub	sp, #20
    d2b4:	af00      	add	r7, sp, #0
    d2b6:	6078      	str	r0, [r7, #4]
    OS_MUTEX  *p_mutex_next;
    OS_MUTEX  *p_mutex_prev;


    p_mutex_prev = p_mutex->DbgPrevPtr;
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	695b      	ldr	r3, [r3, #20]
    d2bc:	60fb      	str	r3, [r7, #12]
    p_mutex_next = p_mutex->DbgNextPtr;
    d2be:	687b      	ldr	r3, [r7, #4]
    d2c0:	699b      	ldr	r3, [r3, #24]
    d2c2:	60bb      	str	r3, [r7, #8]

    if (p_mutex_prev == (OS_MUTEX *)0) {
    d2c4:	68fb      	ldr	r3, [r7, #12]
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	d111      	bne.n	d2ee <OS_MutexDbgListRemove+0x3e>
        OSMutexDbgListPtr = p_mutex_next;
    d2ca:	f244 5338 	movw	r3, #17720	; 0x4538
    d2ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d2d2:	68ba      	ldr	r2, [r7, #8]
    d2d4:	601a      	str	r2, [r3, #0]
        if (p_mutex_next != (OS_MUTEX *)0) {
    d2d6:	68bb      	ldr	r3, [r7, #8]
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d003      	beq.n	d2e4 <OS_MutexDbgListRemove+0x34>
            p_mutex_next->DbgPrevPtr = (OS_MUTEX *)0;
    d2dc:	68bb      	ldr	r3, [r7, #8]
    d2de:	f04f 0200 	mov.w	r2, #0
    d2e2:	615a      	str	r2, [r3, #20]
        }
        p_mutex->DbgNextPtr = (OS_MUTEX *)0;
    d2e4:	687b      	ldr	r3, [r7, #4]
    d2e6:	f04f 0200 	mov.w	r2, #0
    d2ea:	619a      	str	r2, [r3, #24]
    d2ec:	e019      	b.n	d322 <OS_MutexDbgListRemove+0x72>

    } else if (p_mutex_next == (OS_MUTEX *)0) {
    d2ee:	68bb      	ldr	r3, [r7, #8]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d108      	bne.n	d306 <OS_MutexDbgListRemove+0x56>
        p_mutex_prev->DbgNextPtr = (OS_MUTEX *)0;
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	f04f 0200 	mov.w	r2, #0
    d2fa:	619a      	str	r2, [r3, #24]
        p_mutex->DbgPrevPtr      = (OS_MUTEX *)0;
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	f04f 0200 	mov.w	r2, #0
    d302:	615a      	str	r2, [r3, #20]
    d304:	e00d      	b.n	d322 <OS_MutexDbgListRemove+0x72>

    } else {
        p_mutex_prev->DbgNextPtr =  p_mutex_next;
    d306:	68fb      	ldr	r3, [r7, #12]
    d308:	68ba      	ldr	r2, [r7, #8]
    d30a:	619a      	str	r2, [r3, #24]
        p_mutex_next->DbgPrevPtr =  p_mutex_prev;
    d30c:	68bb      	ldr	r3, [r7, #8]
    d30e:	68fa      	ldr	r2, [r7, #12]
    d310:	615a      	str	r2, [r3, #20]
        p_mutex->DbgNextPtr      = (OS_MUTEX *)0;
    d312:	687b      	ldr	r3, [r7, #4]
    d314:	f04f 0200 	mov.w	r2, #0
    d318:	619a      	str	r2, [r3, #24]
        p_mutex->DbgPrevPtr      = (OS_MUTEX *)0;
    d31a:	687b      	ldr	r3, [r7, #4]
    d31c:	f04f 0200 	mov.w	r2, #0
    d320:	615a      	str	r2, [r3, #20]
    }
}
    d322:	f107 0714 	add.w	r7, r7, #20
    d326:	46bd      	mov	sp, r7
    d328:	bc80      	pop	{r7}
    d32a:	4770      	bx	lr

0000d32c <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
    d32c:	b480      	push	{r7}
    d32e:	b083      	sub	sp, #12
    d330:	af00      	add	r7, sp, #0
    d332:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
    d334:	f244 5338 	movw	r3, #17720	; 0x4538
    d338:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d33c:	f04f 0200 	mov.w	r2, #0
    d340:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
    d342:	f244 4350 	movw	r3, #17488	; 0x4450
    d346:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d34a:	f04f 0200 	mov.w	r2, #0
    d34e:	801a      	strh	r2, [r3, #0]
    *p_err            =  OS_ERR_NONE;
    d350:	687b      	ldr	r3, [r7, #4]
    d352:	f04f 0200 	mov.w	r2, #0
    d356:	801a      	strh	r2, [r3, #0]
}
    d358:	f107 070c 	add.w	r7, r7, #12
    d35c:	46bd      	mov	sp, r7
    d35e:	bc80      	pop	{r7}
    d360:	4770      	bx	lr
    d362:	bf00      	nop

0000d364 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
    d364:	b580      	push	{r7, lr}
    d366:	b086      	sub	sp, #24
    d368:	af00      	add	r7, sp, #0
    d36a:	60f8      	str	r0, [r7, #12]
    d36c:	60b9      	str	r1, [r7, #8]
    d36e:	603b      	str	r3, [r7, #0]
    d370:	4613      	mov	r3, r2
    d372:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
    d374:	f04f 0300 	mov.w	r3, #0
    d378:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
    d37a:	f244 1381 	movw	r3, #16769	; 0x4181
    d37e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d382:	781b      	ldrb	r3, [r3, #0]
    d384:	2b00      	cmp	r3, #0
    d386:	d004      	beq.n	d392 <OSQCreate+0x2e>
        *p_err = OS_ERR_CREATE_ISR;
    d388:	683b      	ldr	r3, [r7, #0]
    d38a:	f642 62e1 	movw	r2, #12001	; 0x2ee1
    d38e:	801a      	strh	r2, [r3, #0]
        return;
    d390:	e08f      	b.n	d4b2 <OSQCreate+0x14e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
    d392:	68fb      	ldr	r3, [r7, #12]
    d394:	2b00      	cmp	r3, #0
    d396:	d104      	bne.n	d3a2 <OSQCreate+0x3e>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    d398:	683b      	ldr	r3, [r7, #0]
    d39a:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    d39e:	801a      	strh	r2, [r3, #0]
        return;
    d3a0:	e087      	b.n	d4b2 <OSQCreate+0x14e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
    d3a2:	88fb      	ldrh	r3, [r7, #6]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d104      	bne.n	d3b2 <OSQCreate+0x4e>
        *p_err = OS_ERR_Q_SIZE;
    d3a8:	683b      	ldr	r3, [r7, #0]
    d3aa:	f246 5294 	movw	r2, #26004	; 0x6594
    d3ae:	801a      	strh	r2, [r3, #0]
        return;
    d3b0:	e07f      	b.n	d4b2 <OSQCreate+0x14e>
    }
#endif

    OS_CRITICAL_ENTER();
    d3b2:	f00a fd17 	bl	17de4 <CPU_SR_Save>
    d3b6:	6178      	str	r0, [r7, #20]
    d3b8:	f7f4 fa7e 	bl	18b8 <CPU_IntDisMeasStart>
    d3bc:	f643 5350 	movw	r3, #15696	; 0x3d50
    d3c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3c4:	781b      	ldrb	r3, [r3, #0]
    d3c6:	f103 0301 	add.w	r3, r3, #1
    d3ca:	b2da      	uxtb	r2, r3
    d3cc:	f643 5350 	movw	r3, #15696	; 0x3d50
    d3d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3d4:	701a      	strb	r2, [r3, #0]
    d3d6:	f643 5350 	movw	r3, #15696	; 0x3d50
    d3da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3de:	781b      	ldrb	r3, [r3, #0]
    d3e0:	2b01      	cmp	r3, #1
    d3e2:	d101      	bne.n	d3e8 <OSQCreate+0x84>
    d3e4:	f002 fa06 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    d3e8:	f7f4 fa92 	bl	1910 <CPU_IntDisMeasStop>
    d3ec:	6978      	ldr	r0, [r7, #20]
    d3ee:	f00a fcfd 	bl	17dec <CPU_SR_Restore>
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
    d3f2:	68fa      	ldr	r2, [r7, #12]
    d3f4:	f245 5351 	movw	r3, #21841	; 0x5551
    d3f8:	f2c5 5345 	movt	r3, #21829	; 0x5545
    d3fc:	6013      	str	r3, [r2, #0]
    p_q->NamePtr = p_name;
    d3fe:	68fb      	ldr	r3, [r7, #12]
    d400:	68ba      	ldr	r2, [r7, #8]
    d402:	605a      	str	r2, [r3, #4]
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
    d404:	68fb      	ldr	r3, [r7, #12]
    d406:	f103 0220 	add.w	r2, r3, #32
    d40a:	88fb      	ldrh	r3, [r7, #6]
    d40c:	4610      	mov	r0, r2
    d40e:	4619      	mov	r1, r3
    d410:	f003 f81a 	bl	10448 <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
    d414:	68fb      	ldr	r3, [r7, #12]
    d416:	f103 0308 	add.w	r3, r3, #8
    d41a:	4618      	mov	r0, r3
    d41c:	f001 fd7e 	bl	ef1c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
    d420:	68f8      	ldr	r0, [r7, #12]
    d422:	f000 fc63 	bl	dcec <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
    d426:	f244 1360 	movw	r3, #16736	; 0x4160
    d42a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d42e:	881b      	ldrh	r3, [r3, #0]
    d430:	f103 0301 	add.w	r3, r3, #1
    d434:	b29a      	uxth	r2, r3
    d436:	f244 1360 	movw	r3, #16736	; 0x4160
    d43a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d43e:	801a      	strh	r2, [r3, #0]

    OS_CRITICAL_EXIT();
    d440:	f00a fcd0 	bl	17de4 <CPU_SR_Save>
    d444:	6178      	str	r0, [r7, #20]
    d446:	f7f4 fa37 	bl	18b8 <CPU_IntDisMeasStart>
    d44a:	f643 5350 	movw	r3, #15696	; 0x3d50
    d44e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d452:	781b      	ldrb	r3, [r3, #0]
    d454:	f103 33ff 	add.w	r3, r3, #4294967295
    d458:	b2da      	uxtb	r2, r3
    d45a:	f643 5350 	movw	r3, #15696	; 0x3d50
    d45e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d462:	701a      	strb	r2, [r3, #0]
    d464:	f643 5350 	movw	r3, #15696	; 0x3d50
    d468:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d46c:	781b      	ldrb	r3, [r3, #0]
    d46e:	2b00      	cmp	r3, #0
    d470:	d116      	bne.n	d4a0 <OSQCreate+0x13c>
    d472:	f002 f9d1 	bl	f818 <OS_SchedLockTimeMeasStop>
    d476:	f244 533c 	movw	r3, #17724	; 0x453c
    d47a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d47e:	881b      	ldrh	r3, [r3, #0]
    d480:	2b00      	cmp	r3, #0
    d482:	d007      	beq.n	d494 <OSQCreate+0x130>
    d484:	f7f4 fa44 	bl	1910 <CPU_IntDisMeasStop>
    d488:	6978      	ldr	r0, [r7, #20]
    d48a:	f00a fcaf 	bl	17dec <CPU_SR_Restore>
    d48e:	f002 f977 	bl	f780 <OS_Sched0>
    d492:	e00a      	b.n	d4aa <OSQCreate+0x146>
    d494:	f7f4 fa3c 	bl	1910 <CPU_IntDisMeasStop>
    d498:	6978      	ldr	r0, [r7, #20]
    d49a:	f00a fca7 	bl	17dec <CPU_SR_Restore>
    d49e:	e004      	b.n	d4aa <OSQCreate+0x146>
    d4a0:	f7f4 fa36 	bl	1910 <CPU_IntDisMeasStop>
    d4a4:	6978      	ldr	r0, [r7, #20]
    d4a6:	f00a fca1 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    d4aa:	683b      	ldr	r3, [r7, #0]
    d4ac:	f04f 0200 	mov.w	r2, #0
    d4b0:	801a      	strh	r2, [r3, #0]
}
    d4b2:	f107 0718 	add.w	r7, r7, #24
    d4b6:	46bd      	mov	sp, r7
    d4b8:	bd80      	pop	{r7, pc}
    d4ba:	bf00      	nop

0000d4bc <OSQDel>:

#if OS_CFG_Q_DEL_EN > 0u
OS_OBJ_QTY  OSQDel (OS_Q    *p_q,
                    OS_OPT   opt,
                    OS_ERR  *p_err)
{
    d4bc:	b580      	push	{r7, lr}
    d4be:	b08c      	sub	sp, #48	; 0x30
    d4c0:	af00      	add	r7, sp, #0
    d4c2:	60f8      	str	r0, [r7, #12]
    d4c4:	460b      	mov	r3, r1
    d4c6:	607a      	str	r2, [r7, #4]
    d4c8:	817b      	strh	r3, [r7, #10]
    OS_OBJ_QTY     nbr_tasks;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    CPU_SR_ALLOC();
    d4ca:	f04f 0300 	mov.w	r3, #0
    d4ce:	62bb      	str	r3, [r7, #40]	; 0x28
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't delete a message queue from an ISR               */
    d4d0:	f244 1381 	movw	r3, #16769	; 0x4181
    d4d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d4d8:	781b      	ldrb	r3, [r3, #0]
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d006      	beq.n	d4ec <OSQDel+0x30>
        *p_err = OS_ERR_DEL_ISR;
    d4de:	687b      	ldr	r3, [r7, #4]
    d4e0:	f243 22c9 	movw	r2, #13001	; 0x32c9
    d4e4:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    d4e6:	f04f 0300 	mov.w	r3, #0
    d4ea:	e0cc      	b.n	d686 <OSQDel+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
    d4ec:	68fb      	ldr	r3, [r7, #12]
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d106      	bne.n	d500 <OSQDel+0x44>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    d4f8:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    d4fa:	f04f 0300 	mov.w	r3, #0
    d4fe:	e0c2      	b.n	d686 <OSQDel+0x1ca>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
    d500:	68fb      	ldr	r3, [r7, #12]
    d502:	681a      	ldr	r2, [r3, #0]
    d504:	f245 5351 	movw	r3, #21841	; 0x5551
    d508:	f2c5 5345 	movt	r3, #21829	; 0x5545
    d50c:	429a      	cmp	r2, r3
    d50e:	d006      	beq.n	d51e <OSQDel+0x62>
        *p_err = OS_ERR_OBJ_TYPE;
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    d516:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0);
    d518:	f04f 0300 	mov.w	r3, #0
    d51c:	e0b3      	b.n	d686 <OSQDel+0x1ca>
    }
#endif

    CPU_CRITICAL_ENTER();
    d51e:	f00a fc61 	bl	17de4 <CPU_SR_Save>
    d522:	62b8      	str	r0, [r7, #40]	; 0x28
    d524:	f7f4 f9c8 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_q->PendList;
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	f103 0308 	add.w	r3, r3, #8
    d52e:	627b      	str	r3, [r7, #36]	; 0x24
    cnt         = p_pend_list->NbrEntries;
    d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d532:	891b      	ldrh	r3, [r3, #8]
    d534:	85fb      	strh	r3, [r7, #46]	; 0x2e
    nbr_tasks   = cnt;
    d536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    d538:	847b      	strh	r3, [r7, #34]	; 0x22
    switch (opt) {
    d53a:	897b      	ldrh	r3, [r7, #10]
    d53c:	2b00      	cmp	r3, #0
    d53e:	d002      	beq.n	d546 <OSQDel+0x8a>
    d540:	2b01      	cmp	r3, #1
    d542:	d02a      	beq.n	d59a <OSQDel+0xde>
    d544:	e094      	b.n	d670 <OSQDel+0x1b4>
        case OS_OPT_DEL_NO_PEND:                            /* Delete message queue only if no task waiting           */
             if (nbr_tasks == (OS_OBJ_QTY)0) {
    d546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    d548:	2b00      	cmp	r3, #0
    d54a:	d11c      	bne.n	d586 <OSQDel+0xca>
#if OS_CFG_DBG_EN > 0u
                 OS_QDbgListRemove(p_q);
    d54c:	68f8      	ldr	r0, [r7, #12]
    d54e:	f000 fc01 	bl	dd54 <OS_QDbgListRemove>
#endif
                 OSQQty--;
    d552:	f244 1360 	movw	r3, #16736	; 0x4160
    d556:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d55a:	881b      	ldrh	r3, [r3, #0]
    d55c:	f103 33ff 	add.w	r3, r3, #4294967295
    d560:	b29a      	uxth	r2, r3
    d562:	f244 1360 	movw	r3, #16736	; 0x4160
    d566:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d56a:	801a      	strh	r2, [r3, #0]
                 OS_QClr(p_q);
    d56c:	68f8      	ldr	r0, [r7, #12]
    d56e:	f000 fb95 	bl	dc9c <OS_QClr>
                 CPU_CRITICAL_EXIT();
    d572:	f7f4 f9cd 	bl	1910 <CPU_IntDisMeasStop>
    d576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d578:	f00a fc38 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_NONE;
    d57c:	687b      	ldr	r3, [r7, #4]
    d57e:	f04f 0200 	mov.w	r2, #0
    d582:	801a      	strh	r2, [r3, #0]
             } else {
                 CPU_CRITICAL_EXIT();
                 *p_err = OS_ERR_TASK_WAITING;
             }
             break;
    d584:	e07e      	b.n	d684 <OSQDel+0x1c8>
                 OSQQty--;
                 OS_QClr(p_q);
                 CPU_CRITICAL_EXIT();
                 *p_err = OS_ERR_NONE;
             } else {
                 CPU_CRITICAL_EXIT();
    d586:	f7f4 f9c3 	bl	1910 <CPU_IntDisMeasStop>
    d58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d58c:	f00a fc2e 	bl	17dec <CPU_SR_Restore>
                 *p_err = OS_ERR_TASK_WAITING;
    d590:	687b      	ldr	r3, [r7, #4]
    d592:	f247 125e 	movw	r2, #29022	; 0x715e
    d596:	801a      	strh	r2, [r3, #0]
             }
             break;
    d598:	e074      	b.n	d684 <OSQDel+0x1c8>

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the message queue                        */
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    d59a:	f643 5350 	movw	r3, #15696	; 0x3d50
    d59e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d5a2:	781b      	ldrb	r3, [r3, #0]
    d5a4:	f103 0301 	add.w	r3, r3, #1
    d5a8:	b2da      	uxtb	r2, r3
    d5aa:	f643 5350 	movw	r3, #15696	; 0x3d50
    d5ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d5b2:	701a      	strb	r2, [r3, #0]
    d5b4:	f643 5350 	movw	r3, #15696	; 0x3d50
    d5b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d5bc:	781b      	ldrb	r3, [r3, #0]
    d5be:	2b01      	cmp	r3, #1
    d5c0:	d101      	bne.n	d5c6 <OSQDel+0x10a>
    d5c2:	f002 f917 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    d5c6:	f7f4 f9a3 	bl	1910 <CPU_IntDisMeasStop>
    d5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5cc:	f00a fc0e 	bl	17dec <CPU_SR_Restore>
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
    d5d0:	f7f5 fea4 	bl	331c <CPU_TS_TmrRd>
    d5d4:	61f8      	str	r0, [r7, #28]
             while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
    d5d6:	e00e      	b.n	d5f6 <OSQDel+0x13a>
                 p_pend_data = p_pend_list->HeadPtr;
    d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5da:	681b      	ldr	r3, [r3, #0]
    d5dc:	61bb      	str	r3, [r7, #24]
                 p_tcb       = p_pend_data->TCBPtr;
    d5de:	69bb      	ldr	r3, [r7, #24]
    d5e0:	689b      	ldr	r3, [r3, #8]
    d5e2:	617b      	str	r3, [r7, #20]
                 OS_PendObjDel((OS_PEND_OBJ *)((void *)p_q),
    d5e4:	68f8      	ldr	r0, [r7, #12]
    d5e6:	6979      	ldr	r1, [r7, #20]
    d5e8:	69fa      	ldr	r2, [r7, #28]
    d5ea:	f001 fdd1 	bl	f190 <OS_PendObjDel>
                               p_tcb,
                               ts);
                 cnt--;
    d5ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    d5f0:	f103 33ff 	add.w	r3, r3, #4294967295
    d5f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
             break;

        case OS_OPT_DEL_ALWAYS:                             /* Always delete the message queue                        */
             OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
             ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
             while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
    d5f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d1ed      	bne.n	d5d8 <OSQDel+0x11c>
                               p_tcb,
                               ts);
                 cnt--;
             }
#if OS_CFG_DBG_EN > 0u
             OS_QDbgListRemove(p_q);
    d5fc:	68f8      	ldr	r0, [r7, #12]
    d5fe:	f000 fba9 	bl	dd54 <OS_QDbgListRemove>
#endif
             OSQQty--;
    d602:	f244 1360 	movw	r3, #16736	; 0x4160
    d606:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d60a:	881b      	ldrh	r3, [r3, #0]
    d60c:	f103 33ff 	add.w	r3, r3, #4294967295
    d610:	b29a      	uxth	r2, r3
    d612:	f244 1360 	movw	r3, #16736	; 0x4160
    d616:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d61a:	801a      	strh	r2, [r3, #0]
             OS_QClr(p_q);
    d61c:	68f8      	ldr	r0, [r7, #12]
    d61e:	f000 fb3d 	bl	dc9c <OS_QClr>
             OS_CRITICAL_EXIT_NO_SCHED();
    d622:	f00a fbdf 	bl	17de4 <CPU_SR_Save>
    d626:	62b8      	str	r0, [r7, #40]	; 0x28
    d628:	f7f4 f946 	bl	18b8 <CPU_IntDisMeasStart>
    d62c:	f643 5350 	movw	r3, #15696	; 0x3d50
    d630:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d634:	781b      	ldrb	r3, [r3, #0]
    d636:	f103 33ff 	add.w	r3, r3, #4294967295
    d63a:	b2da      	uxtb	r2, r3
    d63c:	f643 5350 	movw	r3, #15696	; 0x3d50
    d640:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d644:	701a      	strb	r2, [r3, #0]
    d646:	f643 5350 	movw	r3, #15696	; 0x3d50
    d64a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d64e:	781b      	ldrb	r3, [r3, #0]
    d650:	2b00      	cmp	r3, #0
    d652:	d101      	bne.n	d658 <OSQDel+0x19c>
    d654:	f002 f8e0 	bl	f818 <OS_SchedLockTimeMeasStop>
    d658:	f7f4 f95a 	bl	1910 <CPU_IntDisMeasStop>
    d65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d65e:	f00a fbc5 	bl	17dec <CPU_SR_Restore>
             OSSched();                                     /* Find highest priority task ready to run                */
    d662:	f000 ffdd 	bl	e620 <OSSched>
             *p_err = OS_ERR_NONE;
    d666:	687b      	ldr	r3, [r7, #4]
    d668:	f04f 0200 	mov.w	r2, #0
    d66c:	801a      	strh	r2, [r3, #0]
             break;
    d66e:	e009      	b.n	d684 <OSQDel+0x1c8>

        default:
             CPU_CRITICAL_EXIT();
    d670:	f7f4 f94e 	bl	1910 <CPU_IntDisMeasStop>
    d674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d676:	f00a fbb9 	bl	17dec <CPU_SR_Restore>
             *p_err = OS_ERR_OPT_INVALID;
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	f645 6225 	movw	r2, #24101	; 0x5e25
    d680:	801a      	strh	r2, [r3, #0]
             break;
    d682:	bf00      	nop
    }
    return (nbr_tasks);
    d684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
    d686:	4618      	mov	r0, r3
    d688:	f107 0730 	add.w	r7, r7, #48	; 0x30
    d68c:	46bd      	mov	sp, r7
    d68e:	bd80      	pop	{r7, pc}

0000d690 <OSQFlush>:
*/

#if OS_CFG_Q_FLUSH_EN > 0u
OS_MSG_QTY  OSQFlush (OS_Q    *p_q,
                      OS_ERR  *p_err)
{
    d690:	b580      	push	{r7, lr}
    d692:	b084      	sub	sp, #16
    d694:	af00      	add	r7, sp, #0
    d696:	6078      	str	r0, [r7, #4]
    d698:	6039      	str	r1, [r7, #0]
    OS_MSG_QTY  entries;
    CPU_SR_ALLOC();
    d69a:	f04f 0300 	mov.w	r3, #0
    d69e:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't flush a message queue from an ISR                */
    d6a0:	f244 1381 	movw	r3, #16769	; 0x4181
    d6a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d006      	beq.n	d6bc <OSQFlush+0x2c>
        *p_err = OS_ERR_FLUSH_ISR;
    d6ae:	683b      	ldr	r3, [r7, #0]
    d6b0:	f44f 526c 	mov.w	r2, #15104	; 0x3b00
    d6b4:	801a      	strh	r2, [r3, #0]
        return ((OS_MSG_QTY)0);
    d6b6:	f04f 0300 	mov.w	r3, #0
    d6ba:	e07a      	b.n	d7b2 <OSQFlush+0x122>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	2b00      	cmp	r3, #0
    d6c0:	d106      	bne.n	d6d0 <OSQFlush+0x40>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    d6c2:	683b      	ldr	r3, [r7, #0]
    d6c4:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    d6c8:	801a      	strh	r2, [r3, #0]
        return ((OS_MSG_QTY)0);
    d6ca:	f04f 0300 	mov.w	r3, #0
    d6ce:	e070      	b.n	d7b2 <OSQFlush+0x122>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	681a      	ldr	r2, [r3, #0]
    d6d4:	f245 5351 	movw	r3, #21841	; 0x5551
    d6d8:	f2c5 5345 	movt	r3, #21829	; 0x5545
    d6dc:	429a      	cmp	r2, r3
    d6de:	d006      	beq.n	d6ee <OSQFlush+0x5e>
        *p_err = OS_ERR_OBJ_TYPE;
    d6e0:	683b      	ldr	r3, [r7, #0]
    d6e2:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    d6e6:	801a      	strh	r2, [r3, #0]
        return ((OS_MSG_QTY)0);
    d6e8:	f04f 0300 	mov.w	r3, #0
    d6ec:	e061      	b.n	d7b2 <OSQFlush+0x122>
    }
#endif

    OS_CRITICAL_ENTER();
    d6ee:	f00a fb79 	bl	17de4 <CPU_SR_Save>
    d6f2:	60f8      	str	r0, [r7, #12]
    d6f4:	f7f4 f8e0 	bl	18b8 <CPU_IntDisMeasStart>
    d6f8:	f643 5350 	movw	r3, #15696	; 0x3d50
    d6fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d700:	781b      	ldrb	r3, [r3, #0]
    d702:	f103 0301 	add.w	r3, r3, #1
    d706:	b2da      	uxtb	r2, r3
    d708:	f643 5350 	movw	r3, #15696	; 0x3d50
    d70c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d710:	701a      	strb	r2, [r3, #0]
    d712:	f643 5350 	movw	r3, #15696	; 0x3d50
    d716:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d71a:	781b      	ldrb	r3, [r3, #0]
    d71c:	2b01      	cmp	r3, #1
    d71e:	d101      	bne.n	d724 <OSQFlush+0x94>
    d720:	f002 f868 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    d724:	f7f4 f8f4 	bl	1910 <CPU_IntDisMeasStop>
    d728:	68f8      	ldr	r0, [r7, #12]
    d72a:	f00a fb5f 	bl	17dec <CPU_SR_Restore>
    entries = OS_MsgQFreeAll(&p_q->MsgQ);                   /* Return all OS_MSGs to the OS_MSG pool                  */
    d72e:	687b      	ldr	r3, [r7, #4]
    d730:	f103 0320 	add.w	r3, r3, #32
    d734:	4618      	mov	r0, r3
    d736:	f002 fe37 	bl	103a8 <OS_MsgQFreeAll>
    d73a:	4603      	mov	r3, r0
    d73c:	817b      	strh	r3, [r7, #10]
    OS_CRITICAL_EXIT();
    d73e:	f00a fb51 	bl	17de4 <CPU_SR_Save>
    d742:	60f8      	str	r0, [r7, #12]
    d744:	f7f4 f8b8 	bl	18b8 <CPU_IntDisMeasStart>
    d748:	f643 5350 	movw	r3, #15696	; 0x3d50
    d74c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d750:	781b      	ldrb	r3, [r3, #0]
    d752:	f103 33ff 	add.w	r3, r3, #4294967295
    d756:	b2da      	uxtb	r2, r3
    d758:	f643 5350 	movw	r3, #15696	; 0x3d50
    d75c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d760:	701a      	strb	r2, [r3, #0]
    d762:	f643 5350 	movw	r3, #15696	; 0x3d50
    d766:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d76a:	781b      	ldrb	r3, [r3, #0]
    d76c:	2b00      	cmp	r3, #0
    d76e:	d116      	bne.n	d79e <OSQFlush+0x10e>
    d770:	f002 f852 	bl	f818 <OS_SchedLockTimeMeasStop>
    d774:	f244 533c 	movw	r3, #17724	; 0x453c
    d778:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d77c:	881b      	ldrh	r3, [r3, #0]
    d77e:	2b00      	cmp	r3, #0
    d780:	d007      	beq.n	d792 <OSQFlush+0x102>
    d782:	f7f4 f8c5 	bl	1910 <CPU_IntDisMeasStop>
    d786:	68f8      	ldr	r0, [r7, #12]
    d788:	f00a fb30 	bl	17dec <CPU_SR_Restore>
    d78c:	f001 fff8 	bl	f780 <OS_Sched0>
    d790:	e00a      	b.n	d7a8 <OSQFlush+0x118>
    d792:	f7f4 f8bd 	bl	1910 <CPU_IntDisMeasStop>
    d796:	68f8      	ldr	r0, [r7, #12]
    d798:	f00a fb28 	bl	17dec <CPU_SR_Restore>
    d79c:	e004      	b.n	d7a8 <OSQFlush+0x118>
    d79e:	f7f4 f8b7 	bl	1910 <CPU_IntDisMeasStop>
    d7a2:	68f8      	ldr	r0, [r7, #12]
    d7a4:	f00a fb22 	bl	17dec <CPU_SR_Restore>
    *p_err  = OS_ERR_NONE;
    d7a8:	683b      	ldr	r3, [r7, #0]
    d7aa:	f04f 0200 	mov.w	r2, #0
    d7ae:	801a      	strh	r2, [r3, #0]
    return ((OS_MSG_QTY)entries);
    d7b0:	897b      	ldrh	r3, [r7, #10]
}
    d7b2:	4618      	mov	r0, r3
    d7b4:	f107 0710 	add.w	r7, r7, #16
    d7b8:	46bd      	mov	sp, r7
    d7ba:	bd80      	pop	{r7, pc}

0000d7bc <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
    d7bc:	b580      	push	{r7, lr}
    d7be:	b08e      	sub	sp, #56	; 0x38
    d7c0:	af00      	add	r7, sp, #0
    d7c2:	60f8      	str	r0, [r7, #12]
    d7c4:	60b9      	str	r1, [r7, #8]
    d7c6:	603b      	str	r3, [r7, #0]
    d7c8:	4613      	mov	r3, r2
    d7ca:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
    d7cc:	f04f 0300 	mov.w	r3, #0
    d7d0:	633b      	str	r3, [r7, #48]	; 0x30
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
    d7d2:	f244 1381 	movw	r3, #16769	; 0x4181
    d7d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d7da:	781b      	ldrb	r3, [r3, #0]
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d006      	beq.n	d7ee <OSQPend+0x32>
        *p_err = OS_ERR_PEND_ISR;
    d7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d7e2:	f246 12ae 	movw	r2, #25006	; 0x61ae
    d7e6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    d7e8:	f04f 0300 	mov.w	r3, #0
    d7ec:	e147      	b.n	da7e <OSQPend+0x2c2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
    d7ee:	68fb      	ldr	r3, [r7, #12]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d106      	bne.n	d802 <OSQPend+0x46>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    d7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d7f6:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    d7fa:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    d7fc:	f04f 0300 	mov.w	r3, #0
    d800:	e13d      	b.n	da7e <OSQPend+0x2c2>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
    d802:	683b      	ldr	r3, [r7, #0]
    d804:	2b00      	cmp	r3, #0
    d806:	d106      	bne.n	d816 <OSQPend+0x5a>
        *p_err = OS_ERR_PTR_INVALID;
    d808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d80a:	f246 22d5 	movw	r2, #25301	; 0x62d5
    d80e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    d810:	f04f 0300 	mov.w	r3, #0
    d814:	e133      	b.n	da7e <OSQPend+0x2c2>
    }
    switch (opt) {
    d816:	88fb      	ldrh	r3, [r7, #6]
    d818:	2b00      	cmp	r3, #0
    d81a:	d009      	beq.n	d830 <OSQPend+0x74>
    d81c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    d820:	d006      	beq.n	d830 <OSQPend+0x74>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
             *p_err = OS_ERR_OPT_INVALID;
    d822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d824:	f645 6225 	movw	r2, #24101	; 0x5e25
    d828:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
    d82a:	f04f 0300 	mov.w	r3, #0
    d82e:	e126      	b.n	da7e <OSQPend+0x2c2>
        return ((void *)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
    d830:	bf00      	nop
             return ((void *)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
    d832:	68fb      	ldr	r3, [r7, #12]
    d834:	681a      	ldr	r2, [r3, #0]
    d836:	f245 5351 	movw	r3, #21841	; 0x5551
    d83a:	f2c5 5345 	movt	r3, #21829	; 0x5545
    d83e:	429a      	cmp	r2, r3
    d840:	d006      	beq.n	d850 <OSQPend+0x94>
        *p_err = OS_ERR_OBJ_TYPE;
    d842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d844:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    d848:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    d84a:	f04f 0300 	mov.w	r3, #0
    d84e:	e116      	b.n	da7e <OSQPend+0x2c2>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
    d850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d852:	2b00      	cmp	r3, #0
    d854:	d003      	beq.n	d85e <OSQPend+0xa2>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
    d856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d858:	f04f 0200 	mov.w	r2, #0
    d85c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
    d85e:	f00a fac1 	bl	17de4 <CPU_SR_Save>
    d862:	6338      	str	r0, [r7, #48]	; 0x30
    d864:	f7f4 f828 	bl	18b8 <CPU_IntDisMeasStart>
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
    d868:	68fb      	ldr	r3, [r7, #12]
    d86a:	f103 0320 	add.w	r3, r3, #32
    d86e:	4618      	mov	r0, r3
    d870:	6839      	ldr	r1, [r7, #0]
    d872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d876:	f002 fe05 	bl	10484 <OS_MsgQGet>
    d87a:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
    d87c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d87e:	881b      	ldrh	r3, [r3, #0]
    d880:	2b00      	cmp	r3, #0
    d882:	d106      	bne.n	d892 <OSQPend+0xd6>
        CPU_CRITICAL_EXIT();
    d884:	f7f4 f844 	bl	1910 <CPU_IntDisMeasStop>
    d888:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d88a:	f00a faaf 	bl	17dec <CPU_SR_Restore>
        return (p_void);                                    /* Yes, Return message received                           */
    d88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d890:	e0f5      	b.n	da7e <OSQPend+0x2c2>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
    d892:	88fb      	ldrh	r3, [r7, #6]
    d894:	b21b      	sxth	r3, r3
    d896:	2b00      	cmp	r3, #0
    d898:	da0b      	bge.n	d8b2 <OSQPend+0xf6>
        CPU_CRITICAL_EXIT();
    d89a:	f7f4 f839 	bl	1910 <CPU_IntDisMeasStop>
    d89e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d8a0:	f00a faa4 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_PEND_WOULD_BLOCK;                   /* No                                                     */
    d8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d8a6:	f246 12b0 	movw	r2, #25008	; 0x61b0
    d8aa:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
    d8ac:	f04f 0300 	mov.w	r3, #0
    d8b0:	e0e5      	b.n	da7e <OSQPend+0x2c2>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
    d8b2:	f643 5350 	movw	r3, #15696	; 0x3d50
    d8b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d8ba:	781b      	ldrb	r3, [r3, #0]
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d00b      	beq.n	d8d8 <OSQPend+0x11c>
            CPU_CRITICAL_EXIT();
    d8c0:	f7f4 f826 	bl	1910 <CPU_IntDisMeasStop>
    d8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d8c6:	f00a fa91 	bl	17dec <CPU_SR_Restore>
            *p_err = OS_ERR_SCHED_LOCKED;
    d8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d8cc:	f646 5262 	movw	r2, #28002	; 0x6d62
    d8d0:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
    d8d2:	f04f 0300 	mov.w	r3, #0
    d8d6:	e0d2      	b.n	da7e <OSQPend+0x2c2>
        }
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
    d8d8:	f643 5350 	movw	r3, #15696	; 0x3d50
    d8dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d8e0:	781b      	ldrb	r3, [r3, #0]
    d8e2:	f103 0301 	add.w	r3, r3, #1
    d8e6:	b2da      	uxtb	r2, r3
    d8e8:	f643 5350 	movw	r3, #15696	; 0x3d50
    d8ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d8f0:	701a      	strb	r2, [r3, #0]
    d8f2:	f643 5350 	movw	r3, #15696	; 0x3d50
    d8f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d8fa:	781b      	ldrb	r3, [r3, #0]
    d8fc:	2b01      	cmp	r3, #1
    d8fe:	d101      	bne.n	d904 <OSQPend+0x148>
    d900:	f001 ff78 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    d904:	f7f4 f804 	bl	1910 <CPU_IntDisMeasStop>
    d908:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d90a:	f00a fa6f 	bl	17dec <CPU_SR_Restore>
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
    d90e:	f107 0310 	add.w	r3, r7, #16
    d912:	4618      	mov	r0, r3
    d914:	68f9      	ldr	r1, [r7, #12]
    d916:	f04f 0205 	mov.w	r2, #5
    d91a:	68bb      	ldr	r3, [r7, #8]
    d91c:	f001 f918 	bl	eb50 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
    d920:	f00a fa60 	bl	17de4 <CPU_SR_Save>
    d924:	6338      	str	r0, [r7, #48]	; 0x30
    d926:	f7f3 ffc7 	bl	18b8 <CPU_IntDisMeasStart>
    d92a:	f643 5350 	movw	r3, #15696	; 0x3d50
    d92e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	f103 33ff 	add.w	r3, r3, #4294967295
    d938:	b2da      	uxtb	r2, r3
    d93a:	f643 5350 	movw	r3, #15696	; 0x3d50
    d93e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d942:	701a      	strb	r2, [r3, #0]
    d944:	f643 5350 	movw	r3, #15696	; 0x3d50
    d948:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d94c:	781b      	ldrb	r3, [r3, #0]
    d94e:	2b00      	cmp	r3, #0
    d950:	d101      	bne.n	d956 <OSQPend+0x19a>
    d952:	f001 ff61 	bl	f818 <OS_SchedLockTimeMeasStop>
    d956:	f7f3 ffdb 	bl	1910 <CPU_IntDisMeasStop>
    d95a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d95c:	f00a fa46 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Find the next highest priority task ready to run       */
    d960:	f000 fe5e 	bl	e620 <OSSched>

    CPU_CRITICAL_ENTER();
    d964:	f00a fa3e 	bl	17de4 <CPU_SR_Save>
    d968:	6338      	str	r0, [r7, #48]	; 0x30
    d96a:	f7f3 ffa5 	bl	18b8 <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {
    d96e:	f244 135c 	movw	r3, #16732	; 0x415c
    d972:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d976:	681b      	ldr	r3, [r3, #0]
    d978:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    d97c:	2b03      	cmp	r3, #3
    d97e:	d86c      	bhi.n	da5a <OSQPend+0x29e>
    d980:	a201      	add	r2, pc, #4	; (adr r2, d988 <OSQPend+0x1cc>)
    d982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d986:	bf00      	nop
    d988:	0000d999 	.word	0x0000d999
    d98c:	0000d9d9 	.word	0x0000d9d9
    d990:	0000da2d 	.word	0x0000da2d
    d994:	0000da07 	.word	0x0000da07
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void      = OSTCBCurPtr->MsgPtr;
    d998:	f244 135c 	movw	r3, #16732	; 0x415c
    d99c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9a0:	681b      	ldr	r3, [r3, #0]
    d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d9a4:	637b      	str	r3, [r7, #52]	; 0x34
             *p_msg_size = OSTCBCurPtr->MsgSize;
    d9a6:	f244 135c 	movw	r3, #16732	; 0x415c
    d9aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9ae:	681b      	ldr	r3, [r3, #0]
    d9b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    d9b4:	683b      	ldr	r3, [r7, #0]
    d9b6:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    d9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d007      	beq.n	d9ce <OSQPend+0x212>
                *p_ts  =  OSTCBCurPtr->TS;
    d9be:	f244 135c 	movw	r3, #16732	; 0x415c
    d9c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9c6:	681b      	ldr	r3, [r3, #0]
    d9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d9cc:	601a      	str	r2, [r3, #0]
             }
             *p_err      = OS_ERR_NONE;
    d9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d9d0:	f04f 0200 	mov.w	r2, #0
    d9d4:	801a      	strh	r2, [r3, #0]
             break;
    d9d6:	e04c      	b.n	da72 <OSQPend+0x2b6>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void      = (void      *)0;
    d9d8:	f04f 0300 	mov.w	r3, #0
    d9dc:	637b      	str	r3, [r7, #52]	; 0x34
             *p_msg_size = (OS_MSG_SIZE)0;
    d9de:	683b      	ldr	r3, [r7, #0]
    d9e0:	f04f 0200 	mov.w	r2, #0
    d9e4:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    d9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d007      	beq.n	d9fc <OSQPend+0x240>
                *p_ts  =  OSTCBCurPtr->TS;
    d9ec:	f244 135c 	movw	r3, #16732	; 0x415c
    d9f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9f4:	681b      	ldr	r3, [r3, #0]
    d9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d9fa:	601a      	str	r2, [r3, #0]
             }
             *p_err      = OS_ERR_PEND_ABORT;
    d9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d9fe:	f246 12a9 	movw	r2, #25001	; 0x61a9
    da02:	801a      	strh	r2, [r3, #0]
             break;
    da04:	e035      	b.n	da72 <OSQPend+0x2b6>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void      = (void      *)0;
    da06:	f04f 0300 	mov.w	r3, #0
    da0a:	637b      	str	r3, [r7, #52]	; 0x34
             *p_msg_size = (OS_MSG_SIZE)0;
    da0c:	683b      	ldr	r3, [r7, #0]
    da0e:	f04f 0200 	mov.w	r2, #0
    da12:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    da14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da16:	2b00      	cmp	r3, #0
    da18:	d003      	beq.n	da22 <OSQPend+0x266>
                *p_ts  = (CPU_TS  )0;
    da1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da1c:	f04f 0200 	mov.w	r2, #0
    da20:	601a      	str	r2, [r3, #0]
             }
             *p_err      = OS_ERR_TIMEOUT;
    da22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    da24:	f247 22d9 	movw	r2, #29401	; 0x72d9
    da28:	801a      	strh	r2, [r3, #0]
             break;
    da2a:	e022      	b.n	da72 <OSQPend+0x2b6>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void      = (void      *)0;
    da2c:	f04f 0300 	mov.w	r3, #0
    da30:	637b      	str	r3, [r7, #52]	; 0x34
             *p_msg_size = (OS_MSG_SIZE)0;
    da32:	683b      	ldr	r3, [r7, #0]
    da34:	f04f 0200 	mov.w	r2, #0
    da38:	801a      	strh	r2, [r3, #0]
             if (p_ts != (CPU_TS *)0) {
    da3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da3c:	2b00      	cmp	r3, #0
    da3e:	d007      	beq.n	da50 <OSQPend+0x294>
                *p_ts  =  OSTCBCurPtr->TS;
    da40:	f244 135c 	movw	r3, #16732	; 0x415c
    da44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    da48:	681b      	ldr	r3, [r3, #0]
    da4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    da4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    da4e:	601a      	str	r2, [r3, #0]
             }
             *p_err      = OS_ERR_OBJ_DEL;
    da50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    da52:	f645 52c2 	movw	r2, #24002	; 0x5dc2
    da56:	801a      	strh	r2, [r3, #0]
             break;
    da58:	e00b      	b.n	da72 <OSQPend+0x2b6>

        default:
             p_void      = (void      *)0;
    da5a:	f04f 0300 	mov.w	r3, #0
    da5e:	637b      	str	r3, [r7, #52]	; 0x34
             *p_msg_size = (OS_MSG_SIZE)0;
    da60:	683b      	ldr	r3, [r7, #0]
    da62:	f04f 0200 	mov.w	r2, #0
    da66:	801a      	strh	r2, [r3, #0]
             *p_err      = OS_ERR_STATUS_INVALID;
    da68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    da6a:	f646 622b 	movw	r2, #28203	; 0x6e2b
    da6e:	801a      	strh	r2, [r3, #0]
             break;
    da70:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
    da72:	f7f3 ff4d 	bl	1910 <CPU_IntDisMeasStop>
    da76:	6b38      	ldr	r0, [r7, #48]	; 0x30
    da78:	f00a f9b8 	bl	17dec <CPU_SR_Restore>
    return (p_void);
    da7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    da7e:	4618      	mov	r0, r3
    da80:	f107 0738 	add.w	r7, r7, #56	; 0x38
    da84:	46bd      	mov	sp, r7
    da86:	bd80      	pop	{r7, pc}

0000da88 <OSQPendAbort>:

#if OS_CFG_Q_PEND_ABORT_EN > 0u
OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
                          OS_OPT   opt,
                          OS_ERR  *p_err)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b08a      	sub	sp, #40	; 0x28
    da8c:	af00      	add	r7, sp, #0
    da8e:	60f8      	str	r0, [r7, #12]
    da90:	460b      	mov	r3, r1
    da92:	607a      	str	r2, [r7, #4]
    da94:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_OBJ_QTY     nbr_tasks;
    CPU_SR_ALLOC();
    da96:	f04f 0300 	mov.w	r3, #0
    da9a:	623b      	str	r3, [r7, #32]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
    da9c:	f244 1381 	movw	r3, #16769	; 0x4181
    daa0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	2b00      	cmp	r3, #0
    daa8:	d006      	beq.n	dab8 <OSQPendAbort+0x30>
       *p_err =  OS_ERR_PEND_ABORT_ISR;
    daaa:	687b      	ldr	r3, [r7, #4]
    daac:	f246 12aa 	movw	r2, #25002	; 0x61aa
    dab0:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    dab2:	f04f 0300 	mov.w	r3, #0
    dab6:	e0a3      	b.n	dc00 <OSQPendAbort+0x178>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
    dab8:	68fb      	ldr	r3, [r7, #12]
    daba:	2b00      	cmp	r3, #0
    dabc:	d106      	bne.n	dacc <OSQPendAbort+0x44>
       *p_err =  OS_ERR_OBJ_PTR_NULL;
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    dac4:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    dac6:	f04f 0300 	mov.w	r3, #0
    daca:	e099      	b.n	dc00 <OSQPendAbort+0x178>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
    dacc:	897b      	ldrh	r3, [r7, #10]
    dace:	2b00      	cmp	r3, #0
    dad0:	d009      	beq.n	dae6 <OSQPendAbort+0x5e>
    dad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dad6:	d006      	beq.n	dae6 <OSQPendAbort+0x5e>
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;

        default:
            *p_err =  OS_ERR_OPT_INVALID;
    dad8:	687b      	ldr	r3, [r7, #4]
    dada:	f645 6225 	movw	r2, #24101	; 0x5e25
    dade:	801a      	strh	r2, [r3, #0]
             return ((OS_OBJ_QTY)0u);
    dae0:	f04f 0300 	mov.w	r3, #0
    dae4:	e08c      	b.n	dc00 <OSQPendAbort+0x178>
        return ((OS_OBJ_QTY)0u);
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_ABORT_1:
        case OS_OPT_PEND_ABORT_ALL:
             break;
    dae6:	bf00      	nop
             return ((OS_OBJ_QTY)0u);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure queue was created                            */
    dae8:	68fb      	ldr	r3, [r7, #12]
    daea:	681a      	ldr	r2, [r3, #0]
    daec:	f245 5351 	movw	r3, #21841	; 0x5551
    daf0:	f2c5 5345 	movt	r3, #21829	; 0x5545
    daf4:	429a      	cmp	r2, r3
    daf6:	d006      	beq.n	db06 <OSQPendAbort+0x7e>
       *p_err =  OS_ERR_OBJ_TYPE;
    daf8:	687b      	ldr	r3, [r7, #4]
    dafa:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    dafe:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    db00:	f04f 0300 	mov.w	r3, #0
    db04:	e07c      	b.n	dc00 <OSQPendAbort+0x178>
    }
#endif

    CPU_CRITICAL_ENTER();
    db06:	f00a f96d 	bl	17de4 <CPU_SR_Save>
    db0a:	6238      	str	r0, [r7, #32]
    db0c:	f7f3 fed4 	bl	18b8 <CPU_IntDisMeasStart>
    p_pend_list = &p_q->PendList;
    db10:	68fb      	ldr	r3, [r7, #12]
    db12:	f103 0308 	add.w	r3, r3, #8
    db16:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on queue?                             */
    db18:	69fb      	ldr	r3, [r7, #28]
    db1a:	891b      	ldrh	r3, [r3, #8]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d10b      	bne.n	db38 <OSQPendAbort+0xb0>
        CPU_CRITICAL_EXIT();                                /* No                                                     */
    db20:	f7f3 fef6 	bl	1910 <CPU_IntDisMeasStop>
    db24:	6a38      	ldr	r0, [r7, #32]
    db26:	f00a f961 	bl	17dec <CPU_SR_Restore>
       *p_err =  OS_ERR_PEND_ABORT_NONE;
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	f246 12ab 	movw	r2, #25003	; 0x61ab
    db30:	801a      	strh	r2, [r3, #0]
        return ((OS_OBJ_QTY)0u);
    db32:	f04f 0300 	mov.w	r3, #0
    db36:	e063      	b.n	dc00 <OSQPendAbort+0x178>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    db38:	f643 5350 	movw	r3, #15696	; 0x3d50
    db3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    db40:	781b      	ldrb	r3, [r3, #0]
    db42:	f103 0301 	add.w	r3, r3, #1
    db46:	b2da      	uxtb	r2, r3
    db48:	f643 5350 	movw	r3, #15696	; 0x3d50
    db4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    db50:	701a      	strb	r2, [r3, #0]
    db52:	f643 5350 	movw	r3, #15696	; 0x3d50
    db56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    db5a:	781b      	ldrb	r3, [r3, #0]
    db5c:	2b01      	cmp	r3, #1
    db5e:	d101      	bne.n	db64 <OSQPendAbort+0xdc>
    db60:	f001 fe48 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    db64:	f7f3 fed4 	bl	1910 <CPU_IntDisMeasStop>
    db68:	6a38      	ldr	r0, [r7, #32]
    db6a:	f00a f93f 	bl	17dec <CPU_SR_Restore>
    nbr_tasks = 0u;
    db6e:	f04f 0300 	mov.w	r3, #0
    db72:	84fb      	strh	r3, [r7, #38]	; 0x26
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    db74:	f7f5 fbd2 	bl	331c <CPU_TS_TmrRd>
    db78:	61b8      	str	r0, [r7, #24]
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    db7a:	e010      	b.n	db9e <OSQPendAbort+0x116>
        p_tcb = p_pend_list->HeadPtr->TCBPtr;
    db7c:	69fb      	ldr	r3, [r7, #28]
    db7e:	681b      	ldr	r3, [r3, #0]
    db80:	689b      	ldr	r3, [r3, #8]
    db82:	617b      	str	r3, [r7, #20]
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
    db84:	68f8      	ldr	r0, [r7, #12]
    db86:	6979      	ldr	r1, [r7, #20]
    db88:	69ba      	ldr	r2, [r7, #24]
    db8a:	f001 f83b 	bl	ec04 <OS_PendAbort>
                     p_tcb,
                     ts);
        nbr_tasks++;
    db8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    db90:	f103 0301 	add.w	r3, r3, #1
    db94:	84fb      	strh	r3, [r7, #38]	; 0x26
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
    db96:	897b      	ldrh	r3, [r7, #10]
    db98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    db9c:	d104      	bne.n	dba8 <OSQPendAbort+0x120>
    }

    OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
    nbr_tasks = 0u;
    ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
    while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
    db9e:	69fb      	ldr	r3, [r7, #28]
    dba0:	891b      	ldrh	r3, [r3, #8]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d1ea      	bne.n	db7c <OSQPendAbort+0xf4>
    dba6:	e000      	b.n	dbaa <OSQPendAbort+0x122>
        OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
                     p_tcb,
                     ts);
        nbr_tasks++;
        if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
            break;                                          /* No                                                     */
    dba8:	bf00      	nop
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    dbaa:	f00a f91b 	bl	17de4 <CPU_SR_Save>
    dbae:	6238      	str	r0, [r7, #32]
    dbb0:	f7f3 fe82 	bl	18b8 <CPU_IntDisMeasStart>
    dbb4:	f643 5350 	movw	r3, #15696	; 0x3d50
    dbb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dbbc:	781b      	ldrb	r3, [r3, #0]
    dbbe:	f103 33ff 	add.w	r3, r3, #4294967295
    dbc2:	b2da      	uxtb	r2, r3
    dbc4:	f643 5350 	movw	r3, #15696	; 0x3d50
    dbc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dbcc:	701a      	strb	r2, [r3, #0]
    dbce:	f643 5350 	movw	r3, #15696	; 0x3d50
    dbd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d101      	bne.n	dbe0 <OSQPendAbort+0x158>
    dbdc:	f001 fe1c 	bl	f818 <OS_SchedLockTimeMeasStop>
    dbe0:	f7f3 fe96 	bl	1910 <CPU_IntDisMeasStop>
    dbe4:	6a38      	ldr	r0, [r7, #32]
    dbe6:	f00a f901 	bl	17dec <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
    dbea:	897b      	ldrh	r3, [r7, #10]
    dbec:	b21b      	sxth	r3, r3
    dbee:	2b00      	cmp	r3, #0
    dbf0:	db01      	blt.n	dbf6 <OSQPendAbort+0x16e>
        OSSched();                                          /* Run the scheduler                                      */
    dbf2:	f000 fd15 	bl	e620 <OSSched>
    }

   *p_err = OS_ERR_NONE;
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	f04f 0200 	mov.w	r2, #0
    dbfc:	801a      	strh	r2, [r3, #0]
    return (nbr_tasks);
    dbfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
    dc00:	4618      	mov	r0, r3
    dc02:	f107 0728 	add.w	r7, r7, #40	; 0x28
    dc06:	46bd      	mov	sp, r7
    dc08:	bd80      	pop	{r7, pc}
    dc0a:	bf00      	nop

0000dc0c <OSQPost>:
void  OSQPost (OS_Q        *p_q,
               void        *p_void,
               OS_MSG_SIZE  msg_size,
               OS_OPT       opt,
               OS_ERR      *p_err)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b08a      	sub	sp, #40	; 0x28
    dc10:	af04      	add	r7, sp, #16
    dc12:	60f8      	str	r0, [r7, #12]
    dc14:	60b9      	str	r1, [r7, #8]
    dc16:	80fa      	strh	r2, [r7, #6]
    dc18:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
    dc1a:	68fb      	ldr	r3, [r7, #12]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d104      	bne.n	dc2a <OSQPost+0x1e>
        *p_err = OS_ERR_OBJ_PTR_NULL;
    dc20:	6a3b      	ldr	r3, [r7, #32]
    dc22:	f645 52c3 	movw	r2, #24003	; 0x5dc3
    dc26:	801a      	strh	r2, [r3, #0]
        return;
    dc28:	e033      	b.n	dc92 <OSQPost+0x86>
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
    dc2a:	68fb      	ldr	r3, [r7, #12]
    dc2c:	681a      	ldr	r2, [r3, #0]
    dc2e:	f245 5351 	movw	r3, #21841	; 0x5551
    dc32:	f2c5 5345 	movt	r3, #21829	; 0x5545
    dc36:	429a      	cmp	r2, r3
    dc38:	d004      	beq.n	dc44 <OSQPost+0x38>
        *p_err = OS_ERR_OBJ_TYPE;
    dc3a:	6a3b      	ldr	r3, [r7, #32]
    dc3c:	f645 52c4 	movw	r2, #24004	; 0x5dc4
    dc40:	801a      	strh	r2, [r3, #0]
        return;
    dc42:	e026      	b.n	dc92 <OSQPost+0x86>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
    dc44:	f7f5 fb6a 	bl	331c <CPU_TS_TmrRd>
    dc48:	6178      	str	r0, [r7, #20]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {
    dc4a:	f244 1381 	movw	r3, #16769	; 0x4181
    dc4e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc52:	781b      	ldrb	r3, [r3, #0]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d012      	beq.n	dc7e <OSQPost+0x72>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_Q,             /* Post to ISR queue                                      */
    dc58:	88fb      	ldrh	r3, [r7, #6]
    dc5a:	f04f 0200 	mov.w	r2, #0
    dc5e:	9200      	str	r2, [sp, #0]
    dc60:	88ba      	ldrh	r2, [r7, #4]
    dc62:	9201      	str	r2, [sp, #4]
    dc64:	697a      	ldr	r2, [r7, #20]
    dc66:	9202      	str	r2, [sp, #8]
    dc68:	6a3a      	ldr	r2, [r7, #32]
    dc6a:	9203      	str	r2, [sp, #12]
    dc6c:	f245 5051 	movw	r0, #21841	; 0x5551
    dc70:	f2c5 5045 	movt	r0, #21829	; 0x5545
    dc74:	68f9      	ldr	r1, [r7, #12]
    dc76:	68ba      	ldr	r2, [r7, #8]
    dc78:	f002 fed0 	bl	10a1c <OS_IntQPost>
                    (OS_MSG_SIZE)msg_size,
                    (OS_FLAGS   )0,
                    (OS_OPT     )opt,
                    (CPU_TS     )ts,
                    (OS_ERR    *)p_err);
        return;
    dc7c:	e009      	b.n	dc92 <OSQPost+0x86>
    }
#endif

    OS_QPost(p_q,
    dc7e:	88fa      	ldrh	r2, [r7, #6]
    dc80:	88bb      	ldrh	r3, [r7, #4]
    dc82:	6979      	ldr	r1, [r7, #20]
    dc84:	9100      	str	r1, [sp, #0]
    dc86:	6a39      	ldr	r1, [r7, #32]
    dc88:	9101      	str	r1, [sp, #4]
    dc8a:	68f8      	ldr	r0, [r7, #12]
    dc8c:	68b9      	ldr	r1, [r7, #8]
    dc8e:	f000 f8bb 	bl	de08 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
    dc92:	f107 0718 	add.w	r7, r7, #24
    dc96:	46bd      	mov	sp, r7
    dc98:	bd80      	pop	{r7, pc}
    dc9a:	bf00      	nop

0000dc9c <OS_QClr>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QClr (OS_Q *p_q)
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	b082      	sub	sp, #8
    dca0:	af00      	add	r7, sp, #0
    dca2:	6078      	str	r0, [r7, #4]
    (void)OS_MsgQFreeAll(&p_q->MsgQ);                       /* Return all OS_MSGs to the free list                    */
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	f103 0320 	add.w	r3, r3, #32
    dcaa:	4618      	mov	r0, r3
    dcac:	f002 fb7c 	bl	103a8 <OS_MsgQFreeAll>
    p_q->Type    =  OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                      */
    dcb0:	687a      	ldr	r2, [r7, #4]
    dcb2:	f644 734e 	movw	r3, #20302	; 0x4f4e
    dcb6:	f2c4 534e 	movt	r3, #17742	; 0x454e
    dcba:	6013      	str	r3, [r2, #0]
    p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
    dcbc:	687a      	ldr	r2, [r7, #4]
    dcbe:	f64c 139c 	movw	r3, #51612	; 0xc99c
    dcc2:	f2c0 0302 	movt	r3, #2
    dcc6:	6053      	str	r3, [r2, #4]
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the list of OS_MSGs                         */
    dcc8:	687b      	ldr	r3, [r7, #4]
    dcca:	f103 0320 	add.w	r3, r3, #32
    dcce:	4618      	mov	r0, r3
    dcd0:	f04f 0100 	mov.w	r1, #0
    dcd4:	f002 fbb8 	bl	10448 <OS_MsgQInit>
                0u);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
    dcd8:	687b      	ldr	r3, [r7, #4]
    dcda:	f103 0308 	add.w	r3, r3, #8
    dcde:	4618      	mov	r0, r3
    dce0:	f001 f91c 	bl	ef1c <OS_PendListInit>
}
    dce4:	f107 0708 	add.w	r7, r7, #8
    dce8:	46bd      	mov	sp, r7
    dcea:	bd80      	pop	{r7, pc}

0000dcec <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
    dcec:	b480      	push	{r7}
    dcee:	b083      	sub	sp, #12
    dcf0:	af00      	add	r7, sp, #0
    dcf2:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
    dcf4:	687a      	ldr	r2, [r7, #4]
    dcf6:	f64c 13a0 	movw	r3, #51616	; 0xc9a0
    dcfa:	f2c0 0302 	movt	r3, #2
    dcfe:	61d3      	str	r3, [r2, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
    dd00:	687b      	ldr	r3, [r7, #4]
    dd02:	f04f 0200 	mov.w	r2, #0
    dd06:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
    dd08:	f244 3338 	movw	r3, #17208	; 0x4338
    dd0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd10:	681b      	ldr	r3, [r3, #0]
    dd12:	2b00      	cmp	r3, #0
    dd14:	d104      	bne.n	dd20 <OS_QDbgListAdd+0x34>
        p_q->DbgNextPtr           = (OS_Q     *)0;
    dd16:	687b      	ldr	r3, [r7, #4]
    dd18:	f04f 0200 	mov.w	r2, #0
    dd1c:	619a      	str	r2, [r3, #24]
    dd1e:	e00d      	b.n	dd3c <OS_QDbgListAdd+0x50>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
    dd20:	f244 3338 	movw	r3, #17208	; 0x4338
    dd24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd28:	681a      	ldr	r2, [r3, #0]
    dd2a:	687b      	ldr	r3, [r7, #4]
    dd2c:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
    dd2e:	f244 3338 	movw	r3, #17208	; 0x4338
    dd32:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd36:	681b      	ldr	r3, [r3, #0]
    dd38:	687a      	ldr	r2, [r7, #4]
    dd3a:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
    dd3c:	f244 3338 	movw	r3, #17208	; 0x4338
    dd40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd44:	687a      	ldr	r2, [r7, #4]
    dd46:	601a      	str	r2, [r3, #0]
}
    dd48:	f107 070c 	add.w	r7, r7, #12
    dd4c:	46bd      	mov	sp, r7
    dd4e:	bc80      	pop	{r7}
    dd50:	4770      	bx	lr
    dd52:	bf00      	nop

0000dd54 <OS_QDbgListRemove>:



void  OS_QDbgListRemove (OS_Q  *p_q)
{
    dd54:	b480      	push	{r7}
    dd56:	b085      	sub	sp, #20
    dd58:	af00      	add	r7, sp, #0
    dd5a:	6078      	str	r0, [r7, #4]
    OS_Q  *p_q_next;
    OS_Q  *p_q_prev;


    p_q_prev = p_q->DbgPrevPtr;
    dd5c:	687b      	ldr	r3, [r7, #4]
    dd5e:	695b      	ldr	r3, [r3, #20]
    dd60:	60fb      	str	r3, [r7, #12]
    p_q_next = p_q->DbgNextPtr;
    dd62:	687b      	ldr	r3, [r7, #4]
    dd64:	699b      	ldr	r3, [r3, #24]
    dd66:	60bb      	str	r3, [r7, #8]

    if (p_q_prev == (OS_Q *)0) {
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	d111      	bne.n	dd92 <OS_QDbgListRemove+0x3e>
        OSQDbgListPtr = p_q_next;
    dd6e:	f244 3338 	movw	r3, #17208	; 0x4338
    dd72:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd76:	68ba      	ldr	r2, [r7, #8]
    dd78:	601a      	str	r2, [r3, #0]
        if (p_q_next != (OS_Q *)0) {
    dd7a:	68bb      	ldr	r3, [r7, #8]
    dd7c:	2b00      	cmp	r3, #0
    dd7e:	d003      	beq.n	dd88 <OS_QDbgListRemove+0x34>
            p_q_next->DbgPrevPtr = (OS_Q *)0;
    dd80:	68bb      	ldr	r3, [r7, #8]
    dd82:	f04f 0200 	mov.w	r2, #0
    dd86:	615a      	str	r2, [r3, #20]
        }
        p_q->DbgNextPtr = (OS_Q *)0;
    dd88:	687b      	ldr	r3, [r7, #4]
    dd8a:	f04f 0200 	mov.w	r2, #0
    dd8e:	619a      	str	r2, [r3, #24]
    dd90:	e019      	b.n	ddc6 <OS_QDbgListRemove+0x72>

    } else if (p_q_next == (OS_Q *)0) {
    dd92:	68bb      	ldr	r3, [r7, #8]
    dd94:	2b00      	cmp	r3, #0
    dd96:	d108      	bne.n	ddaa <OS_QDbgListRemove+0x56>
        p_q_prev->DbgNextPtr = (OS_Q *)0;
    dd98:	68fb      	ldr	r3, [r7, #12]
    dd9a:	f04f 0200 	mov.w	r2, #0
    dd9e:	619a      	str	r2, [r3, #24]
        p_q->DbgPrevPtr      = (OS_Q *)0;
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	f04f 0200 	mov.w	r2, #0
    dda6:	615a      	str	r2, [r3, #20]
    dda8:	e00d      	b.n	ddc6 <OS_QDbgListRemove+0x72>

    } else {
        p_q_prev->DbgNextPtr =  p_q_next;
    ddaa:	68fb      	ldr	r3, [r7, #12]
    ddac:	68ba      	ldr	r2, [r7, #8]
    ddae:	619a      	str	r2, [r3, #24]
        p_q_next->DbgPrevPtr =  p_q_prev;
    ddb0:	68bb      	ldr	r3, [r7, #8]
    ddb2:	68fa      	ldr	r2, [r7, #12]
    ddb4:	615a      	str	r2, [r3, #20]
        p_q->DbgNextPtr      = (OS_Q *)0;
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	f04f 0200 	mov.w	r2, #0
    ddbc:	619a      	str	r2, [r3, #24]
        p_q->DbgPrevPtr      = (OS_Q *)0;
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	f04f 0200 	mov.w	r2, #0
    ddc4:	615a      	str	r2, [r3, #20]
    }
}
    ddc6:	f107 0714 	add.w	r7, r7, #20
    ddca:	46bd      	mov	sp, r7
    ddcc:	bc80      	pop	{r7}
    ddce:	4770      	bx	lr

0000ddd0 <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR *p_err)
{
    ddd0:	b480      	push	{r7}
    ddd2:	b083      	sub	sp, #12
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
    ddd8:	f244 3338 	movw	r3, #17208	; 0x4338
    dddc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dde0:	f04f 0200 	mov.w	r2, #0
    dde4:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
    dde6:	f244 1360 	movw	r3, #16736	; 0x4160
    ddea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ddee:	f04f 0200 	mov.w	r2, #0
    ddf2:	801a      	strh	r2, [r3, #0]
    *p_err        = OS_ERR_NONE;
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	f04f 0200 	mov.w	r2, #0
    ddfa:	801a      	strh	r2, [r3, #0]
}
    ddfc:	f107 070c 	add.w	r7, r7, #12
    de00:	46bd      	mov	sp, r7
    de02:	bc80      	pop	{r7}
    de04:	4770      	bx	lr
    de06:	bf00      	nop

0000de08 <OS_QPost>:
                void        *p_void,
                OS_MSG_SIZE  msg_size,
                OS_OPT       opt,
                CPU_TS       ts,
                OS_ERR      *p_err)
{
    de08:	b580      	push	{r7, lr}
    de0a:	b08c      	sub	sp, #48	; 0x30
    de0c:	af02      	add	r7, sp, #8
    de0e:	60f8      	str	r0, [r7, #12]
    de10:	60b9      	str	r1, [r7, #8]
    de12:	80fa      	strh	r2, [r7, #6]
    de14:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
    de16:	f04f 0300 	mov.w	r3, #0
    de1a:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
    de1c:	f009 ffe2 	bl	17de4 <CPU_SR_Save>
    de20:	61f8      	str	r0, [r7, #28]
    de22:	f7f3 fd49 	bl	18b8 <CPU_IntDisMeasStart>
    de26:	f643 5350 	movw	r3, #15696	; 0x3d50
    de2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	f103 0301 	add.w	r3, r3, #1
    de34:	b2da      	uxtb	r2, r3
    de36:	f643 5350 	movw	r3, #15696	; 0x3d50
    de3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de3e:	701a      	strb	r2, [r3, #0]
    de40:	f643 5350 	movw	r3, #15696	; 0x3d50
    de44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de48:	781b      	ldrb	r3, [r3, #0]
    de4a:	2b01      	cmp	r3, #1
    de4c:	d101      	bne.n	de52 <OS_QPost+0x4a>
    de4e:	f001 fcd1 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    de52:	f7f3 fd5d 	bl	1910 <CPU_IntDisMeasStop>
    de56:	69f8      	ldr	r0, [r7, #28]
    de58:	f009 ffc8 	bl	17dec <CPU_SR_Restore>
    p_pend_list = &p_q->PendList;
    de5c:	68fb      	ldr	r3, [r7, #12]
    de5e:	f103 0308 	add.w	r3, r3, #8
    de62:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
    de64:	69bb      	ldr	r3, [r7, #24]
    de66:	891b      	ldrh	r3, [r3, #8]
    de68:	2b00      	cmp	r3, #0
    de6a:	d14e      	bne.n	df0a <OS_QPost+0x102>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
    de6c:	88bb      	ldrh	r3, [r7, #4]
    de6e:	f003 0310 	and.w	r3, r3, #16
    de72:	2b00      	cmp	r3, #0
    de74:	d103      	bne.n	de7e <OS_QPost+0x76>
            post_type = OS_OPT_POST_FIFO;
    de76:	f04f 0300 	mov.w	r3, #0
    de7a:	84bb      	strh	r3, [r7, #36]	; 0x24
    de7c:	e002      	b.n	de84 <OS_QPost+0x7c>
        } else {
            post_type = OS_OPT_POST_LIFO;
    de7e:	f04f 0310 	mov.w	r3, #16
    de82:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
    de84:	68fb      	ldr	r3, [r7, #12]
    de86:	f103 0120 	add.w	r1, r3, #32
    de8a:	88fa      	ldrh	r2, [r7, #6]
    de8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    de8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    de90:	9000      	str	r0, [sp, #0]
    de92:	6b78      	ldr	r0, [r7, #52]	; 0x34
    de94:	9001      	str	r0, [sp, #4]
    de96:	4608      	mov	r0, r1
    de98:	68b9      	ldr	r1, [r7, #8]
    de9a:	f002 fb6b 	bl	10574 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
    de9e:	f009 ffa1 	bl	17de4 <CPU_SR_Save>
    dea2:	61f8      	str	r0, [r7, #28]
    dea4:	f7f3 fd08 	bl	18b8 <CPU_IntDisMeasStart>
    dea8:	f643 5350 	movw	r3, #15696	; 0x3d50
    deac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    deb0:	781b      	ldrb	r3, [r3, #0]
    deb2:	f103 33ff 	add.w	r3, r3, #4294967295
    deb6:	b2da      	uxtb	r2, r3
    deb8:	f643 5350 	movw	r3, #15696	; 0x3d50
    debc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dec0:	701a      	strb	r2, [r3, #0]
    dec2:	f643 5350 	movw	r3, #15696	; 0x3d50
    dec6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    deca:	781b      	ldrb	r3, [r3, #0]
    decc:	2b00      	cmp	r3, #0
    dece:	d116      	bne.n	defe <OS_QPost+0xf6>
    ded0:	f001 fca2 	bl	f818 <OS_SchedLockTimeMeasStop>
    ded4:	f244 533c 	movw	r3, #17724	; 0x453c
    ded8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dedc:	881b      	ldrh	r3, [r3, #0]
    dede:	2b00      	cmp	r3, #0
    dee0:	d007      	beq.n	def2 <OS_QPost+0xea>
    dee2:	f7f3 fd15 	bl	1910 <CPU_IntDisMeasStop>
    dee6:	69f8      	ldr	r0, [r7, #28]
    dee8:	f009 ff80 	bl	17dec <CPU_SR_Restore>
    deec:	f001 fc48 	bl	f780 <OS_Sched0>
        return;
    def0:	e05c      	b.n	dfac <OS_QPost+0x1a4>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
    def2:	f7f3 fd0d 	bl	1910 <CPU_IntDisMeasStop>
    def6:	69f8      	ldr	r0, [r7, #28]
    def8:	f009 ff78 	bl	17dec <CPU_SR_Restore>
        return;
    defc:	e056      	b.n	dfac <OS_QPost+0x1a4>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
    defe:	f7f3 fd07 	bl	1910 <CPU_IntDisMeasStop>
    df02:	69f8      	ldr	r0, [r7, #28]
    df04:	f009 ff72 	bl	17dec <CPU_SR_Restore>
        return;
    df08:	e050      	b.n	dfac <OS_QPost+0x1a4>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
    df0a:	88bb      	ldrh	r3, [r7, #4]
    df0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    df10:	2b00      	cmp	r3, #0
    df12:	d003      	beq.n	df1c <OS_QPost+0x114>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    df14:	69bb      	ldr	r3, [r7, #24]
    df16:	891b      	ldrh	r3, [r3, #8]
    df18:	84fb      	strh	r3, [r7, #38]	; 0x26
    df1a:	e002      	b.n	df22 <OS_QPost+0x11a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    df1c:	f04f 0301 	mov.w	r3, #1
    df20:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
    df22:	69bb      	ldr	r3, [r7, #24]
    df24:	681b      	ldr	r3, [r3, #0]
    df26:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
    df28:	e013      	b.n	df52 <OS_QPost+0x14a>
        p_tcb            = p_pend_data->TCBPtr;
    df2a:	6a3b      	ldr	r3, [r7, #32]
    df2c:	689b      	ldr	r3, [r3, #8]
    df2e:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
    df30:	6a3b      	ldr	r3, [r7, #32]
    df32:	685b      	ldr	r3, [r3, #4]
    df34:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
    df36:	88fb      	ldrh	r3, [r7, #6]
    df38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    df3a:	9200      	str	r2, [sp, #0]
    df3c:	68f8      	ldr	r0, [r7, #12]
    df3e:	6979      	ldr	r1, [r7, #20]
    df40:	68ba      	ldr	r2, [r7, #8]
    df42:	f001 f9cd 	bl	f2e0 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
    df46:	693b      	ldr	r3, [r7, #16]
    df48:	623b      	str	r3, [r7, #32]
        cnt--;
    df4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    df4c:	f103 33ff 	add.w	r3, r3, #4294967295
    df50:	84fb      	strh	r3, [r7, #38]	; 0x26
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
    df52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    df54:	2b00      	cmp	r3, #0
    df56:	d1e8      	bne.n	df2a <OS_QPost+0x122>
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    OS_CRITICAL_EXIT_NO_SCHED();
    df58:	f009 ff44 	bl	17de4 <CPU_SR_Save>
    df5c:	61f8      	str	r0, [r7, #28]
    df5e:	f7f3 fcab 	bl	18b8 <CPU_IntDisMeasStart>
    df62:	f643 5350 	movw	r3, #15696	; 0x3d50
    df66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df6a:	781b      	ldrb	r3, [r3, #0]
    df6c:	f103 33ff 	add.w	r3, r3, #4294967295
    df70:	b2da      	uxtb	r2, r3
    df72:	f643 5350 	movw	r3, #15696	; 0x3d50
    df76:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df7a:	701a      	strb	r2, [r3, #0]
    df7c:	f643 5350 	movw	r3, #15696	; 0x3d50
    df80:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	2b00      	cmp	r3, #0
    df88:	d101      	bne.n	df8e <OS_QPost+0x186>
    df8a:	f001 fc45 	bl	f818 <OS_SchedLockTimeMeasStop>
    df8e:	f7f3 fcbf 	bl	1910 <CPU_IntDisMeasStop>
    df92:	69f8      	ldr	r0, [r7, #28]
    df94:	f009 ff2a 	bl	17dec <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
    df98:	88bb      	ldrh	r3, [r7, #4]
    df9a:	b21b      	sxth	r3, r3
    df9c:	2b00      	cmp	r3, #0
    df9e:	db01      	blt.n	dfa4 <OS_QPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
    dfa0:	f000 fb3e 	bl	e620 <OSSched>
    }
    *p_err = OS_ERR_NONE;
    dfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dfa6:	f04f 0200 	mov.w	r2, #0
    dfaa:	801a      	strh	r2, [r3, #0]
}
    dfac:	f107 0728 	add.w	r7, r7, #40	; 0x28
    dfb0:	46bd      	mov	sp, r7
    dfb2:	bd80      	pop	{r7, pc}

0000dfb4 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
    dfb4:	b480      	push	{r7}
    dfb6:	b083      	sub	sp, #12
    dfb8:	af00      	add	r7, sp, #0
    void  const  *p_temp;


    p_temp = (void const *)&OSDbg_DbgEn;
    dfba:	f64c 13a4 	movw	r3, #51620	; 0xc9a4
    dfbe:	f2c0 0302 	movt	r3, #2
    dfc2:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_DataSize;
    dfc4:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    dfc8:	f2c0 0302 	movt	r3, #2
    dfcc:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_ArgChkEn;
    dfce:	f64c 13a6 	movw	r3, #51622	; 0xc9a6
    dfd2:	f2c0 0302 	movt	r3, #2
    dfd6:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_AppHooksEn;
    dfd8:	f64c 13a7 	movw	r3, #51623	; 0xc9a7
    dfdc:	f2c0 0302 	movt	r3, #2
    dfe0:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_EndiannessTest;
    dfe2:	f64c 13a8 	movw	r3, #51624	; 0xc9a8
    dfe6:	f2c0 0302 	movt	r3, #2
    dfea:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_CalledFromISRChkEn;
    dfec:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
    dff0:	f2c0 0302 	movt	r3, #2
    dff4:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_FlagGrp;
    dff6:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
    dffa:	f2c0 0302 	movt	r3, #2
    dffe:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_FlagEn;
    e000:	f64c 13ad 	movw	r3, #51629	; 0xc9ad
    e004:	f2c0 0302 	movt	r3, #2
    e008:	607b      	str	r3, [r7, #4]
#if OS_CFG_FLAG_EN > 0u
    p_temp = (void const *)&OSDbg_FlagDelEn;
    e00a:	f64c 13d8 	movw	r3, #51672	; 0xc9d8
    e00e:	f2c0 0302 	movt	r3, #2
    e012:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_FlagModeClrEn;
    e014:	f64c 13d9 	movw	r3, #51673	; 0xc9d9
    e018:	f2c0 0302 	movt	r3, #2
    e01c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_FlagPendAbortEn;
    e01e:	f64c 13da 	movw	r3, #51674	; 0xc9da
    e022:	f2c0 0302 	movt	r3, #2
    e026:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_FlagGrpSize;
    e028:	f64c 13dc 	movw	r3, #51676	; 0xc9dc
    e02c:	f2c0 0302 	movt	r3, #2
    e030:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_FlagWidth;
    e032:	f64c 13de 	movw	r3, #51678	; 0xc9de
    e036:	f2c0 0302 	movt	r3, #2
    e03a:	607b      	str	r3, [r7, #4]
#endif

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp = (void const *)&OSDbg_IntQ;
    e03c:	f64c 13e0 	movw	r3, #51680	; 0xc9e0
    e040:	f2c0 0302 	movt	r3, #2
    e044:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_ISRPostDeferredEn;
    e046:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
    e04a:	f2c0 0302 	movt	r3, #2
    e04e:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_Mem;
    e050:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
    e054:	f2c0 0302 	movt	r3, #2
    e058:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MemEn;
    e05a:	f64c 2304 	movw	r3, #51716	; 0xca04
    e05e:	f2c0 0302 	movt	r3, #2
    e062:	607b      	str	r3, [r7, #4]
#if OS_CFG_MEM_EN > 0u
    p_temp = (void const *)&OSDbg_MemSize;
    e064:	f64c 2306 	movw	r3, #51718	; 0xca06
    e068:	f2c0 0302 	movt	r3, #2
    e06c:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_MsgEn;
    e06e:	f64c 2308 	movw	r3, #51720	; 0xca08
    e072:	f2c0 0302 	movt	r3, #2
    e076:	607b      	str	r3, [r7, #4]
#if (OS_MSG_EN) > 0u
    p_temp = (void const *)&OSDbg_MsgSize;
    e078:	f64c 230a 	movw	r3, #51722	; 0xca0a
    e07c:	f2c0 0302 	movt	r3, #2
    e080:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MsgPoolSize;
    e082:	f64c 230c 	movw	r3, #51724	; 0xca0c
    e086:	f2c0 0302 	movt	r3, #2
    e08a:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MsgQSize;
    e08c:	f64c 230e 	movw	r3, #51726	; 0xca0e
    e090:	f2c0 0302 	movt	r3, #2
    e094:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_Mutex;
    e096:	f64c 2310 	movw	r3, #51728	; 0xca10
    e09a:	f2c0 0302 	movt	r3, #2
    e09e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MutexEn;
    e0a0:	f64c 233c 	movw	r3, #51772	; 0xca3c
    e0a4:	f2c0 0302 	movt	r3, #2
    e0a8:	607b      	str	r3, [r7, #4]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp = (void const *)&OSDbg_MutexDelEn;
    e0aa:	f64c 233d 	movw	r3, #51773	; 0xca3d
    e0ae:	f2c0 0302 	movt	r3, #2
    e0b2:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MutexPendAbortEn;
    e0b4:	f64c 233e 	movw	r3, #51774	; 0xca3e
    e0b8:	f2c0 0302 	movt	r3, #2
    e0bc:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_MutexSize;
    e0be:	f64c 2340 	movw	r3, #51776	; 0xca40
    e0c2:	f2c0 0302 	movt	r3, #2
    e0c6:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_ObjTypeChkEn;
    e0c8:	f64c 2342 	movw	r3, #51778	; 0xca42
    e0cc:	f2c0 0302 	movt	r3, #2
    e0d0:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_PendMultiEn;
    e0d2:	f64c 2343 	movw	r3, #51779	; 0xca43
    e0d6:	f2c0 0302 	movt	r3, #2
    e0da:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_PendDataSize;
    e0dc:	f64c 2344 	movw	r3, #51780	; 0xca44
    e0e0:	f2c0 0302 	movt	r3, #2
    e0e4:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_PendListSize;
    e0e6:	f64c 2346 	movw	r3, #51782	; 0xca46
    e0ea:	f2c0 0302 	movt	r3, #2
    e0ee:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_PendObjSize;
    e0f0:	f64c 2348 	movw	r3, #51784	; 0xca48
    e0f4:	f2c0 0302 	movt	r3, #2
    e0f8:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_PrioMax;
    e0fa:	f64c 234a 	movw	r3, #51786	; 0xca4a
    e0fe:	f2c0 0302 	movt	r3, #2
    e102:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_PrioTblSize;
    e104:	f64c 234c 	movw	r3, #51788	; 0xca4c
    e108:	f2c0 0302 	movt	r3, #2
    e10c:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_PtrSize;
    e10e:	f64c 234e 	movw	r3, #51790	; 0xca4e
    e112:	f2c0 0302 	movt	r3, #2
    e116:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_Q;
    e118:	f64c 2350 	movw	r3, #51792	; 0xca50
    e11c:	f2c0 0302 	movt	r3, #2
    e120:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_QEn;
    e122:	f64c 2380 	movw	r3, #51840	; 0xca80
    e126:	f2c0 0302 	movt	r3, #2
    e12a:	607b      	str	r3, [r7, #4]
#if (OS_CFG_Q_EN) > 0u
    p_temp = (void const *)&OSDbg_QDelEn;
    e12c:	f64c 2381 	movw	r3, #51841	; 0xca81
    e130:	f2c0 0302 	movt	r3, #2
    e134:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_QFlushEn;
    e136:	f64c 2382 	movw	r3, #51842	; 0xca82
    e13a:	f2c0 0302 	movt	r3, #2
    e13e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_QPendAbortEn;
    e140:	f64c 2383 	movw	r3, #51843	; 0xca83
    e144:	f2c0 0302 	movt	r3, #2
    e148:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_QSize;
    e14a:	f64c 2384 	movw	r3, #51844	; 0xca84
    e14e:	f2c0 0302 	movt	r3, #2
    e152:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_SchedRoundRobinEn;
    e154:	f64c 2386 	movw	r3, #51846	; 0xca86
    e158:	f2c0 0302 	movt	r3, #2
    e15c:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_Sem;
    e15e:	f64c 2388 	movw	r3, #51848	; 0xca88
    e162:	f2c0 0302 	movt	r3, #2
    e166:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_SemEn;
    e168:	f64c 23b0 	movw	r3, #51888	; 0xcab0
    e16c:	f2c0 0302 	movt	r3, #2
    e170:	607b      	str	r3, [r7, #4]
#if (OS_CFG_SEM_EN) > 0u
    p_temp = (void const *)&OSDbg_SemDelEn;
    e172:	f64c 23b1 	movw	r3, #51889	; 0xcab1
    e176:	f2c0 0302 	movt	r3, #2
    e17a:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_SemPendAbortEn;
    e17c:	f64c 23b2 	movw	r3, #51890	; 0xcab2
    e180:	f2c0 0302 	movt	r3, #2
    e184:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_SemSetEn;
    e186:	f64c 23b3 	movw	r3, #51891	; 0xcab3
    e18a:	f2c0 0302 	movt	r3, #2
    e18e:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_SemSize;
    e190:	f64c 23b4 	movw	r3, #51892	; 0xcab4
    e194:	f2c0 0302 	movt	r3, #2
    e198:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_RdyList;
    e19a:	f64c 23b6 	movw	r3, #51894	; 0xcab6
    e19e:	f2c0 0302 	movt	r3, #2
    e1a2:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_RdyListSize;
    e1a4:	f64c 23b8 	movw	r3, #51896	; 0xcab8
    e1a8:	f2c0 0302 	movt	r3, #2
    e1ac:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_StkWidth;
    e1ae:	f64c 23bc 	movw	r3, #51900	; 0xcabc
    e1b2:	f2c0 0302 	movt	r3, #2
    e1b6:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_StatTaskEn;
    e1b8:	f64c 23bd 	movw	r3, #51901	; 0xcabd
    e1bc:	f2c0 0302 	movt	r3, #2
    e1c0:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_StatTaskStkChkEn;
    e1c2:	f64c 23be 	movw	r3, #51902	; 0xcabe
    e1c6:	f2c0 0302 	movt	r3, #2
    e1ca:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_TaskChangePrioEn;
    e1cc:	f64c 23bf 	movw	r3, #51903	; 0xcabf
    e1d0:	f2c0 0302 	movt	r3, #2
    e1d4:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskDelEn;
    e1d6:	f64c 23c0 	movw	r3, #51904	; 0xcac0
    e1da:	f2c0 0302 	movt	r3, #2
    e1de:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskQEn;
    e1e0:	f64c 23c1 	movw	r3, #51905	; 0xcac1
    e1e4:	f2c0 0302 	movt	r3, #2
    e1e8:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskQPendAbortEn;
    e1ea:	f64c 23c2 	movw	r3, #51906	; 0xcac2
    e1ee:	f2c0 0302 	movt	r3, #2
    e1f2:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskProfileEn;
    e1f4:	f64c 23c3 	movw	r3, #51907	; 0xcac3
    e1f8:	f2c0 0302 	movt	r3, #2
    e1fc:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskRegTblSize;
    e1fe:	f64c 23c4 	movw	r3, #51908	; 0xcac4
    e202:	f2c0 0302 	movt	r3, #2
    e206:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskSemPendAbortEn;
    e208:	f64c 23c6 	movw	r3, #51910	; 0xcac6
    e20c:	f2c0 0302 	movt	r3, #2
    e210:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TaskSuspendEn;
    e212:	f64c 23c7 	movw	r3, #51911	; 0xcac7
    e216:	f2c0 0302 	movt	r3, #2
    e21a:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_TCBSize;
    e21c:	f64c 23c8 	movw	r3, #51912	; 0xcac8
    e220:	f2c0 0302 	movt	r3, #2
    e224:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_TickSpokeSize;
    e226:	f64c 23ca 	movw	r3, #51914	; 0xcaca
    e22a:	f2c0 0302 	movt	r3, #2
    e22e:	607b      	str	r3, [r7, #4]

    p_temp = (void const *)&OSDbg_TimeDlyHMSMEn;
    e230:	f64c 23cc 	movw	r3, #51916	; 0xcacc
    e234:	f2c0 0302 	movt	r3, #2
    e238:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TimeDlyResumeEn;
    e23a:	f64c 23cd 	movw	r3, #51917	; 0xcacd
    e23e:	f2c0 0302 	movt	r3, #2
    e242:	607b      	str	r3, [r7, #4]


    p_temp = (void const *)&OSDbg_Tmr;
    e244:	f64c 23d0 	movw	r3, #51920	; 0xcad0
    e248:	f2c0 0302 	movt	r3, #2
    e24c:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TmrEn;
    e24e:	f64c 3304 	movw	r3, #51972	; 0xcb04
    e252:	f2c0 0302 	movt	r3, #2
    e256:	607b      	str	r3, [r7, #4]
#if (OS_CFG_TMR_EN) > 0u
    p_temp = (void const *)&OSDbg_TmrDelEn;
    e258:	f64c 3305 	movw	r3, #51973	; 0xcb05
    e25c:	f2c0 0302 	movt	r3, #2
    e260:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TmrSize;
    e262:	f64c 3306 	movw	r3, #51974	; 0xcb06
    e266:	f2c0 0302 	movt	r3, #2
    e26a:	607b      	str	r3, [r7, #4]
    p_temp = (void const *)&OSDbg_TmrSpokeSize;
    e26c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    e270:	f2c0 0302 	movt	r3, #2
    e274:	607b      	str	r3, [r7, #4]
#endif

    p_temp = (void const *)&OSDbg_VersionNbr;
    e276:	f64c 330a 	movw	r3, #51978	; 0xcb0a
    e27a:	f2c0 0302 	movt	r3, #2
    e27e:	607b      	str	r3, [r7, #4]

    p_temp = p_temp;                                        /* Prevent compiler warning for not using 'p_temp'        */
}
    e280:	f107 070c 	add.w	r7, r7, #12
    e284:	46bd      	mov	sp, r7
    e286:	bc80      	pop	{r7}
    e288:	4770      	bx	lr
    e28a:	bf00      	nop

0000e28c <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
    e28c:	b580      	push	{r7, lr}
    e28e:	b084      	sub	sp, #16
    e290:	af00      	add	r7, sp, #0
    e292:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
    e294:	f7f2 fa70 	bl	778 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
    e298:	f244 1381 	movw	r3, #16769	; 0x4181
    e29c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2a0:	f04f 0200 	mov.w	r2, #0
    e2a4:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
    e2a6:	f643 5360 	movw	r3, #15712	; 0x3d60
    e2aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2ae:	f04f 0200 	mov.w	r2, #0
    e2b2:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
    e2b4:	f643 5350 	movw	r3, #15696	; 0x3d50
    e2b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2bc:	f04f 0200 	mov.w	r2, #0
    e2c0:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
    e2c2:	f244 1358 	movw	r3, #16728	; 0x4158
    e2c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2ca:	f04f 0200 	mov.w	r2, #0
    e2ce:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
    e2d0:	f244 4348 	movw	r3, #17480	; 0x4448
    e2d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2d8:	f04f 0200 	mov.w	r2, #0
    e2dc:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
    e2de:	f244 1368 	movw	r3, #16744	; 0x4168
    e2e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2e6:	f04f 0200 	mov.w	r2, #0
    e2ea:	601a      	str	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag       =  DEF_FALSE;
#endif

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    e2ec:	f244 5334 	movw	r3, #17716	; 0x4534
    e2f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2f4:	f04f 0200 	mov.w	r2, #0
    e2f8:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
    e2fa:	f64c 134c 	movw	r3, #51532	; 0xc94c
    e2fe:	f2c0 0302 	movt	r3, #2
    e302:	681a      	ldr	r2, [r3, #0]
    e304:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    e308:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    e30c:	fba3 1302 	umull	r1, r3, r3, r2
    e310:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    e314:	f244 4318 	movw	r3, #17432	; 0x4418
    e318:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e31c:	601a      	str	r2, [r3, #0]
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
    e31e:	f64c 131c 	movw	r3, #51484	; 0xc91c
    e322:	f2c0 0302 	movt	r3, #2
    e326:	681b      	ldr	r3, [r3, #0]
    e328:	2b00      	cmp	r3, #0
    e32a:	d01e      	beq.n	e36a <OSInit+0xde>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
    e32c:	f64c 1318 	movw	r3, #51480	; 0xc918
    e330:	f2c0 0302 	movt	r3, #2
    e334:	681b      	ldr	r3, [r3, #0]
    e336:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
    e338:	68fb      	ldr	r3, [r7, #12]
    e33a:	2b00      	cmp	r3, #0
    e33c:	d015      	beq.n	e36a <OSInit+0xde>
            size  = OSCfg_ISRStkSize;
    e33e:	f64c 131c 	movw	r3, #51484	; 0xc91c
    e342:	f2c0 0302 	movt	r3, #2
    e346:	681b      	ldr	r3, [r3, #0]
    e348:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
    e34a:	e00b      	b.n	e364 <OSInit+0xd8>
                size--;
    e34c:	68bb      	ldr	r3, [r7, #8]
    e34e:	f103 33ff 	add.w	r3, r3, #4294967295
    e352:	60bb      	str	r3, [r7, #8]
                *p_stk = (CPU_STK)0;
    e354:	68fb      	ldr	r3, [r7, #12]
    e356:	f04f 0200 	mov.w	r2, #0
    e35a:	601a      	str	r2, [r3, #0]
                p_stk++;
    e35c:	68fb      	ldr	r3, [r7, #12]
    e35e:	f103 0304 	add.w	r3, r3, #4
    e362:	60fb      	str	r3, [r7, #12]

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
        if (p_stk != (CPU_STK *)0) {
            size  = OSCfg_ISRStkSize;
            while (size > (CPU_STK_SIZE)0) {
    e364:	68bb      	ldr	r3, [r7, #8]
    e366:	2b00      	cmp	r3, #0
    e368:	d1f0      	bne.n	e34c <OSInit+0xc0>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
    e36a:	f244 0374 	movw	r3, #16500	; 0x4074
    e36e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e372:	f04f 0200 	mov.w	r2, #0
    e376:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
    e378:	f244 1374 	movw	r3, #16756	; 0x4174
    e37c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e380:	f04f 0200 	mov.w	r2, #0
    e384:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
    e386:	f643 5354 	movw	r3, #15700	; 0x3d54
    e38a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e38e:	f04f 0200 	mov.w	r2, #0
    e392:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
    e394:	f244 431c 	movw	r3, #17436	; 0x441c
    e398:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e39c:	f04f 0200 	mov.w	r2, #0
    e3a0:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
    e3a2:	f244 433c 	movw	r3, #17468	; 0x443c
    e3a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e3aa:	f04f 0200 	mov.w	r2, #0
    e3ae:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
    e3b0:	f244 4328 	movw	r3, #17448	; 0x4428
    e3b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e3b8:	f04f 0200 	mov.w	r2, #0
    e3bc:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
    e3be:	f244 1378 	movw	r3, #16760	; 0x4178
    e3c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e3c6:	f04f 0200 	mov.w	r2, #0
    e3ca:	601a      	str	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
    e3cc:	f7f7 fe9e 	bl	610c <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
    e3d0:	f001 f846 	bl	f460 <OS_RdyListInit>

    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    e3d4:	6878      	ldr	r0, [r7, #4]
    e3d6:	f7fa fd41 	bl	8e5c <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
    e3da:	687b      	ldr	r3, [r7, #4]
    e3dc:	881b      	ldrh	r3, [r3, #0]
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d151      	bne.n	e486 <OSInit+0x1fa>
        return;
    }

    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    e3e2:	6878      	ldr	r0, [r7, #4]
    e3e4:	f000 fb72 	bl	eacc <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
    e3e8:	687b      	ldr	r3, [r7, #4]
    e3ea:	881b      	ldrh	r3, [r3, #0]
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d14c      	bne.n	e48a <OSInit+0x1fe>
        return;
    }


#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    OS_IntQTaskInit(p_err);                                 /* Initialize the Interrupt Queue Handler Task            */
    e3f0:	6878      	ldr	r0, [r7, #4]
    e3f2:	f002 fd47 	bl	10e84 <OS_IntQTaskInit>
    if (*p_err != OS_ERR_NONE) {
    e3f6:	687b      	ldr	r3, [r7, #4]
    e3f8:	881b      	ldrh	r3, [r3, #0]
    e3fa:	2b00      	cmp	r3, #0
    e3fc:	d147      	bne.n	e48e <OSInit+0x202>
        return;
    }
#endif

    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    e3fe:	6878      	ldr	r0, [r7, #4]
    e400:	f001 fb1e 	bl	fa40 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	881b      	ldrh	r3, [r3, #0]
    e408:	2b00      	cmp	r3, #0
    e40a:	d142      	bne.n	e492 <OSInit+0x206>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    e40c:	6878      	ldr	r0, [r7, #4]
    e40e:	f7fd ff07 	bl	c220 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	881b      	ldrh	r3, [r3, #0]
    e416:	2b00      	cmp	r3, #0
    e418:	d13d      	bne.n	e496 <OSInit+0x20a>
    }
#endif


#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    e41a:	6878      	ldr	r0, [r7, #4]
    e41c:	f7fd f9ba 	bl	b794 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
    e420:	687b      	ldr	r3, [r7, #4]
    e422:	881b      	ldrh	r3, [r3, #0]
    e424:	2b00      	cmp	r3, #0
    e426:	d138      	bne.n	e49a <OSInit+0x20e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    e428:	6878      	ldr	r0, [r7, #4]
    e42a:	f002 fadb 	bl	109e4 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
    e42e:	687b      	ldr	r3, [r7, #4]
    e430:	881b      	ldrh	r3, [r3, #0]
    e432:	2b00      	cmp	r3, #0
    e434:	d133      	bne.n	e49e <OSInit+0x212>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    e436:	6878      	ldr	r0, [r7, #4]
    e438:	f001 ff4e 	bl	102d8 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	881b      	ldrh	r3, [r3, #0]
    e440:	2b00      	cmp	r3, #0
    e442:	d12e      	bne.n	e4a2 <OSInit+0x216>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    e444:	6878      	ldr	r0, [r7, #4]
    e446:	f7fe ff71 	bl	d32c <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	881b      	ldrh	r3, [r3, #0]
    e44e:	2b00      	cmp	r3, #0
    e450:	d129      	bne.n	e4a6 <OSInit+0x21a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    e452:	6878      	ldr	r0, [r7, #4]
    e454:	f7ff fcbc 	bl	ddd0 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	881b      	ldrh	r3, [r3, #0]
    e45c:	2b00      	cmp	r3, #0
    e45e:	d124      	bne.n	e4aa <OSInit+0x21e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    e460:	6878      	ldr	r0, [r7, #4]
    e462:	f7fc f963 	bl	a72c <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	881b      	ldrh	r3, [r3, #0]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d11f      	bne.n	e4ae <OSInit+0x222>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    e46e:	6878      	ldr	r0, [r7, #4]
    e470:	f7f8 fadc 	bl	6a2c <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	881b      	ldrh	r3, [r3, #0]
    e478:	2b00      	cmp	r3, #0
    e47a:	d11a      	bne.n	e4b2 <OSInit+0x226>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
    e47c:	f7ff fd9a 	bl	dfb4 <OS_Dbg_Init>
#endif

    OSCfg_Init();
    e480:	f7fd ff58 	bl	c334 <OSCfg_Init>
    e484:	e016      	b.n	e4b4 <OSInit+0x228>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */

    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    if (*p_err != OS_ERR_NONE) {
        return;
    e486:	bf00      	nop
    e488:	e014      	b.n	e4b4 <OSInit+0x228>
    }

    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
    e48a:	bf00      	nop
    e48c:	e012      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    OS_IntQTaskInit(p_err);                                 /* Initialize the Interrupt Queue Handler Task            */
    if (*p_err != OS_ERR_NONE) {
        return;
    e48e:	bf00      	nop
    e490:	e010      	b.n	e4b4 <OSInit+0x228>
    }
#endif

    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
    e492:	bf00      	nop
    e494:	e00e      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e496:	bf00      	nop
    e498:	e00c      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e49a:	bf00      	nop
    e49c:	e00a      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e49e:	bf00      	nop
    e4a0:	e008      	b.n	e4b4 <OSInit+0x228>


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e4a2:	bf00      	nop
    e4a4:	e006      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e4a6:	bf00      	nop
    e4a8:	e004      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    if (*p_err != OS_ERR_NONE) {
        return;
    e4aa:	bf00      	nop
    e4ac:	e002      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e4ae:	bf00      	nop
    e4b0:	e000      	b.n	e4b4 <OSInit+0x228>


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
    e4b2:	bf00      	nop
#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
#endif

    OSCfg_Init();
}
    e4b4:	f107 0710 	add.w	r7, r7, #16
    e4b8:	46bd      	mov	sp, r7
    e4ba:	bd80      	pop	{r7, pc}

0000e4bc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
    e4bc:	b480      	push	{r7}
    e4be:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
    e4c0:	f643 5360 	movw	r3, #15712	; 0x3d60
    e4c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4c8:	781b      	ldrb	r3, [r3, #0]
    e4ca:	2b01      	cmp	r3, #1
    e4cc:	d114      	bne.n	e4f8 <OSIntEnter+0x3c>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
    e4ce:	f244 1381 	movw	r3, #16769	; 0x4181
    e4d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	2bf9      	cmp	r3, #249	; 0xf9
    e4da:	d80f      	bhi.n	e4fc <OSIntEnter+0x40>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
    e4dc:	f244 1381 	movw	r3, #16769	; 0x4181
    e4e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	f103 0301 	add.w	r3, r3, #1
    e4ea:	b2da      	uxtb	r2, r3
    e4ec:	f244 1381 	movw	r3, #16769	; 0x4181
    e4f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4f4:	701a      	strb	r2, [r3, #0]
    e4f6:	e002      	b.n	e4fe <OSIntEnter+0x42>
*/

void  OSIntEnter (void)
{
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
        return;                                             /* No                                                     */
    e4f8:	bf00      	nop
    e4fa:	e000      	b.n	e4fe <OSIntEnter+0x42>
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
        return;                                             /* Yes                                                    */
    e4fc:	bf00      	nop
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
}
    e4fe:	46bd      	mov	sp, r7
    e500:	bc80      	pop	{r7}
    e502:	4770      	bx	lr

0000e504 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
    e504:	b580      	push	{r7, lr}
    e506:	b082      	sub	sp, #8
    e508:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
    e50a:	f04f 0300 	mov.w	r3, #0
    e50e:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
    e510:	f643 5360 	movw	r3, #15712	; 0x3d60
    e514:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	2b01      	cmp	r3, #1
    e51c:	d179      	bne.n	e612 <OSIntExit+0x10e>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
    e51e:	f244 1381 	movw	r3, #16769	; 0x4181
    e522:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e526:	781b      	ldrb	r3, [r3, #0]
    e528:	2b00      	cmp	r3, #0
    e52a:	d074      	beq.n	e616 <OSIntExit+0x112>
        return;
    }

    CPU_INT_DIS();
    e52c:	f009 fc5a 	bl	17de4 <CPU_SR_Save>
    e530:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr--;
    e532:	f244 1381 	movw	r3, #16769	; 0x4181
    e536:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	f103 33ff 	add.w	r3, r3, #4294967295
    e540:	b2da      	uxtb	r2, r3
    e542:	f244 1381 	movw	r3, #16769	; 0x4181
    e546:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e54a:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
    e54c:	f244 1381 	movw	r3, #16769	; 0x4181
    e550:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e554:	781b      	ldrb	r3, [r3, #0]
    e556:	2b00      	cmp	r3, #0
    e558:	d003      	beq.n	e562 <OSIntExit+0x5e>
        CPU_INT_EN();                                       /* Yes                                                    */
    e55a:	6878      	ldr	r0, [r7, #4]
    e55c:	f009 fc46 	bl	17dec <CPU_SR_Restore>
        return;
    e560:	e05a      	b.n	e618 <OSIntExit+0x114>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
    e562:	f643 5350 	movw	r3, #15696	; 0x3d50
    e566:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e56a:	781b      	ldrb	r3, [r3, #0]
    e56c:	2b00      	cmp	r3, #0
    e56e:	d003      	beq.n	e578 <OSIntExit+0x74>
        CPU_INT_EN();                                       /* Yes                                                    */
    e570:	6878      	ldr	r0, [r7, #4]
    e572:	f009 fc3b 	bl	17dec <CPU_SR_Restore>
        return;
    e576:	e04f      	b.n	e618 <OSIntExit+0x114>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
    e578:	f7f7 fde8 	bl	614c <OS_PrioGetHighest>
    e57c:	4603      	mov	r3, r0
    e57e:	461a      	mov	r2, r3
    e580:	f244 0368 	movw	r3, #16488	; 0x4068
    e584:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e588:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
    e58a:	f244 0368 	movw	r3, #16488	; 0x4068
    e58e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e592:	781b      	ldrb	r3, [r3, #0]
    e594:	4619      	mov	r1, r3
    e596:	f643 5264 	movw	r2, #15716	; 0x3d64
    e59a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e59e:	460b      	mov	r3, r1
    e5a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    e5a4:	185b      	adds	r3, r3, r1
    e5a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e5aa:	18d3      	adds	r3, r2, r3
    e5ac:	681a      	ldr	r2, [r3, #0]
    e5ae:	f244 1364 	movw	r3, #16740	; 0x4164
    e5b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5b6:	601a      	str	r2, [r3, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
    e5b8:	f244 1364 	movw	r3, #16740	; 0x4164
    e5bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5c0:	681a      	ldr	r2, [r3, #0]
    e5c2:	f244 135c 	movw	r3, #16732	; 0x415c
    e5c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5ca:	681b      	ldr	r3, [r3, #0]
    e5cc:	429a      	cmp	r2, r3
    e5ce:	d103      	bne.n	e5d8 <OSIntExit+0xd4>
        CPU_INT_EN();                                       /* Yes                                                    */
    e5d0:	6878      	ldr	r0, [r7, #4]
    e5d2:	f009 fc0b 	bl	17dec <CPU_SR_Restore>
        return;
    e5d6:	e01f      	b.n	e618 <OSIntExit+0x114>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
    e5d8:	f244 1364 	movw	r3, #16740	; 0x4164
    e5dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5e0:	681b      	ldr	r3, [r3, #0]
    e5e2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    e5e6:	f102 0201 	add.w	r2, r2, #1
    e5ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
    e5ee:	f244 137c 	movw	r3, #16764	; 0x417c
    e5f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5f6:	681b      	ldr	r3, [r3, #0]
    e5f8:	f103 0201 	add.w	r2, r3, #1
    e5fc:	f244 137c 	movw	r3, #16764	; 0x417c
    e600:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e604:	601a      	str	r2, [r3, #0]

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
    e606:	f009 fc14 	bl	17e32 <OSIntCtxSw>
    CPU_INT_EN();
    e60a:	6878      	ldr	r0, [r7, #4]
    e60c:	f009 fbee 	bl	17dec <CPU_SR_Restore>
    e610:	e002      	b.n	e618 <OSIntExit+0x114>
    CPU_SR_ALLOC();



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
        return;                                             /* No                                                     */
    e612:	bf00      	nop
    e614:	e000      	b.n	e618 <OSIntExit+0x114>
    }

    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
        return;
    e616:	bf00      	nop
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
    CPU_INT_EN();
}
    e618:	f107 0708 	add.w	r7, r7, #8
    e61c:	46bd      	mov	sp, r7
    e61e:	bd80      	pop	{r7, pc}

0000e620 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
    e620:	b580      	push	{r7, lr}
    e622:	b082      	sub	sp, #8
    e624:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
    e626:	f04f 0300 	mov.w	r3, #0
    e62a:	607b      	str	r3, [r7, #4]

    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
    e62c:	f244 1381 	movw	r3, #16769	; 0x4181
    e630:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e634:	781b      	ldrb	r3, [r3, #0]
    e636:	2b00      	cmp	r3, #0
    e638:	d156      	bne.n	e6e8 <OSSched+0xc8>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
    e63a:	f643 5350 	movw	r3, #15696	; 0x3d50
    e63e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2b00      	cmp	r3, #0
    e646:	d151      	bne.n	e6ec <OSSched+0xcc>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
    e648:	f009 fbcc 	bl	17de4 <CPU_SR_Save>
    e64c:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
    e64e:	f7f7 fd7d 	bl	614c <OS_PrioGetHighest>
    e652:	4603      	mov	r3, r0
    e654:	461a      	mov	r2, r3
    e656:	f244 0368 	movw	r3, #16488	; 0x4068
    e65a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e65e:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
    e660:	f244 0368 	movw	r3, #16488	; 0x4068
    e664:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	4619      	mov	r1, r3
    e66c:	f643 5264 	movw	r2, #15716	; 0x3d64
    e670:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e674:	460b      	mov	r3, r1
    e676:	ea4f 0343 	mov.w	r3, r3, lsl #1
    e67a:	185b      	adds	r3, r3, r1
    e67c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e680:	18d3      	adds	r3, r2, r3
    e682:	681a      	ldr	r2, [r3, #0]
    e684:	f244 1364 	movw	r3, #16740	; 0x4164
    e688:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e68c:	601a      	str	r2, [r3, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
    e68e:	f244 1364 	movw	r3, #16740	; 0x4164
    e692:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e696:	681a      	ldr	r2, [r3, #0]
    e698:	f244 135c 	movw	r3, #16732	; 0x415c
    e69c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6a0:	681b      	ldr	r3, [r3, #0]
    e6a2:	429a      	cmp	r2, r3
    e6a4:	d103      	bne.n	e6ae <OSSched+0x8e>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
    e6a6:	6878      	ldr	r0, [r7, #4]
    e6a8:	f009 fba0 	bl	17dec <CPU_SR_Restore>
        return;
    e6ac:	e01f      	b.n	e6ee <OSSched+0xce>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
    e6ae:	f244 1364 	movw	r3, #16740	; 0x4164
    e6b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6b6:	681b      	ldr	r3, [r3, #0]
    e6b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    e6bc:	f102 0201 	add.w	r2, r2, #1
    e6c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
    e6c4:	f244 137c 	movw	r3, #16764	; 0x417c
    e6c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6cc:	681b      	ldr	r3, [r3, #0]
    e6ce:	f103 0201 	add.w	r2, r3, #1
    e6d2:	f244 137c 	movw	r3, #16764	; 0x417c
    e6d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6da:	601a      	str	r2, [r3, #0]

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
    e6dc:	f009 fba5 	bl	17e2a <OSCtxSw>
    CPU_INT_EN();
    e6e0:	6878      	ldr	r0, [r7, #4]
    e6e2:	f009 fb83 	bl	17dec <CPU_SR_Restore>
    e6e6:	e002      	b.n	e6ee <OSSched+0xce>
void  OSSched (void)
{
    CPU_SR_ALLOC();

    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    e6e8:	bf00      	nop
    e6ea:	e000      	b.n	e6ee <OSSched+0xce>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
        return;                                             /* Yes                                                    */
    e6ec:	bf00      	nop
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
    CPU_INT_EN();
}
    e6ee:	f107 0708 	add.w	r7, r7, #8
    e6f2:	46bd      	mov	sp, r7
    e6f4:	bd80      	pop	{r7, pc}
    e6f6:	bf00      	nop

0000e6f8 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
    e6f8:	b580      	push	{r7, lr}
    e6fa:	b084      	sub	sp, #16
    e6fc:	af00      	add	r7, sp, #0
    e6fe:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
    e700:	f04f 0300 	mov.w	r3, #0
    e704:	60fb      	str	r3, [r7, #12]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
    e706:	f643 5360 	movw	r3, #15712	; 0x3d60
    e70a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e70e:	781b      	ldrb	r3, [r3, #0]
    e710:	2b01      	cmp	r3, #1
    e712:	d004      	beq.n	e71e <OSSchedLock+0x26>
        *p_err = OS_ERR_OS_NOT_RUNNING;
    e714:	687b      	ldr	r3, [r7, #4]
    e716:	f645 6289 	movw	r2, #24201	; 0x5e89
    e71a:	801a      	strh	r2, [r3, #0]
        return;
    e71c:	e028      	b.n	e770 <OSSchedLock+0x78>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
    e71e:	f643 5350 	movw	r3, #15696	; 0x3d50
    e722:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e726:	781b      	ldrb	r3, [r3, #0]
    e728:	2bf9      	cmp	r3, #249	; 0xf9
    e72a:	d904      	bls.n	e736 <OSSchedLock+0x3e>
        *p_err = OS_ERR_LOCK_NESTING_OVF;
    e72c:	687b      	ldr	r3, [r7, #4]
    e72e:	f245 2209 	movw	r2, #21001	; 0x5209
    e732:	801a      	strh	r2, [r3, #0]
        return;
    e734:	e01c      	b.n	e770 <OSSchedLock+0x78>
    }

    CPU_CRITICAL_ENTER();
    e736:	f009 fb55 	bl	17de4 <CPU_SR_Save>
    e73a:	60f8      	str	r0, [r7, #12]
    e73c:	f7f3 f8bc 	bl	18b8 <CPU_IntDisMeasStart>
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
    e740:	f643 5350 	movw	r3, #15696	; 0x3d50
    e744:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	f103 0301 	add.w	r3, r3, #1
    e74e:	b2da      	uxtb	r2, r3
    e750:	f643 5350 	movw	r3, #15696	; 0x3d50
    e754:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e758:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
    e75a:	f001 f84b 	bl	f7f4 <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
    e75e:	f7f3 f8d7 	bl	1910 <CPU_IntDisMeasStop>
    e762:	68f8      	ldr	r0, [r7, #12]
    e764:	f009 fb42 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    e768:	687b      	ldr	r3, [r7, #4]
    e76a:	f04f 0200 	mov.w	r2, #0
    e76e:	801a      	strh	r2, [r3, #0]
}
    e770:	f107 0710 	add.w	r7, r7, #16
    e774:	46bd      	mov	sp, r7
    e776:	bd80      	pop	{r7, pc}

0000e778 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
    e778:	b580      	push	{r7, lr}
    e77a:	b084      	sub	sp, #16
    e77c:	af00      	add	r7, sp, #0
    e77e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
    e780:	f04f 0300 	mov.w	r3, #0
    e784:	60fb      	str	r3, [r7, #12]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
    e786:	f643 5360 	movw	r3, #15712	; 0x3d60
    e78a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e78e:	781b      	ldrb	r3, [r3, #0]
    e790:	2b01      	cmp	r3, #1
    e792:	d004      	beq.n	e79e <OSSchedUnlock+0x26>
        *p_err = OS_ERR_OS_NOT_RUNNING;
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	f645 6289 	movw	r2, #24201	; 0x5e89
    e79a:	801a      	strh	r2, [r3, #0]
        return;
    e79c:	e03b      	b.n	e816 <OSSchedUnlock+0x9e>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
    e79e:	f643 5350 	movw	r3, #15696	; 0x3d50
    e7a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d104      	bne.n	e7b6 <OSSchedUnlock+0x3e>
        *p_err = OS_ERR_SCHED_NOT_LOCKED;
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	f646 5263 	movw	r2, #28003	; 0x6d63
    e7b2:	801a      	strh	r2, [r3, #0]
        return;
    e7b4:	e02f      	b.n	e816 <OSSchedUnlock+0x9e>
    }

    CPU_CRITICAL_ENTER();
    e7b6:	f009 fb15 	bl	17de4 <CPU_SR_Save>
    e7ba:	60f8      	str	r0, [r7, #12]
    e7bc:	f7f3 f87c 	bl	18b8 <CPU_IntDisMeasStart>
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
    e7c0:	f643 5350 	movw	r3, #15696	; 0x3d50
    e7c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7c8:	781b      	ldrb	r3, [r3, #0]
    e7ca:	f103 33ff 	add.w	r3, r3, #4294967295
    e7ce:	b2da      	uxtb	r2, r3
    e7d0:	f643 5350 	movw	r3, #15696	; 0x3d50
    e7d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7d8:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
    e7da:	f643 5350 	movw	r3, #15696	; 0x3d50
    e7de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7e2:	781b      	ldrb	r3, [r3, #0]
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d009      	beq.n	e7fc <OSSchedUnlock+0x84>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
    e7e8:	f7f3 f892 	bl	1910 <CPU_IntDisMeasStop>
    e7ec:	68f8      	ldr	r0, [r7, #12]
    e7ee:	f009 fafd 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_SCHED_LOCKED;
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	f646 5262 	movw	r2, #28002	; 0x6d62
    e7f8:	801a      	strh	r2, [r3, #0]
        return;
    e7fa:	e00c      	b.n	e816 <OSSchedUnlock+0x9e>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
    e7fc:	f001 f80c 	bl	f818 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
    e800:	f7f3 f886 	bl	1910 <CPU_IntDisMeasStop>
    e804:	68f8      	ldr	r0, [r7, #12]
    e806:	f009 faf1 	bl	17dec <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
    e80a:	f7ff ff09 	bl	e620 <OSSched>
    *p_err = OS_ERR_NONE;
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	f04f 0200 	mov.w	r2, #0
    e814:	801a      	strh	r2, [r3, #0]
}
    e816:	f107 0710 	add.w	r7, r7, #16
    e81a:	46bd      	mov	sp, r7
    e81c:	bd80      	pop	{r7, pc}
    e81e:	bf00      	nop

0000e820 <OSSchedRoundRobinCfg>:

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
void  OSSchedRoundRobinCfg (CPU_BOOLEAN  en,
                            OS_TICK      dflt_time_quanta,
                            OS_ERR      *p_err)
{
    e820:	b580      	push	{r7, lr}
    e822:	b086      	sub	sp, #24
    e824:	af00      	add	r7, sp, #0
    e826:	4603      	mov	r3, r0
    e828:	60b9      	str	r1, [r7, #8]
    e82a:	607a      	str	r2, [r7, #4]
    e82c:	73fb      	strb	r3, [r7, #15]
    CPU_SR_ALLOC();
    e82e:	f04f 0300 	mov.w	r3, #0
    e832:	617b      	str	r3, [r7, #20]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    CPU_CRITICAL_ENTER();
    e834:	f009 fad6 	bl	17de4 <CPU_SR_Save>
    e838:	6178      	str	r0, [r7, #20]
    e83a:	f7f3 f83d 	bl	18b8 <CPU_IntDisMeasStart>
    if (en != DEF_ENABLED) {
    e83e:	7bfb      	ldrb	r3, [r7, #15]
    e840:	2b01      	cmp	r3, #1
    e842:	d007      	beq.n	e854 <OSSchedRoundRobinCfg+0x34>
        OSSchedRoundRobinEn = DEF_DISABLED;
    e844:	f244 5334 	movw	r3, #17716	; 0x4534
    e848:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e84c:	f04f 0200 	mov.w	r2, #0
    e850:	701a      	strb	r2, [r3, #0]
    e852:	e006      	b.n	e862 <OSSchedRoundRobinCfg+0x42>
    } else {
        OSSchedRoundRobinEn = DEF_ENABLED;
    e854:	f244 5334 	movw	r3, #17716	; 0x4534
    e858:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e85c:	f04f 0201 	mov.w	r2, #1
    e860:	701a      	strb	r2, [r3, #0]
    }

    if (dflt_time_quanta > (OS_TICK)0) {
    e862:	68bb      	ldr	r3, [r7, #8]
    e864:	2b00      	cmp	r3, #0
    e866:	d006      	beq.n	e876 <OSSchedRoundRobinCfg+0x56>
        OSSchedRoundRobinDfltTimeQuanta = dflt_time_quanta;
    e868:	f244 4318 	movw	r3, #17432	; 0x4418
    e86c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e870:	68ba      	ldr	r2, [r7, #8]
    e872:	601a      	str	r2, [r3, #0]
    e874:	e011      	b.n	e89a <OSSchedRoundRobinCfg+0x7a>
    } else {
        OSSchedRoundRobinDfltTimeQuanta = (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
    e876:	f64c 134c 	movw	r3, #51532	; 0xc94c
    e87a:	f2c0 0302 	movt	r3, #2
    e87e:	681a      	ldr	r2, [r3, #0]
    e880:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    e884:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    e888:	fba3 1302 	umull	r1, r3, r3, r2
    e88c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    e890:	f244 4318 	movw	r3, #17432	; 0x4418
    e894:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e898:	601a      	str	r2, [r3, #0]
    }
    CPU_CRITICAL_EXIT();
    e89a:	f7f3 f839 	bl	1910 <CPU_IntDisMeasStop>
    e89e:	6978      	ldr	r0, [r7, #20]
    e8a0:	f009 faa4 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
    e8a4:	687b      	ldr	r3, [r7, #4]
    e8a6:	f04f 0200 	mov.w	r2, #0
    e8aa:	801a      	strh	r2, [r3, #0]
}
    e8ac:	f107 0718 	add.w	r7, r7, #24
    e8b0:	46bd      	mov	sp, r7
    e8b2:	bd80      	pop	{r7, pc}

0000e8b4 <OSSchedRoundRobinYield>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
void  OSSchedRoundRobinYield (OS_ERR  *p_err)
{
    e8b4:	b580      	push	{r7, lr}
    e8b6:	b086      	sub	sp, #24
    e8b8:	af00      	add	r7, sp, #0
    e8ba:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
    e8bc:	f04f 0300 	mov.w	r3, #0
    e8c0:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't call this function from an ISR                   */
    e8c2:	f244 1381 	movw	r3, #16769	; 0x4181
    e8c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e8ca:	781b      	ldrb	r3, [r3, #0]
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d004      	beq.n	e8da <OSSchedRoundRobinYield+0x26>
        *p_err = OS_ERR_YIELD_ISR;
    e8d0:	687b      	ldr	r3, [r7, #4]
    e8d2:	f248 42d1 	movw	r2, #34001	; 0x84d1
    e8d6:	801a      	strh	r2, [r3, #0]
        return;
    e8d8:	e062      	b.n	e9a0 <OSSchedRoundRobinYield+0xec>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Can't yield if the scheduler is locked                 */
    e8da:	f643 5350 	movw	r3, #15696	; 0x3d50
    e8de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e8e2:	781b      	ldrb	r3, [r3, #0]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d004      	beq.n	e8f2 <OSSchedRoundRobinYield+0x3e>
        *p_err = OS_ERR_SCHED_LOCKED;
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	f646 5262 	movw	r2, #28002	; 0x6d62
    e8ee:	801a      	strh	r2, [r3, #0]
        return;
    e8f0:	e056      	b.n	e9a0 <OSSchedRoundRobinYield+0xec>
    }

    if (OSSchedRoundRobinEn != DEF_TRUE) {                  /* Make sure round-robin has been enabled                 */
    e8f2:	f244 5334 	movw	r3, #17716	; 0x4534
    e8f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e8fa:	781b      	ldrb	r3, [r3, #0]
    e8fc:	2b01      	cmp	r3, #1
    e8fe:	d004      	beq.n	e90a <OSSchedRoundRobinYield+0x56>
        *p_err = OS_ERR_ROUND_ROBIN_DISABLED;
    e900:	687b      	ldr	r3, [r7, #4]
    e902:	f646 127b 	movw	r2, #27003	; 0x697b
    e906:	801a      	strh	r2, [r3, #0]
        return;
    e908:	e04a      	b.n	e9a0 <OSSchedRoundRobinYield+0xec>
    }

    CPU_CRITICAL_ENTER();
    e90a:	f009 fa6b 	bl	17de4 <CPU_SR_Save>
    e90e:	6178      	str	r0, [r7, #20]
    e910:	f7f2 ffd2 	bl	18b8 <CPU_IntDisMeasStart>
    p_rdy_list = &OSRdyList[OSPrioCur];                     /* Can't yield if it's the only task at that priority     */
    e914:	f244 0378 	movw	r3, #16504	; 0x4078
    e918:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e91c:	781b      	ldrb	r3, [r3, #0]
    e91e:	461a      	mov	r2, r3
    e920:	4613      	mov	r3, r2
    e922:	ea4f 0343 	mov.w	r3, r3, lsl #1
    e926:	189b      	adds	r3, r3, r2
    e928:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e92c:	461a      	mov	r2, r3
    e92e:	f643 5364 	movw	r3, #15716	; 0x3d64
    e932:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e936:	18d3      	adds	r3, r2, r3
    e938:	613b      	str	r3, [r7, #16]
    if (p_rdy_list->NbrEntries < (OS_OBJ_QTY)2) {
    e93a:	693b      	ldr	r3, [r7, #16]
    e93c:	891b      	ldrh	r3, [r3, #8]
    e93e:	2b01      	cmp	r3, #1
    e940:	d809      	bhi.n	e956 <OSSchedRoundRobinYield+0xa2>
        CPU_CRITICAL_EXIT();
    e942:	f7f2 ffe5 	bl	1910 <CPU_IntDisMeasStop>
    e946:	6978      	ldr	r0, [r7, #20]
    e948:	f009 fa50 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_ROUND_ROBIN_1;
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	f646 127a 	movw	r2, #27002	; 0x697a
    e952:	801a      	strh	r2, [r3, #0]
        return;
    e954:	e024      	b.n	e9a0 <OSSchedRoundRobinYield+0xec>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                   /* Move current OS_TCB to the end of the list             */
    e956:	6938      	ldr	r0, [r7, #16]
    e958:	f000 fe62 	bl	f620 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                            /* Point to new OS_TCB at head of the list                */
    e95c:	693b      	ldr	r3, [r7, #16]
    e95e:	681b      	ldr	r3, [r3, #0]
    e960:	60fb      	str	r3, [r7, #12]
    if (p_tcb->TimeQuanta == (OS_TICK)0) {                  /* See if we need to use the default time slice           */
    e962:	68fb      	ldr	r3, [r7, #12]
    e964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e968:	2b00      	cmp	r3, #0
    e96a:	d108      	bne.n	e97e <OSSchedRoundRobinYield+0xca>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
    e96c:	f244 4318 	movw	r3, #17432	; 0x4418
    e970:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e974:	681a      	ldr	r2, [r3, #0]
    e976:	68fb      	ldr	r3, [r7, #12]
    e978:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    e97c:	e005      	b.n	e98a <OSSchedRoundRobinYield+0xd6>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;           /* Load time slice counter with new time                  */
    e97e:	68fb      	ldr	r3, [r7, #12]
    e980:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e984:	68fb      	ldr	r3, [r7, #12]
    e986:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    CPU_CRITICAL_EXIT();
    e98a:	f7f2 ffc1 	bl	1910 <CPU_IntDisMeasStop>
    e98e:	6978      	ldr	r0, [r7, #20]
    e990:	f009 fa2c 	bl	17dec <CPU_SR_Restore>

    OSSched();                                              /* Run new task                                           */
    e994:	f7ff fe44 	bl	e620 <OSSched>
    *p_err = OS_ERR_NONE;
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	f04f 0200 	mov.w	r2, #0
    e99e:	801a      	strh	r2, [r3, #0]
}
    e9a0:	f107 0718 	add.w	r7, r7, #24
    e9a4:	46bd      	mov	sp, r7
    e9a6:	bd80      	pop	{r7, pc}

0000e9a8 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
    e9a8:	b580      	push	{r7, lr}
    e9aa:	b082      	sub	sp, #8
    e9ac:	af00      	add	r7, sp, #0
    e9ae:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
    e9b0:	f643 5360 	movw	r3, #15712	; 0x3d60
    e9b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9b8:	781b      	ldrb	r3, [r3, #0]
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d141      	bne.n	ea42 <OSStart+0x9a>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
    e9be:	f7f7 fbc5 	bl	614c <OS_PrioGetHighest>
    e9c2:	4603      	mov	r3, r0
    e9c4:	461a      	mov	r2, r3
    e9c6:	f244 0368 	movw	r3, #16488	; 0x4068
    e9ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9ce:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
    e9d0:	f244 0368 	movw	r3, #16488	; 0x4068
    e9d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9d8:	781a      	ldrb	r2, [r3, #0]
    e9da:	f244 0378 	movw	r3, #16504	; 0x4078
    e9de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9e2:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
    e9e4:	f244 0368 	movw	r3, #16488	; 0x4068
    e9e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9ec:	781b      	ldrb	r3, [r3, #0]
    e9ee:	4619      	mov	r1, r3
    e9f0:	f643 5264 	movw	r2, #15716	; 0x3d64
    e9f4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e9f8:	460b      	mov	r3, r1
    e9fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    e9fe:	185b      	adds	r3, r3, r1
    ea00:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ea04:	18d3      	adds	r3, r2, r3
    ea06:	681a      	ldr	r2, [r3, #0]
    ea08:	f244 1364 	movw	r3, #16740	; 0x4164
    ea0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea10:	601a      	str	r2, [r3, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
    ea12:	f244 1364 	movw	r3, #16740	; 0x4164
    ea16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea1a:	681a      	ldr	r2, [r3, #0]
    ea1c:	f244 135c 	movw	r3, #16732	; 0x415c
    ea20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea24:	601a      	str	r2, [r3, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
    ea26:	f643 5360 	movw	r3, #15712	; 0x3d60
    ea2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea2e:	f04f 0201 	mov.w	r2, #1
    ea32:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
    ea34:	f009 f9e8 	bl	17e08 <OSStartHighRdy>
        *p_err          = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	f643 2299 	movw	r2, #15001	; 0x3a99
    ea3e:	801a      	strh	r2, [r3, #0]
    ea40:	e003      	b.n	ea4a <OSStart+0xa2>
    } else {
        *p_err          = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    ea42:	687b      	ldr	r3, [r7, #4]
    ea44:	f645 628a 	movw	r2, #24202	; 0x5e8a
    ea48:	801a      	strh	r2, [r3, #0]
    }
}
    ea4a:	f107 0708 	add.w	r7, r7, #8
    ea4e:	46bd      	mov	sp, r7
    ea50:	bd80      	pop	{r7, pc}
    ea52:	bf00      	nop

0000ea54 <OSVersion>:
* Returns    : The version number of uC/OS-III multiplied by 1000.
************************************************************************************************************************
*/

CPU_INT16U  OSVersion (OS_ERR  *p_err)
{
    ea54:	b480      	push	{r7}
    ea56:	b083      	sub	sp, #12
    ea58:	af00      	add	r7, sp, #0
    ea5a:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    *p_err = OS_ERR_NONE;
    ea5c:	687b      	ldr	r3, [r7, #4]
    ea5e:	f04f 0200 	mov.w	r2, #0
    ea62:	801a      	strh	r2, [r3, #0]
    return (OS_VERSION);
    ea64:	f640 33c4 	movw	r3, #3012	; 0xbc4
}
    ea68:	4618      	mov	r0, r3
    ea6a:	f107 070c 	add.w	r7, r7, #12
    ea6e:	46bd      	mov	sp, r7
    ea70:	bc80      	pop	{r7}
    ea72:	4770      	bx	lr

0000ea74 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void *p_arg)
{
    ea74:	b580      	push	{r7, lr}
    ea76:	b084      	sub	sp, #16
    ea78:	af00      	add	r7, sp, #0
    ea7a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
    ea7c:	f04f 0300 	mov.w	r3, #0
    ea80:	60fb      	str	r3, [r7, #12]


    //p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
    ea82:	f009 f9af 	bl	17de4 <CPU_SR_Save>
    ea86:	60f8      	str	r0, [r7, #12]
    ea88:	f7f2 ff16 	bl	18b8 <CPU_IntDisMeasStart>
        OSIdleTaskCtr++;
    ea8c:	f244 4334 	movw	r3, #17460	; 0x4434
    ea90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea94:	681b      	ldr	r3, [r3, #0]
    ea96:	f103 0201 	add.w	r2, r3, #1
    ea9a:	f244 4334 	movw	r3, #17460	; 0x4434
    ea9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eaa2:	601a      	str	r2, [r3, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
    eaa4:	f643 535c 	movw	r3, #15708	; 0x3d5c
    eaa8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eaac:	681b      	ldr	r3, [r3, #0]
    eaae:	f103 0201 	add.w	r2, r3, #1
    eab2:	f643 535c 	movw	r3, #15708	; 0x3d5c
    eab6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eaba:	601a      	str	r2, [r3, #0]
#endif
        CPU_CRITICAL_EXIT();
    eabc:	f7f2 ff28 	bl	1910 <CPU_IntDisMeasStop>
    eac0:	68f8      	ldr	r0, [r7, #12]
    eac2:	f009 f993 	bl	17dec <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
    eac6:	f7f1 fe47 	bl	758 <OSIdleTaskHook>
    }
    eaca:	e7da      	b.n	ea82 <OS_IdleTask+0xe>

0000eacc <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
    eacc:	b580      	push	{r7, lr}
    eace:	b08c      	sub	sp, #48	; 0x30
    ead0:	af0a      	add	r7, sp, #40	; 0x28
    ead2:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
    ead4:	f244 4334 	movw	r3, #17460	; 0x4434
    ead8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eadc:	f04f 0200 	mov.w	r2, #0
    eae0:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
    eae2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
    eae6:	f2c0 0302 	movt	r3, #2
    eaea:	6819      	ldr	r1, [r3, #0]
    eaec:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
    eaf0:	f2c0 0302 	movt	r3, #2
    eaf4:	681a      	ldr	r2, [r3, #0]
    eaf6:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
    eafa:	f2c0 0302 	movt	r3, #2
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	f04f 003f 	mov.w	r0, #63	; 0x3f
    eb04:	9000      	str	r0, [sp, #0]
    eb06:	9101      	str	r1, [sp, #4]
    eb08:	9202      	str	r2, [sp, #8]
    eb0a:	9303      	str	r3, [sp, #12]
    eb0c:	f04f 0300 	mov.w	r3, #0
    eb10:	9304      	str	r3, [sp, #16]
    eb12:	f04f 0300 	mov.w	r3, #0
    eb16:	9305      	str	r3, [sp, #20]
    eb18:	f04f 0300 	mov.w	r3, #0
    eb1c:	9306      	str	r3, [sp, #24]
    eb1e:	f04f 0303 	mov.w	r3, #3
    eb22:	9307      	str	r3, [sp, #28]
    eb24:	687b      	ldr	r3, [r7, #4]
    eb26:	9308      	str	r3, [sp, #32]
    eb28:	f244 2068 	movw	r0, #17000	; 0x4268
    eb2c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb30:	f64c 3110 	movw	r1, #51984	; 0xcb10
    eb34:	f2c0 0102 	movt	r1, #2
    eb38:	f64e 2275 	movw	r2, #60021	; 0xea75
    eb3c:	f2c0 0200 	movt	r2, #0
    eb40:	f04f 0300 	mov.w	r3, #0
    eb44:	f7f8 fd98 	bl	7678 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
    eb48:	f107 0708 	add.w	r7, r7, #8
    eb4c:	46bd      	mov	sp, r7
    eb4e:	bd80      	pop	{r7, pc}

0000eb50 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
    eb50:	b580      	push	{r7, lr}
    eb52:	b086      	sub	sp, #24
    eb54:	af00      	add	r7, sp, #0
    eb56:	60f8      	str	r0, [r7, #12]
    eb58:	60b9      	str	r1, [r7, #8]
    eb5a:	603b      	str	r3, [r7, #0]
    eb5c:	4613      	mov	r3, r2
    eb5e:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
    eb60:	f244 135c 	movw	r3, #16732	; 0x415c
    eb64:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb68:	681b      	ldr	r3, [r3, #0]
    eb6a:	79fa      	ldrb	r2, [r7, #7]
    eb6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
    eb70:	f244 135c 	movw	r3, #16732	; 0x415c
    eb74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	f04f 0200 	mov.w	r2, #0
    eb7e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
    eb82:	f244 135c 	movw	r3, #16732	; 0x415c
    eb86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	4618      	mov	r0, r3
    eb8e:	6839      	ldr	r1, [r7, #0]
    eb90:	f000 fef6 	bl	f980 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
    eb94:	68bb      	ldr	r3, [r7, #8]
    eb96:	2b00      	cmp	r3, #0
    eb98:	d016      	beq.n	ebc8 <OS_Pend+0x78>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
    eb9a:	68bb      	ldr	r3, [r7, #8]
    eb9c:	f103 0308 	add.w	r3, r3, #8
    eba0:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
    eba2:	68fb      	ldr	r3, [r7, #12]
    eba4:	68ba      	ldr	r2, [r7, #8]
    eba6:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
    eba8:	f244 135c 	movw	r3, #16732	; 0x415c
    ebac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebb0:	681b      	ldr	r3, [r3, #0]
    ebb2:	4618      	mov	r0, r3
    ebb4:	68f9      	ldr	r1, [r7, #12]
    ebb6:	f04f 0201 	mov.w	r2, #1
    ebba:	f000 f8d1 	bl	ed60 <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
    ebbe:	6978      	ldr	r0, [r7, #20]
    ebc0:	68f9      	ldr	r1, [r7, #12]
    ebc2:	f000 f9ed 	bl	efa0 <OS_PendListInsertPrio>
    ebc6:	e00f      	b.n	ebe8 <OS_Pend+0x98>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
    ebc8:	f244 135c 	movw	r3, #16732	; 0x415c
    ebcc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebd0:	681b      	ldr	r3, [r3, #0]
    ebd2:	f04f 0200 	mov.w	r2, #0
    ebd6:	869a      	strh	r2, [r3, #52]	; 0x34
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
    ebd8:	f244 135c 	movw	r3, #16732	; 0x415c
    ebdc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebe0:	681b      	ldr	r3, [r3, #0]
    ebe2:	f04f 0200 	mov.w	r2, #0
    ebe6:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
    ebe8:	f244 135c 	movw	r3, #16732	; 0x415c
    ebec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebf0:	681b      	ldr	r3, [r3, #0]
    ebf2:	68b8      	ldr	r0, [r7, #8]
    ebf4:	4619      	mov	r1, r3
    ebf6:	f000 f8f1 	bl	eddc <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
    ebfa:	f107 0718 	add.w	r7, r7, #24
    ebfe:	46bd      	mov	sp, r7
    ec00:	bd80      	pop	{r7, pc}
    ec02:	bf00      	nop

0000ec04 <OS_PendAbort>:
*/

void   OS_PendAbort (OS_PEND_OBJ *p_obj,
                     OS_TCB      *p_tcb,
                     CPU_TS       ts)
{
    ec04:	b580      	push	{r7, lr}
    ec06:	b084      	sub	sp, #16
    ec08:	af00      	add	r7, sp, #0
    ec0a:	60f8      	str	r0, [r7, #12]
    ec0c:	60b9      	str	r1, [r7, #8]
    ec0e:	607a      	str	r2, [r7, #4]
    switch (p_tcb->TaskState) {
    ec10:	68bb      	ldr	r3, [r7, #8]
    ec12:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    ec16:	2b07      	cmp	r3, #7
    ec18:	d870      	bhi.n	ecfc <OS_PendAbort+0xf8>
    ec1a:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    ec1e:	fa02 f203 	lsl.w	r2, r2, r3
    ec22:	2a00      	cmp	r2, #0
    ec24:	db6c      	blt.n	ed00 <OS_PendAbort+0xfc>
    ec26:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
    ec2a:	fa02 f203 	lsl.w	r2, r2, r3
    ec2e:	2a00      	cmp	r2, #0
    ec30:	db34      	blt.n	ec9c <OS_PendAbort+0x98>
    ec32:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    ec36:	fa02 f303 	lsl.w	r3, r2, r3
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	da5d      	bge.n	ecfa <OS_PendAbort+0xf6>
        case OS_TASK_STATE_DLY_SUSPENDED:                   /* Cannot Pend Abort a suspended task that was also dly'd */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    ec3e:	68bb      	ldr	r3, [r7, #8]
    ec40:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    ec44:	2b03      	cmp	r3, #3
    ec46:	d104      	bne.n	ec52 <OS_PendAbort+0x4e>
                 OS_PendAbort1(p_obj,                            /* Indicate which object was pend aborted            */
    ec48:	68f8      	ldr	r0, [r7, #12]
    ec4a:	68b9      	ldr	r1, [r7, #8]
    ec4c:	687a      	ldr	r2, [r7, #4]
    ec4e:	f000 f85d 	bl	ed0c <OS_PendAbort1>
                               p_tcb,
                               ts);
             }
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr     = (void      *)0;
    ec52:	68bb      	ldr	r3, [r7, #8]
    ec54:	f04f 0200 	mov.w	r2, #0
    ec58:	63da      	str	r2, [r3, #60]	; 0x3c
             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    ec5a:	68bb      	ldr	r3, [r7, #8]
    ec5c:	f04f 0200 	mov.w	r2, #0
    ec60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
             p_tcb->TS         = ts;
    ec64:	68bb      	ldr	r3, [r7, #8]
    ec66:	687a      	ldr	r2, [r7, #4]
    ec68:	639a      	str	r2, [r3, #56]	; 0x38
             if (p_obj != (OS_PEND_OBJ *)0) {
    ec6a:	68fb      	ldr	r3, [r7, #12]
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	d002      	beq.n	ec76 <OS_PendAbort+0x72>
                 OS_PendListRemove(p_tcb);                       /* Remove task from all pend lists                   */
    ec70:	68b8      	ldr	r0, [r7, #8]
    ec72:	f000 fa0f 	bl	f094 <OS_PendListRemove>
             }
             OS_TaskRdy(p_tcb);
    ec76:	68b8      	ldr	r0, [r7, #8]
    ec78:	f000 feae 	bl	f9d8 <OS_TaskRdy>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;              /* Task will be ready                                */
    ec7c:	68bb      	ldr	r3, [r7, #8]
    ec7e:	f04f 0200 	mov.w	r2, #0
    ec82:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_ABORT;           /* Indicate pend was aborted                         */
    ec86:	68bb      	ldr	r3, [r7, #8]
    ec88:	f04f 0201 	mov.w	r2, #1
    ec8c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
    ec90:	68bb      	ldr	r3, [r7, #8]
    ec92:	f04f 0200 	mov.w	r2, #0
    ec96:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    ec9a:	e032      	b.n	ed02 <OS_PendAbort+0xfe>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    ec9c:	68bb      	ldr	r3, [r7, #8]
    ec9e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    eca2:	2b03      	cmp	r3, #3
    eca4:	d104      	bne.n	ecb0 <OS_PendAbort+0xac>
                 OS_PendAbort1(p_obj,                            /* Indicate which object was pend aborted            */
    eca6:	68f8      	ldr	r0, [r7, #12]
    eca8:	68b9      	ldr	r1, [r7, #8]
    ecaa:	687a      	ldr	r2, [r7, #4]
    ecac:	f000 f82e 	bl	ed0c <OS_PendAbort1>
                               p_tcb,
                               ts);
             }
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr     = (void      *)0;
    ecb0:	68bb      	ldr	r3, [r7, #8]
    ecb2:	f04f 0200 	mov.w	r2, #0
    ecb6:	63da      	str	r2, [r3, #60]	; 0x3c
             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    ecb8:	68bb      	ldr	r3, [r7, #8]
    ecba:	f04f 0200 	mov.w	r2, #0
    ecbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
             p_tcb->TS         = ts;
    ecc2:	68bb      	ldr	r3, [r7, #8]
    ecc4:	687a      	ldr	r2, [r7, #4]
    ecc6:	639a      	str	r2, [r3, #56]	; 0x38
             if (p_obj != (OS_PEND_OBJ *)0) {
    ecc8:	68fb      	ldr	r3, [r7, #12]
    ecca:	2b00      	cmp	r3, #0
    eccc:	d002      	beq.n	ecd4 <OS_PendAbort+0xd0>
                 OS_PendListRemove(p_tcb);                       /* Remove task from all pend lists                   */
    ecce:	68b8      	ldr	r0, [r7, #8]
    ecd0:	f000 f9e0 	bl	f094 <OS_PendListRemove>
             }
             OS_TickListRemove(p_tcb);                           /* Cancel the timeout                                */
    ecd4:	68b8      	ldr	r0, [r7, #8]
    ecd6:	f001 f86d 	bl	fdb4 <OS_TickListRemove>
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;        /* Pend Aborted task is still suspended              */
    ecda:	68bb      	ldr	r3, [r7, #8]
    ecdc:	f04f 0204 	mov.w	r2, #4
    ece0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_ABORT;           /* Indicate pend was aborted                         */
    ece4:	68bb      	ldr	r3, [r7, #8]
    ece6:	f04f 0201 	mov.w	r2, #1
    ecea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
    ecee:	68bb      	ldr	r3, [r7, #8]
    ecf0:	f04f 0200 	mov.w	r2, #0
    ecf4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    ecf8:	e003      	b.n	ed02 <OS_PendAbort+0xfe>

        default:
             break;
    ecfa:	bf00      	nop
    ecfc:	bf00      	nop
    ecfe:	e000      	b.n	ed02 <OS_PendAbort+0xfe>
    switch (p_tcb->TaskState) {
        case OS_TASK_STATE_RDY:                             /* Cannot Pend Abort a task that is ready                 */
        case OS_TASK_STATE_DLY:                             /* Cannot Pend Abort a task that is delayed               */
        case OS_TASK_STATE_SUSPENDED:                       /* Cannot Pend Abort a suspended task                     */
        case OS_TASK_STATE_DLY_SUSPENDED:                   /* Cannot Pend Abort a suspended task that was also dly'd */
             break;
    ed00:	bf00      	nop
             break;

        default:
             break;
    }
}
    ed02:	f107 0710 	add.w	r7, r7, #16
    ed06:	46bd      	mov	sp, r7
    ed08:	bd80      	pop	{r7, pc}
    ed0a:	bf00      	nop

0000ed0c <OS_PendAbort1>:
*/

void  OS_PendAbort1 (OS_PEND_OBJ  *p_obj,
                     OS_TCB       *p_tcb,
                     CPU_TS        ts)
{
    ed0c:	b480      	push	{r7}
    ed0e:	b087      	sub	sp, #28
    ed10:	af00      	add	r7, sp, #0
    ed12:	60f8      	str	r0, [r7, #12]
    ed14:	60b9      	str	r1, [r7, #8]
    ed16:	607a      	str	r2, [r7, #4]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    ed18:	68bb      	ldr	r3, [r7, #8]
    ed1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ed1c:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
    ed1e:	68bb      	ldr	r3, [r7, #8]
    ed20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    ed22:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    ed24:	e013      	b.n	ed4e <OS_PendAbort1+0x42>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object pend aborted?           */
    ed26:	693b      	ldr	r3, [r7, #16]
    ed28:	68da      	ldr	r2, [r3, #12]
    ed2a:	68fb      	ldr	r3, [r7, #12]
    ed2c:	429a      	cmp	r2, r3
    ed2e:	d106      	bne.n	ed3e <OS_PendAbort1+0x32>
            p_pend_data->RdyObjPtr = p_obj;                         /* Yes, indicate the object in the .RdyObjPtr     */
    ed30:	693b      	ldr	r3, [r7, #16]
    ed32:	68fa      	ldr	r2, [r7, #12]
    ed34:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyTS     = ts;                            /*      save the timestamp of the pend abort      */
    ed36:	693b      	ldr	r3, [r7, #16]
    ed38:	687a      	ldr	r2, [r7, #4]
    ed3a:	61da      	str	r2, [r3, #28]
            break;
    ed3c:	e00a      	b.n	ed54 <OS_PendAbort1+0x48>
        }
        p_pend_data++;
    ed3e:	693b      	ldr	r3, [r7, #16]
    ed40:	f103 0320 	add.w	r3, r3, #32
    ed44:	613b      	str	r3, [r7, #16]
        n_pend_list--;
    ed46:	8afb      	ldrh	r3, [r7, #22]
    ed48:	f103 33ff 	add.w	r3, r3, #4294967295
    ed4c:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    ed4e:	8afb      	ldrh	r3, [r7, #22]
    ed50:	2b00      	cmp	r3, #0
    ed52:	d1e8      	bne.n	ed26 <OS_PendAbort1+0x1a>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
    ed54:	f107 071c 	add.w	r7, r7, #28
    ed58:	46bd      	mov	sp, r7
    ed5a:	bc80      	pop	{r7}
    ed5c:	4770      	bx	lr
    ed5e:	bf00      	nop

0000ed60 <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
    ed60:	b480      	push	{r7}
    ed62:	b087      	sub	sp, #28
    ed64:	af00      	add	r7, sp, #0
    ed66:	60f8      	str	r0, [r7, #12]
    ed68:	60b9      	str	r1, [r7, #8]
    ed6a:	4613      	mov	r3, r2
    ed6c:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    ed6e:	68fb      	ldr	r3, [r7, #12]
    ed70:	88fa      	ldrh	r2, [r7, #6]
    ed72:	869a      	strh	r2, [r3, #52]	; 0x34
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
    ed74:	68fb      	ldr	r3, [r7, #12]
    ed76:	68ba      	ldr	r2, [r7, #8]
    ed78:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
    ed7a:	f04f 0300 	mov.w	r3, #0
    ed7e:	82fb      	strh	r3, [r7, #22]
    ed80:	e022      	b.n	edc8 <OS_PendDataInit+0x68>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
    ed82:	68bb      	ldr	r3, [r7, #8]
    ed84:	f04f 0200 	mov.w	r2, #0
    ed88:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
    ed8a:	68bb      	ldr	r3, [r7, #8]
    ed8c:	f04f 0200 	mov.w	r2, #0
    ed90:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (void         *)0;
    ed92:	68bb      	ldr	r3, [r7, #8]
    ed94:	f04f 0200 	mov.w	r2, #0
    ed98:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
    ed9a:	68bb      	ldr	r3, [r7, #8]
    ed9c:	f04f 0200 	mov.w	r2, #0
    eda0:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
    eda2:	68bb      	ldr	r3, [r7, #8]
    eda4:	f04f 0200 	mov.w	r2, #0
    eda8:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
    edaa:	68bb      	ldr	r3, [r7, #8]
    edac:	f04f 0200 	mov.w	r2, #0
    edb0:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
    edb2:	68bb      	ldr	r3, [r7, #8]
    edb4:	68fa      	ldr	r2, [r7, #12]
    edb6:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
    edb8:	68bb      	ldr	r3, [r7, #8]
    edba:	f103 0320 	add.w	r3, r3, #32
    edbe:	60bb      	str	r3, [r7, #8]


    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;

    for (i = 0u; i < tbl_size; i++) {
    edc0:	8afb      	ldrh	r3, [r7, #22]
    edc2:	f103 0301 	add.w	r3, r3, #1
    edc6:	82fb      	strh	r3, [r7, #22]
    edc8:	8afa      	ldrh	r2, [r7, #22]
    edca:	88fb      	ldrh	r3, [r7, #6]
    edcc:	429a      	cmp	r2, r3
    edce:	d3d8      	bcc.n	ed82 <OS_PendDataInit+0x22>
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
        p_pend_data_tbl++;
    }
}
    edd0:	f107 071c 	add.w	r7, r7, #28
    edd4:	46bd      	mov	sp, r7
    edd6:	bc80      	pop	{r7}
    edd8:	4770      	bx	lr
    edda:	bf00      	nop

0000eddc <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
    eddc:	b480      	push	{r7}
    edde:	b087      	sub	sp, #28
    ede0:	af00      	add	r7, sp, #0
    ede2:	6078      	str	r0, [r7, #4]
    ede4:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
    ede6:	687b      	ldr	r3, [r7, #4]
    ede8:	2b00      	cmp	r3, #0
    edea:	d013      	beq.n	ee14 <OS_PendDbgNameAdd+0x38>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
    edec:	687b      	ldr	r3, [r7, #4]
    edee:	685a      	ldr	r2, [r3, #4]
    edf0:	683b      	ldr	r3, [r7, #0]
    edf2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	f103 0308 	add.w	r3, r3, #8
    edfc:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
    edfe:	697b      	ldr	r3, [r7, #20]
    ee00:	681b      	ldr	r3, [r3, #0]
    ee02:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
    ee04:	693b      	ldr	r3, [r7, #16]
    ee06:	689b      	ldr	r3, [r3, #8]
    ee08:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
    ee0a:	68fb      	ldr	r3, [r7, #12]
    ee0c:	6a1a      	ldr	r2, [r3, #32]
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	61da      	str	r2, [r3, #28]
    ee12:	e01f      	b.n	ee54 <OS_PendDbgNameAdd+0x78>
    } else {
        switch (p_tcb->PendOn) {
    ee14:	683b      	ldr	r3, [r7, #0]
    ee16:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    ee1a:	2b02      	cmp	r3, #2
    ee1c:	d002      	beq.n	ee24 <OS_PendDbgNameAdd+0x48>
    ee1e:	2b07      	cmp	r3, #7
    ee20:	d008      	beq.n	ee34 <OS_PendDbgNameAdd+0x58>
    ee22:	e00f      	b.n	ee44 <OS_PendDbgNameAdd+0x68>
            case OS_TASK_PEND_ON_TASK_Q:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
    ee24:	683a      	ldr	r2, [r7, #0]
    ee26:	f64c 3324 	movw	r3, #52004	; 0xcb24
    ee2a:	f2c0 0302 	movt	r3, #2
    ee2e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
                 break;
    ee32:	e00f      	b.n	ee54 <OS_PendDbgNameAdd+0x78>

            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
    ee34:	683a      	ldr	r2, [r7, #0]
    ee36:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ee3a:	f2c0 0302 	movt	r3, #2
    ee3e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
                 break;
    ee42:	e007      	b.n	ee54 <OS_PendDbgNameAdd+0x78>

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
    ee44:	683a      	ldr	r2, [r7, #0]
    ee46:	f64c 3338 	movw	r3, #52024	; 0xcb38
    ee4a:	f2c0 0302 	movt	r3, #2
    ee4e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
                 break;
    ee52:	bf00      	nop
        }
    }
}
    ee54:	f107 071c 	add.w	r7, r7, #28
    ee58:	46bd      	mov	sp, r7
    ee5a:	bc80      	pop	{r7}
    ee5c:	4770      	bx	lr
    ee5e:	bf00      	nop

0000ee60 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
    ee60:	b480      	push	{r7}
    ee62:	b087      	sub	sp, #28
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]
    ee68:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
    ee6a:	683a      	ldr	r2, [r7, #0]
    ee6c:	f64c 3338 	movw	r3, #52024	; 0xcb38
    ee70:	f2c0 0302 	movt	r3, #2
    ee74:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
    p_pend_list       = &p_obj->PendList;
    ee78:	687b      	ldr	r3, [r7, #4]
    ee7a:	f103 0308 	add.w	r3, r3, #8
    ee7e:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
    ee80:	697b      	ldr	r3, [r7, #20]
    ee82:	681b      	ldr	r3, [r3, #0]
    ee84:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
    ee86:	693b      	ldr	r3, [r7, #16]
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d007      	beq.n	ee9c <OS_PendDbgNameRemove+0x3c>
        p_tcb1            = p_pend_data->TCBPtr;
    ee8c:	693b      	ldr	r3, [r7, #16]
    ee8e:	689b      	ldr	r3, [r3, #8]
    ee90:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
    ee92:	68fb      	ldr	r3, [r7, #12]
    ee94:	6a1a      	ldr	r2, [r3, #32]
    ee96:	687b      	ldr	r3, [r7, #4]
    ee98:	61da      	str	r2, [r3, #28]
    ee9a:	e005      	b.n	eea8 <OS_PendDbgNameRemove+0x48>
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    ee9c:	687a      	ldr	r2, [r7, #4]
    ee9e:	f64c 3338 	movw	r3, #52024	; 0xcb38
    eea2:	f2c0 0302 	movt	r3, #2
    eea6:	61d3      	str	r3, [r2, #28]
    }
}
    eea8:	f107 071c 	add.w	r7, r7, #28
    eeac:	46bd      	mov	sp, r7
    eeae:	bc80      	pop	{r7}
    eeb0:	4770      	bx	lr
    eeb2:	bf00      	nop

0000eeb4 <OS_PendListChangePrio>:
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB  *p_tcb,
                             OS_PRIO  prio_new)
{
    eeb4:	b580      	push	{r7, lr}
    eeb6:	b086      	sub	sp, #24
    eeb8:	af00      	add	r7, sp, #0
    eeba:	6078      	str	r0, [r7, #4]
    eebc:	460b      	mov	r3, r1
    eebe:	70fb      	strb	r3, [r7, #3]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_tcb->Prio = prio_new;
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	78fa      	ldrb	r2, [r7, #3]
    eec4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    eec8:	687b      	ldr	r3, [r7, #4]
    eeca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    eecc:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
    eece:	687b      	ldr	r3, [r7, #4]
    eed0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    eed2:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
    eed4:	e01a      	b.n	ef0c <OS_PendListChangePrio+0x58>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
    eed6:	693b      	ldr	r3, [r7, #16]
    eed8:	68db      	ldr	r3, [r3, #12]
    eeda:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
    eedc:	68fb      	ldr	r3, [r7, #12]
    eede:	f103 0308 	add.w	r3, r3, #8
    eee2:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
    eee4:	68bb      	ldr	r3, [r7, #8]
    eee6:	891b      	ldrh	r3, [r3, #8]
    eee8:	2b01      	cmp	r3, #1
    eeea:	d907      	bls.n	eefc <OS_PendListChangePrio+0x48>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
    eeec:	68b8      	ldr	r0, [r7, #8]
    eeee:	6939      	ldr	r1, [r7, #16]
    eef0:	f000 f8fe 	bl	f0f0 <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
    eef4:	68b8      	ldr	r0, [r7, #8]
    eef6:	6939      	ldr	r1, [r7, #16]
    eef8:	f000 f852 	bl	efa0 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
    eefc:	693b      	ldr	r3, [r7, #16]
    eefe:	f103 0320 	add.w	r3, r3, #32
    ef02:	613b      	str	r3, [r7, #16]
        n_pend_list--;
    ef04:	8afb      	ldrh	r3, [r7, #22]
    ef06:	f103 33ff 	add.w	r3, r3, #4294967295
    ef0a:	82fb      	strh	r3, [r7, #22]

    p_tcb->Prio = prio_new;
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */

    while (n_pend_list > 0u) {
    ef0c:	8afb      	ldrh	r3, [r7, #22]
    ef0e:	2b00      	cmp	r3, #0
    ef10:	d1e1      	bne.n	eed6 <OS_PendListChangePrio+0x22>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
        n_pend_list--;
    }
}
    ef12:	f107 0718 	add.w	r7, r7, #24
    ef16:	46bd      	mov	sp, r7
    ef18:	bd80      	pop	{r7, pc}
    ef1a:	bf00      	nop

0000ef1c <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
    ef1c:	b480      	push	{r7}
    ef1e:	b083      	sub	sp, #12
    ef20:	af00      	add	r7, sp, #0
    ef22:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
    ef24:	687b      	ldr	r3, [r7, #4]
    ef26:	f04f 0200 	mov.w	r2, #0
    ef2a:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	f04f 0200 	mov.w	r2, #0
    ef32:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	f04f 0200 	mov.w	r2, #0
    ef3a:	811a      	strh	r2, [r3, #8]
}
    ef3c:	f107 070c 	add.w	r7, r7, #12
    ef40:	46bd      	mov	sp, r7
    ef42:	bc80      	pop	{r7}
    ef44:	4770      	bx	lr
    ef46:	bf00      	nop

0000ef48 <OS_PendListInsertHead>:
************************************************************************************************************************
*/

void  OS_PendListInsertHead (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
    ef48:	b480      	push	{r7}
    ef4a:	b085      	sub	sp, #20
    ef4c:	af00      	add	r7, sp, #0
    ef4e:	6078      	str	r0, [r7, #4]
    ef50:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_next;



    p_pend_list->NbrEntries++;                              /* One more entry in the list                             */
    ef52:	687b      	ldr	r3, [r7, #4]
    ef54:	891b      	ldrh	r3, [r3, #8]
    ef56:	f103 0301 	add.w	r3, r3, #1
    ef5a:	b29a      	uxth	r2, r3
    ef5c:	687b      	ldr	r3, [r7, #4]
    ef5e:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr  = p_pend_list->HeadPtr;           /* Adjust new entry's links                               */
    ef60:	687b      	ldr	r3, [r7, #4]
    ef62:	681a      	ldr	r2, [r3, #0]
    ef64:	683b      	ldr	r3, [r7, #0]
    ef66:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr  = (OS_PEND_DATA  *)0;
    ef68:	683b      	ldr	r3, [r7, #0]
    ef6a:	f04f 0200 	mov.w	r2, #0
    ef6e:	601a      	str	r2, [r3, #0]
    p_pend_data_next      = p_pend_list->HeadPtr;           /* Adjust old head of list's links                        */
    ef70:	687b      	ldr	r3, [r7, #4]
    ef72:	681b      	ldr	r3, [r3, #0]
    ef74:	60fb      	str	r3, [r7, #12]
    if (p_pend_data_next != (OS_PEND_DATA *)0) {            /* See if we already have a head to replace               */
    ef76:	68fb      	ldr	r3, [r7, #12]
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d002      	beq.n	ef82 <OS_PendListInsertHead+0x3a>
        p_pend_data_next->PrevPtr = p_pend_data;            /* Yes, point to new entry                                */
    ef7c:	68fb      	ldr	r3, [r7, #12]
    ef7e:	683a      	ldr	r2, [r7, #0]
    ef80:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->HeadPtr = p_pend_data;                     /* We have a new list head                                */
    ef82:	687b      	ldr	r3, [r7, #4]
    ef84:	683a      	ldr	r2, [r7, #0]
    ef86:	601a      	str	r2, [r3, #0]
    if (p_pend_list->NbrEntries == 1u) {
    ef88:	687b      	ldr	r3, [r7, #4]
    ef8a:	891b      	ldrh	r3, [r3, #8]
    ef8c:	2b01      	cmp	r3, #1
    ef8e:	d102      	bne.n	ef96 <OS_PendListInsertHead+0x4e>
        p_pend_list->TailPtr = p_pend_data;
    ef90:	687b      	ldr	r3, [r7, #4]
    ef92:	683a      	ldr	r2, [r7, #0]
    ef94:	605a      	str	r2, [r3, #4]
    }
}
    ef96:	f107 0714 	add.w	r7, r7, #20
    ef9a:	46bd      	mov	sp, r7
    ef9c:	bc80      	pop	{r7}
    ef9e:	4770      	bx	lr

0000efa0 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
    efa0:	b480      	push	{r7}
    efa2:	b089      	sub	sp, #36	; 0x24
    efa4:	af00      	add	r7, sp, #0
    efa6:	6078      	str	r0, [r7, #4]
    efa8:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
    efaa:	683b      	ldr	r3, [r7, #0]
    efac:	689b      	ldr	r3, [r3, #8]
    efae:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
    efb0:	69bb      	ldr	r3, [r7, #24]
    efb2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    efb6:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
    efb8:	687b      	ldr	r3, [r7, #4]
    efba:	891b      	ldrh	r3, [r3, #8]
    efbc:	2b00      	cmp	r3, #0
    efbe:	d112      	bne.n	efe6 <OS_PendListInsertPrio+0x46>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
    efc0:	687b      	ldr	r3, [r7, #4]
    efc2:	f04f 0201 	mov.w	r2, #1
    efc6:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
    efc8:	683b      	ldr	r3, [r7, #0]
    efca:	f04f 0200 	mov.w	r2, #0
    efce:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
    efd0:	683b      	ldr	r3, [r7, #0]
    efd2:	f04f 0200 	mov.w	r2, #0
    efd6:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
    efd8:	687b      	ldr	r3, [r7, #4]
    efda:	683a      	ldr	r2, [r7, #0]
    efdc:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
    efde:	687b      	ldr	r3, [r7, #4]
    efe0:	683a      	ldr	r2, [r7, #0]
    efe2:	605a      	str	r2, [r3, #4]
    efe4:	e050      	b.n	f088 <OS_PendListInsertPrio+0xe8>
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	891b      	ldrh	r3, [r3, #8]
    efea:	f103 0301 	add.w	r3, r3, #1
    efee:	b29a      	uxth	r2, r3
    eff0:	687b      	ldr	r3, [r7, #4]
    eff2:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
    eff4:	687b      	ldr	r3, [r7, #4]
    eff6:	681b      	ldr	r3, [r3, #0]
    eff8:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
    effa:	e00b      	b.n	f014 <OS_PendListInsertPrio+0x74>
            p_tcb_next   = p_pend_data_next->TCBPtr;
    effc:	69fb      	ldr	r3, [r7, #28]
    effe:	689b      	ldr	r3, [r3, #8]
    f000:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
    f002:	693b      	ldr	r3, [r7, #16]
    f004:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f008:	7dfa      	ldrb	r2, [r7, #23]
    f00a:	429a      	cmp	r2, r3
    f00c:	d306      	bcc.n	f01c <OS_PendListInsertPrio+0x7c>
                break;                                                /*         Found! ... insert BEFORE current     */
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
    f00e:	69fb      	ldr	r3, [r7, #28]
    f010:	685b      	ldr	r3, [r3, #4]
    f012:	61fb      	str	r3, [r7, #28]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
        p_pend_data_next = p_pend_list->HeadPtr;
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
    f014:	69fb      	ldr	r3, [r7, #28]
    f016:	2b00      	cmp	r3, #0
    f018:	d1f0      	bne.n	effc <OS_PendListInsertPrio+0x5c>
    f01a:	e000      	b.n	f01e <OS_PendListInsertPrio+0x7e>
            p_tcb_next   = p_pend_data_next->TCBPtr;
            if (prio < p_tcb_next->Prio) {
                break;                                                /*         Found! ... insert BEFORE current     */
    f01c:	bf00      	nop
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
            }
        }
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
    f01e:	69fb      	ldr	r3, [r7, #28]
    f020:	2b00      	cmp	r3, #0
    f022:	d110      	bne.n	f046 <OS_PendListInsertPrio+0xa6>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
    f024:	683b      	ldr	r3, [r7, #0]
    f026:	f04f 0200 	mov.w	r2, #0
    f02a:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
    f02c:	687b      	ldr	r3, [r7, #4]
    f02e:	685b      	ldr	r3, [r3, #4]
    f030:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
    f032:	683b      	ldr	r3, [r7, #0]
    f034:	68fa      	ldr	r2, [r7, #12]
    f036:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
    f038:	68fb      	ldr	r3, [r7, #12]
    f03a:	683a      	ldr	r2, [r7, #0]
    f03c:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
    f03e:	687b      	ldr	r3, [r7, #4]
    f040:	683a      	ldr	r2, [r7, #0]
    f042:	605a      	str	r2, [r3, #4]
    f044:	e020      	b.n	f088 <OS_PendListInsertPrio+0xe8>
        } else {
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
    f046:	69fb      	ldr	r3, [r7, #28]
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	2b00      	cmp	r3, #0
    f04c:	d10d      	bne.n	f06a <OS_PendListInsertPrio+0xca>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
    f04e:	69fb      	ldr	r3, [r7, #28]
    f050:	683a      	ldr	r2, [r7, #0]
    f052:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
    f054:	683b      	ldr	r3, [r7, #0]
    f056:	f04f 0200 	mov.w	r2, #0
    f05a:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
    f05c:	683b      	ldr	r3, [r7, #0]
    f05e:	69fa      	ldr	r2, [r7, #28]
    f060:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
    f062:	687b      	ldr	r3, [r7, #4]
    f064:	683a      	ldr	r2, [r7, #0]
    f066:	601a      	str	r2, [r3, #0]
    f068:	e00e      	b.n	f088 <OS_PendListInsertPrio+0xe8>
            } else {
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
    f06a:	69fb      	ldr	r3, [r7, #28]
    f06c:	681b      	ldr	r3, [r3, #0]
    f06e:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
    f070:	683b      	ldr	r3, [r7, #0]
    f072:	68fa      	ldr	r2, [r7, #12]
    f074:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
    f076:	683b      	ldr	r3, [r7, #0]
    f078:	69fa      	ldr	r2, [r7, #28]
    f07a:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
    f07c:	68fb      	ldr	r3, [r7, #12]
    f07e:	683a      	ldr	r2, [r7, #0]
    f080:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
    f082:	69fb      	ldr	r3, [r7, #28]
    f084:	683a      	ldr	r2, [r7, #0]
    f086:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
    f088:	f107 0724 	add.w	r7, r7, #36	; 0x24
    f08c:	46bd      	mov	sp, r7
    f08e:	bc80      	pop	{r7}
    f090:	4770      	bx	lr
    f092:	bf00      	nop

0000f094 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
    f094:	b580      	push	{r7, lr}
    f096:	b086      	sub	sp, #24
    f098:	af00      	add	r7, sp, #0
    f09a:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f0a0:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f0a6:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
    f0a8:	e012      	b.n	f0d0 <OS_PendListRemove+0x3c>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
    f0aa:	693b      	ldr	r3, [r7, #16]
    f0ac:	68db      	ldr	r3, [r3, #12]
    f0ae:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
    f0b0:	68fb      	ldr	r3, [r7, #12]
    f0b2:	f103 0308 	add.w	r3, r3, #8
    f0b6:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
    f0b8:	68b8      	ldr	r0, [r7, #8]
    f0ba:	6939      	ldr	r1, [r7, #16]
    f0bc:	f000 f818 	bl	f0f0 <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
    f0c0:	693b      	ldr	r3, [r7, #16]
    f0c2:	f103 0320 	add.w	r3, r3, #32
    f0c6:	613b      	str	r3, [r7, #16]
        n_pend_list--;
    f0c8:	8afb      	ldrh	r3, [r7, #22]
    f0ca:	f103 33ff 	add.w	r3, r3, #4294967295
    f0ce:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {
    f0d0:	8afb      	ldrh	r3, [r7, #22]
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d1e9      	bne.n	f0aa <OS_PendListRemove+0x16>
        OS_PendListRemove1(p_pend_list,
                           p_pend_data);
        p_pend_data++;
        n_pend_list--;
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
    f0d6:	687b      	ldr	r3, [r7, #4]
    f0d8:	f04f 0200 	mov.w	r2, #0
    f0dc:	869a      	strh	r2, [r3, #52]	; 0x34
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
    f0de:	687b      	ldr	r3, [r7, #4]
    f0e0:	f04f 0200 	mov.w	r2, #0
    f0e4:	631a      	str	r2, [r3, #48]	; 0x30
}
    f0e6:	f107 0718 	add.w	r7, r7, #24
    f0ea:	46bd      	mov	sp, r7
    f0ec:	bd80      	pop	{r7, pc}
    f0ee:	bf00      	nop

0000f0f0 <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
    f0f0:	b480      	push	{r7}
    f0f2:	b085      	sub	sp, #20
    f0f4:	af00      	add	r7, sp, #0
    f0f6:	6078      	str	r0, [r7, #4]
    f0f8:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
    f0fa:	687b      	ldr	r3, [r7, #4]
    f0fc:	891b      	ldrh	r3, [r3, #8]
    f0fe:	2b01      	cmp	r3, #1
    f100:	d108      	bne.n	f114 <OS_PendListRemove1+0x24>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
    f102:	687b      	ldr	r3, [r7, #4]
    f104:	f04f 0200 	mov.w	r2, #0
    f108:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
    f10a:	687b      	ldr	r3, [r7, #4]
    f10c:	f04f 0200 	mov.w	r2, #0
    f110:	605a      	str	r2, [r3, #4]
    f112:	e029      	b.n	f168 <OS_PendListRemove1+0x78>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
    f114:	683b      	ldr	r3, [r7, #0]
    f116:	681b      	ldr	r3, [r3, #0]
    f118:	2b00      	cmp	r3, #0
    f11a:	d10a      	bne.n	f132 <OS_PendListRemove1+0x42>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
    f11c:	683b      	ldr	r3, [r7, #0]
    f11e:	685b      	ldr	r3, [r3, #4]
    f120:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
    f122:	68fb      	ldr	r3, [r7, #12]
    f124:	f04f 0200 	mov.w	r2, #0
    f128:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
    f12a:	687b      	ldr	r3, [r7, #4]
    f12c:	68fa      	ldr	r2, [r7, #12]
    f12e:	601a      	str	r2, [r3, #0]
    f130:	e01a      	b.n	f168 <OS_PendListRemove1+0x78>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
    f132:	683b      	ldr	r3, [r7, #0]
    f134:	685b      	ldr	r3, [r3, #4]
    f136:	2b00      	cmp	r3, #0
    f138:	d10a      	bne.n	f150 <OS_PendListRemove1+0x60>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
    f13a:	683b      	ldr	r3, [r7, #0]
    f13c:	681b      	ldr	r3, [r3, #0]
    f13e:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
    f140:	68bb      	ldr	r3, [r7, #8]
    f142:	f04f 0200 	mov.w	r2, #0
    f146:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
    f148:	687b      	ldr	r3, [r7, #4]
    f14a:	68ba      	ldr	r2, [r7, #8]
    f14c:	605a      	str	r2, [r3, #4]
    f14e:	e00b      	b.n	f168 <OS_PendListRemove1+0x78>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
    f150:	683b      	ldr	r3, [r7, #0]
    f152:	681b      	ldr	r3, [r3, #0]
    f154:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
    f156:	683b      	ldr	r3, [r7, #0]
    f158:	685b      	ldr	r3, [r3, #4]
    f15a:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
    f15c:	68bb      	ldr	r3, [r7, #8]
    f15e:	68fa      	ldr	r2, [r7, #12]
    f160:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
    f162:	68fb      	ldr	r3, [r7, #12]
    f164:	68ba      	ldr	r2, [r7, #8]
    f166:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	891b      	ldrh	r3, [r3, #8]
    f16c:	f103 33ff 	add.w	r3, r3, #4294967295
    f170:	b29a      	uxth	r2, r3
    f172:	687b      	ldr	r3, [r7, #4]
    f174:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
    f176:	683b      	ldr	r3, [r7, #0]
    f178:	f04f 0200 	mov.w	r2, #0
    f17c:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
    f17e:	683b      	ldr	r3, [r7, #0]
    f180:	f04f 0200 	mov.w	r2, #0
    f184:	601a      	str	r2, [r3, #0]
}
    f186:	f107 0714 	add.w	r7, r7, #20
    f18a:	46bd      	mov	sp, r7
    f18c:	bc80      	pop	{r7}
    f18e:	4770      	bx	lr

0000f190 <OS_PendObjDel>:
*/

void   OS_PendObjDel (OS_PEND_OBJ *p_obj,
                      OS_TCB      *p_tcb,
                      CPU_TS       ts)
{
    f190:	b580      	push	{r7, lr}
    f192:	b084      	sub	sp, #16
    f194:	af00      	add	r7, sp, #0
    f196:	60f8      	str	r0, [r7, #12]
    f198:	60b9      	str	r1, [r7, #8]
    f19a:	607a      	str	r2, [r7, #4]
    switch (p_tcb->TaskState) {
    f19c:	68bb      	ldr	r3, [r7, #8]
    f19e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    f1a2:	2b07      	cmp	r3, #7
    f1a4:	d86a      	bhi.n	f27c <OS_PendObjDel+0xec>
    f1a6:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    f1aa:	fa02 f203 	lsl.w	r2, r2, r3
    f1ae:	2a00      	cmp	r2, #0
    f1b0:	db66      	blt.n	f280 <OS_PendObjDel+0xf0>
    f1b2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
    f1b6:	fa02 f203 	lsl.w	r2, r2, r3
    f1ba:	2a00      	cmp	r2, #0
    f1bc:	db31      	blt.n	f222 <OS_PendObjDel+0x92>
    f1be:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    f1c2:	fa02 f303 	lsl.w	r3, r2, r3
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	da57      	bge.n	f27a <OS_PendObjDel+0xea>
        case OS_TASK_STATE_DLY_SUSPENDED:
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    f1ca:	68bb      	ldr	r3, [r7, #8]
    f1cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f1d0:	2b03      	cmp	r3, #3
    f1d2:	d104      	bne.n	f1de <OS_PendObjDel+0x4e>
                 OS_PendObjDel1(p_obj,                           /* Indicate which object was pend aborted            */
    f1d4:	68f8      	ldr	r0, [r7, #12]
    f1d6:	68b9      	ldr	r1, [r7, #8]
    f1d8:	687a      	ldr	r2, [r7, #4]
    f1da:	f000 f857 	bl	f28c <OS_PendObjDel1>
                                p_tcb,
                                ts);
             }
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr     = (void *)0;
    f1de:	68bb      	ldr	r3, [r7, #8]
    f1e0:	f04f 0200 	mov.w	r2, #0
    f1e4:	63da      	str	r2, [r3, #60]	; 0x3c
             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    f1e6:	68bb      	ldr	r3, [r7, #8]
    f1e8:	f04f 0200 	mov.w	r2, #0
    f1ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
             p_tcb->TS         = ts;
    f1f0:	68bb      	ldr	r3, [r7, #8]
    f1f2:	687a      	ldr	r2, [r7, #4]
    f1f4:	639a      	str	r2, [r3, #56]	; 0x38
             OS_PendListRemove(p_tcb);                           /* Remove task from all wait lists                   */
    f1f6:	68b8      	ldr	r0, [r7, #8]
    f1f8:	f7ff ff4c 	bl	f094 <OS_PendListRemove>
             OS_TaskRdy(p_tcb);
    f1fc:	68b8      	ldr	r0, [r7, #8]
    f1fe:	f000 fbeb 	bl	f9d8 <OS_TaskRdy>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;              /* Task is readied because object is deleted         */
    f202:	68bb      	ldr	r3, [r7, #8]
    f204:	f04f 0200 	mov.w	r2, #0
    f208:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_DEL;             /* Indicate pend was aborted                         */
    f20c:	68bb      	ldr	r3, [r7, #8]
    f20e:	f04f 0202 	mov.w	r2, #2
    f212:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;
    f216:	68bb      	ldr	r3, [r7, #8]
    f218:	f04f 0200 	mov.w	r2, #0
    f21c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    f220:	e02f      	b.n	f282 <OS_PendObjDel+0xf2>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    f222:	68bb      	ldr	r3, [r7, #8]
    f224:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f228:	2b03      	cmp	r3, #3
    f22a:	d104      	bne.n	f236 <OS_PendObjDel+0xa6>
                 OS_PendObjDel1(p_obj,                           /* Indicate which object was pend aborted            */
    f22c:	68f8      	ldr	r0, [r7, #12]
    f22e:	68b9      	ldr	r1, [r7, #8]
    f230:	687a      	ldr	r2, [r7, #4]
    f232:	f000 f82b 	bl	f28c <OS_PendObjDel1>
                                p_tcb,
                                ts);
             }
#if (OS_MSG_EN > 0u)
             p_tcb->MsgPtr     = (void      *)0;
    f236:	68bb      	ldr	r3, [r7, #8]
    f238:	f04f 0200 	mov.w	r2, #0
    f23c:	63da      	str	r2, [r3, #60]	; 0x3c
             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    f23e:	68bb      	ldr	r3, [r7, #8]
    f240:	f04f 0200 	mov.w	r2, #0
    f244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
             p_tcb->TS         = ts;
    f248:	68bb      	ldr	r3, [r7, #8]
    f24a:	687a      	ldr	r2, [r7, #4]
    f24c:	639a      	str	r2, [r3, #56]	; 0x38
             OS_TickListRemove(p_tcb);                           /* Cancel the timeout                                */
    f24e:	68b8      	ldr	r0, [r7, #8]
    f250:	f000 fdb0 	bl	fdb4 <OS_TickListRemove>
             OS_PendListRemove(p_tcb);                           /* Remove task from all wait lists                   */
    f254:	68b8      	ldr	r0, [r7, #8]
    f256:	f7ff ff1d 	bl	f094 <OS_PendListRemove>
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;        /* Task needs to remain suspended                    */
    f25a:	68bb      	ldr	r3, [r7, #8]
    f25c:	f04f 0204 	mov.w	r2, #4
    f260:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_DEL;             /* Indicate pend was aborted                         */
    f264:	68bb      	ldr	r3, [r7, #8]
    f266:	f04f 0202 	mov.w	r2, #2
    f26a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
    f26e:	68bb      	ldr	r3, [r7, #8]
    f270:	f04f 0200 	mov.w	r2, #0
    f274:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    f278:	e003      	b.n	f282 <OS_PendObjDel+0xf2>

        default:
             break;
    f27a:	bf00      	nop
    f27c:	bf00      	nop
    f27e:	e000      	b.n	f282 <OS_PendObjDel+0xf2>
    switch (p_tcb->TaskState) {
        case OS_TASK_STATE_RDY:                                  /* These states should never occur                   */
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
             break;
    f280:	bf00      	nop
             break;

        default:
             break;
    }
}
    f282:	f107 0710 	add.w	r7, r7, #16
    f286:	46bd      	mov	sp, r7
    f288:	bd80      	pop	{r7, pc}
    f28a:	bf00      	nop

0000f28c <OS_PendObjDel1>:
*/

void  OS_PendObjDel1 (OS_PEND_OBJ  *p_obj,
                      OS_TCB       *p_tcb,
                      CPU_TS        ts)
{
    f28c:	b480      	push	{r7}
    f28e:	b087      	sub	sp, #28
    f290:	af00      	add	r7, sp, #0
    f292:	60f8      	str	r0, [r7, #12]
    f294:	60b9      	str	r1, [r7, #8]
    f296:	607a      	str	r2, [r7, #4]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    f298:	68bb      	ldr	r3, [r7, #8]
    f29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f29c:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
    f29e:	68bb      	ldr	r3, [r7, #8]
    f2a0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f2a2:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    f2a4:	e013      	b.n	f2ce <OS_PendObjDel1+0x42>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object deleted?                */
    f2a6:	693b      	ldr	r3, [r7, #16]
    f2a8:	68da      	ldr	r2, [r3, #12]
    f2aa:	68fb      	ldr	r3, [r7, #12]
    f2ac:	429a      	cmp	r2, r3
    f2ae:	d106      	bne.n	f2be <OS_PendObjDel1+0x32>
            p_pend_data->RdyObjPtr = p_obj;                         /* Yes, indicate the object in the .RdyObjPtr     */
    f2b0:	693b      	ldr	r3, [r7, #16]
    f2b2:	68fa      	ldr	r2, [r7, #12]
    f2b4:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyTS     = ts;                            /*      save the timestamp                        */
    f2b6:	693b      	ldr	r3, [r7, #16]
    f2b8:	687a      	ldr	r2, [r7, #4]
    f2ba:	61da      	str	r2, [r3, #28]
            break;
    f2bc:	e00a      	b.n	f2d4 <OS_PendObjDel1+0x48>
        }
        p_pend_data++;
    f2be:	693b      	ldr	r3, [r7, #16]
    f2c0:	f103 0320 	add.w	r3, r3, #32
    f2c4:	613b      	str	r3, [r7, #16]
        n_pend_list--;
    f2c6:	8afb      	ldrh	r3, [r7, #22]
    f2c8:	f103 33ff 	add.w	r3, r3, #4294967295
    f2cc:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    f2ce:	8afb      	ldrh	r3, [r7, #22]
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d1e8      	bne.n	f2a6 <OS_PendObjDel1+0x1a>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
    f2d4:	f107 071c 	add.w	r7, r7, #28
    f2d8:	46bd      	mov	sp, r7
    f2da:	bc80      	pop	{r7}
    f2dc:	4770      	bx	lr
    f2de:	bf00      	nop

0000f2e0 <OS_Post>:
void   OS_Post (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
    f2e0:	b580      	push	{r7, lr}
    f2e2:	b086      	sub	sp, #24
    f2e4:	af02      	add	r7, sp, #8
    f2e6:	60f8      	str	r0, [r7, #12]
    f2e8:	60b9      	str	r1, [r7, #8]
    f2ea:	607a      	str	r2, [r7, #4]
    f2ec:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
    f2ee:	68bb      	ldr	r3, [r7, #8]
    f2f0:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    f2f4:	2b07      	cmp	r3, #7
    f2f6:	d87c      	bhi.n	f3f2 <OS_Post+0x112>
    f2f8:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
    f2fc:	fa02 f203 	lsl.w	r2, r2, r3
    f300:	2a00      	cmp	r2, #0
    f302:	db78      	blt.n	f3f6 <OS_Post+0x116>
    f304:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
    f308:	fa02 f203 	lsl.w	r2, r2, r3
    f30c:	2a00      	cmp	r2, #0
    f30e:	db3a      	blt.n	f386 <OS_Post+0xa6>
    f310:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    f314:	fa02 f303 	lsl.w	r3, r2, r3
    f318:	2b00      	cmp	r3, #0
    f31a:	da69      	bge.n	f3f0 <OS_Post+0x110>
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    f31c:	68bb      	ldr	r3, [r7, #8]
    f31e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f322:	2b03      	cmp	r3, #3
    f324:	d108      	bne.n	f338 <OS_Post+0x58>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
    f326:	887b      	ldrh	r3, [r7, #2]
    f328:	69ba      	ldr	r2, [r7, #24]
    f32a:	9200      	str	r2, [sp, #0]
    f32c:	68f8      	ldr	r0, [r7, #12]
    f32e:	68b9      	ldr	r1, [r7, #8]
    f330:	687a      	ldr	r2, [r7, #4]
    f332:	f000 f865 	bl	f400 <OS_Post1>
    f336:	e009      	b.n	f34c <OS_Post+0x6c>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
    f338:	68bb      	ldr	r3, [r7, #8]
    f33a:	687a      	ldr	r2, [r7, #4]
    f33c:	63da      	str	r2, [r3, #60]	; 0x3c
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
    f33e:	68bb      	ldr	r3, [r7, #8]
    f340:	887a      	ldrh	r2, [r7, #2]
    f342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
                 p_tcb->TS      = ts;
    f346:	68bb      	ldr	r3, [r7, #8]
    f348:	69ba      	ldr	r2, [r7, #24]
    f34a:	639a      	str	r2, [r3, #56]	; 0x38
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
    f34c:	68fb      	ldr	r3, [r7, #12]
    f34e:	2b00      	cmp	r3, #0
    f350:	d006      	beq.n	f360 <OS_Post+0x80>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
    f352:	68b8      	ldr	r0, [r7, #8]
    f354:	f7ff fe9e 	bl	f094 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
    f358:	68f8      	ldr	r0, [r7, #12]
    f35a:	68b9      	ldr	r1, [r7, #8]
    f35c:	f7ff fd80 	bl	ee60 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             OS_TaskRdy(p_tcb);                                  /* Make task ready to run                            */
    f360:	68b8      	ldr	r0, [r7, #8]
    f362:	f000 fb39 	bl	f9d8 <OS_TaskRdy>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
    f366:	68bb      	ldr	r3, [r7, #8]
    f368:	f04f 0200 	mov.w	r2, #0
    f36c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
    f370:	68bb      	ldr	r3, [r7, #8]
    f372:	f04f 0200 	mov.w	r2, #0
    f376:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
    f37a:	68bb      	ldr	r3, [r7, #8]
    f37c:	f04f 0200 	mov.w	r2, #0
    f380:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    f384:	e038      	b.n	f3f8 <OS_Post+0x118>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
    f386:	68bb      	ldr	r3, [r7, #8]
    f388:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f38c:	2b03      	cmp	r3, #3
    f38e:	d108      	bne.n	f3a2 <OS_Post+0xc2>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
    f390:	887b      	ldrh	r3, [r7, #2]
    f392:	69ba      	ldr	r2, [r7, #24]
    f394:	9200      	str	r2, [sp, #0]
    f396:	68f8      	ldr	r0, [r7, #12]
    f398:	68b9      	ldr	r1, [r7, #8]
    f39a:	687a      	ldr	r2, [r7, #4]
    f39c:	f000 f830 	bl	f400 <OS_Post1>
    f3a0:	e009      	b.n	f3b6 <OS_Post+0xd6>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
    f3a2:	68bb      	ldr	r3, [r7, #8]
    f3a4:	687a      	ldr	r2, [r7, #4]
    f3a6:	63da      	str	r2, [r3, #60]	; 0x3c
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
    f3a8:	68bb      	ldr	r3, [r7, #8]
    f3aa:	887a      	ldrh	r2, [r7, #2]
    f3ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
                 p_tcb->TS      = ts;
    f3b0:	68bb      	ldr	r3, [r7, #8]
    f3b2:	69ba      	ldr	r2, [r7, #24]
    f3b4:	639a      	str	r2, [r3, #56]	; 0x38
             }
             OS_TickListRemove(p_tcb);                           /* Cancel any timeout                                */
    f3b6:	68b8      	ldr	r0, [r7, #8]
    f3b8:	f000 fcfc 	bl	fdb4 <OS_TickListRemove>
             if (p_obj != (OS_PEND_OBJ *)0) {
    f3bc:	68fb      	ldr	r3, [r7, #12]
    f3be:	2b00      	cmp	r3, #0
    f3c0:	d006      	beq.n	f3d0 <OS_Post+0xf0>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
    f3c2:	68b8      	ldr	r0, [r7, #8]
    f3c4:	f7ff fe66 	bl	f094 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
    f3c8:	68f8      	ldr	r0, [r7, #12]
    f3ca:	68b9      	ldr	r1, [r7, #8]
    f3cc:	f7ff fd48 	bl	ee60 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    f3d0:	68bb      	ldr	r3, [r7, #8]
    f3d2:	f04f 0204 	mov.w	r2, #4
    f3d6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
    f3da:	68bb      	ldr	r3, [r7, #8]
    f3dc:	f04f 0200 	mov.w	r2, #0
    f3e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
    f3e4:	68bb      	ldr	r3, [r7, #8]
    f3e6:	f04f 0200 	mov.w	r2, #0
    f3ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
             break;
    f3ee:	e003      	b.n	f3f8 <OS_Post+0x118>

        default:
             break;
    f3f0:	bf00      	nop
    f3f2:	bf00      	nop
    f3f4:	e000      	b.n	f3f8 <OS_Post+0x118>
    switch (p_tcb->TaskState) {
        case OS_TASK_STATE_RDY:                                  /* Cannot Pend Abort a task that is ready            */
        case OS_TASK_STATE_DLY:                                  /* Cannot Pend Abort a task that is delayed          */
        case OS_TASK_STATE_SUSPENDED:                            /* Cannot Post a suspended task                      */
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;
    f3f6:	bf00      	nop
             break;

        default:
             break;
    }
}
    f3f8:	f107 0710 	add.w	r7, r7, #16
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bd80      	pop	{r7, pc}

0000f400 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
    f400:	b480      	push	{r7}
    f402:	b087      	sub	sp, #28
    f404:	af00      	add	r7, sp, #0
    f406:	60f8      	str	r0, [r7, #12]
    f408:	60b9      	str	r1, [r7, #8]
    f40a:	607a      	str	r2, [r7, #4]
    f40c:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    f40e:	68bb      	ldr	r3, [r7, #8]
    f410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f412:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
    f414:	68bb      	ldr	r3, [r7, #8]
    f416:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f418:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    f41a:	e019      	b.n	f450 <OS_Post1+0x50>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
    f41c:	693b      	ldr	r3, [r7, #16]
    f41e:	68da      	ldr	r2, [r3, #12]
    f420:	68fb      	ldr	r3, [r7, #12]
    f422:	429a      	cmp	r2, r3
    f424:	d10c      	bne.n	f440 <OS_Post1+0x40>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
    f426:	693b      	ldr	r3, [r7, #16]
    f428:	68fa      	ldr	r2, [r7, #12]
    f42a:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
    f42c:	693b      	ldr	r3, [r7, #16]
    f42e:	687a      	ldr	r2, [r7, #4]
    f430:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
    f432:	693b      	ldr	r3, [r7, #16]
    f434:	887a      	ldrh	r2, [r7, #2]
    f436:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
    f438:	693b      	ldr	r3, [r7, #16]
    f43a:	6a3a      	ldr	r2, [r7, #32]
    f43c:	61da      	str	r2, [r3, #28]
            break;
    f43e:	e00a      	b.n	f456 <OS_Post1+0x56>
        }
        p_pend_data++;
    f440:	693b      	ldr	r3, [r7, #16]
    f442:	f103 0320 	add.w	r3, r3, #32
    f446:	613b      	str	r3, [r7, #16]
        n_pend_list--;
    f448:	8afb      	ldrh	r3, [r7, #22]
    f44a:	f103 33ff 	add.w	r3, r3, #4294967295
    f44e:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
    f450:	8afb      	ldrh	r3, [r7, #22]
    f452:	2b00      	cmp	r3, #0
    f454:	d1e2      	bne.n	f41c <OS_Post1+0x1c>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
    f456:	f107 071c 	add.w	r7, r7, #28
    f45a:	46bd      	mov	sp, r7
    f45c:	bc80      	pop	{r7}
    f45e:	4770      	bx	lr

0000f460 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
    f460:	b480      	push	{r7}
    f462:	b083      	sub	sp, #12
    f464:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
    f466:	f04f 0300 	mov.w	r3, #0
    f46a:	71fb      	strb	r3, [r7, #7]
    f46c:	e01d      	b.n	f4aa <OS_RdyListInit+0x4a>
        p_rdy_list = &OSRdyList[i];
    f46e:	79fa      	ldrb	r2, [r7, #7]
    f470:	4613      	mov	r3, r2
    f472:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f476:	189b      	adds	r3, r3, r2
    f478:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f47c:	461a      	mov	r2, r3
    f47e:	f643 5364 	movw	r3, #15716	; 0x3d64
    f482:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f486:	18d3      	adds	r3, r2, r3
    f488:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
    f48a:	683b      	ldr	r3, [r7, #0]
    f48c:	f04f 0200 	mov.w	r2, #0
    f490:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
    f492:	683b      	ldr	r3, [r7, #0]
    f494:	f04f 0200 	mov.w	r2, #0
    f498:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    f49a:	683b      	ldr	r3, [r7, #0]
    f49c:	f04f 0200 	mov.w	r2, #0
    f4a0:	605a      	str	r2, [r3, #4]
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
    f4a2:	79fb      	ldrb	r3, [r7, #7]
    f4a4:	f103 0301 	add.w	r3, r3, #1
    f4a8:	71fb      	strb	r3, [r7, #7]
    f4aa:	79fb      	ldrb	r3, [r7, #7]
    f4ac:	2b3f      	cmp	r3, #63	; 0x3f
    f4ae:	d9de      	bls.n	f46e <OS_RdyListInit+0xe>
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    }
}
    f4b0:	f107 070c 	add.w	r7, r7, #12
    f4b4:	46bd      	mov	sp, r7
    f4b6:	bc80      	pop	{r7}
    f4b8:	4770      	bx	lr
    f4ba:	bf00      	nop

0000f4bc <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB *p_tcb)
{
    f4bc:	b580      	push	{r7, lr}
    f4be:	b082      	sub	sp, #8
    f4c0:	af00      	add	r7, sp, #0
    f4c2:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
    f4c4:	687b      	ldr	r3, [r7, #4]
    f4c6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f4ca:	4618      	mov	r0, r3
    f4cc:	f7f6 fe66 	bl	619c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
    f4d6:	f244 0378 	movw	r3, #16504	; 0x4078
    f4da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f4de:	781b      	ldrb	r3, [r3, #0]
    f4e0:	429a      	cmp	r2, r3
    f4e2:	d103      	bne.n	f4ec <OS_RdyListInsert+0x30>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
    f4e4:	6878      	ldr	r0, [r7, #4]
    f4e6:	f000 f853 	bl	f590 <OS_RdyListInsertTail>
    f4ea:	e002      	b.n	f4f2 <OS_RdyListInsert+0x36>
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
    f4ec:	6878      	ldr	r0, [r7, #4]
    f4ee:	f000 f805 	bl	f4fc <OS_RdyListInsertHead>
    }
}
    f4f2:	f107 0708 	add.w	r7, r7, #8
    f4f6:	46bd      	mov	sp, r7
    f4f8:	bd80      	pop	{r7, pc}
    f4fa:	bf00      	nop

0000f4fc <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
    f4fc:	b480      	push	{r7}
    f4fe:	b085      	sub	sp, #20
    f500:	af00      	add	r7, sp, #0
    f502:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
    f504:	687b      	ldr	r3, [r7, #4]
    f506:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f50a:	461a      	mov	r2, r3
    f50c:	4613      	mov	r3, r2
    f50e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f512:	189b      	adds	r3, r3, r2
    f514:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f518:	461a      	mov	r2, r3
    f51a:	f643 5364 	movw	r3, #15716	; 0x3d64
    f51e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f522:	18d3      	adds	r3, r2, r3
    f524:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
    f526:	68fb      	ldr	r3, [r7, #12]
    f528:	891b      	ldrh	r3, [r3, #8]
    f52a:	2b00      	cmp	r3, #0
    f52c:	d112      	bne.n	f554 <OS_RdyListInsertHead+0x58>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
    f52e:	68fb      	ldr	r3, [r7, #12]
    f530:	f04f 0201 	mov.w	r2, #1
    f534:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
    f536:	687b      	ldr	r3, [r7, #4]
    f538:	f04f 0200 	mov.w	r2, #0
    f53c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
    f53e:	687b      	ldr	r3, [r7, #4]
    f540:	f04f 0200 	mov.w	r2, #0
    f544:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
    f546:	68fb      	ldr	r3, [r7, #12]
    f548:	687a      	ldr	r2, [r7, #4]
    f54a:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
    f54c:	68fb      	ldr	r3, [r7, #12]
    f54e:	687a      	ldr	r2, [r7, #4]
    f550:	605a      	str	r2, [r3, #4]
    f552:	e017      	b.n	f584 <OS_RdyListInsertHead+0x88>
    } else {                                                /* CASE 1: Insert BEFORE the current head of list         */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
    f554:	68fb      	ldr	r3, [r7, #12]
    f556:	891b      	ldrh	r3, [r3, #8]
    f558:	f103 0301 	add.w	r3, r3, #1
    f55c:	b29a      	uxth	r2, r3
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
    f562:	68fb      	ldr	r3, [r7, #12]
    f564:	681a      	ldr	r2, [r3, #0]
    f566:	687b      	ldr	r3, [r7, #4]
    f568:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	f04f 0200 	mov.w	r2, #0
    f570:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
    f572:	68fb      	ldr	r3, [r7, #12]
    f574:	681b      	ldr	r3, [r3, #0]
    f576:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
    f578:	68bb      	ldr	r3, [r7, #8]
    f57a:	687a      	ldr	r2, [r7, #4]
    f57c:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
    f57e:	68fb      	ldr	r3, [r7, #12]
    f580:	687a      	ldr	r2, [r7, #4]
    f582:	601a      	str	r2, [r3, #0]
    }
}
    f584:	f107 0714 	add.w	r7, r7, #20
    f588:	46bd      	mov	sp, r7
    f58a:	bc80      	pop	{r7}
    f58c:	4770      	bx	lr
    f58e:	bf00      	nop

0000f590 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
    f590:	b480      	push	{r7}
    f592:	b085      	sub	sp, #20
    f594:	af00      	add	r7, sp, #0
    f596:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f59e:	461a      	mov	r2, r3
    f5a0:	4613      	mov	r3, r2
    f5a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f5a6:	189b      	adds	r3, r3, r2
    f5a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f5ac:	461a      	mov	r2, r3
    f5ae:	f643 5364 	movw	r3, #15716	; 0x3d64
    f5b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5b6:	18d3      	adds	r3, r2, r3
    f5b8:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
    f5ba:	68fb      	ldr	r3, [r7, #12]
    f5bc:	891b      	ldrh	r3, [r3, #8]
    f5be:	2b00      	cmp	r3, #0
    f5c0:	d112      	bne.n	f5e8 <OS_RdyListInsertTail+0x58>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
    f5c2:	68fb      	ldr	r3, [r7, #12]
    f5c4:	f04f 0201 	mov.w	r2, #1
    f5c8:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
    f5ca:	687b      	ldr	r3, [r7, #4]
    f5cc:	f04f 0200 	mov.w	r2, #0
    f5d0:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
    f5d2:	687b      	ldr	r3, [r7, #4]
    f5d4:	f04f 0200 	mov.w	r2, #0
    f5d8:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
    f5da:	68fb      	ldr	r3, [r7, #12]
    f5dc:	687a      	ldr	r2, [r7, #4]
    f5de:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
    f5e0:	68fb      	ldr	r3, [r7, #12]
    f5e2:	687a      	ldr	r2, [r7, #4]
    f5e4:	605a      	str	r2, [r3, #4]
    f5e6:	e016      	b.n	f616 <OS_RdyListInsertTail+0x86>
    } else {                                                /* CASE 1: Insert AFTER the current tail of list          */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
    f5e8:	68fb      	ldr	r3, [r7, #12]
    f5ea:	891b      	ldrh	r3, [r3, #8]
    f5ec:	f103 0301 	add.w	r3, r3, #1
    f5f0:	b29a      	uxth	r2, r3
    f5f2:	68fb      	ldr	r3, [r7, #12]
    f5f4:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
    f5f6:	687b      	ldr	r3, [r7, #4]
    f5f8:	f04f 0200 	mov.w	r2, #0
    f5fc:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
    f5fe:	68fb      	ldr	r3, [r7, #12]
    f600:	685b      	ldr	r3, [r3, #4]
    f602:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
    f604:	687b      	ldr	r3, [r7, #4]
    f606:	68ba      	ldr	r2, [r7, #8]
    f608:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
    f60a:	68bb      	ldr	r3, [r7, #8]
    f60c:	687a      	ldr	r2, [r7, #4]
    f60e:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
    f610:	68fb      	ldr	r3, [r7, #12]
    f612:	687a      	ldr	r2, [r7, #4]
    f614:	605a      	str	r2, [r3, #4]
    }
}
    f616:	f107 0714 	add.w	r7, r7, #20
    f61a:	46bd      	mov	sp, r7
    f61c:	bc80      	pop	{r7}
    f61e:	4770      	bx	lr

0000f620 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
    f620:	b480      	push	{r7}
    f622:	b087      	sub	sp, #28
    f624:	af00      	add	r7, sp, #0
    f626:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;



    switch (p_rdy_list->NbrEntries) {
    f628:	687b      	ldr	r3, [r7, #4]
    f62a:	891b      	ldrh	r3, [r3, #8]
    f62c:	2b00      	cmp	r3, #0
    f62e:	db1e      	blt.n	f66e <OS_RdyListMoveHeadToTail+0x4e>
    f630:	2b01      	cmp	r3, #1
    f632:	dd3b      	ble.n	f6ac <OS_RdyListMoveHeadToTail+0x8c>
    f634:	2b02      	cmp	r3, #2
    f636:	d11a      	bne.n	f66e <OS_RdyListMoveHeadToTail+0x4e>
        case 0:
        case 1:
             break;

        case 2:                                             /* SWAP the TCBs                                          */
             p_tcb1              = p_rdy_list->HeadPtr;     /* Point to current head                                  */
    f638:	687b      	ldr	r3, [r7, #4]
    f63a:	681b      	ldr	r3, [r3, #0]
    f63c:	617b      	str	r3, [r7, #20]
             p_tcb2              = p_rdy_list->TailPtr;     /* Point to current tail                                  */
    f63e:	687b      	ldr	r3, [r7, #4]
    f640:	685b      	ldr	r3, [r3, #4]
    f642:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     = p_tcb2;
    f644:	697b      	ldr	r3, [r7, #20]
    f646:	693a      	ldr	r2, [r7, #16]
    f648:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;
    f64a:	697b      	ldr	r3, [r7, #20]
    f64c:	f04f 0200 	mov.w	r2, #0
    f650:	60da      	str	r2, [r3, #12]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
    f652:	693b      	ldr	r3, [r7, #16]
    f654:	f04f 0200 	mov.w	r2, #0
    f658:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     = p_tcb1;
    f65a:	693b      	ldr	r3, [r7, #16]
    f65c:	697a      	ldr	r2, [r7, #20]
    f65e:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr = p_tcb2;
    f660:	687b      	ldr	r3, [r7, #4]
    f662:	693a      	ldr	r2, [r7, #16]
    f664:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr = p_tcb1;
    f666:	687b      	ldr	r3, [r7, #4]
    f668:	697a      	ldr	r2, [r7, #20]
    f66a:	605a      	str	r2, [r3, #4]
             break;
    f66c:	e01f      	b.n	f6ae <OS_RdyListMoveHeadToTail+0x8e>

        default:                                            /* Move only if there are more than 2 OS_TCBs in the list */
             p_tcb1              = p_rdy_list->HeadPtr;     /* Point to current head                                  */
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	681b      	ldr	r3, [r3, #0]
    f672:	617b      	str	r3, [r7, #20]
             p_tcb2              = p_rdy_list->TailPtr;     /* Point to current tail                                  */
    f674:	687b      	ldr	r3, [r7, #4]
    f676:	685b      	ldr	r3, [r3, #4]
    f678:	613b      	str	r3, [r7, #16]
             p_tcb3              = p_tcb1->NextPtr;         /* Point to new list head                                 */
    f67a:	697b      	ldr	r3, [r7, #20]
    f67c:	68db      	ldr	r3, [r3, #12]
    f67e:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;             /* Adjust back    link of new list head                   */
    f680:	68fb      	ldr	r3, [r7, #12]
    f682:	f04f 0200 	mov.w	r2, #0
    f686:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;             /* Adjust forward link of new list tail                   */
    f688:	697b      	ldr	r3, [r7, #20]
    f68a:	f04f 0200 	mov.w	r2, #0
    f68e:	60da      	str	r2, [r3, #12]
             p_tcb1->PrevPtr     = p_tcb2;                  /* Adjust back    link of new list tail                   */
    f690:	697b      	ldr	r3, [r7, #20]
    f692:	693a      	ldr	r2, [r7, #16]
    f694:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     = p_tcb1;                  /* Adjust forward link of old list tail                   */
    f696:	693b      	ldr	r3, [r7, #16]
    f698:	697a      	ldr	r2, [r7, #20]
    f69a:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr = p_tcb3;                  /* Adjust new list head and tail pointers                 */
    f69c:	687b      	ldr	r3, [r7, #4]
    f69e:	68fa      	ldr	r2, [r7, #12]
    f6a0:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr = p_tcb1;
    f6a2:	687b      	ldr	r3, [r7, #4]
    f6a4:	697a      	ldr	r2, [r7, #20]
    f6a6:	605a      	str	r2, [r3, #4]
             break;
    f6a8:	bf00      	nop
    f6aa:	e000      	b.n	f6ae <OS_RdyListMoveHeadToTail+0x8e>


    switch (p_rdy_list->NbrEntries) {
        case 0:
        case 1:
             break;
    f6ac:	bf00      	nop
             p_tcb2->NextPtr     = p_tcb1;                  /* Adjust forward link of old list tail                   */
             p_rdy_list->HeadPtr = p_tcb3;                  /* Adjust new list head and tail pointers                 */
             p_rdy_list->TailPtr = p_tcb1;
             break;
    }
}
    f6ae:	f107 071c 	add.w	r7, r7, #28
    f6b2:	46bd      	mov	sp, r7
    f6b4:	bc80      	pop	{r7}
    f6b6:	4770      	bx	lr

0000f6b8 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB *p_tcb)
{
    f6b8:	b580      	push	{r7, lr}
    f6ba:	b086      	sub	sp, #24
    f6bc:	af00      	add	r7, sp, #0
    f6be:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f6c6:	461a      	mov	r2, r3
    f6c8:	4613      	mov	r3, r2
    f6ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f6ce:	189b      	adds	r3, r3, r2
    f6d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f6d4:	461a      	mov	r2, r3
    f6d6:	f643 5364 	movw	r3, #15716	; 0x3d64
    f6da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f6de:	18d3      	adds	r3, r2, r3
    f6e0:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	691b      	ldr	r3, [r3, #16]
    f6e6:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
    f6e8:	687b      	ldr	r3, [r7, #4]
    f6ea:	68db      	ldr	r3, [r3, #12]
    f6ec:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
    f6ee:	693b      	ldr	r3, [r7, #16]
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d124      	bne.n	f73e <OS_RdyListRemove+0x86>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
    f6f4:	68fb      	ldr	r3, [r7, #12]
    f6f6:	2b00      	cmp	r3, #0
    f6f8:	d112      	bne.n	f720 <OS_RdyListRemove+0x68>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
    f6fa:	697b      	ldr	r3, [r7, #20]
    f6fc:	f04f 0200 	mov.w	r2, #0
    f700:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
    f702:	697b      	ldr	r3, [r7, #20]
    f704:	f04f 0200 	mov.w	r2, #0
    f708:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
    f70a:	697b      	ldr	r3, [r7, #20]
    f70c:	f04f 0200 	mov.w	r2, #0
    f710:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
    f712:	687b      	ldr	r3, [r7, #4]
    f714:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    f718:	4618      	mov	r0, r3
    f71a:	f7f6 fd6b 	bl	61f4 <OS_PrioRemove>
    f71e:	e022      	b.n	f766 <OS_RdyListRemove+0xae>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
    f720:	697b      	ldr	r3, [r7, #20]
    f722:	891b      	ldrh	r3, [r3, #8]
    f724:	f103 33ff 	add.w	r3, r3, #4294967295
    f728:	b29a      	uxth	r2, r3
    f72a:	697b      	ldr	r3, [r7, #20]
    f72c:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
    f72e:	68fb      	ldr	r3, [r7, #12]
    f730:	f04f 0200 	mov.w	r2, #0
    f734:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
    f736:	697b      	ldr	r3, [r7, #20]
    f738:	68fa      	ldr	r2, [r7, #12]
    f73a:	601a      	str	r2, [r3, #0]
    f73c:	e013      	b.n	f766 <OS_RdyListRemove+0xae>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
    f73e:	697b      	ldr	r3, [r7, #20]
    f740:	891b      	ldrh	r3, [r3, #8]
    f742:	f103 33ff 	add.w	r3, r3, #4294967295
    f746:	b29a      	uxth	r2, r3
    f748:	697b      	ldr	r3, [r7, #20]
    f74a:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
    f74c:	693b      	ldr	r3, [r7, #16]
    f74e:	68fa      	ldr	r2, [r7, #12]
    f750:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
    f752:	68fb      	ldr	r3, [r7, #12]
    f754:	2b00      	cmp	r3, #0
    f756:	d103      	bne.n	f760 <OS_RdyListRemove+0xa8>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
    f758:	697b      	ldr	r3, [r7, #20]
    f75a:	693a      	ldr	r2, [r7, #16]
    f75c:	605a      	str	r2, [r3, #4]
    f75e:	e002      	b.n	f766 <OS_RdyListRemove+0xae>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
    f760:	68fb      	ldr	r3, [r7, #12]
    f762:	693a      	ldr	r2, [r7, #16]
    f764:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
    f766:	687b      	ldr	r3, [r7, #4]
    f768:	f04f 0200 	mov.w	r2, #0
    f76c:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	f04f 0200 	mov.w	r2, #0
    f774:	60da      	str	r2, [r3, #12]
}
    f776:	f107 0718 	add.w	r7, r7, #24
    f77a:	46bd      	mov	sp, r7
    f77c:	bd80      	pop	{r7, pc}
    f77e:	bf00      	nop

0000f780 <OS_Sched0>:
************************************************************************************************************************
*/

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
void  OS_Sched0 (void)
{
    f780:	b580      	push	{r7, lr}
    f782:	b082      	sub	sp, #8
    f784:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
    f786:	f04f 0300 	mov.w	r3, #0
    f78a:	607b      	str	r3, [r7, #4]



    CPU_INT_DIS();
    f78c:	f008 fb2a 	bl	17de4 <CPU_SR_Save>
    f790:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = (OS_PRIO)0;                           /* Force the priority to 0                                */
    f792:	f244 0368 	movw	r3, #16488	; 0x4068
    f796:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f79a:	f04f 0200 	mov.w	r2, #0
    f79e:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = &OSIntQTaskTCB;                       /* Always schedule the ISR handler task                   */
    f7a0:	f244 1364 	movw	r3, #16740	; 0x4164
    f7a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7a8:	f244 3240 	movw	r2, #17216	; 0x4340
    f7ac:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f7b0:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
    f7b2:	f244 1364 	movw	r3, #16740	; 0x4164
    f7b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7ba:	681b      	ldr	r3, [r3, #0]
    f7bc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    f7c0:	f102 0201 	add.w	r2, r2, #1
    f7c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
    f7c8:	f244 137c 	movw	r3, #16764	; 0x417c
    f7cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7d0:	681b      	ldr	r3, [r3, #0]
    f7d2:	f103 0201 	add.w	r2, r3, #1
    f7d6:	f244 137c 	movw	r3, #16764	; 0x417c
    f7da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7de:	601a      	str	r2, [r3, #0]
    OS_TASK_SW();                                           /* Perform a task level context switch                    */
    f7e0:	f008 fb23 	bl	17e2a <OSCtxSw>
    CPU_INT_EN();
    f7e4:	6878      	ldr	r0, [r7, #4]
    f7e6:	f008 fb01 	bl	17dec <CPU_SR_Restore>
}
    f7ea:	f107 0708 	add.w	r7, r7, #8
    f7ee:	46bd      	mov	sp, r7
    f7f0:	bd80      	pop	{r7, pc}
    f7f2:	bf00      	nop

0000f7f4 <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
    f7f4:	b580      	push	{r7, lr}
    f7f6:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
    f7f8:	f643 5350 	movw	r3, #15696	; 0x3d50
    f7fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	2b01      	cmp	r3, #1
    f804:	d107      	bne.n	f816 <OS_SchedLockTimeMeasStart+0x22>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
    f806:	f7f3 fd89 	bl	331c <CPU_TS_TmrRd>
    f80a:	4602      	mov	r2, r0
    f80c:	f244 1358 	movw	r3, #16728	; 0x4158
    f810:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f814:	601a      	str	r2, [r3, #0]
    }
}
    f816:	bd80      	pop	{r7, pc}

0000f818 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
    f818:	b580      	push	{r7, lr}
    f81a:	b082      	sub	sp, #8
    f81c:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
    f81e:	f643 5350 	movw	r3, #15696	; 0x3d50
    f822:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f826:	781b      	ldrb	r3, [r3, #0]
    f828:	2b00      	cmp	r3, #0
    f82a:	d125      	bne.n	f878 <OS_SchedLockTimeMeasStop+0x60>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
    f82c:	f7f3 fd76 	bl	331c <CPU_TS_TmrRd>
    f830:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
    f832:	f244 1358 	movw	r3, #16728	; 0x4158
    f836:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f83a:	681b      	ldr	r3, [r3, #0]
{
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
    f83c:	1ad3      	subs	r3, r2, r3
    f83e:	607b      	str	r3, [r7, #4]
              - OSSchedLockTimeBegin;
        if (delta > OSSchedLockTimeMax) {                   /* Detect peak value                                      */
    f840:	f244 4348 	movw	r3, #17480	; 0x4448
    f844:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f848:	681b      	ldr	r3, [r3, #0]
    f84a:	687a      	ldr	r2, [r7, #4]
    f84c:	429a      	cmp	r2, r3
    f84e:	d905      	bls.n	f85c <OS_SchedLockTimeMeasStop+0x44>
            OSSchedLockTimeMax    = delta;
    f850:	f244 4348 	movw	r3, #17480	; 0x4448
    f854:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f858:	687a      	ldr	r2, [r7, #4]
    f85a:	601a      	str	r2, [r3, #0]
        }
        if (delta > OSSchedLockTimeMaxCur) {                /* Detect peak value (for resetable value)                */
    f85c:	f244 1368 	movw	r3, #16744	; 0x4168
    f860:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f864:	681b      	ldr	r3, [r3, #0]
    f866:	687a      	ldr	r2, [r7, #4]
    f868:	429a      	cmp	r2, r3
    f86a:	d905      	bls.n	f878 <OS_SchedLockTimeMeasStop+0x60>
            OSSchedLockTimeMaxCur = delta;
    f86c:	f244 1368 	movw	r3, #16744	; 0x4168
    f870:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f874:	687a      	ldr	r2, [r7, #4]
    f876:	601a      	str	r2, [r3, #0]
        }
    }
}
    f878:	f107 0708 	add.w	r7, r7, #8
    f87c:	46bd      	mov	sp, r7
    f87e:	bd80      	pop	{r7, pc}

0000f880 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
    f880:	b580      	push	{r7, lr}
    f882:	b084      	sub	sp, #16
    f884:	af00      	add	r7, sp, #0
    f886:	6078      	str	r0, [r7, #4]
    OS_TCB   *p_tcb;
    CPU_SR_ALLOC();
    f888:	f04f 0300 	mov.w	r3, #0
    f88c:	60fb      	str	r3, [r7, #12]



    if (OSSchedRoundRobinEn != DEF_TRUE) {                  /* Make sure round-robin has been enabled                 */
    f88e:	f244 5334 	movw	r3, #17716	; 0x4534
    f892:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f896:	781b      	ldrb	r3, [r3, #0]
    f898:	2b01      	cmp	r3, #1
    f89a:	d16c      	bne.n	f976 <OS_SchedRoundRobin+0xf6>
        return;
    }

    CPU_CRITICAL_ENTER();
    f89c:	f008 faa2 	bl	17de4 <CPU_SR_Save>
    f8a0:	60f8      	str	r0, [r7, #12]
    f8a2:	f7f2 f809 	bl	18b8 <CPU_IntDisMeasStart>
    p_tcb = p_rdy_list->HeadPtr;                            /* Decrement time quanta counter                          */
    f8a6:	687b      	ldr	r3, [r7, #4]
    f8a8:	681b      	ldr	r3, [r3, #0]
    f8aa:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
    f8ac:	68bb      	ldr	r3, [r7, #8]
    f8ae:	2b00      	cmp	r3, #0
    f8b0:	d105      	bne.n	f8be <OS_SchedRoundRobin+0x3e>
        CPU_CRITICAL_EXIT();
    f8b2:	f7f2 f82d 	bl	1910 <CPU_IntDisMeasStop>
    f8b6:	68f8      	ldr	r0, [r7, #12]
    f8b8:	f008 fa98 	bl	17dec <CPU_SR_Restore>
        return;
    f8bc:	e05c      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    }

    if (p_tcb == &OSIdleTaskTCB) {
    f8be:	68ba      	ldr	r2, [r7, #8]
    f8c0:	f244 2368 	movw	r3, #17000	; 0x4268
    f8c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8c8:	429a      	cmp	r2, r3
    f8ca:	d105      	bne.n	f8d8 <OS_SchedRoundRobin+0x58>
        CPU_CRITICAL_EXIT();
    f8cc:	f7f2 f820 	bl	1910 <CPU_IntDisMeasStop>
    f8d0:	68f8      	ldr	r0, [r7, #12]
    f8d2:	f008 fa8b 	bl	17dec <CPU_SR_Restore>
        return;
    f8d6:	e04f      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    }

    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {
    f8d8:	68bb      	ldr	r3, [r7, #8]
    f8da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d007      	beq.n	f8f2 <OS_SchedRoundRobin+0x72>
        p_tcb->TimeQuantaCtr--;
    f8e2:	68bb      	ldr	r3, [r7, #8]
    f8e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    f8e8:	f103 32ff 	add.w	r2, r3, #4294967295
    f8ec:	68bb      	ldr	r3, [r7, #8]
    f8ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {                /* Task not done with its time quanta                     */
    f8f2:	68bb      	ldr	r3, [r7, #8]
    f8f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    f8f8:	2b00      	cmp	r3, #0
    f8fa:	d005      	beq.n	f908 <OS_SchedRoundRobin+0x88>
        CPU_CRITICAL_EXIT();
    f8fc:	f7f2 f808 	bl	1910 <CPU_IntDisMeasStop>
    f900:	68f8      	ldr	r0, [r7, #12]
    f902:	f008 fa73 	bl	17dec <CPU_SR_Restore>
        return;
    f906:	e037      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    }

    if (p_rdy_list->NbrEntries < (OS_OBJ_QTY)2) {           /* See if it's time to time slice current task            */
    f908:	687b      	ldr	r3, [r7, #4]
    f90a:	891b      	ldrh	r3, [r3, #8]
    f90c:	2b01      	cmp	r3, #1
    f90e:	d805      	bhi.n	f91c <OS_SchedRoundRobin+0x9c>
        CPU_CRITICAL_EXIT();                                /* ... only if multiple tasks at same priority            */
    f910:	f7f1 fffe 	bl	1910 <CPU_IntDisMeasStop>
    f914:	68f8      	ldr	r0, [r7, #12]
    f916:	f008 fa69 	bl	17dec <CPU_SR_Restore>
        return;
    f91a:	e02d      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Can't round-robin if the scheduler is locked           */
    f91c:	f643 5350 	movw	r3, #15696	; 0x3d50
    f920:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	2b00      	cmp	r3, #0
    f928:	d005      	beq.n	f936 <OS_SchedRoundRobin+0xb6>
        CPU_CRITICAL_EXIT();
    f92a:	f7f1 fff1 	bl	1910 <CPU_IntDisMeasStop>
    f92e:	68f8      	ldr	r0, [r7, #12]
    f930:	f008 fa5c 	bl	17dec <CPU_SR_Restore>
        return;
    f934:	e020      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                   /* Move current OS_TCB to the end of the list             */
    f936:	6878      	ldr	r0, [r7, #4]
    f938:	f7ff fe72 	bl	f620 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                            /* Point to new OS_TCB at head of the list                */
    f93c:	687b      	ldr	r3, [r7, #4]
    f93e:	681b      	ldr	r3, [r3, #0]
    f940:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == (OS_TICK)0) {                  /* See if we need to use the default time slice           */
    f942:	68bb      	ldr	r3, [r7, #8]
    f944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    f948:	2b00      	cmp	r3, #0
    f94a:	d108      	bne.n	f95e <OS_SchedRoundRobin+0xde>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
    f94c:	f244 4318 	movw	r3, #17432	; 0x4418
    f950:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f954:	681a      	ldr	r2, [r3, #0]
    f956:	68bb      	ldr	r3, [r7, #8]
    f958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    f95c:	e005      	b.n	f96a <OS_SchedRoundRobin+0xea>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;           /* Load time slice counter with new time                  */
    f95e:	68bb      	ldr	r3, [r7, #8]
    f960:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    f964:	68bb      	ldr	r3, [r7, #8]
    f966:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    CPU_CRITICAL_EXIT();
    f96a:	f7f1 ffd1 	bl	1910 <CPU_IntDisMeasStop>
    f96e:	68f8      	ldr	r0, [r7, #12]
    f970:	f008 fa3c 	bl	17dec <CPU_SR_Restore>
    f974:	e000      	b.n	f978 <OS_SchedRoundRobin+0xf8>
    CPU_SR_ALLOC();



    if (OSSchedRoundRobinEn != DEF_TRUE) {                  /* Make sure round-robin has been enabled                 */
        return;
    f976:	bf00      	nop
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;           /* Load time slice counter with new time                  */
    }
    CPU_CRITICAL_EXIT();
}
    f978:	f107 0710 	add.w	r7, r7, #16
    f97c:	46bd      	mov	sp, r7
    f97e:	bd80      	pop	{r7, pc}

0000f980 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
    f980:	b580      	push	{r7, lr}
    f982:	b084      	sub	sp, #16
    f984:	af00      	add	r7, sp, #0
    f986:	6078      	str	r0, [r7, #4]
    f988:	6039      	str	r1, [r7, #0]
    OS_ERR  err;


    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
    f98a:	683b      	ldr	r3, [r7, #0]
    f98c:	2b00      	cmp	r3, #0
    f98e:	d016      	beq.n	f9be <OS_TaskBlock+0x3e>
        OS_TickListInsert(p_tcb,
    f990:	6878      	ldr	r0, [r7, #4]
    f992:	6839      	ldr	r1, [r7, #0]
    f994:	f04f 0202 	mov.w	r2, #2
    f998:	f107 030e 	add.w	r3, r7, #14
    f99c:	f000 f8d8 	bl	fb50 <OS_TickListInsert>
                          timeout,
                          OS_OPT_TIME_TIMEOUT,
                         &err);
        if (err == OS_ERR_NONE) {
    f9a0:	89fb      	ldrh	r3, [r7, #14]
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	d105      	bne.n	f9b2 <OS_TaskBlock+0x32>
            p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
    f9a6:	687b      	ldr	r3, [r7, #4]
    f9a8:	f04f 0203 	mov.w	r2, #3
    f9ac:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    f9b0:	e00a      	b.n	f9c8 <OS_TaskBlock+0x48>
        } else {
            p_tcb->TaskState = OS_TASK_STATE_PEND;
    f9b2:	687b      	ldr	r3, [r7, #4]
    f9b4:	f04f 0202 	mov.w	r2, #2
    f9b8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    f9bc:	e004      	b.n	f9c8 <OS_TaskBlock+0x48>
        }
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
    f9be:	687b      	ldr	r3, [r7, #4]
    f9c0:	f04f 0202 	mov.w	r2, #2
    f9c4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    }
    OS_RdyListRemove(p_tcb);
    f9c8:	6878      	ldr	r0, [r7, #4]
    f9ca:	f7ff fe75 	bl	f6b8 <OS_RdyListRemove>
}
    f9ce:	f107 0710 	add.w	r7, r7, #16
    f9d2:	46bd      	mov	sp, r7
    f9d4:	bd80      	pop	{r7, pc}
    f9d6:	bf00      	nop

0000f9d8 <OS_TaskRdy>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void   OS_TaskRdy (OS_TCB *p_tcb)
{
    f9d8:	b580      	push	{r7, lr}
    f9da:	b082      	sub	sp, #8
    f9dc:	af00      	add	r7, sp, #0
    f9de:	6078      	str	r0, [r7, #4]
    OS_TickListRemove(p_tcb);                               /* Remove from tick list                                  */
    f9e0:	6878      	ldr	r0, [r7, #4]
    f9e2:	f000 f9e7 	bl	fdb4 <OS_TickListRemove>
    if ((p_tcb->TaskState & OS_TASK_STATE_BIT_SUSPENDED) == (OS_STATE)0) {
    f9e6:	687b      	ldr	r3, [r7, #4]
    f9e8:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    f9ec:	f003 0304 	and.w	r3, r3, #4
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d102      	bne.n	f9fa <OS_TaskRdy+0x22>
        OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
    f9f4:	6878      	ldr	r0, [r7, #4]
    f9f6:	f7ff fd61 	bl	f4bc <OS_RdyListInsert>
    }
}
    f9fa:	f107 0708 	add.w	r7, r7, #8
    f9fe:	46bd      	mov	sp, r7
    fa00:	bd80      	pop	{r7, pc}
    fa02:	bf00      	nop

0000fa04 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void *p_arg)
{
    fa04:	b580      	push	{r7, lr}
    fa06:	b084      	sub	sp, #16
    fa08:	af00      	add	r7, sp, #0
    fa0a:	6078      	str	r0, [r7, #4]
    fa0c:	e000      	b.n	fa10 <OS_TickTask+0xc>
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_STATE_OS_RUNNING) {
                OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
            }
        }
    }
    fa0e:	bf00      	nop


    p_arg = p_arg;                                          /* Prevent compiler warning                               */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
    fa10:	f04f 0000 	mov.w	r0, #0
    fa14:	f04f 0100 	mov.w	r1, #0
    fa18:	f107 0308 	add.w	r3, r7, #8
    fa1c:	461a      	mov	r2, r3
    fa1e:	f107 030e 	add.w	r3, r7, #14
    fa22:	f7f8 fd43 	bl	84ac <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)&ts,
                            (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
        if (err == OS_ERR_NONE) {
    fa26:	89fb      	ldrh	r3, [r7, #14]
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d1f0      	bne.n	fa0e <OS_TickTask+0xa>
            if (OSRunning == OS_STATE_OS_RUNNING) {
    fa2c:	f643 5360 	movw	r3, #15712	; 0x3d60
    fa30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	2b01      	cmp	r3, #1
    fa38:	d1e9      	bne.n	fa0e <OS_TickTask+0xa>
                OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
    fa3a:	f000 fa2f 	bl	fe9c <OS_TickListUpdate>
            }
        }
    }
    fa3e:	e7e6      	b.n	fa0e <OS_TickTask+0xa>

0000fa40 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
    fa40:	b580      	push	{r7, lr}
    fa42:	b08c      	sub	sp, #48	; 0x30
    fa44:	af0a      	add	r7, sp, #40	; 0x28
    fa46:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
    fa48:	f244 4324 	movw	r3, #17444	; 0x4424
    fa4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa50:	f04f 0200 	mov.w	r2, #0
    fa54:	601a      	str	r2, [r3, #0]

    OSTickTaskTimeMax = (CPU_TS)0u;
    fa56:	f244 532c 	movw	r3, #17708	; 0x452c
    fa5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa5e:	f04f 0200 	mov.w	r2, #0
    fa62:	601a      	str	r2, [r3, #0]


    OS_TickListInit();                                      /* Initialize the tick list data structures               */
    fa64:	f000 f846 	bl	faf4 <OS_TickListInit>

                                                            /* ---------------- CREATE THE TICK TASK ---------------- */
    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
    fa68:	f64c 1350 	movw	r3, #51536	; 0xc950
    fa6c:	f2c0 0302 	movt	r3, #2
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	2b3e      	cmp	r3, #62	; 0x3e
    fa74:	d904      	bls.n	fa80 <OS_TickTaskInit+0x40>
        *p_err = OS_ERR_PRIO_INVALID;
    fa76:	687b      	ldr	r3, [r7, #4]
    fa78:	f246 2273 	movw	r2, #25203	; 0x6273
    fa7c:	801a      	strh	r2, [r3, #0]
        return;
    fa7e:	e035      	b.n	faec <OS_TickTaskInit+0xac>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
    fa80:	f64c 1350 	movw	r3, #51536	; 0xc950
    fa84:	f2c0 0302 	movt	r3, #2
    fa88:	7818      	ldrb	r0, [r3, #0]
    fa8a:	f64c 1354 	movw	r3, #51540	; 0xc954
    fa8e:	f2c0 0302 	movt	r3, #2
    fa92:	6819      	ldr	r1, [r3, #0]
    fa94:	f64c 1358 	movw	r3, #51544	; 0xc958
    fa98:	f2c0 0302 	movt	r3, #2
    fa9c:	681a      	ldr	r2, [r3, #0]
    fa9e:	f64c 135c 	movw	r3, #51548	; 0xc95c
    faa2:	f2c0 0302 	movt	r3, #2
    faa6:	681b      	ldr	r3, [r3, #0]
    faa8:	9000      	str	r0, [sp, #0]
    faaa:	9101      	str	r1, [sp, #4]
    faac:	9202      	str	r2, [sp, #8]
    faae:	9303      	str	r3, [sp, #12]
    fab0:	f04f 0300 	mov.w	r3, #0
    fab4:	9304      	str	r3, [sp, #16]
    fab6:	f04f 0300 	mov.w	r3, #0
    faba:	9305      	str	r3, [sp, #20]
    fabc:	f04f 0300 	mov.w	r3, #0
    fac0:	9306      	str	r3, [sp, #24]
    fac2:	f04f 0303 	mov.w	r3, #3
    fac6:	9307      	str	r3, [sp, #28]
    fac8:	687b      	ldr	r3, [r7, #4]
    faca:	9308      	str	r3, [sp, #32]
    facc:	f244 0080 	movw	r0, #16512	; 0x4080
    fad0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fad4:	f64c 313c 	movw	r1, #52028	; 0xcb3c
    fad8:	f2c0 0102 	movt	r1, #2
    fadc:	f64f 2205 	movw	r2, #64005	; 0xfa05
    fae0:	f2c0 0200 	movt	r2, #0
    fae4:	f04f 0300 	mov.w	r3, #0
    fae8:	f7f7 fdc6 	bl	7678 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
    faec:	f107 0708 	add.w	r7, r7, #8
    faf0:	46bd      	mov	sp, r7
    faf2:	bd80      	pop	{r7, pc}

0000faf4 <OS_TickListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TickListInit (void)
{
    faf4:	b480      	push	{r7}
    faf6:	b083      	sub	sp, #12
    faf8:	af00      	add	r7, sp, #0
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
    fafa:	f04f 0300 	mov.w	r3, #0
    fafe:	80fb      	strh	r3, [r7, #6]
    fb00:	e018      	b.n	fb34 <OS_TickListInit+0x40>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
    fb02:	88fb      	ldrh	r3, [r7, #6]
    fb04:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    fb08:	f644 1344 	movw	r3, #18756	; 0x4944
    fb0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb10:	18d3      	adds	r3, r2, r3
    fb12:	603b      	str	r3, [r7, #0]
        p_spoke->FirstPtr      = (OS_TCB        *)0;
    fb14:	683b      	ldr	r3, [r7, #0]
    fb16:	f04f 0200 	mov.w	r2, #0
    fb1a:	601a      	str	r2, [r3, #0]
        p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
    fb1c:	683b      	ldr	r3, [r7, #0]
    fb1e:	f04f 0200 	mov.w	r2, #0
    fb22:	809a      	strh	r2, [r3, #4]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
    fb24:	683b      	ldr	r3, [r7, #0]
    fb26:	f04f 0200 	mov.w	r2, #0
    fb2a:	80da      	strh	r2, [r3, #6]
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
    fb2c:	88fb      	ldrh	r3, [r7, #6]
    fb2e:	f103 0301 	add.w	r3, r3, #1
    fb32:	80fb      	strh	r3, [r7, #6]
    fb34:	f64c 1364 	movw	r3, #51556	; 0xc964
    fb38:	f2c0 0302 	movt	r3, #2
    fb3c:	881b      	ldrh	r3, [r3, #0]
    fb3e:	88fa      	ldrh	r2, [r7, #6]
    fb40:	429a      	cmp	r2, r3
    fb42:	d3de      	bcc.n	fb02 <OS_TickListInit+0xe>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
        p_spoke->FirstPtr      = (OS_TCB        *)0;
        p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
    }
}
    fb44:	f107 070c 	add.w	r7, r7, #12
    fb48:	46bd      	mov	sp, r7
    fb4a:	bc80      	pop	{r7}
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop

0000fb50 <OS_TickListInsert>:

void  OS_TickListInsert (OS_TCB   *p_tcb,
                         OS_TICK   time,
                         OS_OPT    opt,
                         OS_ERR   *p_err)
{
    fb50:	b480      	push	{r7}
    fb52:	b08b      	sub	sp, #44	; 0x2c
    fb54:	af00      	add	r7, sp, #0
    fb56:	60f8      	str	r0, [r7, #12]
    fb58:	60b9      	str	r1, [r7, #8]
    fb5a:	603b      	str	r3, [r7, #0]
    fb5c:	4613      	mov	r3, r2
    fb5e:	80fb      	strh	r3, [r7, #6]
    OS_TCB            *p_tcb1;
    OS_TICK_SPOKE_IX   spoke;



    if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
    fb60:	88fb      	ldrh	r3, [r7, #6]
    fb62:	2b04      	cmp	r3, #4
    fb64:	d12b      	bne.n	fbbe <OS_TickListInsert+0x6e>
        tick_delta = time - OSTickCtr - 1u;
    fb66:	f244 4324 	movw	r3, #17444	; 0x4424
    fb6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb6e:	681b      	ldr	r3, [r3, #0]
    fb70:	68ba      	ldr	r2, [r7, #8]
    fb72:	1ad3      	subs	r3, r2, r3
    fb74:	f103 33ff 	add.w	r3, r3, #4294967295
    fb78:	623b      	str	r3, [r7, #32]
        if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
    fb7a:	6a3b      	ldr	r3, [r7, #32]
    fb7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
    fb80:	d912      	bls.n	fba8 <OS_TickListInsert+0x58>
            p_tcb->TickCtrMatch = (OS_TICK        )0u;
    fb82:	68fb      	ldr	r3, [r7, #12]
    fb84:	f04f 0200 	mov.w	r2, #0
    fb88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            p_tcb->TickRemain   = (OS_TICK        )0u;
    fb8c:	68fb      	ldr	r3, [r7, #12]
    fb8e:	f04f 0200 	mov.w	r2, #0
    fb92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    fb96:	68fb      	ldr	r3, [r7, #12]
    fb98:	f04f 0200 	mov.w	r2, #0
    fb9c:	61da      	str	r2, [r3, #28]
           *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
    fb9e:	683b      	ldr	r3, [r7, #0]
    fba0:	f247 227e 	movw	r2, #29310	; 0x727e
    fba4:	801a      	strh	r2, [r3, #0]
            return;
    fba6:	e100      	b.n	fdaa <OS_TickListInsert+0x25a>
        }
        p_tcb->TickCtrMatch = time;
    fba8:	68fb      	ldr	r3, [r7, #12]
    fbaa:	68ba      	ldr	r2, [r7, #8]
    fbac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        p_tcb->TickRemain   = tick_delta + 1u;
    fbb0:	6a3b      	ldr	r3, [r7, #32]
    fbb2:	f103 0201 	add.w	r2, r3, #1
    fbb6:	68fb      	ldr	r3, [r7, #12]
    fbb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    fbbc:	e05d      	b.n	fc7a <OS_TickListInsert+0x12a>

    } else if (time > (OS_TICK)0u) {
    fbbe:	68bb      	ldr	r3, [r7, #8]
    fbc0:	2b00      	cmp	r3, #0
    fbc2:	d047      	beq.n	fc54 <OS_TickListInsert+0x104>
        if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
    fbc4:	88fb      	ldrh	r3, [r7, #6]
    fbc6:	2b08      	cmp	r3, #8
    fbc8:	d135      	bne.n	fc36 <OS_TickListInsert+0xe6>
            tick_next  = p_tcb->TickCtrPrev + time;
    fbca:	68fb      	ldr	r3, [r7, #12]
    fbcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    fbd0:	68bb      	ldr	r3, [r7, #8]
    fbd2:	18d3      	adds	r3, r2, r3
    fbd4:	61fb      	str	r3, [r7, #28]
            tick_delta = tick_next - OSTickCtr - 1u;
    fbd6:	f244 4324 	movw	r3, #17444	; 0x4424
    fbda:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbde:	681b      	ldr	r3, [r3, #0]
    fbe0:	69fa      	ldr	r2, [r7, #28]
    fbe2:	1ad3      	subs	r3, r2, r3
    fbe4:	f103 33ff 	add.w	r3, r3, #4294967295
    fbe8:	623b      	str	r3, [r7, #32]
            if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
    fbea:	6a3a      	ldr	r2, [r7, #32]
    fbec:	68bb      	ldr	r3, [r7, #8]
    fbee:	429a      	cmp	r2, r3
    fbf0:	d204      	bcs.n	fbfc <OS_TickListInsert+0xac>
                p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
    fbf2:	68fb      	ldr	r3, [r7, #12]
    fbf4:	69fa      	ldr	r2, [r7, #28]
    fbf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    fbfa:	e009      	b.n	fc10 <OS_TickListInsert+0xc0>
            } else {
                p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
    fbfc:	f244 4324 	movw	r3, #17444	; 0x4424
    fc00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc04:	681a      	ldr	r2, [r3, #0]
    fc06:	68bb      	ldr	r3, [r7, #8]
    fc08:	18d2      	adds	r2, r2, r3
    fc0a:	68fb      	ldr	r3, [r7, #12]
    fc0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            }
            p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
    fc10:	68fb      	ldr	r3, [r7, #12]
    fc12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    fc16:	f244 4324 	movw	r3, #17444	; 0x4424
    fc1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc1e:	681b      	ldr	r3, [r3, #0]
    fc20:	1ad2      	subs	r2, r2, r3
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
    fc28:	68fb      	ldr	r3, [r7, #12]
    fc2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    fc2e:	68fb      	ldr	r3, [r7, #12]
    fc30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    fc34:	e021      	b.n	fc7a <OS_TickListInsert+0x12a>

        } else {                                                 /* Task time is relative to current.                 */
            p_tcb->TickCtrMatch = OSTickCtr + time;
    fc36:	f244 4324 	movw	r3, #17444	; 0x4424
    fc3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc3e:	681a      	ldr	r2, [r3, #0]
    fc40:	68bb      	ldr	r3, [r7, #8]
    fc42:	18d2      	adds	r2, r2, r3
    fc44:	68fb      	ldr	r3, [r7, #12]
    fc46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            p_tcb->TickRemain   = time;
    fc4a:	68fb      	ldr	r3, [r7, #12]
    fc4c:	68ba      	ldr	r2, [r7, #8]
    fc4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    fc52:	e012      	b.n	fc7a <OS_TickListInsert+0x12a>
        }

    } else {                                                     /* Zero time delay; ...                              */
        p_tcb->TickCtrMatch = (OS_TICK        )0u;
    fc54:	68fb      	ldr	r3, [r7, #12]
    fc56:	f04f 0200 	mov.w	r2, #0
    fc5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        p_tcb->TickRemain   = (OS_TICK        )0u;
    fc5e:	68fb      	ldr	r3, [r7, #12]
    fc60:	f04f 0200 	mov.w	r2, #0
    fc64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    fc68:	68fb      	ldr	r3, [r7, #12]
    fc6a:	f04f 0200 	mov.w	r2, #0
    fc6e:	61da      	str	r2, [r3, #28]
       *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
    fc70:	683b      	ldr	r3, [r7, #0]
    fc72:	f247 227e 	movw	r2, #29310	; 0x727e
    fc76:	801a      	strh	r2, [r3, #0]
        return;
    fc78:	e097      	b.n	fdaa <OS_TickListInsert+0x25a>
    }


    spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
    fc7a:	68fb      	ldr	r3, [r7, #12]
    fc7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    fc80:	f64c 1364 	movw	r3, #51556	; 0xc964
    fc84:	f2c0 0302 	movt	r3, #2
    fc88:	881b      	ldrh	r3, [r3, #0]
    fc8a:	fbb2 f1f3 	udiv	r1, r2, r3
    fc8e:	fb03 f301 	mul.w	r3, r3, r1
    fc92:	1ad3      	subs	r3, r2, r3
    fc94:	837b      	strh	r3, [r7, #26]
    p_spoke = &OSCfg_TickWheel[spoke];
    fc96:	8b7b      	ldrh	r3, [r7, #26]
    fc98:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    fc9c:	f644 1344 	movw	r3, #18756	; 0x4944
    fca0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fca4:	18d3      	adds	r3, r2, r3
    fca6:	617b      	str	r3, [r7, #20]

    if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
    fca8:	697b      	ldr	r3, [r7, #20]
    fcaa:	889b      	ldrh	r3, [r3, #4]
    fcac:	2b00      	cmp	r3, #0
    fcae:	d10f      	bne.n	fcd0 <OS_TickListInsert+0x180>
        p_spoke->FirstPtr    =  p_tcb;
    fcb0:	697b      	ldr	r3, [r7, #20]
    fcb2:	68fa      	ldr	r2, [r7, #12]
    fcb4:	601a      	str	r2, [r3, #0]
        p_tcb->TickNextPtr   = (OS_TCB   *)0;
    fcb6:	68fb      	ldr	r3, [r7, #12]
    fcb8:	f04f 0200 	mov.w	r2, #0
    fcbc:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr   = (OS_TCB   *)0;
    fcbe:	68fb      	ldr	r3, [r7, #12]
    fcc0:	f04f 0200 	mov.w	r2, #0
    fcc4:	619a      	str	r2, [r3, #24]
        p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
    fcc6:	697b      	ldr	r3, [r7, #20]
    fcc8:	f04f 0201 	mov.w	r2, #1
    fccc:	809a      	strh	r2, [r3, #4]
    fcce:	e05b      	b.n	fd88 <OS_TickListInsert+0x238>
    } else {
        p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
    fcd0:	697b      	ldr	r3, [r7, #20]
    fcd2:	681b      	ldr	r3, [r3, #0]
    fcd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tcb1 != (OS_TCB *)0) {
    fcd6:	e04d      	b.n	fd74 <OS_TickListInsert+0x224>
            p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
    fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fcda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                               - OSTickCtr;
    fcde:	f244 4324 	movw	r3, #17444	; 0x4424
    fce2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fce6:	681b      	ldr	r3, [r3, #0]
    fce8:	1ad2      	subs	r2, r2, r3
        p_tcb->TickPrevPtr   = (OS_TCB   *)0;
        p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
    } else {
        p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
        while (p_tcb1 != (OS_TCB *)0) {
            p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
    fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fcec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                               - OSTickCtr;
            if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
    fcf0:	68fb      	ldr	r3, [r7, #12]
    fcf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    fcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fcf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    fcfc:	429a      	cmp	r2, r3
    fcfe:	d915      	bls.n	fd2c <OS_TickListInsert+0x1dc>
                if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
    fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd02:	695b      	ldr	r3, [r3, #20]
    fd04:	2b00      	cmp	r3, #0
    fd06:	d003      	beq.n	fd10 <OS_TickListInsert+0x1c0>
                    p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
    fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd0a:	695b      	ldr	r3, [r3, #20]
    fd0c:	627b      	str	r3, [r7, #36]	; 0x24
    fd0e:	e031      	b.n	fd74 <OS_TickListInsert+0x224>
                } else {
                    p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
    fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd12:	68fa      	ldr	r2, [r7, #12]
    fd14:	615a      	str	r2, [r3, #20]
                    p_tcb->TickPrevPtr   =  p_tcb1;
    fd16:	68fb      	ldr	r3, [r7, #12]
    fd18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fd1a:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr   = (OS_TCB *)0;
    fd1c:	68fb      	ldr	r3, [r7, #12]
    fd1e:	f04f 0200 	mov.w	r2, #0
    fd22:	615a      	str	r2, [r3, #20]
                    p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
    fd24:	f04f 0300 	mov.w	r3, #0
    fd28:	627b      	str	r3, [r7, #36]	; 0x24
    fd2a:	e023      	b.n	fd74 <OS_TickListInsert+0x224>
                }
            } else {                                             /* Insert before the current TCB                     */
                if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
    fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd2e:	699b      	ldr	r3, [r3, #24]
    fd30:	2b00      	cmp	r3, #0
    fd32:	d10d      	bne.n	fd50 <OS_TickListInsert+0x200>
                    p_tcb->TickPrevPtr   = (OS_TCB *)0;
    fd34:	68fb      	ldr	r3, [r7, #12]
    fd36:	f04f 0200 	mov.w	r2, #0
    fd3a:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr   =  p_tcb1;
    fd3c:	68fb      	ldr	r3, [r7, #12]
    fd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fd40:	615a      	str	r2, [r3, #20]
                    p_tcb1->TickPrevPtr  =  p_tcb;
    fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd44:	68fa      	ldr	r2, [r7, #12]
    fd46:	619a      	str	r2, [r3, #24]
                    p_spoke->FirstPtr    =  p_tcb;
    fd48:	697b      	ldr	r3, [r7, #20]
    fd4a:	68fa      	ldr	r2, [r7, #12]
    fd4c:	601a      	str	r2, [r3, #0]
    fd4e:	e00e      	b.n	fd6e <OS_TickListInsert+0x21e>
                } else {                                         /* Insert in between 2 TCBs already in the list      */
                    p_tcb0               =  p_tcb1->TickPrevPtr;
    fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd52:	699b      	ldr	r3, [r3, #24]
    fd54:	613b      	str	r3, [r7, #16]
                    p_tcb0->TickNextPtr  =  p_tcb;
    fd56:	693b      	ldr	r3, [r7, #16]
    fd58:	68fa      	ldr	r2, [r7, #12]
    fd5a:	615a      	str	r2, [r3, #20]
                    p_tcb->TickPrevPtr   =  p_tcb0;
    fd5c:	68fb      	ldr	r3, [r7, #12]
    fd5e:	693a      	ldr	r2, [r7, #16]
    fd60:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr   =  p_tcb1;
    fd62:	68fb      	ldr	r3, [r7, #12]
    fd64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fd66:	615a      	str	r2, [r3, #20]
                    p_tcb1->TickPrevPtr  =  p_tcb;
    fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd6a:	68fa      	ldr	r2, [r7, #12]
    fd6c:	619a      	str	r2, [r3, #24]
                }
                p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
    fd6e:	f04f 0300 	mov.w	r3, #0
    fd72:	627b      	str	r3, [r7, #36]	; 0x24
        p_tcb->TickNextPtr   = (OS_TCB   *)0;
        p_tcb->TickPrevPtr   = (OS_TCB   *)0;
        p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
    } else {
        p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
        while (p_tcb1 != (OS_TCB *)0) {
    fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd76:	2b00      	cmp	r3, #0
    fd78:	d1ae      	bne.n	fcd8 <OS_TickListInsert+0x188>
                    p_tcb1->TickPrevPtr  =  p_tcb;
                }
                p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
            }
        }
        p_spoke->NbrEntries++;
    fd7a:	697b      	ldr	r3, [r7, #20]
    fd7c:	889b      	ldrh	r3, [r3, #4]
    fd7e:	f103 0301 	add.w	r3, r3, #1
    fd82:	b29a      	uxth	r2, r3
    fd84:	697b      	ldr	r3, [r7, #20]
    fd86:	809a      	strh	r2, [r3, #4]
    }
    if (p_spoke->NbrEntries > p_spoke->NbrEntriesMax) {          /* Keep track of maximum # of entries in each spoke  */
    fd88:	697b      	ldr	r3, [r7, #20]
    fd8a:	889a      	ldrh	r2, [r3, #4]
    fd8c:	697b      	ldr	r3, [r7, #20]
    fd8e:	88db      	ldrh	r3, [r3, #6]
    fd90:	429a      	cmp	r2, r3
    fd92:	d903      	bls.n	fd9c <OS_TickListInsert+0x24c>
        p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
    fd94:	697b      	ldr	r3, [r7, #20]
    fd96:	889a      	ldrh	r2, [r3, #4]
    fd98:	697b      	ldr	r3, [r7, #20]
    fd9a:	80da      	strh	r2, [r3, #6]
    }
    p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
    fd9c:	68fb      	ldr	r3, [r7, #12]
    fd9e:	697a      	ldr	r2, [r7, #20]
    fda0:	61da      	str	r2, [r3, #28]
   *p_err               = OS_ERR_NONE;
    fda2:	683b      	ldr	r3, [r7, #0]
    fda4:	f04f 0200 	mov.w	r2, #0
    fda8:	801a      	strh	r2, [r3, #0]
}
    fdaa:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    fdae:	46bd      	mov	sp, r7
    fdb0:	bc80      	pop	{r7}
    fdb2:	4770      	bx	lr

0000fdb4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
    fdb4:	b480      	push	{r7}
    fdb6:	b087      	sub	sp, #28
    fdb8:	af00      	add	r7, sp, #0
    fdba:	6078      	str	r0, [r7, #4]
    OS_TCB         *p_tcb1;
    OS_TCB         *p_tcb2;



    p_spoke = p_tcb->TickSpokePtr;
    fdbc:	687b      	ldr	r3, [r7, #4]
    fdbe:	69db      	ldr	r3, [r3, #28]
    fdc0:	617b      	str	r3, [r7, #20]
    if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
    fdc2:	697b      	ldr	r3, [r7, #20]
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	d03e      	beq.n	fe46 <OS_TickListRemove+0x92>
        p_tcb->TickRemain = (OS_TICK)0u;
    fdc8:	687b      	ldr	r3, [r7, #4]
    fdca:	f04f 0200 	mov.w	r2, #0
    fdce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
    fdd2:	697b      	ldr	r3, [r7, #20]
    fdd4:	681a      	ldr	r2, [r3, #0]
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	429a      	cmp	r2, r3
    fdda:	d10d      	bne.n	fdf8 <OS_TickListRemove+0x44>
            p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
    fddc:	687b      	ldr	r3, [r7, #4]
    fdde:	695b      	ldr	r3, [r3, #20]
    fde0:	613b      	str	r3, [r7, #16]
            p_spoke->FirstPtr = p_tcb1;
    fde2:	697b      	ldr	r3, [r7, #20]
    fde4:	693a      	ldr	r2, [r7, #16]
    fde6:	601a      	str	r2, [r3, #0]
            if (p_tcb1 != (OS_TCB *)0) {
    fde8:	693b      	ldr	r3, [r7, #16]
    fdea:	2b00      	cmp	r3, #0
    fdec:	d013      	beq.n	fe16 <OS_TickListRemove+0x62>
                p_tcb1->TickPrevPtr = (void *)0;
    fdee:	693b      	ldr	r3, [r7, #16]
    fdf0:	f04f 0200 	mov.w	r2, #0
    fdf4:	619a      	str	r2, [r3, #24]
    fdf6:	e00e      	b.n	fe16 <OS_TickListRemove+0x62>
            }
        } else {
            p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
    fdf8:	687b      	ldr	r3, [r7, #4]
    fdfa:	699b      	ldr	r3, [r3, #24]
    fdfc:	613b      	str	r3, [r7, #16]
            p_tcb2              = p_tcb->TickNextPtr;
    fdfe:	687b      	ldr	r3, [r7, #4]
    fe00:	695b      	ldr	r3, [r3, #20]
    fe02:	60fb      	str	r3, [r7, #12]
            p_tcb1->TickNextPtr = p_tcb2;
    fe04:	693b      	ldr	r3, [r7, #16]
    fe06:	68fa      	ldr	r2, [r7, #12]
    fe08:	615a      	str	r2, [r3, #20]
            if (p_tcb2 != (OS_TCB *)0) {
    fe0a:	68fb      	ldr	r3, [r7, #12]
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	d002      	beq.n	fe16 <OS_TickListRemove+0x62>
                p_tcb2->TickPrevPtr = p_tcb1;
    fe10:	68fb      	ldr	r3, [r7, #12]
    fe12:	693a      	ldr	r2, [r7, #16]
    fe14:	619a      	str	r2, [r3, #24]
            }
        }
        p_tcb->TickNextPtr  = (OS_TCB        *)0;
    fe16:	687b      	ldr	r3, [r7, #4]
    fe18:	f04f 0200 	mov.w	r2, #0
    fe1c:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr  = (OS_TCB        *)0;
    fe1e:	687b      	ldr	r3, [r7, #4]
    fe20:	f04f 0200 	mov.w	r2, #0
    fe24:	619a      	str	r2, [r3, #24]
        p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    fe26:	687b      	ldr	r3, [r7, #4]
    fe28:	f04f 0200 	mov.w	r2, #0
    fe2c:	61da      	str	r2, [r3, #28]
        p_tcb->TickCtrMatch = (OS_TICK        )0u;
    fe2e:	687b      	ldr	r3, [r7, #4]
    fe30:	f04f 0200 	mov.w	r2, #0
    fe34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        p_spoke->NbrEntries--;
    fe38:	697b      	ldr	r3, [r7, #20]
    fe3a:	889b      	ldrh	r3, [r3, #4]
    fe3c:	f103 33ff 	add.w	r3, r3, #4294967295
    fe40:	b29a      	uxth	r2, r3
    fe42:	697b      	ldr	r3, [r7, #20]
    fe44:	809a      	strh	r2, [r3, #4]
    }
}
    fe46:	f107 071c 	add.w	r7, r7, #28
    fe4a:	46bd      	mov	sp, r7
    fe4c:	bc80      	pop	{r7}
    fe4e:	4770      	bx	lr

0000fe50 <OS_TickListResetPeak>:
************************************************************************************************************************
*/


void  OS_TickListResetPeak (void)
{
    fe50:	b480      	push	{r7}
    fe52:	b083      	sub	sp, #12
    fe54:	af00      	add	r7, sp, #0
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
    fe56:	f04f 0300 	mov.w	r3, #0
    fe5a:	80fb      	strh	r3, [r7, #6]
    fe5c:	e010      	b.n	fe80 <OS_TickListResetPeak+0x30>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
    fe5e:	88fb      	ldrh	r3, [r7, #6]
    fe60:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    fe64:	f644 1344 	movw	r3, #18756	; 0x4944
    fe68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe6c:	18d3      	adds	r3, r2, r3
    fe6e:	603b      	str	r3, [r7, #0]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	f04f 0200 	mov.w	r2, #0
    fe76:	80da      	strh	r2, [r3, #6]
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
    fe78:	88fb      	ldrh	r3, [r7, #6]
    fe7a:	f103 0301 	add.w	r3, r3, #1
    fe7e:	80fb      	strh	r3, [r7, #6]
    fe80:	f64c 1364 	movw	r3, #51556	; 0xc964
    fe84:	f2c0 0302 	movt	r3, #2
    fe88:	881b      	ldrh	r3, [r3, #0]
    fe8a:	88fa      	ldrh	r2, [r7, #6]
    fe8c:	429a      	cmp	r2, r3
    fe8e:	d3e6      	bcc.n	fe5e <OS_TickListResetPeak+0xe>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
    }
}
    fe90:	f107 070c 	add.w	r7, r7, #12
    fe94:	46bd      	mov	sp, r7
    fe96:	bc80      	pop	{r7}
    fe98:	4770      	bx	lr
    fe9a:	bf00      	nop

0000fe9c <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TickListUpdate (void)
{
    fe9c:	b580      	push	{r7, lr}
    fe9e:	b088      	sub	sp, #32
    fea0:	af00      	add	r7, sp, #0
    OS_TCB            *p_tcb;
    OS_TCB            *p_tcb_next;
    OS_TICK_SPOKE_IX   spoke;
    CPU_TS             ts_start;
    CPU_TS             ts_end;
    CPU_SR_ALLOC();
    fea2:	f04f 0300 	mov.w	r3, #0
    fea6:	617b      	str	r3, [r7, #20]


    OS_CRITICAL_ENTER();
    fea8:	f007 ff9c 	bl	17de4 <CPU_SR_Save>
    feac:	6178      	str	r0, [r7, #20]
    feae:	f7f1 fd03 	bl	18b8 <CPU_IntDisMeasStart>
    feb2:	f643 5350 	movw	r3, #15696	; 0x3d50
    feb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	f103 0301 	add.w	r3, r3, #1
    fec0:	b2da      	uxtb	r2, r3
    fec2:	f643 5350 	movw	r3, #15696	; 0x3d50
    fec6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    feca:	701a      	strb	r2, [r3, #0]
    fecc:	f643 5350 	movw	r3, #15696	; 0x3d50
    fed0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fed4:	781b      	ldrb	r3, [r3, #0]
    fed6:	2b01      	cmp	r3, #1
    fed8:	d101      	bne.n	fede <OS_TickListUpdate+0x42>
    feda:	f7ff fc8b 	bl	f7f4 <OS_SchedLockTimeMeasStart>
    fede:	f7f1 fd17 	bl	1910 <CPU_IntDisMeasStop>
    fee2:	6978      	ldr	r0, [r7, #20]
    fee4:	f007 ff82 	bl	17dec <CPU_SR_Restore>
    ts_start = OS_TS_GET();
    fee8:	f7f3 fa18 	bl	331c <CPU_TS_TmrRd>
    feec:	6138      	str	r0, [r7, #16]
    OSTickCtr++;                                                       /* Keep track of the number of ticks           */
    feee:	f244 4324 	movw	r3, #17444	; 0x4424
    fef2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fef6:	681b      	ldr	r3, [r3, #0]
    fef8:	f103 0201 	add.w	r2, r3, #1
    fefc:	f244 4324 	movw	r3, #17444	; 0x4424
    ff00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff04:	601a      	str	r2, [r3, #0]
    spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
    ff06:	f244 4324 	movw	r3, #17444	; 0x4424
    ff0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff0e:	681a      	ldr	r2, [r3, #0]
    ff10:	f64c 1364 	movw	r3, #51556	; 0xc964
    ff14:	f2c0 0302 	movt	r3, #2
    ff18:	881b      	ldrh	r3, [r3, #0]
    ff1a:	fbb2 f1f3 	udiv	r1, r2, r3
    ff1e:	fb03 f301 	mul.w	r3, r3, r1
    ff22:	1ad3      	subs	r3, r2, r3
    ff24:	81fb      	strh	r3, [r7, #14]
    p_spoke  = &OSCfg_TickWheel[spoke];
    ff26:	89fb      	ldrh	r3, [r7, #14]
    ff28:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ff2c:	f644 1344 	movw	r3, #18756	; 0x4944
    ff30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff34:	18d3      	adds	r3, r2, r3
    ff36:	60bb      	str	r3, [r7, #8]
    p_tcb    = p_spoke->FirstPtr;
    ff38:	68bb      	ldr	r3, [r7, #8]
    ff3a:	681b      	ldr	r3, [r3, #0]
    ff3c:	61bb      	str	r3, [r7, #24]
    done     = DEF_FALSE;
    ff3e:	f04f 0300 	mov.w	r3, #0
    ff42:	77fb      	strb	r3, [r7, #31]
    while (done == DEF_FALSE) {
    ff44:	e0e9      	b.n	1011a <OS_TickListUpdate+0x27e>
        if (p_tcb != (OS_TCB *)0) {
    ff46:	69bb      	ldr	r3, [r7, #24]
    ff48:	2b00      	cmp	r3, #0
    ff4a:	f000 80e3 	beq.w	10114 <OS_TickListUpdate+0x278>
            p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
    ff4e:	69bb      	ldr	r3, [r7, #24]
    ff50:	695b      	ldr	r3, [r3, #20]
    ff52:	607b      	str	r3, [r7, #4]
            switch (p_tcb->TaskState) {
    ff54:	69bb      	ldr	r3, [r7, #24]
    ff56:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    ff5a:	2b07      	cmp	r3, #7
    ff5c:	f200 80d6 	bhi.w	1010c <OS_TickListUpdate+0x270>
    ff60:	a201      	add	r2, pc, #4	; (adr r2, ff68 <OS_TickListUpdate+0xcc>)
    ff62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff66:	bf00      	nop
    ff68:	0001010d 	.word	0x0001010d
    ff6c:	0000ff89 	.word	0x0000ff89
    ff70:	0001010d 	.word	0x0001010d
    ff74:	0000ffcf 	.word	0x0000ffcf
    ff78:	0001010d 	.word	0x0001010d
    ff7c:	0001004b 	.word	0x0001004b
    ff80:	0001010d 	.word	0x0001010d
    ff84:	00010091 	.word	0x00010091
                case OS_TASK_STATE_SUSPENDED:
                case OS_TASK_STATE_PEND_SUSPENDED:
                     break;

                case OS_TASK_STATE_DLY:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    ff88:	69bb      	ldr	r3, [r7, #24]
    ff8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                       - OSTickCtr;
    ff8e:	f244 4324 	movw	r3, #17444	; 0x4424
    ff92:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff96:	681b      	ldr	r3, [r3, #0]
    ff98:	1ad2      	subs	r2, r2, r3
                case OS_TASK_STATE_SUSPENDED:
                case OS_TASK_STATE_PEND_SUSPENDED:
                     break;

                case OS_TASK_STATE_DLY:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    ff9a:	69bb      	ldr	r3, [r7, #24]
    ff9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    ffa0:	69bb      	ldr	r3, [r7, #24]
    ffa2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    ffa6:	f244 4324 	movw	r3, #17444	; 0x4424
    ffaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ffae:	681b      	ldr	r3, [r3, #0]
    ffb0:	429a      	cmp	r2, r3
    ffb2:	d108      	bne.n	ffc6 <OS_TickListUpdate+0x12a>
                         p_tcb->TaskState = OS_TASK_STATE_RDY;
    ffb4:	69bb      	ldr	r3, [r7, #24]
    ffb6:	f04f 0200 	mov.w	r2, #0
    ffba:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
                         OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
    ffbe:	69b8      	ldr	r0, [r7, #24]
    ffc0:	f7ff fd0a 	bl	f9d8 <OS_TaskRdy>
                     } else {
                         done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
                     }
                     break;
    ffc4:	e0a3      	b.n	1010e <OS_TickListUpdate+0x272>
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
                         p_tcb->TaskState = OS_TASK_STATE_RDY;
                         OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
                     } else {
                         done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
    ffc6:	f04f 0301 	mov.w	r3, #1
    ffca:	77fb      	strb	r3, [r7, #31]
                     }
                     break;
    ffcc:	e09f      	b.n	1010e <OS_TickListUpdate+0x272>

                case OS_TASK_STATE_PEND_TIMEOUT:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    ffce:	69bb      	ldr	r3, [r7, #24]
    ffd0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                       - OSTickCtr;
    ffd4:	f244 4324 	movw	r3, #17444	; 0x4424
    ffd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ffdc:	681b      	ldr	r3, [r3, #0]
    ffde:	1ad2      	subs	r2, r2, r3
                         done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
                     }
                     break;

                case OS_TASK_STATE_PEND_TIMEOUT:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    ffe0:	69bb      	ldr	r3, [r7, #24]
    ffe2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    ffe6:	69bb      	ldr	r3, [r7, #24]
    ffe8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    ffec:	f244 4324 	movw	r3, #17444	; 0x4424
    fff0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fff4:	681b      	ldr	r3, [r3, #0]
    fff6:	429a      	cmp	r2, r3
    fff8:	d123      	bne.n	10042 <OS_TickListUpdate+0x1a6>
#if (OS_MSG_EN > 0u)
                         p_tcb->MsgPtr     = (void      *)0;
    fffa:	69bb      	ldr	r3, [r7, #24]
    fffc:	f04f 0200 	mov.w	r2, #0
   10000:	63da      	str	r2, [r3, #60]	; 0x3c
                         p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
   10002:	69bb      	ldr	r3, [r7, #24]
   10004:	f04f 0200 	mov.w	r2, #0
   10008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
                         p_tcb->TS         = OS_TS_GET();
   1000c:	f7f3 f986 	bl	331c <CPU_TS_TmrRd>
   10010:	4602      	mov	r2, r0
   10012:	69bb      	ldr	r3, [r7, #24]
   10014:	639a      	str	r2, [r3, #56]	; 0x38
                         OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
   10016:	69b8      	ldr	r0, [r7, #24]
   10018:	f7ff f83c 	bl	f094 <OS_PendListRemove>
                         OS_TaskRdy(p_tcb);
   1001c:	69b8      	ldr	r0, [r7, #24]
   1001e:	f7ff fcdb 	bl	f9d8 <OS_TaskRdy>
                         p_tcb->TaskState  = OS_TASK_STATE_RDY;
   10022:	69bb      	ldr	r3, [r7, #24]
   10024:	f04f 0200 	mov.w	r2, #0
   10028:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
   1002c:	69bb      	ldr	r3, [r7, #24]
   1002e:	f04f 0203 	mov.w	r2, #3
   10032:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
   10036:	69bb      	ldr	r3, [r7, #24]
   10038:	f04f 0200 	mov.w	r2, #0
   1003c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
   10040:	e065      	b.n	1010e <OS_TickListUpdate+0x272>
                         OS_TaskRdy(p_tcb);
                         p_tcb->TaskState  = OS_TASK_STATE_RDY;
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
   10042:	f04f 0301 	mov.w	r3, #1
   10046:	77fb      	strb	r3, [r7, #31]
                     }
                     break;
   10048:	e061      	b.n	1010e <OS_TickListUpdate+0x272>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
   1004a:	69bb      	ldr	r3, [r7, #24]
   1004c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                       - OSTickCtr;
   10050:	f244 4324 	movw	r3, #17444	; 0x4424
   10054:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10058:	681b      	ldr	r3, [r3, #0]
   1005a:	1ad2      	subs	r2, r2, r3
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
   1005c:	69bb      	ldr	r3, [r7, #24]
   1005e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
   10062:	69bb      	ldr	r3, [r7, #24]
   10064:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   10068:	f244 4324 	movw	r3, #17444	; 0x4424
   1006c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10070:	681b      	ldr	r3, [r3, #0]
   10072:	429a      	cmp	r2, r3
   10074:	d108      	bne.n	10088 <OS_TickListUpdate+0x1ec>
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
   10076:	69bb      	ldr	r3, [r7, #24]
   10078:	f04f 0204 	mov.w	r2, #4
   1007c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
   10080:	69b8      	ldr	r0, [r7, #24]
   10082:	f7ff fe97 	bl	fdb4 <OS_TickListRemove>
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
   10086:	e042      	b.n	1010e <OS_TickListUpdate+0x272>
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
   10088:	f04f 0301 	mov.w	r3, #1
   1008c:	77fb      	strb	r3, [r7, #31]
                     }
                     break;
   1008e:	e03e      	b.n	1010e <OS_TickListUpdate+0x272>

                case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
   10090:	69bb      	ldr	r3, [r7, #24]
   10092:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                       - OSTickCtr;
   10096:	f244 4324 	movw	r3, #17444	; 0x4424
   1009a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1009e:	681b      	ldr	r3, [r3, #0]
   100a0:	1ad2      	subs	r2, r2, r3
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;

                case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
   100a2:	69bb      	ldr	r3, [r7, #24]
   100a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                                       - OSTickCtr;
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
   100a8:	69bb      	ldr	r3, [r7, #24]
   100aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   100ae:	f244 4324 	movw	r3, #17444	; 0x4424
   100b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   100b6:	681b      	ldr	r3, [r3, #0]
   100b8:	429a      	cmp	r2, r3
   100ba:	d123      	bne.n	10104 <OS_TickListUpdate+0x268>
#if (OS_MSG_EN > 0u)
                         p_tcb->MsgPtr     = (void      *)0;
   100bc:	69bb      	ldr	r3, [r7, #24]
   100be:	f04f 0200 	mov.w	r2, #0
   100c2:	63da      	str	r2, [r3, #60]	; 0x3c
                         p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
   100c4:	69bb      	ldr	r3, [r7, #24]
   100c6:	f04f 0200 	mov.w	r2, #0
   100ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
#endif
                         p_tcb->TS         = OS_TS_GET();
   100ce:	f7f3 f925 	bl	331c <CPU_TS_TmrRd>
   100d2:	4602      	mov	r2, r0
   100d4:	69bb      	ldr	r3, [r7, #24]
   100d6:	639a      	str	r2, [r3, #56]	; 0x38
                         OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
   100d8:	69b8      	ldr	r0, [r7, #24]
   100da:	f7fe ffdb 	bl	f094 <OS_PendListRemove>
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
   100de:	69b8      	ldr	r0, [r7, #24]
   100e0:	f7ff fe68 	bl	fdb4 <OS_TickListRemove>
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
   100e4:	69bb      	ldr	r3, [r7, #24]
   100e6:	f04f 0204 	mov.w	r2, #4
   100ea:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
   100ee:	69bb      	ldr	r3, [r7, #24]
   100f0:	f04f 0203 	mov.w	r2, #3
   100f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
   100f8:	69bb      	ldr	r3, [r7, #24]
   100fa:	f04f 0200 	mov.w	r2, #0
   100fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
   10102:	e004      	b.n	1010e <OS_TickListUpdate+0x272>
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
   10104:	f04f 0301 	mov.w	r3, #1
   10108:	77fb      	strb	r3, [r7, #31]
                     }
                     break;
   1010a:	e000      	b.n	1010e <OS_TickListUpdate+0x272>

                default:
                     break;
   1010c:	bf00      	nop
            }
            p_tcb = p_tcb_next;
   1010e:	687b      	ldr	r3, [r7, #4]
   10110:	61bb      	str	r3, [r7, #24]
   10112:	e002      	b.n	1011a <OS_TickListUpdate+0x27e>
        } else {
            done  = DEF_TRUE;
   10114:	f04f 0301 	mov.w	r3, #1
   10118:	77fb      	strb	r3, [r7, #31]
    OSTickCtr++;                                                       /* Keep track of the number of ticks           */
    spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
    p_spoke  = &OSCfg_TickWheel[spoke];
    p_tcb    = p_spoke->FirstPtr;
    done     = DEF_FALSE;
    while (done == DEF_FALSE) {
   1011a:	7ffb      	ldrb	r3, [r7, #31]
   1011c:	2b00      	cmp	r3, #0
   1011e:	f43f af12 	beq.w	ff46 <OS_TickListUpdate+0xaa>
            p_tcb = p_tcb_next;
        } else {
            done  = DEF_TRUE;
        }
    }
    ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
   10122:	f7f3 f8fb 	bl	331c <CPU_TS_TmrRd>
   10126:	4602      	mov	r2, r0
   10128:	693b      	ldr	r3, [r7, #16]
   1012a:	1ad3      	subs	r3, r2, r3
   1012c:	603b      	str	r3, [r7, #0]
    if (ts_end > OSTickTaskTimeMax) {
   1012e:	f244 532c 	movw	r3, #17708	; 0x452c
   10132:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10136:	681b      	ldr	r3, [r3, #0]
   10138:	683a      	ldr	r2, [r7, #0]
   1013a:	429a      	cmp	r2, r3
   1013c:	d905      	bls.n	1014a <OS_TickListUpdate+0x2ae>
        OSTickTaskTimeMax = ts_end;
   1013e:	f244 532c 	movw	r3, #17708	; 0x452c
   10142:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10146:	683a      	ldr	r2, [r7, #0]
   10148:	601a      	str	r2, [r3, #0]
    }
    OS_CRITICAL_EXIT();
   1014a:	f007 fe4b 	bl	17de4 <CPU_SR_Save>
   1014e:	6178      	str	r0, [r7, #20]
   10150:	f7f1 fbb2 	bl	18b8 <CPU_IntDisMeasStart>
   10154:	f643 5350 	movw	r3, #15696	; 0x3d50
   10158:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	f103 33ff 	add.w	r3, r3, #4294967295
   10162:	b2da      	uxtb	r2, r3
   10164:	f643 5350 	movw	r3, #15696	; 0x3d50
   10168:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1016c:	701a      	strb	r2, [r3, #0]
   1016e:	f643 5350 	movw	r3, #15696	; 0x3d50
   10172:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10176:	781b      	ldrb	r3, [r3, #0]
   10178:	2b00      	cmp	r3, #0
   1017a:	d116      	bne.n	101aa <OS_TickListUpdate+0x30e>
   1017c:	f7ff fb4c 	bl	f818 <OS_SchedLockTimeMeasStop>
   10180:	f244 533c 	movw	r3, #17724	; 0x453c
   10184:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10188:	881b      	ldrh	r3, [r3, #0]
   1018a:	2b00      	cmp	r3, #0
   1018c:	d007      	beq.n	1019e <OS_TickListUpdate+0x302>
   1018e:	f7f1 fbbf 	bl	1910 <CPU_IntDisMeasStop>
   10192:	6978      	ldr	r0, [r7, #20]
   10194:	f007 fe2a 	bl	17dec <CPU_SR_Restore>
   10198:	f7ff faf2 	bl	f780 <OS_Sched0>
   1019c:	e00a      	b.n	101b4 <OS_TickListUpdate+0x318>
   1019e:	f7f1 fbb7 	bl	1910 <CPU_IntDisMeasStop>
   101a2:	6978      	ldr	r0, [r7, #20]
   101a4:	f007 fe22 	bl	17dec <CPU_SR_Restore>
   101a8:	e004      	b.n	101b4 <OS_TickListUpdate+0x318>
   101aa:	f7f1 fbb1 	bl	1910 <CPU_IntDisMeasStop>
   101ae:	6978      	ldr	r0, [r7, #20]
   101b0:	f007 fe1c 	bl	17dec <CPU_SR_Restore>
}
   101b4:	f107 0720 	add.w	r7, r7, #32
   101b8:	46bd      	mov	sp, r7
   101ba:	bd80      	pop	{r7, pc}

000101bc <OSMsgPoolExtend>:
*/

void  OSMsgPoolExtend (OS_MSG      *p_msg,
                       OS_MSG_QTY   size,
                       OS_ERR      *p_err)
{
   101bc:	b580      	push	{r7, lr}
   101be:	b084      	sub	sp, #16
   101c0:	af00      	add	r7, sp, #0
   101c2:	60f8      	str	r0, [r7, #12]
   101c4:	460b      	mov	r3, r1
   101c6:	607a      	str	r2, [r7, #4]
   101c8:	817b      	strh	r3, [r7, #10]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_msg == (OS_MSG *)0) {
   101ca:	68fb      	ldr	r3, [r7, #12]
   101cc:	2b00      	cmp	r3, #0
   101ce:	d104      	bne.n	101da <OSMsgPoolExtend+0x1e>
        *p_err = OS_ERR_MSG_POOL_NULL_PTR;
   101d0:	687b      	ldr	r3, [r7, #4]
   101d2:	f245 721e 	movw	r2, #22302	; 0x571e
   101d6:	801a      	strh	r2, [r3, #0]
        return;
   101d8:	e030      	b.n	1023c <OSMsgPoolExtend+0x80>
    }
    if (size == (OS_MSG_QTY)0) {
   101da:	897b      	ldrh	r3, [r7, #10]
   101dc:	2b00      	cmp	r3, #0
   101de:	d104      	bne.n	101ea <OSMsgPoolExtend+0x2e>
        *p_err = OS_ERR_MSG_POOL_EMPTY;
   101e0:	687b      	ldr	r3, [r7, #4]
   101e2:	f245 721d 	movw	r2, #22301	; 0x571d
   101e6:	801a      	strh	r2, [r3, #0]
        return;
   101e8:	e028      	b.n	1023c <OSMsgPoolExtend+0x80>
    }
#endif

    OS_MsgPoolCreate(p_msg,                                 /* Create the singly linked list                          */
   101ea:	897b      	ldrh	r3, [r7, #10]
   101ec:	68f8      	ldr	r0, [r7, #12]
   101ee:	4619      	mov	r1, r3
   101f0:	f000 f828 	bl	10244 <OS_MsgPoolCreate>
                     size);
    p_msg[size - 1u].NextPtr = OSMsgPool.NextPtr;           /* Link last OS_MSG of new list to current pool           */
   101f4:	897b      	ldrh	r3, [r7, #10]
   101f6:	f103 33ff 	add.w	r3, r3, #4294967295
   101fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
   101fe:	68fa      	ldr	r2, [r7, #12]
   10200:	18d2      	adds	r2, r2, r3
   10202:	f244 2358 	movw	r3, #16984	; 0x4258
   10206:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1020a:	681b      	ldr	r3, [r3, #0]
   1020c:	6013      	str	r3, [r2, #0]
    OSMsgPool.NextPtr       = p_msg;
   1020e:	f244 2358 	movw	r3, #16984	; 0x4258
   10212:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10216:	68fa      	ldr	r2, [r7, #12]
   10218:	601a      	str	r2, [r3, #0]
    OSMsgPool.NbrFree      += size;                         /* All new OS_MSGs are now available                      */
   1021a:	f244 2358 	movw	r3, #16984	; 0x4258
   1021e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10222:	889a      	ldrh	r2, [r3, #4]
   10224:	897b      	ldrh	r3, [r7, #10]
   10226:	18d3      	adds	r3, r2, r3
   10228:	b29a      	uxth	r2, r3
   1022a:	f244 2358 	movw	r3, #16984	; 0x4258
   1022e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10232:	809a      	strh	r2, [r3, #4]
    *p_err                  = OS_ERR_NONE;
   10234:	687b      	ldr	r3, [r7, #4]
   10236:	f04f 0200 	mov.w	r2, #0
   1023a:	801a      	strh	r2, [r3, #0]
}
   1023c:	f107 0710 	add.w	r7, r7, #16
   10240:	46bd      	mov	sp, r7
   10242:	bd80      	pop	{r7, pc}

00010244 <OS_MsgPoolCreate>:
************************************************************************************************************************
*/

void  OS_MsgPoolCreate (OS_MSG      *p_msg,
                        OS_MSG_QTY   size)
{
   10244:	b480      	push	{r7}
   10246:	b087      	sub	sp, #28
   10248:	af00      	add	r7, sp, #0
   1024a:	6078      	str	r0, [r7, #4]
   1024c:	460b      	mov	r3, r1
   1024e:	807b      	strh	r3, [r7, #2]
    OS_MSG_QTY   i;
    OS_MSG_QTY   loops;



    p_msg1 = p_msg;
   10250:	687b      	ldr	r3, [r7, #4]
   10252:	617b      	str	r3, [r7, #20]
    p_msg2 = p_msg;
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	613b      	str	r3, [r7, #16]
    p_msg2++;
   10258:	693b      	ldr	r3, [r7, #16]
   1025a:	f103 0310 	add.w	r3, r3, #16
   1025e:	613b      	str	r3, [r7, #16]
    loops  = size - 1u;
   10260:	887b      	ldrh	r3, [r7, #2]
   10262:	f103 33ff 	add.w	r3, r3, #4294967295
   10266:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
   10268:	f04f 0300 	mov.w	r3, #0
   1026c:	81fb      	strh	r3, [r7, #14]
   1026e:	e01a      	b.n	102a6 <OS_MsgPoolCreate+0x62>
        p_msg1->NextPtr = p_msg2;
   10270:	697b      	ldr	r3, [r7, #20]
   10272:	693a      	ldr	r2, [r7, #16]
   10274:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
   10276:	697b      	ldr	r3, [r7, #20]
   10278:	f04f 0200 	mov.w	r2, #0
   1027c:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
   1027e:	697b      	ldr	r3, [r7, #20]
   10280:	f04f 0200 	mov.w	r2, #0
   10284:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
   10286:	697b      	ldr	r3, [r7, #20]
   10288:	f04f 0200 	mov.w	r2, #0
   1028c:	60da      	str	r2, [r3, #12]
        p_msg1++;
   1028e:	697b      	ldr	r3, [r7, #20]
   10290:	f103 0310 	add.w	r3, r3, #16
   10294:	617b      	str	r3, [r7, #20]
        p_msg2++;
   10296:	693b      	ldr	r3, [r7, #16]
   10298:	f103 0310 	add.w	r3, r3, #16
   1029c:	613b      	str	r3, [r7, #16]

    p_msg1 = p_msg;
    p_msg2 = p_msg;
    p_msg2++;
    loops  = size - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
   1029e:	89fb      	ldrh	r3, [r7, #14]
   102a0:	f103 0301 	add.w	r3, r3, #1
   102a4:	81fb      	strh	r3, [r7, #14]
   102a6:	89fa      	ldrh	r2, [r7, #14]
   102a8:	89bb      	ldrh	r3, [r7, #12]
   102aa:	429a      	cmp	r2, r3
   102ac:	d3e0      	bcc.n	10270 <OS_MsgPoolCreate+0x2c>
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
        p_msg1->MsgTS   = (CPU_TS     )0u;
        p_msg1++;
        p_msg2++;
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
   102ae:	697b      	ldr	r3, [r7, #20]
   102b0:	f04f 0200 	mov.w	r2, #0
   102b4:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
   102b6:	697b      	ldr	r3, [r7, #20]
   102b8:	f04f 0200 	mov.w	r2, #0
   102bc:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
   102be:	697b      	ldr	r3, [r7, #20]
   102c0:	f04f 0200 	mov.w	r2, #0
   102c4:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
   102c6:	697b      	ldr	r3, [r7, #20]
   102c8:	f04f 0200 	mov.w	r2, #0
   102cc:	60da      	str	r2, [r3, #12]
}
   102ce:	f107 071c 	add.w	r7, r7, #28
   102d2:	46bd      	mov	sp, r7
   102d4:	bc80      	pop	{r7}
   102d6:	4770      	bx	lr

000102d8 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
   102d8:	b580      	push	{r7, lr}
   102da:	b082      	sub	sp, #8
   102dc:	af00      	add	r7, sp, #0
   102de:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
   102e0:	f64c 132c 	movw	r3, #51500	; 0xc92c
   102e4:	f2c0 0302 	movt	r3, #2
   102e8:	681b      	ldr	r3, [r3, #0]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d104      	bne.n	102f8 <OS_MsgPoolInit+0x20>
        *p_err = OS_ERR_MSG_POOL_NULL_PTR;
   102ee:	687b      	ldr	r3, [r7, #4]
   102f0:	f245 721e 	movw	r2, #22302	; 0x571e
   102f4:	801a      	strh	r2, [r3, #0]
        return;
   102f6:	e038      	b.n	1036a <OS_MsgPoolInit+0x92>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
   102f8:	f64c 1324 	movw	r3, #51492	; 0xc924
   102fc:	f2c0 0302 	movt	r3, #2
   10300:	881b      	ldrh	r3, [r3, #0]
   10302:	2b00      	cmp	r3, #0
   10304:	d104      	bne.n	10310 <OS_MsgPoolInit+0x38>
        *p_err = OS_ERR_MSG_POOL_EMPTY;
   10306:	687b      	ldr	r3, [r7, #4]
   10308:	f245 721d 	movw	r2, #22301	; 0x571d
   1030c:	801a      	strh	r2, [r3, #0]
        return;
   1030e:	e02c      	b.n	1036a <OS_MsgPoolInit+0x92>
    }
#endif

    OS_MsgPoolCreate(OSCfg_MsgPoolBasePtr,
   10310:	f64c 132c 	movw	r3, #51500	; 0xc92c
   10314:	f2c0 0302 	movt	r3, #2
   10318:	681a      	ldr	r2, [r3, #0]
   1031a:	f64c 1324 	movw	r3, #51492	; 0xc924
   1031e:	f2c0 0302 	movt	r3, #2
   10322:	881b      	ldrh	r3, [r3, #0]
   10324:	4610      	mov	r0, r2
   10326:	4619      	mov	r1, r3
   10328:	f7ff ff8c 	bl	10244 <OS_MsgPoolCreate>
                    OSCfg_MsgPoolSize);
    OSMsgPool.NextPtr =  OSCfg_MsgPoolBasePtr;
   1032c:	f64c 132c 	movw	r3, #51500	; 0xc92c
   10330:	f2c0 0302 	movt	r3, #2
   10334:	681a      	ldr	r2, [r3, #0]
   10336:	f244 2358 	movw	r3, #16984	; 0x4258
   1033a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1033e:	601a      	str	r2, [r3, #0]
    OSMsgPool.NbrFree =  OSCfg_MsgPoolSize;
   10340:	f64c 1324 	movw	r3, #51492	; 0xc924
   10344:	f2c0 0302 	movt	r3, #2
   10348:	881a      	ldrh	r2, [r3, #0]
   1034a:	f244 2358 	movw	r3, #16984	; 0x4258
   1034e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10352:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed = (OS_MSG_QTY)0;
   10354:	f244 2358 	movw	r3, #16984	; 0x4258
   10358:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1035c:	f04f 0200 	mov.w	r2, #0
   10360:	80da      	strh	r2, [r3, #6]
    *p_err            =  OS_ERR_NONE;
   10362:	687b      	ldr	r3, [r7, #4]
   10364:	f04f 0200 	mov.w	r2, #0
   10368:	801a      	strh	r2, [r3, #0]
}
   1036a:	f107 0708 	add.w	r7, r7, #8
   1036e:	46bd      	mov	sp, r7
   10370:	bd80      	pop	{r7, pc}
   10372:	bf00      	nop

00010374 <OS_MsgQEntriesPeakReset>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgQEntriesPeakReset (OS_MSG_Q  *p_msg_q)
{
   10374:	b580      	push	{r7, lr}
   10376:	b084      	sub	sp, #16
   10378:	af00      	add	r7, sp, #0
   1037a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
   1037c:	f04f 0300 	mov.w	r3, #0
   10380:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
   10382:	f007 fd2f 	bl	17de4 <CPU_SR_Save>
   10386:	60f8      	str	r0, [r7, #12]
   10388:	f7f1 fa96 	bl	18b8 <CPU_IntDisMeasStart>
    p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
   1038c:	687b      	ldr	r3, [r7, #4]
   1038e:	f04f 0200 	mov.w	r2, #0
   10392:	819a      	strh	r2, [r3, #12]
    CPU_CRITICAL_EXIT();
   10394:	f7f1 fabc 	bl	1910 <CPU_IntDisMeasStop>
   10398:	68f8      	ldr	r0, [r7, #12]
   1039a:	f007 fd27 	bl	17dec <CPU_SR_Restore>
}
   1039e:	f107 0710 	add.w	r7, r7, #16
   103a2:	46bd      	mov	sp, r7
   103a4:	bd80      	pop	{r7, pc}
   103a6:	bf00      	nop

000103a8 <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
   103a8:	b480      	push	{r7}
   103aa:	b085      	sub	sp, #20
   103ac:	af00      	add	r7, sp, #0
   103ae:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                              /* Get the number of OS_MSGs being freed                  */
   103b0:	687b      	ldr	r3, [r7, #4]
   103b2:	895b      	ldrh	r3, [r3, #10]
   103b4:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > (OS_MSG_QTY)0) {
   103b6:	687b      	ldr	r3, [r7, #4]
   103b8:	895b      	ldrh	r3, [r3, #10]
   103ba:	2b00      	cmp	r3, #0
   103bc:	d03c      	beq.n	10438 <OS_MsgQFreeAll+0x90>
        p_msg                   = p_msg_q->InPtr;           /* Point to end of message chain                          */
   103be:	687b      	ldr	r3, [r7, #4]
   103c0:	681b      	ldr	r3, [r3, #0]
   103c2:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
   103c4:	f244 2358 	movw	r3, #16984	; 0x4258
   103c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103cc:	681a      	ldr	r2, [r3, #0]
   103ce:	68bb      	ldr	r3, [r7, #8]
   103d0:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;          /* Point to beginning of message chain                    */
   103d2:	687b      	ldr	r3, [r7, #4]
   103d4:	685a      	ldr	r2, [r3, #4]
   103d6:	f244 2358 	movw	r3, #16984	; 0x4258
   103da:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103de:	601a      	str	r2, [r3, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;      /* Update statistics for free list of messages            */
   103e0:	f244 2358 	movw	r3, #16984	; 0x4258
   103e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103e8:	88da      	ldrh	r2, [r3, #6]
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	895b      	ldrh	r3, [r3, #10]
   103ee:	1ad3      	subs	r3, r2, r3
   103f0:	b29a      	uxth	r2, r3
   103f2:	f244 2358 	movw	r3, #16984	; 0x4258
   103f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103fa:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
   103fc:	f244 2358 	movw	r3, #16984	; 0x4258
   10400:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10404:	889a      	ldrh	r2, [r3, #4]
   10406:	687b      	ldr	r3, [r7, #4]
   10408:	895b      	ldrh	r3, [r3, #10]
   1040a:	18d3      	adds	r3, r2, r3
   1040c:	b29a      	uxth	r2, r3
   1040e:	f244 2358 	movw	r3, #16984	; 0x4258
   10412:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10416:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     = (OS_MSG_QTY)0;            /* Flush the message queue                                */
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	f04f 0200 	mov.w	r2, #0
   1041e:	815a      	strh	r2, [r3, #10]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
   10420:	687b      	ldr	r3, [r7, #4]
   10422:	f04f 0200 	mov.w	r2, #0
   10426:	819a      	strh	r2, [r3, #12]
        p_msg_q->InPtr          = (OS_MSG   *)0;
   10428:	687b      	ldr	r3, [r7, #4]
   1042a:	f04f 0200 	mov.w	r2, #0
   1042e:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG   *)0;
   10430:	687b      	ldr	r3, [r7, #4]
   10432:	f04f 0200 	mov.w	r2, #0
   10436:	605a      	str	r2, [r3, #4]
    }
    return (qty);
   10438:	89fb      	ldrh	r3, [r7, #14]
}
   1043a:	4618      	mov	r0, r3
   1043c:	f107 0714 	add.w	r7, r7, #20
   10440:	46bd      	mov	sp, r7
   10442:	bc80      	pop	{r7}
   10444:	4770      	bx	lr
   10446:	bf00      	nop

00010448 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q     *p_msg_q,
                   OS_MSG_QTY    size)
{
   10448:	b480      	push	{r7}
   1044a:	b083      	sub	sp, #12
   1044c:	af00      	add	r7, sp, #0
   1044e:	6078      	str	r0, [r7, #4]
   10450:	460b      	mov	r3, r1
   10452:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
   10454:	687b      	ldr	r3, [r7, #4]
   10456:	887a      	ldrh	r2, [r7, #2]
   10458:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
   1045a:	687b      	ldr	r3, [r7, #4]
   1045c:	f04f 0200 	mov.w	r2, #0
   10460:	815a      	strh	r2, [r3, #10]
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
   10462:	687b      	ldr	r3, [r7, #4]
   10464:	f04f 0200 	mov.w	r2, #0
   10468:	819a      	strh	r2, [r3, #12]
    p_msg_q->InPtr          = (OS_MSG   *)0;
   1046a:	687b      	ldr	r3, [r7, #4]
   1046c:	f04f 0200 	mov.w	r2, #0
   10470:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
   10472:	687b      	ldr	r3, [r7, #4]
   10474:	f04f 0200 	mov.w	r2, #0
   10478:	605a      	str	r2, [r3, #4]
}
   1047a:	f107 070c 	add.w	r7, r7, #12
   1047e:	46bd      	mov	sp, r7
   10480:	bc80      	pop	{r7}
   10482:	4770      	bx	lr

00010484 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q    *p_msg_q,
                   OS_MSG_SIZE *p_msg_size,
                   CPU_TS      *p_ts,
                   OS_ERR      *p_err)
{
   10484:	b480      	push	{r7}
   10486:	b087      	sub	sp, #28
   10488:	af00      	add	r7, sp, #0
   1048a:	60f8      	str	r0, [r7, #12]
   1048c:	60b9      	str	r1, [r7, #8]
   1048e:	607a      	str	r2, [r7, #4]
   10490:	603b      	str	r3, [r7, #0]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {
   10492:	68fb      	ldr	r3, [r7, #12]
   10494:	895b      	ldrh	r3, [r3, #10]
   10496:	2b00      	cmp	r3, #0
   10498:	d111      	bne.n	104be <OS_MsgQGet+0x3a>
        *p_msg_size = (OS_MSG_SIZE)0;
   1049a:	68bb      	ldr	r3, [r7, #8]
   1049c:	f04f 0200 	mov.w	r2, #0
   104a0:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
   104a2:	687b      	ldr	r3, [r7, #4]
   104a4:	2b00      	cmp	r3, #0
   104a6:	d003      	beq.n	104b0 <OS_MsgQGet+0x2c>
           *p_ts  = (CPU_TS)0;
   104a8:	687b      	ldr	r3, [r7, #4]
   104aa:	f04f 0200 	mov.w	r2, #0
   104ae:	601a      	str	r2, [r3, #0]
        }
        *p_err      = OS_ERR_Q_EMPTY;
   104b0:	683b      	ldr	r3, [r7, #0]
   104b2:	f246 5292 	movw	r2, #26002	; 0x6592
   104b6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
   104b8:	f04f 0300 	mov.w	r3, #0
   104bc:	e054      	b.n	10568 <OS_MsgQGet+0xe4>
    }

    p_msg           = p_msg_q->OutPtr;
   104be:	68fb      	ldr	r3, [r7, #12]
   104c0:	685b      	ldr	r3, [r3, #4]
   104c2:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
   104c4:	697b      	ldr	r3, [r7, #20]
   104c6:	685b      	ldr	r3, [r3, #4]
   104c8:	613b      	str	r3, [r7, #16]
    *p_msg_size     = p_msg->MsgSize;
   104ca:	697b      	ldr	r3, [r7, #20]
   104cc:	891a      	ldrh	r2, [r3, #8]
   104ce:	68bb      	ldr	r3, [r7, #8]
   104d0:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
   104d2:	687b      	ldr	r3, [r7, #4]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d003      	beq.n	104e0 <OS_MsgQGet+0x5c>
       *p_ts  = p_msg->MsgTS;
   104d8:	697b      	ldr	r3, [r7, #20]
   104da:	68da      	ldr	r2, [r3, #12]
   104dc:	687b      	ldr	r3, [r7, #4]
   104de:	601a      	str	r2, [r3, #0]
    }
    p_msg_q->OutPtr = p_msg->NextPtr;
   104e0:	697b      	ldr	r3, [r7, #20]
   104e2:	681a      	ldr	r2, [r3, #0]
   104e4:	68fb      	ldr	r3, [r7, #12]
   104e6:	605a      	str	r2, [r3, #4]
    if (p_msg_q->OutPtr == (OS_MSG *)0) {
   104e8:	68fb      	ldr	r3, [r7, #12]
   104ea:	685b      	ldr	r3, [r3, #4]
   104ec:	2b00      	cmp	r3, #0
   104ee:	d108      	bne.n	10502 <OS_MsgQGet+0x7e>
        p_msg_q->InPtr      = (OS_MSG   *)0;
   104f0:	68fb      	ldr	r3, [r7, #12]
   104f2:	f04f 0200 	mov.w	r2, #0
   104f6:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
   104f8:	68fb      	ldr	r3, [r7, #12]
   104fa:	f04f 0200 	mov.w	r2, #0
   104fe:	815a      	strh	r2, [r3, #10]
   10500:	e006      	b.n	10510 <OS_MsgQGet+0x8c>
    } else {
        p_msg_q->NbrEntries--;
   10502:	68fb      	ldr	r3, [r7, #12]
   10504:	895b      	ldrh	r3, [r3, #10]
   10506:	f103 33ff 	add.w	r3, r3, #4294967295
   1050a:	b29a      	uxth	r2, r3
   1050c:	68fb      	ldr	r3, [r7, #12]
   1050e:	815a      	strh	r2, [r3, #10]
    }
    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
   10510:	f244 2358 	movw	r3, #16984	; 0x4258
   10514:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10518:	681a      	ldr	r2, [r3, #0]
   1051a:	697b      	ldr	r3, [r7, #20]
   1051c:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
   1051e:	f244 2358 	movw	r3, #16984	; 0x4258
   10522:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10526:	697a      	ldr	r2, [r7, #20]
   10528:	601a      	str	r2, [r3, #0]
    OSMsgPool.NbrFree++;
   1052a:	f244 2358 	movw	r3, #16984	; 0x4258
   1052e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10532:	889b      	ldrh	r3, [r3, #4]
   10534:	f103 0301 	add.w	r3, r3, #1
   10538:	b29a      	uxth	r2, r3
   1053a:	f244 2358 	movw	r3, #16984	; 0x4258
   1053e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10542:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
   10544:	f244 2358 	movw	r3, #16984	; 0x4258
   10548:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1054c:	88db      	ldrh	r3, [r3, #6]
   1054e:	f103 33ff 	add.w	r3, r3, #4294967295
   10552:	b29a      	uxth	r2, r3
   10554:	f244 2358 	movw	r3, #16984	; 0x4258
   10558:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1055c:	80da      	strh	r2, [r3, #6]
    *p_err            = OS_ERR_NONE;
   1055e:	683b      	ldr	r3, [r7, #0]
   10560:	f04f 0200 	mov.w	r2, #0
   10564:	801a      	strh	r2, [r3, #0]
    return (p_void);
   10566:	693b      	ldr	r3, [r7, #16]
}
   10568:	4618      	mov	r0, r3
   1056a:	f107 071c 	add.w	r7, r7, #28
   1056e:	46bd      	mov	sp, r7
   10570:	bc80      	pop	{r7}
   10572:	4770      	bx	lr

00010574 <OS_MsgQPut>:
                  void        *p_void,
                  OS_MSG_SIZE  msg_size,
                  OS_OPT       opt,
                  CPU_TS       ts,
                  OS_ERR      *p_err)
{
   10574:	b480      	push	{r7}
   10576:	b087      	sub	sp, #28
   10578:	af00      	add	r7, sp, #0
   1057a:	60f8      	str	r0, [r7, #12]
   1057c:	60b9      	str	r1, [r7, #8]
   1057e:	80fa      	strh	r2, [r7, #6]
   10580:	80bb      	strh	r3, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
   10582:	68fb      	ldr	r3, [r7, #12]
   10584:	895a      	ldrh	r2, [r3, #10]
   10586:	68fb      	ldr	r3, [r7, #12]
   10588:	891b      	ldrh	r3, [r3, #8]
   1058a:	429a      	cmp	r2, r3
   1058c:	d304      	bcc.n	10598 <OS_MsgQPut+0x24>
        *p_err = OS_ERR_Q_MAX;                              /* Message queue cannot accept any more messages          */
   1058e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10590:	f246 5293 	movw	r2, #26003	; 0x6593
   10594:	801a      	strh	r2, [r3, #0]
        return;
   10596:	e079      	b.n	1068c <OS_MsgQPut+0x118>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
   10598:	f244 2358 	movw	r3, #16984	; 0x4258
   1059c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105a0:	889b      	ldrh	r3, [r3, #4]
   105a2:	2b00      	cmp	r3, #0
   105a4:	d104      	bne.n	105b0 <OS_MsgQPut+0x3c>
        *p_err = OS_ERR_MSG_POOL_EMPTY;                     /* No more OS_MSG to use                                  */
   105a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105a8:	f245 721d 	movw	r2, #22301	; 0x571d
   105ac:	801a      	strh	r2, [r3, #0]
        return;
   105ae:	e06d      	b.n	1068c <OS_MsgQPut+0x118>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
   105b0:	f244 2358 	movw	r3, #16984	; 0x4258
   105b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105b8:	681b      	ldr	r3, [r3, #0]
   105ba:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
   105bc:	697b      	ldr	r3, [r7, #20]
   105be:	681a      	ldr	r2, [r3, #0]
   105c0:	f244 2358 	movw	r3, #16984	; 0x4258
   105c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105c8:	601a      	str	r2, [r3, #0]
    OSMsgPool.NbrFree--;
   105ca:	f244 2358 	movw	r3, #16984	; 0x4258
   105ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105d2:	889b      	ldrh	r3, [r3, #4]
   105d4:	f103 33ff 	add.w	r3, r3, #4294967295
   105d8:	b29a      	uxth	r2, r3
   105da:	f244 2358 	movw	r3, #16984	; 0x4258
   105de:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105e2:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
   105e4:	f244 2358 	movw	r3, #16984	; 0x4258
   105e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105ec:	88db      	ldrh	r3, [r3, #6]
   105ee:	f103 0301 	add.w	r3, r3, #1
   105f2:	b29a      	uxth	r2, r3
   105f4:	f244 2358 	movw	r3, #16984	; 0x4258
   105f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105fc:	80da      	strh	r2, [r3, #6]
    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
   105fe:	68fb      	ldr	r3, [r7, #12]
   10600:	895b      	ldrh	r3, [r3, #10]
   10602:	2b00      	cmp	r3, #0
   10604:	d10a      	bne.n	1061c <OS_MsgQPut+0xa8>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
   10606:	68fb      	ldr	r3, [r7, #12]
   10608:	697a      	ldr	r2, [r7, #20]
   1060a:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
   1060c:	68fb      	ldr	r3, [r7, #12]
   1060e:	697a      	ldr	r2, [r7, #20]
   10610:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
   10612:	68fb      	ldr	r3, [r7, #12]
   10614:	f04f 0201 	mov.w	r2, #1
   10618:	815a      	strh	r2, [r3, #10]
   1061a:	e020      	b.n	1065e <OS_MsgQPut+0xea>
    } else {
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Assume FIFO if not LIFO                                */
   1061c:	88bb      	ldrh	r3, [r7, #4]
   1061e:	f003 0310 	and.w	r3, r3, #16
   10622:	2b00      	cmp	r3, #0
   10624:	d10d      	bne.n	10642 <OS_MsgQPut+0xce>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO                                                   */
   10626:	68fb      	ldr	r3, [r7, #12]
   10628:	681b      	ldr	r3, [r3, #0]
   1062a:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
   1062c:	693b      	ldr	r3, [r7, #16]
   1062e:	697a      	ldr	r2, [r7, #20]
   10630:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
   10632:	697b      	ldr	r3, [r7, #20]
   10634:	f04f 0200 	mov.w	r2, #0
   10638:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
   1063a:	68fb      	ldr	r3, [r7, #12]
   1063c:	697a      	ldr	r2, [r7, #20]
   1063e:	601a      	str	r2, [r3, #0]
   10640:	e006      	b.n	10650 <OS_MsgQPut+0xdc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO                                                   */
   10642:	68fb      	ldr	r3, [r7, #12]
   10644:	685a      	ldr	r2, [r3, #4]
   10646:	697b      	ldr	r3, [r7, #20]
   10648:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
   1064a:	68fb      	ldr	r3, [r7, #12]
   1064c:	697a      	ldr	r2, [r7, #20]
   1064e:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
   10650:	68fb      	ldr	r3, [r7, #12]
   10652:	895b      	ldrh	r3, [r3, #10]
   10654:	f103 0301 	add.w	r3, r3, #1
   10658:	b29a      	uxth	r2, r3
   1065a:	68fb      	ldr	r3, [r7, #12]
   1065c:	815a      	strh	r2, [r3, #10]
    }
    if (p_msg_q->NbrEntries > p_msg_q->NbrEntriesMax) {
   1065e:	68fb      	ldr	r3, [r7, #12]
   10660:	895a      	ldrh	r2, [r3, #10]
   10662:	68fb      	ldr	r3, [r7, #12]
   10664:	899b      	ldrh	r3, [r3, #12]
   10666:	429a      	cmp	r2, r3
   10668:	d903      	bls.n	10672 <OS_MsgQPut+0xfe>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
   1066a:	68fb      	ldr	r3, [r7, #12]
   1066c:	895a      	ldrh	r2, [r3, #10]
   1066e:	68fb      	ldr	r3, [r7, #12]
   10670:	819a      	strh	r2, [r3, #12]
    }
    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
   10672:	697b      	ldr	r3, [r7, #20]
   10674:	68ba      	ldr	r2, [r7, #8]
   10676:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
   10678:	697b      	ldr	r3, [r7, #20]
   1067a:	88fa      	ldrh	r2, [r7, #6]
   1067c:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
   1067e:	697b      	ldr	r3, [r7, #20]
   10680:	6a3a      	ldr	r2, [r7, #32]
   10682:	60da      	str	r2, [r3, #12]
    *p_err         = OS_ERR_NONE;
   10684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10686:	f04f 0200 	mov.w	r2, #0
   1068a:	801a      	strh	r2, [r3, #0]
}
   1068c:	f107 071c 	add.w	r7, r7, #28
   10690:	46bd      	mov	sp, r7
   10692:	bc80      	pop	{r7}
   10694:	4770      	bx	lr
   10696:	bf00      	nop

00010698 <OSMemCreate>:
                   CPU_CHAR    *p_name,
                   void        *p_addr,
                   OS_MEM_QTY   n_blks,
                   OS_MEM_SIZE  blk_size,
                   OS_ERR      *p_err)
{
   10698:	b580      	push	{r7, lr}
   1069a:	b08a      	sub	sp, #40	; 0x28
   1069c:	af00      	add	r7, sp, #0
   1069e:	60f8      	str	r0, [r7, #12]
   106a0:	60b9      	str	r1, [r7, #8]
   106a2:	607a      	str	r2, [r7, #4]
   106a4:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
   106a6:	f04f 0300 	mov.w	r3, #0
   106aa:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
   106ac:	f244 1381 	movw	r3, #16769	; 0x4181
   106b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106b4:	781b      	ldrb	r3, [r3, #0]
   106b6:	2b00      	cmp	r3, #0
   106b8:	d003      	beq.n	106c2 <OSMemCreate+0x2a>
        *p_err = OS_ERR_MEM_CREATE_ISR;
   106ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106bc:	f245 62b9 	movw	r2, #22201	; 0x56b9
   106c0:	801a      	strh	r2, [r3, #0]
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
   106c2:	687b      	ldr	r3, [r7, #4]
   106c4:	2b00      	cmp	r3, #0
   106c6:	d104      	bne.n	106d2 <OSMemCreate+0x3a>
        *p_err = OS_ERR_MEM_INVALID_P_ADDR;
   106c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106ca:	f245 62bb 	movw	r2, #22203	; 0x56bb
   106ce:	801a      	strh	r2, [r3, #0]
        return;
   106d0:	e0c7      	b.n	10862 <OSMemCreate+0x1ca>
    }
    if (((CPU_INT32U)p_addr & (sizeof(void *) - 1u)) != 0u){/* Must be pointer size aligned                           */
   106d2:	687b      	ldr	r3, [r7, #4]
   106d4:	f003 0303 	and.w	r3, r3, #3
   106d8:	2b00      	cmp	r3, #0
   106da:	d004      	beq.n	106e6 <OSMemCreate+0x4e>
        *p_err = OS_ERR_MEM_INVALID_P_ADDR;
   106dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106de:	f245 62bb 	movw	r2, #22203	; 0x56bb
   106e2:	801a      	strh	r2, [r3, #0]
        return;
   106e4:	e0bd      	b.n	10862 <OSMemCreate+0x1ca>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
   106e6:	887b      	ldrh	r3, [r7, #2]
   106e8:	2b01      	cmp	r3, #1
   106ea:	d804      	bhi.n	106f6 <OSMemCreate+0x5e>
        *p_err = OS_ERR_MEM_INVALID_BLKS;
   106ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106ee:	f245 62bc 	movw	r2, #22204	; 0x56bc
   106f2:	801a      	strh	r2, [r3, #0]
        return;
   106f4:	e0b5      	b.n	10862 <OSMemCreate+0x1ca>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
   106f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   106f8:	2b03      	cmp	r3, #3
   106fa:	d804      	bhi.n	10706 <OSMemCreate+0x6e>
        *p_err = OS_ERR_MEM_INVALID_SIZE;
   106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106fe:	f245 62c1 	movw	r2, #22209	; 0x56c1
   10702:	801a      	strh	r2, [r3, #0]
        return;
   10704:	e0ad      	b.n	10862 <OSMemCreate+0x1ca>
    }
    align_msk = sizeof(void *) - 1u;                        /* Block size must be a multiple address size             */
   10706:	f04f 0303 	mov.w	r3, #3
   1070a:	617b      	str	r3, [r7, #20]
    if ((blk_size & align_msk) != 0u) {
   1070c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   1070e:	697b      	ldr	r3, [r7, #20]
   10710:	4013      	ands	r3, r2
   10712:	2b00      	cmp	r3, #0
   10714:	d003      	beq.n	1071e <OSMemCreate+0x86>
        *p_err = OS_ERR_MEM_INVALID_SIZE;
   10716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10718:	f245 62c1 	movw	r2, #22209	; 0x56c1
   1071c:	801a      	strh	r2, [r3, #0]
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
   1071e:	687b      	ldr	r3, [r7, #4]
   10720:	61fb      	str	r3, [r7, #28]
    p_blk  = p_addr;
   10722:	687b      	ldr	r3, [r7, #4]
   10724:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
   10726:	887b      	ldrh	r3, [r7, #2]
   10728:	f103 33ff 	add.w	r3, r3, #4294967295
   1072c:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
   1072e:	f04f 0300 	mov.w	r3, #0
   10732:	84fb      	strh	r3, [r7, #38]	; 0x26
   10734:	e00c      	b.n	10750 <OSMemCreate+0xb8>
        p_blk +=  blk_size;
   10736:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   10738:	6a3a      	ldr	r2, [r7, #32]
   1073a:	18d3      	adds	r3, r2, r3
   1073c:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
   1073e:	69fb      	ldr	r3, [r7, #28]
   10740:	6a3a      	ldr	r2, [r7, #32]
   10742:	601a      	str	r2, [r3, #0]
        p_link = (void **)p_blk;                            /* Position     to NEXT block                             */
   10744:	6a3b      	ldr	r3, [r7, #32]
   10746:	61fb      	str	r3, [r7, #28]
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
    p_blk  = p_addr;
    loops  = n_blks - 1u;
    for (i = 0u; i < loops; i++) {
   10748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1074a:	f103 0301 	add.w	r3, r3, #1
   1074e:	84fb      	strh	r3, [r7, #38]	; 0x26
   10750:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   10752:	8a7b      	ldrh	r3, [r7, #18]
   10754:	429a      	cmp	r2, r3
   10756:	d3ee      	bcc.n	10736 <OSMemCreate+0x9e>
        p_blk +=  blk_size;
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
        p_link = (void **)p_blk;                            /* Position     to NEXT block                             */
    }
    *p_link            = (void *)0;                         /* Last memory block points to NULL                       */
   10758:	69fb      	ldr	r3, [r7, #28]
   1075a:	f04f 0200 	mov.w	r2, #0
   1075e:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
   10760:	f007 fb40 	bl	17de4 <CPU_SR_Save>
   10764:	61b8      	str	r0, [r7, #24]
   10766:	f7f1 f8a7 	bl	18b8 <CPU_IntDisMeasStart>
   1076a:	f643 5350 	movw	r3, #15696	; 0x3d50
   1076e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10772:	781b      	ldrb	r3, [r3, #0]
   10774:	f103 0301 	add.w	r3, r3, #1
   10778:	b2da      	uxtb	r2, r3
   1077a:	f643 5350 	movw	r3, #15696	; 0x3d50
   1077e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10782:	701a      	strb	r2, [r3, #0]
   10784:	f643 5350 	movw	r3, #15696	; 0x3d50
   10788:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1078c:	781b      	ldrb	r3, [r3, #0]
   1078e:	2b01      	cmp	r3, #1
   10790:	d101      	bne.n	10796 <OSMemCreate+0xfe>
   10792:	f7ff f82f 	bl	f7f4 <OS_SchedLockTimeMeasStart>
   10796:	f7f1 f8bb 	bl	1910 <CPU_IntDisMeasStop>
   1079a:	69b8      	ldr	r0, [r7, #24]
   1079c:	f007 fb26 	bl	17dec <CPU_SR_Restore>
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
   107a0:	68fa      	ldr	r2, [r7, #12]
   107a2:	f244 534d 	movw	r3, #17741	; 0x454d
   107a6:	f2c2 034d 	movt	r3, #8269	; 0x204d
   107aa:	6013      	str	r3, [r2, #0]
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
   107ac:	68fb      	ldr	r3, [r7, #12]
   107ae:	68ba      	ldr	r2, [r7, #8]
   107b0:	609a      	str	r2, [r3, #8]
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
   107b2:	68fb      	ldr	r3, [r7, #12]
   107b4:	687a      	ldr	r2, [r7, #4]
   107b6:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
   107b8:	68fb      	ldr	r3, [r7, #12]
   107ba:	687a      	ldr	r2, [r7, #4]
   107bc:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
   107be:	68fb      	ldr	r3, [r7, #12]
   107c0:	887a      	ldrh	r2, [r7, #2]
   107c2:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
   107c4:	68fb      	ldr	r3, [r7, #12]
   107c6:	887a      	ldrh	r2, [r7, #2]
   107c8:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
   107ca:	68fb      	ldr	r3, [r7, #12]
   107cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   107ce:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
   107d0:	68f8      	ldr	r0, [r7, #12]
   107d2:	f000 f8d9 	bl	10988 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
   107d6:	f244 434e 	movw	r3, #17486	; 0x444e
   107da:	f2c1 0300 	movt	r3, #4096	; 0x1000
   107de:	881b      	ldrh	r3, [r3, #0]
   107e0:	f103 0301 	add.w	r3, r3, #1
   107e4:	b29a      	uxth	r2, r3
   107e6:	f244 434e 	movw	r3, #17486	; 0x444e
   107ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
   107ee:	801a      	strh	r2, [r3, #0]

    OS_CRITICAL_EXIT();
   107f0:	f007 faf8 	bl	17de4 <CPU_SR_Save>
   107f4:	61b8      	str	r0, [r7, #24]
   107f6:	f7f1 f85f 	bl	18b8 <CPU_IntDisMeasStart>
   107fa:	f643 5350 	movw	r3, #15696	; 0x3d50
   107fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10802:	781b      	ldrb	r3, [r3, #0]
   10804:	f103 33ff 	add.w	r3, r3, #4294967295
   10808:	b2da      	uxtb	r2, r3
   1080a:	f643 5350 	movw	r3, #15696	; 0x3d50
   1080e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10812:	701a      	strb	r2, [r3, #0]
   10814:	f643 5350 	movw	r3, #15696	; 0x3d50
   10818:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	2b00      	cmp	r3, #0
   10820:	d116      	bne.n	10850 <OSMemCreate+0x1b8>
   10822:	f7fe fff9 	bl	f818 <OS_SchedLockTimeMeasStop>
   10826:	f244 533c 	movw	r3, #17724	; 0x453c
   1082a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1082e:	881b      	ldrh	r3, [r3, #0]
   10830:	2b00      	cmp	r3, #0
   10832:	d007      	beq.n	10844 <OSMemCreate+0x1ac>
   10834:	f7f1 f86c 	bl	1910 <CPU_IntDisMeasStop>
   10838:	69b8      	ldr	r0, [r7, #24]
   1083a:	f007 fad7 	bl	17dec <CPU_SR_Restore>
   1083e:	f7fe ff9f 	bl	f780 <OS_Sched0>
   10842:	e00a      	b.n	1085a <OSMemCreate+0x1c2>
   10844:	f7f1 f864 	bl	1910 <CPU_IntDisMeasStop>
   10848:	69b8      	ldr	r0, [r7, #24]
   1084a:	f007 facf 	bl	17dec <CPU_SR_Restore>
   1084e:	e004      	b.n	1085a <OSMemCreate+0x1c2>
   10850:	f7f1 f85e 	bl	1910 <CPU_IntDisMeasStop>
   10854:	69b8      	ldr	r0, [r7, #24]
   10856:	f007 fac9 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;
   1085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1085c:	f04f 0200 	mov.w	r2, #0
   10860:	801a      	strh	r2, [r3, #0]
}
   10862:	f107 0728 	add.w	r7, r7, #40	; 0x28
   10866:	46bd      	mov	sp, r7
   10868:	bd80      	pop	{r7, pc}
   1086a:	bf00      	nop

0001086c <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
   1086c:	b580      	push	{r7, lr}
   1086e:	b084      	sub	sp, #16
   10870:	af00      	add	r7, sp, #0
   10872:	6078      	str	r0, [r7, #4]
   10874:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
   10876:	f04f 0300 	mov.w	r3, #0
   1087a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
   1087c:	687b      	ldr	r3, [r7, #4]
   1087e:	2b00      	cmp	r3, #0
   10880:	d106      	bne.n	10890 <OSMemGet+0x24>
        *p_err = OS_ERR_MEM_INVALID_P_MEM;
   10882:	683b      	ldr	r3, [r7, #0]
   10884:	f245 62bf 	movw	r2, #22207	; 0x56bf
   10888:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
   1088a:	f04f 0300 	mov.w	r3, #0
   1088e:	e02c      	b.n	108ea <OSMemGet+0x7e>
    }
#endif

    CPU_CRITICAL_ENTER();
   10890:	f007 faa8 	bl	17de4 <CPU_SR_Save>
   10894:	60f8      	str	r0, [r7, #12]
   10896:	f7f1 f80f 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
   1089a:	687b      	ldr	r3, [r7, #4]
   1089c:	8a9b      	ldrh	r3, [r3, #20]
   1089e:	2b00      	cmp	r3, #0
   108a0:	d10b      	bne.n	108ba <OSMemGet+0x4e>
        CPU_CRITICAL_EXIT();
   108a2:	f7f1 f835 	bl	1910 <CPU_IntDisMeasStop>
   108a6:	68f8      	ldr	r0, [r7, #12]
   108a8:	f007 faa0 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_MEM_NO_FREE_BLKS;                   /* No,  Notify caller of empty memory partition           */
   108ac:	683b      	ldr	r3, [r7, #0]
   108ae:	f245 62c2 	movw	r2, #22210	; 0x56c2
   108b2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
   108b4:	f04f 0300 	mov.w	r3, #0
   108b8:	e017      	b.n	108ea <OSMemGet+0x7e>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
   108ba:	687b      	ldr	r3, [r7, #4]
   108bc:	68db      	ldr	r3, [r3, #12]
   108be:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
   108c0:	68bb      	ldr	r3, [r7, #8]
   108c2:	681a      	ldr	r2, [r3, #0]
   108c4:	687b      	ldr	r3, [r7, #4]
   108c6:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
   108c8:	687b      	ldr	r3, [r7, #4]
   108ca:	8a9b      	ldrh	r3, [r3, #20]
   108cc:	f103 33ff 	add.w	r3, r3, #4294967295
   108d0:	b29a      	uxth	r2, r3
   108d2:	687b      	ldr	r3, [r7, #4]
   108d4:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
   108d6:	f7f1 f81b 	bl	1910 <CPU_IntDisMeasStop>
   108da:	68f8      	ldr	r0, [r7, #12]
   108dc:	f007 fa86 	bl	17dec <CPU_SR_Restore>
    *p_err = OS_ERR_NONE;                                   /*      No error                                          */
   108e0:	683b      	ldr	r3, [r7, #0]
   108e2:	f04f 0200 	mov.w	r2, #0
   108e6:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
   108e8:	68bb      	ldr	r3, [r7, #8]
}
   108ea:	4618      	mov	r0, r3
   108ec:	f107 0710 	add.w	r7, r7, #16
   108f0:	46bd      	mov	sp, r7
   108f2:	bd80      	pop	{r7, pc}

000108f4 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
   108f4:	b580      	push	{r7, lr}
   108f6:	b086      	sub	sp, #24
   108f8:	af00      	add	r7, sp, #0
   108fa:	60f8      	str	r0, [r7, #12]
   108fc:	60b9      	str	r1, [r7, #8]
   108fe:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
   10900:	f04f 0300 	mov.w	r3, #0
   10904:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
   10906:	68fb      	ldr	r3, [r7, #12]
   10908:	2b00      	cmp	r3, #0
   1090a:	d104      	bne.n	10916 <OSMemPut+0x22>
        *p_err = OS_ERR_MEM_INVALID_P_MEM;
   1090c:	687b      	ldr	r3, [r7, #4]
   1090e:	f245 62bf 	movw	r2, #22207	; 0x56bf
   10912:	801a      	strh	r2, [r3, #0]
        return;
   10914:	e033      	b.n	1097e <OSMemPut+0x8a>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
   10916:	68bb      	ldr	r3, [r7, #8]
   10918:	2b00      	cmp	r3, #0
   1091a:	d104      	bne.n	10926 <OSMemPut+0x32>
        *p_err = OS_ERR_MEM_INVALID_P_BLK;
   1091c:	687b      	ldr	r3, [r7, #4]
   1091e:	f245 62be 	movw	r2, #22206	; 0x56be
   10922:	801a      	strh	r2, [r3, #0]
        return;
   10924:	e02b      	b.n	1097e <OSMemPut+0x8a>
    }
#endif

    CPU_CRITICAL_ENTER();
   10926:	f007 fa5d 	bl	17de4 <CPU_SR_Save>
   1092a:	6178      	str	r0, [r7, #20]
   1092c:	f7f0 ffc4 	bl	18b8 <CPU_IntDisMeasStart>
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
   10930:	68fb      	ldr	r3, [r7, #12]
   10932:	8a9a      	ldrh	r2, [r3, #20]
   10934:	68fb      	ldr	r3, [r7, #12]
   10936:	8a5b      	ldrh	r3, [r3, #18]
   10938:	429a      	cmp	r2, r3
   1093a:	d309      	bcc.n	10950 <OSMemPut+0x5c>
        CPU_CRITICAL_EXIT();
   1093c:	f7f0 ffe8 	bl	1910 <CPU_IntDisMeasStop>
   10940:	6978      	ldr	r0, [r7, #20]
   10942:	f007 fa53 	bl	17dec <CPU_SR_Restore>
        *p_err = OS_ERR_MEM_FULL;
   10946:	687b      	ldr	r3, [r7, #4]
   10948:	f245 62ba 	movw	r2, #22202	; 0x56ba
   1094c:	801a      	strh	r2, [r3, #0]
        return;
   1094e:	e016      	b.n	1097e <OSMemPut+0x8a>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
   10950:	68fb      	ldr	r3, [r7, #12]
   10952:	68da      	ldr	r2, [r3, #12]
   10954:	68bb      	ldr	r3, [r7, #8]
   10956:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
   10958:	68fb      	ldr	r3, [r7, #12]
   1095a:	68ba      	ldr	r2, [r7, #8]
   1095c:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
   1095e:	68fb      	ldr	r3, [r7, #12]
   10960:	8a9b      	ldrh	r3, [r3, #20]
   10962:	f103 0301 	add.w	r3, r3, #1
   10966:	b29a      	uxth	r2, r3
   10968:	68fb      	ldr	r3, [r7, #12]
   1096a:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
   1096c:	f7f0 ffd0 	bl	1910 <CPU_IntDisMeasStop>
   10970:	6978      	ldr	r0, [r7, #20]
   10972:	f007 fa3b 	bl	17dec <CPU_SR_Restore>
    *p_err             = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
   10976:	687b      	ldr	r3, [r7, #4]
   10978:	f04f 0200 	mov.w	r2, #0
   1097c:	801a      	strh	r2, [r3, #0]
}
   1097e:	f107 0718 	add.w	r7, r7, #24
   10982:	46bd      	mov	sp, r7
   10984:	bd80      	pop	{r7, pc}
   10986:	bf00      	nop

00010988 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM *p_mem)
{
   10988:	b480      	push	{r7}
   1098a:	b083      	sub	sp, #12
   1098c:	af00      	add	r7, sp, #0
   1098e:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
   10990:	687b      	ldr	r3, [r7, #4]
   10992:	f04f 0200 	mov.w	r2, #0
   10996:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
   10998:	f244 4314 	movw	r3, #17428	; 0x4414
   1099c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109a0:	681b      	ldr	r3, [r3, #0]
   109a2:	2b00      	cmp	r3, #0
   109a4:	d104      	bne.n	109b0 <OS_MemDbgListAdd+0x28>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	f04f 0200 	mov.w	r2, #0
   109ac:	61da      	str	r2, [r3, #28]
   109ae:	e00d      	b.n	109cc <OS_MemDbgListAdd+0x44>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
   109b0:	f244 4314 	movw	r3, #17428	; 0x4414
   109b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109b8:	681a      	ldr	r2, [r3, #0]
   109ba:	687b      	ldr	r3, [r7, #4]
   109bc:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
   109be:	f244 4314 	movw	r3, #17428	; 0x4414
   109c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109c6:	681b      	ldr	r3, [r3, #0]
   109c8:	687a      	ldr	r2, [r7, #4]
   109ca:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
   109cc:	f244 4314 	movw	r3, #17428	; 0x4414
   109d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109d4:	687a      	ldr	r2, [r7, #4]
   109d6:	601a      	str	r2, [r3, #0]
}
   109d8:	f107 070c 	add.w	r7, r7, #12
   109dc:	46bd      	mov	sp, r7
   109de:	bc80      	pop	{r7}
   109e0:	4770      	bx	lr
   109e2:	bf00      	nop

000109e4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
   109e4:	b480      	push	{r7}
   109e6:	b083      	sub	sp, #12
   109e8:	af00      	add	r7, sp, #0
   109ea:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
   109ec:	f244 4314 	movw	r3, #17428	; 0x4414
   109f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109f4:	f04f 0200 	mov.w	r2, #0
   109f8:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
   109fa:	f244 434e 	movw	r3, #17486	; 0x444e
   109fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a02:	f04f 0200 	mov.w	r2, #0
   10a06:	801a      	strh	r2, [r3, #0]
    *p_err          = OS_ERR_NONE;
   10a08:	687b      	ldr	r3, [r7, #4]
   10a0a:	f04f 0200 	mov.w	r2, #0
   10a0e:	801a      	strh	r2, [r3, #0]
}
   10a10:	f107 070c 	add.w	r7, r7, #12
   10a14:	46bd      	mov	sp, r7
   10a16:	bc80      	pop	{r7}
   10a18:	4770      	bx	lr
   10a1a:	bf00      	nop

00010a1c <OS_IntQPost>:
                   OS_MSG_SIZE    msg_size,
                   OS_FLAGS       flags,
                   OS_OPT         opt,
                   CPU_TS         ts,
                   OS_ERR        *p_err)
{
   10a1c:	b580      	push	{r7, lr}
   10a1e:	b086      	sub	sp, #24
   10a20:	af00      	add	r7, sp, #0
   10a22:	60f8      	str	r0, [r7, #12]
   10a24:	60b9      	str	r1, [r7, #8]
   10a26:	607a      	str	r2, [r7, #4]
   10a28:	807b      	strh	r3, [r7, #2]
    CPU_SR_ALLOC();
   10a2a:	f04f 0300 	mov.w	r3, #0
   10a2e:	617b      	str	r3, [r7, #20]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    CPU_CRITICAL_ENTER();
   10a30:	f007 f9d8 	bl	17de4 <CPU_SR_Save>
   10a34:	6178      	str	r0, [r7, #20]
   10a36:	f7f0 ff3f 	bl	18b8 <CPU_IntDisMeasStart>
    if (OSIntQNbrEntries < OSCfg_IntQSize) {                /* Make sure we haven't already filled the ISR queue      */
   10a3a:	f244 533c 	movw	r3, #17724	; 0x453c
   10a3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a42:	881a      	ldrh	r2, [r3, #0]
   10a44:	f64c 1300 	movw	r3, #51456	; 0xc900
   10a48:	f2c0 0302 	movt	r3, #2
   10a4c:	881b      	ldrh	r3, [r3, #0]
   10a4e:	429a      	cmp	r2, r3
   10a50:	f080 808b 	bcs.w	10b6a <OS_IntQPost+0x14e>
        OSIntQNbrEntries++;
   10a54:	f244 533c 	movw	r3, #17724	; 0x453c
   10a58:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a5c:	881b      	ldrh	r3, [r3, #0]
   10a5e:	f103 0301 	add.w	r3, r3, #1
   10a62:	b29a      	uxth	r2, r3
   10a64:	f244 533c 	movw	r3, #17724	; 0x453c
   10a68:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a6c:	801a      	strh	r2, [r3, #0]

        if (OSIntQMaxNbrEntries < OSIntQNbrEntries) {
   10a6e:	f244 0370 	movw	r3, #16496	; 0x4070
   10a72:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a76:	881a      	ldrh	r2, [r3, #0]
   10a78:	f244 533c 	movw	r3, #17724	; 0x453c
   10a7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a80:	881b      	ldrh	r3, [r3, #0]
   10a82:	429a      	cmp	r2, r3
   10a84:	d209      	bcs.n	10a9a <OS_IntQPost+0x7e>
            OSIntQMaxNbrEntries = OSIntQNbrEntries;
   10a86:	f244 533c 	movw	r3, #17724	; 0x453c
   10a8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a8e:	881a      	ldrh	r2, [r3, #0]
   10a90:	f244 0370 	movw	r3, #16496	; 0x4070
   10a94:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a98:	801a      	strh	r2, [r3, #0]
        }

        OSIntQInPtr->Type       = type;                     /* Save object type being posted                          */
   10a9a:	f244 0364 	movw	r3, #16484	; 0x4064
   10a9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10aa2:	681b      	ldr	r3, [r3, #0]
   10aa4:	68fa      	ldr	r2, [r7, #12]
   10aa6:	601a      	str	r2, [r3, #0]
        OSIntQInPtr->ObjPtr     = p_obj;                    /* Save pointer to object being posted                    */
   10aa8:	f244 0364 	movw	r3, #16484	; 0x4064
   10aac:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ab0:	681b      	ldr	r3, [r3, #0]
   10ab2:	68ba      	ldr	r2, [r7, #8]
   10ab4:	609a      	str	r2, [r3, #8]
        OSIntQInPtr->MsgPtr     = p_void;                   /* Save pointer to message if posting to a message queue  */
   10ab6:	f244 0364 	movw	r3, #16484	; 0x4064
   10aba:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10abe:	681b      	ldr	r3, [r3, #0]
   10ac0:	687a      	ldr	r2, [r7, #4]
   10ac2:	60da      	str	r2, [r3, #12]
        OSIntQInPtr->MsgSize    = msg_size;                 /* Save the message size   if posting to a message queue  */
   10ac4:	f244 0364 	movw	r3, #16484	; 0x4064
   10ac8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10acc:	681b      	ldr	r3, [r3, #0]
   10ace:	887a      	ldrh	r2, [r7, #2]
   10ad0:	821a      	strh	r2, [r3, #16]
        OSIntQInPtr->Flags      = flags;                    /* Save the flags if posting to an event flag group       */
   10ad2:	f244 0364 	movw	r3, #16484	; 0x4064
   10ad6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ada:	681b      	ldr	r3, [r3, #0]
   10adc:	6a3a      	ldr	r2, [r7, #32]
   10ade:	615a      	str	r2, [r3, #20]
        OSIntQInPtr->Opt        = opt;                      /* Save post options                                      */
   10ae0:	f244 0364 	movw	r3, #16484	; 0x4064
   10ae4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ae8:	681b      	ldr	r3, [r3, #0]
   10aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   10aec:	831a      	strh	r2, [r3, #24]
        OSIntQInPtr->TS         = ts;                       /* Save time stamp                                        */
   10aee:	f244 0364 	movw	r3, #16484	; 0x4064
   10af2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10af6:	681b      	ldr	r3, [r3, #0]
   10af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10afa:	61da      	str	r2, [r3, #28]

        OSIntQInPtr             =  OSIntQInPtr->NextPtr;    /* Point to the next interrupt handler queue entry        */
   10afc:	f244 0364 	movw	r3, #16484	; 0x4064
   10b00:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b04:	681b      	ldr	r3, [r3, #0]
   10b06:	685a      	ldr	r2, [r3, #4]
   10b08:	f244 0364 	movw	r3, #16484	; 0x4064
   10b0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b10:	601a      	str	r2, [r3, #0]

        OSRdyList[0].NbrEntries = (OS_OBJ_QTY)1;            /* Make the interrupt handler task ready to run           */
   10b12:	f643 5364 	movw	r3, #15716	; 0x3d64
   10b16:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b1a:	f04f 0201 	mov.w	r2, #1
   10b1e:	811a      	strh	r2, [r3, #8]
        OSRdyList[0].HeadPtr    = &OSIntQTaskTCB;
   10b20:	f643 5364 	movw	r3, #15716	; 0x3d64
   10b24:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b28:	f244 3240 	movw	r2, #17216	; 0x4340
   10b2c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10b30:	601a      	str	r2, [r3, #0]
        OSRdyList[0].TailPtr    = &OSIntQTaskTCB;
   10b32:	f643 5364 	movw	r3, #15716	; 0x3d64
   10b36:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b3a:	f244 3240 	movw	r2, #17216	; 0x4340
   10b3e:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10b42:	605a      	str	r2, [r3, #4]
        OS_PrioInsert(0u);                                  /* Add task priority 0 in the priority table              */
   10b44:	f04f 0000 	mov.w	r0, #0
   10b48:	f7f5 fb28 	bl	619c <OS_PrioInsert>
        OSPrioSaved             = OSPrioCur;                /* Save current priority                                  */
   10b4c:	f244 0378 	movw	r3, #16504	; 0x4078
   10b50:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b54:	781a      	ldrb	r2, [r3, #0]
   10b56:	f244 1362 	movw	r3, #16738	; 0x4162
   10b5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b5e:	701a      	strb	r2, [r3, #0]

        *p_err                  = OS_ERR_NONE;
   10b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b62:	f04f 0200 	mov.w	r2, #0
   10b66:	801a      	strh	r2, [r3, #0]
   10b68:	e010      	b.n	10b8c <OS_IntQPost+0x170>
    } else {
        OSIntQOvfCtr++;                                     /* Count the number of ISR queue overflows                */
   10b6a:	f244 4342 	movw	r3, #17474	; 0x4442
   10b6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b72:	881b      	ldrh	r3, [r3, #0]
   10b74:	f103 0301 	add.w	r3, r3, #1
   10b78:	b29a      	uxth	r2, r3
   10b7a:	f244 4342 	movw	r3, #17474	; 0x4442
   10b7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b82:	801a      	strh	r2, [r3, #0]
        *p_err                  = OS_ERR_INT_Q_FULL;
   10b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b86:	f244 6253 	movw	r2, #18003	; 0x4653
   10b8a:	801a      	strh	r2, [r3, #0]
    }
    CPU_CRITICAL_EXIT();
   10b8c:	f7f0 fec0 	bl	1910 <CPU_IntDisMeasStop>
   10b90:	6978      	ldr	r0, [r7, #20]
   10b92:	f007 f92b 	bl	17dec <CPU_SR_Restore>
}
   10b96:	f107 0718 	add.w	r7, r7, #24
   10b9a:	46bd      	mov	sp, r7
   10b9c:	bd80      	pop	{r7, pc}
   10b9e:	bf00      	nop

00010ba0 <OS_IntQRePost>:
* Returns    : none
************************************************************************************************************************
*/

void  OS_IntQRePost (void)
{
   10ba0:	b580      	push	{r7, lr}
   10ba2:	b08c      	sub	sp, #48	; 0x30
   10ba4:	af02      	add	r7, sp, #8
    OS_FLAGS      flags;
    CPU_TS        ts;
    OS_OBJ_TYPE   type;
    OS_OPT        opt;
    OS_MSG_SIZE   msg_size;
    CPU_SR_ALLOC();
   10ba6:	f04f 0300 	mov.w	r3, #0
   10baa:	627b      	str	r3, [r7, #36]	; 0x24



    CPU_CRITICAL_ENTER();
   10bac:	f007 f91a 	bl	17de4 <CPU_SR_Save>
   10bb0:	6278      	str	r0, [r7, #36]	; 0x24
   10bb2:	f7f0 fe81 	bl	18b8 <CPU_IntDisMeasStart>
    type         = OSIntQOutPtr->Type;                      /* Get local copy of queue item contents                  */
   10bb6:	f244 2360 	movw	r3, #16992	; 0x4260
   10bba:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bbe:	681b      	ldr	r3, [r3, #0]
   10bc0:	681b      	ldr	r3, [r3, #0]
   10bc2:	623b      	str	r3, [r7, #32]
    p_obj        = OSIntQOutPtr->ObjPtr;
   10bc4:	f244 2360 	movw	r3, #16992	; 0x4260
   10bc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bcc:	681b      	ldr	r3, [r3, #0]
   10bce:	689b      	ldr	r3, [r3, #8]
   10bd0:	61fb      	str	r3, [r7, #28]
    p_void       = OSIntQOutPtr->MsgPtr;
   10bd2:	f244 2360 	movw	r3, #16992	; 0x4260
   10bd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bda:	681b      	ldr	r3, [r3, #0]
   10bdc:	68db      	ldr	r3, [r3, #12]
   10bde:	61bb      	str	r3, [r7, #24]
    msg_size     = OSIntQOutPtr->MsgSize;
   10be0:	f244 2360 	movw	r3, #16992	; 0x4260
   10be4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10be8:	681b      	ldr	r3, [r3, #0]
   10bea:	8a1b      	ldrh	r3, [r3, #16]
   10bec:	82fb      	strh	r3, [r7, #22]
    flags        = OSIntQOutPtr->Flags;
   10bee:	f244 2360 	movw	r3, #16992	; 0x4260
   10bf2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bf6:	681b      	ldr	r3, [r3, #0]
   10bf8:	695b      	ldr	r3, [r3, #20]
   10bfa:	613b      	str	r3, [r7, #16]
    opt          = OSIntQOutPtr->Opt;
   10bfc:	f244 2360 	movw	r3, #16992	; 0x4260
   10c00:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10c04:	681b      	ldr	r3, [r3, #0]
   10c06:	8b1b      	ldrh	r3, [r3, #24]
   10c08:	81fb      	strh	r3, [r7, #14]
    ts           = OSIntQOutPtr->TS;
   10c0a:	f244 2360 	movw	r3, #16992	; 0x4260
   10c0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10c12:	681b      	ldr	r3, [r3, #0]
   10c14:	69db      	ldr	r3, [r3, #28]
   10c16:	60bb      	str	r3, [r7, #8]
    OSIntQOutPtr = OSIntQOutPtr->NextPtr;                   /* Point to next item in the ISR queue                    */
   10c18:	f244 2360 	movw	r3, #16992	; 0x4260
   10c1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10c20:	681b      	ldr	r3, [r3, #0]
   10c22:	685a      	ldr	r2, [r3, #4]
   10c24:	f244 2360 	movw	r3, #16992	; 0x4260
   10c28:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10c2c:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   10c2e:	f7f0 fe6f 	bl	1910 <CPU_IntDisMeasStop>
   10c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10c34:	f007 f8da 	bl	17dec <CPU_SR_Restore>
    switch (type) {                                         /* Re-post to task                                        */
   10c38:	6a3b      	ldr	r3, [r7, #32]
   10c3a:	f245 3254 	movw	r2, #21332	; 0x5354
   10c3e:	f2c4 7249 	movt	r2, #18249	; 0x4749
   10c42:	4293      	cmp	r3, r2
   10c44:	d051      	beq.n	10cea <OS_IntQRePost+0x14a>
   10c46:	f245 3254 	movw	r2, #21332	; 0x5354
   10c4a:	f2c4 7249 	movt	r2, #18249	; 0x4749
   10c4e:	4293      	cmp	r3, r2
   10c50:	d80c      	bhi.n	10c6c <OS_IntQRePost+0xcc>
   10c52:	f244 5253 	movw	r2, #17747	; 0x4553
   10c56:	f2c4 124d 	movt	r2, #16717	; 0x414d
   10c5a:	4293      	cmp	r3, r2
   10c5c:	d030      	beq.n	10cc0 <OS_IntQRePost+0x120>
   10c5e:	f644 4246 	movw	r2, #19526	; 0x4c46
   10c62:	f2c4 7241 	movt	r2, #18241	; 0x4741
   10c66:	4293      	cmp	r3, r2
   10c68:	d013      	beq.n	10c92 <OS_IntQRePost+0xf2>
   10c6a:	e093      	b.n	10d94 <OS_IntQRePost+0x1f4>
   10c6c:	f644 1254 	movw	r2, #18772	; 0x4954
   10c70:	f6c4 3243 	movt	r2, #19267	; 0x4b43
   10c74:	4293      	cmp	r3, r2
   10c76:	d041      	beq.n	10cfc <OS_IntQRePost+0x15c>
   10c78:	f245 5251 	movw	r2, #21841	; 0x5551
   10c7c:	f2c5 5245 	movt	r2, #21829	; 0x5545
   10c80:	4293      	cmp	r3, r2
   10c82:	d011      	beq.n	10ca8 <OS_IntQRePost+0x108>
   10c84:	f644 5254 	movw	r2, #19796	; 0x4d54
   10c88:	f2c4 7253 	movt	r2, #18259	; 0x4753
   10c8c:	4293      	cmp	r3, r2
   10c8e:	d020      	beq.n	10cd2 <OS_IntQRePost+0x132>
   10c90:	e080      	b.n	10d94 <OS_IntQRePost+0x1f4>
        case OS_OBJ_TYPE_FLAG:
#if OS_CFG_FLAG_EN > 0u
             (void)OS_FlagPost((OS_FLAG_GRP *)p_obj,
   10c92:	89fb      	ldrh	r3, [r7, #14]
   10c94:	f107 0206 	add.w	r2, r7, #6
   10c98:	9200      	str	r2, [sp, #0]
   10c9a:	69f8      	ldr	r0, [r7, #28]
   10c9c:	6939      	ldr	r1, [r7, #16]
   10c9e:	461a      	mov	r2, r3
   10ca0:	68bb      	ldr	r3, [r7, #8]
   10ca2:	f7fa fe05 	bl	b8b0 <OS_FlagPost>
                               (OS_FLAGS     )flags,
                               (OS_OPT       )opt,
                               (CPU_TS       )ts,
                               (OS_ERR      *)&err);
#endif
             break;
   10ca6:	e078      	b.n	10d9a <OS_IntQRePost+0x1fa>

        case OS_OBJ_TYPE_Q:
#if OS_CFG_Q_EN > 0u
             OS_QPost((OS_Q      *)p_obj,
   10ca8:	8afa      	ldrh	r2, [r7, #22]
   10caa:	89fb      	ldrh	r3, [r7, #14]
   10cac:	68b9      	ldr	r1, [r7, #8]
   10cae:	9100      	str	r1, [sp, #0]
   10cb0:	f107 0106 	add.w	r1, r7, #6
   10cb4:	9101      	str	r1, [sp, #4]
   10cb6:	69f8      	ldr	r0, [r7, #28]
   10cb8:	69b9      	ldr	r1, [r7, #24]
   10cba:	f7fd f8a5 	bl	de08 <OS_QPost>
                      (OS_MSG_SIZE)msg_size,
                      (OS_OPT     )opt,
                      (CPU_TS     )ts,
                      (OS_ERR    *)&err);
#endif
             break;
   10cbe:	e06c      	b.n	10d9a <OS_IntQRePost+0x1fa>

        case OS_OBJ_TYPE_SEM:
#if OS_CFG_SEM_EN > 0u
             (void)OS_SemPost((OS_SEM *)p_obj,
   10cc0:	89fb      	ldrh	r3, [r7, #14]
   10cc2:	69f8      	ldr	r0, [r7, #28]
   10cc4:	4619      	mov	r1, r3
   10cc6:	68ba      	ldr	r2, [r7, #8]
   10cc8:	f107 0306 	add.w	r3, r7, #6
   10ccc:	f7f9 fd4a 	bl	a764 <OS_SemPost>
                              (OS_OPT  )opt,
                              (CPU_TS  )ts,
                              (OS_ERR *)&err);
#endif
             break;
   10cd0:	e063      	b.n	10d9a <OS_IntQRePost+0x1fa>

        case OS_OBJ_TYPE_TASK_MSG:
#if OS_CFG_TASK_Q_EN > 0u
             OS_TaskQPost((OS_TCB    *)p_obj,
   10cd2:	8afa      	ldrh	r2, [r7, #22]
   10cd4:	89fb      	ldrh	r3, [r7, #14]
   10cd6:	68b9      	ldr	r1, [r7, #8]
   10cd8:	9100      	str	r1, [sp, #0]
   10cda:	f107 0106 	add.w	r1, r7, #6
   10cde:	9101      	str	r1, [sp, #4]
   10ce0:	69f8      	ldr	r0, [r7, #28]
   10ce2:	69b9      	ldr	r1, [r7, #24]
   10ce4:	f7f8 f9e4 	bl	90b0 <OS_TaskQPost>
                          (OS_MSG_SIZE)msg_size,
                          (OS_OPT     )opt,
                          (CPU_TS     )ts,
                          (OS_ERR    *)&err);
#endif
             break;
   10ce8:	e057      	b.n	10d9a <OS_IntQRePost+0x1fa>

        case OS_OBJ_TYPE_TASK_SIGNAL:
             (void)OS_TaskSemPost((OS_TCB *)p_obj,
   10cea:	89fb      	ldrh	r3, [r7, #14]
   10cec:	69f8      	ldr	r0, [r7, #28]
   10cee:	4619      	mov	r1, r3
   10cf0:	68ba      	ldr	r2, [r7, #8]
   10cf2:	f107 0306 	add.w	r3, r7, #6
   10cf6:	f7f8 fb37 	bl	9368 <OS_TaskSemPost>
                                  (OS_OPT  )opt,
                                  (CPU_TS  )ts,
                                  (OS_ERR *)&err);
             break;
   10cfa:	e04e      	b.n	10d9a <OS_IntQRePost+0x1fa>

        case OS_OBJ_TYPE_TICK:
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
             OS_SchedRoundRobin(&OSRdyList[OSPrioSaved]);
   10cfc:	f244 1362 	movw	r3, #16738	; 0x4162
   10d00:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d04:	781b      	ldrb	r3, [r3, #0]
   10d06:	461a      	mov	r2, r3
   10d08:	4613      	mov	r3, r2
   10d0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10d0e:	189b      	adds	r3, r3, r2
   10d10:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10d14:	461a      	mov	r2, r3
   10d16:	f643 5364 	movw	r3, #15716	; 0x3d64
   10d1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d1e:	18d3      	adds	r3, r2, r3
   10d20:	4618      	mov	r0, r3
   10d22:	f7fe fdad 	bl	f880 <OS_SchedRoundRobin>
#endif

             (void)OS_TaskSemPost((OS_TCB *)&OSTickTaskTCB,                /* Signal tick task                        */
   10d26:	f244 0080 	movw	r0, #16512	; 0x4080
   10d2a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d2e:	f04f 0100 	mov.w	r1, #0
   10d32:	68ba      	ldr	r2, [r7, #8]
   10d34:	f107 0306 	add.w	r3, r7, #6
   10d38:	f7f8 fb16 	bl	9368 <OS_TaskSemPost>
                                  (OS_OPT  )OS_OPT_POST_NONE,
                                  (CPU_TS  )ts,
                                  (OS_ERR *)&err);
#if OS_CFG_TMR_EN > 0u
             OSTmrUpdateCtr--;
   10d3c:	f244 5340 	movw	r3, #17728	; 0x4540
   10d40:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d44:	681b      	ldr	r3, [r3, #0]
   10d46:	f103 32ff 	add.w	r2, r3, #4294967295
   10d4a:	f244 5340 	movw	r3, #17728	; 0x4540
   10d4e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d52:	601a      	str	r2, [r3, #0]
             if (OSTmrUpdateCtr == (OS_CTR)0u) {
   10d54:	f244 5340 	movw	r3, #17728	; 0x4540
   10d58:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d5c:	681b      	ldr	r3, [r3, #0]
   10d5e:	2b00      	cmp	r3, #0
   10d60:	d11a      	bne.n	10d98 <OS_IntQRePost+0x1f8>
                 OSTmrUpdateCtr = OSTmrUpdateCnt;
   10d62:	f244 5330 	movw	r3, #17712	; 0x4530
   10d66:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d6a:	681a      	ldr	r2, [r3, #0]
   10d6c:	f244 5340 	movw	r3, #17728	; 0x4540
   10d70:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d74:	601a      	str	r2, [r3, #0]
                 ts             = OS_TS_GET();                             /* Get timestamp                           */
   10d76:	f7f2 fad1 	bl	331c <CPU_TS_TmrRd>
   10d7a:	60b8      	str	r0, [r7, #8]
                 (void)OS_TaskSemPost((OS_TCB *)&OSTmrTaskTCB,             /* Signal timer task                       */
   10d7c:	f244 1088 	movw	r0, #16776	; 0x4188
   10d80:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d84:	f04f 0100 	mov.w	r1, #0
   10d88:	68ba      	ldr	r2, [r7, #8]
   10d8a:	f107 0306 	add.w	r3, r7, #6
   10d8e:	f7f8 faeb 	bl	9368 <OS_TaskSemPost>
                                      (OS_OPT  )OS_OPT_POST_NONE,
                                      (CPU_TS  )ts,
                                      (OS_ERR *)&err);
             }
#endif
             break;
   10d92:	e001      	b.n	10d98 <OS_IntQRePost+0x1f8>

        default:
             break;
   10d94:	bf00      	nop
   10d96:	e000      	b.n	10d9a <OS_IntQRePost+0x1fa>
                                      (OS_OPT  )OS_OPT_POST_NONE,
                                      (CPU_TS  )ts,
                                      (OS_ERR *)&err);
             }
#endif
             break;
   10d98:	bf00      	nop

        default:
             break;
    }
}
   10d9a:	f107 0728 	add.w	r7, r7, #40	; 0x28
   10d9e:	46bd      	mov	sp, r7
   10da0:	bd80      	pop	{r7, pc}
   10da2:	bf00      	nop

00010da4 <OS_IntQTask>:
* Returns    : none
************************************************************************************************************************
*/

void  OS_IntQTask (void *p_arg)
{
   10da4:	b580      	push	{r7, lr}
   10da6:	b086      	sub	sp, #24
   10da8:	af00      	add	r7, sp, #0
   10daa:	6078      	str	r0, [r7, #4]
    CPU_BOOLEAN  done;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
   10dac:	f04f 0300 	mov.w	r3, #0
   10db0:	613b      	str	r3, [r7, #16]



    p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
    while (DEF_ON) {
        done = DEF_FALSE;
   10db2:	f04f 0300 	mov.w	r3, #0
   10db6:	75fb      	strb	r3, [r7, #23]
        while (done == DEF_FALSE) {
   10db8:	e05f      	b.n	10e7a <OS_IntQTask+0xd6>
            if (OSIntQNbrEntries == (OS_OBJ_QTY)0u) {
   10dba:	f244 533c 	movw	r3, #17724	; 0x453c
   10dbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10dc2:	881b      	ldrh	r3, [r3, #0]
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d128      	bne.n	10e1a <OS_IntQTask+0x76>
                CPU_CRITICAL_ENTER();
   10dc8:	f007 f80c 	bl	17de4 <CPU_SR_Save>
   10dcc:	6138      	str	r0, [r7, #16]
   10dce:	f7f0 fd73 	bl	18b8 <CPU_IntDisMeasStart>
                OSRdyList[0].NbrEntries = (OS_OBJ_QTY)0u;   /* Remove from ready list                                 */
   10dd2:	f643 5364 	movw	r3, #15716	; 0x3d64
   10dd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10dda:	f04f 0200 	mov.w	r2, #0
   10dde:	811a      	strh	r2, [r3, #8]
                OSRdyList[0].HeadPtr    = (OS_TCB   *)0;
   10de0:	f643 5364 	movw	r3, #15716	; 0x3d64
   10de4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10de8:	f04f 0200 	mov.w	r2, #0
   10dec:	601a      	str	r2, [r3, #0]
                OSRdyList[0].TailPtr    = (OS_TCB   *)0;
   10dee:	f643 5364 	movw	r3, #15716	; 0x3d64
   10df2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10df6:	f04f 0200 	mov.w	r2, #0
   10dfa:	605a      	str	r2, [r3, #4]
                OS_PrioRemove(0u);                          /* Remove from the priority table                         */
   10dfc:	f04f 0000 	mov.w	r0, #0
   10e00:	f7f5 f9f8 	bl	61f4 <OS_PrioRemove>
                CPU_CRITICAL_EXIT();
   10e04:	f7f0 fd84 	bl	1910 <CPU_IntDisMeasStop>
   10e08:	6938      	ldr	r0, [r7, #16]
   10e0a:	f006 ffef 	bl	17dec <CPU_SR_Restore>
                OSSched();
   10e0e:	f7fd fc07 	bl	e620 <OSSched>
                done = DEF_TRUE;                            /* No more entries in the queue, we are done              */
   10e12:	f04f 0301 	mov.w	r3, #1
   10e16:	75fb      	strb	r3, [r7, #23]
   10e18:	e02f      	b.n	10e7a <OS_IntQTask+0xd6>
            } else {
                ts_start = OS_TS_GET();
   10e1a:	f7f2 fa7f 	bl	331c <CPU_TS_TmrRd>
   10e1e:	60f8      	str	r0, [r7, #12]
                OS_IntQRePost();
   10e20:	f7ff febe 	bl	10ba0 <OS_IntQRePost>
                ts_end   = OS_TS_GET() - ts_start;          /* Measure execution time of tick task                    */
   10e24:	f7f2 fa7a 	bl	331c <CPU_TS_TmrRd>
   10e28:	4602      	mov	r2, r0
   10e2a:	68fb      	ldr	r3, [r7, #12]
   10e2c:	1ad3      	subs	r3, r2, r3
   10e2e:	60bb      	str	r3, [r7, #8]
                if (ts_end > OSIntQTaskTimeMax) {
   10e30:	f244 1350 	movw	r3, #16720	; 0x4150
   10e34:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e38:	681b      	ldr	r3, [r3, #0]
   10e3a:	68ba      	ldr	r2, [r7, #8]
   10e3c:	429a      	cmp	r2, r3
   10e3e:	d905      	bls.n	10e4c <OS_IntQTask+0xa8>
                    OSIntQTaskTimeMax = ts_end;
   10e40:	f244 1350 	movw	r3, #16720	; 0x4150
   10e44:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e48:	68ba      	ldr	r2, [r7, #8]
   10e4a:	601a      	str	r2, [r3, #0]
                }
                CPU_CRITICAL_ENTER();
   10e4c:	f006 ffca 	bl	17de4 <CPU_SR_Save>
   10e50:	6138      	str	r0, [r7, #16]
   10e52:	f7f0 fd31 	bl	18b8 <CPU_IntDisMeasStart>
                OSIntQNbrEntries--;
   10e56:	f244 533c 	movw	r3, #17724	; 0x453c
   10e5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e5e:	881b      	ldrh	r3, [r3, #0]
   10e60:	f103 33ff 	add.w	r3, r3, #4294967295
   10e64:	b29a      	uxth	r2, r3
   10e66:	f244 533c 	movw	r3, #17724	; 0x453c
   10e6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e6e:	801a      	strh	r2, [r3, #0]
                CPU_CRITICAL_EXIT();
   10e70:	f7f0 fd4e 	bl	1910 <CPU_IntDisMeasStop>
   10e74:	6938      	ldr	r0, [r7, #16]
   10e76:	f006 ffb9 	bl	17dec <CPU_SR_Restore>


    p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
    while (DEF_ON) {
        done = DEF_FALSE;
        while (done == DEF_FALSE) {
   10e7a:	7dfb      	ldrb	r3, [r7, #23]
   10e7c:	2b00      	cmp	r3, #0
   10e7e:	d09c      	beq.n	10dba <OS_IntQTask+0x16>
                CPU_CRITICAL_ENTER();
                OSIntQNbrEntries--;
                CPU_CRITICAL_EXIT();
            }
        }
    }
   10e80:	e797      	b.n	10db2 <OS_IntQTask+0xe>
   10e82:	bf00      	nop

00010e84 <OS_IntQTaskInit>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OS_IntQTaskInit (OS_ERR  *p_err)
{
   10e84:	b580      	push	{r7, lr}
   10e86:	b090      	sub	sp, #64	; 0x40
   10e88:	af0a      	add	r7, sp, #40	; 0x28
   10e8a:	6078      	str	r0, [r7, #4]
    if (p_err == (OS_ERR *)0) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    OSIntQOvfCtr = (OS_QTY)0u;                              /* Clear the ISR queue overflow counter                   */
   10e8c:	f244 4342 	movw	r3, #17474	; 0x4442
   10e90:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e94:	f04f 0200 	mov.w	r2, #0
   10e98:	801a      	strh	r2, [r3, #0]

    if (OSCfg_IntQBasePtr == (OS_INT_Q *)0) {
   10e9a:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10e9e:	f2c0 0302 	movt	r3, #2
   10ea2:	681b      	ldr	r3, [r3, #0]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d104      	bne.n	10eb2 <OS_IntQTaskInit+0x2e>
        *p_err = OS_ERR_INT_Q;
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	f244 6252 	movw	r2, #18002	; 0x4652
   10eae:	801a      	strh	r2, [r3, #0]
        return;
   10eb0:	e0ca      	b.n	11048 <OS_IntQTaskInit+0x1c4>
    }

    if (OSCfg_IntQSize < (OS_OBJ_QTY)2u) {
   10eb2:	f64c 1300 	movw	r3, #51456	; 0xc900
   10eb6:	f2c0 0302 	movt	r3, #2
   10eba:	881b      	ldrh	r3, [r3, #0]
   10ebc:	2b01      	cmp	r3, #1
   10ebe:	d804      	bhi.n	10eca <OS_IntQTaskInit+0x46>
        *p_err = OS_ERR_INT_Q_SIZE;
   10ec0:	687b      	ldr	r3, [r7, #4]
   10ec2:	f244 6254 	movw	r2, #18004	; 0x4654
   10ec6:	801a      	strh	r2, [r3, #0]
        return;
   10ec8:	e0be      	b.n	11048 <OS_IntQTaskInit+0x1c4>
    }

    OSIntQTaskTimeMax = (CPU_TS)0;
   10eca:	f244 1350 	movw	r3, #16720	; 0x4150
   10ece:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ed2:	f04f 0200 	mov.w	r2, #0
   10ed6:	601a      	str	r2, [r3, #0]

    p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
   10ed8:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10edc:	f2c0 0302 	movt	r3, #2
   10ee0:	681b      	ldr	r3, [r3, #0]
   10ee2:	617b      	str	r3, [r7, #20]
    p_int_q_next      = p_int_q;
   10ee4:	697b      	ldr	r3, [r7, #20]
   10ee6:	613b      	str	r3, [r7, #16]
    p_int_q_next++;
   10ee8:	693b      	ldr	r3, [r7, #16]
   10eea:	f103 0320 	add.w	r3, r3, #32
   10eee:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < OSCfg_IntQSize; i++) {
   10ef0:	f04f 0300 	mov.w	r3, #0
   10ef4:	81fb      	strh	r3, [r7, #14]
   10ef6:	e028      	b.n	10f4a <OS_IntQTaskInit+0xc6>
        p_int_q->Type    =  OS_OBJ_TYPE_NONE;
   10ef8:	697a      	ldr	r2, [r7, #20]
   10efa:	f644 734e 	movw	r3, #20302	; 0x4f4e
   10efe:	f2c4 534e 	movt	r3, #17742	; 0x454e
   10f02:	6013      	str	r3, [r2, #0]
        p_int_q->ObjPtr  = (void      *)0;
   10f04:	697b      	ldr	r3, [r7, #20]
   10f06:	f04f 0200 	mov.w	r2, #0
   10f0a:	609a      	str	r2, [r3, #8]
        p_int_q->MsgPtr  = (void      *)0;
   10f0c:	697b      	ldr	r3, [r7, #20]
   10f0e:	f04f 0200 	mov.w	r2, #0
   10f12:	60da      	str	r2, [r3, #12]
        p_int_q->MsgSize = (OS_MSG_SIZE)0u;
   10f14:	697b      	ldr	r3, [r7, #20]
   10f16:	f04f 0200 	mov.w	r2, #0
   10f1a:	821a      	strh	r2, [r3, #16]
        p_int_q->Flags   = (OS_FLAGS   )0u;
   10f1c:	697b      	ldr	r3, [r7, #20]
   10f1e:	f04f 0200 	mov.w	r2, #0
   10f22:	615a      	str	r2, [r3, #20]
        p_int_q->Opt     = (OS_OPT     )0u;
   10f24:	697b      	ldr	r3, [r7, #20]
   10f26:	f04f 0200 	mov.w	r2, #0
   10f2a:	831a      	strh	r2, [r3, #24]
        p_int_q->NextPtr = p_int_q_next;
   10f2c:	697b      	ldr	r3, [r7, #20]
   10f2e:	693a      	ldr	r2, [r7, #16]
   10f30:	605a      	str	r2, [r3, #4]
        p_int_q++;
   10f32:	697b      	ldr	r3, [r7, #20]
   10f34:	f103 0320 	add.w	r3, r3, #32
   10f38:	617b      	str	r3, [r7, #20]
        p_int_q_next++;
   10f3a:	693b      	ldr	r3, [r7, #16]
   10f3c:	f103 0320 	add.w	r3, r3, #32
   10f40:	613b      	str	r3, [r7, #16]
    OSIntQTaskTimeMax = (CPU_TS)0;

    p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
    p_int_q_next      = p_int_q;
    p_int_q_next++;
    for (i = 0u; i < OSCfg_IntQSize; i++) {
   10f42:	89fb      	ldrh	r3, [r7, #14]
   10f44:	f103 0301 	add.w	r3, r3, #1
   10f48:	81fb      	strh	r3, [r7, #14]
   10f4a:	f64c 1300 	movw	r3, #51456	; 0xc900
   10f4e:	f2c0 0302 	movt	r3, #2
   10f52:	881b      	ldrh	r3, [r3, #0]
   10f54:	89fa      	ldrh	r2, [r7, #14]
   10f56:	429a      	cmp	r2, r3
   10f58:	d3ce      	bcc.n	10ef8 <OS_IntQTaskInit+0x74>
        p_int_q->Opt     = (OS_OPT     )0u;
        p_int_q->NextPtr = p_int_q_next;
        p_int_q++;
        p_int_q_next++;
    }
    p_int_q--;
   10f5a:	697b      	ldr	r3, [r7, #20]
   10f5c:	f1a3 0320 	sub.w	r3, r3, #32
   10f60:	617b      	str	r3, [r7, #20]
    p_int_q_next        = OSCfg_IntQBasePtr;
   10f62:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10f66:	f2c0 0302 	movt	r3, #2
   10f6a:	681b      	ldr	r3, [r3, #0]
   10f6c:	613b      	str	r3, [r7, #16]
    p_int_q->NextPtr    = p_int_q_next;
   10f6e:	697b      	ldr	r3, [r7, #20]
   10f70:	693a      	ldr	r2, [r7, #16]
   10f72:	605a      	str	r2, [r3, #4]
    OSIntQInPtr         = p_int_q_next;
   10f74:	f244 0364 	movw	r3, #16484	; 0x4064
   10f78:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f7c:	693a      	ldr	r2, [r7, #16]
   10f7e:	601a      	str	r2, [r3, #0]
    OSIntQOutPtr        = p_int_q_next;
   10f80:	f244 2360 	movw	r3, #16992	; 0x4260
   10f84:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f88:	693a      	ldr	r2, [r7, #16]
   10f8a:	601a      	str	r2, [r3, #0]
    OSIntQNbrEntries    = (OS_OBJ_QTY)0u;
   10f8c:	f244 533c 	movw	r3, #17724	; 0x453c
   10f90:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f94:	f04f 0200 	mov.w	r2, #0
   10f98:	801a      	strh	r2, [r3, #0]
    OSIntQMaxNbrEntries = (OS_OBJ_QTY)0u;
   10f9a:	f244 0370 	movw	r3, #16496	; 0x4070
   10f9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10fa2:	f04f 0200 	mov.w	r2, #0
   10fa6:	801a      	strh	r2, [r3, #0]

                                                            /* -------------- CREATE THE ISR QUEUE TASK ------------- */
    if (OSCfg_IntQTaskStkBasePtr == (CPU_STK *)0) {
   10fa8:	f64c 1308 	movw	r3, #51464	; 0xc908
   10fac:	f2c0 0302 	movt	r3, #2
   10fb0:	681b      	ldr	r3, [r3, #0]
   10fb2:	2b00      	cmp	r3, #0
   10fb4:	d104      	bne.n	10fc0 <OS_IntQTaskInit+0x13c>
        *p_err = OS_ERR_STK_INVALID;
   10fb6:	687b      	ldr	r3, [r7, #4]
   10fb8:	f646 622c 	movw	r2, #28204	; 0x6e2c
   10fbc:	801a      	strh	r2, [r3, #0]
        return;
   10fbe:	e043      	b.n	11048 <OS_IntQTaskInit+0x1c4>
    }

    if (OSCfg_IntQTaskStkSize < OSCfg_StkSizeMin) {
   10fc0:	f64c 1310 	movw	r3, #51472	; 0xc910
   10fc4:	f2c0 0302 	movt	r3, #2
   10fc8:	681a      	ldr	r2, [r3, #0]
   10fca:	f64c 1348 	movw	r3, #51528	; 0xc948
   10fce:	f2c0 0302 	movt	r3, #2
   10fd2:	681b      	ldr	r3, [r3, #0]
   10fd4:	429a      	cmp	r2, r3
   10fd6:	d204      	bcs.n	10fe2 <OS_IntQTaskInit+0x15e>
        *p_err = OS_ERR_STK_SIZE_INVALID;
   10fd8:	687b      	ldr	r3, [r7, #4]
   10fda:	f646 622d 	movw	r2, #28205	; 0x6e2d
   10fde:	801a      	strh	r2, [r3, #0]
        return;
   10fe0:	e032      	b.n	11048 <OS_IntQTaskInit+0x1c4>
    }

    OSTaskCreate((OS_TCB     *)&OSIntQTaskTCB,
   10fe2:	f64c 1308 	movw	r3, #51464	; 0xc908
   10fe6:	f2c0 0302 	movt	r3, #2
   10fea:	6819      	ldr	r1, [r3, #0]
   10fec:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10ff0:	f2c0 0302 	movt	r3, #2
   10ff4:	681a      	ldr	r2, [r3, #0]
   10ff6:	f64c 1310 	movw	r3, #51472	; 0xc910
   10ffa:	f2c0 0302 	movt	r3, #2
   10ffe:	681b      	ldr	r3, [r3, #0]
   11000:	f04f 0000 	mov.w	r0, #0
   11004:	9000      	str	r0, [sp, #0]
   11006:	9101      	str	r1, [sp, #4]
   11008:	9202      	str	r2, [sp, #8]
   1100a:	9303      	str	r3, [sp, #12]
   1100c:	f04f 0300 	mov.w	r3, #0
   11010:	9304      	str	r3, [sp, #16]
   11012:	f04f 0300 	mov.w	r3, #0
   11016:	9305      	str	r3, [sp, #20]
   11018:	f04f 0300 	mov.w	r3, #0
   1101c:	9306      	str	r3, [sp, #24]
   1101e:	f04f 0303 	mov.w	r3, #3
   11022:	9307      	str	r3, [sp, #28]
   11024:	687b      	ldr	r3, [r7, #4]
   11026:	9308      	str	r3, [sp, #32]
   11028:	f244 3040 	movw	r0, #17216	; 0x4340
   1102c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11030:	f64c 3150 	movw	r1, #52048	; 0xcb50
   11034:	f2c0 0102 	movt	r1, #2
   11038:	f640 52a5 	movw	r2, #3493	; 0xda5
   1103c:	f2c0 0201 	movt	r2, #1
   11040:	f04f 0300 	mov.w	r3, #0
   11044:	f7f6 fb18 	bl	7678 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
   11048:	f107 0718 	add.w	r7, r7, #24
   1104c:	46bd      	mov	sp, r7
   1104e:	bd80      	pop	{r7, pc}

00011050 <App_OS_SetAllHooks>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_SetAllHooks (void)
{
   11050:	b580      	push	{r7, lr}
   11052:	b082      	sub	sp, #8
   11054:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    CPU_SR_ALLOC();
   11056:	f04f 0300 	mov.w	r3, #0
   1105a:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
   1105c:	f006 fec2 	bl	17de4 <CPU_SR_Save>
   11060:	6078      	str	r0, [r7, #4]
   11062:	f7f0 fc29 	bl	18b8 <CPU_IntDisMeasStart>
    OS_AppTaskCreateHookPtr = App_OS_TaskCreateHook;
   11066:	f244 0374 	movw	r3, #16500	; 0x4074
   1106a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1106e:	f241 1285 	movw	r2, #4485	; 0x1185
   11072:	f2c0 0201 	movt	r2, #1
   11076:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = App_OS_TaskDelHook;
   11078:	f244 1374 	movw	r3, #16756	; 0x4174
   1107c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11080:	f241 1299 	movw	r2, #4505	; 0x1199
   11084:	f2c0 0201 	movt	r2, #1
   11088:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = App_OS_TaskReturnHook;
   1108a:	f643 5354 	movw	r3, #15700	; 0x3d54
   1108e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11092:	f241 12ad 	movw	r2, #4525	; 0x11ad
   11096:	f2c0 0201 	movt	r2, #1
   1109a:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = App_OS_IdleTaskHook;
   1109c:	f244 431c 	movw	r3, #17436	; 0x441c
   110a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   110a4:	f241 12c1 	movw	r2, #4545	; 0x11c1
   110a8:	f2c0 0201 	movt	r2, #1
   110ac:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = App_OS_StatTaskHook;
   110ae:	f244 433c 	movw	r3, #17468	; 0x443c
   110b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   110b6:	f241 12d9 	movw	r2, #4569	; 0x11d9
   110ba:	f2c0 0201 	movt	r2, #1
   110be:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = App_OS_TaskSwHook;
   110c0:	f244 4328 	movw	r3, #17448	; 0x4428
   110c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   110c8:	f241 12e5 	movw	r2, #4581	; 0x11e5
   110cc:	f2c0 0201 	movt	r2, #1
   110d0:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = App_OS_TimeTickHook;
   110d2:	f244 1378 	movw	r3, #16760	; 0x4178
   110d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   110da:	f241 12f1 	movw	r2, #4593	; 0x11f1
   110de:	f2c0 0201 	movt	r2, #1
   110e2:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   110e4:	f7f0 fc14 	bl	1910 <CPU_IntDisMeasStop>
   110e8:	6878      	ldr	r0, [r7, #4]
   110ea:	f006 fe7f 	bl	17dec <CPU_SR_Restore>
#endif
}
   110ee:	f107 0708 	add.w	r7, r7, #8
   110f2:	46bd      	mov	sp, r7
   110f4:	bd80      	pop	{r7, pc}
   110f6:	bf00      	nop

000110f8 <App_OS_ClrAllHooks>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_ClrAllHooks (void)
{
   110f8:	b580      	push	{r7, lr}
   110fa:	b082      	sub	sp, #8
   110fc:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    CPU_SR_ALLOC();
   110fe:	f04f 0300 	mov.w	r3, #0
   11102:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
   11104:	f006 fe6e 	bl	17de4 <CPU_SR_Save>
   11108:	6078      	str	r0, [r7, #4]
   1110a:	f7f0 fbd5 	bl	18b8 <CPU_IntDisMeasStart>
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB)0;
   1110e:	f244 0374 	movw	r3, #16500	; 0x4074
   11112:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11116:	f04f 0200 	mov.w	r2, #0
   1111a:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB)0;
   1111c:	f244 1374 	movw	r3, #16756	; 0x4174
   11120:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11124:	f04f 0200 	mov.w	r2, #0
   11128:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB)0;
   1112a:	f643 5354 	movw	r3, #15700	; 0x3d54
   1112e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11132:	f04f 0200 	mov.w	r2, #0
   11136:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
   11138:	f244 431c 	movw	r3, #17436	; 0x441c
   1113c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11140:	f04f 0200 	mov.w	r2, #0
   11144:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
   11146:	f244 433c 	movw	r3, #17468	; 0x443c
   1114a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1114e:	f04f 0200 	mov.w	r2, #0
   11152:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
   11154:	f244 4328 	movw	r3, #17448	; 0x4428
   11158:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1115c:	f04f 0200 	mov.w	r2, #0
   11160:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
   11162:	f244 1378 	movw	r3, #16760	; 0x4178
   11166:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1116a:	f04f 0200 	mov.w	r2, #0
   1116e:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   11170:	f7f0 fbce 	bl	1910 <CPU_IntDisMeasStop>
   11174:	6878      	ldr	r0, [r7, #4]
   11176:	f006 fe39 	bl	17dec <CPU_SR_Restore>
#endif
}
   1117a:	f107 0708 	add.w	r7, r7, #8
   1117e:	46bd      	mov	sp, r7
   11180:	bd80      	pop	{r7, pc}
   11182:	bf00      	nop

00011184 <App_OS_TaskCreateHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_TaskCreateHook (OS_TCB  *p_tcb)
{
   11184:	b480      	push	{r7}
   11186:	b083      	sub	sp, #12
   11188:	af00      	add	r7, sp, #0
   1118a:	6078      	str	r0, [r7, #4]
    (void)&p_tcb;
}
   1118c:	f107 070c 	add.w	r7, r7, #12
   11190:	46bd      	mov	sp, r7
   11192:	bc80      	pop	{r7}
   11194:	4770      	bx	lr
   11196:	bf00      	nop

00011198 <App_OS_TaskDelHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_TaskDelHook (OS_TCB  *p_tcb)
{
   11198:	b480      	push	{r7}
   1119a:	b083      	sub	sp, #12
   1119c:	af00      	add	r7, sp, #0
   1119e:	6078      	str	r0, [r7, #4]
    (void)&p_tcb;
}
   111a0:	f107 070c 	add.w	r7, r7, #12
   111a4:	46bd      	mov	sp, r7
   111a6:	bc80      	pop	{r7}
   111a8:	4770      	bx	lr
   111aa:	bf00      	nop

000111ac <App_OS_TaskReturnHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_TaskReturnHook (OS_TCB  *p_tcb)
{
   111ac:	b480      	push	{r7}
   111ae:	b083      	sub	sp, #12
   111b0:	af00      	add	r7, sp, #0
   111b2:	6078      	str	r0, [r7, #4]
    (void)&p_tcb;
}
   111b4:	f107 070c 	add.w	r7, r7, #12
   111b8:	46bd      	mov	sp, r7
   111ba:	bc80      	pop	{r7}
   111bc:	4770      	bx	lr
   111be:	bf00      	nop

000111c0 <App_OS_IdleTaskHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_IdleTaskHook (void)
{
   111c0:	b480      	push	{r7}
   111c2:	af00      	add	r7, sp, #0

}
   111c4:	46bd      	mov	sp, r7
   111c6:	bc80      	pop	{r7}
   111c8:	4770      	bx	lr
   111ca:	bf00      	nop

000111cc <App_OS_InitHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_InitHook (void)
{
   111cc:	b480      	push	{r7}
   111ce:	af00      	add	r7, sp, #0

}
   111d0:	46bd      	mov	sp, r7
   111d2:	bc80      	pop	{r7}
   111d4:	4770      	bx	lr
   111d6:	bf00      	nop

000111d8 <App_OS_StatTaskHook>:
* Note(s)    : none
************************************************************************************************************************
*/

void  App_OS_StatTaskHook (void)
{
   111d8:	b480      	push	{r7}
   111da:	af00      	add	r7, sp, #0

}
   111dc:	46bd      	mov	sp, r7
   111de:	bc80      	pop	{r7}
   111e0:	4770      	bx	lr
   111e2:	bf00      	nop

000111e4 <App_OS_TaskSwHook>:
*                 (i.e. the preempted task).
************************************************************************************************************************
*/

void  App_OS_TaskSwHook (void)
{
   111e4:	b480      	push	{r7}
   111e6:	af00      	add	r7, sp, #0

}
   111e8:	46bd      	mov	sp, r7
   111ea:	bc80      	pop	{r7}
   111ec:	4770      	bx	lr
   111ee:	bf00      	nop

000111f0 <App_OS_TimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
************************************************************************************************************************
*/

void  App_OS_TimeTickHook (void)
{
   111f0:	b480      	push	{r7}
   111f2:	af00      	add	r7, sp, #0

}
   111f4:	46bd      	mov	sp, r7
   111f6:	bc80      	pop	{r7}
   111f8:	4770      	bx	lr
   111fa:	bf00      	nop

000111fc <os_serial_pincfg>:
 */

#include <os_serial_lite.h>


int os_serial_pincfg(uint8_t dev) {
   111fc:	b580      	push	{r7, lr}
   111fe:	b084      	sub	sp, #16
   11200:	af00      	add	r7, sp, #0
   11202:	4603      	mov	r3, r0
   11204:	71fb      	strb	r3, [r7, #7]

	PINSEL_CFG_Type PINSEL_InitStruct;

	if(dev == 0) {
   11206:	79fb      	ldrb	r3, [r7, #7]
   11208:	2b00      	cmp	r3, #0
   1120a:	d11e      	bne.n	1124a <os_serial_pincfg+0x4e>

		PINSEL_InitStruct.Funcnum=PINSEL_FUNC_1;/*alternative function*/
   1120c:	f04f 0301 	mov.w	r3, #1
   11210:	72bb      	strb	r3, [r7, #10]
		PINSEL_InitStruct.OpenDrain=PINSEL_PINMODE_NORMAL;
   11212:	f04f 0300 	mov.w	r3, #0
   11216:	733b      	strb	r3, [r7, #12]
		PINSEL_InitStruct.Pinmode=PINSEL_PINMODE_TRISTATE;
   11218:	f04f 0302 	mov.w	r3, #2
   1121c:	72fb      	strb	r3, [r7, #11]
		PINSEL_InitStruct.Pinnum=PINSEL_PIN_2; /*UART0 TXD*/
   1121e:	f04f 0302 	mov.w	r3, #2
   11222:	727b      	strb	r3, [r7, #9]
		PINSEL_InitStruct.Portnum=PINSEL_PORT_0;
   11224:	f04f 0300 	mov.w	r3, #0
   11228:	723b      	strb	r3, [r7, #8]

		PINSEL_ConfigPin(&PINSEL_InitStruct);
   1122a:	f107 0308 	add.w	r3, r7, #8
   1122e:	4618      	mov	r0, r3
   11230:	f001 fd50 	bl	12cd4 <PINSEL_ConfigPin>

		PINSEL_InitStruct.Pinnum=PINSEL_PIN_3; /*UART0 RXD*/
   11234:	f04f 0303 	mov.w	r3, #3
   11238:	727b      	strb	r3, [r7, #9]

		PINSEL_ConfigPin(&PINSEL_InitStruct);
   1123a:	f107 0308 	add.w	r3, r7, #8
   1123e:	4618      	mov	r0, r3
   11240:	f001 fd48 	bl	12cd4 <PINSEL_ConfigPin>

		return 0;
   11244:	f04f 0300 	mov.w	r3, #0
   11248:	e023      	b.n	11292 <os_serial_pincfg+0x96>

	} else if (dev == 1) {
   1124a:	79fb      	ldrb	r3, [r7, #7]
   1124c:	2b01      	cmp	r3, #1
   1124e:	d11e      	bne.n	1128e <os_serial_pincfg+0x92>

		PINSEL_InitStruct.Funcnum=PINSEL_FUNC_1;/*alternative function*/
   11250:	f04f 0301 	mov.w	r3, #1
   11254:	72bb      	strb	r3, [r7, #10]
		PINSEL_InitStruct.OpenDrain=PINSEL_PINMODE_NORMAL;
   11256:	f04f 0300 	mov.w	r3, #0
   1125a:	733b      	strb	r3, [r7, #12]
		PINSEL_InitStruct.Pinmode=PINSEL_PINMODE_TRISTATE;
   1125c:	f04f 0302 	mov.w	r3, #2
   11260:	72fb      	strb	r3, [r7, #11]
		PINSEL_InitStruct.Pinnum=PINSEL_PIN_15; /*UART1 TXD*/
   11262:	f04f 030f 	mov.w	r3, #15
   11266:	727b      	strb	r3, [r7, #9]
		PINSEL_InitStruct.Portnum=PINSEL_PORT_0;
   11268:	f04f 0300 	mov.w	r3, #0
   1126c:	723b      	strb	r3, [r7, #8]

		PINSEL_ConfigPin(&PINSEL_InitStruct);
   1126e:	f107 0308 	add.w	r3, r7, #8
   11272:	4618      	mov	r0, r3
   11274:	f001 fd2e 	bl	12cd4 <PINSEL_ConfigPin>

		PINSEL_InitStruct.Pinnum=PINSEL_PIN_16; /*UART1 RXD*/
   11278:	f04f 0310 	mov.w	r3, #16
   1127c:	727b      	strb	r3, [r7, #9]

		PINSEL_ConfigPin(&PINSEL_InitStruct);
   1127e:	f107 0308 	add.w	r3, r7, #8
   11282:	4618      	mov	r0, r3
   11284:	f001 fd26 	bl	12cd4 <PINSEL_ConfigPin>


		return 0;
   11288:	f04f 0300 	mov.w	r3, #0
   1128c:	e001      	b.n	11292 <os_serial_pincfg+0x96>
	} else {

		return -1;
   1128e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
   11292:	4618      	mov	r0, r3
   11294:	f107 0710 	add.w	r7, r7, #16
   11298:	46bd      	mov	sp, r7
   1129a:	bd80      	pop	{r7, pc}

0001129c <os_serial_lite_tx_enable>:

int os_serial_lite_tx_enable(uint8_t dev) {
   1129c:	b480      	push	{r7}
   1129e:	b085      	sub	sp, #20
   112a0:	af00      	add	r7, sp, #0
   112a2:	4603      	mov	r3, r0
   112a4:	71fb      	strb	r3, [r7, #7]

	int ret = 0;
   112a6:	f04f 0300 	mov.w	r3, #0
   112aa:	60fb      	str	r3, [r7, #12]

	switch(dev) {
   112ac:	79fb      	ldrb	r3, [r7, #7]
   112ae:	2b00      	cmp	r3, #0
   112b0:	d002      	beq.n	112b8 <os_serial_lite_tx_enable+0x1c>
   112b2:	2b01      	cmp	r3, #1
   112b4:	d014      	beq.n	112e0 <os_serial_lite_tx_enable+0x44>
   112b6:	e027      	b.n	11308 <os_serial_lite_tx_enable+0x6c>

	case 0:
		LPC_UART0->TER |= (1<<7);
   112b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   112bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
   112c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   112c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
   112c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   112cc:	b2d2      	uxtb	r2, r2
   112ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
   112d2:	b2d2      	uxtb	r2, r2
   112d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ret = 0;
   112d8:	f04f 0300 	mov.w	r3, #0
   112dc:	60fb      	str	r3, [r7, #12]
		break;
   112de:	e017      	b.n	11310 <os_serial_lite_tx_enable+0x74>
	case 1:
		LPC_UART1->TER |= (1<<7);
   112e0:	f04f 0300 	mov.w	r3, #0
   112e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   112e8:	f04f 0200 	mov.w	r2, #0
   112ec:	f2c4 0201 	movt	r2, #16385	; 0x4001
   112f0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   112f4:	b2d2      	uxtb	r2, r2
   112f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   112fa:	b2d2      	uxtb	r2, r2
   112fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ret = 0;
   11300:	f04f 0300 	mov.w	r3, #0
   11304:	60fb      	str	r3, [r7, #12]
		break;
   11306:	e003      	b.n	11310 <os_serial_lite_tx_enable+0x74>

	default:
		ret = -1;
   11308:	f04f 33ff 	mov.w	r3, #4294967295
   1130c:	60fb      	str	r3, [r7, #12]
		break;
   1130e:	bf00      	nop
	};

	return ret;
   11310:	68fb      	ldr	r3, [r7, #12]
}
   11312:	4618      	mov	r0, r3
   11314:	f107 0714 	add.w	r7, r7, #20
   11318:	46bd      	mov	sp, r7
   1131a:	bc80      	pop	{r7}
   1131c:	4770      	bx	lr
   1131e:	bf00      	nop

00011320 <os_serial_lite_init>:

int os_serial_lite_init(uint8_t dev, UART_CFG_Type *cfg) {
   11320:	b580      	push	{r7, lr}
   11322:	b086      	sub	sp, #24
   11324:	af00      	add	r7, sp, #0
   11326:	4603      	mov	r3, r0
   11328:	6039      	str	r1, [r7, #0]
   1132a:	71fb      	strb	r3, [r7, #7]

	UART_CFG_Type uart_cfg;
	int ret = 0;;
   1132c:	f04f 0300 	mov.w	r3, #0
   11330:	617b      	str	r3, [r7, #20]

	if((cfg != NULL) && (dev != 0)) {
   11332:	683b      	ldr	r3, [r7, #0]
   11334:	2b00      	cmp	r3, #0
   11336:	d009      	beq.n	1134c <os_serial_lite_init+0x2c>
   11338:	79fb      	ldrb	r3, [r7, #7]
   1133a:	2b00      	cmp	r3, #0
   1133c:	d006      	beq.n	1134c <os_serial_lite_init+0x2c>
		/*user configuration*/
		(void)memcpy(&uart_cfg,cfg,sizeof(UART_CFG_Type));
   1133e:	683a      	ldr	r2, [r7, #0]
   11340:	f107 030c 	add.w	r3, r7, #12
   11344:	6810      	ldr	r0, [r2, #0]
   11346:	6851      	ldr	r1, [r2, #4]
   11348:	c303      	stmia	r3!, {r0, r1}
   1134a:	e00b      	b.n	11364 <os_serial_lite_init+0x44>
	} else {
		/*default configuration*/
		uart_cfg.Baud_rate = 115200;
   1134c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   11350:	60fb      	str	r3, [r7, #12]
		uart_cfg.Parity = UART_PARITY_NONE;
   11352:	f04f 0300 	mov.w	r3, #0
   11356:	743b      	strb	r3, [r7, #16]
		uart_cfg.Stopbits = UART_STOPBIT_1;
   11358:	f04f 0300 	mov.w	r3, #0
   1135c:	74bb      	strb	r3, [r7, #18]
		uart_cfg.Databits = UART_DATABIT_8;
   1135e:	f04f 0303 	mov.w	r3, #3
   11362:	747b      	strb	r3, [r7, #17]

	}

	switch(dev) {
   11364:	79fb      	ldrb	r3, [r7, #7]
   11366:	2b00      	cmp	r3, #0
   11368:	d002      	beq.n	11370 <os_serial_lite_init+0x50>
   1136a:	2b01      	cmp	r3, #1
   1136c:	d015      	beq.n	1139a <os_serial_lite_init+0x7a>
   1136e:	e029      	b.n	113c4 <os_serial_lite_init+0xa4>

	case 0:
		os_serial_pincfg(0);
   11370:	f04f 0000 	mov.w	r0, #0
   11374:	f7ff ff42 	bl	111fc <os_serial_pincfg>
		UART_Init(LPC_UART0, &uart_cfg);
   11378:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   1137c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   11380:	f107 030c 	add.w	r3, r7, #12
   11384:	4619      	mov	r1, r3
   11386:	f003 f867 	bl	14458 <UART_Init>
		os_serial_lite_tx_enable(0);
   1138a:	f04f 0000 	mov.w	r0, #0
   1138e:	f7ff ff85 	bl	1129c <os_serial_lite_tx_enable>
				                   (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_00,
				                   (CPU_FNCT_PTR  )UART_Interrupt,
				                   (void         *)&com_context);
		CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_00);/*enable uart interrupt*/
#endif /*_INTERRUPT_DRIVEN*/
		ret = 0;
   11392:	f04f 0300 	mov.w	r3, #0
   11396:	617b      	str	r3, [r7, #20]
		break;
   11398:	e018      	b.n	113cc <os_serial_lite_init+0xac>

	case 1:
		os_serial_pincfg(1);
   1139a:	f04f 0001 	mov.w	r0, #1
   1139e:	f7ff ff2d 	bl	111fc <os_serial_pincfg>
		UART_Init((LPC_UART_TypeDef *)LPC_UART1, &uart_cfg);
   113a2:	f04f 0000 	mov.w	r0, #0
   113a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   113aa:	f107 030c 	add.w	r3, r7, #12
   113ae:	4619      	mov	r1, r3
   113b0:	f003 f852 	bl	14458 <UART_Init>
		os_serial_lite_tx_enable(1);
   113b4:	f04f 0001 	mov.w	r0, #1
   113b8:	f7ff ff70 	bl	1129c <os_serial_lite_tx_enable>
						                   (CSP_DEV_NBR   )CSP_INT_SRC_NBR_UART_01,
						                   (CPU_FNCT_PTR  )UART_Interrupt,
						                   (void         *)&com_context);
		CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_UART_01);/*enable uart interrupt*/
#endif /*_INTERRUPT_DRIVEN*/
		ret = 0;
   113bc:	f04f 0300 	mov.w	r3, #0
   113c0:	617b      	str	r3, [r7, #20]
		break;
   113c2:	e003      	b.n	113cc <os_serial_lite_init+0xac>

	default:
		ret = -1;
   113c4:	f04f 33ff 	mov.w	r3, #4294967295
   113c8:	617b      	str	r3, [r7, #20]
		break;
   113ca:	bf00      	nop

	};

	return ret;
   113cc:	697b      	ldr	r3, [r7, #20]

}
   113ce:	4618      	mov	r0, r3
   113d0:	f107 0718 	add.w	r7, r7, #24
   113d4:	46bd      	mov	sp, r7
   113d6:	bd80      	pop	{r7, pc}

000113d8 <os_serial_sync_send>:

int os_serial_sync_send(uint8_t dev, char *buf, uint16_t len) {
   113d8:	b580      	push	{r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	6039      	str	r1, [r7, #0]
   113e0:	4613      	mov	r3, r2
   113e2:	4602      	mov	r2, r0
   113e4:	71fa      	strb	r2, [r7, #7]
   113e6:	80bb      	strh	r3, [r7, #4]

	/*hand over pointers to communication structure*/
	com_context.tx_i = 0;
   113e8:	f643 13dc 	movw	r3, #14812	; 0x39dc
   113ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   113f0:	f04f 0200 	mov.w	r2, #0
   113f4:	80da      	strh	r2, [r3, #6]
	com_context.tx_ptr = buf;
   113f6:	f643 13dc 	movw	r3, #14812	; 0x39dc
   113fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   113fe:	683a      	ldr	r2, [r7, #0]
   11400:	601a      	str	r2, [r3, #0]
	com_context.tx_len = len;
   11402:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11406:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1140a:	88ba      	ldrh	r2, [r7, #4]
   1140c:	809a      	strh	r2, [r3, #4]

	/*start transmission*/
	if(dev == 0) {
   1140e:	79fb      	ldrb	r3, [r7, #7]
   11410:	2b00      	cmp	r3, #0
   11412:	d147      	bne.n	114a4 <os_serial_sync_send+0xcc>
		if(com_context.tx_len > LPC1343_BUFMAX)
   11414:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11418:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1141c:	889b      	ldrh	r3, [r3, #4]
   1141e:	2b1e      	cmp	r3, #30
   11420:	d932      	bls.n	11488 <os_serial_sync_send+0xb0>
			com_context.tx_len = LPC1343_BUFMAX;
   11422:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11426:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1142a:	f04f 021e 	mov.w	r2, #30
   1142e:	809a      	strh	r2, [r3, #4]

			while(com_context.tx_i < com_context.tx_len) {
   11430:	e02a      	b.n	11488 <os_serial_sync_send+0xb0>
				while(UART_CheckBusy(LPC_UART0));
   11432:	bf00      	nop
   11434:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   11438:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1143c:	f003 fb66 	bl	14b0c <UART_CheckBusy>
   11440:	4603      	mov	r3, r0
   11442:	2b00      	cmp	r3, #0
   11444:	d1f6      	bne.n	11434 <os_serial_sync_send+0x5c>
				UART_SendByte(LPC_UART0,(uint8_t)com_context.tx_ptr[com_context.tx_i]);
   11446:	f643 13dc 	movw	r3, #14812	; 0x39dc
   1144a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1144e:	681a      	ldr	r2, [r3, #0]
   11450:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11454:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11458:	88db      	ldrh	r3, [r3, #6]
   1145a:	18d3      	adds	r3, r2, r3
   1145c:	781b      	ldrb	r3, [r3, #0]
   1145e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   11462:	f2c4 0000 	movt	r0, #16384	; 0x4000
   11466:	4619      	mov	r1, r3
   11468:	f003 f96a 	bl	14740 <UART_SendByte>
				com_context.tx_i++;
   1146c:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11470:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11474:	88db      	ldrh	r3, [r3, #6]
   11476:	f103 0301 	add.w	r3, r3, #1
   1147a:	b29a      	uxth	r2, r3
   1147c:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11480:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11484:	80da      	strh	r2, [r3, #6]
   11486:	e000      	b.n	1148a <os_serial_sync_send+0xb2>
	/*start transmission*/
	if(dev == 0) {
		if(com_context.tx_len > LPC1343_BUFMAX)
			com_context.tx_len = LPC1343_BUFMAX;

			while(com_context.tx_i < com_context.tx_len) {
   11488:	bf00      	nop
   1148a:	f643 13dc 	movw	r3, #14812	; 0x39dc
   1148e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11492:	88da      	ldrh	r2, [r3, #6]
   11494:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11498:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1149c:	889b      	ldrh	r3, [r3, #4]
   1149e:	429a      	cmp	r2, r3
   114a0:	d3c7      	bcc.n	11432 <os_serial_sync_send+0x5a>
   114a2:	e03d      	b.n	11520 <os_serial_sync_send+0x148>
				while(UART_CheckBusy(LPC_UART0));
				UART_SendByte(LPC_UART0,(uint8_t)com_context.tx_ptr[com_context.tx_i]);
				com_context.tx_i++;
			}

		} else if(dev == 1) {
   114a4:	79fb      	ldrb	r3, [r7, #7]
   114a6:	2b01      	cmp	r3, #1
   114a8:	d137      	bne.n	1151a <os_serial_sync_send+0x142>

			while(com_context.tx_i < com_context.tx_len) {
   114aa:	e029      	b.n	11500 <os_serial_sync_send+0x128>
				while(UART_CheckBusy((LPC_UART_TypeDef *)LPC_UART1));
   114ac:	bf00      	nop
   114ae:	f04f 0000 	mov.w	r0, #0
   114b2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   114b6:	f003 fb29 	bl	14b0c <UART_CheckBusy>
   114ba:	4603      	mov	r3, r0
   114bc:	2b00      	cmp	r3, #0
   114be:	d1f6      	bne.n	114ae <os_serial_sync_send+0xd6>
				UART_SendByte((LPC_UART_TypeDef *)LPC_UART1,(uint8_t)com_context.tx_ptr[com_context.tx_i]);
   114c0:	f643 13dc 	movw	r3, #14812	; 0x39dc
   114c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   114c8:	681a      	ldr	r2, [r3, #0]
   114ca:	f643 13dc 	movw	r3, #14812	; 0x39dc
   114ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
   114d2:	88db      	ldrh	r3, [r3, #6]
   114d4:	18d3      	adds	r3, r2, r3
   114d6:	781b      	ldrb	r3, [r3, #0]
   114d8:	f04f 0000 	mov.w	r0, #0
   114dc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   114e0:	4619      	mov	r1, r3
   114e2:	f003 f92d 	bl	14740 <UART_SendByte>
				com_context.tx_i++;
   114e6:	f643 13dc 	movw	r3, #14812	; 0x39dc
   114ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
   114ee:	88db      	ldrh	r3, [r3, #6]
   114f0:	f103 0301 	add.w	r3, r3, #1
   114f4:	b29a      	uxth	r2, r3
   114f6:	f643 13dc 	movw	r3, #14812	; 0x39dc
   114fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   114fe:	80da      	strh	r2, [r3, #6]
				com_context.tx_i++;
			}

		} else if(dev == 1) {

			while(com_context.tx_i < com_context.tx_len) {
   11500:	f643 13dc 	movw	r3, #14812	; 0x39dc
   11504:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11508:	88da      	ldrh	r2, [r3, #6]
   1150a:	f643 13dc 	movw	r3, #14812	; 0x39dc
   1150e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11512:	889b      	ldrh	r3, [r3, #4]
   11514:	429a      	cmp	r2, r3
   11516:	d3c9      	bcc.n	114ac <os_serial_sync_send+0xd4>
   11518:	e002      	b.n	11520 <os_serial_sync_send+0x148>
				UART_SendByte((LPC_UART_TypeDef *)LPC_UART1,(uint8_t)com_context.tx_ptr[com_context.tx_i]);
				com_context.tx_i++;
			}

		} else {
			return -2;
   1151a:	f06f 0301 	mvn.w	r3, #1
   1151e:	e001      	b.n	11524 <os_serial_sync_send+0x14c>
		}

		return 0;
   11520:	f04f 0300 	mov.w	r3, #0

}
   11524:	4618      	mov	r0, r3
   11526:	f107 0708 	add.w	r7, r7, #8
   1152a:	46bd      	mov	sp, r7
   1152c:	bd80      	pop	{r7, pc}
   1152e:	bf00      	nop

00011530 <os_serial_async_send>:

int os_serial_async_send(uint8_t dev, char *buf, uint16_t len) {
   11530:	b480      	push	{r7}
   11532:	b083      	sub	sp, #12
   11534:	af00      	add	r7, sp, #0
   11536:	6039      	str	r1, [r7, #0]
   11538:	4613      	mov	r3, r2
   1153a:	4602      	mov	r2, r0
   1153c:	71fa      	strb	r2, [r7, #7]
   1153e:	80bb      	strh	r3, [r7, #4]
		return -2;
	}

#endif /*_INTERRUPT_DRIVEN*/

	return 0;
   11540:	f04f 0300 	mov.w	r3, #0
}
   11544:	4618      	mov	r0, r3
   11546:	f107 070c 	add.w	r7, r7, #12
   1154a:	46bd      	mov	sp, r7
   1154c:	bc80      	pop	{r7}
   1154e:	4770      	bx	lr

00011550 <UART_Interrupt>:


static void  UART_Interrupt(void *p_arg) {
   11550:	b580      	push	{r7, lr}
   11552:	b086      	sub	sp, #24
   11554:	af00      	add	r7, sp, #0
   11556:	6078      	str	r0, [r7, #4]

	uart_context_t *cont = (uart_context_t *)p_arg;
   11558:	687b      	ldr	r3, [r7, #4]
   1155a:	617b      	str	r3, [r7, #20]

	/* which uart triggered the interrupt?
	 *
	 * bit0 in IIR register is 0 if an interrupt occured on the device
	 * */
	reg0 = UART_GetIntId(LPC_UART0);
   1155c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   11560:	f2c4 0000 	movt	r0, #16384	; 0x4000
   11564:	f003 fac2 	bl	14aec <UART_GetIntId>
   11568:	6138      	str	r0, [r7, #16]
	reg1 = UART_GetIntId((LPC_UART_TypeDef *)LPC_UART1);
   1156a:	f04f 0000 	mov.w	r0, #0
   1156e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11572:	f003 fabb 	bl	14aec <UART_GetIntId>
   11576:	60f8      	str	r0, [r7, #12]

	if(!(reg0 & 0x01)) {
   11578:	693b      	ldr	r3, [r7, #16]
   1157a:	f003 0301 	and.w	r3, r3, #1
   1157e:	2b00      	cmp	r3, #0
   11580:	d12a      	bne.n	115d8 <UART_Interrupt+0x88>
		//reg = UART_GetIntId(LPC_UART0);//read from IIR acknowledges interrupt
		//check if this really is a THRE interrupt
		if(reg0 & ((1<<1) & ~(1<<2)) ) {
   11582:	693b      	ldr	r3, [r7, #16]
   11584:	f003 0302 	and.w	r3, r3, #2
   11588:	2b00      	cmp	r3, #0
   1158a:	d054      	beq.n	11636 <UART_Interrupt+0xe6>
			//write next byte of uart
			if(cont->tx_i < cont->tx_len) {
   1158c:	697b      	ldr	r3, [r7, #20]
   1158e:	88da      	ldrh	r2, [r3, #6]
   11590:	697b      	ldr	r3, [r7, #20]
   11592:	889b      	ldrh	r3, [r3, #4]
   11594:	429a      	cmp	r2, r3
   11596:	d214      	bcs.n	115c2 <UART_Interrupt+0x72>
				UART_SendByte(LPC_UART0,(uint8_t)cont->tx_ptr[cont->tx_i]);
   11598:	697b      	ldr	r3, [r7, #20]
   1159a:	681a      	ldr	r2, [r3, #0]
   1159c:	697b      	ldr	r3, [r7, #20]
   1159e:	88db      	ldrh	r3, [r3, #6]
   115a0:	18d3      	adds	r3, r2, r3
   115a2:	781b      	ldrb	r3, [r3, #0]
   115a4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   115a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   115ac:	4619      	mov	r1, r3
   115ae:	f003 f8c7 	bl	14740 <UART_SendByte>
				cont->tx_i++;
   115b2:	697b      	ldr	r3, [r7, #20]
   115b4:	88db      	ldrh	r3, [r3, #6]
   115b6:	f103 0301 	add.w	r3, r3, #1
   115ba:	b29a      	uxth	r2, r3
   115bc:	697b      	ldr	r3, [r7, #20]
   115be:	80da      	strh	r2, [r3, #6]
   115c0:	e039      	b.n	11636 <UART_Interrupt+0xe6>
			} else {
				/*stop transmission*/
				UART_IntConfig(LPC_UART0,UART_INTCFG_THRE,DISABLE);
   115c2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   115c6:	f2c4 0000 	movt	r0, #16384	; 0x4000
   115ca:	f04f 0101 	mov.w	r1, #1
   115ce:	f04f 0200 	mov.w	r2, #0
   115d2:	f003 f9fb 	bl	149cc <UART_IntConfig>
   115d6:	e02e      	b.n	11636 <UART_Interrupt+0xe6>
			}

		} /*end THRE check*/

	} else if(!(reg1 & 0x01)) {
   115d8:	68fb      	ldr	r3, [r7, #12]
   115da:	f003 0301 	and.w	r3, r3, #1
   115de:	2b00      	cmp	r3, #0
   115e0:	d129      	bne.n	11636 <UART_Interrupt+0xe6>
		//reg = UART_GetIntId((LPC_UART_TypeDef *)LPC_UART1);
		//check if this really is a THRE interrupt
		if(reg1 & ((1<<1) & ~(1<<2)) ) {
   115e2:	68fb      	ldr	r3, [r7, #12]
   115e4:	f003 0302 	and.w	r3, r3, #2
   115e8:	2b00      	cmp	r3, #0
   115ea:	d024      	beq.n	11636 <UART_Interrupt+0xe6>
			//write next byte of uart
			if(cont->tx_i < cont->tx_len) {
   115ec:	697b      	ldr	r3, [r7, #20]
   115ee:	88da      	ldrh	r2, [r3, #6]
   115f0:	697b      	ldr	r3, [r7, #20]
   115f2:	889b      	ldrh	r3, [r3, #4]
   115f4:	429a      	cmp	r2, r3
   115f6:	d214      	bcs.n	11622 <UART_Interrupt+0xd2>
				UART_SendByte((LPC_UART_TypeDef *)LPC_UART1,(uint8_t)cont->tx_ptr[cont->tx_i]);
   115f8:	697b      	ldr	r3, [r7, #20]
   115fa:	681a      	ldr	r2, [r3, #0]
   115fc:	697b      	ldr	r3, [r7, #20]
   115fe:	88db      	ldrh	r3, [r3, #6]
   11600:	18d3      	adds	r3, r2, r3
   11602:	781b      	ldrb	r3, [r3, #0]
   11604:	f04f 0000 	mov.w	r0, #0
   11608:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1160c:	4619      	mov	r1, r3
   1160e:	f003 f897 	bl	14740 <UART_SendByte>
				cont->tx_i++;
   11612:	697b      	ldr	r3, [r7, #20]
   11614:	88db      	ldrh	r3, [r3, #6]
   11616:	f103 0301 	add.w	r3, r3, #1
   1161a:	b29a      	uxth	r2, r3
   1161c:	697b      	ldr	r3, [r7, #20]
   1161e:	80da      	strh	r2, [r3, #6]
   11620:	e009      	b.n	11636 <UART_Interrupt+0xe6>
			} else {
				/*stop transmission*/
				UART_IntConfig((LPC_UART_TypeDef *)LPC_UART1,UART_INTCFG_THRE,DISABLE);
   11622:	f04f 0000 	mov.w	r0, #0
   11626:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1162a:	f04f 0101 	mov.w	r1, #1
   1162e:	f04f 0200 	mov.w	r2, #0
   11632:	f003 f9cb 	bl	149cc <UART_IntConfig>
			}
		} /*end THRE check*/
	}


    CPU_IntSrcEn(CPU_INT_SYSTICK);                              /* Enable the SYSTICK interrupt. Resume OS operation.   */
   11636:	f04f 000f 	mov.w	r0, #15
   1163a:	f7ef fc17 	bl	e6c <CPU_IntSrcEn>
}
   1163e:	f107 0718 	add.w	r7, r7, #24
   11642:	46bd      	mov	sp, r7
   11644:	bd80      	pop	{r7, pc}
   11646:	bf00      	nop

00011648 <OS_CSP_TickInit>:
* Note(s)    : (1) This function MUST be called after OSStart() & after processor initialization.
************************************************************************************************************************
*/

void  OS_CSP_TickInit (void)
{
   11648:	b580      	push	{r7, lr}
   1164a:	b082      	sub	sp, #8
   1164c:	af00      	add	r7, sp, #0
    CPU_INT32U  cnts;
    CPU_INT32U  cpu_freq;
    
    
    cpu_freq = CSP_PM_CPU_ClkFreqGet();                         /* Get the CPU clock                                    */
   1164e:	f004 fab7 	bl	15bc0 <CSP_PM_CPU_ClkFreqGet>
   11652:	6078      	str	r0, [r7, #4]
    cnts     = (cpu_freq / OSCfg_TickRate_Hz);                  /* Calculate the number of SysTick counts               */
   11654:	f64c 134c 	movw	r3, #51532	; 0xc94c
   11658:	f2c0 0302 	movt	r3, #2
   1165c:	681b      	ldr	r3, [r3, #0]
   1165e:	687a      	ldr	r2, [r7, #4]
   11660:	fbb2 f3f3 	udiv	r3, r2, r3
   11664:	603b      	str	r3, [r7, #0]

    OS_CPU_SysTickInit(cnts);                                   /* Call the Generic OS Systick initialization           */
   11666:	6838      	ldr	r0, [r7, #0]
   11668:	f7ef fa68 	bl	b3c <OS_CPU_SysTickInit>
}
   1166c:	f107 0708 	add.w	r7, r7, #8
   11670:	46bd      	mov	sp, r7
   11672:	bd80      	pop	{r7, pc}

00011674 <OS_CPU_IntHandler>:
* Note(s)    : none.
************************************************************************************************************************
*/

void  OS_CPU_IntHandler (void) 
{
   11674:	b580      	push	{r7, lr}
   11676:	b082      	sub	sp, #8
   11678:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
   1167a:	f04f 0300 	mov.w	r3, #0
   1167e:	607b      	str	r3, [r7, #4]
    
    
    CPU_CRITICAL_ENTER();                                       /* Tell the OS that we are starting an ISR              */
   11680:	f006 fbb0 	bl	17de4 <CPU_SR_Save>
   11684:	6078      	str	r0, [r7, #4]
   11686:	f7f0 f917 	bl	18b8 <CPU_IntDisMeasStart>

    OSIntEnter();
   1168a:	f7fc ff17 	bl	e4bc <OSIntEnter>

    CPU_CRITICAL_EXIT();
   1168e:	f7f0 f93f 	bl	1910 <CPU_IntDisMeasStop>
   11692:	6878      	ldr	r0, [r7, #4]
   11694:	f006 fbaa 	bl	17dec <CPU_SR_Restore>
    
    CSP_IntHandler();                                           /* Call the generic CSP interrupt handler.              */
   11698:	f004 fa4e 	bl	15b38 <CSP_IntHandler>
    
    OSIntExit();                                                /* Tell the OS that we are leaving the ISR              */
   1169c:	f7fc ff32 	bl	e504 <OSIntExit>
}
   116a0:	f107 0708 	add.w	r7, r7, #8
   116a4:	46bd      	mov	sp, r7
   116a6:	bd80      	pop	{r7, pc}

000116a8 <CSP_IntVectClr>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_IntVectClr (CSP_INT_VECT  *p_vect)
{
   116a8:	b480      	push	{r7}
   116aa:	b083      	sub	sp, #12
   116ac:	af00      	add	r7, sp, #0
   116ae:	6078      	str	r0, [r7, #4]
    p_vect->FnctPtr = (CPU_FNCT_PTR )0;
   116b0:	687b      	ldr	r3, [r7, #4]
   116b2:	f04f 0200 	mov.w	r2, #0
   116b6:	601a      	str	r2, [r3, #0]

#if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    p_vect->ArgPtr  = (void *)0;
   116b8:	687b      	ldr	r3, [r7, #4]
   116ba:	f04f 0200 	mov.w	r2, #0
   116be:	605a      	str	r2, [r3, #4]
#endif                

#if (CSP_CFG_INT_ISR_EXEC_MEAS_EN == DEF_ENABLED) && \
    (CPU_CFG_TS_EN                == DEF_ENABLED)
    p_vect->TimeMax = (CPU_TS )0;                               /* Intialize Interrupt excecution time.                 */
   116c0:	687b      	ldr	r3, [r7, #4]
   116c2:	f04f 0200 	mov.w	r2, #0
   116c6:	609a      	str	r2, [r3, #8]
    p_vect->TimeCur = (CPU_TS )0;         
   116c8:	687b      	ldr	r3, [r7, #4]
   116ca:	f04f 0200 	mov.w	r2, #0
   116ce:	60da      	str	r2, [r3, #12]
#endif        
}
   116d0:	f107 070c 	add.w	r7, r7, #12
   116d4:	46bd      	mov	sp, r7
   116d6:	bc80      	pop	{r7}
   116d8:	4770      	bx	lr
   116da:	bf00      	nop

000116dc <CSP_IntVectSet>:
*/

void  CSP_IntVectSet (CSP_INT_VECT  *p_vect,
                      CPU_FNCT_PTR   isr_fnct,
                      void          *p_arg)
{
   116dc:	b480      	push	{r7}
   116de:	b085      	sub	sp, #20
   116e0:	af00      	add	r7, sp, #0
   116e2:	60f8      	str	r0, [r7, #12]
   116e4:	60b9      	str	r1, [r7, #8]
   116e6:	607a      	str	r2, [r7, #4]
    p_vect->FnctPtr = isr_fnct;
   116e8:	68fb      	ldr	r3, [r7, #12]
   116ea:	68ba      	ldr	r2, [r7, #8]
   116ec:	601a      	str	r2, [r3, #0]
#if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    p_vect->ArgPtr  = p_arg;
   116ee:	68fb      	ldr	r3, [r7, #12]
   116f0:	687a      	ldr	r2, [r7, #4]
   116f2:	605a      	str	r2, [r3, #4]
#endif                

#if (CSP_CFG_INT_ISR_EXEC_MEAS_EN == DEF_ENABLED) && \
    (CPU_CFG_TS_EN                == DEF_ENABLED)
    p_vect->TimeMax = (CPU_TS )0;                               /* Intialize Interrupt excecution time.                 */
   116f4:	68fb      	ldr	r3, [r7, #12]
   116f6:	f04f 0200 	mov.w	r2, #0
   116fa:	609a      	str	r2, [r3, #8]
    p_vect->TimeCur = (CPU_TS )0;         
   116fc:	68fb      	ldr	r3, [r7, #12]
   116fe:	f04f 0200 	mov.w	r2, #0
   11702:	60da      	str	r2, [r3, #12]
#endif        
}
   11704:	f107 0714 	add.w	r7, r7, #20
   11708:	46bd      	mov	sp, r7
   1170a:	bc80      	pop	{r7}
   1170c:	4770      	bx	lr
   1170e:	bf00      	nop

00011710 <CSP_IntVectDeref>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_IntVectDeref (CSP_INT_VECT  *p_vect)
{
   11710:	b580      	push	{r7, lr}
   11712:	b086      	sub	sp, #24
   11714:	af00      	add	r7, sp, #0
   11716:	6078      	str	r0, [r7, #4]
#endif    
    CPU_FNCT_PTR   int_isr_fnct;    
#if (CSP_CFG_INT_ISR_EXEC_MEAS_EN == DEF_ENABLED) && \
    (CPU_CFG_TS_EN               == DEF_ENABLED)
    CPU_TS         ts;
    CPU_SR_ALLOC();    
   11718:	f04f 0300 	mov.w	r3, #0
   1171c:	617b      	str	r3, [r7, #20]
#endif       


    int_isr_fnct =  p_vect->FnctPtr;
   1171e:	687b      	ldr	r3, [r7, #4]
   11720:	681b      	ldr	r3, [r3, #0]
   11722:	613b      	str	r3, [r7, #16]
#if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)
    p_int_arg    =  p_vect->ArgPtr;
   11724:	687b      	ldr	r3, [r7, #4]
   11726:	685b      	ldr	r3, [r3, #4]
   11728:	60fb      	str	r3, [r7, #12]
#endif    
      
   if (int_isr_fnct != (CPU_FNCT_PTR)0) {
   1172a:	693b      	ldr	r3, [r7, #16]
   1172c:	2b00      	cmp	r3, #0
   1172e:	d020      	beq.n	11772 <CSP_IntVectDeref+0x62>
#if (CSP_CFG_INT_ISR_EXEC_MEAS_EN == DEF_ENABLED) && \
    (CPU_CFG_TS_EN                == DEF_ENABLED)
        ts = CPU_TS_Get32();                                    /* Get current time stamp.                              */                 
   11730:	f7f0 f82c 	bl	178c <CPU_TS_Get32>
   11734:	60b8      	str	r0, [r7, #8]
#if (CSP_CFG_INT_NESTING_EN == DEF_ENABLED)
        CPU_IntEn();    
#endif

#if (CSP_CFG_INT_ISR_ARG_EN == DEF_ENABLED)                
        (*int_isr_fnct)(p_int_arg);                             /* Call interrupt handler                               */
   11736:	693b      	ldr	r3, [r7, #16]
   11738:	68f8      	ldr	r0, [r7, #12]
   1173a:	4798      	blx	r3
        CPU_IntDis();    
#endif

#if (CSP_CFG_INT_ISR_EXEC_MEAS_EN == DEF_ENABLED) && \
    (CPU_CFG_TS_EN                == DEF_ENABLED)
        ts = CPU_TS_Get32() - ts;                               /* Compute delta time between start and end.            */
   1173c:	f7f0 f826 	bl	178c <CPU_TS_Get32>
   11740:	4602      	mov	r2, r0
   11742:	68bb      	ldr	r3, [r7, #8]
   11744:	1ad3      	subs	r3, r2, r3
   11746:	60bb      	str	r3, [r7, #8]
                                                                /* Detect peak value                                    */
        CPU_CRITICAL_ENTER();
   11748:	f006 fb4c 	bl	17de4 <CPU_SR_Save>
   1174c:	6178      	str	r0, [r7, #20]
   1174e:	f7f0 f8b3 	bl	18b8 <CPU_IntDisMeasStart>

        if (p_vect->TimeMax < ts) {
   11752:	687b      	ldr	r3, [r7, #4]
   11754:	689a      	ldr	r2, [r3, #8]
   11756:	68bb      	ldr	r3, [r7, #8]
   11758:	429a      	cmp	r2, r3
   1175a:	d202      	bcs.n	11762 <CSP_IntVectDeref+0x52>
            p_vect->TimeMax = ts;
   1175c:	687b      	ldr	r3, [r7, #4]
   1175e:	68ba      	ldr	r2, [r7, #8]
   11760:	609a      	str	r2, [r3, #8]
        }
        
        p_vect->TimeCur = ts;                 
   11762:	687b      	ldr	r3, [r7, #4]
   11764:	68ba      	ldr	r2, [r7, #8]
   11766:	60da      	str	r2, [r3, #12]
        
        CPU_CRITICAL_EXIT();        
   11768:	f7f0 f8d2 	bl	1910 <CPU_IntDisMeasStop>
   1176c:	6978      	ldr	r0, [r7, #20]
   1176e:	f006 fb3d 	bl	17dec <CPU_SR_Restore>
#endif        
   }
}
   11772:	f107 0718 	add.w	r7, r7, #24
   11776:	46bd      	mov	sp, r7
   11778:	bd80      	pop	{r7, pc}
   1177a:	bf00      	nop

0001177c <CLKPWR_SetPCLKDiv>:
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
   1177c:	b480      	push	{r7}
   1177e:	b085      	sub	sp, #20
   11780:	af00      	add	r7, sp, #0
   11782:	6078      	str	r0, [r7, #4]
   11784:	6039      	str	r1, [r7, #0]
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
   11786:	687b      	ldr	r3, [r7, #4]
   11788:	2b1f      	cmp	r3, #31
   1178a:	d903      	bls.n	11794 <CLKPWR_SetPCLKDiv+0x18>
   1178c:	687b      	ldr	r3, [r7, #4]
   1178e:	f1a3 0320 	sub.w	r3, r3, #32
   11792:	e000      	b.n	11796 <CLKPWR_SetPCLKDiv+0x1a>
   11794:	687b      	ldr	r3, [r7, #4]
   11796:	60fb      	str	r3, [r7, #12]

	/* PCLKSEL0 selected */
	if (ClkType < 32)
   11798:	687b      	ldr	r3, [r7, #4]
   1179a:	2b1f      	cmp	r3, #31
   1179c:	d825      	bhi.n	117ea <CLKPWR_SetPCLKDiv+0x6e>
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
   1179e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   117a2:	f2c4 030f 	movt	r3, #16399	; 0x400f
   117a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   117aa:	f2c4 020f 	movt	r2, #16399	; 0x400f
   117ae:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
   117b2:	68fa      	ldr	r2, [r7, #12]
   117b4:	f04f 0003 	mov.w	r0, #3
   117b8:	fa00 f202 	lsl.w	r2, r0, r2
   117bc:	ea6f 0202 	mvn.w	r2, r2
   117c0:	400a      	ands	r2, r1
   117c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
   117c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   117ca:	f2c4 030f 	movt	r3, #16399	; 0x400f
   117ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   117d2:	f2c4 020f 	movt	r2, #16399	; 0x400f
   117d6:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
   117da:	68fa      	ldr	r2, [r7, #12]
   117dc:	6838      	ldr	r0, [r7, #0]
   117de:	fa00 f202 	lsl.w	r2, r0, r2
   117e2:	430a      	orrs	r2, r1
   117e4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
   117e8:	e024      	b.n	11834 <CLKPWR_SetPCLKDiv+0xb8>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
   117ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   117ee:	f2c4 030f 	movt	r3, #16399	; 0x400f
   117f2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   117f6:	f2c4 020f 	movt	r2, #16399	; 0x400f
   117fa:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
   117fe:	68fa      	ldr	r2, [r7, #12]
   11800:	f04f 0003 	mov.w	r0, #3
   11804:	fa00 f202 	lsl.w	r2, r0, r2
   11808:	ea6f 0202 	mvn.w	r2, r2
   1180c:	400a      	ands	r2, r1
   1180e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
   11812:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11816:	f2c4 030f 	movt	r3, #16399	; 0x400f
   1181a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1181e:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11822:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
   11826:	68fa      	ldr	r2, [r7, #12]
   11828:	6838      	ldr	r0, [r7, #0]
   1182a:	fa00 f202 	lsl.w	r2, r0, r2
   1182e:	430a      	orrs	r2, r1
   11830:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}
}
   11834:	f107 0714 	add.w	r7, r7, #20
   11838:	46bd      	mov	sp, r7
   1183a:	bc80      	pop	{r7}
   1183c:	4770      	bx	lr
   1183e:	bf00      	nop

00011840 <CLKPWR_GetPCLKSEL>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock Selection
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
   11840:	b480      	push	{r7}
   11842:	b085      	sub	sp, #20
   11844:	af00      	add	r7, sp, #0
   11846:	6078      	str	r0, [r7, #4]
	uint32_t bitpos, retval;

	if (ClkType < 32)
   11848:	687b      	ldr	r3, [r7, #4]
   1184a:	2b1f      	cmp	r3, #31
   1184c:	d809      	bhi.n	11862 <CLKPWR_GetPCLKSEL+0x22>
	{
		bitpos = ClkType;
   1184e:	687b      	ldr	r3, [r7, #4]
   11850:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL0;
   11852:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11856:	f2c4 030f 	movt	r3, #16399	; 0x400f
   1185a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
   1185e:	60bb      	str	r3, [r7, #8]
   11860:	e00a      	b.n	11878 <CLKPWR_GetPCLKSEL+0x38>
	}
	else
	{
		bitpos = ClkType - 32;
   11862:	687b      	ldr	r3, [r7, #4]
   11864:	f1a3 0320 	sub.w	r3, r3, #32
   11868:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL1;
   1186a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1186e:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11872:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
   11876:	60bb      	str	r3, [r7, #8]
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
   11878:	68fb      	ldr	r3, [r7, #12]
   1187a:	68ba      	ldr	r2, [r7, #8]
   1187c:	fa22 f303 	lsr.w	r3, r2, r3
   11880:	f003 0303 	and.w	r3, r3, #3
   11884:	60bb      	str	r3, [r7, #8]
	return retval;
   11886:	68bb      	ldr	r3, [r7, #8]
}
   11888:	4618      	mov	r0, r3
   1188a:	f107 0714 	add.w	r7, r7, #20
   1188e:	46bd      	mov	sp, r7
   11890:	bc80      	pop	{r7}
   11892:	4770      	bx	lr

00011894 <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
   11894:	b580      	push	{r7, lr}
   11896:	b084      	sub	sp, #16
   11898:	af00      	add	r7, sp, #0
   1189a:	6078      	str	r0, [r7, #4]
	uint32_t retval, div;

	retval = SystemCoreClock;
   1189c:	f240 0300 	movw	r3, #0
   118a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   118a4:	681b      	ldr	r3, [r3, #0]
   118a6:	60bb      	str	r3, [r7, #8]
	div = CLKPWR_GetPCLKSEL(ClkType);
   118a8:	6878      	ldr	r0, [r7, #4]
   118aa:	f7ff ffc9 	bl	11840 <CLKPWR_GetPCLKSEL>
   118ae:	60f8      	str	r0, [r7, #12]

	switch (div)
   118b0:	68fb      	ldr	r3, [r7, #12]
   118b2:	2b03      	cmp	r3, #3
   118b4:	d81a      	bhi.n	118ec <CLKPWR_GetPCLK+0x58>
   118b6:	a201      	add	r2, pc, #4	; (adr r2, 118bc <CLKPWR_GetPCLK+0x28>)
   118b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   118bc:	000118cd 	.word	0x000118cd
   118c0:	000118d5 	.word	0x000118d5
   118c4:	000118dd 	.word	0x000118dd
   118c8:	000118e5 	.word	0x000118e5
	{
	case 0:
		div = 4;
   118cc:	f04f 0304 	mov.w	r3, #4
   118d0:	60fb      	str	r3, [r7, #12]
		break;
   118d2:	e00b      	b.n	118ec <CLKPWR_GetPCLK+0x58>

	case 1:
		div = 1;
   118d4:	f04f 0301 	mov.w	r3, #1
   118d8:	60fb      	str	r3, [r7, #12]
		break;
   118da:	e007      	b.n	118ec <CLKPWR_GetPCLK+0x58>

	case 2:
		div = 2;
   118dc:	f04f 0302 	mov.w	r3, #2
   118e0:	60fb      	str	r3, [r7, #12]
		break;
   118e2:	e003      	b.n	118ec <CLKPWR_GetPCLK+0x58>

	case 3:
		div = 8;
   118e4:	f04f 0308 	mov.w	r3, #8
   118e8:	60fb      	str	r3, [r7, #12]
		break;
   118ea:	bf00      	nop
	}
	retval /= div;
   118ec:	68ba      	ldr	r2, [r7, #8]
   118ee:	68fb      	ldr	r3, [r7, #12]
   118f0:	fbb2 f3f3 	udiv	r3, r2, r3
   118f4:	60bb      	str	r3, [r7, #8]

	return retval;
   118f6:	68bb      	ldr	r3, [r7, #8]
}
   118f8:	4618      	mov	r0, r3
   118fa:	f107 0710 	add.w	r7, r7, #16
   118fe:	46bd      	mov	sp, r7
   11900:	bd80      	pop	{r7, pc}
   11902:	bf00      	nop

00011904 <CLKPWR_ConfigPPWR>:
 * 				- DISABLE	: Disable power for this peripheral
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
   11904:	b480      	push	{r7}
   11906:	b083      	sub	sp, #12
   11908:	af00      	add	r7, sp, #0
   1190a:	6078      	str	r0, [r7, #4]
   1190c:	460b      	mov	r3, r1
   1190e:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE)
   11910:	78fb      	ldrb	r3, [r7, #3]
   11912:	2b01      	cmp	r3, #1
   11914:	d113      	bne.n	1193e <CLKPWR_ConfigPPWR+0x3a>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
   11916:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1191a:	f2c4 020f 	movt	r2, #16399	; 0x400f
   1191e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11922:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11926:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
   1192a:	6878      	ldr	r0, [r7, #4]
   1192c:	f24f 73de 	movw	r3, #63454	; 0xf7de
   11930:	f6ce 73ef 	movt	r3, #61423	; 0xefef
   11934:	4003      	ands	r3, r0
   11936:	430b      	orrs	r3, r1
   11938:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
   1193c:	e017      	b.n	1196e <CLKPWR_ConfigPPWR+0x6a>
	}
	else if (NewState == DISABLE)
   1193e:	78fb      	ldrb	r3, [r7, #3]
   11940:	2b00      	cmp	r3, #0
   11942:	d114      	bne.n	1196e <CLKPWR_ConfigPPWR+0x6a>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
   11944:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   11948:	f2c4 020f 	movt	r2, #16399	; 0x400f
   1194c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11950:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11954:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
   11958:	687b      	ldr	r3, [r7, #4]
   1195a:	ea6f 0303 	mvn.w	r3, r3
   1195e:	4019      	ands	r1, r3
   11960:	f24f 73de 	movw	r3, #63454	; 0xf7de
   11964:	f6ce 73ef 	movt	r3, #61423	; 0xefef
   11968:	400b      	ands	r3, r1
   1196a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	}
}
   1196e:	f107 070c 	add.w	r7, r7, #12
   11972:	46bd      	mov	sp, r7
   11974:	bc80      	pop	{r7}
   11976:	4770      	bx	lr

00011978 <CLKPWR_Sleep>:
 * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
   11978:	b480      	push	{r7}
   1197a:	af00      	add	r7, sp, #0
	LPC_SC->PCON = 0x00;
   1197c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11980:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11984:	f04f 0200 	mov.w	r2, #0
   11988:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
   1198c:	bf30      	wfi
	/* Sleep Mode*/
	__WFI();
}
   1198e:	46bd      	mov	sp, r7
   11990:	bc80      	pop	{r7}
   11992:	4770      	bx	lr

00011994 <CLKPWR_DeepSleep>:
 * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
   11994:	b480      	push	{r7}
   11996:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
   11998:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   1199c:	f2ce 0300 	movt	r3, #57344	; 0xe000
   119a0:	f04f 0204 	mov.w	r2, #4
   119a4:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
   119a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   119aa:	f2c4 030f 	movt	r3, #16399	; 0x400f
   119ae:	f04f 0208 	mov.w	r2, #8
   119b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   119b6:	bf30      	wfi
	/* Deep Sleep Mode*/
	__WFI();
}
   119b8:	46bd      	mov	sp, r7
   119ba:	bc80      	pop	{r7}
   119bc:	4770      	bx	lr
   119be:	bf00      	nop

000119c0 <CLKPWR_PowerDown>:
 * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
   119c0:	b480      	push	{r7}
   119c2:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
   119c4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   119c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   119cc:	f04f 0204 	mov.w	r2, #4
   119d0:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
   119d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   119d6:	f2c4 030f 	movt	r3, #16399	; 0x400f
   119da:	f04f 0209 	mov.w	r2, #9
   119de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   119e2:	bf30      	wfi
	/* Power Down Mode*/
	__WFI();
}
   119e4:	46bd      	mov	sp, r7
   119e6:	bc80      	pop	{r7}
   119e8:	4770      	bx	lr
   119ea:	bf00      	nop

000119ec <CLKPWR_DeepPowerDown>:
 * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
   119ec:	b480      	push	{r7}
   119ee:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
   119f0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   119f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
   119f8:	f04f 0204 	mov.w	r2, #4
   119fc:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
   119fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   11a02:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11a06:	f04f 0203 	mov.w	r2, #3
   11a0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   11a0e:	bf30      	wfi
	/* Deep Power Down Mode*/
	__WFI();
}
   11a10:	46bd      	mov	sp, r7
   11a12:	bc80      	pop	{r7}
   11a14:	4770      	bx	lr
   11a16:	bf00      	nop

00011a18 <CSP_GPIO_Init>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_GPIO_Init (void) 
{
   11a18:	b480      	push	{r7}
   11a1a:	af00      	add	r7, sp, #0

}   
   11a1c:	46bd      	mov	sp, r7
   11a1e:	bc80      	pop	{r7}
   11a20:	4770      	bx	lr
   11a22:	bf00      	nop

00011a24 <CSP_GPIO_Cfg>:
                           CSP_OPT        dir,                                    
                           CSP_OPT_FLAGS  drv_mode,
                           CPU_BOOLEAN    int_en,
                           CSP_OPT        int_pol,
                           CSP_OPT        fnct)                           
{   
   11a24:	b580      	push	{r7, lr}
   11a26:	b08c      	sub	sp, #48	; 0x30
   11a28:	af00      	add	r7, sp, #0
   11a2a:	60b9      	str	r1, [r7, #8]
   11a2c:	4601      	mov	r1, r0
   11a2e:	81f9      	strh	r1, [r7, #14]
   11a30:	81ba      	strh	r2, [r7, #12]
   11a32:	80fb      	strh	r3, [r7, #6]
    CPU_INT32U  pin_bit_pos;
    CPU_INT32U  pin_mode_high;
    CPU_INT32U  pin_mode_low;
    CPU_INT32U  pin_sel_high;
    CPU_INT32U  pin_sel_low;    
    CPU_SR_ALLOC();
   11a34:	f04f 0300 	mov.w	r3, #0
   11a38:	61bb      	str	r3, [r7, #24]

                                                                /* -------------- ARGUMENTS CHECKING ---------------- */
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    switch (port_nbr) {
   11a3a:	89fb      	ldrh	r3, [r7, #14]
   11a3c:	2b04      	cmp	r3, #4
   11a3e:	d81f      	bhi.n	11a80 <CSP_GPIO_Cfg+0x5c>
   11a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
   11a44:	fa02 f203 	lsl.w	r2, r2, r3
   11a48:	2a00      	cmp	r2, #0
   11a4a:	db12      	blt.n	11a72 <CSP_GPIO_Cfg+0x4e>
   11a4c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
   11a50:	fa02 f303 	lsl.w	r3, r2, r3
   11a54:	2b00      	cmp	r3, #0
   11a56:	da13      	bge.n	11a80 <CSP_GPIO_Cfg+0x5c>
        case CSP_GPIO_PORT_NBR_00:
        case CSP_GPIO_PORT_NBR_02:

             if ( (int_en  == DEF_ENABLED           ) &&        /* Only level sensitive interrupts can be configured.   */
   11a58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   11a5c:	2b01      	cmp	r3, #1
   11a5e:	d112      	bne.n	11a86 <CSP_GPIO_Cfg+0x62>
   11a60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   11a62:	2b00      	cmp	r3, #0
   11a64:	d002      	beq.n	11a6c <CSP_GPIO_Cfg+0x48>
                 ((int_pol == CSP_INT_POL_LEVEL_HIGH) ||
   11a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   11a68:	2b01      	cmp	r3, #1
   11a6a:	d10c      	bne.n	11a86 <CSP_GPIO_Cfg+0x62>
                  (int_pol == CSP_INT_POL_LEVEL_LOW ))) {                 
                 return (DEF_FAIL);
   11a6c:	f04f 0300 	mov.w	r3, #0
   11a70:	e30b      	b.n	1208a <CSP_GPIO_Cfg+0x666>
             break;
        
        case CSP_GPIO_PORT_NBR_01:                              /* Only pins of PORT 0 and PORT 2 can generate int.     */
        case CSP_GPIO_PORT_NBR_03:
        case CSP_GPIO_PORT_NBR_04:             
             if (int_en == DEF_ENABLED) {
   11a72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   11a76:	2b01      	cmp	r3, #1
   11a78:	d107      	bne.n	11a8a <CSP_GPIO_Cfg+0x66>
                 return (DEF_FAIL);
   11a7a:	f04f 0300 	mov.w	r3, #0
   11a7e:	e304      	b.n	1208a <CSP_GPIO_Cfg+0x666>
             }
             break;

        default:
             return (DEF_FAIL);
   11a80:	f04f 0300 	mov.w	r3, #0
   11a84:	e301      	b.n	1208a <CSP_GPIO_Cfg+0x666>
             if ( (int_en  == DEF_ENABLED           ) &&        /* Only level sensitive interrupts can be configured.   */
                 ((int_pol == CSP_INT_POL_LEVEL_HIGH) ||
                  (int_pol == CSP_INT_POL_LEVEL_LOW ))) {                 
                 return (DEF_FAIL);
             }
             break;
   11a86:	bf00      	nop
   11a88:	e000      	b.n	11a8c <CSP_GPIO_Cfg+0x68>
        case CSP_GPIO_PORT_NBR_03:
        case CSP_GPIO_PORT_NBR_04:             
             if (int_en == DEF_ENABLED) {
                 return (DEF_FAIL);
             }
             break;
   11a8a:	bf00      	nop
                                                                /* Px.y MODE register defines (Port x Pin y) ...        */
                                                                /* ... '00b' Px.y pin has a pull-up resistor enabled.   */
                                                                /* ... '01b' Px.y pin has repeater mode enabled.        */
                                                                /* ... '10b' Px.y pin has neither pull-up nor pull-down.*/
                                                                /* ... '11b' Px.y has a pull-down resistor enabled.     */
    switch (drv_mode & ~CSP_GPIO_FLAG_MODE_OPEN_DRAIN) {        
   11a8c:	88fb      	ldrh	r3, [r7, #6]
   11a8e:	f023 0310 	bic.w	r3, r3, #16
   11a92:	f103 33ff 	add.w	r3, r3, #4294967295
   11a96:	2b07      	cmp	r3, #7
   11a98:	d826      	bhi.n	11ae8 <CSP_GPIO_Cfg+0xc4>
   11a9a:	a201      	add	r2, pc, #4	; (adr r2, 11aa0 <CSP_GPIO_Cfg+0x7c>)
   11a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11aa0:	00011ac1 	.word	0x00011ac1
   11aa4:	00011acb 	.word	0x00011acb
   11aa8:	00011ae9 	.word	0x00011ae9
   11aac:	00011ad5 	.word	0x00011ad5
   11ab0:	00011ae9 	.word	0x00011ae9
   11ab4:	00011ae9 	.word	0x00011ae9
   11ab8:	00011ae9 	.word	0x00011ae9
   11abc:	00011adf 	.word	0x00011adf
        case CSP_GPIO_FLAG_MODE_NONE:
             opt_pinmode = 2u;                                  
   11ac0:	f04f 0302 	mov.w	r3, #2
   11ac4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
             break;
   11ac8:	e011      	b.n	11aee <CSP_GPIO_Cfg+0xca>
             
        case CSP_GPIO_FLAG_MODE_PULLUP:
             opt_pinmode = 0u;
   11aca:	f04f 0300 	mov.w	r3, #0
   11ace:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
             break;
   11ad2:	e00c      	b.n	11aee <CSP_GPIO_Cfg+0xca>
             
        case CSP_GPIO_FLAG_MODE_PULLDOWN:
             opt_pinmode = 3u;
   11ad4:	f04f 0303 	mov.w	r3, #3
   11ad8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
             break;
   11adc:	e007      	b.n	11aee <CSP_GPIO_Cfg+0xca>
             
        case CSP_GPIO_FLAG_MODE_REPEATER:
             opt_pinmode = 1u;
   11ade:	f04f 0301 	mov.w	r3, #1
   11ae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
             break;
   11ae6:	e002      	b.n	11aee <CSP_GPIO_Cfg+0xca>

        default:
             return (DEF_FAIL);
   11ae8:	f04f 0300 	mov.w	r3, #0
   11aec:	e2cd      	b.n	1208a <CSP_GPIO_Cfg+0x666>
    }
                                                                /* ----------- PIN DIRECTION DECODIFICATION ----------- */
    switch (fnct) {
   11aee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   11af2:	2b03      	cmp	r3, #3
   11af4:	d854      	bhi.n	11ba0 <CSP_GPIO_Cfg+0x17c>
   11af6:	a201      	add	r2, pc, #4	; (adr r2, 11afc <CSP_GPIO_Cfg+0xd8>)
   11af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11afc:	00011b0d 	.word	0x00011b0d
   11b00:	00011b83 	.word	0x00011b83
   11b04:	00011b8d 	.word	0x00011b8d
   11b08:	00011b97 	.word	0x00011b97
        case CSP_GPIO_FNCT_00:
             opt_pinsel = 0u;                                   /* '00b' GPIO Function PINSELx register.                */
   11b0c:	f04f 0300 	mov.w	r3, #0
   11b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         
             CPU_CRITICAL_ENTER();
   11b14:	f006 f966 	bl	17de4 <CPU_SR_Save>
   11b18:	61b8      	str	r0, [r7, #24]
   11b1a:	f7ef fecd 	bl	18b8 <CPU_IntDisMeasStart>
             if (dir == CSP_GPIO_DIR_IN) {                      /* Pin direction decodification.                        */
   11b1e:	89bb      	ldrh	r3, [r7, #12]
   11b20:	2b00      	cmp	r3, #0
   11b22:	d115      	bne.n	11b50 <CSP_GPIO_Cfg+0x12c>
                 DEF_BIT_CLR(CSP_GPIO_REG_FIODIRx(port_nbr), pins);
   11b24:	89fb      	ldrh	r3, [r7, #14]
   11b26:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   11b2a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   11b2e:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11b32:	461a      	mov	r2, r3
   11b34:	89fb      	ldrh	r3, [r7, #14]
   11b36:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   11b3a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   11b3e:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11b42:	6819      	ldr	r1, [r3, #0]
   11b44:	68bb      	ldr	r3, [r7, #8]
   11b46:	ea6f 0303 	mvn.w	r3, r3
   11b4a:	400b      	ands	r3, r1
   11b4c:	6013      	str	r3, [r2, #0]
   11b4e:	e012      	b.n	11b76 <CSP_GPIO_Cfg+0x152>
             } else {
                 DEF_BIT_SET(CSP_GPIO_REG_FIODIRx(port_nbr), pins);
   11b50:	89fb      	ldrh	r3, [r7, #14]
   11b52:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   11b56:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   11b5a:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11b5e:	461a      	mov	r2, r3
   11b60:	89fb      	ldrh	r3, [r7, #14]
   11b62:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   11b66:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   11b6a:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11b6e:	6819      	ldr	r1, [r3, #0]
   11b70:	68bb      	ldr	r3, [r7, #8]
   11b72:	430b      	orrs	r3, r1
   11b74:	6013      	str	r3, [r2, #0]
             }

             CPU_CRITICAL_EXIT();
   11b76:	f7ef fecb 	bl	1910 <CPU_IntDisMeasStop>
   11b7a:	69b8      	ldr	r0, [r7, #24]
   11b7c:	f006 f936 	bl	17dec <CPU_SR_Restore>
             break;
   11b80:	e011      	b.n	11ba6 <CSP_GPIO_Cfg+0x182>
        
        case CSP_GPIO_FNCT_01:
             opt_pinsel = 1u;                                   /* '01b' Function 01 PINSELx register.                  */
   11b82:	f04f 0301 	mov.w	r3, #1
   11b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             break;
   11b8a:	e00c      	b.n	11ba6 <CSP_GPIO_Cfg+0x182>
        
        case CSP_GPIO_FNCT_02:
             opt_pinsel = 2u;                                   /* '10b' Function 02 PINSELx register.                  */
   11b8c:	f04f 0302 	mov.w	r3, #2
   11b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             break;
   11b94:	e007      	b.n	11ba6 <CSP_GPIO_Cfg+0x182>
             
        case CSP_GPIO_FNCT_03:
             opt_pinsel = 3u;                                   /* '11b' Function 03 PINSELx register.                  */
   11b96:	f04f 0303 	mov.w	r3, #3
   11b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             break;
   11b9e:	e002      	b.n	11ba6 <CSP_GPIO_Cfg+0x182>
             
        default:
             return (DEF_FAIL);
   11ba0:	f04f 0300 	mov.w	r3, #0
   11ba4:	e271      	b.n	1208a <CSP_GPIO_Cfg+0x666>
    }
    
    CPU_CRITICAL_ENTER();
   11ba6:	f006 f91d 	bl	17de4 <CPU_SR_Save>
   11baa:	61b8      	str	r0, [r7, #24]
   11bac:	f7ef fe84 	bl	18b8 <CPU_IntDisMeasStart>
    if (DEF_BIT_IS_SET(drv_mode, CSP_GPIO_FLAG_MODE_OPEN_DRAIN)) {
   11bb0:	88fb      	ldrh	r3, [r7, #6]
   11bb2:	f003 0310 	and.w	r3, r3, #16
   11bb6:	2b00      	cmp	r3, #0
   11bb8:	d015      	beq.n	11be6 <CSP_GPIO_Cfg+0x1c2>
        DEF_BIT_SET(CSP_GPIO_REG_PINMODE_ODx(port_nbr), pins);
   11bba:	89fa      	ldrh	r2, [r7, #14]
   11bbc:	f24b 0315 	movw	r3, #45077	; 0xb015
   11bc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11bc4:	18d3      	adds	r3, r2, r3
   11bc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11bca:	461a      	mov	r2, r3
   11bcc:	89f9      	ldrh	r1, [r7, #14]
   11bce:	f24b 0315 	movw	r3, #45077	; 0xb015
   11bd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11bd6:	18cb      	adds	r3, r1, r3
   11bd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11bdc:	6819      	ldr	r1, [r3, #0]
   11bde:	68bb      	ldr	r3, [r7, #8]
   11be0:	430b      	orrs	r3, r1
   11be2:	6013      	str	r3, [r2, #0]
   11be4:	e016      	b.n	11c14 <CSP_GPIO_Cfg+0x1f0>
    } else {
        DEF_BIT_CLR(CSP_GPIO_REG_PINMODE_ODx(port_nbr), pins);
   11be6:	89fa      	ldrh	r2, [r7, #14]
   11be8:	f24b 0315 	movw	r3, #45077	; 0xb015
   11bec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11bf0:	18d3      	adds	r3, r2, r3
   11bf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11bf6:	461a      	mov	r2, r3
   11bf8:	89f9      	ldrh	r1, [r7, #14]
   11bfa:	f24b 0315 	movw	r3, #45077	; 0xb015
   11bfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11c02:	18cb      	adds	r3, r1, r3
   11c04:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11c08:	6819      	ldr	r1, [r3, #0]
   11c0a:	68bb      	ldr	r3, [r7, #8]
   11c0c:	ea6f 0303 	mvn.w	r3, r3
   11c10:	400b      	ands	r3, r1
   11c12:	6013      	str	r3, [r2, #0]
    }
    CPU_CRITICAL_EXIT();
   11c14:	f7ef fe7c 	bl	1910 <CPU_IntDisMeasStop>
   11c18:	69b8      	ldr	r0, [r7, #24]
   11c1a:	f006 f8e7 	bl	17dec <CPU_SR_Restore>
     
    pin_mode_low  = CSP_GPIO_REG_PINMODELx(port_nbr);
   11c1e:	89fa      	ldrh	r2, [r7, #14]
   11c20:	f645 0308 	movw	r3, #22536	; 0x5808
   11c24:	f6c0 0300 	movt	r3, #2048	; 0x800
   11c28:	18d3      	adds	r3, r2, r3
   11c2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11c2e:	681b      	ldr	r3, [r3, #0]
   11c30:	627b      	str	r3, [r7, #36]	; 0x24
    pin_mode_high = CSP_GPIO_REG_PINMODEHx(port_nbr);
   11c32:	89fa      	ldrh	r2, [r7, #14]
   11c34:	f645 0308 	movw	r3, #22536	; 0x5808
   11c38:	f6c0 0300 	movt	r3, #2048	; 0x800
   11c3c:	18d3      	adds	r3, r2, r3
   11c3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11c42:	f103 0304 	add.w	r3, r3, #4
   11c46:	681b      	ldr	r3, [r3, #0]
   11c48:	62bb      	str	r3, [r7, #40]	; 0x28
    pin_sel_low   = CSP_GPIO_REG_PINSELLx(port_nbr);    
   11c4a:	89fb      	ldrh	r3, [r7, #14]
   11c4c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   11c50:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
   11c54:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11c58:	681b      	ldr	r3, [r3, #0]
   11c5a:	61fb      	str	r3, [r7, #28]
    pin_sel_high  = CSP_GPIO_REG_PINSELHx(port_nbr);
   11c5c:	89fb      	ldrh	r3, [r7, #14]
   11c5e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   11c62:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
   11c66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11c6a:	f103 0304 	add.w	r3, r3, #4
   11c6e:	681b      	ldr	r3, [r3, #0]
   11c70:	623b      	str	r3, [r7, #32]
        
    for (pin_nbr = 0u; pin_nbr < 16u; pin_nbr++) {
   11c72:	f04f 0300 	mov.w	r3, #0
   11c76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   11c7a:	e076      	b.n	11d6a <CSP_GPIO_Cfg+0x346>
        pin_bit_pos = pin_nbr * 2u;
   11c7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
   11c84:	617b      	str	r3, [r7, #20]
        if (DEF_BIT_IS_SET(pins, DEF_BIT(pin_nbr))) {           /* Configure the pins 0 .. 15                           */            
   11c86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11c8a:	f04f 0201 	mov.w	r2, #1
   11c8e:	fa02 f203 	lsl.w	r2, r2, r3
   11c92:	68bb      	ldr	r3, [r7, #8]
   11c94:	401a      	ands	r2, r3
   11c96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11c9a:	f04f 0101 	mov.w	r1, #1
   11c9e:	fa01 f303 	lsl.w	r3, r1, r3
   11ca2:	429a      	cmp	r2, r3
   11ca4:	d123      	bne.n	11cee <CSP_GPIO_Cfg+0x2ca>
            DEF_BIT_CLR(pin_mode_low, DEF_BIT_FIELD(2u, pin_bit_pos));
   11ca6:	697b      	ldr	r3, [r7, #20]
   11ca8:	f04f 0203 	mov.w	r2, #3
   11cac:	fa02 f303 	lsl.w	r3, r2, r3
   11cb0:	ea6f 0303 	mvn.w	r3, r3
   11cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11cb6:	4013      	ands	r3, r2
   11cb8:	627b      	str	r3, [r7, #36]	; 0x24
            DEF_BIT_CLR(pin_sel_low,  DEF_BIT_FIELD(2u, pin_bit_pos));
   11cba:	697b      	ldr	r3, [r7, #20]
   11cbc:	f04f 0203 	mov.w	r2, #3
   11cc0:	fa02 f303 	lsl.w	r3, r2, r3
   11cc4:	ea6f 0303 	mvn.w	r3, r3
   11cc8:	69fa      	ldr	r2, [r7, #28]
   11cca:	4013      	ands	r3, r2
   11ccc:	61fb      	str	r3, [r7, #28]

            DEF_BIT_SET(pin_mode_low, DEF_BIT_MASK(opt_pinmode, pin_bit_pos));
   11cce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   11cd2:	697b      	ldr	r3, [r7, #20]
   11cd4:	fa02 f303 	lsl.w	r3, r2, r3
   11cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11cda:	4313      	orrs	r3, r2
   11cdc:	627b      	str	r3, [r7, #36]	; 0x24
            DEF_BIT_SET(pin_sel_low,  DEF_BIT_MASK(opt_pinsel,  pin_bit_pos));
   11cde:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   11ce2:	697b      	ldr	r3, [r7, #20]
   11ce4:	fa02 f303 	lsl.w	r3, r2, r3
   11ce8:	69fa      	ldr	r2, [r7, #28]
   11cea:	4313      	orrs	r3, r2
   11cec:	61fb      	str	r3, [r7, #28]
        }
                                                             
        if (DEF_BIT_IS_SET(pins, DEF_BIT(pin_nbr + 16u))) {     /* Configure the pins 16 .. 32                          */
   11cee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11cf2:	f103 0310 	add.w	r3, r3, #16
   11cf6:	f04f 0201 	mov.w	r2, #1
   11cfa:	fa02 f203 	lsl.w	r2, r2, r3
   11cfe:	68bb      	ldr	r3, [r7, #8]
   11d00:	401a      	ands	r2, r3
   11d02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11d06:	f103 0310 	add.w	r3, r3, #16
   11d0a:	f04f 0101 	mov.w	r1, #1
   11d0e:	fa01 f303 	lsl.w	r3, r1, r3
   11d12:	429a      	cmp	r2, r3
   11d14:	d123      	bne.n	11d5e <CSP_GPIO_Cfg+0x33a>
            DEF_BIT_CLR(pin_mode_high, DEF_BIT_FIELD(2u, pin_bit_pos));
   11d16:	697b      	ldr	r3, [r7, #20]
   11d18:	f04f 0203 	mov.w	r2, #3
   11d1c:	fa02 f303 	lsl.w	r3, r2, r3
   11d20:	ea6f 0303 	mvn.w	r3, r3
   11d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11d26:	4013      	ands	r3, r2
   11d28:	62bb      	str	r3, [r7, #40]	; 0x28
            DEF_BIT_CLR(pin_sel_high,  DEF_BIT_FIELD(2u, pin_bit_pos));
   11d2a:	697b      	ldr	r3, [r7, #20]
   11d2c:	f04f 0203 	mov.w	r2, #3
   11d30:	fa02 f303 	lsl.w	r3, r2, r3
   11d34:	ea6f 0303 	mvn.w	r3, r3
   11d38:	6a3a      	ldr	r2, [r7, #32]
   11d3a:	4013      	ands	r3, r2
   11d3c:	623b      	str	r3, [r7, #32]

            DEF_BIT_SET(pin_mode_high, DEF_BIT_MASK(opt_pinmode, pin_bit_pos));        
   11d3e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   11d42:	697b      	ldr	r3, [r7, #20]
   11d44:	fa02 f303 	lsl.w	r3, r2, r3
   11d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11d4a:	4313      	orrs	r3, r2
   11d4c:	62bb      	str	r3, [r7, #40]	; 0x28
            DEF_BIT_SET(pin_sel_high,  DEF_BIT_MASK(opt_pinsel,  pin_bit_pos));                    
   11d4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   11d52:	697b      	ldr	r3, [r7, #20]
   11d54:	fa02 f303 	lsl.w	r3, r2, r3
   11d58:	6a3a      	ldr	r2, [r7, #32]
   11d5a:	4313      	orrs	r3, r2
   11d5c:	623b      	str	r3, [r7, #32]
    pin_mode_low  = CSP_GPIO_REG_PINMODELx(port_nbr);
    pin_mode_high = CSP_GPIO_REG_PINMODEHx(port_nbr);
    pin_sel_low   = CSP_GPIO_REG_PINSELLx(port_nbr);    
    pin_sel_high  = CSP_GPIO_REG_PINSELHx(port_nbr);
        
    for (pin_nbr = 0u; pin_nbr < 16u; pin_nbr++) {
   11d5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11d62:	f103 0301 	add.w	r3, r3, #1
   11d66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   11d6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11d6e:	2b0f      	cmp	r3, #15
   11d70:	d984      	bls.n	11c7c <CSP_GPIO_Cfg+0x258>
            DEF_BIT_SET(pin_mode_high, DEF_BIT_MASK(opt_pinmode, pin_bit_pos));        
            DEF_BIT_SET(pin_sel_high,  DEF_BIT_MASK(opt_pinsel,  pin_bit_pos));                    
        }    
    }
    
    CPU_CRITICAL_ENTER();
   11d72:	f006 f837 	bl	17de4 <CPU_SR_Save>
   11d76:	61b8      	str	r0, [r7, #24]
   11d78:	f7ef fd9e 	bl	18b8 <CPU_IntDisMeasStart>

    CSP_GPIO_REG_PINMODELx(port_nbr) = pin_mode_low;
   11d7c:	89fa      	ldrh	r2, [r7, #14]
   11d7e:	f645 0308 	movw	r3, #22536	; 0x5808
   11d82:	f6c0 0300 	movt	r3, #2048	; 0x800
   11d86:	18d3      	adds	r3, r2, r3
   11d88:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11d8e:	601a      	str	r2, [r3, #0]
    CSP_GPIO_REG_PINMODEHx(port_nbr) = pin_mode_high;
   11d90:	89fa      	ldrh	r2, [r7, #14]
   11d92:	f645 0308 	movw	r3, #22536	; 0x5808
   11d96:	f6c0 0300 	movt	r3, #2048	; 0x800
   11d9a:	18d3      	adds	r3, r2, r3
   11d9c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11da0:	f103 0304 	add.w	r3, r3, #4
   11da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11da6:	601a      	str	r2, [r3, #0]
    CSP_GPIO_REG_PINSELLx(port_nbr)  = pin_sel_low;
   11da8:	89fb      	ldrh	r3, [r7, #14]
   11daa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   11dae:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
   11db2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11db6:	69fa      	ldr	r2, [r7, #28]
   11db8:	601a      	str	r2, [r3, #0]
    CSP_GPIO_REG_PINSELHx(port_nbr)  = pin_sel_high;
   11dba:	89fb      	ldrh	r3, [r7, #14]
   11dbc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   11dc0:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
   11dc4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11dc8:	f103 0304 	add.w	r3, r3, #4
   11dcc:	6a3a      	ldr	r2, [r7, #32]
   11dce:	601a      	str	r2, [r3, #0]

    CPU_CRITICAL_EXIT();
   11dd0:	f7ef fd9e 	bl	1910 <CPU_IntDisMeasStop>
   11dd4:	69b8      	ldr	r0, [r7, #24]
   11dd6:	f006 f809 	bl	17dec <CPU_SR_Restore>

    if ((port_nbr == CSP_GPIO_PORT_NBR_00) ||
   11dda:	89fb      	ldrh	r3, [r7, #14]
   11ddc:	2b00      	cmp	r3, #0
   11dde:	d003      	beq.n	11de8 <CSP_GPIO_Cfg+0x3c4>
   11de0:	89fb      	ldrh	r3, [r7, #14]
   11de2:	2b02      	cmp	r3, #2
   11de4:	f040 814f 	bne.w	12086 <CSP_GPIO_Cfg+0x662>
        (port_nbr == CSP_GPIO_PORT_NBR_02)) {
        
        CPU_CRITICAL_ENTER();
   11de8:	f005 fffc 	bl	17de4 <CPU_SR_Save>
   11dec:	61b8      	str	r0, [r7, #24]
   11dee:	f7ef fd63 	bl	18b8 <CPU_IntDisMeasStart>
        
        if (int_en == DEF_YES) {
   11df2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   11df6:	2b01      	cmp	r3, #1
   11df8:	f040 810c 	bne.w	12014 <CSP_GPIO_Cfg+0x5f0>
            switch (int_pol) {
   11dfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   11dfe:	2b04      	cmp	r3, #4
   11e00:	f200 813b 	bhi.w	1207a <CSP_GPIO_Cfg+0x656>
   11e04:	a201      	add	r2, pc, #4	; (adr r2, 11e0c <CSP_GPIO_Cfg+0x3e8>)
   11e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11e0a:	bf00      	nop
   11e0c:	00011e21 	.word	0x00011e21
   11e10:	00011e67 	.word	0x00011e67
   11e14:	00011eb1 	.word	0x00011eb1
   11e18:	00011f1d 	.word	0x00011f1d
   11e1c:	00011f95 	.word	0x00011f95
                case CSP_INT_POL_LEVEL_HIGH:
                     DEF_BIT_CLR(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11e20:	f24c 1348 	movw	r3, #49480	; 0xc148
   11e24:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11e28:	f24c 1248 	movw	r2, #49480	; 0xc148
   11e2c:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11e30:	6811      	ldr	r1, [r2, #0]
   11e32:	68ba      	ldr	r2, [r7, #8]
   11e34:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11e38:	f002 020f 	and.w	r2, r2, #15
   11e3c:	ea6f 0202 	mvn.w	r2, r2
   11e40:	400a      	ands	r2, r1
   11e42:	601a      	str	r2, [r3, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u)); 
   11e44:	f24c 134c 	movw	r3, #49484	; 0xc14c
   11e48:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11e4c:	f24c 124c 	movw	r2, #49484	; 0xc14c
   11e50:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11e54:	6811      	ldr	r1, [r2, #0]
   11e56:	68ba      	ldr	r2, [r7, #8]
   11e58:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11e5c:	f002 020f 	and.w	r2, r2, #15
   11e60:	430a      	orrs	r2, r1
   11e62:	601a      	str	r2, [r3, #0]
                     break;
   11e64:	e10a      	b.n	1207c <CSP_GPIO_Cfg+0x658>

                case CSP_INT_POL_LEVEL_LOW:
                     DEF_BIT_CLR(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11e66:	f24c 1348 	movw	r3, #49480	; 0xc148
   11e6a:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11e6e:	f24c 1248 	movw	r2, #49480	; 0xc148
   11e72:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11e76:	6811      	ldr	r1, [r2, #0]
   11e78:	68ba      	ldr	r2, [r7, #8]
   11e7a:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11e7e:	f002 020f 	and.w	r2, r2, #15
   11e82:	ea6f 0202 	mvn.w	r2, r2
   11e86:	400a      	ands	r2, r1
   11e88:	601a      	str	r2, [r3, #0]
                     DEF_BIT_CLR(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11e8a:	f24c 134c 	movw	r3, #49484	; 0xc14c
   11e8e:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11e92:	f24c 124c 	movw	r2, #49484	; 0xc14c
   11e96:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11e9a:	6811      	ldr	r1, [r2, #0]
   11e9c:	68ba      	ldr	r2, [r7, #8]
   11e9e:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11ea2:	f002 020f 	and.w	r2, r2, #15
   11ea6:	ea6f 0202 	mvn.w	r2, r2
   11eaa:	400a      	ands	r2, r1
   11eac:	601a      	str	r2, [r3, #0]
                     break;
   11eae:	e0e5      	b.n	1207c <CSP_GPIO_Cfg+0x658>
                
                case CSP_INT_POL_EDGE_POSITIVE:
                     DEF_BIT_SET(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   11eb0:	89fa      	ldrh	r2, [r7, #14]
   11eb2:	f642 0309 	movw	r3, #10249	; 0x2809
   11eb6:	f2c0 4300 	movt	r3, #1024	; 0x400
   11eba:	18d3      	adds	r3, r2, r3
   11ebc:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11ec0:	461a      	mov	r2, r3
   11ec2:	89f9      	ldrh	r1, [r7, #14]
   11ec4:	f642 0309 	movw	r3, #10249	; 0x2809
   11ec8:	f2c0 4300 	movt	r3, #1024	; 0x400
   11ecc:	18cb      	adds	r3, r1, r3
   11ece:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11ed2:	6819      	ldr	r1, [r3, #0]
   11ed4:	68bb      	ldr	r3, [r7, #8]
   11ed6:	430b      	orrs	r3, r1
   11ed8:	6013      	str	r3, [r2, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11eda:	f24c 1348 	movw	r3, #49480	; 0xc148
   11ede:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11ee2:	f24c 1248 	movw	r2, #49480	; 0xc148
   11ee6:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11eea:	6811      	ldr	r1, [r2, #0]
   11eec:	68ba      	ldr	r2, [r7, #8]
   11eee:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11ef2:	f002 020f 	and.w	r2, r2, #15
   11ef6:	430a      	orrs	r2, r1
   11ef8:	601a      	str	r2, [r3, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u)); 
   11efa:	f24c 134c 	movw	r3, #49484	; 0xc14c
   11efe:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11f02:	f24c 124c 	movw	r2, #49484	; 0xc14c
   11f06:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11f0a:	6811      	ldr	r1, [r2, #0]
   11f0c:	68ba      	ldr	r2, [r7, #8]
   11f0e:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11f12:	f002 020f 	and.w	r2, r2, #15
   11f16:	430a      	orrs	r2, r1
   11f18:	601a      	str	r2, [r3, #0]
                     break;
   11f1a:	e0af      	b.n	1207c <CSP_GPIO_Cfg+0x658>

                case CSP_INT_POL_EDGE_NEGATIVE:
                     DEF_BIT_SET(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   11f1c:	89fa      	ldrh	r2, [r7, #14]
   11f1e:	f642 0308 	movw	r3, #10248	; 0x2808
   11f22:	f2c0 4300 	movt	r3, #1024	; 0x400
   11f26:	18d3      	adds	r3, r2, r3
   11f28:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11f2c:	f103 0314 	add.w	r3, r3, #20
   11f30:	461a      	mov	r2, r3
   11f32:	89f9      	ldrh	r1, [r7, #14]
   11f34:	f642 0308 	movw	r3, #10248	; 0x2808
   11f38:	f2c0 4300 	movt	r3, #1024	; 0x400
   11f3c:	18cb      	adds	r3, r1, r3
   11f3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11f42:	f103 0314 	add.w	r3, r3, #20
   11f46:	6819      	ldr	r1, [r3, #0]
   11f48:	68bb      	ldr	r3, [r7, #8]
   11f4a:	430b      	orrs	r3, r1
   11f4c:	6013      	str	r3, [r2, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11f4e:	f24c 1348 	movw	r3, #49480	; 0xc148
   11f52:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11f56:	f24c 1248 	movw	r2, #49480	; 0xc148
   11f5a:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11f5e:	6811      	ldr	r1, [r2, #0]
   11f60:	68ba      	ldr	r2, [r7, #8]
   11f62:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11f66:	f002 020f 	and.w	r2, r2, #15
   11f6a:	430a      	orrs	r2, r1
   11f6c:	601a      	str	r2, [r3, #0]
                     DEF_BIT_CLR(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11f6e:	f24c 134c 	movw	r3, #49484	; 0xc14c
   11f72:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11f76:	f24c 124c 	movw	r2, #49484	; 0xc14c
   11f7a:	f2c4 020f 	movt	r2, #16399	; 0x400f
   11f7e:	6811      	ldr	r1, [r2, #0]
   11f80:	68ba      	ldr	r2, [r7, #8]
   11f82:	ea4f 2292 	mov.w	r2, r2, lsr #10
   11f86:	f002 020f 	and.w	r2, r2, #15
   11f8a:	ea6f 0202 	mvn.w	r2, r2
   11f8e:	400a      	ands	r2, r1
   11f90:	601a      	str	r2, [r3, #0]
                     break;
   11f92:	e073      	b.n	1207c <CSP_GPIO_Cfg+0x658>

                case CSP_INT_POL_EDGE_BOTH:
                     DEF_BIT_SET(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   11f94:	89fa      	ldrh	r2, [r7, #14]
   11f96:	f642 0309 	movw	r3, #10249	; 0x2809
   11f9a:	f2c0 4300 	movt	r3, #1024	; 0x400
   11f9e:	18d3      	adds	r3, r2, r3
   11fa0:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11fa4:	461a      	mov	r2, r3
   11fa6:	89f9      	ldrh	r1, [r7, #14]
   11fa8:	f642 0309 	movw	r3, #10249	; 0x2809
   11fac:	f2c0 4300 	movt	r3, #1024	; 0x400
   11fb0:	18cb      	adds	r3, r1, r3
   11fb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11fb6:	6819      	ldr	r1, [r3, #0]
   11fb8:	68bb      	ldr	r3, [r7, #8]
   11fba:	430b      	orrs	r3, r1
   11fbc:	6013      	str	r3, [r2, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   11fbe:	89fa      	ldrh	r2, [r7, #14]
   11fc0:	f642 0308 	movw	r3, #10248	; 0x2808
   11fc4:	f2c0 4300 	movt	r3, #1024	; 0x400
   11fc8:	18d3      	adds	r3, r2, r3
   11fca:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11fce:	f103 0314 	add.w	r3, r3, #20
   11fd2:	461a      	mov	r2, r3
   11fd4:	89f9      	ldrh	r1, [r7, #14]
   11fd6:	f642 0308 	movw	r3, #10248	; 0x2808
   11fda:	f2c0 4300 	movt	r3, #1024	; 0x400
   11fde:	18cb      	adds	r3, r1, r3
   11fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
   11fe4:	f103 0314 	add.w	r3, r3, #20
   11fe8:	6819      	ldr	r1, [r3, #0]
   11fea:	68bb      	ldr	r3, [r7, #8]
   11fec:	430b      	orrs	r3, r1
   11fee:	6013      	str	r3, [r2, #0]
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   11ff0:	f24c 1348 	movw	r3, #49480	; 0xc148
   11ff4:	f2c4 030f 	movt	r3, #16399	; 0x400f
   11ff8:	f24c 1248 	movw	r2, #49480	; 0xc148
   11ffc:	f2c4 020f 	movt	r2, #16399	; 0x400f
   12000:	6811      	ldr	r1, [r2, #0]
   12002:	68ba      	ldr	r2, [r7, #8]
   12004:	ea4f 2292 	mov.w	r2, r2, lsr #10
   12008:	f002 020f 	and.w	r2, r2, #15
   1200c:	430a      	orrs	r2, r1
   1200e:	601a      	str	r2, [r3, #0]
                     break;
   12010:	bf00      	nop
   12012:	e033      	b.n	1207c <CSP_GPIO_Cfg+0x658>

                default:
                     break;
            }
        } else {
            DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   12014:	89fa      	ldrh	r2, [r7, #14]
   12016:	f642 0309 	movw	r3, #10249	; 0x2809
   1201a:	f2c0 4300 	movt	r3, #1024	; 0x400
   1201e:	18d3      	adds	r3, r2, r3
   12020:	ea4f 1303 	mov.w	r3, r3, lsl #4
   12024:	461a      	mov	r2, r3
   12026:	89f9      	ldrh	r1, [r7, #14]
   12028:	f642 0309 	movw	r3, #10249	; 0x2809
   1202c:	f2c0 4300 	movt	r3, #1024	; 0x400
   12030:	18cb      	adds	r3, r1, r3
   12032:	ea4f 1303 	mov.w	r3, r3, lsl #4
   12036:	6819      	ldr	r1, [r3, #0]
   12038:	68bb      	ldr	r3, [r7, #8]
   1203a:	ea6f 0303 	mvn.w	r3, r3
   1203e:	400b      	ands	r3, r1
   12040:	6013      	str	r3, [r2, #0]
            DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   12042:	89fa      	ldrh	r2, [r7, #14]
   12044:	f642 0308 	movw	r3, #10248	; 0x2808
   12048:	f2c0 4300 	movt	r3, #1024	; 0x400
   1204c:	18d3      	adds	r3, r2, r3
   1204e:	ea4f 1303 	mov.w	r3, r3, lsl #4
   12052:	f103 0314 	add.w	r3, r3, #20
   12056:	461a      	mov	r2, r3
   12058:	89f9      	ldrh	r1, [r7, #14]
   1205a:	f642 0308 	movw	r3, #10248	; 0x2808
   1205e:	f2c0 4300 	movt	r3, #1024	; 0x400
   12062:	18cb      	adds	r3, r1, r3
   12064:	ea4f 1303 	mov.w	r3, r3, lsl #4
   12068:	f103 0314 	add.w	r3, r3, #20
   1206c:	6819      	ldr	r1, [r3, #0]
   1206e:	68bb      	ldr	r3, [r7, #8]
   12070:	ea6f 0303 	mvn.w	r3, r3
   12074:	400b      	ands	r3, r1
   12076:	6013      	str	r3, [r2, #0]
   12078:	e000      	b.n	1207c <CSP_GPIO_Cfg+0x658>
                     DEF_BIT_SET(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
                     DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
                     break;

                default:
                     break;
   1207a:	bf00      	nop
        } else {
            DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
            DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
        }

        CPU_CRITICAL_EXIT();
   1207c:	f7ef fc48 	bl	1910 <CPU_IntDisMeasStop>
   12080:	69b8      	ldr	r0, [r7, #24]
   12082:	f005 feb3 	bl	17dec <CPU_SR_Restore>
    }

    return (DEF_OK);
   12086:	f04f 0301 	mov.w	r3, #1
}
   1208a:	4618      	mov	r0, r3
   1208c:	f107 0730 	add.w	r7, r7, #48	; 0x30
   12090:	46bd      	mov	sp, r7
   12092:	bd80      	pop	{r7, pc}

00012094 <CSP_GPIO_BitClr>:
*********************************************************************************************************
*/

void  CSP_GPIO_BitClr (CSP_DEV_NBR   port_nbr,
                       CSP_GPIO_MSK  pins)
{
   12094:	b580      	push	{r7, lr}
   12096:	b084      	sub	sp, #16
   12098:	af00      	add	r7, sp, #0
   1209a:	4603      	mov	r3, r0
   1209c:	6039      	str	r1, [r7, #0]
   1209e:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
   120a0:	f04f 0300 	mov.w	r3, #0
   120a4:	60fb      	str	r3, [r7, #12]


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   120a6:	88fb      	ldrh	r3, [r7, #6]
   120a8:	2b04      	cmp	r3, #4
   120aa:	d815      	bhi.n	120d8 <CSP_GPIO_BitClr+0x44>
        return;
    }
#endif
    
    CPU_CRITICAL_ENTER();
   120ac:	f005 fe9a 	bl	17de4 <CPU_SR_Save>
   120b0:	60f8      	str	r0, [r7, #12]
   120b2:	f7ef fc01 	bl	18b8 <CPU_IntDisMeasStart>
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins;            
   120b6:	88fb      	ldrh	r3, [r7, #6]
   120b8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   120bc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   120c0:	ea4f 1343 	mov.w	r3, r3, lsl #5
   120c4:	f103 031c 	add.w	r3, r3, #28
   120c8:	683a      	ldr	r2, [r7, #0]
   120ca:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   120cc:	f7ef fc20 	bl	1910 <CPU_IntDisMeasStop>
   120d0:	68f8      	ldr	r0, [r7, #12]
   120d2:	f005 fe8b 	bl	17dec <CPU_SR_Restore>
   120d6:	e000      	b.n	120da <CSP_GPIO_BitClr+0x46>
    CPU_SR_ALLOC();


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
        return;
   120d8:	bf00      	nop
#endif
    
    CPU_CRITICAL_ENTER();
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins;            
    CPU_CRITICAL_EXIT();
}
   120da:	f107 0710 	add.w	r7, r7, #16
   120de:	46bd      	mov	sp, r7
   120e0:	bd80      	pop	{r7, pc}
   120e2:	bf00      	nop

000120e4 <CSP_GPIO_BitSet>:
*********************************************************************************************************
*/

void  CSP_GPIO_BitSet (CSP_DEV_NBR    port_nbr,
                       CSP_GPIO_MSK  pins)
{
   120e4:	b580      	push	{r7, lr}
   120e6:	b084      	sub	sp, #16
   120e8:	af00      	add	r7, sp, #0
   120ea:	4603      	mov	r3, r0
   120ec:	6039      	str	r1, [r7, #0]
   120ee:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
   120f0:	f04f 0300 	mov.w	r3, #0
   120f4:	60fb      	str	r3, [r7, #12]

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   120f6:	88fb      	ldrh	r3, [r7, #6]
   120f8:	2b04      	cmp	r3, #4
   120fa:	d815      	bhi.n	12128 <CSP_GPIO_BitSet+0x44>
        return;
    }
#endif
    
    CPU_CRITICAL_ENTER();
   120fc:	f005 fe72 	bl	17de4 <CPU_SR_Save>
   12100:	60f8      	str	r0, [r7, #12]
   12102:	f7ef fbd9 	bl	18b8 <CPU_IntDisMeasStart>
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins;            
   12106:	88fb      	ldrh	r3, [r7, #6]
   12108:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   1210c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   12110:	ea4f 1343 	mov.w	r3, r3, lsl #5
   12114:	f103 0318 	add.w	r3, r3, #24
   12118:	683a      	ldr	r2, [r7, #0]
   1211a:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   1211c:	f7ef fbf8 	bl	1910 <CPU_IntDisMeasStop>
   12120:	68f8      	ldr	r0, [r7, #12]
   12122:	f005 fe63 	bl	17dec <CPU_SR_Restore>
   12126:	e000      	b.n	1212a <CSP_GPIO_BitSet+0x46>
{
    CPU_SR_ALLOC();

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
        return;
   12128:	bf00      	nop
#endif
    
    CPU_CRITICAL_ENTER();
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins;            
    CPU_CRITICAL_EXIT();
}
   1212a:	f107 0710 	add.w	r7, r7, #16
   1212e:	46bd      	mov	sp, r7
   12130:	bd80      	pop	{r7, pc}
   12132:	bf00      	nop

00012134 <CSP_GPIO_BitToggle>:
*********************************************************************************************************
*/

void  CSP_GPIO_BitToggle (CSP_DEV_NBR    port_nbr,
                          CSP_GPIO_MSK  pins)                          
{
   12134:	b580      	push	{r7, lr}
   12136:	b086      	sub	sp, #24
   12138:	af00      	add	r7, sp, #0
   1213a:	4603      	mov	r3, r0
   1213c:	6039      	str	r1, [r7, #0]
   1213e:	80fb      	strh	r3, [r7, #6]
    CSP_GPIO_MSK  pins_set;
    CSP_GPIO_MSK  pins_clr;
    CPU_SR_ALLOC();
   12140:	f04f 0300 	mov.w	r3, #0
   12144:	617b      	str	r3, [r7, #20]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)    
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   12146:	88fb      	ldrh	r3, [r7, #6]
   12148:	2b04      	cmp	r3, #4
   1214a:	d83c      	bhi.n	121c6 <CSP_GPIO_BitToggle+0x92>
        return;
    }
#endif
    
    pins_clr                       =  (CSP_GPIO_REG_FIOPINx(port_nbr)) & pins;    
   1214c:	88fb      	ldrh	r3, [r7, #6]
   1214e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   12152:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   12156:	ea4f 1343 	mov.w	r3, r3, lsl #5
   1215a:	f103 0314 	add.w	r3, r3, #20
   1215e:	681a      	ldr	r2, [r3, #0]
   12160:	683b      	ldr	r3, [r7, #0]
   12162:	4013      	ands	r3, r2
   12164:	613b      	str	r3, [r7, #16]
    pins_set                       = ~(CSP_GPIO_REG_FIOPINx(port_nbr)) & pins;
   12166:	88fb      	ldrh	r3, [r7, #6]
   12168:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   1216c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   12170:	ea4f 1343 	mov.w	r3, r3, lsl #5
   12174:	f103 0314 	add.w	r3, r3, #20
   12178:	681b      	ldr	r3, [r3, #0]
   1217a:	ea6f 0203 	mvn.w	r2, r3
   1217e:	683b      	ldr	r3, [r7, #0]
   12180:	4013      	ands	r3, r2
   12182:	60fb      	str	r3, [r7, #12]
    
    CPU_CRITICAL_ENTER();
   12184:	f005 fe2e 	bl	17de4 <CPU_SR_Save>
   12188:	6178      	str	r0, [r7, #20]
   1218a:	f7ef fb95 	bl	18b8 <CPU_IntDisMeasStart>
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
   1218e:	88fb      	ldrh	r3, [r7, #6]
   12190:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   12194:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   12198:	ea4f 1343 	mov.w	r3, r3, lsl #5
   1219c:	f103 031c 	add.w	r3, r3, #28
   121a0:	693a      	ldr	r2, [r7, #16]
   121a2:	601a      	str	r2, [r3, #0]
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;    
   121a4:	88fb      	ldrh	r3, [r7, #6]
   121a6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   121aa:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   121ae:	ea4f 1343 	mov.w	r3, r3, lsl #5
   121b2:	f103 0318 	add.w	r3, r3, #24
   121b6:	68fa      	ldr	r2, [r7, #12]
   121b8:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
   121ba:	f7ef fba9 	bl	1910 <CPU_IntDisMeasStop>
   121be:	6978      	ldr	r0, [r7, #20]
   121c0:	f005 fe14 	bl	17dec <CPU_SR_Restore>
   121c4:	e000      	b.n	121c8 <CSP_GPIO_BitToggle+0x94>
    CSP_GPIO_MSK  pins_clr;
    CPU_SR_ALLOC();
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)    
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
        return;
   121c6:	bf00      	nop
    
    CPU_CRITICAL_ENTER();
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;    
    CPU_CRITICAL_EXIT();
}
   121c8:	f107 0718 	add.w	r7, r7, #24
   121cc:	46bd      	mov	sp, r7
   121ce:	bd80      	pop	{r7, pc}

000121d0 <CSP_GPIO_Rd>:
* Note(s)     : none.                   
*********************************************************************************************************
*/

CSP_GPIO_MSK  CSP_GPIO_Rd (CSP_DEV_NBR  port_nbr)
{
   121d0:	b480      	push	{r7}
   121d2:	b085      	sub	sp, #20
   121d4:	af00      	add	r7, sp, #0
   121d6:	4603      	mov	r3, r0
   121d8:	80fb      	strh	r3, [r7, #6]
    CSP_GPIO_MSK  port_val;


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   121da:	88fb      	ldrh	r3, [r7, #6]
   121dc:	2b04      	cmp	r3, #4
   121de:	d902      	bls.n	121e6 <CSP_GPIO_Rd+0x16>
        return (CSP_GPIO_MSK)(0);
   121e0:	f04f 0300 	mov.w	r3, #0
   121e4:	e00b      	b.n	121fe <CSP_GPIO_Rd+0x2e>
    }
#endif

    port_val = CSP_GPIO_REG_FIOPINx(port_nbr);
   121e6:	88fb      	ldrh	r3, [r7, #6]
   121e8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   121ec:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   121f0:	ea4f 1343 	mov.w	r3, r3, lsl #5
   121f4:	f103 0314 	add.w	r3, r3, #20
   121f8:	681b      	ldr	r3, [r3, #0]
   121fa:	60fb      	str	r3, [r7, #12]
    
    return (port_val);
   121fc:	68fb      	ldr	r3, [r7, #12]
}
   121fe:	4618      	mov	r0, r3
   12200:	f107 0714 	add.w	r7, r7, #20
   12204:	46bd      	mov	sp, r7
   12206:	bc80      	pop	{r7}
   12208:	4770      	bx	lr
   1220a:	bf00      	nop

0001220c <CSP_GPIO_Wr>:
*********************************************************************************************************
*/

void  CSP_GPIO_Wr (CSP_DEV_NBR   port_nbr,
                   CSP_GPIO_MSK  val)
{
   1220c:	b480      	push	{r7}
   1220e:	b085      	sub	sp, #20
   12210:	af00      	add	r7, sp, #0
   12212:	4603      	mov	r3, r0
   12214:	6039      	str	r1, [r7, #0]
   12216:	80fb      	strh	r3, [r7, #6]
    CPU_INT32U  pins_clr;
    CPU_INT32U  pins_set;
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   12218:	88fb      	ldrh	r3, [r7, #6]
   1221a:	2b04      	cmp	r3, #4
   1221c:	d81c      	bhi.n	12258 <CSP_GPIO_Wr+0x4c>
        return;
    }
#endif
    
    pins_set =  val;
   1221e:	683b      	ldr	r3, [r7, #0]
   12220:	60fb      	str	r3, [r7, #12]
    pins_clr = ~val;
   12222:	683b      	ldr	r3, [r7, #0]
   12224:	ea6f 0303 	mvn.w	r3, r3
   12228:	60bb      	str	r3, [r7, #8]
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;
   1222a:	88fb      	ldrh	r3, [r7, #6]
   1222c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   12230:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   12234:	ea4f 1343 	mov.w	r3, r3, lsl #5
   12238:	f103 0318 	add.w	r3, r3, #24
   1223c:	68fa      	ldr	r2, [r7, #12]
   1223e:	601a      	str	r2, [r3, #0]
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
   12240:	88fb      	ldrh	r3, [r7, #6]
   12242:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   12246:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
   1224a:	ea4f 1343 	mov.w	r3, r3, lsl #5
   1224e:	f103 031c 	add.w	r3, r3, #28
   12252:	68ba      	ldr	r2, [r7, #8]
   12254:	601a      	str	r2, [r3, #0]
   12256:	e000      	b.n	1225a <CSP_GPIO_Wr+0x4e>
    CPU_INT32U  pins_clr;
    CPU_INT32U  pins_set;
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (port_nbr > CSP_GPIO_PORT_NBR_04) {
        return;
   12258:	bf00      	nop
    
    pins_set =  val;
    pins_clr = ~val;
    CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;
    CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
}
   1225a:	f107 0714 	add.w	r7, r7, #20
   1225e:	46bd      	mov	sp, r7
   12260:	bc80      	pop	{r7}
   12262:	4770      	bx	lr

00012264 <CSP_GPIO_IntClr>:
* Note(s)     : None.
*********************************************************************************************************
*/

CSP_GPIO_MSK  CSP_GPIO_IntClr (CSP_DEV_NBR  port_nbr)
{
   12264:	b480      	push	{r7}
   12266:	b085      	sub	sp, #20
   12268:	af00      	add	r7, sp, #0
   1226a:	4603      	mov	r3, r0
   1226c:	80fb      	strh	r3, [r7, #6]
    CPU_INT32U   int_stat;
    

    int_stat = DEF_BIT_NONE;
   1226e:	f04f 0300 	mov.w	r3, #0
   12272:	60fb      	str	r3, [r7, #12]
    
    switch (port_nbr) {
   12274:	88fb      	ldrh	r3, [r7, #6]
   12276:	2b04      	cmp	r3, #4
   12278:	f200 80da 	bhi.w	12430 <CSP_GPIO_IntClr+0x1cc>
   1227c:	a201      	add	r2, pc, #4	; (adr r2, 12284 <CSP_GPIO_IntClr+0x20>)
   1227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12282:	bf00      	nop
   12284:	00012299 	.word	0x00012299
   12288:	00012431 	.word	0x00012431
   1228c:	000122db 	.word	0x000122db
   12290:	00012431 	.word	0x00012431
   12294:	00012431 	.word	0x00012431
        case CSP_GPIO_PORT_NBR_03:
        case CSP_GPIO_PORT_NBR_04:
             break;

        case CSP_GPIO_PORT_NBR_00:
             if (DEF_BIT_IS_CLR(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
   12298:	f248 0380 	movw	r3, #32896	; 0x8080
   1229c:	f2c4 0302 	movt	r3, #16386	; 0x4002
   122a0:	681b      	ldr	r3, [r3, #0]
   122a2:	f003 0301 	and.w	r3, r3, #1
   122a6:	b2db      	uxtb	r3, r3
   122a8:	2b00      	cmp	r3, #0
   122aa:	d002      	beq.n	122b2 <CSP_GPIO_IntClr+0x4e>
   122ac:	f04f 0300 	mov.w	r3, #0
   122b0:	e001      	b.n	122b6 <CSP_GPIO_IntClr+0x52>
   122b2:	f04f 0301 	mov.w	r3, #1
   122b6:	2b00      	cmp	r3, #0
   122b8:	f040 80bc 	bne.w	12434 <CSP_GPIO_IntClr+0x1d0>
                 break;
             }
             int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_00);
   122bc:	f248 0384 	movw	r3, #32900	; 0x8084
   122c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
   122c4:	681b      	ldr	r3, [r3, #0]
   122c6:	60fb      	str	r3, [r7, #12]
             int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_00);             
   122c8:	f248 0388 	movw	r3, #32904	; 0x8088
   122cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
   122d0:	681b      	ldr	r3, [r3, #0]
   122d2:	68fa      	ldr	r2, [r7, #12]
   122d4:	4313      	orrs	r3, r2
   122d6:	60fb      	str	r3, [r7, #12]
             break;
   122d8:	e0af      	b.n	1243a <CSP_GPIO_IntClr+0x1d6>

        case CSP_GPIO_PORT_NBR_02:
             if (DEF_BIT_IS_SET(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
   122da:	f248 0380 	movw	r3, #32896	; 0x8080
   122de:	f2c4 0302 	movt	r3, #16386	; 0x4002
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	f003 0301 	and.w	r3, r3, #1
   122e8:	b2db      	uxtb	r3, r3
   122ea:	2b00      	cmp	r3, #0
   122ec:	d00d      	beq.n	1230a <CSP_GPIO_IntClr+0xa6>
                 int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_02);
   122ee:	f248 03a4 	movw	r3, #32932	; 0x80a4
   122f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
   122f6:	681b      	ldr	r3, [r3, #0]
   122f8:	60fb      	str	r3, [r7, #12]
                 int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_02);
   122fa:	f248 03a8 	movw	r3, #32936	; 0x80a8
   122fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	68fa      	ldr	r2, [r7, #12]
   12306:	4313      	orrs	r3, r2
   12308:	60fb      	str	r3, [r7, #12]
             }
             
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 20u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   1230a:	f24c 0310 	movw	r3, #49168	; 0xc010
   1230e:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12312:	681b      	ldr	r3, [r3, #0]
   12314:	ea4f 5313 	mov.w	r3, r3, lsr #20
   12318:	f003 0303 	and.w	r3, r3, #3
   1231c:	2b01      	cmp	r3, #1
   1231e:	d11a      	bne.n	12356 <CSP_GPIO_IntClr+0xf2>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
   12320:	f24c 1348 	movw	r3, #49480	; 0xc148
   12324:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12328:	681b      	ldr	r3, [r3, #0]
   1232a:	f003 0301 	and.w	r3, r3, #1
   1232e:	b2db      	uxtb	r3, r3
             if (DEF_BIT_IS_SET(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
                 int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_02);
                 int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_02);
             }
             
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 20u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   12330:	2b00      	cmp	r3, #0
   12332:	d010      	beq.n	12356 <CSP_GPIO_IntClr+0xf2>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_00)                            == DEF_YES)) {
   12334:	f24c 1340 	movw	r3, #49472	; 0xc140
   12338:	f2c4 030f 	movt	r3, #16399	; 0x400f
   1233c:	681b      	ldr	r3, [r3, #0]
   1233e:	f003 0301 	and.w	r3, r3, #1
   12342:	b2db      	uxtb	r3, r3
                 int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_02);
                 int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_02);
             }
             
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 20u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
   12344:	2b00      	cmp	r3, #0
   12346:	d006      	beq.n	12356 <CSP_GPIO_IntClr+0xf2>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_00)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_00;
   12348:	f24c 1340 	movw	r3, #49472	; 0xc140
   1234c:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12350:	f04f 0201 	mov.w	r2, #1
   12354:	601a      	str	r2, [r3, #0]
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 22u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   12356:	f24c 0310 	movw	r3, #49168	; 0xc010
   1235a:	f2c4 0302 	movt	r3, #16386	; 0x4002
   1235e:	681b      	ldr	r3, [r3, #0]
   12360:	ea4f 5393 	mov.w	r3, r3, lsr #22
   12364:	f003 0303 	and.w	r3, r3, #3
   12368:	2b01      	cmp	r3, #1
   1236a:	d118      	bne.n	1239e <CSP_GPIO_IntClr+0x13a>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
   1236c:	f24c 1348 	movw	r3, #49480	; 0xc148
   12370:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12374:	681b      	ldr	r3, [r3, #0]
   12376:	f003 0302 	and.w	r3, r3, #2
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 20u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_00)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_00;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 22u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   1237a:	2b00      	cmp	r3, #0
   1237c:	d00f      	beq.n	1239e <CSP_GPIO_IntClr+0x13a>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_01)                            == DEF_YES)) {
   1237e:	f24c 1340 	movw	r3, #49472	; 0xc140
   12382:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12386:	681b      	ldr	r3, [r3, #0]
   12388:	f003 0302 	and.w	r3, r3, #2
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_00)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_00;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 22u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
   1238c:	2b00      	cmp	r3, #0
   1238e:	d006      	beq.n	1239e <CSP_GPIO_IntClr+0x13a>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_01)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_01;
   12390:	f24c 1340 	movw	r3, #49472	; 0xc140
   12394:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12398:	f04f 0202 	mov.w	r2, #2
   1239c:	601a      	str	r2, [r3, #0]
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 24u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   1239e:	f24c 0310 	movw	r3, #49168	; 0xc010
   123a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
   123a6:	681b      	ldr	r3, [r3, #0]
   123a8:	ea4f 6313 	mov.w	r3, r3, lsr #24
   123ac:	f003 0303 	and.w	r3, r3, #3
   123b0:	2b01      	cmp	r3, #1
   123b2:	d118      	bne.n	123e6 <CSP_GPIO_IntClr+0x182>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
   123b4:	f24c 1348 	movw	r3, #49480	; 0xc148
   123b8:	f2c4 030f 	movt	r3, #16399	; 0x400f
   123bc:	681b      	ldr	r3, [r3, #0]
   123be:	f003 0304 	and.w	r3, r3, #4
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 22u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_01)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_01;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 24u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   123c2:	2b00      	cmp	r3, #0
   123c4:	d00f      	beq.n	123e6 <CSP_GPIO_IntClr+0x182>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_02)                            == DEF_YES)) {
   123c6:	f24c 1340 	movw	r3, #49472	; 0xc140
   123ca:	f2c4 030f 	movt	r3, #16399	; 0x400f
   123ce:	681b      	ldr	r3, [r3, #0]
   123d0:	f003 0304 	and.w	r3, r3, #4
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_01)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_01;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 24u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
   123d4:	2b00      	cmp	r3, #0
   123d6:	d006      	beq.n	123e6 <CSP_GPIO_IntClr+0x182>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_02)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_02;
   123d8:	f24c 1340 	movw	r3, #49472	; 0xc140
   123dc:	f2c4 030f 	movt	r3, #16399	; 0x400f
   123e0:	f04f 0204 	mov.w	r2, #4
   123e4:	601a      	str	r2, [r3, #0]
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 27u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   123e6:	f24c 0310 	movw	r3, #49168	; 0xc010
   123ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
   123ee:	681b      	ldr	r3, [r3, #0]
   123f0:	ea4f 63d3 	mov.w	r3, r3, lsr #27
   123f4:	f003 0303 	and.w	r3, r3, #3
   123f8:	2b01      	cmp	r3, #1
   123fa:	d11d      	bne.n	12438 <CSP_GPIO_IntClr+0x1d4>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_03)                            == DEF_YES) &&
   123fc:	f24c 1348 	movw	r3, #49480	; 0xc148
   12400:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	f003 0308 	and.w	r3, r3, #8
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 24u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_02)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_02;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 27u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
   1240a:	2b00      	cmp	r3, #0
   1240c:	d014      	beq.n	12438 <CSP_GPIO_IntClr+0x1d4>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_03)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_03)                            == DEF_YES)) {
   1240e:	f24c 1340 	movw	r3, #49472	; 0xc140
   12412:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12416:	681b      	ldr	r3, [r3, #0]
   12418:	f003 0308 	and.w	r3, r3, #8
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_02)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_02;
             }
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 27u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_03)                            == DEF_YES) &&
   1241c:	2b00      	cmp	r3, #0
   1241e:	d00b      	beq.n	12438 <CSP_GPIO_IntClr+0x1d4>
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_03)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_03;
   12420:	f24c 1340 	movw	r3, #49472	; 0xc140
   12424:	f2c4 030f 	movt	r3, #16399	; 0x400f
   12428:	f04f 0208 	mov.w	r2, #8
   1242c:	601a      	str	r2, [r3, #0]
             }             
             break;
   1242e:	e003      	b.n	12438 <CSP_GPIO_IntClr+0x1d4>
        
        default:
             break;
   12430:	bf00      	nop
   12432:	e002      	b.n	1243a <CSP_GPIO_IntClr+0x1d6>
        case CSP_GPIO_PORT_NBR_04:
             break;

        case CSP_GPIO_PORT_NBR_00:
             if (DEF_BIT_IS_CLR(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
                 break;
   12434:	bf00      	nop
   12436:	e000      	b.n	1243a <CSP_GPIO_IntClr+0x1d6>
             if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 27u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_03)                            == DEF_YES) &&
                   (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_03)                            == DEF_YES)) {
                 CSP_GPIO_REG_EXT_INT = DEF_BIT_03;
             }             
             break;
   12438:	bf00      	nop
        default:
             break;
        
    }

    if (int_stat != DEF_BIT_NONE) {
   1243a:	68fb      	ldr	r3, [r7, #12]
   1243c:	2b00      	cmp	r3, #0
   1243e:	d00b      	beq.n	12458 <CSP_GPIO_IntClr+0x1f4>
        CSP_GPIO_REG_INT_CLR(port_nbr) = int_stat;
   12440:	88fa      	ldrh	r2, [r7, #6]
   12442:	f642 0308 	movw	r3, #10248	; 0x2808
   12446:	f2c0 4300 	movt	r3, #1024	; 0x400
   1244a:	18d3      	adds	r3, r2, r3
   1244c:	ea4f 1303 	mov.w	r3, r3, lsl #4
   12450:	f103 030c 	add.w	r3, r3, #12
   12454:	68fa      	ldr	r2, [r7, #12]
   12456:	601a      	str	r2, [r3, #0]
    }

    return (int_stat);
   12458:	68fb      	ldr	r3, [r7, #12]
}
   1245a:	4618      	mov	r0, r3
   1245c:	f107 0714 	add.w	r7, r7, #20
   12460:	46bd      	mov	sp, r7
   12462:	bc80      	pop	{r7}
   12464:	4770      	bx	lr
   12466:	bf00      	nop

00012468 <CSP_TmrInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_TmrInit (void)
{
   12468:	b580      	push	{r7, lr}
   1246a:	b084      	sub	sp, #16
   1246c:	af00      	add	r7, sp, #0
    CSP_DEV_NBR  per_nbr;
    CSP_DEV_NBR  tmr_nbr;
    CSP_TMR_REG  *p_tmr_reg;
    CPU_SR_ALLOC();
   1246e:	f04f 0300 	mov.w	r3, #0
   12472:	60bb      	str	r3, [r7, #8]


    for (tmr_nbr = CSP_TMR_NBR_00; tmr_nbr <= CSP_TMR_NBR_03; tmr_nbr++) {
   12474:	f04f 0300 	mov.w	r3, #0
   12478:	81fb      	strh	r3, [r7, #14]
   1247a:	e045      	b.n	12508 <CSP_TmrInit+0xa0>
        p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   1247c:	89fa      	ldrh	r2, [r7, #14]
   1247e:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12482:	f2c0 0302 	movt	r3, #2
   12486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1248a:	607b      	str	r3, [r7, #4]
        per_nbr   = (CSP_DEV_NBR  )CSP_TmrPerTbl[tmr_nbr];
   1248c:	89fa      	ldrh	r2, [r7, #14]
   1248e:	f64c 337c 	movw	r3, #52092	; 0xcb7c
   12492:	f2c0 0302 	movt	r3, #2
   12496:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1249a:	807b      	strh	r3, [r7, #2]
        
        CPU_CRITICAL_ENTER();
   1249c:	f005 fca2 	bl	17de4 <CPU_SR_Save>
   124a0:	60b8      	str	r0, [r7, #8]
   124a2:	f7ef fa09 	bl	18b8 <CPU_IntDisMeasStart>
        CSP_PM_PerClkEn(per_nbr);
   124a6:	887b      	ldrh	r3, [r7, #2]
   124a8:	4618      	mov	r0, r3
   124aa:	f003 fcbb 	bl	15e24 <CSP_PM_PerClkEn>
        p_tmr_reg->MCR    = DEF_BIT_NONE;
   124ae:	687b      	ldr	r3, [r7, #4]
   124b0:	f04f 0200 	mov.w	r2, #0
   124b4:	615a      	str	r2, [r3, #20]
        p_tmr_reg->MRx[0] = 0u;
   124b6:	687b      	ldr	r3, [r7, #4]
   124b8:	f04f 0200 	mov.w	r2, #0
   124bc:	619a      	str	r2, [r3, #24]
        p_tmr_reg->MRx[1] = 0u;
   124be:	687b      	ldr	r3, [r7, #4]
   124c0:	f04f 0200 	mov.w	r2, #0
   124c4:	61da      	str	r2, [r3, #28]
        p_tmr_reg->MRx[2] = 0u;
   124c6:	687b      	ldr	r3, [r7, #4]
   124c8:	f04f 0200 	mov.w	r2, #0
   124cc:	621a      	str	r2, [r3, #32]
        p_tmr_reg->IR     = DEF_BIT_FIELD(5u, 0u);
   124ce:	687b      	ldr	r3, [r7, #4]
   124d0:	f04f 021f 	mov.w	r2, #31
   124d4:	601a      	str	r2, [r3, #0]
        p_tmr_reg->TCR    = DEF_BIT_NONE;        
   124d6:	687b      	ldr	r3, [r7, #4]
   124d8:	f04f 0200 	mov.w	r2, #0
   124dc:	605a      	str	r2, [r3, #4]
        p_tmr_reg->MCR    = DEF_BIT_NONE;
   124de:	687b      	ldr	r3, [r7, #4]
   124e0:	f04f 0200 	mov.w	r2, #0
   124e4:	615a      	str	r2, [r3, #20]
        p_tmr_reg->EMR    = DEF_BIT_NONE;
   124e6:	687b      	ldr	r3, [r7, #4]
   124e8:	f04f 0200 	mov.w	r2, #0
   124ec:	63da      	str	r2, [r3, #60]	; 0x3c
        CSP_PM_PerClkDis(per_nbr);        
   124ee:	887b      	ldrh	r3, [r7, #2]
   124f0:	4618      	mov	r0, r3
   124f2:	f003 fcd1 	bl	15e98 <CSP_PM_PerClkDis>
        CPU_CRITICAL_EXIT();
   124f6:	f7ef fa0b 	bl	1910 <CPU_IntDisMeasStop>
   124fa:	68b8      	ldr	r0, [r7, #8]
   124fc:	f005 fc76 	bl	17dec <CPU_SR_Restore>
    CSP_DEV_NBR  tmr_nbr;
    CSP_TMR_REG  *p_tmr_reg;
    CPU_SR_ALLOC();


    for (tmr_nbr = CSP_TMR_NBR_00; tmr_nbr <= CSP_TMR_NBR_03; tmr_nbr++) {
   12500:	89fb      	ldrh	r3, [r7, #14]
   12502:	f103 0301 	add.w	r3, r3, #1
   12506:	81fb      	strh	r3, [r7, #14]
   12508:	89fb      	ldrh	r3, [r7, #14]
   1250a:	2b03      	cmp	r3, #3
   1250c:	d9b6      	bls.n	1247c <CSP_TmrInit+0x14>
        p_tmr_reg->MCR    = DEF_BIT_NONE;
        p_tmr_reg->EMR    = DEF_BIT_NONE;
        CSP_PM_PerClkDis(per_nbr);        
        CPU_CRITICAL_EXIT();
    }
}
   1250e:	f107 0710 	add.w	r7, r7, #16
   12512:	46bd      	mov	sp, r7
   12514:	bd80      	pop	{r7, pc}
   12516:	bf00      	nop

00012518 <CSP_TmrCfg>:
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_TmrCfg (CSP_DEV_NBR   tmr_nbr,
                         CPU_INT32U    freq)
{
   12518:	b580      	push	{r7, lr}
   1251a:	b088      	sub	sp, #32
   1251c:	af00      	add	r7, sp, #0
   1251e:	4603      	mov	r3, r0
   12520:	6039      	str	r1, [r7, #0]
   12522:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_REG  *p_tmr_reg;
    CPU_INT32U    match_val;
    CPU_INT32U    per_freq;
    CSP_DEV_NBR   per_nbr;    
    CPU_SR_ALLOC();
   12524:	f04f 0300 	mov.w	r3, #0
   12528:	61fb      	str	r3, [r7, #28]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    if (tmr_nbr > CSP_TMR_NBR_03) {
   1252a:	88fb      	ldrh	r3, [r7, #6]
   1252c:	2b03      	cmp	r3, #3
   1252e:	d902      	bls.n	12536 <CSP_TmrCfg+0x1e>
        return (DEF_FAIL);
   12530:	f04f 0300 	mov.w	r3, #0
   12534:	e090      	b.n	12658 <CSP_TmrCfg+0x140>
    }
#endif

    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   12536:	88fa      	ldrh	r2, [r7, #6]
   12538:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   1253c:	f2c0 0302 	movt	r3, #2
   12540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12544:	61bb      	str	r3, [r7, #24]
    per_nbr   = (CSP_DEV_NBR  )CSP_TmrPerTbl[tmr_nbr];    
   12546:	88fa      	ldrh	r2, [r7, #6]
   12548:	f64c 337c 	movw	r3, #52092	; 0xcb7c
   1254c:	f2c0 0302 	movt	r3, #2
   12550:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   12554:	82fb      	strh	r3, [r7, #22]
    
    if (freq == 0u) {                                           /* -------- FREE RUNNING TIMER CONFIGURATION --------- */
   12556:	683b      	ldr	r3, [r7, #0]
   12558:	2b00      	cmp	r3, #0
   1255a:	d124      	bne.n	125a6 <CSP_TmrCfg+0x8e>
        CSP_PM_PerClkEn(per_nbr);                               /* Enable peripheral clock                             */                                                               
   1255c:	8afb      	ldrh	r3, [r7, #22]
   1255e:	4618      	mov	r0, r3
   12560:	f003 fc60 	bl	15e24 <CSP_PM_PerClkEn>
        
        CPU_CRITICAL_ENTER();        
   12564:	f005 fc3e 	bl	17de4 <CPU_SR_Save>
   12568:	61f8      	str	r0, [r7, #28]
   1256a:	f7ef f9a5 	bl	18b8 <CPU_IntDisMeasStart>
        p_tmr_reg->MCR = DEF_BIT_NONE;                          /* Disable theInterrupt, Reset and Stop feauture on    */
   1256e:	69bb      	ldr	r3, [r7, #24]
   12570:	f04f 0200 	mov.w	r2, #0
   12574:	615a      	str	r2, [r3, #20]
                                                                /* ... Match channels.                                 */
        
        DEF_BIT_CLR(p_tmr_reg->TCR, CSP_TMR_MASK_TCR_MODE);     /* Clear the Mode.                                     */
   12576:	69bb      	ldr	r3, [r7, #24]
   12578:	685b      	ldr	r3, [r3, #4]
   1257a:	f023 0203 	bic.w	r2, r3, #3
   1257e:	69bb      	ldr	r3, [r7, #24]
   12580:	605a      	str	r2, [r3, #4]
        DEF_BIT_SET(p_tmr_reg->TCR, CSP_TMR_BIT_TCR_TMR_MODE);  /* Set the Timer Mode.                                 */
   12582:	69bb      	ldr	r3, [r7, #24]
   12584:	685a      	ldr	r2, [r3, #4]
   12586:	69bb      	ldr	r3, [r7, #24]
   12588:	605a      	str	r2, [r3, #4]
        
        p_tmr_reg->PR  = 0u;                                    /* Set the prescaler to 0.                             */
   1258a:	69bb      	ldr	r3, [r7, #24]
   1258c:	f04f 0200 	mov.w	r2, #0
   12590:	60da      	str	r2, [r3, #12]
        p_tmr_reg->TCR = CSP_TMR_BIT_CR_RST;                    /* Reset the timer.                                    */
   12592:	69bb      	ldr	r3, [r7, #24]
   12594:	f04f 0202 	mov.w	r2, #2
   12598:	605a      	str	r2, [r3, #4]
        CPU_CRITICAL_EXIT();
   1259a:	f7ef f9b9 	bl	1910 <CPU_IntDisMeasStop>
   1259e:	69f8      	ldr	r0, [r7, #28]
   125a0:	f005 fc24 	bl	17dec <CPU_SR_Restore>
   125a4:	e056      	b.n	12654 <CSP_TmrCfg+0x13c>

    } else {                                                    /* ---------- PERIODIC TIMER CONFIGURATION ----------- */
        per_freq = CSP_PM_PerClkFreqGet(per_nbr);               /* Get the peripheral clock.                           */
   125a6:	8afb      	ldrh	r3, [r7, #22]
   125a8:	4618      	mov	r0, r3
   125aa:	f003 fcb1 	bl	15f10 <CSP_PM_PerClkFreqGet>
   125ae:	6138      	str	r0, [r7, #16]

        if (freq > per_freq) {
   125b0:	683a      	ldr	r2, [r7, #0]
   125b2:	693b      	ldr	r3, [r7, #16]
   125b4:	429a      	cmp	r2, r3
   125b6:	d902      	bls.n	125be <CSP_TmrCfg+0xa6>
            return (DEF_FAIL);
   125b8:	f04f 0300 	mov.w	r3, #0
   125bc:	e04c      	b.n	12658 <CSP_TmrCfg+0x140>
        }

        match_val = ((2u * per_freq / freq) + 1u) / 2u;
   125be:	693b      	ldr	r3, [r7, #16]
   125c0:	ea4f 0243 	mov.w	r2, r3, lsl #1
   125c4:	683b      	ldr	r3, [r7, #0]
   125c6:	fbb2 f3f3 	udiv	r3, r2, r3
   125ca:	f103 0301 	add.w	r3, r3, #1
   125ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
   125d2:	60fb      	str	r3, [r7, #12]
        if (match_val == 0u) {
   125d4:	68fb      	ldr	r3, [r7, #12]
   125d6:	2b00      	cmp	r3, #0
   125d8:	d102      	bne.n	125e0 <CSP_TmrCfg+0xc8>
            return (DEF_FAIL);
   125da:	f04f 0300 	mov.w	r3, #0
   125de:	e03b      	b.n	12658 <CSP_TmrCfg+0x140>
        }
        
        
        CSP_PM_PerClkEn(per_nbr);                               /* Enable peripheral clock.                           */                                                               
   125e0:	8afb      	ldrh	r3, [r7, #22]
   125e2:	4618      	mov	r0, r3
   125e4:	f003 fc1e 	bl	15e24 <CSP_PM_PerClkEn>
        CPU_CRITICAL_ENTER();
   125e8:	f005 fbfc 	bl	17de4 <CPU_SR_Save>
   125ec:	61f8      	str	r0, [r7, #28]
   125ee:	f7ef f963 	bl	18b8 <CPU_IntDisMeasStart>
        DEF_BIT_CLR(p_tmr_reg->EMR, DEF_BIT_MASK(3u, (2u * 0u) + 4u));
   125f2:	69bb      	ldr	r3, [r7, #24]
   125f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   125f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
   125fa:	69bb      	ldr	r3, [r7, #24]
   125fc:	63da      	str	r2, [r3, #60]	; 0x3c
        CPU_CRITICAL_EXIT();
   125fe:	f7ef f987 	bl	1910 <CPU_IntDisMeasStop>
   12602:	69f8      	ldr	r0, [r7, #28]
   12604:	f005 fbf2 	bl	17dec <CPU_SR_Restore>

                                                                /* Disable the Interrupt, Reset and Stop features on   */        
                                                                /* ... Match channel 0, 1, 2 or 3.                     */
        DEF_BIT_CLR(p_tmr_reg->MCR, CSP_TMR_MASK_MCR_MRx(0u));
   12608:	69bb      	ldr	r3, [r7, #24]
   1260a:	695b      	ldr	r3, [r3, #20]
   1260c:	f023 0207 	bic.w	r2, r3, #7
   12610:	69bb      	ldr	r3, [r7, #24]
   12612:	615a      	str	r2, [r3, #20]
                                    
        DEF_BIT_CLR(p_tmr_reg->TCR, CSP_TMR_MASK_TCR_MODE);     /* Clear the Mode                                      */
   12614:	69bb      	ldr	r3, [r7, #24]
   12616:	685b      	ldr	r3, [r3, #4]
   12618:	f023 0203 	bic.w	r2, r3, #3
   1261c:	69bb      	ldr	r3, [r7, #24]
   1261e:	605a      	str	r2, [r3, #4]
        DEF_BIT_SET(p_tmr_reg->TCR, CSP_TMR_BIT_TCR_TMR_MODE);  /* Set the Timer Mode                                  */
   12620:	69bb      	ldr	r3, [r7, #24]
   12622:	685a      	ldr	r2, [r3, #4]
   12624:	69bb      	ldr	r3, [r7, #24]
   12626:	605a      	str	r2, [r3, #4]

        p_tmr_reg->PR     = 0u;                                 /* Set the prescaler to 0                              */
   12628:	69bb      	ldr	r3, [r7, #24]
   1262a:	f04f 0200 	mov.w	r2, #0
   1262e:	60da      	str	r2, [r3, #12]
        p_tmr_reg->MRx[0] = match_val;
   12630:	69bb      	ldr	r3, [r7, #24]
   12632:	68fa      	ldr	r2, [r7, #12]
   12634:	619a      	str	r2, [r3, #24]
        p_tmr_reg->TCR    = CSP_TMR_BIT_CR_RST;                 /* Reset the timer                                     */
   12636:	69bb      	ldr	r3, [r7, #24]
   12638:	f04f 0202 	mov.w	r2, #2
   1263c:	605a      	str	r2, [r3, #4]
                                                                /* Enable Interrupt and Reset when TC matches MR0, ... */
                                                                /* MR1, MR2, etc                                       */        
        DEF_BIT_SET(p_tmr_reg->MCR, CSP_TMR_BIT_MCR_MRIx(0u) | 
   1263e:	69bb      	ldr	r3, [r7, #24]
   12640:	695b      	ldr	r3, [r3, #20]
   12642:	f043 0203 	orr.w	r2, r3, #3
   12646:	69bb      	ldr	r3, [r7, #24]
   12648:	615a      	str	r2, [r3, #20]
                                    CSP_TMR_BIT_MCR_MRRx(0u));
        CPU_CRITICAL_EXIT();
   1264a:	f7ef f961 	bl	1910 <CPU_IntDisMeasStop>
   1264e:	69f8      	ldr	r0, [r7, #28]
   12650:	f005 fbcc 	bl	17dec <CPU_SR_Restore>
    }

    return (DEF_OK);
   12654:	f04f 0301 	mov.w	r3, #1
}
   12658:	4618      	mov	r0, r3
   1265a:	f107 0720 	add.w	r7, r7, #32
   1265e:	46bd      	mov	sp, r7
   12660:	bd80      	pop	{r7, pc}
   12662:	bf00      	nop

00012664 <CSP_TmrOutCmpCfg>:
CPU_BOOLEAN CSP_TmrOutCmpCfg  (CSP_DEV_NBR    tmr_nbr,
                               CSP_DEV_NBR    pin,
                               CSP_OPT        pin_action,
                               CPU_INT32U     freq)

{
   12664:	b580      	push	{r7, lr}
   12666:	b08a      	sub	sp, #40	; 0x28
   12668:	af00      	add	r7, sp, #0
   1266a:	607b      	str	r3, [r7, #4]
   1266c:	4603      	mov	r3, r0
   1266e:	81fb      	strh	r3, [r7, #14]
   12670:	460b      	mov	r3, r1
   12672:	81bb      	strh	r3, [r7, #12]
   12674:	4613      	mov	r3, r2
   12676:	817b      	strh	r3, [r7, #10]
    CSP_TMR_REG  *p_tmr_reg;
    CPU_INT08U    match_nbr;
    CPU_INT32U    match_val;
    CPU_INT32U    per_freq;
    CSP_DEV_NBR   per_nbr;
    CPU_SR_ALLOC();
   12678:	f04f 0300 	mov.w	r3, #0
   1267c:	627b      	str	r3, [r7, #36]	; 0x24
    
                                                                /* ---------------- ARGUMENTS CHECKING -------------- */
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_01) {
   1267e:	89fb      	ldrh	r3, [r7, #14]
   12680:	2b01      	cmp	r3, #1
   12682:	d902      	bls.n	1268a <CSP_TmrOutCmpCfg+0x26>
        return (DEF_FAIL);
   12684:	f04f 0300 	mov.w	r3, #0
   12688:	e0e2      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>
    }
    
    if (pin > CSP_TMR_PIN_OUT_NBR_03) {
   1268a:	89bb      	ldrh	r3, [r7, #12]
   1268c:	2b03      	cmp	r3, #3
   1268e:	d902      	bls.n	12696 <CSP_TmrOutCmpCfg+0x32>
        return (DEF_FAIL);
   12690:	f04f 0300 	mov.w	r3, #0
   12694:	e0dc      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>
    }

    if (freq == 0u) {
   12696:	687b      	ldr	r3, [r7, #4]
   12698:	2b00      	cmp	r3, #0
   1269a:	d102      	bne.n	126a2 <CSP_TmrOutCmpCfg+0x3e>
        return (DEF_FAIL);
   1269c:	f04f 0300 	mov.w	r3, #0
   126a0:	e0d6      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   126a2:	89fa      	ldrh	r2, [r7, #14]
   126a4:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   126a8:	f2c0 0302 	movt	r3, #2
   126ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   126b0:	623b      	str	r3, [r7, #32]
    per_nbr   = (CSP_DEV_NBR  )CSP_TmrPerTbl[tmr_nbr];    
   126b2:	89fa      	ldrh	r2, [r7, #14]
   126b4:	f64c 337c 	movw	r3, #52092	; 0xcb7c
   126b8:	f2c0 0302 	movt	r3, #2
   126bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   126c0:	83fb      	strh	r3, [r7, #30]
    
    match_nbr = pin,
   126c2:	89bb      	ldrh	r3, [r7, #12]
   126c4:	777b      	strb	r3, [r7, #29]
    per_freq  = CSP_PM_PerClkFreqGet(per_nbr);                  /* Get the peripheral clock.                           */
   126c6:	8bfb      	ldrh	r3, [r7, #30]
   126c8:	4618      	mov	r0, r3
   126ca:	f003 fc21 	bl	15f10 <CSP_PM_PerClkFreqGet>
   126ce:	61b8      	str	r0, [r7, #24]

    if (freq > per_freq) {
   126d0:	687a      	ldr	r2, [r7, #4]
   126d2:	69bb      	ldr	r3, [r7, #24]
   126d4:	429a      	cmp	r2, r3
   126d6:	d902      	bls.n	126de <CSP_TmrOutCmpCfg+0x7a>
        return (DEF_FAIL);
   126d8:	f04f 0300 	mov.w	r3, #0
   126dc:	e0b8      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>
    }

    match_val = ((2u * per_freq / freq) + 1u) / 2u;
   126de:	69bb      	ldr	r3, [r7, #24]
   126e0:	ea4f 0243 	mov.w	r2, r3, lsl #1
   126e4:	687b      	ldr	r3, [r7, #4]
   126e6:	fbb2 f3f3 	udiv	r3, r2, r3
   126ea:	f103 0301 	add.w	r3, r3, #1
   126ee:	ea4f 0353 	mov.w	r3, r3, lsr #1
   126f2:	617b      	str	r3, [r7, #20]
    if (match_val == 0u) {
   126f4:	697b      	ldr	r3, [r7, #20]
   126f6:	2b00      	cmp	r3, #0
   126f8:	d102      	bne.n	12700 <CSP_TmrOutCmpCfg+0x9c>
        return (DEF_FAIL);
   126fa:	f04f 0300 	mov.w	r3, #0
   126fe:	e0a7      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>
    }
    
    
    CSP_PM_PerClkEn(per_nbr);                                   /* Enable Peripherical clock.                          */                                                               
   12700:	8bfb      	ldrh	r3, [r7, #30]
   12702:	4618      	mov	r0, r3
   12704:	f003 fb8e 	bl	15e24 <CSP_PM_PerClkEn>
    CPU_CRITICAL_ENTER();
   12708:	f005 fb6c 	bl	17de4 <CPU_SR_Save>
   1270c:	6278      	str	r0, [r7, #36]	; 0x24
   1270e:	f7ef f8d3 	bl	18b8 <CPU_IntDisMeasStart>

    DEF_BIT_CLR(p_tmr_reg->EMR, DEF_BIT_MASK(3u, (2u * match_nbr) + 4u));
   12712:	6a3b      	ldr	r3, [r7, #32]
   12714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   12716:	7f7b      	ldrb	r3, [r7, #29]
   12718:	f103 0302 	add.w	r3, r3, #2
   1271c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   12720:	f04f 0103 	mov.w	r1, #3
   12724:	fa01 f303 	lsl.w	r3, r1, r3
   12728:	ea6f 0303 	mvn.w	r3, r3
   1272c:	401a      	ands	r2, r3
   1272e:	6a3b      	ldr	r3, [r7, #32]
   12730:	63da      	str	r2, [r3, #60]	; 0x3c
        
    switch (pin_action) {
   12732:	897b      	ldrh	r3, [r7, #10]
   12734:	2b03      	cmp	r3, #3
   12736:	d838      	bhi.n	127aa <CSP_TmrOutCmpCfg+0x146>
   12738:	a201      	add	r2, pc, #4	; (adr r2, 12740 <CSP_TmrOutCmpCfg+0xdc>)
   1273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1273e:	bf00      	nop
   12740:	000127bb 	.word	0x000127bb
   12744:	00012751 	.word	0x00012751
   12748:	0001276f 	.word	0x0001276f
   1274c:	0001278d 	.word	0x0001278d
        case CSP_TMR_OPT_PIN_OUT_NONE:
             break;
                              
        case CSP_TMR_OPT_PIN_OUT_CLR:
             DEF_BIT_SET(p_tmr_reg->EMR, DEF_BIT_MASK(1u, (2u * match_nbr) + 4u));
   12750:	6a3b      	ldr	r3, [r7, #32]
   12752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   12754:	7f7b      	ldrb	r3, [r7, #29]
   12756:	f103 0302 	add.w	r3, r3, #2
   1275a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1275e:	f04f 0101 	mov.w	r1, #1
   12762:	fa01 f303 	lsl.w	r3, r1, r3
   12766:	431a      	orrs	r2, r3
   12768:	6a3b      	ldr	r3, [r7, #32]
   1276a:	63da      	str	r2, [r3, #60]	; 0x3c
             break;
   1276c:	e026      	b.n	127bc <CSP_TmrOutCmpCfg+0x158>
                         
        case CSP_TMR_OPT_PIN_OUT_SET:
             DEF_BIT_SET(p_tmr_reg->EMR, DEF_BIT_MASK(2u, (2u * match_nbr) + 4u));
   1276e:	6a3b      	ldr	r3, [r7, #32]
   12770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   12772:	7f7b      	ldrb	r3, [r7, #29]
   12774:	f103 0302 	add.w	r3, r3, #2
   12778:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1277c:	f04f 0102 	mov.w	r1, #2
   12780:	fa01 f303 	lsl.w	r3, r1, r3
   12784:	431a      	orrs	r2, r3
   12786:	6a3b      	ldr	r3, [r7, #32]
   12788:	63da      	str	r2, [r3, #60]	; 0x3c
             break;
   1278a:	e017      	b.n	127bc <CSP_TmrOutCmpCfg+0x158>
        
        case CSP_TMR_OPT_PIN_OUT_TOGGLE:
             DEF_BIT_SET(p_tmr_reg->EMR, DEF_BIT_MASK(3u, (2u * match_nbr) + 4u));
   1278c:	6a3b      	ldr	r3, [r7, #32]
   1278e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   12790:	7f7b      	ldrb	r3, [r7, #29]
   12792:	f103 0302 	add.w	r3, r3, #2
   12796:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1279a:	f04f 0103 	mov.w	r1, #3
   1279e:	fa01 f303 	lsl.w	r3, r1, r3
   127a2:	431a      	orrs	r2, r3
   127a4:	6a3b      	ldr	r3, [r7, #32]
   127a6:	63da      	str	r2, [r3, #60]	; 0x3c
             break;
   127a8:	e008      	b.n	127bc <CSP_TmrOutCmpCfg+0x158>
             
        default:
             CPU_CRITICAL_EXIT();
   127aa:	f7ef f8b1 	bl	1910 <CPU_IntDisMeasStop>
   127ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
   127b0:	f005 fb1c 	bl	17dec <CPU_SR_Restore>
             return (DEF_FAIL);            
   127b4:	f04f 0300 	mov.w	r3, #0
   127b8:	e04a      	b.n	12850 <CSP_TmrOutCmpCfg+0x1ec>

    DEF_BIT_CLR(p_tmr_reg->EMR, DEF_BIT_MASK(3u, (2u * match_nbr) + 4u));
        
    switch (pin_action) {
        case CSP_TMR_OPT_PIN_OUT_NONE:
             break;
   127ba:	bf00      	nop
             CPU_CRITICAL_EXIT();
             return (DEF_FAIL);            
    }
                                                            /* Disable the Interrupt, Reset and Stop features on   */        
                                                            /* ... Match channel 0, 1, 2 or 3.                     */
    DEF_BIT_CLR(p_tmr_reg->MCR, CSP_TMR_MASK_MCR_MRx(match_nbr));
   127bc:	6a3b      	ldr	r3, [r7, #32]
   127be:	6959      	ldr	r1, [r3, #20]
   127c0:	7f7a      	ldrb	r2, [r7, #29]
   127c2:	4613      	mov	r3, r2
   127c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   127c8:	189b      	adds	r3, r3, r2
   127ca:	f04f 0207 	mov.w	r2, #7
   127ce:	fa02 f303 	lsl.w	r3, r2, r3
   127d2:	ea6f 0303 	mvn.w	r3, r3
   127d6:	ea01 0203 	and.w	r2, r1, r3
   127da:	6a3b      	ldr	r3, [r7, #32]
   127dc:	615a      	str	r2, [r3, #20]
                                
    DEF_BIT_CLR(p_tmr_reg->TCR, CSP_TMR_MASK_TCR_MODE);     /* Clear the Mode                                      */
   127de:	6a3b      	ldr	r3, [r7, #32]
   127e0:	685b      	ldr	r3, [r3, #4]
   127e2:	f023 0203 	bic.w	r2, r3, #3
   127e6:	6a3b      	ldr	r3, [r7, #32]
   127e8:	605a      	str	r2, [r3, #4]
    DEF_BIT_SET(p_tmr_reg->TCR, CSP_TMR_BIT_TCR_TMR_MODE);  /* Set the Timer Mode                                  */
   127ea:	6a3b      	ldr	r3, [r7, #32]
   127ec:	685a      	ldr	r2, [r3, #4]
   127ee:	6a3b      	ldr	r3, [r7, #32]
   127f0:	605a      	str	r2, [r3, #4]

    p_tmr_reg->PR             = 0u;                         /* Set the prescaler to 0                              */
   127f2:	6a3b      	ldr	r3, [r7, #32]
   127f4:	f04f 0200 	mov.w	r2, #0
   127f8:	60da      	str	r2, [r3, #12]
    p_tmr_reg->MRx[match_nbr] = match_val;
   127fa:	7f7a      	ldrb	r2, [r7, #29]
   127fc:	6a3b      	ldr	r3, [r7, #32]
   127fe:	f102 0206 	add.w	r2, r2, #6
   12802:	6979      	ldr	r1, [r7, #20]
   12804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tmr_reg->TCR            = CSP_TMR_BIT_CR_RST;         /* Reset the timer                                     */
   12808:	6a3b      	ldr	r3, [r7, #32]
   1280a:	f04f 0202 	mov.w	r2, #2
   1280e:	605a      	str	r2, [r3, #4]
                                                            /* Enable Interrupt and Reset when TC matches MR0, ... */
                                                            /* MR1, MR2, etc                                       */
    DEF_BIT_SET(p_tmr_reg->MCR, CSP_TMR_BIT_MCR_MRIx(match_nbr) | 
   12810:	6a3b      	ldr	r3, [r7, #32]
   12812:	6959      	ldr	r1, [r3, #20]
   12814:	7f7a      	ldrb	r2, [r7, #29]
   12816:	4613      	mov	r3, r2
   12818:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1281c:	189b      	adds	r3, r3, r2
   1281e:	f04f 0201 	mov.w	r2, #1
   12822:	fa02 f003 	lsl.w	r0, r2, r3
   12826:	7f7a      	ldrb	r2, [r7, #29]
   12828:	4613      	mov	r3, r2
   1282a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1282e:	189b      	adds	r3, r3, r2
   12830:	f04f 0202 	mov.w	r2, #2
   12834:	fa02 f303 	lsl.w	r3, r2, r3
   12838:	4303      	orrs	r3, r0
   1283a:	ea41 0203 	orr.w	r2, r1, r3
   1283e:	6a3b      	ldr	r3, [r7, #32]
   12840:	615a      	str	r2, [r3, #20]
                                CSP_TMR_BIT_MCR_MRRx(match_nbr));
    CPU_CRITICAL_EXIT();
   12842:	f7ef f865 	bl	1910 <CPU_IntDisMeasStop>
   12846:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12848:	f005 fad0 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   1284c:	f04f 0301 	mov.w	r3, #1
}
   12850:	4618      	mov	r0, r3
   12852:	f107 0728 	add.w	r7, r7, #40	; 0x28
   12856:	46bd      	mov	sp, r7
   12858:	bd80      	pop	{r7, pc}
   1285a:	bf00      	nop

0001285c <CSP_TmrIntClr>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_TmrIntClr (CSP_DEV_NBR tmr_nbr)
{
   1285c:	b480      	push	{r7}
   1285e:	b089      	sub	sp, #36	; 0x24
   12860:	af00      	add	r7, sp, #0
   12862:	4603      	mov	r3, r0
   12864:	80fb      	strh	r3, [r7, #6]
    CPU_INT32U    reg_stat;
    CPU_INT32U    reg_clr;
    

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (tmr_nbr > CSP_TMR_NBR_03) {
   12866:	88fb      	ldrh	r3, [r7, #6]
   12868:	2b03      	cmp	r3, #3
   1286a:	d84c      	bhi.n	12906 <CSP_TmrIntClr+0xaa>
        return;
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   1286c:	88fa      	ldrh	r2, [r7, #6]
   1286e:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12872:	f2c0 0302 	movt	r3, #2
   12876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1287a:	617b      	str	r3, [r7, #20]
    reg_clr   = DEF_BIT_NONE;
   1287c:	f04f 0300 	mov.w	r3, #0
   12880:	61bb      	str	r3, [r7, #24]
    reg_msk   = p_tmr_reg->MCR;
   12882:	697b      	ldr	r3, [r7, #20]
   12884:	695b      	ldr	r3, [r3, #20]
   12886:	613b      	str	r3, [r7, #16]
    reg_stat  = p_tmr_reg->IR;
   12888:	697b      	ldr	r3, [r7, #20]
   1288a:	681b      	ldr	r3, [r3, #0]
   1288c:	60fb      	str	r3, [r7, #12]
    
    for (match_nbr =  CSP_TMR_MATCH_NBR_03; match_nbr < CSP_TMR_MATCH_NBR_03; match_nbr++) {
   1288e:	f04f 0303 	mov.w	r3, #3
   12892:	83fb      	strh	r3, [r7, #30]
   12894:	e030      	b.n	128f8 <CSP_TmrIntClr+0x9c>
        if ((DEF_BIT_IS_SET(reg_msk,  CSP_TMR_BIT_MCR_MRIx(match_nbr)) == DEF_YES) &&
   12896:	8bfa      	ldrh	r2, [r7, #30]
   12898:	4613      	mov	r3, r2
   1289a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1289e:	189b      	adds	r3, r3, r2
   128a0:	f04f 0201 	mov.w	r2, #1
   128a4:	fa02 f203 	lsl.w	r2, r2, r3
   128a8:	693b      	ldr	r3, [r7, #16]
   128aa:	ea02 0103 	and.w	r1, r2, r3
   128ae:	8bfa      	ldrh	r2, [r7, #30]
   128b0:	4613      	mov	r3, r2
   128b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   128b6:	189b      	adds	r3, r3, r2
   128b8:	f04f 0201 	mov.w	r2, #1
   128bc:	fa02 f303 	lsl.w	r3, r2, r3
   128c0:	4299      	cmp	r1, r3
   128c2:	d115      	bne.n	128f0 <CSP_TmrIntClr+0x94>
            (DEF_BIT_IS_SET(reg_stat, DEF_BIT(match_nbr))              == DEF_YES)) {
   128c4:	8bfb      	ldrh	r3, [r7, #30]
   128c6:	f04f 0201 	mov.w	r2, #1
   128ca:	fa02 f203 	lsl.w	r2, r2, r3
   128ce:	68fb      	ldr	r3, [r7, #12]
   128d0:	401a      	ands	r2, r3
   128d2:	8bfb      	ldrh	r3, [r7, #30]
   128d4:	f04f 0101 	mov.w	r1, #1
   128d8:	fa01 f303 	lsl.w	r3, r1, r3
    reg_clr   = DEF_BIT_NONE;
    reg_msk   = p_tmr_reg->MCR;
    reg_stat  = p_tmr_reg->IR;
    
    for (match_nbr =  CSP_TMR_MATCH_NBR_03; match_nbr < CSP_TMR_MATCH_NBR_03; match_nbr++) {
        if ((DEF_BIT_IS_SET(reg_msk,  CSP_TMR_BIT_MCR_MRIx(match_nbr)) == DEF_YES) &&
   128dc:	429a      	cmp	r2, r3
   128de:	d107      	bne.n	128f0 <CSP_TmrIntClr+0x94>
            (DEF_BIT_IS_SET(reg_stat, DEF_BIT(match_nbr))              == DEF_YES)) {
            DEF_BIT_SET(reg_clr, DEF_BIT(match_nbr));
   128e0:	8bfb      	ldrh	r3, [r7, #30]
   128e2:	f04f 0201 	mov.w	r2, #1
   128e6:	fa02 f303 	lsl.w	r3, r2, r3
   128ea:	69ba      	ldr	r2, [r7, #24]
   128ec:	4313      	orrs	r3, r2
   128ee:	61bb      	str	r3, [r7, #24]
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
    reg_clr   = DEF_BIT_NONE;
    reg_msk   = p_tmr_reg->MCR;
    reg_stat  = p_tmr_reg->IR;
    
    for (match_nbr =  CSP_TMR_MATCH_NBR_03; match_nbr < CSP_TMR_MATCH_NBR_03; match_nbr++) {
   128f0:	8bfb      	ldrh	r3, [r7, #30]
   128f2:	f103 0301 	add.w	r3, r3, #1
   128f6:	83fb      	strh	r3, [r7, #30]
   128f8:	8bfb      	ldrh	r3, [r7, #30]
   128fa:	2b02      	cmp	r3, #2
   128fc:	d9cb      	bls.n	12896 <CSP_TmrIntClr+0x3a>
            (DEF_BIT_IS_SET(reg_stat, DEF_BIT(match_nbr))              == DEF_YES)) {
            DEF_BIT_SET(reg_clr, DEF_BIT(match_nbr));
        }
    }
        
    p_tmr_reg->IR = reg_clr;
   128fe:	697b      	ldr	r3, [r7, #20]
   12900:	69ba      	ldr	r2, [r7, #24]
   12902:	601a      	str	r2, [r3, #0]
   12904:	e000      	b.n	12908 <CSP_TmrIntClr+0xac>
    CPU_INT32U    reg_clr;
    

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (tmr_nbr > CSP_TMR_NBR_03) {
        return;
   12906:	bf00      	nop
            DEF_BIT_SET(reg_clr, DEF_BIT(match_nbr));
        }
    }
        
    p_tmr_reg->IR = reg_clr;
}
   12908:	f107 0724 	add.w	r7, r7, #36	; 0x24
   1290c:	46bd      	mov	sp, r7
   1290e:	bc80      	pop	{r7}
   12910:	4770      	bx	lr
   12912:	bf00      	nop

00012914 <CSP_TmrRst>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_TmrRst (CSP_DEV_NBR  tmr_nbr)
{
   12914:	b580      	push	{r7, lr}
   12916:	b084      	sub	sp, #16
   12918:	af00      	add	r7, sp, #0
   1291a:	4603      	mov	r3, r0
   1291c:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_REG  *p_tmr_reg;
    CPU_SR_ALLOC();
   1291e:	f04f 0300 	mov.w	r3, #0
   12922:	60fb      	str	r3, [r7, #12]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
   12924:	88fb      	ldrh	r3, [r7, #6]
   12926:	2b03      	cmp	r3, #3
   12928:	d816      	bhi.n	12958 <CSP_TmrRst+0x44>
        return;    
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   1292a:	88fa      	ldrh	r2, [r7, #6]
   1292c:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12930:	f2c0 0302 	movt	r3, #2
   12934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12938:	60bb      	str	r3, [r7, #8]
    
    CPU_CRITICAL_ENTER();
   1293a:	f005 fa53 	bl	17de4 <CPU_SR_Save>
   1293e:	60f8      	str	r0, [r7, #12]
   12940:	f7ee ffba 	bl	18b8 <CPU_IntDisMeasStart>
    p_tmr_reg->TCR = CSP_TMR_BIT_CR_RST;
   12944:	68bb      	ldr	r3, [r7, #8]
   12946:	f04f 0202 	mov.w	r2, #2
   1294a:	605a      	str	r2, [r3, #4]
    CPU_CRITICAL_EXIT();       
   1294c:	f7ee ffe0 	bl	1910 <CPU_IntDisMeasStop>
   12950:	68f8      	ldr	r0, [r7, #12]
   12952:	f005 fa4b 	bl	17dec <CPU_SR_Restore>
   12956:	e000      	b.n	1295a <CSP_TmrRst+0x46>
    CSP_TMR_REG  *p_tmr_reg;
    CPU_SR_ALLOC();
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
        return;    
   12958:	bf00      	nop
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
    
    CPU_CRITICAL_ENTER();
    p_tmr_reg->TCR = CSP_TMR_BIT_CR_RST;
    CPU_CRITICAL_EXIT();       
}
   1295a:	f107 0710 	add.w	r7, r7, #16
   1295e:	46bd      	mov	sp, r7
   12960:	bd80      	pop	{r7, pc}
   12962:	bf00      	nop

00012964 <CSP_TmrRd>:
* Note(s)     : none.
*********************************************************************************************************
*/

CSP_TMR_VAL  CSP_TmrRd  (CSP_DEV_NBR  tmr_nbr)
{
   12964:	b480      	push	{r7}
   12966:	b085      	sub	sp, #20
   12968:	af00      	add	r7, sp, #0
   1296a:	4603      	mov	r3, r0
   1296c:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_VAL  tmr_val;
    CSP_TMR_REG *p_tmr_reg;

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
   1296e:	88fb      	ldrh	r3, [r7, #6]
   12970:	2b03      	cmp	r3, #3
   12972:	d902      	bls.n	1297a <CSP_TmrRd+0x16>
        return ((CSP_TMR_VAL)(0u));
   12974:	f04f 0300 	mov.w	r3, #0
   12978:	e00b      	b.n	12992 <CSP_TmrRd+0x2e>
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   1297a:	88fa      	ldrh	r2, [r7, #6]
   1297c:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12980:	f2c0 0302 	movt	r3, #2
   12984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12988:	60fb      	str	r3, [r7, #12]
          
    tmr_val = p_tmr_reg->TC;
   1298a:	68fb      	ldr	r3, [r7, #12]
   1298c:	689b      	ldr	r3, [r3, #8]
   1298e:	60bb      	str	r3, [r7, #8]
    return (tmr_val);
   12990:	68bb      	ldr	r3, [r7, #8]
}
   12992:	4618      	mov	r0, r3
   12994:	f107 0714 	add.w	r7, r7, #20
   12998:	46bd      	mov	sp, r7
   1299a:	bc80      	pop	{r7}
   1299c:	4770      	bx	lr
   1299e:	bf00      	nop

000129a0 <CSP_TmrStart>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_TmrStart (CSP_DEV_NBR  tmr_nbr)
{
   129a0:	b580      	push	{r7, lr}
   129a2:	b084      	sub	sp, #16
   129a4:	af00      	add	r7, sp, #0
   129a6:	4603      	mov	r3, r0
   129a8:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_REG *p_tmr_reg;    
    CPU_SR_ALLOC();
   129aa:	f04f 0300 	mov.w	r3, #0
   129ae:	60fb      	str	r3, [r7, #12]


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
   129b0:	88fb      	ldrh	r3, [r7, #6]
   129b2:	2b03      	cmp	r3, #3
   129b4:	d816      	bhi.n	129e4 <CSP_TmrStart+0x44>
        return;
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   129b6:	88fa      	ldrh	r2, [r7, #6]
   129b8:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   129bc:	f2c0 0302 	movt	r3, #2
   129c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   129c4:	60bb      	str	r3, [r7, #8]
    
    CPU_CRITICAL_ENTER();
   129c6:	f005 fa0d 	bl	17de4 <CPU_SR_Save>
   129ca:	60f8      	str	r0, [r7, #12]
   129cc:	f7ee ff74 	bl	18b8 <CPU_IntDisMeasStart>
    p_tmr_reg->TCR = CSP_TMR_BIT_CR_START;
   129d0:	68bb      	ldr	r3, [r7, #8]
   129d2:	f04f 0201 	mov.w	r2, #1
   129d6:	605a      	str	r2, [r3, #4]
    CPU_CRITICAL_EXIT();    
   129d8:	f7ee ff9a 	bl	1910 <CPU_IntDisMeasStop>
   129dc:	68f8      	ldr	r0, [r7, #12]
   129de:	f005 fa05 	bl	17dec <CPU_SR_Restore>
   129e2:	e000      	b.n	129e6 <CSP_TmrStart+0x46>
    CPU_SR_ALLOC();


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
        return;
   129e4:	bf00      	nop
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
    
    CPU_CRITICAL_ENTER();
    p_tmr_reg->TCR = CSP_TMR_BIT_CR_START;
    CPU_CRITICAL_EXIT();    
}
   129e6:	f107 0710 	add.w	r7, r7, #16
   129ea:	46bd      	mov	sp, r7
   129ec:	bd80      	pop	{r7, pc}
   129ee:	bf00      	nop

000129f0 <CSP_TmrStop>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  CSP_TmrStop (CSP_DEV_NBR  tmr_nbr)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b084      	sub	sp, #16
   129f4:	af00      	add	r7, sp, #0
   129f6:	4603      	mov	r3, r0
   129f8:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_REG *p_tmr_reg;    
    CPU_SR_ALLOC();
   129fa:	f04f 0300 	mov.w	r3, #0
   129fe:	60fb      	str	r3, [r7, #12]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
   12a00:	88fb      	ldrh	r3, [r7, #6]
   12a02:	2b03      	cmp	r3, #3
   12a04:	d816      	bhi.n	12a34 <CSP_TmrStop+0x44>
        return;
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   12a06:	88fa      	ldrh	r2, [r7, #6]
   12a08:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12a0c:	f2c0 0302 	movt	r3, #2
   12a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12a14:	60bb      	str	r3, [r7, #8]
    
    CPU_CRITICAL_ENTER();
   12a16:	f005 f9e5 	bl	17de4 <CPU_SR_Save>
   12a1a:	60f8      	str	r0, [r7, #12]
   12a1c:	f7ee ff4c 	bl	18b8 <CPU_IntDisMeasStart>
    p_tmr_reg->TCR = 0u;
   12a20:	68bb      	ldr	r3, [r7, #8]
   12a22:	f04f 0200 	mov.w	r2, #0
   12a26:	605a      	str	r2, [r3, #4]
    CPU_CRITICAL_EXIT();    
   12a28:	f7ee ff72 	bl	1910 <CPU_IntDisMeasStop>
   12a2c:	68f8      	ldr	r0, [r7, #12]
   12a2e:	f005 f9dd 	bl	17dec <CPU_SR_Restore>
   12a32:	e000      	b.n	12a36 <CSP_TmrStop+0x46>
    CSP_TMR_REG *p_tmr_reg;    
    CPU_SR_ALLOC();
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
        return;
   12a34:	bf00      	nop
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
    
    CPU_CRITICAL_ENTER();
    p_tmr_reg->TCR = 0u;
    CPU_CRITICAL_EXIT();    
}
   12a36:	f107 0710 	add.w	r7, r7, #16
   12a3a:	46bd      	mov	sp, r7
   12a3c:	bd80      	pop	{r7, pc}
   12a3e:	bf00      	nop

00012a40 <CSP_TmrWr>:
*********************************************************************************************************
*/

void  CSP_TmrWr  (CSP_DEV_NBR  tmr_nbr,
                  CSP_TMR_VAL  tmr_val)
{
   12a40:	b580      	push	{r7, lr}
   12a42:	b084      	sub	sp, #16
   12a44:	af00      	add	r7, sp, #0
   12a46:	4603      	mov	r3, r0
   12a48:	6039      	str	r1, [r7, #0]
   12a4a:	80fb      	strh	r3, [r7, #6]
    CSP_TMR_REG *p_tmr_reg;    
    CPU_SR_ALLOC();
   12a4c:	f04f 0300 	mov.w	r3, #0
   12a50:	60fb      	str	r3, [r7, #12]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
   12a52:	88fb      	ldrh	r3, [r7, #6]
   12a54:	2b03      	cmp	r3, #3
   12a56:	d815      	bhi.n	12a84 <CSP_TmrWr+0x44>
        return;
    }
#endif
    
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
   12a58:	88fa      	ldrh	r2, [r7, #6]
   12a5a:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   12a5e:	f2c0 0302 	movt	r3, #2
   12a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12a66:	60bb      	str	r3, [r7, #8]
    
    CPU_CRITICAL_ENTER();
   12a68:	f005 f9bc 	bl	17de4 <CPU_SR_Save>
   12a6c:	60f8      	str	r0, [r7, #12]
   12a6e:	f7ee ff23 	bl	18b8 <CPU_IntDisMeasStart>
    p_tmr_reg->TCR = tmr_val;
   12a72:	68bb      	ldr	r3, [r7, #8]
   12a74:	683a      	ldr	r2, [r7, #0]
   12a76:	605a      	str	r2, [r3, #4]
    CPU_CRITICAL_EXIT();    
   12a78:	f7ee ff4a 	bl	1910 <CPU_IntDisMeasStop>
   12a7c:	68f8      	ldr	r0, [r7, #12]
   12a7e:	f005 f9b5 	bl	17dec <CPU_SR_Restore>
   12a82:	e000      	b.n	12a86 <CSP_TmrWr+0x46>
    CSP_TMR_REG *p_tmr_reg;    
    CPU_SR_ALLOC();
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (tmr_nbr > CSP_TMR_NBR_03) {
        return;
   12a84:	bf00      	nop
    p_tmr_reg = (CSP_TMR_REG *)CSP_TmrAddrTbl[tmr_nbr];
    
    CPU_CRITICAL_ENTER();
    p_tmr_reg->TCR = tmr_val;
    CPU_CRITICAL_EXIT();    
}
   12a86:	f107 0710 	add.w	r7, r7, #16
   12a8a:	46bd      	mov	sp, r7
   12a8c:	bd80      	pop	{r7, pc}
   12a8e:	bf00      	nop

00012a90 <set_PinFunc>:
 *				- PINSEL_FUNC_3 : third alternate function
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
   12a90:	b480      	push	{r7}
   12a92:	b087      	sub	sp, #28
   12a94:	af00      	add	r7, sp, #0
   12a96:	4613      	mov	r3, r2
   12a98:	4602      	mov	r2, r0
   12a9a:	71fa      	strb	r2, [r7, #7]
   12a9c:	460a      	mov	r2, r1
   12a9e:	71ba      	strb	r2, [r7, #6]
   12aa0:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
   12aa2:	79bb      	ldrb	r3, [r7, #6]
   12aa4:	617b      	str	r3, [r7, #20]
	uint32_t pinselreg_idx = 2 * portnum;
   12aa6:	79fb      	ldrb	r3, [r7, #7]
   12aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   12aac:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;
   12aae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12ab2:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12ab6:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
   12ab8:	697b      	ldr	r3, [r7, #20]
   12aba:	2b0f      	cmp	r3, #15
   12abc:	d907      	bls.n	12ace <set_PinFunc+0x3e>
		pinnum_t -= 16;
   12abe:	697b      	ldr	r3, [r7, #20]
   12ac0:	f1a3 0310 	sub.w	r3, r3, #16
   12ac4:	617b      	str	r3, [r7, #20]
		pinselreg_idx++;
   12ac6:	693b      	ldr	r3, [r7, #16]
   12ac8:	f103 0301 	add.w	r3, r3, #1
   12acc:	613b      	str	r3, [r7, #16]
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
   12ace:	693b      	ldr	r3, [r7, #16]
   12ad0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12ad4:	68fa      	ldr	r2, [r7, #12]
   12ad6:	18d3      	adds	r3, r2, r3
   12ad8:	693a      	ldr	r2, [r7, #16]
   12ada:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12ade:	68f9      	ldr	r1, [r7, #12]
   12ae0:	188a      	adds	r2, r1, r2
   12ae2:	6811      	ldr	r1, [r2, #0]
   12ae4:	697a      	ldr	r2, [r7, #20]
   12ae6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   12aea:	f04f 0003 	mov.w	r0, #3
   12aee:	fa00 f202 	lsl.w	r2, r0, r2
   12af2:	ea6f 0202 	mvn.w	r2, r2
   12af6:	400a      	ands	r2, r1
   12af8:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
   12afa:	693b      	ldr	r3, [r7, #16]
   12afc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12b00:	68fa      	ldr	r2, [r7, #12]
   12b02:	18d3      	adds	r3, r2, r3
   12b04:	693a      	ldr	r2, [r7, #16]
   12b06:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12b0a:	68f9      	ldr	r1, [r7, #12]
   12b0c:	188a      	adds	r2, r1, r2
   12b0e:	6811      	ldr	r1, [r2, #0]
   12b10:	7978      	ldrb	r0, [r7, #5]
   12b12:	697a      	ldr	r2, [r7, #20]
   12b14:	ea4f 0242 	mov.w	r2, r2, lsl #1
   12b18:	fa00 f202 	lsl.w	r2, r0, r2
   12b1c:	430a      	orrs	r2, r1
   12b1e:	601a      	str	r2, [r3, #0]
}
   12b20:	f107 071c 	add.w	r7, r7, #28
   12b24:	46bd      	mov	sp, r7
   12b26:	bc80      	pop	{r7}
   12b28:	4770      	bx	lr
   12b2a:	bf00      	nop

00012b2c <set_ResistorMode>:
				- PINSEL_PINMODE_PULLDOWN : Internal pull-down resistor

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
   12b2c:	b480      	push	{r7}
   12b2e:	b087      	sub	sp, #28
   12b30:	af00      	add	r7, sp, #0
   12b32:	4613      	mov	r3, r2
   12b34:	4602      	mov	r2, r0
   12b36:	71fa      	strb	r2, [r7, #7]
   12b38:	460a      	mov	r2, r1
   12b3a:	71ba      	strb	r2, [r7, #6]
   12b3c:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
   12b3e:	79bb      	ldrb	r3, [r7, #6]
   12b40:	617b      	str	r3, [r7, #20]
	uint32_t pinmodereg_idx = 2 * portnum;
   12b42:	79fb      	ldrb	r3, [r7, #7]
   12b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
   12b48:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;
   12b4a:	f24c 0340 	movw	r3, #49216	; 0xc040
   12b4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12b52:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
   12b54:	697b      	ldr	r3, [r7, #20]
   12b56:	2b0f      	cmp	r3, #15
   12b58:	d907      	bls.n	12b6a <set_ResistorMode+0x3e>
		pinnum_t -= 16;
   12b5a:	697b      	ldr	r3, [r7, #20]
   12b5c:	f1a3 0310 	sub.w	r3, r3, #16
   12b60:	617b      	str	r3, [r7, #20]
		pinmodereg_idx++ ;
   12b62:	693b      	ldr	r3, [r7, #16]
   12b64:	f103 0301 	add.w	r3, r3, #1
   12b68:	613b      	str	r3, [r7, #16]
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
   12b6a:	693b      	ldr	r3, [r7, #16]
   12b6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12b70:	68fa      	ldr	r2, [r7, #12]
   12b72:	18d3      	adds	r3, r2, r3
   12b74:	693a      	ldr	r2, [r7, #16]
   12b76:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12b7a:	68f9      	ldr	r1, [r7, #12]
   12b7c:	188a      	adds	r2, r1, r2
   12b7e:	6811      	ldr	r1, [r2, #0]
   12b80:	697a      	ldr	r2, [r7, #20]
   12b82:	ea4f 0242 	mov.w	r2, r2, lsl #1
   12b86:	f04f 0003 	mov.w	r0, #3
   12b8a:	fa00 f202 	lsl.w	r2, r0, r2
   12b8e:	ea6f 0202 	mvn.w	r2, r2
   12b92:	400a      	ands	r2, r1
   12b94:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
   12b96:	693b      	ldr	r3, [r7, #16]
   12b98:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12b9c:	68fa      	ldr	r2, [r7, #12]
   12b9e:	18d3      	adds	r3, r2, r3
   12ba0:	693a      	ldr	r2, [r7, #16]
   12ba2:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12ba6:	68f9      	ldr	r1, [r7, #12]
   12ba8:	188a      	adds	r2, r1, r2
   12baa:	6811      	ldr	r1, [r2, #0]
   12bac:	7978      	ldrb	r0, [r7, #5]
   12bae:	697a      	ldr	r2, [r7, #20]
   12bb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   12bb4:	fa00 f202 	lsl.w	r2, r0, r2
   12bb8:	430a      	orrs	r2, r1
   12bba:	601a      	str	r2, [r3, #0]
}
   12bbc:	f107 071c 	add.w	r7, r7, #28
   12bc0:	46bd      	mov	sp, r7
   12bc2:	bc80      	pop	{r7}
   12bc4:	4770      	bx	lr
   12bc6:	bf00      	nop

00012bc8 <set_OpenDrainMode>:
 * 				- PINSEL_PINMODE_OPENDRAIN : Pin is in the open drain mode
 *
 * @return 		None
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
   12bc8:	b480      	push	{r7}
   12bca:	b085      	sub	sp, #20
   12bcc:	af00      	add	r7, sp, #0
   12bce:	4613      	mov	r3, r2
   12bd0:	4602      	mov	r2, r0
   12bd2:	71fa      	strb	r2, [r7, #7]
   12bd4:	460a      	mov	r2, r1
   12bd6:	71ba      	strb	r2, [r7, #6]
   12bd8:	717b      	strb	r3, [r7, #5]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;
   12bda:	f24c 0368 	movw	r3, #49256	; 0xc068
   12bde:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12be2:	60fb      	str	r3, [r7, #12]

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
   12be4:	797b      	ldrb	r3, [r7, #5]
   12be6:	2b01      	cmp	r3, #1
   12be8:	d112      	bne.n	12c10 <set_OpenDrainMode+0x48>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
   12bea:	79fb      	ldrb	r3, [r7, #7]
   12bec:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12bf0:	68fa      	ldr	r2, [r7, #12]
   12bf2:	18d3      	adds	r3, r2, r3
   12bf4:	79fa      	ldrb	r2, [r7, #7]
   12bf6:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12bfa:	68f9      	ldr	r1, [r7, #12]
   12bfc:	188a      	adds	r2, r1, r2
   12bfe:	6811      	ldr	r1, [r2, #0]
   12c00:	79ba      	ldrb	r2, [r7, #6]
   12c02:	f04f 0001 	mov.w	r0, #1
   12c06:	fa00 f202 	lsl.w	r2, r0, r2
   12c0a:	430a      	orrs	r2, r1
   12c0c:	601a      	str	r2, [r3, #0]
   12c0e:	e013      	b.n	12c38 <set_OpenDrainMode+0x70>
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
   12c10:	79fb      	ldrb	r3, [r7, #7]
   12c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12c16:	68fa      	ldr	r2, [r7, #12]
   12c18:	18d3      	adds	r3, r2, r3
   12c1a:	79fa      	ldrb	r2, [r7, #7]
   12c1c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   12c20:	68f9      	ldr	r1, [r7, #12]
   12c22:	188a      	adds	r2, r1, r2
   12c24:	6811      	ldr	r1, [r2, #0]
   12c26:	79ba      	ldrb	r2, [r7, #6]
   12c28:	f04f 0001 	mov.w	r0, #1
   12c2c:	fa00 f202 	lsl.w	r2, r0, r2
   12c30:	ea6f 0202 	mvn.w	r2, r2
   12c34:	400a      	ands	r2, r1
   12c36:	601a      	str	r2, [r3, #0]
	}
}
   12c38:	f107 0714 	add.w	r7, r7, #20
   12c3c:	46bd      	mov	sp, r7
   12c3e:	bc80      	pop	{r7}
   12c40:	4770      	bx	lr
   12c42:	bf00      	nop

00012c44 <PINSEL_ConfigTraceFunc>:
 * 				- DISABLE : Disable Trace Function
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
   12c44:	b480      	push	{r7}
   12c46:	b083      	sub	sp, #12
   12c48:	af00      	add	r7, sp, #0
   12c4a:	4603      	mov	r3, r0
   12c4c:	71fb      	strb	r3, [r7, #7]
	if (NewState == ENABLE) {
   12c4e:	79fb      	ldrb	r3, [r7, #7]
   12c50:	2b01      	cmp	r3, #1
   12c52:	d10c      	bne.n	12c6e <PINSEL_ConfigTraceFunc+0x2a>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
   12c54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12c58:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12c5c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   12c60:	f2c4 0202 	movt	r2, #16386	; 0x4002
   12c64:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12c66:	f042 0208 	orr.w	r2, r2, #8
   12c6a:	629a      	str	r2, [r3, #40]	; 0x28
   12c6c:	e00e      	b.n	12c8c <PINSEL_ConfigTraceFunc+0x48>
	} else if (NewState == DISABLE) {
   12c6e:	79fb      	ldrb	r3, [r7, #7]
   12c70:	2b00      	cmp	r3, #0
   12c72:	d10b      	bne.n	12c8c <PINSEL_ConfigTraceFunc+0x48>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
   12c74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12c7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   12c80:	f2c4 0202 	movt	r2, #16386	; 0x4002
   12c84:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12c86:	f022 0208 	bic.w	r2, r2, #8
   12c8a:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
   12c8c:	f107 070c 	add.w	r7, r7, #12
   12c90:	46bd      	mov	sp, r7
   12c92:	bc80      	pop	{r7}
   12c94:	4770      	bx	lr
   12c96:	bf00      	nop

00012c98 <PINSEL_SetI2C0Pins>:
 * 				- DISABLE: Disable filter and slew rate.
 *
 * @return 		None
 **********************************************************************/
void PINSEL_SetI2C0Pins(uint8_t i2cPinMode, FunctionalState filterSlewRateEnable)
{
   12c98:	b480      	push	{r7}
   12c9a:	b085      	sub	sp, #20
   12c9c:	af00      	add	r7, sp, #0
   12c9e:	4602      	mov	r2, r0
   12ca0:	460b      	mov	r3, r1
   12ca2:	71fa      	strb	r2, [r7, #7]
   12ca4:	71bb      	strb	r3, [r7, #6]
	uint32_t regVal;

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
   12ca6:	79fb      	ldrb	r3, [r7, #7]
   12ca8:	2b01      	cmp	r3, #1
   12caa:	d102      	bne.n	12cb2 <PINSEL_SetI2C0Pins+0x1a>
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
   12cac:	f04f 0305 	mov.w	r3, #5
   12cb0:	60fb      	str	r3, [r7, #12]
	}

	if (filterSlewRateEnable == DISABLE){
   12cb2:	79bb      	ldrb	r3, [r7, #6]
   12cb4:	2b00      	cmp	r3, #0
   12cb6:	d102      	bne.n	12cbe <PINSEL_SetI2C0Pins+0x26>
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
   12cb8:	f04f 030a 	mov.w	r3, #10
   12cbc:	60fb      	str	r3, [r7, #12]
	}
	LPC_PINCON->I2CPADCFG = regVal;
   12cbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12cc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12cc6:	68fa      	ldr	r2, [r7, #12]
   12cc8:	67da      	str	r2, [r3, #124]	; 0x7c
}
   12cca:	f107 0714 	add.w	r7, r7, #20
   12cce:	46bd      	mov	sp, r7
   12cd0:	bc80      	pop	{r7}
   12cd2:	4770      	bx	lr

00012cd4 <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b082      	sub	sp, #8
   12cd8:	af00      	add	r7, sp, #0
   12cda:	6078      	str	r0, [r7, #4]
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
   12cdc:	687b      	ldr	r3, [r7, #4]
   12cde:	7819      	ldrb	r1, [r3, #0]
   12ce0:	687b      	ldr	r3, [r7, #4]
   12ce2:	785a      	ldrb	r2, [r3, #1]
   12ce4:	687b      	ldr	r3, [r7, #4]
   12ce6:	789b      	ldrb	r3, [r3, #2]
   12ce8:	4608      	mov	r0, r1
   12cea:	4611      	mov	r1, r2
   12cec:	461a      	mov	r2, r3
   12cee:	f7ff fecf 	bl	12a90 <set_PinFunc>
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
   12cf2:	687b      	ldr	r3, [r7, #4]
   12cf4:	7819      	ldrb	r1, [r3, #0]
   12cf6:	687b      	ldr	r3, [r7, #4]
   12cf8:	785a      	ldrb	r2, [r3, #1]
   12cfa:	687b      	ldr	r3, [r7, #4]
   12cfc:	78db      	ldrb	r3, [r3, #3]
   12cfe:	4608      	mov	r0, r1
   12d00:	4611      	mov	r1, r2
   12d02:	461a      	mov	r2, r3
   12d04:	f7ff ff12 	bl	12b2c <set_ResistorMode>
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	7819      	ldrb	r1, [r3, #0]
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	785a      	ldrb	r2, [r3, #1]
   12d10:	687b      	ldr	r3, [r7, #4]
   12d12:	791b      	ldrb	r3, [r3, #4]
   12d14:	4608      	mov	r0, r1
   12d16:	4611      	mov	r1, r2
   12d18:	461a      	mov	r2, r3
   12d1a:	f7ff ff55 	bl	12bc8 <set_OpenDrainMode>
}
   12d1e:	f107 0708 	add.w	r7, r7, #8
   12d22:	46bd      	mov	sp, r7
   12d24:	bd80      	pop	{r7, pc}
   12d26:	bf00      	nop

00012d28 <GPIO_GetPointer>:
 * @brief		Get pointer to GPIO peripheral due to GPIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to GPIO peripheral
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
   12d28:	b480      	push	{r7}
   12d2a:	b085      	sub	sp, #20
   12d2c:	af00      	add	r7, sp, #0
   12d2e:	4603      	mov	r3, r0
   12d30:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = NULL;
   12d32:	f04f 0300 	mov.w	r3, #0
   12d36:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
   12d38:	79fb      	ldrb	r3, [r7, #7]
   12d3a:	2b04      	cmp	r3, #4
   12d3c:	d82a      	bhi.n	12d94 <GPIO_GetPointer+0x6c>
   12d3e:	a201      	add	r2, pc, #4	; (adr r2, 12d44 <GPIO_GetPointer+0x1c>)
   12d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12d44:	00012d59 	.word	0x00012d59
   12d48:	00012d65 	.word	0x00012d65
   12d4c:	00012d71 	.word	0x00012d71
   12d50:	00012d7d 	.word	0x00012d7d
   12d54:	00012d89 	.word	0x00012d89
	case 0:
		pGPIO = LPC_GPIO0;
   12d58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12d5c:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12d60:	60fb      	str	r3, [r7, #12]
		break;
   12d62:	e018      	b.n	12d96 <GPIO_GetPointer+0x6e>
	case 1:
		pGPIO = LPC_GPIO1;
   12d64:	f24c 0320 	movw	r3, #49184	; 0xc020
   12d68:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12d6c:	60fb      	str	r3, [r7, #12]
		break;
   12d6e:	e012      	b.n	12d96 <GPIO_GetPointer+0x6e>
	case 2:
		pGPIO = LPC_GPIO2;
   12d70:	f24c 0340 	movw	r3, #49216	; 0xc040
   12d74:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12d78:	60fb      	str	r3, [r7, #12]
		break;
   12d7a:	e00c      	b.n	12d96 <GPIO_GetPointer+0x6e>
	case 3:
		pGPIO = LPC_GPIO3;
   12d7c:	f24c 0360 	movw	r3, #49248	; 0xc060
   12d80:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12d84:	60fb      	str	r3, [r7, #12]
		break;
   12d86:	e006      	b.n	12d96 <GPIO_GetPointer+0x6e>
	case 4:
		pGPIO = LPC_GPIO4;
   12d88:	f24c 0380 	movw	r3, #49280	; 0xc080
   12d8c:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12d90:	60fb      	str	r3, [r7, #12]
		break;
   12d92:	e000      	b.n	12d96 <GPIO_GetPointer+0x6e>
	default:
		break;
   12d94:	bf00      	nop
	}

	return pGPIO;
   12d96:	68fb      	ldr	r3, [r7, #12]
}
   12d98:	4618      	mov	r0, r3
   12d9a:	f107 0714 	add.w	r7, r7, #20
   12d9e:	46bd      	mov	sp, r7
   12da0:	bc80      	pop	{r7}
   12da2:	4770      	bx	lr

00012da4 <FIO_HalfWordGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_HalfWord_TypeDef *FIO_HalfWordGetPointer(uint8_t portNum)
{
   12da4:	b480      	push	{r7}
   12da6:	b085      	sub	sp, #20
   12da8:	af00      	add	r7, sp, #0
   12daa:	4603      	mov	r3, r0
   12dac:	71fb      	strb	r3, [r7, #7]
	GPIO_HalfWord_TypeDef *pFIO = NULL;
   12dae:	f04f 0300 	mov.w	r3, #0
   12db2:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
   12db4:	79fb      	ldrb	r3, [r7, #7]
   12db6:	2b04      	cmp	r3, #4
   12db8:	d82a      	bhi.n	12e10 <FIO_HalfWordGetPointer+0x6c>
   12dba:	a201      	add	r2, pc, #4	; (adr r2, 12dc0 <FIO_HalfWordGetPointer+0x1c>)
   12dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12dc0:	00012dd5 	.word	0x00012dd5
   12dc4:	00012de1 	.word	0x00012de1
   12dc8:	00012ded 	.word	0x00012ded
   12dcc:	00012df9 	.word	0x00012df9
   12dd0:	00012e05 	.word	0x00012e05
	case 0:
		pFIO = GPIO0_HalfWord;
   12dd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12dd8:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12ddc:	60fb      	str	r3, [r7, #12]
		break;
   12dde:	e018      	b.n	12e12 <FIO_HalfWordGetPointer+0x6e>
	case 1:
		pFIO = GPIO1_HalfWord;
   12de0:	f24c 0320 	movw	r3, #49184	; 0xc020
   12de4:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12de8:	60fb      	str	r3, [r7, #12]
		break;
   12dea:	e012      	b.n	12e12 <FIO_HalfWordGetPointer+0x6e>
	case 2:
		pFIO = GPIO2_HalfWord;
   12dec:	f24c 0340 	movw	r3, #49216	; 0xc040
   12df0:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12df4:	60fb      	str	r3, [r7, #12]
		break;
   12df6:	e00c      	b.n	12e12 <FIO_HalfWordGetPointer+0x6e>
	case 3:
		pFIO = GPIO3_HalfWord;
   12df8:	f24c 0360 	movw	r3, #49248	; 0xc060
   12dfc:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e00:	60fb      	str	r3, [r7, #12]
		break;
   12e02:	e006      	b.n	12e12 <FIO_HalfWordGetPointer+0x6e>
	case 4:
		pFIO = GPIO4_HalfWord;
   12e04:	f24c 0380 	movw	r3, #49280	; 0xc080
   12e08:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e0c:	60fb      	str	r3, [r7, #12]
		break;
   12e0e:	e000      	b.n	12e12 <FIO_HalfWordGetPointer+0x6e>
	default:
		break;
   12e10:	bf00      	nop
	}

	return pFIO;
   12e12:	68fb      	ldr	r3, [r7, #12]
}
   12e14:	4618      	mov	r0, r3
   12e16:	f107 0714 	add.w	r7, r7, #20
   12e1a:	46bd      	mov	sp, r7
   12e1c:	bc80      	pop	{r7}
   12e1e:	4770      	bx	lr

00012e20 <FIO_ByteGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_Byte_TypeDef *FIO_ByteGetPointer(uint8_t portNum)
{
   12e20:	b480      	push	{r7}
   12e22:	b085      	sub	sp, #20
   12e24:	af00      	add	r7, sp, #0
   12e26:	4603      	mov	r3, r0
   12e28:	71fb      	strb	r3, [r7, #7]
	GPIO_Byte_TypeDef *pFIO = NULL;
   12e2a:	f04f 0300 	mov.w	r3, #0
   12e2e:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
   12e30:	79fb      	ldrb	r3, [r7, #7]
   12e32:	2b04      	cmp	r3, #4
   12e34:	d82a      	bhi.n	12e8c <FIO_ByteGetPointer+0x6c>
   12e36:	a201      	add	r2, pc, #4	; (adr r2, 12e3c <FIO_ByteGetPointer+0x1c>)
   12e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12e3c:	00012e51 	.word	0x00012e51
   12e40:	00012e5d 	.word	0x00012e5d
   12e44:	00012e69 	.word	0x00012e69
   12e48:	00012e75 	.word	0x00012e75
   12e4c:	00012e81 	.word	0x00012e81
	case 0:
		pFIO = GPIO0_Byte;
   12e50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   12e54:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e58:	60fb      	str	r3, [r7, #12]
		break;
   12e5a:	e018      	b.n	12e8e <FIO_ByteGetPointer+0x6e>
	case 1:
		pFIO = GPIO1_Byte;
   12e5c:	f24c 0320 	movw	r3, #49184	; 0xc020
   12e60:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e64:	60fb      	str	r3, [r7, #12]
		break;
   12e66:	e012      	b.n	12e8e <FIO_ByteGetPointer+0x6e>
	case 2:
		pFIO = GPIO2_Byte;
   12e68:	f24c 0340 	movw	r3, #49216	; 0xc040
   12e6c:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e70:	60fb      	str	r3, [r7, #12]
		break;
   12e72:	e00c      	b.n	12e8e <FIO_ByteGetPointer+0x6e>
	case 3:
		pFIO = GPIO3_Byte;
   12e74:	f24c 0360 	movw	r3, #49248	; 0xc060
   12e78:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e7c:	60fb      	str	r3, [r7, #12]
		break;
   12e7e:	e006      	b.n	12e8e <FIO_ByteGetPointer+0x6e>
	case 4:
		pFIO = GPIO4_Byte;
   12e80:	f24c 0380 	movw	r3, #49280	; 0xc080
   12e84:	f2c2 0309 	movt	r3, #8201	; 0x2009
   12e88:	60fb      	str	r3, [r7, #12]
		break;
   12e8a:	e000      	b.n	12e8e <FIO_ByteGetPointer+0x6e>
	default:
		break;
   12e8c:	bf00      	nop
	}

	return pFIO;
   12e8e:	68fb      	ldr	r3, [r7, #12]
}
   12e90:	4618      	mov	r0, r3
   12e92:	f107 0714 	add.w	r7, r7, #20
   12e96:	46bd      	mov	sp, r7
   12e98:	bc80      	pop	{r7}
   12e9a:	4770      	bx	lr

00012e9c <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
   12e9c:	b580      	push	{r7, lr}
   12e9e:	b084      	sub	sp, #16
   12ea0:	af00      	add	r7, sp, #0
   12ea2:	6039      	str	r1, [r7, #0]
   12ea4:	4613      	mov	r3, r2
   12ea6:	4602      	mov	r2, r0
   12ea8:	71fa      	strb	r2, [r7, #7]
   12eaa:	71bb      	strb	r3, [r7, #6]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
   12eac:	79fb      	ldrb	r3, [r7, #7]
   12eae:	4618      	mov	r0, r3
   12eb0:	f7ff ff3a 	bl	12d28 <GPIO_GetPointer>
   12eb4:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
   12eb6:	68fb      	ldr	r3, [r7, #12]
   12eb8:	2b00      	cmp	r3, #0
   12eba:	d011      	beq.n	12ee0 <GPIO_SetDir+0x44>
		// Enable Output
		if (dir) {
   12ebc:	79bb      	ldrb	r3, [r7, #6]
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d006      	beq.n	12ed0 <GPIO_SetDir+0x34>
			pGPIO->FIODIR |= bitValue;
   12ec2:	68fb      	ldr	r3, [r7, #12]
   12ec4:	681a      	ldr	r2, [r3, #0]
   12ec6:	683b      	ldr	r3, [r7, #0]
   12ec8:	431a      	orrs	r2, r3
   12eca:	68fb      	ldr	r3, [r7, #12]
   12ecc:	601a      	str	r2, [r3, #0]
   12ece:	e007      	b.n	12ee0 <GPIO_SetDir+0x44>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
   12ed0:	68fb      	ldr	r3, [r7, #12]
   12ed2:	681a      	ldr	r2, [r3, #0]
   12ed4:	683b      	ldr	r3, [r7, #0]
   12ed6:	ea6f 0303 	mvn.w	r3, r3
   12eda:	401a      	ands	r2, r3
   12edc:	68fb      	ldr	r3, [r7, #12]
   12ede:	601a      	str	r2, [r3, #0]
		}
	}
}
   12ee0:	f107 0710 	add.w	r7, r7, #16
   12ee4:	46bd      	mov	sp, r7
   12ee6:	bd80      	pop	{r7, pc}

00012ee8 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
   12ee8:	b580      	push	{r7, lr}
   12eea:	b084      	sub	sp, #16
   12eec:	af00      	add	r7, sp, #0
   12eee:	4603      	mov	r3, r0
   12ef0:	6039      	str	r1, [r7, #0]
   12ef2:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
   12ef4:	79fb      	ldrb	r3, [r7, #7]
   12ef6:	4618      	mov	r0, r3
   12ef8:	f7ff ff16 	bl	12d28 <GPIO_GetPointer>
   12efc:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
   12efe:	68fb      	ldr	r3, [r7, #12]
   12f00:	2b00      	cmp	r3, #0
   12f02:	d002      	beq.n	12f0a <GPIO_SetValue+0x22>
		pGPIO->FIOSET = bitValue;
   12f04:	68fb      	ldr	r3, [r7, #12]
   12f06:	683a      	ldr	r2, [r7, #0]
   12f08:	619a      	str	r2, [r3, #24]
	}
}
   12f0a:	f107 0710 	add.w	r7, r7, #16
   12f0e:	46bd      	mov	sp, r7
   12f10:	bd80      	pop	{r7, pc}
   12f12:	bf00      	nop

00012f14 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
   12f14:	b580      	push	{r7, lr}
   12f16:	b084      	sub	sp, #16
   12f18:	af00      	add	r7, sp, #0
   12f1a:	4603      	mov	r3, r0
   12f1c:	6039      	str	r1, [r7, #0]
   12f1e:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
   12f20:	79fb      	ldrb	r3, [r7, #7]
   12f22:	4618      	mov	r0, r3
   12f24:	f7ff ff00 	bl	12d28 <GPIO_GetPointer>
   12f28:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
   12f2a:	68fb      	ldr	r3, [r7, #12]
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	d002      	beq.n	12f36 <GPIO_ClearValue+0x22>
		pGPIO->FIOCLR = bitValue;
   12f30:	68fb      	ldr	r3, [r7, #12]
   12f32:	683a      	ldr	r2, [r7, #0]
   12f34:	61da      	str	r2, [r3, #28]
	}
}
   12f36:	f107 0710 	add.w	r7, r7, #16
   12f3a:	46bd      	mov	sp, r7
   12f3c:	bd80      	pop	{r7, pc}
   12f3e:	bf00      	nop

00012f40 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
   12f40:	b580      	push	{r7, lr}
   12f42:	b084      	sub	sp, #16
   12f44:	af00      	add	r7, sp, #0
   12f46:	4603      	mov	r3, r0
   12f48:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
   12f4a:	79fb      	ldrb	r3, [r7, #7]
   12f4c:	4618      	mov	r0, r3
   12f4e:	f7ff feeb 	bl	12d28 <GPIO_GetPointer>
   12f52:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
   12f54:	68fb      	ldr	r3, [r7, #12]
   12f56:	2b00      	cmp	r3, #0
   12f58:	d002      	beq.n	12f60 <GPIO_ReadValue+0x20>
		return pGPIO->FIOPIN;
   12f5a:	68fb      	ldr	r3, [r7, #12]
   12f5c:	695b      	ldr	r3, [r3, #20]
   12f5e:	e001      	b.n	12f64 <GPIO_ReadValue+0x24>
	}

	return (0);
   12f60:	f04f 0300 	mov.w	r3, #0
}
   12f64:	4618      	mov	r0, r3
   12f66:	f107 0710 	add.w	r7, r7, #16
   12f6a:	46bd      	mov	sp, r7
   12f6c:	bd80      	pop	{r7, pc}
   12f6e:	bf00      	nop

00012f70 <GPIO_IntCmd>:
 * 							- 0: Rising edge
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
   12f70:	b480      	push	{r7}
   12f72:	b083      	sub	sp, #12
   12f74:	af00      	add	r7, sp, #0
   12f76:	6039      	str	r1, [r7, #0]
   12f78:	4613      	mov	r3, r2
   12f7a:	4602      	mov	r2, r0
   12f7c:	71fa      	strb	r2, [r7, #7]
   12f7e:	71bb      	strb	r3, [r7, #6]
	if((portNum == 0)&&(edgeState == 0))
   12f80:	79fb      	ldrb	r3, [r7, #7]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d109      	bne.n	12f9a <GPIO_IntCmd+0x2a>
   12f86:	79bb      	ldrb	r3, [r7, #6]
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d106      	bne.n	12f9a <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnR = bitValue;
   12f8c:	f248 0380 	movw	r3, #32896	; 0x8080
   12f90:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	611a      	str	r2, [r3, #16]
   12f98:	e027      	b.n	12fea <GPIO_IntCmd+0x7a>
	else if ((portNum == 2)&&(edgeState == 0))
   12f9a:	79fb      	ldrb	r3, [r7, #7]
   12f9c:	2b02      	cmp	r3, #2
   12f9e:	d109      	bne.n	12fb4 <GPIO_IntCmd+0x44>
   12fa0:	79bb      	ldrb	r3, [r7, #6]
   12fa2:	2b00      	cmp	r3, #0
   12fa4:	d106      	bne.n	12fb4 <GPIO_IntCmd+0x44>
		LPC_GPIOINT->IO2IntEnR = bitValue;
   12fa6:	f248 0380 	movw	r3, #32896	; 0x8080
   12faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12fae:	683a      	ldr	r2, [r7, #0]
   12fb0:	631a      	str	r2, [r3, #48]	; 0x30
   12fb2:	e01a      	b.n	12fea <GPIO_IntCmd+0x7a>
	else if ((portNum == 0)&&(edgeState == 1))
   12fb4:	79fb      	ldrb	r3, [r7, #7]
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d109      	bne.n	12fce <GPIO_IntCmd+0x5e>
   12fba:	79bb      	ldrb	r3, [r7, #6]
   12fbc:	2b01      	cmp	r3, #1
   12fbe:	d106      	bne.n	12fce <GPIO_IntCmd+0x5e>
		LPC_GPIOINT->IO0IntEnF = bitValue;
   12fc0:	f248 0380 	movw	r3, #32896	; 0x8080
   12fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12fc8:	683a      	ldr	r2, [r7, #0]
   12fca:	615a      	str	r2, [r3, #20]
   12fcc:	e00d      	b.n	12fea <GPIO_IntCmd+0x7a>
	else if ((portNum == 2)&&(edgeState == 1))
   12fce:	79fb      	ldrb	r3, [r7, #7]
   12fd0:	2b02      	cmp	r3, #2
   12fd2:	d109      	bne.n	12fe8 <GPIO_IntCmd+0x78>
   12fd4:	79bb      	ldrb	r3, [r7, #6]
   12fd6:	2b01      	cmp	r3, #1
   12fd8:	d106      	bne.n	12fe8 <GPIO_IntCmd+0x78>
		LPC_GPIOINT->IO2IntEnF = bitValue;
   12fda:	f248 0380 	movw	r3, #32896	; 0x8080
   12fde:	f2c4 0302 	movt	r3, #16386	; 0x4002
   12fe2:	683a      	ldr	r2, [r7, #0]
   12fe4:	635a      	str	r2, [r3, #52]	; 0x34
   12fe6:	e000      	b.n	12fea <GPIO_IntCmd+0x7a>
	else
		//Error
		while(1);
   12fe8:	e7fe      	b.n	12fe8 <GPIO_IntCmd+0x78>
}
   12fea:	f107 070c 	add.w	r7, r7, #12
   12fee:	46bd      	mov	sp, r7
   12ff0:	bc80      	pop	{r7}
   12ff2:	4770      	bx	lr

00012ff4 <GPIO_GetIntStatus>:
 * 						- ENABLE: Interrupt has been generated due to a rising
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
   12ff4:	b480      	push	{r7}
   12ff6:	b083      	sub	sp, #12
   12ff8:	af00      	add	r7, sp, #0
   12ffa:	6039      	str	r1, [r7, #0]
   12ffc:	4613      	mov	r3, r2
   12ffe:	4602      	mov	r2, r0
   13000:	71fa      	strb	r2, [r7, #7]
   13002:	71bb      	strb	r3, [r7, #6]
	if((portNum == 0) && (edgeState == 0))//Rising Edge
   13004:	79fb      	ldrb	r3, [r7, #7]
   13006:	2b00      	cmp	r3, #0
   13008:	d10f      	bne.n	1302a <GPIO_GetIntStatus+0x36>
   1300a:	79bb      	ldrb	r3, [r7, #6]
   1300c:	2b00      	cmp	r3, #0
   1300e:	d10c      	bne.n	1302a <GPIO_GetIntStatus+0x36>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
   13010:	f248 0380 	movw	r3, #32896	; 0x8080
   13014:	f2c4 0302 	movt	r3, #16386	; 0x4002
   13018:	685a      	ldr	r2, [r3, #4]
   1301a:	683b      	ldr	r3, [r7, #0]
   1301c:	fa22 f303 	lsr.w	r3, r2, r3
   13020:	b2db      	uxtb	r3, r3
   13022:	f003 0301 	and.w	r3, r3, #1
   13026:	b2db      	uxtb	r3, r3
   13028:	e039      	b.n	1309e <GPIO_GetIntStatus+0xaa>
	else if ((portNum == 2) && (edgeState == 0))
   1302a:	79fb      	ldrb	r3, [r7, #7]
   1302c:	2b02      	cmp	r3, #2
   1302e:	d10f      	bne.n	13050 <GPIO_GetIntStatus+0x5c>
   13030:	79bb      	ldrb	r3, [r7, #6]
   13032:	2b00      	cmp	r3, #0
   13034:	d10c      	bne.n	13050 <GPIO_GetIntStatus+0x5c>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
   13036:	f248 0380 	movw	r3, #32896	; 0x8080
   1303a:	f2c4 0302 	movt	r3, #16386	; 0x4002
   1303e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13040:	683b      	ldr	r3, [r7, #0]
   13042:	fa22 f303 	lsr.w	r3, r2, r3
   13046:	b2db      	uxtb	r3, r3
   13048:	f003 0301 	and.w	r3, r3, #1
   1304c:	b2db      	uxtb	r3, r3
   1304e:	e026      	b.n	1309e <GPIO_GetIntStatus+0xaa>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
   13050:	79fb      	ldrb	r3, [r7, #7]
   13052:	2b00      	cmp	r3, #0
   13054:	d10f      	bne.n	13076 <GPIO_GetIntStatus+0x82>
   13056:	79bb      	ldrb	r3, [r7, #6]
   13058:	2b01      	cmp	r3, #1
   1305a:	d10c      	bne.n	13076 <GPIO_GetIntStatus+0x82>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
   1305c:	f248 0380 	movw	r3, #32896	; 0x8080
   13060:	f2c4 0302 	movt	r3, #16386	; 0x4002
   13064:	689a      	ldr	r2, [r3, #8]
   13066:	683b      	ldr	r3, [r7, #0]
   13068:	fa22 f303 	lsr.w	r3, r2, r3
   1306c:	b2db      	uxtb	r3, r3
   1306e:	f003 0301 	and.w	r3, r3, #1
   13072:	b2db      	uxtb	r3, r3
   13074:	e013      	b.n	1309e <GPIO_GetIntStatus+0xaa>
	else if ((portNum == 2) && (edgeState == 1))
   13076:	79fb      	ldrb	r3, [r7, #7]
   13078:	2b02      	cmp	r3, #2
   1307a:	d10f      	bne.n	1309c <GPIO_GetIntStatus+0xa8>
   1307c:	79bb      	ldrb	r3, [r7, #6]
   1307e:	2b01      	cmp	r3, #1
   13080:	d10c      	bne.n	1309c <GPIO_GetIntStatus+0xa8>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
   13082:	f248 0380 	movw	r3, #32896	; 0x8080
   13086:	f2c4 0302 	movt	r3, #16386	; 0x4002
   1308a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1308c:	683b      	ldr	r3, [r7, #0]
   1308e:	fa22 f303 	lsr.w	r3, r2, r3
   13092:	b2db      	uxtb	r3, r3
   13094:	f003 0301 	and.w	r3, r3, #1
   13098:	b2db      	uxtb	r3, r3
   1309a:	e000      	b.n	1309e <GPIO_GetIntStatus+0xaa>
	else
		//Error
		while(1);
   1309c:	e7fe      	b.n	1309c <GPIO_GetIntStatus+0xa8>
}
   1309e:	4618      	mov	r0, r3
   130a0:	f107 070c 	add.w	r7, r7, #12
   130a4:	46bd      	mov	sp, r7
   130a6:	bc80      	pop	{r7}
   130a8:	4770      	bx	lr
   130aa:	bf00      	nop

000130ac <GPIO_ClearInt>:
 * @param[in]	bitValue	Value that contains all bits on GPIO to enable,
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
   130ac:	b480      	push	{r7}
   130ae:	b083      	sub	sp, #12
   130b0:	af00      	add	r7, sp, #0
   130b2:	4603      	mov	r3, r0
   130b4:	6039      	str	r1, [r7, #0]
   130b6:	71fb      	strb	r3, [r7, #7]
	if(portNum == 0)
   130b8:	79fb      	ldrb	r3, [r7, #7]
   130ba:	2b00      	cmp	r3, #0
   130bc:	d106      	bne.n	130cc <GPIO_ClearInt+0x20>
		LPC_GPIOINT->IO0IntClr = bitValue;
   130be:	f248 0380 	movw	r3, #32896	; 0x8080
   130c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
   130c6:	683a      	ldr	r2, [r7, #0]
   130c8:	60da      	str	r2, [r3, #12]
   130ca:	e00a      	b.n	130e2 <GPIO_ClearInt+0x36>
	else if (portNum == 2)
   130cc:	79fb      	ldrb	r3, [r7, #7]
   130ce:	2b02      	cmp	r3, #2
   130d0:	d106      	bne.n	130e0 <GPIO_ClearInt+0x34>
		LPC_GPIOINT->IO2IntClr = bitValue;
   130d2:	f248 0380 	movw	r3, #32896	; 0x8080
   130d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
   130da:	683a      	ldr	r2, [r7, #0]
   130dc:	62da      	str	r2, [r3, #44]	; 0x2c
   130de:	e000      	b.n	130e2 <GPIO_ClearInt+0x36>
	else
		//Invalid portNum
		while(1);
   130e0:	e7fe      	b.n	130e0 <GPIO_ClearInt+0x34>
}
   130e2:	f107 070c 	add.w	r7, r7, #12
   130e6:	46bd      	mov	sp, r7
   130e8:	bc80      	pop	{r7}
   130ea:	4770      	bx	lr

000130ec <FIO_SetDir>:

/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
   130ec:	b580      	push	{r7, lr}
   130ee:	b082      	sub	sp, #8
   130f0:	af00      	add	r7, sp, #0
   130f2:	6039      	str	r1, [r7, #0]
   130f4:	4613      	mov	r3, r2
   130f6:	4602      	mov	r2, r0
   130f8:	71fa      	strb	r2, [r7, #7]
   130fa:	71bb      	strb	r3, [r7, #6]
	GPIO_SetDir(portNum, bitValue, dir);
   130fc:	79fa      	ldrb	r2, [r7, #7]
   130fe:	79bb      	ldrb	r3, [r7, #6]
   13100:	4610      	mov	r0, r2
   13102:	6839      	ldr	r1, [r7, #0]
   13104:	461a      	mov	r2, r3
   13106:	f7ff fec9 	bl	12e9c <GPIO_SetDir>
}
   1310a:	f107 0708 	add.w	r7, r7, #8
   1310e:	46bd      	mov	sp, r7
   13110:	bd80      	pop	{r7, pc}
   13112:	bf00      	nop

00013114 <FIO_SetValue>:

/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
   13114:	b580      	push	{r7, lr}
   13116:	b082      	sub	sp, #8
   13118:	af00      	add	r7, sp, #0
   1311a:	4603      	mov	r3, r0
   1311c:	6039      	str	r1, [r7, #0]
   1311e:	71fb      	strb	r3, [r7, #7]
	GPIO_SetValue(portNum, bitValue);
   13120:	79fb      	ldrb	r3, [r7, #7]
   13122:	4618      	mov	r0, r3
   13124:	6839      	ldr	r1, [r7, #0]
   13126:	f7ff fedf 	bl	12ee8 <GPIO_SetValue>
}
   1312a:	f107 0708 	add.w	r7, r7, #8
   1312e:	46bd      	mov	sp, r7
   13130:	bd80      	pop	{r7, pc}
   13132:	bf00      	nop

00013134 <FIO_ClearValue>:

/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
   13134:	b580      	push	{r7, lr}
   13136:	b082      	sub	sp, #8
   13138:	af00      	add	r7, sp, #0
   1313a:	4603      	mov	r3, r0
   1313c:	6039      	str	r1, [r7, #0]
   1313e:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearValue(portNum, bitValue);
   13140:	79fb      	ldrb	r3, [r7, #7]
   13142:	4618      	mov	r0, r3
   13144:	6839      	ldr	r1, [r7, #0]
   13146:	f7ff fee5 	bl	12f14 <GPIO_ClearValue>
}
   1314a:	f107 0708 	add.w	r7, r7, #8
   1314e:	46bd      	mov	sp, r7
   13150:	bd80      	pop	{r7, pc}
   13152:	bf00      	nop

00013154 <FIO_ReadValue>:

/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
   13154:	b580      	push	{r7, lr}
   13156:	b082      	sub	sp, #8
   13158:	af00      	add	r7, sp, #0
   1315a:	4603      	mov	r3, r0
   1315c:	71fb      	strb	r3, [r7, #7]
	return (GPIO_ReadValue(portNum));
   1315e:	79fb      	ldrb	r3, [r7, #7]
   13160:	4618      	mov	r0, r3
   13162:	f7ff feed 	bl	12f40 <GPIO_ReadValue>
   13166:	4603      	mov	r3, r0
}
   13168:	4618      	mov	r0, r3
   1316a:	f107 0708 	add.w	r7, r7, #8
   1316e:	46bd      	mov	sp, r7
   13170:	bd80      	pop	{r7, pc}
   13172:	bf00      	nop

00013174 <FIO_IntCmd>:

/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
   13174:	b580      	push	{r7, lr}
   13176:	b082      	sub	sp, #8
   13178:	af00      	add	r7, sp, #0
   1317a:	6039      	str	r1, [r7, #0]
   1317c:	4613      	mov	r3, r2
   1317e:	4602      	mov	r2, r0
   13180:	71fa      	strb	r2, [r7, #7]
   13182:	71bb      	strb	r3, [r7, #6]
	GPIO_IntCmd(portNum, bitValue, edgeState);
   13184:	79fa      	ldrb	r2, [r7, #7]
   13186:	79bb      	ldrb	r3, [r7, #6]
   13188:	4610      	mov	r0, r2
   1318a:	6839      	ldr	r1, [r7, #0]
   1318c:	461a      	mov	r2, r3
   1318e:	f7ff feef 	bl	12f70 <GPIO_IntCmd>
}
   13192:	f107 0708 	add.w	r7, r7, #8
   13196:	46bd      	mov	sp, r7
   13198:	bd80      	pop	{r7, pc}
   1319a:	bf00      	nop

0001319c <FIO_GetIntStatus>:

/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
   1319c:	b580      	push	{r7, lr}
   1319e:	b082      	sub	sp, #8
   131a0:	af00      	add	r7, sp, #0
   131a2:	6039      	str	r1, [r7, #0]
   131a4:	4613      	mov	r3, r2
   131a6:	4602      	mov	r2, r0
   131a8:	71fa      	strb	r2, [r7, #7]
   131aa:	71bb      	strb	r3, [r7, #6]
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
   131ac:	79fa      	ldrb	r2, [r7, #7]
   131ae:	79bb      	ldrb	r3, [r7, #6]
   131b0:	4610      	mov	r0, r2
   131b2:	6839      	ldr	r1, [r7, #0]
   131b4:	461a      	mov	r2, r3
   131b6:	f7ff ff1d 	bl	12ff4 <GPIO_GetIntStatus>
   131ba:	4603      	mov	r3, r0
}
   131bc:	4618      	mov	r0, r3
   131be:	f107 0708 	add.w	r7, r7, #8
   131c2:	46bd      	mov	sp, r7
   131c4:	bd80      	pop	{r7, pc}
   131c6:	bf00      	nop

000131c8 <FIO_ClearInt>:

/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
   131c8:	b580      	push	{r7, lr}
   131ca:	b082      	sub	sp, #8
   131cc:	af00      	add	r7, sp, #0
   131ce:	4603      	mov	r3, r0
   131d0:	6039      	str	r1, [r7, #0]
   131d2:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearInt(portNum, bitValue);
   131d4:	79fb      	ldrb	r3, [r7, #7]
   131d6:	4618      	mov	r0, r3
   131d8:	6839      	ldr	r1, [r7, #0]
   131da:	f7ff ff67 	bl	130ac <GPIO_ClearInt>
}
   131de:	f107 0708 	add.w	r7, r7, #8
   131e2:	46bd      	mov	sp, r7
   131e4:	bd80      	pop	{r7, pc}
   131e6:	bf00      	nop

000131e8 <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
   131e8:	b580      	push	{r7, lr}
   131ea:	b084      	sub	sp, #16
   131ec:	af00      	add	r7, sp, #0
   131ee:	6039      	str	r1, [r7, #0]
   131f0:	4613      	mov	r3, r2
   131f2:	4602      	mov	r2, r0
   131f4:	71fa      	strb	r2, [r7, #7]
   131f6:	71bb      	strb	r3, [r7, #6]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
   131f8:	79fb      	ldrb	r3, [r7, #7]
   131fa:	4618      	mov	r0, r3
   131fc:	f7ff fd94 	bl	12d28 <GPIO_GetPointer>
   13200:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	2b00      	cmp	r3, #0
   13206:	d011      	beq.n	1322c <FIO_SetMask+0x44>
		// Mask
		if (maskValue){
   13208:	79bb      	ldrb	r3, [r7, #6]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d006      	beq.n	1321c <FIO_SetMask+0x34>
			pFIO->FIOMASK |= bitValue;
   1320e:	68fb      	ldr	r3, [r7, #12]
   13210:	691a      	ldr	r2, [r3, #16]
   13212:	683b      	ldr	r3, [r7, #0]
   13214:	431a      	orrs	r2, r3
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	611a      	str	r2, [r3, #16]
   1321a:	e007      	b.n	1322c <FIO_SetMask+0x44>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
   1321c:	68fb      	ldr	r3, [r7, #12]
   1321e:	691a      	ldr	r2, [r3, #16]
   13220:	683b      	ldr	r3, [r7, #0]
   13222:	ea6f 0303 	mvn.w	r3, r3
   13226:	401a      	ands	r2, r3
   13228:	68fb      	ldr	r3, [r7, #12]
   1322a:	611a      	str	r2, [r3, #16]
		}
	}
}
   1322c:	f107 0710 	add.w	r7, r7, #16
   13230:	46bd      	mov	sp, r7
   13232:	bd80      	pop	{r7, pc}

00013234 <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
   13234:	b580      	push	{r7, lr}
   13236:	b084      	sub	sp, #16
   13238:	af00      	add	r7, sp, #0
   1323a:	71f8      	strb	r0, [r7, #7]
   1323c:	71b9      	strb	r1, [r7, #6]
   1323e:	80ba      	strh	r2, [r7, #4]
   13240:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
   13242:	79fb      	ldrb	r3, [r7, #7]
   13244:	4618      	mov	r0, r3
   13246:	f7ff fdad 	bl	12da4 <FIO_HalfWordGetPointer>
   1324a:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   1324c:	68fb      	ldr	r3, [r7, #12]
   1324e:	2b00      	cmp	r3, #0
   13250:	d035      	beq.n	132be <FIO_HalfWordSetDir+0x8a>
		// Output direction
		if (dir) {
   13252:	78fb      	ldrb	r3, [r7, #3]
   13254:	2b00      	cmp	r3, #0
   13256:	d014      	beq.n	13282 <FIO_HalfWordSetDir+0x4e>
			// Upper
			if(halfwordNum) {
   13258:	79bb      	ldrb	r3, [r7, #6]
   1325a:	2b00      	cmp	r3, #0
   1325c:	d008      	beq.n	13270 <FIO_HalfWordSetDir+0x3c>
				pFIO->FIODIRU |= bitValue;
   1325e:	68fb      	ldr	r3, [r7, #12]
   13260:	885b      	ldrh	r3, [r3, #2]
   13262:	b29a      	uxth	r2, r3
   13264:	88bb      	ldrh	r3, [r7, #4]
   13266:	4313      	orrs	r3, r2
   13268:	b29a      	uxth	r2, r3
   1326a:	68fb      	ldr	r3, [r7, #12]
   1326c:	805a      	strh	r2, [r3, #2]
   1326e:	e026      	b.n	132be <FIO_HalfWordSetDir+0x8a>
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
   13270:	68fb      	ldr	r3, [r7, #12]
   13272:	881b      	ldrh	r3, [r3, #0]
   13274:	b29a      	uxth	r2, r3
   13276:	88bb      	ldrh	r3, [r7, #4]
   13278:	4313      	orrs	r3, r2
   1327a:	b29a      	uxth	r2, r3
   1327c:	68fb      	ldr	r3, [r7, #12]
   1327e:	801a      	strh	r2, [r3, #0]
   13280:	e01d      	b.n	132be <FIO_HalfWordSetDir+0x8a>
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
   13282:	79bb      	ldrb	r3, [r7, #6]
   13284:	2b00      	cmp	r3, #0
   13286:	d00d      	beq.n	132a4 <FIO_HalfWordSetDir+0x70>
				pFIO->FIODIRU &= ~bitValue;
   13288:	68fb      	ldr	r3, [r7, #12]
   1328a:	885b      	ldrh	r3, [r3, #2]
   1328c:	b29b      	uxth	r3, r3
   1328e:	b29a      	uxth	r2, r3
   13290:	88bb      	ldrh	r3, [r7, #4]
   13292:	ea6f 0303 	mvn.w	r3, r3
   13296:	b29b      	uxth	r3, r3
   13298:	4013      	ands	r3, r2
   1329a:	b29b      	uxth	r3, r3
   1329c:	b29a      	uxth	r2, r3
   1329e:	68fb      	ldr	r3, [r7, #12]
   132a0:	805a      	strh	r2, [r3, #2]
   132a2:	e00c      	b.n	132be <FIO_HalfWordSetDir+0x8a>
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
   132a4:	68fb      	ldr	r3, [r7, #12]
   132a6:	881b      	ldrh	r3, [r3, #0]
   132a8:	b29b      	uxth	r3, r3
   132aa:	b29a      	uxth	r2, r3
   132ac:	88bb      	ldrh	r3, [r7, #4]
   132ae:	ea6f 0303 	mvn.w	r3, r3
   132b2:	b29b      	uxth	r3, r3
   132b4:	4013      	ands	r3, r2
   132b6:	b29b      	uxth	r3, r3
   132b8:	b29a      	uxth	r2, r3
   132ba:	68fb      	ldr	r3, [r7, #12]
   132bc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
   132be:	f107 0710 	add.w	r7, r7, #16
   132c2:	46bd      	mov	sp, r7
   132c4:	bd80      	pop	{r7, pc}
   132c6:	bf00      	nop

000132c8 <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
   132c8:	b580      	push	{r7, lr}
   132ca:	b084      	sub	sp, #16
   132cc:	af00      	add	r7, sp, #0
   132ce:	71f8      	strb	r0, [r7, #7]
   132d0:	71b9      	strb	r1, [r7, #6]
   132d2:	80ba      	strh	r2, [r7, #4]
   132d4:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
   132d6:	79fb      	ldrb	r3, [r7, #7]
   132d8:	4618      	mov	r0, r3
   132da:	f7ff fd63 	bl	12da4 <FIO_HalfWordGetPointer>
   132de:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   132e0:	68fb      	ldr	r3, [r7, #12]
   132e2:	2b00      	cmp	r3, #0
   132e4:	d035      	beq.n	13352 <FIO_HalfWordSetMask+0x8a>
		// Mask
		if (maskValue){
   132e6:	78fb      	ldrb	r3, [r7, #3]
   132e8:	2b00      	cmp	r3, #0
   132ea:	d014      	beq.n	13316 <FIO_HalfWordSetMask+0x4e>
			// Upper
			if(halfwordNum) {
   132ec:	79bb      	ldrb	r3, [r7, #6]
   132ee:	2b00      	cmp	r3, #0
   132f0:	d008      	beq.n	13304 <FIO_HalfWordSetMask+0x3c>
				pFIO->FIOMASKU |= bitValue;
   132f2:	68fb      	ldr	r3, [r7, #12]
   132f4:	8a5b      	ldrh	r3, [r3, #18]
   132f6:	b29a      	uxth	r2, r3
   132f8:	88bb      	ldrh	r3, [r7, #4]
   132fa:	4313      	orrs	r3, r2
   132fc:	b29a      	uxth	r2, r3
   132fe:	68fb      	ldr	r3, [r7, #12]
   13300:	825a      	strh	r2, [r3, #18]
   13302:	e026      	b.n	13352 <FIO_HalfWordSetMask+0x8a>
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
   13304:	68fb      	ldr	r3, [r7, #12]
   13306:	8a1b      	ldrh	r3, [r3, #16]
   13308:	b29a      	uxth	r2, r3
   1330a:	88bb      	ldrh	r3, [r7, #4]
   1330c:	4313      	orrs	r3, r2
   1330e:	b29a      	uxth	r2, r3
   13310:	68fb      	ldr	r3, [r7, #12]
   13312:	821a      	strh	r2, [r3, #16]
   13314:	e01d      	b.n	13352 <FIO_HalfWordSetMask+0x8a>
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
   13316:	79bb      	ldrb	r3, [r7, #6]
   13318:	2b00      	cmp	r3, #0
   1331a:	d00d      	beq.n	13338 <FIO_HalfWordSetMask+0x70>
				pFIO->FIOMASKU &= ~bitValue;
   1331c:	68fb      	ldr	r3, [r7, #12]
   1331e:	8a5b      	ldrh	r3, [r3, #18]
   13320:	b29b      	uxth	r3, r3
   13322:	b29a      	uxth	r2, r3
   13324:	88bb      	ldrh	r3, [r7, #4]
   13326:	ea6f 0303 	mvn.w	r3, r3
   1332a:	b29b      	uxth	r3, r3
   1332c:	4013      	ands	r3, r2
   1332e:	b29b      	uxth	r3, r3
   13330:	b29a      	uxth	r2, r3
   13332:	68fb      	ldr	r3, [r7, #12]
   13334:	825a      	strh	r2, [r3, #18]
   13336:	e00c      	b.n	13352 <FIO_HalfWordSetMask+0x8a>
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
   13338:	68fb      	ldr	r3, [r7, #12]
   1333a:	8a1b      	ldrh	r3, [r3, #16]
   1333c:	b29b      	uxth	r3, r3
   1333e:	b29a      	uxth	r2, r3
   13340:	88bb      	ldrh	r3, [r7, #4]
   13342:	ea6f 0303 	mvn.w	r3, r3
   13346:	b29b      	uxth	r3, r3
   13348:	4013      	ands	r3, r2
   1334a:	b29b      	uxth	r3, r3
   1334c:	b29a      	uxth	r2, r3
   1334e:	68fb      	ldr	r3, [r7, #12]
   13350:	821a      	strh	r2, [r3, #16]
			}
		}
	}
}
   13352:	f107 0710 	add.w	r7, r7, #16
   13356:	46bd      	mov	sp, r7
   13358:	bd80      	pop	{r7, pc}
   1335a:	bf00      	nop

0001335c <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
   1335c:	b580      	push	{r7, lr}
   1335e:	b084      	sub	sp, #16
   13360:	af00      	add	r7, sp, #0
   13362:	4613      	mov	r3, r2
   13364:	4602      	mov	r2, r0
   13366:	71fa      	strb	r2, [r7, #7]
   13368:	460a      	mov	r2, r1
   1336a:	71ba      	strb	r2, [r7, #6]
   1336c:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
   1336e:	79fb      	ldrb	r3, [r7, #7]
   13370:	4618      	mov	r0, r3
   13372:	f7ff fd17 	bl	12da4 <FIO_HalfWordGetPointer>
   13376:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   13378:	68fb      	ldr	r3, [r7, #12]
   1337a:	2b00      	cmp	r3, #0
   1337c:	d009      	beq.n	13392 <FIO_HalfWordSetValue+0x36>
		// Upper
		if(halfwordNum) {
   1337e:	79bb      	ldrb	r3, [r7, #6]
   13380:	2b00      	cmp	r3, #0
   13382:	d003      	beq.n	1338c <FIO_HalfWordSetValue+0x30>
			pFIO->FIOSETU = bitValue;
   13384:	68fb      	ldr	r3, [r7, #12]
   13386:	88ba      	ldrh	r2, [r7, #4]
   13388:	835a      	strh	r2, [r3, #26]
   1338a:	e002      	b.n	13392 <FIO_HalfWordSetValue+0x36>
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
   1338c:	68fb      	ldr	r3, [r7, #12]
   1338e:	88ba      	ldrh	r2, [r7, #4]
   13390:	831a      	strh	r2, [r3, #24]
		}
	}
}
   13392:	f107 0710 	add.w	r7, r7, #16
   13396:	46bd      	mov	sp, r7
   13398:	bd80      	pop	{r7, pc}
   1339a:	bf00      	nop

0001339c <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
   1339c:	b580      	push	{r7, lr}
   1339e:	b084      	sub	sp, #16
   133a0:	af00      	add	r7, sp, #0
   133a2:	4613      	mov	r3, r2
   133a4:	4602      	mov	r2, r0
   133a6:	71fa      	strb	r2, [r7, #7]
   133a8:	460a      	mov	r2, r1
   133aa:	71ba      	strb	r2, [r7, #6]
   133ac:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
   133ae:	79fb      	ldrb	r3, [r7, #7]
   133b0:	4618      	mov	r0, r3
   133b2:	f7ff fcf7 	bl	12da4 <FIO_HalfWordGetPointer>
   133b6:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   133b8:	68fb      	ldr	r3, [r7, #12]
   133ba:	2b00      	cmp	r3, #0
   133bc:	d009      	beq.n	133d2 <FIO_HalfWordClearValue+0x36>
		// Upper
		if(halfwordNum) {
   133be:	79bb      	ldrb	r3, [r7, #6]
   133c0:	2b00      	cmp	r3, #0
   133c2:	d003      	beq.n	133cc <FIO_HalfWordClearValue+0x30>
			pFIO->FIOCLRU = bitValue;
   133c4:	68fb      	ldr	r3, [r7, #12]
   133c6:	88ba      	ldrh	r2, [r7, #4]
   133c8:	83da      	strh	r2, [r3, #30]
   133ca:	e002      	b.n	133d2 <FIO_HalfWordClearValue+0x36>
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
   133cc:	68fb      	ldr	r3, [r7, #12]
   133ce:	88ba      	ldrh	r2, [r7, #4]
   133d0:	839a      	strh	r2, [r3, #28]
		}
	}
}
   133d2:	f107 0710 	add.w	r7, r7, #16
   133d6:	46bd      	mov	sp, r7
   133d8:	bd80      	pop	{r7, pc}
   133da:	bf00      	nop

000133dc <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
   133dc:	b580      	push	{r7, lr}
   133de:	b084      	sub	sp, #16
   133e0:	af00      	add	r7, sp, #0
   133e2:	4602      	mov	r2, r0
   133e4:	460b      	mov	r3, r1
   133e6:	71fa      	strb	r2, [r7, #7]
   133e8:	71bb      	strb	r3, [r7, #6]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
   133ea:	79fb      	ldrb	r3, [r7, #7]
   133ec:	4618      	mov	r0, r3
   133ee:	f7ff fcd9 	bl	12da4 <FIO_HalfWordGetPointer>
   133f2:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   133f4:	68fb      	ldr	r3, [r7, #12]
   133f6:	2b00      	cmp	r3, #0
   133f8:	d00a      	beq.n	13410 <FIO_HalfWordReadValue+0x34>
		// Upper
		if(halfwordNum) {
   133fa:	79bb      	ldrb	r3, [r7, #6]
   133fc:	2b00      	cmp	r3, #0
   133fe:	d003      	beq.n	13408 <FIO_HalfWordReadValue+0x2c>
			return (pFIO->FIOPINU);
   13400:	68fb      	ldr	r3, [r7, #12]
   13402:	8adb      	ldrh	r3, [r3, #22]
   13404:	b29b      	uxth	r3, r3
   13406:	e005      	b.n	13414 <FIO_HalfWordReadValue+0x38>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
   13408:	68fb      	ldr	r3, [r7, #12]
   1340a:	8a9b      	ldrh	r3, [r3, #20]
   1340c:	b29b      	uxth	r3, r3
   1340e:	e001      	b.n	13414 <FIO_HalfWordReadValue+0x38>
		}
	}
	return (0);
   13410:	f04f 0300 	mov.w	r3, #0
}
   13414:	4618      	mov	r0, r3
   13416:	f107 0710 	add.w	r7, r7, #16
   1341a:	46bd      	mov	sp, r7
   1341c:	bd80      	pop	{r7, pc}
   1341e:	bf00      	nop

00013420 <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
   13420:	b580      	push	{r7, lr}
   13422:	b084      	sub	sp, #16
   13424:	af00      	add	r7, sp, #0
   13426:	71f8      	strb	r0, [r7, #7]
   13428:	71b9      	strb	r1, [r7, #6]
   1342a:	717a      	strb	r2, [r7, #5]
   1342c:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
   1342e:	79fb      	ldrb	r3, [r7, #7]
   13430:	4618      	mov	r0, r3
   13432:	f7ff fcf5 	bl	12e20 <FIO_ByteGetPointer>
   13436:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   13438:	68fb      	ldr	r3, [r7, #12]
   1343a:	2b00      	cmp	r3, #0
   1343c:	d022      	beq.n	13484 <FIO_ByteSetDir+0x64>
		// Output direction
		if (dir) {
   1343e:	793b      	ldrb	r3, [r7, #4]
   13440:	2b00      	cmp	r3, #0
   13442:	d00d      	beq.n	13460 <FIO_ByteSetDir+0x40>
			if (byteNum <= 3) {
   13444:	79bb      	ldrb	r3, [r7, #6]
   13446:	2b03      	cmp	r3, #3
   13448:	d81c      	bhi.n	13484 <FIO_ByteSetDir+0x64>
				pFIO->FIODIR[byteNum] |= bitValue;
   1344a:	79bb      	ldrb	r3, [r7, #6]
   1344c:	79ba      	ldrb	r2, [r7, #6]
   1344e:	68f9      	ldr	r1, [r7, #12]
   13450:	5c8a      	ldrb	r2, [r1, r2]
   13452:	b2d1      	uxtb	r1, r2
   13454:	797a      	ldrb	r2, [r7, #5]
   13456:	430a      	orrs	r2, r1
   13458:	b2d1      	uxtb	r1, r2
   1345a:	68fa      	ldr	r2, [r7, #12]
   1345c:	54d1      	strb	r1, [r2, r3]
   1345e:	e011      	b.n	13484 <FIO_ByteSetDir+0x64>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
   13460:	79bb      	ldrb	r3, [r7, #6]
   13462:	2b03      	cmp	r3, #3
   13464:	d80e      	bhi.n	13484 <FIO_ByteSetDir+0x64>
				pFIO->FIODIR[byteNum] &= ~bitValue;
   13466:	79bb      	ldrb	r3, [r7, #6]
   13468:	79ba      	ldrb	r2, [r7, #6]
   1346a:	68f9      	ldr	r1, [r7, #12]
   1346c:	5c8a      	ldrb	r2, [r1, r2]
   1346e:	b2d2      	uxtb	r2, r2
   13470:	b2d1      	uxtb	r1, r2
   13472:	797a      	ldrb	r2, [r7, #5]
   13474:	ea6f 0202 	mvn.w	r2, r2
   13478:	b2d2      	uxtb	r2, r2
   1347a:	400a      	ands	r2, r1
   1347c:	b2d2      	uxtb	r2, r2
   1347e:	b2d1      	uxtb	r1, r2
   13480:	68fa      	ldr	r2, [r7, #12]
   13482:	54d1      	strb	r1, [r2, r3]
			}
		}
	}
}
   13484:	f107 0710 	add.w	r7, r7, #16
   13488:	46bd      	mov	sp, r7
   1348a:	bd80      	pop	{r7, pc}

0001348c <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
   1348c:	b580      	push	{r7, lr}
   1348e:	b084      	sub	sp, #16
   13490:	af00      	add	r7, sp, #0
   13492:	71f8      	strb	r0, [r7, #7]
   13494:	71b9      	strb	r1, [r7, #6]
   13496:	717a      	strb	r2, [r7, #5]
   13498:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
   1349a:	79fb      	ldrb	r3, [r7, #7]
   1349c:	4618      	mov	r0, r3
   1349e:	f7ff fcbf 	bl	12e20 <FIO_ByteGetPointer>
   134a2:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
   134a4:	68fb      	ldr	r3, [r7, #12]
   134a6:	2b00      	cmp	r3, #0
   134a8:	d026      	beq.n	134f8 <FIO_ByteSetMask+0x6c>
		// Mask
		if (maskValue) {
   134aa:	793b      	ldrb	r3, [r7, #4]
   134ac:	2b00      	cmp	r3, #0
   134ae:	d00f      	beq.n	134d0 <FIO_ByteSetMask+0x44>
			if (byteNum <= 3) {
   134b0:	79bb      	ldrb	r3, [r7, #6]
   134b2:	2b03      	cmp	r3, #3
   134b4:	d820      	bhi.n	134f8 <FIO_ByteSetMask+0x6c>
				pFIO->FIOMASK[byteNum] |= bitValue;
   134b6:	79bb      	ldrb	r3, [r7, #6]
   134b8:	79ba      	ldrb	r2, [r7, #6]
   134ba:	68f9      	ldr	r1, [r7, #12]
   134bc:	188a      	adds	r2, r1, r2
   134be:	7c12      	ldrb	r2, [r2, #16]
   134c0:	b2d1      	uxtb	r1, r2
   134c2:	797a      	ldrb	r2, [r7, #5]
   134c4:	430a      	orrs	r2, r1
   134c6:	b2d2      	uxtb	r2, r2
   134c8:	68f9      	ldr	r1, [r7, #12]
   134ca:	18cb      	adds	r3, r1, r3
   134cc:	741a      	strb	r2, [r3, #16]
   134ce:	e013      	b.n	134f8 <FIO_ByteSetMask+0x6c>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
   134d0:	79bb      	ldrb	r3, [r7, #6]
   134d2:	2b03      	cmp	r3, #3
   134d4:	d810      	bhi.n	134f8 <FIO_ByteSetMask+0x6c>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
   134d6:	79bb      	ldrb	r3, [r7, #6]
   134d8:	79ba      	ldrb	r2, [r7, #6]
   134da:	68f9      	ldr	r1, [r7, #12]
   134dc:	188a      	adds	r2, r1, r2
   134de:	7c12      	ldrb	r2, [r2, #16]
   134e0:	b2d2      	uxtb	r2, r2
   134e2:	b2d1      	uxtb	r1, r2
   134e4:	797a      	ldrb	r2, [r7, #5]
   134e6:	ea6f 0202 	mvn.w	r2, r2
   134ea:	b2d2      	uxtb	r2, r2
   134ec:	400a      	ands	r2, r1
   134ee:	b2d2      	uxtb	r2, r2
   134f0:	b2d2      	uxtb	r2, r2
   134f2:	68f9      	ldr	r1, [r7, #12]
   134f4:	18cb      	adds	r3, r1, r3
   134f6:	741a      	strb	r2, [r3, #16]
			}
		}
	}
}
   134f8:	f107 0710 	add.w	r7, r7, #16
   134fc:	46bd      	mov	sp, r7
   134fe:	bd80      	pop	{r7, pc}

00013500 <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
   13500:	b580      	push	{r7, lr}
   13502:	b084      	sub	sp, #16
   13504:	af00      	add	r7, sp, #0
   13506:	4613      	mov	r3, r2
   13508:	4602      	mov	r2, r0
   1350a:	71fa      	strb	r2, [r7, #7]
   1350c:	460a      	mov	r2, r1
   1350e:	71ba      	strb	r2, [r7, #6]
   13510:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
   13512:	79fb      	ldrb	r3, [r7, #7]
   13514:	4618      	mov	r0, r3
   13516:	f7ff fc83 	bl	12e20 <FIO_ByteGetPointer>
   1351a:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	2b00      	cmp	r3, #0
   13520:	d007      	beq.n	13532 <FIO_ByteSetValue+0x32>
		if (byteNum <= 3){
   13522:	79bb      	ldrb	r3, [r7, #6]
   13524:	2b03      	cmp	r3, #3
   13526:	d804      	bhi.n	13532 <FIO_ByteSetValue+0x32>
			pFIO->FIOSET[byteNum] = bitValue;
   13528:	79bb      	ldrb	r3, [r7, #6]
   1352a:	68fa      	ldr	r2, [r7, #12]
   1352c:	18d3      	adds	r3, r2, r3
   1352e:	797a      	ldrb	r2, [r7, #5]
   13530:	761a      	strb	r2, [r3, #24]
		}
	}
}
   13532:	f107 0710 	add.w	r7, r7, #16
   13536:	46bd      	mov	sp, r7
   13538:	bd80      	pop	{r7, pc}
   1353a:	bf00      	nop

0001353c <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
   1353c:	b580      	push	{r7, lr}
   1353e:	b084      	sub	sp, #16
   13540:	af00      	add	r7, sp, #0
   13542:	4613      	mov	r3, r2
   13544:	4602      	mov	r2, r0
   13546:	71fa      	strb	r2, [r7, #7]
   13548:	460a      	mov	r2, r1
   1354a:	71ba      	strb	r2, [r7, #6]
   1354c:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
   1354e:	79fb      	ldrb	r3, [r7, #7]
   13550:	4618      	mov	r0, r3
   13552:	f7ff fc65 	bl	12e20 <FIO_ByteGetPointer>
   13556:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
   13558:	68fb      	ldr	r3, [r7, #12]
   1355a:	2b00      	cmp	r3, #0
   1355c:	d007      	beq.n	1356e <FIO_ByteClearValue+0x32>
		if (byteNum <= 3){
   1355e:	79bb      	ldrb	r3, [r7, #6]
   13560:	2b03      	cmp	r3, #3
   13562:	d804      	bhi.n	1356e <FIO_ByteClearValue+0x32>
			pFIO->FIOCLR[byteNum] = bitValue;
   13564:	79bb      	ldrb	r3, [r7, #6]
   13566:	68fa      	ldr	r2, [r7, #12]
   13568:	18d3      	adds	r3, r2, r3
   1356a:	797a      	ldrb	r2, [r7, #5]
   1356c:	771a      	strb	r2, [r3, #28]
		}
	}
}
   1356e:	f107 0710 	add.w	r7, r7, #16
   13572:	46bd      	mov	sp, r7
   13574:	bd80      	pop	{r7, pc}
   13576:	bf00      	nop

00013578 <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
   13578:	b580      	push	{r7, lr}
   1357a:	b084      	sub	sp, #16
   1357c:	af00      	add	r7, sp, #0
   1357e:	4602      	mov	r2, r0
   13580:	460b      	mov	r3, r1
   13582:	71fa      	strb	r2, [r7, #7]
   13584:	71bb      	strb	r3, [r7, #6]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
   13586:	79fb      	ldrb	r3, [r7, #7]
   13588:	4618      	mov	r0, r3
   1358a:	f7ff fc49 	bl	12e20 <FIO_ByteGetPointer>
   1358e:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
   13590:	68fb      	ldr	r3, [r7, #12]
   13592:	2b00      	cmp	r3, #0
   13594:	d008      	beq.n	135a8 <FIO_ByteReadValue+0x30>
		if (byteNum <= 3){
   13596:	79bb      	ldrb	r3, [r7, #6]
   13598:	2b03      	cmp	r3, #3
   1359a:	d805      	bhi.n	135a8 <FIO_ByteReadValue+0x30>
			return (pFIO->FIOPIN[byteNum]);
   1359c:	79bb      	ldrb	r3, [r7, #6]
   1359e:	68fa      	ldr	r2, [r7, #12]
   135a0:	18d3      	adds	r3, r2, r3
   135a2:	7d1b      	ldrb	r3, [r3, #20]
   135a4:	b2db      	uxtb	r3, r3
   135a6:	e001      	b.n	135ac <FIO_ByteReadValue+0x34>
		}
	}
	return (0);
   135a8:	f04f 0300 	mov.w	r3, #0
}
   135ac:	4618      	mov	r0, r3
   135ae:	f107 0710 	add.w	r7, r7, #16
   135b2:	46bd      	mov	sp, r7
   135b4:	bd80      	pop	{r7, pc}
   135b6:	bf00      	nop

000135b8 <rx_descr_init>:
 * @brief 		Initializes RX Descriptor
 * @param[in] 	None
 * @return 		None
 ***********************************************************************/
static void rx_descr_init (void)
{
   135b8:	b480      	push	{r7}
   135ba:	b083      	sub	sp, #12
   135bc:	af00      	add	r7, sp, #0
	/* Initialize Receive Descriptor and Status array. */
	uint32_t i;

	for (i = 0; i < EMAC_NUM_RX_FRAG; i++) {
   135be:	f04f 0300 	mov.w	r3, #0
   135c2:	607b      	str	r3, [r7, #4]
   135c4:	e039      	b.n	1363a <rx_descr_init+0x82>
		Rx_Desc[i].Packet  = (uint32_t)&eth_rx_buf[i];
   135c6:	687a      	ldr	r2, [r7, #4]
   135c8:	4613      	mov	r3, r2
   135ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
   135ce:	189b      	adds	r3, r3, r2
   135d0:	ea4f 2343 	mov.w	r3, r3, lsl #9
   135d4:	461a      	mov	r2, r3
   135d6:	f640 4384 	movw	r3, #3204	; 0xc84
   135da:	f2c1 0300 	movt	r3, #4096	; 0x1000
   135de:	18d3      	adds	r3, r2, r3
   135e0:	4619      	mov	r1, r3
   135e2:	f640 4320 	movw	r3, #3104	; 0xc20
   135e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   135ea:	687a      	ldr	r2, [r7, #4]
   135ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		Rx_Desc[i].Ctrl    = EMAC_RCTRL_INT | (EMAC_ETH_MAX_FLEN - 1);
   135f0:	f640 4220 	movw	r2, #3104	; 0xc20
   135f4:	f2c1 0200 	movt	r2, #4096	; 0x1000
   135f8:	687b      	ldr	r3, [r7, #4]
   135fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   135fe:	18d3      	adds	r3, r2, r3
   13600:	f240 52ff 	movw	r2, #1535	; 0x5ff
   13604:	f2c8 0200 	movt	r2, #32768	; 0x8000
   13608:	605a      	str	r2, [r3, #4]
		Rx_Stat[i].Info    = 0;
   1360a:	f640 4340 	movw	r3, #3136	; 0xc40
   1360e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13612:	687a      	ldr	r2, [r7, #4]
   13614:	f04f 0100 	mov.w	r1, #0
   13618:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		Rx_Stat[i].HashCRC = 0;
   1361c:	f640 4240 	movw	r2, #3136	; 0xc40
   13620:	f2c1 0200 	movt	r2, #4096	; 0x1000
   13624:	687b      	ldr	r3, [r7, #4]
   13626:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1362a:	18d3      	adds	r3, r2, r3
   1362c:	f04f 0200 	mov.w	r2, #0
   13630:	605a      	str	r2, [r3, #4]
static void rx_descr_init (void)
{
	/* Initialize Receive Descriptor and Status array. */
	uint32_t i;

	for (i = 0; i < EMAC_NUM_RX_FRAG; i++) {
   13632:	687b      	ldr	r3, [r7, #4]
   13634:	f103 0301 	add.w	r3, r3, #1
   13638:	607b      	str	r3, [r7, #4]
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	2b03      	cmp	r3, #3
   1363e:	d9c2      	bls.n	135c6 <rx_descr_init+0xe>
		Rx_Stat[i].Info    = 0;
		Rx_Stat[i].HashCRC = 0;
	}

	/* Set EMAC Receive Descriptor Registers. */
	LPC_EMAC->RxDescriptor       = (uint32_t)&Rx_Desc[0];
   13640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13644:	f640 4320 	movw	r3, #3104	; 0xc20
   13648:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1364c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	LPC_EMAC->RxStatus           = (uint32_t)&Rx_Stat[0];
   13650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13654:	f640 4340 	movw	r3, #3136	; 0xc40
   13658:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1365c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_EMAC->RxDescriptorNumber = EMAC_NUM_RX_FRAG - 1;
   13660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13664:	f04f 0203 	mov.w	r2, #3
   13668:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Rx Descriptors Point to 0 */
	LPC_EMAC->RxConsumeIndex  = 0;
   1366c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13670:	f04f 0200 	mov.w	r2, #0
   13674:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
   13678:	f107 070c 	add.w	r7, r7, #12
   1367c:	46bd      	mov	sp, r7
   1367e:	bc80      	pop	{r7}
   13680:	4770      	bx	lr
   13682:	bf00      	nop

00013684 <tx_descr_init>:
/*********************************************************************//**
 * @brief 		Initializes TX Descriptor
 * @param[in] 	None
 * @return 		None
 ***********************************************************************/
static void tx_descr_init (void) {
   13684:	b480      	push	{r7}
   13686:	b083      	sub	sp, #12
   13688:	af00      	add	r7, sp, #0
	/* Initialize Transmit Descriptor and Status array. */
	uint32_t i;

	for (i = 0; i < EMAC_NUM_TX_FRAG; i++) {
   1368a:	f04f 0300 	mov.w	r3, #0
   1368e:	607b      	str	r3, [r7, #4]
   13690:	e02c      	b.n	136ec <tx_descr_init+0x68>
		Tx_Desc[i].Packet = (uint32_t)&eth_tx_buf[i];
   13692:	687a      	ldr	r2, [r7, #4]
   13694:	4613      	mov	r3, r2
   13696:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1369a:	189b      	adds	r3, r3, r2
   1369c:	ea4f 2343 	mov.w	r3, r3, lsl #9
   136a0:	461a      	mov	r2, r3
   136a2:	f242 4384 	movw	r3, #9348	; 0x2484
   136a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   136aa:	18d3      	adds	r3, r2, r3
   136ac:	4619      	mov	r1, r3
   136ae:	f640 4360 	movw	r3, #3168	; 0xc60
   136b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   136b6:	687a      	ldr	r2, [r7, #4]
   136b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		Tx_Desc[i].Ctrl   = 0;
   136bc:	f640 4260 	movw	r2, #3168	; 0xc60
   136c0:	f2c1 0200 	movt	r2, #4096	; 0x1000
   136c4:	687b      	ldr	r3, [r7, #4]
   136c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   136ca:	18d3      	adds	r3, r2, r3
   136cc:	f04f 0200 	mov.w	r2, #0
   136d0:	605a      	str	r2, [r3, #4]
		Tx_Stat[i].Info   = 0;
   136d2:	f640 4378 	movw	r3, #3192	; 0xc78
   136d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   136da:	687a      	ldr	r2, [r7, #4]
   136dc:	f04f 0100 	mov.w	r1, #0
   136e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 ***********************************************************************/
static void tx_descr_init (void) {
	/* Initialize Transmit Descriptor and Status array. */
	uint32_t i;

	for (i = 0; i < EMAC_NUM_TX_FRAG; i++) {
   136e4:	687b      	ldr	r3, [r7, #4]
   136e6:	f103 0301 	add.w	r3, r3, #1
   136ea:	607b      	str	r3, [r7, #4]
   136ec:	687b      	ldr	r3, [r7, #4]
   136ee:	2b02      	cmp	r3, #2
   136f0:	d9cf      	bls.n	13692 <tx_descr_init+0xe>
		Tx_Desc[i].Ctrl   = 0;
		Tx_Stat[i].Info   = 0;
	}

	/* Set EMAC Transmit Descriptor Registers. */
	LPC_EMAC->TxDescriptor       = (uint32_t)&Tx_Desc[0];
   136f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   136f6:	f640 4360 	movw	r3, #3168	; 0xc60
   136fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   136fe:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	LPC_EMAC->TxStatus           = (uint32_t)&Tx_Stat[0];
   13702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13706:	f640 4378 	movw	r3, #3192	; 0xc78
   1370a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1370e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_EMAC->TxDescriptorNumber = EMAC_NUM_TX_FRAG - 1;
   13712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13716:	f04f 0202 	mov.w	r2, #2
   1371a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

	/* Tx Descriptors Point to 0 */
	LPC_EMAC->TxProduceIndex  = 0;
   1371e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13722:	f04f 0200 	mov.w	r2, #0
   13726:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
   1372a:	f107 070c 	add.w	r7, r7, #12
   1372e:	46bd      	mov	sp, r7
   13730:	bc80      	pop	{r7}
   13732:	4770      	bx	lr

00013734 <write_PHY>:
 * @param[in] 	Value:  Value to write
 * @return 		0 - if success
 * 				1 - if fail
 ***********************************************************************/
static int32_t write_PHY (uint32_t PhyReg, uint16_t Value)
{
   13734:	b480      	push	{r7}
   13736:	b085      	sub	sp, #20
   13738:	af00      	add	r7, sp, #0
   1373a:	6078      	str	r0, [r7, #4]
   1373c:	460b      	mov	r3, r1
   1373e:	807b      	strh	r3, [r7, #2]
	/* Write a data 'Value' to PHY register 'PhyReg'. */
	uint32_t tout;

	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
   13740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13744:	687a      	ldr	r2, [r7, #4]
   13746:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_EMAC->MWTD = Value;
   13748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1374c:	887a      	ldrh	r2, [r7, #2]
   1374e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Wait until operation completed */
	tout = 0;
   13750:	f04f 0300 	mov.w	r3, #0
   13754:	60fb      	str	r3, [r7, #12]
	for (tout = 0; tout < EMAC_MII_WR_TOUT; tout++) {
   13756:	f04f 0300 	mov.w	r3, #0
   1375a:	60fb      	str	r3, [r7, #12]
   1375c:	e00d      	b.n	1377a <write_PHY+0x46>
		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
   1375e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13764:	f003 0301 	and.w	r3, r3, #1
   13768:	2b00      	cmp	r3, #0
   1376a:	d102      	bne.n	13772 <write_PHY+0x3e>
			return (0);
   1376c:	f04f 0300 	mov.w	r3, #0
   13770:	e00c      	b.n	1378c <write_PHY+0x58>
	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
	LPC_EMAC->MWTD = Value;

	/* Wait until operation completed */
	tout = 0;
	for (tout = 0; tout < EMAC_MII_WR_TOUT; tout++) {
   13772:	68fb      	ldr	r3, [r7, #12]
   13774:	f103 0301 	add.w	r3, r3, #1
   13778:	60fb      	str	r3, [r7, #12]
   1377a:	68fa      	ldr	r2, [r7, #12]
   1377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13780:	f2c0 0304 	movt	r3, #4
   13784:	429a      	cmp	r2, r3
   13786:	d9ea      	bls.n	1375e <write_PHY+0x2a>
		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
			return (0);
		}
	}
	// Time out!
	return (-1);
   13788:	f04f 33ff 	mov.w	r3, #4294967295
}
   1378c:	4618      	mov	r0, r3
   1378e:	f107 0714 	add.w	r7, r7, #20
   13792:	46bd      	mov	sp, r7
   13794:	bc80      	pop	{r7}
   13796:	4770      	bx	lr

00013798 <read_PHY>:
 * @param[in] 	PhyReg: PHY Register address
 * @return 		0 - if success
 * 				1 - if fail
 ***********************************************************************/
static int32_t read_PHY (uint32_t PhyReg)
{
   13798:	b480      	push	{r7}
   1379a:	b085      	sub	sp, #20
   1379c:	af00      	add	r7, sp, #0
   1379e:	6078      	str	r0, [r7, #4]
	/* Read a PHY register 'PhyReg'. */
	uint32_t tout;

	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
   137a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   137a4:	687a      	ldr	r2, [r7, #4]
   137a6:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_EMAC->MCMD = EMAC_MCMD_READ;
   137a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   137ac:	f04f 0201 	mov.w	r2, #1
   137b0:	625a      	str	r2, [r3, #36]	; 0x24

	/* Wait until operation completed */
	tout = 0;
   137b2:	f04f 0300 	mov.w	r3, #0
   137b6:	60fb      	str	r3, [r7, #12]
	for (tout = 0; tout < EMAC_MII_RD_TOUT; tout++) {
   137b8:	f04f 0300 	mov.w	r3, #0
   137bc:	60fb      	str	r3, [r7, #12]
   137be:	e013      	b.n	137e8 <read_PHY+0x50>
		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
   137c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   137c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   137c6:	f003 0301 	and.w	r3, r3, #1
   137ca:	2b00      	cmp	r3, #0
   137cc:	d108      	bne.n	137e0 <read_PHY+0x48>
			LPC_EMAC->MCMD = 0;
   137ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   137d2:	f04f 0200 	mov.w	r2, #0
   137d6:	625a      	str	r2, [r3, #36]	; 0x24
			return (LPC_EMAC->MRDD);
   137d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   137dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   137de:	e00c      	b.n	137fa <read_PHY+0x62>
	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
	LPC_EMAC->MCMD = EMAC_MCMD_READ;

	/* Wait until operation completed */
	tout = 0;
	for (tout = 0; tout < EMAC_MII_RD_TOUT; tout++) {
   137e0:	68fb      	ldr	r3, [r7, #12]
   137e2:	f103 0301 	add.w	r3, r3, #1
   137e6:	60fb      	str	r3, [r7, #12]
   137e8:	68fa      	ldr	r2, [r7, #12]
   137ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   137ee:	f2c0 0304 	movt	r3, #4
   137f2:	429a      	cmp	r2, r3
   137f4:	d9e4      	bls.n	137c0 <read_PHY+0x28>
			LPC_EMAC->MCMD = 0;
			return (LPC_EMAC->MRDD);
		}
	}
	// Time out!
	return (-1);
   137f6:	f04f 33ff 	mov.w	r3, #4294967295
}
   137fa:	4618      	mov	r0, r3
   137fc:	f107 0714 	add.w	r7, r7, #20
   13800:	46bd      	mov	sp, r7
   13802:	bc80      	pop	{r7}
   13804:	4770      	bx	lr
   13806:	bf00      	nop

00013808 <setEmacAddr>:
 * @param[in]	abStationAddr Pointer to Station address that contains 6-bytes
 * 				of MAC address (should be in order from MAC Address 1 to MAC Address 6)
 * @return		None
 **********************************************************************/
static void setEmacAddr(uint8_t abStationAddr[])
{
   13808:	b480      	push	{r7}
   1380a:	b083      	sub	sp, #12
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
	/* Set the Ethernet MAC Address registers */
	LPC_EMAC->SA0 = ((uint32_t)abStationAddr[5] << 8) | (uint32_t)abStationAddr[4];
   13810:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	f103 0305 	add.w	r3, r3, #5
   1381a:	781b      	ldrb	r3, [r3, #0]
   1381c:	ea4f 2203 	mov.w	r2, r3, lsl #8
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	f103 0304 	add.w	r3, r3, #4
   13826:	781b      	ldrb	r3, [r3, #0]
   13828:	431a      	orrs	r2, r3
   1382a:	460b      	mov	r3, r1
   1382c:	641a      	str	r2, [r3, #64]	; 0x40
	LPC_EMAC->SA1 = ((uint32_t)abStationAddr[3] << 8) | (uint32_t)abStationAddr[2];
   1382e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13832:	687b      	ldr	r3, [r7, #4]
   13834:	f103 0303 	add.w	r3, r3, #3
   13838:	781b      	ldrb	r3, [r3, #0]
   1383a:	ea4f 2203 	mov.w	r2, r3, lsl #8
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	f103 0302 	add.w	r3, r3, #2
   13844:	781b      	ldrb	r3, [r3, #0]
   13846:	431a      	orrs	r2, r3
   13848:	460b      	mov	r3, r1
   1384a:	645a      	str	r2, [r3, #68]	; 0x44
	LPC_EMAC->SA2 = ((uint32_t)abStationAddr[1] << 8) | (uint32_t)abStationAddr[0];
   1384c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13850:	687b      	ldr	r3, [r7, #4]
   13852:	f103 0301 	add.w	r3, r3, #1
   13856:	781b      	ldrb	r3, [r3, #0]
   13858:	ea4f 2203 	mov.w	r2, r3, lsl #8
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	781b      	ldrb	r3, [r3, #0]
   13860:	431a      	orrs	r2, r3
   13862:	460b      	mov	r3, r1
   13864:	649a      	str	r2, [r3, #72]	; 0x48
}
   13866:	f107 070c 	add.w	r7, r7, #12
   1386a:	46bd      	mov	sp, r7
   1386c:	bc80      	pop	{r7}
   1386e:	4770      	bx	lr

00013870 <emac_CRCCalc>:
 * @param[in]	frame_no_fcs	Pointer to the first byte of the frame
 * @param[in]	frame_len		length of the frame without the FCS
 * @return		the CRC as a 32 bit integer
 **********************************************************************/
static int32_t emac_CRCCalc(uint8_t frame_no_fcs[], int32_t frame_len)
{
   13870:	b480      	push	{r7}
   13872:	b08b      	sub	sp, #44	; 0x2c
   13874:	af00      	add	r7, sp, #0
   13876:	6078      	str	r0, [r7, #4]
   13878:	6039      	str	r1, [r7, #0]
	int i; 		// iterator
	int j; 		// another iterator
	char byte; 	// current byte
	int crc; 	// CRC result
	int q0, q1, q2, q3; // temporary variables
	crc = 0xFFFFFFFF;
   1387a:	f04f 33ff 	mov.w	r3, #4294967295
   1387e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < frame_len; i++) {
   13880:	f04f 0300 	mov.w	r3, #0
   13884:	627b      	str	r3, [r7, #36]	; 0x24
   13886:	e07a      	b.n	1397e <emac_CRCCalc+0x10e>
		byte = *frame_no_fcs++;
   13888:	687b      	ldr	r3, [r7, #4]
   1388a:	781b      	ldrb	r3, [r3, #0]
   1388c:	77fb      	strb	r3, [r7, #31]
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	f103 0301 	add.w	r3, r3, #1
   13894:	607b      	str	r3, [r7, #4]
		for (j = 0; j < 2; j++) {
   13896:	f04f 0300 	mov.w	r3, #0
   1389a:	623b      	str	r3, [r7, #32]
   1389c:	e068      	b.n	13970 <emac_CRCCalc+0x100>
			if (((crc >> 28) ^ (byte >> 3)) & 0x00000001) {
   1389e:	69bb      	ldr	r3, [r7, #24]
   138a0:	ea4f 7223 	mov.w	r2, r3, asr #28
   138a4:	7ffb      	ldrb	r3, [r7, #31]
   138a6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   138aa:	b2db      	uxtb	r3, r3
   138ac:	4053      	eors	r3, r2
   138ae:	f003 0301 	and.w	r3, r3, #1
   138b2:	b2db      	uxtb	r3, r3
   138b4:	2b00      	cmp	r3, #0
   138b6:	d005      	beq.n	138c4 <emac_CRCCalc+0x54>
				q3 = 0x04C11DB7;
   138b8:	f641 53b7 	movw	r3, #7607	; 0x1db7
   138bc:	f2c0 43c1 	movt	r3, #1217	; 0x4c1
   138c0:	60bb      	str	r3, [r7, #8]
   138c2:	e002      	b.n	138ca <emac_CRCCalc+0x5a>
			} else {
				q3 = 0x00000000;
   138c4:	f04f 0300 	mov.w	r3, #0
   138c8:	60bb      	str	r3, [r7, #8]
			}
			if (((crc >> 29) ^ (byte >> 2)) & 0x00000001) {
   138ca:	69bb      	ldr	r3, [r7, #24]
   138cc:	ea4f 7263 	mov.w	r2, r3, asr #29
   138d0:	7ffb      	ldrb	r3, [r7, #31]
   138d2:	ea4f 0393 	mov.w	r3, r3, lsr #2
   138d6:	b2db      	uxtb	r3, r3
   138d8:	4053      	eors	r3, r2
   138da:	f003 0301 	and.w	r3, r3, #1
   138de:	b2db      	uxtb	r3, r3
   138e0:	2b00      	cmp	r3, #0
   138e2:	d005      	beq.n	138f0 <emac_CRCCalc+0x80>
				q2 = 0x09823B6E;
   138e4:	f643 336e 	movw	r3, #15214	; 0x3b6e
   138e8:	f6c0 1382 	movt	r3, #2434	; 0x982
   138ec:	60fb      	str	r3, [r7, #12]
   138ee:	e002      	b.n	138f6 <emac_CRCCalc+0x86>
			} else {
				q2 = 0x00000000;
   138f0:	f04f 0300 	mov.w	r3, #0
   138f4:	60fb      	str	r3, [r7, #12]
			}
			if (((crc >> 30) ^ (byte >> 1)) & 0x00000001) {
   138f6:	69bb      	ldr	r3, [r7, #24]
   138f8:	ea4f 72a3 	mov.w	r2, r3, asr #30
   138fc:	7ffb      	ldrb	r3, [r7, #31]
   138fe:	ea4f 0353 	mov.w	r3, r3, lsr #1
   13902:	b2db      	uxtb	r3, r3
   13904:	4053      	eors	r3, r2
   13906:	f003 0301 	and.w	r3, r3, #1
   1390a:	b2db      	uxtb	r3, r3
   1390c:	2b00      	cmp	r3, #0
   1390e:	d005      	beq.n	1391c <emac_CRCCalc+0xac>
				q1 = 0x130476DC;
   13910:	f247 63dc 	movw	r3, #30428	; 0x76dc
   13914:	f2c1 3304 	movt	r3, #4868	; 0x1304
   13918:	613b      	str	r3, [r7, #16]
   1391a:	e002      	b.n	13922 <emac_CRCCalc+0xb2>
			} else {
				q1 = 0x00000000;
   1391c:	f04f 0300 	mov.w	r3, #0
   13920:	613b      	str	r3, [r7, #16]
			}
			if (((crc >> 31) ^ (byte >> 0)) & 0x00000001) {
   13922:	69bb      	ldr	r3, [r7, #24]
   13924:	ea4f 72e3 	mov.w	r2, r3, asr #31
   13928:	7ffb      	ldrb	r3, [r7, #31]
   1392a:	4053      	eors	r3, r2
   1392c:	f003 0301 	and.w	r3, r3, #1
   13930:	b2db      	uxtb	r3, r3
   13932:	2b00      	cmp	r3, #0
   13934:	d005      	beq.n	13942 <emac_CRCCalc+0xd2>
				q0 = 0x2608EDB8;
   13936:	f64e 53b8 	movw	r3, #60856	; 0xedb8
   1393a:	f2c2 6308 	movt	r3, #9736	; 0x2608
   1393e:	617b      	str	r3, [r7, #20]
   13940:	e002      	b.n	13948 <emac_CRCCalc+0xd8>
			} else {
				q0 = 0x00000000;
   13942:	f04f 0300 	mov.w	r3, #0
   13946:	617b      	str	r3, [r7, #20]
			}
			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
   13948:	69bb      	ldr	r3, [r7, #24]
   1394a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   1394e:	68bb      	ldr	r3, [r7, #8]
   13950:	405a      	eors	r2, r3
   13952:	68fb      	ldr	r3, [r7, #12]
   13954:	405a      	eors	r2, r3
   13956:	693b      	ldr	r3, [r7, #16]
   13958:	405a      	eors	r2, r3
   1395a:	697b      	ldr	r3, [r7, #20]
   1395c:	4053      	eors	r3, r2
   1395e:	61bb      	str	r3, [r7, #24]
			byte >>= 4;
   13960:	7ffb      	ldrb	r3, [r7, #31]
   13962:	ea4f 1313 	mov.w	r3, r3, lsr #4
   13966:	77fb      	strb	r3, [r7, #31]
	int crc; 	// CRC result
	int q0, q1, q2, q3; // temporary variables
	crc = 0xFFFFFFFF;
	for (i = 0; i < frame_len; i++) {
		byte = *frame_no_fcs++;
		for (j = 0; j < 2; j++) {
   13968:	6a3b      	ldr	r3, [r7, #32]
   1396a:	f103 0301 	add.w	r3, r3, #1
   1396e:	623b      	str	r3, [r7, #32]
   13970:	6a3b      	ldr	r3, [r7, #32]
   13972:	2b01      	cmp	r3, #1
   13974:	dd93      	ble.n	1389e <emac_CRCCalc+0x2e>
	int j; 		// another iterator
	char byte; 	// current byte
	int crc; 	// CRC result
	int q0, q1, q2, q3; // temporary variables
	crc = 0xFFFFFFFF;
	for (i = 0; i < frame_len; i++) {
   13976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13978:	f103 0301 	add.w	r3, r3, #1
   1397c:	627b      	str	r3, [r7, #36]	; 0x24
   1397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13980:	683b      	ldr	r3, [r7, #0]
   13982:	429a      	cmp	r2, r3
   13984:	db80      	blt.n	13888 <emac_CRCCalc+0x18>
			}
			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
			byte >>= 4;
		}
	}
	return crc;
   13986:	69bb      	ldr	r3, [r7, #24]
}
   13988:	4618      	mov	r0, r3
   1398a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1398e:	46bd      	mov	sp, r7
   13990:	bc80      	pop	{r7}
   13992:	4770      	bx	lr

00013994 <EMAC_Init>:
 *  In default state after initializing, only Rx Done and Tx Done interrupt are enabled,
 *  all remain interrupts are disabled
 *  (Ref. from LPC17xx UM)
 **********************************************************************/
Status EMAC_Init(EMAC_CFG_Type *EMAC_ConfigStruct)
{
   13994:	b580      	push	{r7, lr}
   13996:	b084      	sub	sp, #16
   13998:	af00      	add	r7, sp, #0
   1399a:	6078      	str	r0, [r7, #4]
	/* Initialize the EMAC Ethernet controller. */
	int32_t regv,tout, tmp;

	/* Set up clock and power for Ethernet module */
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, ENABLE);
   1399c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   139a0:	f04f 0101 	mov.w	r1, #1
   139a4:	f7fd ffae 	bl	11904 <CLKPWR_ConfigPPWR>

	/* Reset all EMAC internal modules */
	LPC_EMAC->MAC1    = EMAC_MAC1_RES_TX | EMAC_MAC1_RES_MCS_TX | EMAC_MAC1_RES_RX |
   139a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   139ac:	f44f 424f 	mov.w	r2, #52992	; 0xcf00
   139b0:	601a      	str	r2, [r3, #0]
					EMAC_MAC1_RES_MCS_RX | EMAC_MAC1_SIM_RES | EMAC_MAC1_SOFT_RES;

	LPC_EMAC->Command = EMAC_CR_REG_RES | EMAC_CR_TX_RES | EMAC_CR_RX_RES | EMAC_CR_PASS_RUNT_FRM;
   139b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   139b6:	f04f 0278 	mov.w	r2, #120	; 0x78
   139ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* A short delay after reset. */
	for (tout = 100; tout; tout--);
   139be:	f04f 0364 	mov.w	r3, #100	; 0x64
   139c2:	60fb      	str	r3, [r7, #12]
   139c4:	e003      	b.n	139ce <EMAC_Init+0x3a>
   139c6:	68fb      	ldr	r3, [r7, #12]
   139c8:	f103 33ff 	add.w	r3, r3, #4294967295
   139cc:	60fb      	str	r3, [r7, #12]
   139ce:	68fb      	ldr	r3, [r7, #12]
   139d0:	2b00      	cmp	r3, #0
   139d2:	d1f8      	bne.n	139c6 <EMAC_Init+0x32>

	/* Initialize MAC control registers. */
	LPC_EMAC->MAC1 = EMAC_MAC1_PASS_ALL;
   139d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   139d8:	f04f 0202 	mov.w	r2, #2
   139dc:	601a      	str	r2, [r3, #0]
	LPC_EMAC->MAC2 = EMAC_MAC2_CRC_EN | EMAC_MAC2_PAD_EN;
   139de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   139e2:	f04f 0230 	mov.w	r2, #48	; 0x30
   139e6:	605a      	str	r2, [r3, #4]
	LPC_EMAC->MAXF = EMAC_ETH_MAX_FLEN;
   139e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   139ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   139f0:	615a      	str	r2, [r3, #20]
	/*
	 * Find the clock that close to desired target clock
	 */
	tmp = SystemCoreClock / EMAC_MCFG_MII_MAXCLK;
   139f2:	f240 0300 	movw	r3, #0
   139f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   139fa:	681a      	ldr	r2, [r3, #0]
   139fc:	f64c 236b 	movw	r3, #51819	; 0xca6b
   13a00:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
   13a04:	fba3 1302 	umull	r1, r3, r3, r2
   13a08:	ea4f 5313 	mov.w	r3, r3, lsr #20
   13a0c:	60bb      	str	r3, [r7, #8]
	for (tout = 0; tout < sizeof (EMAC_clkdiv); tout++){
   13a0e:	f04f 0300 	mov.w	r3, #0
   13a12:	60fb      	str	r3, [r7, #12]
   13a14:	e00e      	b.n	13a34 <EMAC_Init+0xa0>
		if (EMAC_clkdiv[tout] >= tmp) break;
   13a16:	f64c 3384 	movw	r3, #52100	; 0xcb84
   13a1a:	f2c0 0302 	movt	r3, #2
   13a1e:	68fa      	ldr	r2, [r7, #12]
   13a20:	189b      	adds	r3, r3, r2
   13a22:	781b      	ldrb	r3, [r3, #0]
   13a24:	461a      	mov	r2, r3
   13a26:	68bb      	ldr	r3, [r7, #8]
   13a28:	429a      	cmp	r2, r3
   13a2a:	da07      	bge.n	13a3c <EMAC_Init+0xa8>
	LPC_EMAC->MAXF = EMAC_ETH_MAX_FLEN;
	/*
	 * Find the clock that close to desired target clock
	 */
	tmp = SystemCoreClock / EMAC_MCFG_MII_MAXCLK;
	for (tout = 0; tout < sizeof (EMAC_clkdiv); tout++){
   13a2c:	68fb      	ldr	r3, [r7, #12]
   13a2e:	f103 0301 	add.w	r3, r3, #1
   13a32:	60fb      	str	r3, [r7, #12]
   13a34:	68fb      	ldr	r3, [r7, #12]
   13a36:	2b06      	cmp	r3, #6
   13a38:	d9ed      	bls.n	13a16 <EMAC_Init+0x82>
   13a3a:	e000      	b.n	13a3e <EMAC_Init+0xaa>
		if (EMAC_clkdiv[tout] >= tmp) break;
   13a3c:	bf00      	nop
	}
	tout++;
   13a3e:	68fb      	ldr	r3, [r7, #12]
   13a40:	f103 0301 	add.w	r3, r3, #1
   13a44:	60fb      	str	r3, [r7, #12]
	// Write to MAC configuration register and reset
	LPC_EMAC->MCFG = EMAC_MCFG_CLK_SEL(tout) | EMAC_MCFG_RES_MII;
   13a46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13a4a:	68fb      	ldr	r3, [r7, #12]
   13a4c:	f003 030f 	and.w	r3, r3, #15
   13a50:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13a58:	461a      	mov	r2, r3
   13a5a:	460b      	mov	r3, r1
   13a5c:	621a      	str	r2, [r3, #32]
	// release reset
	LPC_EMAC->MCFG &= ~(EMAC_MCFG_RES_MII);
   13a5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13a66:	6a1b      	ldr	r3, [r3, #32]
   13a68:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
   13a6c:	460b      	mov	r3, r1
   13a6e:	621a      	str	r2, [r3, #32]
	LPC_EMAC->CLRT = EMAC_CLRT_DEF;
   13a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13a74:	f243 720f 	movw	r2, #14095	; 0x370f
   13a78:	611a      	str	r2, [r3, #16]
	LPC_EMAC->IPGR = EMAC_IPGR_P2_DEF;
   13a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13a7e:	f04f 0212 	mov.w	r2, #18
   13a82:	60da      	str	r2, [r3, #12]

	/* Enable Reduced MII interface. */
	LPC_EMAC->Command = EMAC_CR_RMII | EMAC_CR_PASS_RUNT_FRM;
   13a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13a88:	f44f 7210 	mov.w	r2, #576	; 0x240
   13a8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Reset Reduced MII Logic. */
	LPC_EMAC->SUPP = EMAC_SUPP_RES_RMII;
   13a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13a98:	619a      	str	r2, [r3, #24]

	for (tout = 100; tout; tout--);
   13a9a:	f04f 0364 	mov.w	r3, #100	; 0x64
   13a9e:	60fb      	str	r3, [r7, #12]
   13aa0:	e003      	b.n	13aaa <EMAC_Init+0x116>
   13aa2:	68fb      	ldr	r3, [r7, #12]
   13aa4:	f103 33ff 	add.w	r3, r3, #4294967295
   13aa8:	60fb      	str	r3, [r7, #12]
   13aaa:	68fb      	ldr	r3, [r7, #12]
   13aac:	2b00      	cmp	r3, #0
   13aae:	d1f8      	bne.n	13aa2 <EMAC_Init+0x10e>
	LPC_EMAC->SUPP = (1<<8);
   13ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
   13ab8:	619a      	str	r2, [r3, #24]
//	if (EMAC_SetPHYMode(EMAC_ConfigStruct->Mode) < 0){
//		for(;;);
//	}

	// Set EMAC address
	setEmacAddr(EMAC_ConfigStruct->pbEMAC_Addr);
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	685b      	ldr	r3, [r3, #4]
   13abe:	4618      	mov	r0, r3
   13ac0:	f7ff fea2 	bl	13808 <setEmacAddr>

	/* Initialize Tx and Rx DMA Descriptors */
	rx_descr_init ();
   13ac4:	f7ff fd78 	bl	135b8 <rx_descr_init>
	tx_descr_init ();
   13ac8:	f7ff fddc 	bl	13684 <tx_descr_init>

	// Set Receive Filter register: enable broadcast and multicast
	LPC_EMAC->RxFilterCtrl = EMAC_RFC_MCAST_EN | EMAC_RFC_BCAST_EN | EMAC_RFC_PERFECT_EN;
   13acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13ad0:	f04f 0226 	mov.w	r2, #38	; 0x26
   13ad4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Enable Rx Done and Tx Done interrupt for EMAC */
	LPC_EMAC->IntEnable = EMAC_INT_RX_DONE | EMAC_INT_TX_DONE;
   13ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13adc:	f04f 0288 	mov.w	r2, #136	; 0x88
   13ae0:	f8c3 2fe4 	str.w	r2, [r3, #4068]	; 0xfe4

	/* Reset all interrupts */
	LPC_EMAC->IntClear  = 0xFFFF;
   13ae4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13aec:	f8c3 2fe8 	str.w	r2, [r3, #4072]	; 0xfe8

	/* Enable receive and transmit mode of MAC Ethernet core */
	LPC_EMAC->Command  |= (EMAC_CR_RX_EN | EMAC_CR_TX_EN);
   13af0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13af8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13afc:	f043 0203 	orr.w	r2, r3, #3
   13b00:	460b      	mov	r3, r1
   13b02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	LPC_EMAC->MAC1     |= EMAC_MAC1_REC_EN;
   13b06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13b0e:	681b      	ldr	r3, [r3, #0]
   13b10:	f043 0201 	orr.w	r2, r3, #1
   13b14:	460b      	mov	r3, r1
   13b16:	601a      	str	r2, [r3, #0]

	return SUCCESS;
   13b18:	f04f 0301 	mov.w	r3, #1
}
   13b1c:	4618      	mov	r0, r3
   13b1e:	f107 0710 	add.w	r7, r7, #16
   13b22:	46bd      	mov	sp, r7
   13b24:	bd80      	pop	{r7, pc}
   13b26:	bf00      	nop

00013b28 <EMAC_DeInit>:
*                  default reset values.
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void EMAC_DeInit(void)
{
   13b28:	b580      	push	{r7, lr}
   13b2a:	af00      	add	r7, sp, #0
	// Disable all interrupt
	LPC_EMAC->IntEnable = 0x00;
   13b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13b30:	f04f 0200 	mov.w	r2, #0
   13b34:	f8c3 2fe4 	str.w	r2, [r3, #4068]	; 0xfe4
	// Clear all pending interrupt
	LPC_EMAC->IntClear = (0xFF) | (EMAC_INT_SOFT_INT | EMAC_INT_WAKEUP);
   13b38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13b3c:	f243 02ff 	movw	r2, #12543	; 0x30ff
   13b40:	f8c3 2fe8 	str.w	r2, [r3, #4072]	; 0xfe8

	/* TurnOff clock and power for Ethernet module */
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, DISABLE);
   13b44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13b48:	f04f 0100 	mov.w	r1, #0
   13b4c:	f7fd feda 	bl	11904 <CLKPWR_ConfigPPWR>
}
   13b50:	bd80      	pop	{r7, pc}
   13b52:	bf00      	nop

00013b54 <EMAC_CheckPHYStatus>:
 * For EMAC_PHY_STAT_DUP, return value:
 * - 0: Half-Duplex
 * - 1: Full-Duplex
 **********************************************************************/
int32_t EMAC_CheckPHYStatus(uint32_t ulPHYState)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	6078      	str	r0, [r7, #4]
		break;
	case EMAC_PHY_STAT_DUP:
		tmp = (regv & EMAC_PHY_SR_FULL_DUP) ? 1 : 0;
		break;
#elif defined(eStickv2)
	regv = read_PHY (EMAC_PHY_REG_BMSR);
   13b5c:	f04f 0001 	mov.w	r0, #1
   13b60:	f7ff fe1a 	bl	13798 <read_PHY>
   13b64:	60b8      	str	r0, [r7, #8]
	switch(ulPHYState){
   13b66:	687b      	ldr	r3, [r7, #4]
   13b68:	2b01      	cmp	r3, #1
   13b6a:	d00d      	beq.n	13b88 <EMAC_CheckPHYStatus+0x34>
   13b6c:	2b01      	cmp	r3, #1
   13b6e:	d302      	bcc.n	13b76 <EMAC_CheckPHYStatus+0x22>
   13b70:	2b02      	cmp	r3, #2
   13b72:	d012      	beq.n	13b9a <EMAC_CheckPHYStatus+0x46>
   13b74:	e01a      	b.n	13bac <EMAC_CheckPHYStatus+0x58>
	case EMAC_PHY_STAT_LINK:
		tmp = (regv & EMAC_PHY_BMSR_LINK_STATUS) ? 1 : 0;
   13b76:	68bb      	ldr	r3, [r7, #8]
   13b78:	f003 0304 	and.w	r3, r3, #4
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	bf0c      	ite	eq
   13b80:	2300      	moveq	r3, #0
   13b82:	2301      	movne	r3, #1
   13b84:	60fb      	str	r3, [r7, #12]
		break;
   13b86:	e015      	b.n	13bb4 <EMAC_CheckPHYStatus+0x60>
	case EMAC_PHY_STAT_SPEED:
		tmp = (regv & EMAC_PHY_SR_100_SPEED) ? 1 : 0;
   13b88:	68bb      	ldr	r3, [r7, #8]
   13b8a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   13b8e:	2b00      	cmp	r3, #0
   13b90:	bf0c      	ite	eq
   13b92:	2300      	moveq	r3, #0
   13b94:	2301      	movne	r3, #1
   13b96:	60fb      	str	r3, [r7, #12]
		break;
   13b98:	e00c      	b.n	13bb4 <EMAC_CheckPHYStatus+0x60>
	case EMAC_PHY_STAT_DUP:
		tmp = (regv & EMAC_PHY_SR_FULL_DUP) ? 1 : 0;
   13b9a:	68bb      	ldr	r3, [r7, #8]
   13b9c:	f403 43a0 	and.w	r3, r3, #20480	; 0x5000
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	bf0c      	ite	eq
   13ba4:	2300      	moveq	r3, #0
   13ba6:	2301      	movne	r3, #1
   13ba8:	60fb      	str	r3, [r7, #12]
		break;
   13baa:	e003      	b.n	13bb4 <EMAC_CheckPHYStatus+0x60>
#endif
	default:
		tmp = -1;
   13bac:	f04f 33ff 	mov.w	r3, #4294967295
   13bb0:	60fb      	str	r3, [r7, #12]
		break;
   13bb2:	bf00      	nop
	}
	return (tmp);
   13bb4:	68fb      	ldr	r3, [r7, #12]
}
   13bb6:	4618      	mov	r0, r3
   13bb8:	f107 0710 	add.w	r7, r7, #16
   13bbc:	46bd      	mov	sp, r7
   13bbe:	bd80      	pop	{r7, pc}

00013bc0 <EMAC_SetPHYMode>:
 * 							- EMAC_MODE_100M_FULL
 * 							- EMAC_MODE_100M_HALF
 * @return		Return (0) if no error, otherwise return (-1)
 **********************************************************************/
int32_t EMAC_SetPHYMode(uint32_t ulPHYMode)
{
   13bc0:	b580      	push	{r7, lr}
   13bc2:	b086      	sub	sp, #24
   13bc4:	af00      	add	r7, sp, #0
   13bc6:	6078      	str	r0, [r7, #4]
	int32_t id1, id2, tout, regv, id;

	/* Check if this is a DP83848C PHY. */
	id1 = read_PHY (EMAC_PHY_REG_IDR1);
   13bc8:	f04f 0002 	mov.w	r0, #2
   13bcc:	f7ff fde4 	bl	13798 <read_PHY>
   13bd0:	6138      	str	r0, [r7, #16]
	id2 = read_PHY (EMAC_PHY_REG_IDR2);
   13bd2:	f04f 0003 	mov.w	r0, #3
   13bd6:	f7ff fddf 	bl	13798 <read_PHY>
   13bda:	60f8      	str	r0, [r7, #12]
		case EMAC_MODE_AUTO:
			/* Use auto-negotiation about the link speed. */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
//			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_BMCR_AN);
#elif defined(eStickv2) /* Use eStickv2 board */
	if (((id1 << 16) | id2) == EMAC_KSZ8031_ID) {
   13bdc:	693b      	ldr	r3, [r7, #16]
   13bde:	ea4f 4203 	mov.w	r2, r3, lsl #16
   13be2:	68fb      	ldr	r3, [r7, #12]
   13be4:	4313      	orrs	r3, r2
   13be6:	2b00      	cmp	r3, #0
   13be8:	d157      	bne.n	13c9a <EMAC_SetPHYMode+0xda>
		/* Configure the PHY device */
		switch(ulPHYMode){
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	2b04      	cmp	r3, #4
   13bee:	d84b      	bhi.n	13c88 <EMAC_SetPHYMode+0xc8>
   13bf0:	a201      	add	r2, pc, #4	; (adr r2, 13bf8 <EMAC_SetPHYMode+0x38>)
   13bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13bf6:	bf00      	nop
   13bf8:	00013c0d 	.word	0x00013c0d
   13bfc:	00013c51 	.word	0x00013c51
   13c00:	00013c5f 	.word	0x00013c5f
   13c04:	00013c6d 	.word	0x00013c6d
   13c08:	00013c7b 	.word	0x00013c7b
		case EMAC_MODE_AUTO:
			/* Use auto-negotiation about the link speed. */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
   13c0c:	f04f 0000 	mov.w	r0, #0
   13c10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
   13c14:	f7ff fd8e 	bl	13734 <write_PHY>
//			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_BMCR_AN);
#endif
			/* Wait to complete Auto_Negotiation */
			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
   13c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   13c1c:	617b      	str	r3, [r7, #20]
   13c1e:	e011      	b.n	13c44 <EMAC_SetPHYMode+0x84>
				regv = read_PHY (EMAC_PHY_REG_BMSR);
   13c20:	f04f 0001 	mov.w	r0, #1
   13c24:	f7ff fdb8 	bl	13798 <read_PHY>
   13c28:	60b8      	str	r0, [r7, #8]
				if (regv & EMAC_PHY_BMSR_AUTO_DONE) {
   13c2a:	68bb      	ldr	r3, [r7, #8]
   13c2c:	f003 0320 	and.w	r3, r3, #32
   13c30:	2b00      	cmp	r3, #0
   13c32:	d10b      	bne.n	13c4c <EMAC_SetPHYMode+0x8c>
					/* Auto-negotiation Complete. */
					break;
				}
				if (tout == 0){
   13c34:	697b      	ldr	r3, [r7, #20]
   13c36:	2b00      	cmp	r3, #0
   13c38:	d100      	bne.n	13c3c <EMAC_SetPHYMode+0x7c>
					// Time out occured
					for(;;);
   13c3a:	e7fe      	b.n	13c3a <EMAC_SetPHYMode+0x7a>
			/* Use auto-negotiation about the link speed. */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
//			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_BMCR_AN);
#endif
			/* Wait to complete Auto_Negotiation */
			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
   13c3c:	697b      	ldr	r3, [r7, #20]
   13c3e:	f103 33ff 	add.w	r3, r3, #4294967295
   13c42:	617b      	str	r3, [r7, #20]
   13c44:	697b      	ldr	r3, [r7, #20]
   13c46:	2b00      	cmp	r3, #0
   13c48:	d1ea      	bne.n	13c20 <EMAC_SetPHYMode+0x60>
				if (tout == 0){
					// Time out occured
					for(;;);
				}
			}
			break;
   13c4a:	e020      	b.n	13c8e <EMAC_SetPHYMode+0xce>
			/* Wait to complete Auto_Negotiation */
			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
				regv = read_PHY (EMAC_PHY_REG_BMSR);
				if (regv & EMAC_PHY_BMSR_AUTO_DONE) {
					/* Auto-negotiation Complete. */
					break;
   13c4c:	bf00      	nop
				if (tout == 0){
					// Time out occured
					for(;;);
				}
			}
			break;
   13c4e:	e01e      	b.n	13c8e <EMAC_SetPHYMode+0xce>
		case EMAC_MODE_10M_FULL:
			/* Connect at 10MBit full-duplex */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_10M);
   13c50:	f04f 0000 	mov.w	r0, #0
   13c54:	f44f 7180 	mov.w	r1, #256	; 0x100
   13c58:	f7ff fd6c 	bl	13734 <write_PHY>
			break;
   13c5c:	e017      	b.n	13c8e <EMAC_SetPHYMode+0xce>
		case EMAC_MODE_10M_HALF:
			/* Connect at 10MBit half-duplex */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_10M);
   13c5e:	f04f 0000 	mov.w	r0, #0
   13c62:	f04f 0100 	mov.w	r1, #0
   13c66:	f7ff fd65 	bl	13734 <write_PHY>
			break;
   13c6a:	e010      	b.n	13c8e <EMAC_SetPHYMode+0xce>
		case EMAC_MODE_100M_FULL:
			/* Connect at 100MBit full-duplex */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_100M);
   13c6c:	f04f 0000 	mov.w	r0, #0
   13c70:	f44f 5104 	mov.w	r1, #8448	; 0x2100
   13c74:	f7ff fd5e 	bl	13734 <write_PHY>
			break;
   13c78:	e009      	b.n	13c8e <EMAC_SetPHYMode+0xce>
		case EMAC_MODE_100M_HALF:
			/* Connect at 100MBit half-duplex */
			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_100M);
   13c7a:	f04f 0000 	mov.w	r0, #0
   13c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   13c82:	f7ff fd57 	bl	13734 <write_PHY>
			break;
   13c86:	e002      	b.n	13c8e <EMAC_SetPHYMode+0xce>
		default:
			// un-supported
			return (-1);
   13c88:	f04f 33ff 	mov.w	r3, #4294967295
   13c8c:	e009      	b.n	13ca2 <EMAC_SetPHYMode+0xe2>
	else {
		for(;;);
	}

	// Update EMAC configuration with current PHY status
	if (EMAC_UpdatePHYStatus() < 0){
   13c8e:	f000 f80d 	bl	13cac <EMAC_UpdatePHYStatus>
   13c92:	4603      	mov	r3, r0
   13c94:	2b00      	cmp	r3, #0
   13c96:	db01      	blt.n	13c9c <EMAC_SetPHYMode+0xdc>
   13c98:	e001      	b.n	13c9e <EMAC_SetPHYMode+0xde>
			return (-1);
		}
	}
	// It's not correct module ID
	else {
		for(;;);
   13c9a:	e7fe      	b.n	13c9a <EMAC_SetPHYMode+0xda>
	}

	// Update EMAC configuration with current PHY status
	if (EMAC_UpdatePHYStatus() < 0){
		for(;;);
   13c9c:	e7fe      	b.n	13c9c <EMAC_SetPHYMode+0xdc>
	}

	// Complete
	return (0);
   13c9e:	f04f 0300 	mov.w	r3, #0
}
   13ca2:	4618      	mov	r0, r3
   13ca4:	f107 0718 	add.w	r7, r7, #24
   13ca8:	46bd      	mov	sp, r7
   13caa:	bd80      	pop	{r7, pc}

00013cac <EMAC_UpdatePHYStatus>:
 * Note: The EMAC configuration will be auto-configured:
 * 		- Speed mode.
 * 		- Half/Full duplex mode
 **********************************************************************/
int32_t EMAC_UpdatePHYStatus(void)
{
   13cac:	b580      	push	{r7, lr}
   13cae:	b082      	sub	sp, #8
   13cb0:	af00      	add	r7, sp, #0
	} else {
		/* 100MBit mode. */
		LPC_EMAC->SUPP = EMAC_SUPP_SPEED;
	}
#elif defined(eStickv2)
	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
   13cb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   13cb6:	603b      	str	r3, [r7, #0]
   13cb8:	e013      	b.n	13ce2 <EMAC_UpdatePHYStatus+0x36>
		regv = read_PHY (EMAC_PHY_REG_BMSR);
   13cba:	f04f 0001 	mov.w	r0, #1
   13cbe:	f7ff fd6b 	bl	13798 <read_PHY>
   13cc2:	6078      	str	r0, [r7, #4]
		if (regv & EMAC_PHY_BMSR_LINK_STATUS) {
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	f003 0304 	and.w	r3, r3, #4
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d10d      	bne.n	13cea <EMAC_UpdatePHYStatus+0x3e>
			/* Link is on. */
			break;
		}
		if (tout == 0){
   13cce:	683b      	ldr	r3, [r7, #0]
   13cd0:	2b00      	cmp	r3, #0
   13cd2:	d102      	bne.n	13cda <EMAC_UpdatePHYStatus+0x2e>
			// time out
			return (-1);
   13cd4:	f04f 33ff 	mov.w	r3, #4294967295
   13cd8:	e03e      	b.n	13d58 <EMAC_UpdatePHYStatus+0xac>
	} else {
		/* 100MBit mode. */
		LPC_EMAC->SUPP = EMAC_SUPP_SPEED;
	}
#elif defined(eStickv2)
	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
   13cda:	683b      	ldr	r3, [r7, #0]
   13cdc:	f103 33ff 	add.w	r3, r3, #4294967295
   13ce0:	603b      	str	r3, [r7, #0]
   13ce2:	683b      	ldr	r3, [r7, #0]
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	d1e8      	bne.n	13cba <EMAC_UpdatePHYStatus+0xe>
   13ce8:	e000      	b.n	13cec <EMAC_UpdatePHYStatus+0x40>
		regv = read_PHY (EMAC_PHY_REG_BMSR);
		if (regv & EMAC_PHY_BMSR_LINK_STATUS) {
			/* Link is on. */
			break;
   13cea:	bf00      	nop
			return (-1);
		}
	}

	/* Configure Full/Half Duplex mode. */
	if (regv & EMAC_PHY_SR_FULL_DUP) {
   13cec:	687b      	ldr	r3, [r7, #4]
   13cee:	f403 43a0 	and.w	r3, r3, #20480	; 0x5000
   13cf2:	2b00      	cmp	r3, #0
   13cf4:	d019      	beq.n	13d2a <EMAC_UpdatePHYStatus+0x7e>
		/* Full duplex is enabled. */
		LPC_EMAC->MAC2    |= EMAC_MAC2_FULL_DUP;
   13cf6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13cfe:	685b      	ldr	r3, [r3, #4]
   13d00:	f043 0201 	orr.w	r2, r3, #1
   13d04:	460b      	mov	r3, r1
   13d06:	605a      	str	r2, [r3, #4]
		LPC_EMAC->Command |= EMAC_CR_FULL_DUP;
   13d08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13d14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   13d18:	460b      	mov	r3, r1
   13d1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		LPC_EMAC->IPGT     = EMAC_IPGT_FULL_DUP;
   13d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d22:	f04f 0215 	mov.w	r2, #21
   13d26:	609a      	str	r2, [r3, #8]
   13d28:	e004      	b.n	13d34 <EMAC_UpdatePHYStatus+0x88>
	} else {
		/* Half duplex mode. */
		LPC_EMAC->IPGT = EMAC_IPGT_HALF_DUP;
   13d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d2e:	f04f 0212 	mov.w	r2, #18
   13d32:	609a      	str	r2, [r3, #8]
	}

	/* Configure 100MBit/10MBit mode. */
	if (!(regv & EMAC_PHY_SR_100_SPEED)) {
   13d34:	687b      	ldr	r3, [r7, #4]
   13d36:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d105      	bne.n	13d4a <EMAC_UpdatePHYStatus+0x9e>
		/* 10MBit mode. */
		LPC_EMAC->SUPP = 0;
   13d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d42:	f04f 0200 	mov.w	r2, #0
   13d46:	619a      	str	r2, [r3, #24]
   13d48:	e004      	b.n	13d54 <EMAC_UpdatePHYStatus+0xa8>
	} else {
		/* 100MBit mode. */
		LPC_EMAC->SUPP = EMAC_SUPP_SPEED;
   13d4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13d52:	619a      	str	r2, [r3, #24]
	}
#endif
	// Complete
	return (0);
   13d54:	f04f 0300 	mov.w	r3, #0
}
   13d58:	4618      	mov	r0, r3
   13d5a:	f107 0708 	add.w	r7, r7, #8
   13d5e:	46bd      	mov	sp, r7
   13d60:	bd80      	pop	{r7, pc}
   13d62:	bf00      	nop

00013d64 <EMAC_SetHashFilter>:
 * the hash table: it is used as an index in the 64 bit HashFilter register that has been
 * programmed with accept values. If the selected accept value is 1, the frame is
 * accepted.
 **********************************************************************/
void EMAC_SetHashFilter(uint8_t dstMAC_addr[], FunctionalState NewState)
{
   13d64:	b580      	push	{r7, lr}
   13d66:	b086      	sub	sp, #24
   13d68:	af00      	add	r7, sp, #0
   13d6a:	6078      	str	r0, [r7, #4]
   13d6c:	460b      	mov	r3, r1
   13d6e:	70fb      	strb	r3, [r7, #3]
	uint32_t *pReg;
	uint32_t tmp;
	int32_t crc;

	// Calculate the CRC from the destination MAC address
	crc = emac_CRCCalc(dstMAC_addr, 6);
   13d70:	6878      	ldr	r0, [r7, #4]
   13d72:	f04f 0106 	mov.w	r1, #6
   13d76:	f7ff fd7b 	bl	13870 <emac_CRCCalc>
   13d7a:	6178      	str	r0, [r7, #20]
	// Extract the value from CRC to get index value for hash filter table
	crc = (crc >> 23) & 0x3F;
   13d7c:	697b      	ldr	r3, [r7, #20]
   13d7e:	ea4f 53e3 	mov.w	r3, r3, asr #23
   13d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d86:	617b      	str	r3, [r7, #20]

	pReg = (crc > 31) ? ((uint32_t *)&LPC_EMAC->HashFilterH) \
								: ((uint32_t *)&LPC_EMAC->HashFilterL);
   13d88:	697b      	ldr	r3, [r7, #20]
   13d8a:	2b1f      	cmp	r3, #31
   13d8c:	dd04      	ble.n	13d98 <EMAC_SetHashFilter+0x34>
   13d8e:	f44f 7305 	mov.w	r3, #532	; 0x214
   13d92:	f2c5 0300 	movt	r3, #20480	; 0x5000
   13d96:	e003      	b.n	13da0 <EMAC_SetHashFilter+0x3c>
   13d98:	f44f 7304 	mov.w	r3, #528	; 0x210
   13d9c:	f2c5 0300 	movt	r3, #20480	; 0x5000
	// Calculate the CRC from the destination MAC address
	crc = emac_CRCCalc(dstMAC_addr, 6);
	// Extract the value from CRC to get index value for hash filter table
	crc = (crc >> 23) & 0x3F;

	pReg = (crc > 31) ? ((uint32_t *)&LPC_EMAC->HashFilterH) \
   13da0:	613b      	str	r3, [r7, #16]
								: ((uint32_t *)&LPC_EMAC->HashFilterL);
	tmp = (crc > 31) ? (crc - 32) : crc;
   13da2:	697b      	ldr	r3, [r7, #20]
   13da4:	2b1f      	cmp	r3, #31
   13da6:	dd03      	ble.n	13db0 <EMAC_SetHashFilter+0x4c>
   13da8:	697b      	ldr	r3, [r7, #20]
   13daa:	f1a3 0320 	sub.w	r3, r3, #32
   13dae:	e000      	b.n	13db2 <EMAC_SetHashFilter+0x4e>
   13db0:	697b      	ldr	r3, [r7, #20]
   13db2:	60fb      	str	r3, [r7, #12]
	if (NewState == ENABLE) {
   13db4:	78fb      	ldrb	r3, [r7, #3]
   13db6:	2b01      	cmp	r3, #1
   13db8:	d10a      	bne.n	13dd0 <EMAC_SetHashFilter+0x6c>
		(*pReg) |= (1UL << tmp);
   13dba:	693b      	ldr	r3, [r7, #16]
   13dbc:	681a      	ldr	r2, [r3, #0]
   13dbe:	68fb      	ldr	r3, [r7, #12]
   13dc0:	f04f 0101 	mov.w	r1, #1
   13dc4:	fa01 f303 	lsl.w	r3, r1, r3
   13dc8:	431a      	orrs	r2, r3
   13dca:	693b      	ldr	r3, [r7, #16]
   13dcc:	601a      	str	r2, [r3, #0]
   13dce:	e00b      	b.n	13de8 <EMAC_SetHashFilter+0x84>
	} else {
		(*pReg) &= ~(1UL << tmp);
   13dd0:	693b      	ldr	r3, [r7, #16]
   13dd2:	681a      	ldr	r2, [r3, #0]
   13dd4:	68fb      	ldr	r3, [r7, #12]
   13dd6:	f04f 0101 	mov.w	r1, #1
   13dda:	fa01 f303 	lsl.w	r3, r1, r3
   13dde:	ea6f 0303 	mvn.w	r3, r3
   13de2:	401a      	ands	r2, r3
   13de4:	693b      	ldr	r3, [r7, #16]
   13de6:	601a      	str	r2, [r3, #0]
	}
	// Enable Rx Filter
	LPC_EMAC->Command &= ~EMAC_CR_PASS_RX_FILT;
   13de8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13df0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13df4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   13df8:	460b      	mov	r3, r1
   13dfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   13dfe:	f107 0718 	add.w	r7, r7, #24
   13e02:	46bd      	mov	sp, r7
   13e04:	bd80      	pop	{r7, pc}
   13e06:	bf00      	nop

00013e08 <EMAC_SetFilterMode>:
 * 								- ENABLE
 * 								- DISABLE
 * @return		None
 **********************************************************************/
void EMAC_SetFilterMode(uint32_t ulFilterMode, FunctionalState NewState)
{
   13e08:	b480      	push	{r7}
   13e0a:	b083      	sub	sp, #12
   13e0c:	af00      	add	r7, sp, #0
   13e0e:	6078      	str	r0, [r7, #4]
   13e10:	460b      	mov	r3, r1
   13e12:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE){
   13e14:	78fb      	ldrb	r3, [r7, #3]
   13e16:	2b01      	cmp	r3, #1
   13e18:	d10b      	bne.n	13e32 <EMAC_SetFilterMode+0x2a>
		LPC_EMAC->RxFilterCtrl |= ulFilterMode;
   13e1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13e22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13e26:	687b      	ldr	r3, [r7, #4]
   13e28:	431a      	orrs	r2, r3
   13e2a:	460b      	mov	r3, r1
   13e2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   13e30:	e00c      	b.n	13e4c <EMAC_SetFilterMode+0x44>
	} else {
		LPC_EMAC->RxFilterCtrl &= ~ulFilterMode;
   13e32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13e3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13e3e:	687b      	ldr	r3, [r7, #4]
   13e40:	ea6f 0303 	mvn.w	r3, r3
   13e44:	401a      	ands	r2, r3
   13e46:	460b      	mov	r3, r1
   13e48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
   13e4c:	f107 070c 	add.w	r7, r7, #12
   13e50:	46bd      	mov	sp, r7
   13e52:	bc80      	pop	{r7}
   13e54:	4770      	bx	lr
   13e56:	bf00      	nop

00013e58 <EMAC_GetWoLStatus>:
 * 								- EMAC_WOL_RX_FILTER: the receive filter caused WoL
 * 								- EMAC_WOL_MAG_PACKET: the magic packet filter caused WoL
 * @return		SET/RESET
 **********************************************************************/
FlagStatus EMAC_GetWoLStatus(uint32_t ulWoLMode)
{
   13e58:	b480      	push	{r7}
   13e5a:	b083      	sub	sp, #12
   13e5c:	af00      	add	r7, sp, #0
   13e5e:	6078      	str	r0, [r7, #4]
	if (LPC_EMAC->RxFilterWoLStatus & ulWoLMode) {
   13e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   13e68:	687b      	ldr	r3, [r7, #4]
   13e6a:	4013      	ands	r3, r2
   13e6c:	2b00      	cmp	r3, #0
   13e6e:	d007      	beq.n	13e80 <EMAC_GetWoLStatus+0x28>
		LPC_EMAC->RxFilterWoLClear = ulWoLMode;
   13e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13e74:	687a      	ldr	r2, [r7, #4]
   13e76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		return SET;
   13e7a:	f04f 0301 	mov.w	r3, #1
   13e7e:	e001      	b.n	13e84 <EMAC_GetWoLStatus+0x2c>
	} else {
		return RESET;
   13e80:	f04f 0300 	mov.w	r3, #0
	}
}
   13e84:	4618      	mov	r0, r3
   13e86:	f107 070c 	add.w	r7, r7, #12
   13e8a:	46bd      	mov	sp, r7
   13e8c:	bc80      	pop	{r7}
   13e8e:	4770      	bx	lr

00013e90 <EMAC_WritePacketBuffer>:
 * 							data that contain specified information about
 * 							Packet data buffer.
 * @return		None
 **********************************************************************/
void EMAC_WritePacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
{
   13e90:	b480      	push	{r7}
   13e92:	b087      	sub	sp, #28
   13e94:	af00      	add	r7, sp, #0
   13e96:	6078      	str	r0, [r7, #4]
	uint32_t idx,len;
	uint32_t *sp,*dp;

	idx = LPC_EMAC->TxProduceIndex;
   13e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13e9c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   13ea0:	60bb      	str	r3, [r7, #8]
	sp  = (uint32_t *)pDataStruct->pbDataBuf;
   13ea2:	687b      	ldr	r3, [r7, #4]
   13ea4:	685b      	ldr	r3, [r3, #4]
   13ea6:	613b      	str	r3, [r7, #16]
	dp  = (uint32_t *)Tx_Desc[idx].Packet;
   13ea8:	f640 4360 	movw	r3, #3168	; 0xc60
   13eac:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13eb0:	68ba      	ldr	r2, [r7, #8]
   13eb2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   13eb6:	60fb      	str	r3, [r7, #12]
	/* Copy frame data to EMAC packet buffers. */
	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	681b      	ldr	r3, [r3, #0]
   13ebc:	f103 0303 	add.w	r3, r3, #3
   13ec0:	ea4f 0393 	mov.w	r3, r3, lsr #2
   13ec4:	617b      	str	r3, [r7, #20]
   13ec6:	e00f      	b.n	13ee8 <EMAC_WritePacketBuffer+0x58>
		*dp++ = *sp++;
   13ec8:	693b      	ldr	r3, [r7, #16]
   13eca:	681a      	ldr	r2, [r3, #0]
   13ecc:	68fb      	ldr	r3, [r7, #12]
   13ece:	601a      	str	r2, [r3, #0]
   13ed0:	68fb      	ldr	r3, [r7, #12]
   13ed2:	f103 0304 	add.w	r3, r3, #4
   13ed6:	60fb      	str	r3, [r7, #12]
   13ed8:	693b      	ldr	r3, [r7, #16]
   13eda:	f103 0304 	add.w	r3, r3, #4
   13ede:	613b      	str	r3, [r7, #16]

	idx = LPC_EMAC->TxProduceIndex;
	sp  = (uint32_t *)pDataStruct->pbDataBuf;
	dp  = (uint32_t *)Tx_Desc[idx].Packet;
	/* Copy frame data to EMAC packet buffers. */
	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
   13ee0:	697b      	ldr	r3, [r7, #20]
   13ee2:	f103 33ff 	add.w	r3, r3, #4294967295
   13ee6:	617b      	str	r3, [r7, #20]
   13ee8:	697b      	ldr	r3, [r7, #20]
   13eea:	2b00      	cmp	r3, #0
   13eec:	d1ec      	bne.n	13ec8 <EMAC_WritePacketBuffer+0x38>
		*dp++ = *sp++;
	}
	Tx_Desc[idx].Ctrl = (pDataStruct->ulDataLen - 1) | (EMAC_TCTRL_INT | EMAC_TCTRL_LAST);
   13eee:	687b      	ldr	r3, [r7, #4]
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	f103 33ff 	add.w	r3, r3, #4294967295
   13ef6:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
   13efa:	f640 4260 	movw	r2, #3168	; 0xc60
   13efe:	f2c1 0200 	movt	r2, #4096	; 0x1000
   13f02:	68bb      	ldr	r3, [r7, #8]
   13f04:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13f08:	18d3      	adds	r3, r2, r3
   13f0a:	6059      	str	r1, [r3, #4]
}
   13f0c:	f107 071c 	add.w	r7, r7, #28
   13f10:	46bd      	mov	sp, r7
   13f12:	bc80      	pop	{r7}
   13f14:	4770      	bx	lr
   13f16:	bf00      	nop

00013f18 <EMAC_ReadPacketBuffer>:
 * 							data that contain specified information about
 * 							Packet data buffer.
 * @return		None
 **********************************************************************/
void EMAC_ReadPacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
{
   13f18:	b480      	push	{r7}
   13f1a:	b087      	sub	sp, #28
   13f1c:	af00      	add	r7, sp, #0
   13f1e:	6078      	str	r0, [r7, #4]
	uint32_t idx, len;
	uint32_t *dp, *sp;

	idx = LPC_EMAC->RxConsumeIndex;
   13f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13f24:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   13f28:	60bb      	str	r3, [r7, #8]
	dp = (uint32_t *)pDataStruct->pbDataBuf;
   13f2a:	687b      	ldr	r3, [r7, #4]
   13f2c:	685b      	ldr	r3, [r3, #4]
   13f2e:	613b      	str	r3, [r7, #16]
	sp = (uint32_t *)Rx_Desc[idx].Packet;
   13f30:	f640 4320 	movw	r3, #3104	; 0xc20
   13f34:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13f38:	68ba      	ldr	r2, [r7, #8]
   13f3a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   13f3e:	60fb      	str	r3, [r7, #12]

	if (pDataStruct->pbDataBuf != NULL) {
   13f40:	687b      	ldr	r3, [r7, #4]
   13f42:	685b      	ldr	r3, [r3, #4]
   13f44:	2b00      	cmp	r3, #0
   13f46:	d01a      	beq.n	13f7e <EMAC_ReadPacketBuffer+0x66>
		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
   13f48:	687b      	ldr	r3, [r7, #4]
   13f4a:	681b      	ldr	r3, [r3, #0]
   13f4c:	f103 0303 	add.w	r3, r3, #3
   13f50:	ea4f 0393 	mov.w	r3, r3, lsr #2
   13f54:	617b      	str	r3, [r7, #20]
   13f56:	e00f      	b.n	13f78 <EMAC_ReadPacketBuffer+0x60>
			*dp++ = *sp++;
   13f58:	68fb      	ldr	r3, [r7, #12]
   13f5a:	681a      	ldr	r2, [r3, #0]
   13f5c:	693b      	ldr	r3, [r7, #16]
   13f5e:	601a      	str	r2, [r3, #0]
   13f60:	693b      	ldr	r3, [r7, #16]
   13f62:	f103 0304 	add.w	r3, r3, #4
   13f66:	613b      	str	r3, [r7, #16]
   13f68:	68fb      	ldr	r3, [r7, #12]
   13f6a:	f103 0304 	add.w	r3, r3, #4
   13f6e:	60fb      	str	r3, [r7, #12]
	idx = LPC_EMAC->RxConsumeIndex;
	dp = (uint32_t *)pDataStruct->pbDataBuf;
	sp = (uint32_t *)Rx_Desc[idx].Packet;

	if (pDataStruct->pbDataBuf != NULL) {
		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
   13f70:	697b      	ldr	r3, [r7, #20]
   13f72:	f103 33ff 	add.w	r3, r3, #4294967295
   13f76:	617b      	str	r3, [r7, #20]
   13f78:	697b      	ldr	r3, [r7, #20]
   13f7a:	2b00      	cmp	r3, #0
   13f7c:	d1ec      	bne.n	13f58 <EMAC_ReadPacketBuffer+0x40>
			*dp++ = *sp++;
		}
	}

}
   13f7e:	f107 071c 	add.w	r7, r7, #28
   13f82:	46bd      	mov	sp, r7
   13f84:	bc80      	pop	{r7}
   13f86:	4770      	bx	lr

00013f88 <EMAC_IntCmd>:
 * 							- ENABLE.
 * 							- DISABLE.
 * @return		None
 **********************************************************************/
void EMAC_IntCmd(uint32_t ulIntType, FunctionalState NewState)
{
   13f88:	b480      	push	{r7}
   13f8a:	b083      	sub	sp, #12
   13f8c:	af00      	add	r7, sp, #0
   13f8e:	6078      	str	r0, [r7, #4]
   13f90:	460b      	mov	r3, r1
   13f92:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE) {
   13f94:	78fb      	ldrb	r3, [r7, #3]
   13f96:	2b01      	cmp	r3, #1
   13f98:	d10b      	bne.n	13fb2 <EMAC_IntCmd+0x2a>
		LPC_EMAC->IntEnable |= ulIntType;
   13f9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13fa2:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	431a      	orrs	r2, r3
   13faa:	460b      	mov	r3, r1
   13fac:	f8c3 2fe4 	str.w	r2, [r3, #4068]	; 0xfe4
   13fb0:	e00c      	b.n	13fcc <EMAC_IntCmd+0x44>
	} else {
		LPC_EMAC->IntEnable &= ~(ulIntType);
   13fb2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   13fb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13fba:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
   13fbe:	687b      	ldr	r3, [r7, #4]
   13fc0:	ea6f 0303 	mvn.w	r3, r3
   13fc4:	401a      	ands	r2, r3
   13fc6:	460b      	mov	r3, r1
   13fc8:	f8c3 2fe4 	str.w	r2, [r3, #4068]	; 0xfe4
	}
}
   13fcc:	f107 070c 	add.w	r7, r7, #12
   13fd0:	46bd      	mov	sp, r7
   13fd2:	bc80      	pop	{r7}
   13fd4:	4770      	bx	lr
   13fd6:	bf00      	nop

00013fd8 <EMAC_IntGetStatus>:
 * 							- EMAC_INT_SOFT_INT: Software interrupt
 * 							- EMAC_INT_WAKEUP: Wakeup interrupt
 * @return		New state of specified interrupt (SET or RESET)
 **********************************************************************/
IntStatus EMAC_IntGetStatus(uint32_t ulIntType)
{
   13fd8:	b480      	push	{r7}
   13fda:	b083      	sub	sp, #12
   13fdc:	af00      	add	r7, sp, #0
   13fde:	6078      	str	r0, [r7, #4]
	if (LPC_EMAC->IntStatus & ulIntType) {
   13fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13fe4:	f8d3 2fe0 	ldr.w	r2, [r3, #4064]	; 0xfe0
   13fe8:	687b      	ldr	r3, [r7, #4]
   13fea:	4013      	ands	r3, r2
   13fec:	2b00      	cmp	r3, #0
   13fee:	d007      	beq.n	14000 <EMAC_IntGetStatus+0x28>
		LPC_EMAC->IntClear = ulIntType;
   13ff0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13ff4:	687a      	ldr	r2, [r7, #4]
   13ff6:	f8c3 2fe8 	str.w	r2, [r3, #4072]	; 0xfe8
		return SET;
   13ffa:	f04f 0301 	mov.w	r3, #1
   13ffe:	e001      	b.n	14004 <EMAC_IntGetStatus+0x2c>
	} else {
		return RESET;
   14000:	f04f 0300 	mov.w	r3, #0
	}
}
   14004:	4618      	mov	r0, r3
   14006:	f107 070c 	add.w	r7, r7, #12
   1400a:	46bd      	mov	sp, r7
   1400c:	bc80      	pop	{r7}
   1400e:	4770      	bx	lr

00014010 <EMAC_CheckReceiveIndex>:
 * Note: In case the RxConsumeIndex is not equal to the RxProduceIndex,
 * it means there're available data has been received. They should be read
 * out and released the Receive Data Buffer by updating the RxConsumeIndex value.
 **********************************************************************/
Bool EMAC_CheckReceiveIndex(void)
{
   14010:	b480      	push	{r7}
   14012:	af00      	add	r7, sp, #0
	if (LPC_EMAC->RxConsumeIndex != LPC_EMAC->RxProduceIndex) {
   14014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14018:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1401c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14020:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   14024:	429a      	cmp	r2, r3
   14026:	d002      	beq.n	1402e <EMAC_CheckReceiveIndex+0x1e>
		return TRUE;
   14028:	f04f 0301 	mov.w	r3, #1
   1402c:	e001      	b.n	14032 <EMAC_CheckReceiveIndex+0x22>
	} else {
		return FALSE;
   1402e:	f04f 0300 	mov.w	r3, #0
	}
}
   14032:	4618      	mov	r0, r3
   14034:	46bd      	mov	sp, r7
   14036:	bc80      	pop	{r7}
   14038:	4770      	bx	lr
   1403a:	bf00      	nop

0001403c <EMAC_CheckTransmitIndex>:
 * Note: In case the RxConsumeIndex is equal to the RxProduceIndex - 1,
 * it means the transmit buffer is available and data can be written to transmit
 * buffer to be sent.
 **********************************************************************/
Bool EMAC_CheckTransmitIndex(void)
{
   1403c:	b480      	push	{r7}
   1403e:	b083      	sub	sp, #12
   14040:	af00      	add	r7, sp, #0
	uint32_t tmp = LPC_EMAC->TxConsumeIndex -1;
   14042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14046:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   1404a:	f103 33ff 	add.w	r3, r3, #4294967295
   1404e:	607b      	str	r3, [r7, #4]
	if (LPC_EMAC->TxProduceIndex == tmp) {
   14050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14054:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   14058:	687b      	ldr	r3, [r7, #4]
   1405a:	429a      	cmp	r2, r3
   1405c:	d102      	bne.n	14064 <EMAC_CheckTransmitIndex+0x28>
		return FALSE;
   1405e:	f04f 0300 	mov.w	r3, #0
   14062:	e001      	b.n	14068 <EMAC_CheckTransmitIndex+0x2c>
	} else {
		return TRUE;
   14064:	f04f 0301 	mov.w	r3, #1
	}
}
   14068:	4618      	mov	r0, r3
   1406a:	f107 070c 	add.w	r7, r7, #12
   1406e:	46bd      	mov	sp, r7
   14070:	bc80      	pop	{r7}
   14072:	4770      	bx	lr

00014074 <EMAC_CheckReceiveDataStatus>:
 * 							- EMAC_RINFO_LAST_FLAG: last Fragment in Frame
 * 							- EMAC_RINFO_ERR: Error Occurred (OR of all error)
 * @return		Current value of receive data (due to RxConsumeIndex)
 **********************************************************************/
FlagStatus EMAC_CheckReceiveDataStatus(uint32_t ulRxStatType)
{
   14074:	b480      	push	{r7}
   14076:	b085      	sub	sp, #20
   14078:	af00      	add	r7, sp, #0
   1407a:	6078      	str	r0, [r7, #4]
	uint32_t idx;
	idx = LPC_EMAC->RxConsumeIndex;
   1407c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14080:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   14084:	60fb      	str	r3, [r7, #12]
	return (((Rx_Stat[idx].Info) & ulRxStatType) ? SET : RESET);
   14086:	f640 4340 	movw	r3, #3136	; 0xc40
   1408a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1408e:	68fa      	ldr	r2, [r7, #12]
   14090:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   14094:	687b      	ldr	r3, [r7, #4]
   14096:	4013      	ands	r3, r2
   14098:	2b00      	cmp	r3, #0
   1409a:	bf0c      	ite	eq
   1409c:	2300      	moveq	r3, #0
   1409e:	2301      	movne	r3, #1
   140a0:	b2db      	uxtb	r3, r3
}
   140a2:	4618      	mov	r0, r3
   140a4:	f107 0714 	add.w	r7, r7, #20
   140a8:	46bd      	mov	sp, r7
   140aa:	bc80      	pop	{r7}
   140ac:	4770      	bx	lr
   140ae:	bf00      	nop

000140b0 <EMAC_GetReceiveDataSize>:
 * 				RxConsumeIndex)
 * @param[in]	None
 * @return		Size of received data
 **********************************************************************/
uint32_t EMAC_GetReceiveDataSize(void)
{
   140b0:	b480      	push	{r7}
   140b2:	b083      	sub	sp, #12
   140b4:	af00      	add	r7, sp, #0
	uint32_t idx;
	idx =LPC_EMAC->RxConsumeIndex;
   140b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   140ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   140be:	607b      	str	r3, [r7, #4]
	return ((Rx_Stat[idx].Info) & EMAC_RINFO_SIZE);
   140c0:	f640 4340 	movw	r3, #3136	; 0xc40
   140c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   140c8:	687a      	ldr	r2, [r7, #4]
   140ca:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   140ce:	ea4f 5343 	mov.w	r3, r3, lsl #21
   140d2:	ea4f 5353 	mov.w	r3, r3, lsr #21
}
   140d6:	4618      	mov	r0, r3
   140d8:	f107 070c 	add.w	r7, r7, #12
   140dc:	46bd      	mov	sp, r7
   140de:	bc80      	pop	{r7}
   140e0:	4770      	bx	lr
   140e2:	bf00      	nop

000140e4 <EMAC_UpdateRxConsumeIndex>:
 * 				it reaches the maximum Receive Number
 * @param[in]	None
 * @return		None
 **********************************************************************/
void EMAC_UpdateRxConsumeIndex(void)
{
   140e4:	b480      	push	{r7}
   140e6:	b083      	sub	sp, #12
   140e8:	af00      	add	r7, sp, #0
	// Get current Rx consume index
	uint32_t idx = LPC_EMAC->RxConsumeIndex;
   140ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   140ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   140f2:	607b      	str	r3, [r7, #4]

	/* Release frame from EMAC buffer */
	if (++idx == EMAC_NUM_RX_FRAG) idx = 0;
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	f103 0301 	add.w	r3, r3, #1
   140fa:	607b      	str	r3, [r7, #4]
   140fc:	687b      	ldr	r3, [r7, #4]
   140fe:	2b04      	cmp	r3, #4
   14100:	d102      	bne.n	14108 <EMAC_UpdateRxConsumeIndex+0x24>
   14102:	f04f 0300 	mov.w	r3, #0
   14106:	607b      	str	r3, [r7, #4]
	LPC_EMAC->RxConsumeIndex = idx;
   14108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1410c:	687a      	ldr	r2, [r7, #4]
   1410e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
   14112:	f107 070c 	add.w	r7, r7, #12
   14116:	46bd      	mov	sp, r7
   14118:	bc80      	pop	{r7}
   1411a:	4770      	bx	lr

0001411c <EMAC_UpdateTxProduceIndex>:
 * 				it reaches the maximum Transmit Number
 * @param[in]	None
 * @return		None
 **********************************************************************/
void EMAC_UpdateTxProduceIndex(void)
{
   1411c:	b480      	push	{r7}
   1411e:	b083      	sub	sp, #12
   14120:	af00      	add	r7, sp, #0
	// Get current Tx produce index
	uint32_t idx = LPC_EMAC->TxProduceIndex;
   14122:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14126:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1412a:	607b      	str	r3, [r7, #4]

	/* Start frame transmission */
	if (++idx == EMAC_NUM_TX_FRAG) idx = 0;
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	f103 0301 	add.w	r3, r3, #1
   14132:	607b      	str	r3, [r7, #4]
   14134:	687b      	ldr	r3, [r7, #4]
   14136:	2b03      	cmp	r3, #3
   14138:	d102      	bne.n	14140 <EMAC_UpdateTxProduceIndex+0x24>
   1413a:	f04f 0300 	mov.w	r3, #0
   1413e:	607b      	str	r3, [r7, #4]
	LPC_EMAC->TxProduceIndex = idx;
   14140:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14144:	687a      	ldr	r2, [r7, #4]
   14146:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
   1414a:	f107 070c 	add.w	r7, r7, #12
   1414e:	46bd      	mov	sp, r7
   14150:	bc80      	pop	{r7}
   14152:	4770      	bx	lr

00014154 <uart_set_divisors>:
 * @return 		Error status, could be:
 * 				- SUCCESS
 * 				- ERROR
 **********************************************************************/
static Status uart_set_divisors(LPC_UART_TypeDef *UARTx, uint32_t baudrate)
{
   14154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   14158:	b096      	sub	sp, #88	; 0x58
   1415a:	af00      	add	r7, sp, #0
   1415c:	6178      	str	r0, [r7, #20]
   1415e:	6139      	str	r1, [r7, #16]
	Status errorStatus = ERROR;
   14160:	f04f 0300 	mov.w	r3, #0
   14164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == LPC_UART0)
   14168:	697a      	ldr	r2, [r7, #20]
   1416a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1416e:	f2c4 0300 	movt	r3, #16384	; 0x4000
   14172:	429a      	cmp	r2, r3
   14174:	d105      	bne.n	14182 <uart_set_divisors+0x2e>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
   14176:	f04f 0006 	mov.w	r0, #6
   1417a:	f7fd fb8b 	bl	11894 <CLKPWR_GetPCLK>
   1417e:	6538      	str	r0, [r7, #80]	; 0x50
   14180:	e025      	b.n	141ce <uart_set_divisors+0x7a>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
   14182:	697a      	ldr	r2, [r7, #20]
   14184:	f04f 0300 	mov.w	r3, #0
   14188:	f2c4 0301 	movt	r3, #16385	; 0x4001
   1418c:	429a      	cmp	r2, r3
   1418e:	d105      	bne.n	1419c <uart_set_divisors+0x48>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
   14190:	f04f 0008 	mov.w	r0, #8
   14194:	f7fd fb7e 	bl	11894 <CLKPWR_GetPCLK>
   14198:	6538      	str	r0, [r7, #80]	; 0x50
   1419a:	e018      	b.n	141ce <uart_set_divisors+0x7a>
	}
	else if (UARTx == LPC_UART2)
   1419c:	697a      	ldr	r2, [r7, #20]
   1419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   141a2:	f2c4 0309 	movt	r3, #16393	; 0x4009
   141a6:	429a      	cmp	r2, r3
   141a8:	d105      	bne.n	141b6 <uart_set_divisors+0x62>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
   141aa:	f04f 0030 	mov.w	r0, #48	; 0x30
   141ae:	f7fd fb71 	bl	11894 <CLKPWR_GetPCLK>
   141b2:	6538      	str	r0, [r7, #80]	; 0x50
   141b4:	e00b      	b.n	141ce <uart_set_divisors+0x7a>
	}
	else if (UARTx == LPC_UART3)
   141b6:	697a      	ldr	r2, [r7, #20]
   141b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   141bc:	f2c4 0309 	movt	r3, #16393	; 0x4009
   141c0:	429a      	cmp	r2, r3
   141c2:	d104      	bne.n	141ce <uart_set_divisors+0x7a>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
   141c4:	f04f 0032 	mov.w	r0, #50	; 0x32
   141c8:	f7fd fb64 	bl	11894 <CLKPWR_GetPCLK>
   141cc:	6538      	str	r0, [r7, #80]	; 0x50
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
   141ce:	f04f 33ff 	mov.w	r3, #4294967295
   141d2:	62bb      	str	r3, [r7, #40]	; 0x28
	bestd = 0;
   141d4:	f04f 0300 	mov.w	r3, #0
   141d8:	647b      	str	r3, [r7, #68]	; 0x44
	bestm = 0;
   141da:	f04f 0300 	mov.w	r3, #0
   141de:	643b      	str	r3, [r7, #64]	; 0x40
	best_divisor = 0;
   141e0:	f04f 0200 	mov.w	r2, #0
   141e4:	f04f 0300 	mov.w	r3, #0
   141e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for (m = 1 ; m <= 15 ;m++)
   141ec:	f04f 0301 	mov.w	r3, #1
   141f0:	64bb      	str	r3, [r7, #72]	; 0x48
   141f2:	e072      	b.n	142da <uart_set_divisors+0x186>
	{
		for (d = 0 ; d < m ; d++)
   141f4:	f04f 0300 	mov.w	r3, #0
   141f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   141fa:	e061      	b.n	142c0 <uart_set_divisors+0x16c>
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
   141fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
   141fe:	460a      	mov	r2, r1
   14200:	f04f 0300 	mov.w	r3, #0
   14204:	ea4f 1112 	mov.w	r1, r2, lsr #4
   14208:	ea4f 7903 	mov.w	r9, r3, lsl #28
   1420c:	ea41 0909 	orr.w	r9, r1, r9
   14210:	ea4f 7802 	mov.w	r8, r2, lsl #28
   14214:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   14216:	460a      	mov	r2, r1
   14218:	f04f 0300 	mov.w	r3, #0
   1421c:	fb02 f009 	mul.w	r0, r2, r9
   14220:	fb08 f103 	mul.w	r1, r8, r3
   14224:	1841      	adds	r1, r0, r1
   14226:	fba8 2302 	umull	r2, r3, r8, r2
   1422a:	18c9      	adds	r1, r1, r3
   1422c:	460b      	mov	r3, r1
   1422e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   14230:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   14232:	1841      	adds	r1, r0, r1
   14234:	6938      	ldr	r0, [r7, #16]
   14236:	fb00 f101 	mul.w	r1, r0, r1
   1423a:	460c      	mov	r4, r1
   1423c:	f04f 0500 	mov.w	r5, #0
   14240:	4610      	mov	r0, r2
   14242:	4619      	mov	r1, r3
   14244:	4622      	mov	r2, r4
   14246:	462b      	mov	r3, r5
   14248:	f003 fe02 	bl	17e50 <__aeabi_uldivmod>
   1424c:	4602      	mov	r2, r0
   1424e:	460b      	mov	r3, r1
   14250:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  current_error = divisor & 0xFFFFFFFF;
   14254:	6a3b      	ldr	r3, [r7, #32]
   14256:	62fb      	str	r3, [r7, #44]	; 0x2c

		  tmp = divisor>>32;
   14258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1425a:	461b      	mov	r3, r3
   1425c:	60bb      	str	r3, [r7, #8]
   1425e:	f04f 0100 	mov.w	r1, #0
   14262:	60f9      	str	r1, [r7, #12]
   14264:	68bb      	ldr	r3, [r7, #8]
   14266:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
   14268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1426a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1426e:	d907      	bls.n	14280 <uart_set_divisors+0x12c>
			current_error = -current_error;
   14270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14272:	f1c3 0300 	rsb	r3, r3, #0
   14276:	62fb      	str	r3, [r7, #44]	; 0x2c
			tmp++;
   14278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1427a:	f103 0301 	add.w	r3, r3, #1
   1427e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
   14280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14282:	2b00      	cmp	r3, #0
   14284:	d017      	beq.n	142b6 <uart_set_divisors+0x162>
   14286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1428c:	d813      	bhi.n	142b6 <uart_set_divisors+0x162>
		  continue;

		  if( current_error < best_error){
   1428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14290:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14292:	429a      	cmp	r2, r3
   14294:	d210      	bcs.n	142b8 <uart_set_divisors+0x164>
			best_error = current_error;
   14296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14298:	62bb      	str	r3, [r7, #40]	; 0x28
			best_divisor = tmp;
   1429a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1429c:	460a      	mov	r2, r1
   1429e:	f04f 0300 	mov.w	r3, #0
   142a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			bestd = d;
   142a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   142a8:	647b      	str	r3, [r7, #68]	; 0x44
			bestm = m;
   142aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142ac:	643b      	str	r3, [r7, #64]	; 0x40
			if(best_error == 0) break;
   142ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   142b0:	2b00      	cmp	r3, #0
   142b2:	d00a      	beq.n	142ca <uart_set_divisors+0x176>
   142b4:	e000      	b.n	142b8 <uart_set_divisors+0x164>
			current_error = -current_error;
			tmp++;
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
		  continue;
   142b6:	bf00      	nop
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
   142b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   142ba:	f103 0301 	add.w	r3, r3, #1
   142be:	64fb      	str	r3, [r7, #76]	; 0x4c
   142c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   142c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142c4:	429a      	cmp	r2, r3
   142c6:	d399      	bcc.n	141fc <uart_set_divisors+0xa8>
   142c8:	e000      	b.n	142cc <uart_set_divisors+0x178>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
   142ca:	bf00      	nop
			}
		} /* end of inner for loop */

		if (best_error == 0)
   142cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   142ce:	2b00      	cmp	r3, #0
   142d0:	d007      	beq.n	142e2 <uart_set_divisors+0x18e>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
   142d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142d4:	f103 0301 	add.w	r3, r3, #1
   142d8:	64bb      	str	r3, [r7, #72]	; 0x48
   142da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142dc:	2b0f      	cmp	r3, #15
   142de:	d989      	bls.n	141f4 <uart_set_divisors+0xa0>
   142e0:	e000      	b.n	142e4 <uart_set_divisors+0x190>
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
		  break;
   142e2:	bf00      	nop
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
   142e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   142e8:	ea52 0103 	orrs.w	r1, r2, r3
   142ec:	d102      	bne.n	142f4 <uart_set_divisors+0x1a0>
   142ee:	f04f 0300 	mov.w	r3, #0
   142f2:	e0aa      	b.n	1444a <uart_set_divisors+0x2f6>

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
   142f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   142f6:	ea4f 1313 	mov.w	r3, r3, lsr #4
   142fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   142fc:	fb02 f303 	mul.w	r3, r2, r3
   14300:	4618      	mov	r0, r3
   14302:	f04f 0100 	mov.w	r1, #0
   14306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   14308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1430a:	18d4      	adds	r4, r2, r3
   1430c:	4622      	mov	r2, r4
   1430e:	f04f 0300 	mov.w	r3, #0
   14312:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   14314:	fb03 f504 	mul.w	r5, r3, r4
   14318:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1431a:	fb02 f404 	mul.w	r4, r2, r4
   1431e:	192c      	adds	r4, r5, r4
   14320:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   14322:	fba5 2302 	umull	r2, r3, r5, r2
   14326:	18e4      	adds	r4, r4, r3
   14328:	4623      	mov	r3, r4
   1432a:	f003 fd91 	bl	17e50 <__aeabi_uldivmod>
   1432e:	4602      	mov	r2, r0
   14330:	460b      	mov	r3, r1
   14332:	4613      	mov	r3, r2
   14334:	61fb      	str	r3, [r7, #28]

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
   14336:	693a      	ldr	r2, [r7, #16]
   14338:	69fb      	ldr	r3, [r7, #28]
   1433a:	429a      	cmp	r2, r3
   1433c:	d904      	bls.n	14348 <uart_set_divisors+0x1f4>
   1433e:	693a      	ldr	r2, [r7, #16]
   14340:	69fb      	ldr	r3, [r7, #28]
   14342:	1ad3      	subs	r3, r2, r3
   14344:	62bb      	str	r3, [r7, #40]	; 0x28
   14346:	e003      	b.n	14350 <uart_set_divisors+0x1fc>
	else best_error = recalcbaud -baudrate;
   14348:	69fa      	ldr	r2, [r7, #28]
   1434a:	693b      	ldr	r3, [r7, #16]
   1434c:	1ad3      	subs	r3, r2, r3
   1434e:	62bb      	str	r3, [r7, #40]	; 0x28

	best_error = best_error * 100 / baudrate;
   14350:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14352:	f04f 0264 	mov.w	r2, #100	; 0x64
   14356:	fb02 f203 	mul.w	r2, r2, r3
   1435a:	693b      	ldr	r3, [r7, #16]
   1435c:	fbb2 f3f3 	udiv	r3, r2, r3
   14360:	62bb      	str	r3, [r7, #40]	; 0x28

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
   14362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14364:	2b02      	cmp	r3, #2
   14366:	d86e      	bhi.n	14446 <uart_set_divisors+0x2f2>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14368:	697a      	ldr	r2, [r7, #20]
   1436a:	f04f 0300 	mov.w	r3, #0
   1436e:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14372:	429a      	cmp	r2, r3
   14374:	d131      	bne.n	143da <uart_set_divisors+0x286>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
   14376:	697b      	ldr	r3, [r7, #20]
   14378:	7b1b      	ldrb	r3, [r3, #12]
   1437a:	b2db      	uxtb	r3, r3
   1437c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14380:	b2da      	uxtb	r2, r3
   14382:	697b      	ldr	r3, [r7, #20]
   14384:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
   14386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14388:	ea4f 6303 	mov.w	r3, r3, lsl #24
   1438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1438e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   14392:	603a      	str	r2, [r7, #0]
   14394:	683a      	ldr	r2, [r7, #0]
   14396:	431a      	orrs	r2, r3
   14398:	603a      	str	r2, [r7, #0]
   1439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1439c:	ea4f 2313 	mov.w	r3, r3, lsr #8
   143a0:	607b      	str	r3, [r7, #4]
   143a2:	783b      	ldrb	r3, [r7, #0]
   143a4:	b2da      	uxtb	r2, r3
   143a6:	697b      	ldr	r3, [r7, #20]
   143a8:	711a      	strb	r2, [r3, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
   143aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   143ae:	697b      	ldr	r3, [r7, #20]
   143b0:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
   143b2:	697b      	ldr	r3, [r7, #20]
   143b4:	7b1b      	ldrb	r3, [r3, #12]
   143b6:	b2db      	uxtb	r3, r3
   143b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   143bc:	b2da      	uxtb	r2, r3
   143be:	697b      	ldr	r3, [r7, #20]
   143c0:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
   143c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   143c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
   143c8:	b2da      	uxtb	r2, r3
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
   143ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   143cc:	f003 030f 	and.w	r3, r3, #15
   143d0:	4313      	orrs	r3, r2
   143d2:	b2da      	uxtb	r2, r3
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
   143d4:	697b      	ldr	r3, [r7, #20]
   143d6:	629a      	str	r2, [r3, #40]	; 0x28
   143d8:	e031      	b.n	1443e <uart_set_divisors+0x2ea>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
   143da:	697b      	ldr	r3, [r7, #20]
   143dc:	7b1b      	ldrb	r3, [r3, #12]
   143de:	b2db      	uxtb	r3, r3
   143e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   143e4:	b2da      	uxtb	r2, r3
   143e6:	697b      	ldr	r3, [r7, #20]
   143e8:	731a      	strb	r2, [r3, #12]
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
   143ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   143ec:	ea4f 6303 	mov.w	r3, r3, lsl #24
   143f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   143f2:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   143f6:	ea43 0a0a 	orr.w	sl, r3, sl
   143fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   143fc:	ea4f 2b13 	mov.w	fp, r3, lsr #8
   14400:	fa5f f28a 	uxtb.w	r2, sl
   14404:	697b      	ldr	r3, [r7, #20]
   14406:	711a      	strb	r2, [r3, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
   14408:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   1440c:	697b      	ldr	r3, [r7, #20]
   1440e:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
   14410:	697b      	ldr	r3, [r7, #20]
   14412:	7b1b      	ldrb	r3, [r3, #12]
   14414:	b2db      	uxtb	r3, r3
   14416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1441a:	b2da      	uxtb	r2, r3
   1441c:	697b      	ldr	r3, [r7, #20]
   1441e:	731a      	strb	r2, [r3, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
   14420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14422:	b2db      	uxtb	r3, r3
   14424:	ea4f 1303 	mov.w	r3, r3, lsl #4
   14428:	b2da      	uxtb	r2, r3
   1442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1442c:	b2db      	uxtb	r3, r3
   1442e:	f003 030f 	and.w	r3, r3, #15
   14432:	b2db      	uxtb	r3, r3
   14434:	4313      	orrs	r3, r2
   14436:	b2da      	uxtb	r2, r3
   14438:	697b      	ldr	r3, [r7, #20]
   1443a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			errorStatus = SUCCESS;
   1443e:	f04f 0301 	mov.w	r3, #1
   14442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		return errorStatus;
   14446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
   1444a:	4618      	mov	r0, r3
   1444c:	f107 0758 	add.w	r7, r7, #88	; 0x58
   14450:	46bd      	mov	sp, r7
   14452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   14456:	bf00      	nop

00014458 <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
   14458:	b580      	push	{r7, lr}
   1445a:	b084      	sub	sp, #16
   1445c:	af00      	add	r7, sp, #0
   1445e:	6078      	str	r0, [r7, #4]
   14460:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
*/
#ifdef _UART0
	if(UARTx == LPC_UART0)
   14462:	687a      	ldr	r2, [r7, #4]
   14464:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   14468:	f2c4 0300 	movt	r3, #16384	; 0x4000
   1446c:	429a      	cmp	r2, r3
   1446e:	d105      	bne.n	1447c <UART_Init+0x24>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
   14470:	f04f 0008 	mov.w	r0, #8
   14474:	f04f 0101 	mov.w	r1, #1
   14478:	f7fd fa44 	bl	11904 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   1447c:	687a      	ldr	r2, [r7, #4]
   1447e:	f04f 0300 	mov.w	r3, #0
   14482:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14486:	429a      	cmp	r2, r3
   14488:	d105      	bne.n	14496 <UART_Init+0x3e>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
   1448a:	f04f 0010 	mov.w	r0, #16
   1448e:	f04f 0101 	mov.w	r1, #1
   14492:	f7fd fa37 	bl	11904 <CLKPWR_ConfigPPWR>
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14496:	687a      	ldr	r2, [r7, #4]
   14498:	f04f 0300 	mov.w	r3, #0
   1449c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   144a0:	429a      	cmp	r2, r3
   144a2:	d14e      	bne.n	14542 <UART_Init+0xea>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	f04f 0207 	mov.w	r2, #7
   144aa:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
   144ac:	687b      	ldr	r3, [r7, #4]
   144ae:	f04f 0200 	mov.w	r2, #0
   144b2:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
   144b4:	e003      	b.n	144be <UART_Init+0x66>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
   144b6:	687b      	ldr	r3, [r7, #4]
   144b8:	781b      	ldrb	r3, [r3, #0]
   144ba:	b2db      	uxtb	r3, r3
   144bc:	60fb      	str	r3, [r7, #12]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
   144be:	687b      	ldr	r3, [r7, #4]
   144c0:	7d1b      	ldrb	r3, [r3, #20]
   144c2:	b2db      	uxtb	r3, r3
   144c4:	f003 0301 	and.w	r3, r3, #1
   144c8:	b2db      	uxtb	r3, r3
   144ca:	2b00      	cmp	r3, #0
   144cc:	d1f3      	bne.n	144b6 <UART_Init+0x5e>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
   144ce:	687b      	ldr	r3, [r7, #4]
   144d0:	f04f 0280 	mov.w	r2, #128	; 0x80
   144d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
   144d8:	bf00      	nop
   144da:	687b      	ldr	r3, [r7, #4]
   144dc:	7d1b      	ldrb	r3, [r3, #20]
   144de:	b2db      	uxtb	r3, r3
   144e0:	f003 0320 	and.w	r3, r3, #32
   144e4:	2b00      	cmp	r3, #0
   144e6:	d0f8      	beq.n	144da <UART_Init+0x82>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
   144e8:	687b      	ldr	r3, [r7, #4]
   144ea:	f04f 0200 	mov.w	r2, #0
   144ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
   144f2:	687b      	ldr	r3, [r7, #4]
   144f4:	f04f 0200 	mov.w	r2, #0
   144f8:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
   144fa:	687b      	ldr	r3, [r7, #4]
   144fc:	f04f 0200 	mov.w	r2, #0
   14500:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
   14502:	687b      	ldr	r3, [r7, #4]
   14504:	f04f 0200 	mov.w	r2, #0
   14508:	621a      	str	r2, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
   1450a:	687b      	ldr	r3, [r7, #4]
   1450c:	f04f 0200 	mov.w	r2, #0
   14510:	741a      	strb	r2, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
   14512:	687b      	ldr	r3, [r7, #4]
   14514:	f04f 0200 	mov.w	r2, #0
   14518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
   1451c:	687b      	ldr	r3, [r7, #4]
   1451e:	f04f 0200 	mov.w	r2, #0
   14522:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
   14526:	687b      	ldr	r3, [r7, #4]
   14528:	f04f 0200 	mov.w	r2, #0
   1452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
   14530:	687b      	ldr	r3, [r7, #4]
   14532:	7e1b      	ldrb	r3, [r3, #24]
   14534:	b2db      	uxtb	r3, r3
   14536:	60fb      	str	r3, [r7, #12]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
   14538:	687b      	ldr	r3, [r7, #4]
   1453a:	7d1b      	ldrb	r3, [r3, #20]
   1453c:	b2db      	uxtb	r3, r3
   1453e:	60fb      	str	r3, [r7, #12]
   14540:	e036      	b.n	145b0 <UART_Init+0x158>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
   14542:	687b      	ldr	r3, [r7, #4]
   14544:	f04f 0207 	mov.w	r2, #7
   14548:	721a      	strb	r2, [r3, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
   1454a:	687b      	ldr	r3, [r7, #4]
   1454c:	f04f 0200 	mov.w	r2, #0
   14550:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
   14552:	e003      	b.n	1455c <UART_Init+0x104>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
   14554:	687b      	ldr	r3, [r7, #4]
   14556:	781b      	ldrb	r3, [r3, #0]
   14558:	b2db      	uxtb	r3, r3
   1455a:	60fb      	str	r3, [r7, #12]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
   1455c:	687b      	ldr	r3, [r7, #4]
   1455e:	7d1b      	ldrb	r3, [r3, #20]
   14560:	b2db      	uxtb	r3, r3
   14562:	f003 0301 	and.w	r3, r3, #1
   14566:	b2db      	uxtb	r3, r3
   14568:	2b00      	cmp	r3, #0
   1456a:	d1f3      	bne.n	14554 <UART_Init+0xfc>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	f04f 0280 	mov.w	r2, #128	; 0x80
   14572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
   14576:	bf00      	nop
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	7d1b      	ldrb	r3, [r3, #20]
   1457c:	b2db      	uxtb	r3, r3
   1457e:	f003 0320 	and.w	r3, r3, #32
   14582:	2b00      	cmp	r3, #0
   14584:	d0f8      	beq.n	14578 <UART_Init+0x120>
		// Disable Tx
		UARTx->TER = 0;
   14586:	687b      	ldr	r3, [r7, #4]
   14588:	f04f 0200 	mov.w	r2, #0
   1458c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
   14590:	687b      	ldr	r3, [r7, #4]
   14592:	f04f 0200 	mov.w	r2, #0
   14596:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
   14598:	687b      	ldr	r3, [r7, #4]
   1459a:	f04f 0200 	mov.w	r2, #0
   1459e:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	f04f 0200 	mov.w	r2, #0
   145a6:	621a      	str	r2, [r3, #32]
		// Dummy reading
		tmp = UARTx->LSR;
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	7d1b      	ldrb	r3, [r3, #20]
   145ac:	b2db      	uxtb	r3, r3
   145ae:	60fb      	str	r3, [r7, #12]
	}

	if (UARTx == LPC_UART3)
   145b0:	687a      	ldr	r2, [r7, #4]
   145b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   145b6:	f2c4 0309 	movt	r3, #16393	; 0x4009
   145ba:	429a      	cmp	r2, r3
   145bc:	d104      	bne.n	145c8 <UART_Init+0x170>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
   145be:	687b      	ldr	r3, [r7, #4]
   145c0:	f04f 0200 	mov.w	r2, #0
   145c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
   145c8:	683b      	ldr	r3, [r7, #0]
   145ca:	681b      	ldr	r3, [r3, #0]
   145cc:	6878      	ldr	r0, [r7, #4]
   145ce:	4619      	mov	r1, r3
   145d0:	f7ff fdc0 	bl	14154 <uart_set_divisors>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   145d4:	687a      	ldr	r2, [r7, #4]
   145d6:	f04f 0300 	mov.w	r3, #0
   145da:	f2c4 0301 	movt	r3, #16385	; 0x4001
   145de:	429a      	cmp	r2, r3
   145e0:	d106      	bne.n	145f0 <UART_Init+0x198>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
   145e2:	687b      	ldr	r3, [r7, #4]
   145e4:	7b1b      	ldrb	r3, [r3, #12]
   145e6:	b2db      	uxtb	r3, r3
   145e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   145ec:	60fb      	str	r3, [r7, #12]
   145ee:	e005      	b.n	145fc <UART_Init+0x1a4>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
   145f0:	687b      	ldr	r3, [r7, #4]
   145f2:	7b1b      	ldrb	r3, [r3, #12]
   145f4:	b2db      	uxtb	r3, r3
   145f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   145fa:	60fb      	str	r3, [r7, #12]
	}

	switch (UART_ConfigStruct->Databits){
   145fc:	683b      	ldr	r3, [r7, #0]
   145fe:	795b      	ldrb	r3, [r3, #5]
   14600:	2b01      	cmp	r3, #1
   14602:	d004      	beq.n	1460e <UART_Init+0x1b6>
   14604:	2b02      	cmp	r3, #2
   14606:	d007      	beq.n	14618 <UART_Init+0x1c0>
   14608:	2b00      	cmp	r3, #0
   1460a:	d00f      	beq.n	1462c <UART_Init+0x1d4>
   1460c:	e009      	b.n	14622 <UART_Init+0x1ca>
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
   1460e:	68fb      	ldr	r3, [r7, #12]
   14610:	f043 0301 	orr.w	r3, r3, #1
   14614:	60fb      	str	r3, [r7, #12]
		break;
   14616:	e00a      	b.n	1462e <UART_Init+0x1d6>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
   14618:	68fb      	ldr	r3, [r7, #12]
   1461a:	f043 0302 	orr.w	r3, r3, #2
   1461e:	60fb      	str	r3, [r7, #12]
		break;
   14620:	e005      	b.n	1462e <UART_Init+0x1d6>
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
   14622:	68fb      	ldr	r3, [r7, #12]
   14624:	f043 0303 	orr.w	r3, r3, #3
   14628:	60fb      	str	r3, [r7, #12]
		break;
   1462a:	e000      	b.n	1462e <UART_Init+0x1d6>
	}

	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
   1462c:	bf00      	nop
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
   1462e:	683b      	ldr	r3, [r7, #0]
   14630:	791b      	ldrb	r3, [r3, #4]
   14632:	2b00      	cmp	r3, #0
   14634:	d024      	beq.n	14680 <UART_Init+0x228>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
   14636:	68fb      	ldr	r3, [r7, #12]
   14638:	f043 0308 	orr.w	r3, r3, #8
   1463c:	60fb      	str	r3, [r7, #12]
		switch (UART_ConfigStruct->Parity)
   1463e:	683b      	ldr	r3, [r7, #0]
   14640:	791b      	ldrb	r3, [r3, #4]
   14642:	f103 33ff 	add.w	r3, r3, #4294967295
   14646:	2b03      	cmp	r3, #3
   14648:	d819      	bhi.n	1467e <UART_Init+0x226>
   1464a:	a201      	add	r2, pc, #4	; (adr r2, 14650 <UART_Init+0x1f8>)
   1464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14650:	0001467f 	.word	0x0001467f
   14654:	00014661 	.word	0x00014661
   14658:	0001466b 	.word	0x0001466b
   1465c:	00014675 	.word	0x00014675
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
   14660:	68fb      	ldr	r3, [r7, #12]
   14662:	f043 0310 	orr.w	r3, r3, #16
   14666:	60fb      	str	r3, [r7, #12]
			break;
   14668:	e00a      	b.n	14680 <UART_Init+0x228>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
   1466a:	68fb      	ldr	r3, [r7, #12]
   1466c:	f043 0320 	orr.w	r3, r3, #32
   14670:	60fb      	str	r3, [r7, #12]
			break;
   14672:	e005      	b.n	14680 <UART_Init+0x228>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
   14674:	68fb      	ldr	r3, [r7, #12]
   14676:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1467a:	60fb      	str	r3, [r7, #12]
			break;
   1467c:	e000      	b.n	14680 <UART_Init+0x228>
		default:
			break;
   1467e:	bf00      	nop
		}
	}

	switch (UART_ConfigStruct->Stopbits){
   14680:	683b      	ldr	r3, [r7, #0]
   14682:	799b      	ldrb	r3, [r3, #6]
   14684:	2b01      	cmp	r3, #1
   14686:	d104      	bne.n	14692 <UART_Init+0x23a>
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
   14688:	68fb      	ldr	r3, [r7, #12]
   1468a:	f043 0304 	orr.w	r3, r3, #4
   1468e:	60fb      	str	r3, [r7, #12]
		break;
   14690:	e000      	b.n	14694 <UART_Init+0x23c>
	case UART_STOPBIT_1:
	default:
		// Do no thing
		break;
   14692:	bf00      	nop
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
   14694:	687a      	ldr	r2, [r7, #4]
   14696:	f04f 0300 	mov.w	r3, #0
   1469a:	f2c4 0301 	movt	r3, #16385	; 0x4001
   1469e:	429a      	cmp	r2, r3
   146a0:	d104      	bne.n	146ac <UART_Init+0x254>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
   146a2:	68fb      	ldr	r3, [r7, #12]
   146a4:	b2da      	uxtb	r2, r3
   146a6:	687b      	ldr	r3, [r7, #4]
   146a8:	731a      	strb	r2, [r3, #12]
   146aa:	e003      	b.n	146b4 <UART_Init+0x25c>
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
   146ac:	68fb      	ldr	r3, [r7, #12]
   146ae:	b2da      	uxtb	r2, r3
   146b0:	687b      	ldr	r3, [r7, #4]
   146b2:	731a      	strb	r2, [r3, #12]
	}
}
   146b4:	f107 0710 	add.w	r7, r7, #16
   146b8:	46bd      	mov	sp, r7
   146ba:	bd80      	pop	{r7, pc}

000146bc <UART_DeInit>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
   146bc:	b580      	push	{r7, lr}
   146be:	b082      	sub	sp, #8
   146c0:	af00      	add	r7, sp, #0
   146c2:	6078      	str	r0, [r7, #4]
	// For debug mode
	//CHECK_PARAM(PARAM_UARTx(UARTx));

	UART_TxCmd(UARTx, DISABLE);
   146c4:	6878      	ldr	r0, [r7, #4]
   146c6:	f04f 0100 	mov.w	r1, #0
   146ca:	f000 fb43 	bl	14d54 <UART_TxCmd>

#ifdef _UART0
	if (UARTx == LPC_UART0)
   146ce:	687a      	ldr	r2, [r7, #4]
   146d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   146d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
   146d8:	429a      	cmp	r2, r3
   146da:	d105      	bne.n	146e8 <UART_DeInit+0x2c>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, DISABLE);
   146dc:	f04f 0008 	mov.w	r0, #8
   146e0:	f04f 0100 	mov.w	r1, #0
   146e4:	f7fd f90e 	bl	11904 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   146e8:	687a      	ldr	r2, [r7, #4]
   146ea:	f04f 0300 	mov.w	r3, #0
   146ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
   146f2:	429a      	cmp	r2, r3
   146f4:	d105      	bne.n	14702 <UART_DeInit+0x46>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, DISABLE);
   146f6:	f04f 0010 	mov.w	r0, #16
   146fa:	f04f 0100 	mov.w	r1, #0
   146fe:	f7fd f901 	bl	11904 <CLKPWR_ConfigPPWR>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
	}
#endif
}
   14702:	f107 0708 	add.w	r7, r7, #8
   14706:	46bd      	mov	sp, r7
   14708:	bd80      	pop	{r7, pc}
   1470a:	bf00      	nop

0001470c <UART_ConfigStructInit>:
* @param[in]	UART_InitStruct Pointer to a UART_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
   1470c:	b480      	push	{r7}
   1470e:	b083      	sub	sp, #12
   14710:	af00      	add	r7, sp, #0
   14712:	6078      	str	r0, [r7, #4]
	/* UART_InitStruct->Baud_rate = 9600; */
	UART_InitStruct->Baud_rate = 115200;
   14714:	687b      	ldr	r3, [r7, #4]
   14716:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   1471a:	601a      	str	r2, [r3, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
   1471c:	687b      	ldr	r3, [r7, #4]
   1471e:	f04f 0203 	mov.w	r2, #3
   14722:	715a      	strb	r2, [r3, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
   14724:	687b      	ldr	r3, [r7, #4]
   14726:	f04f 0200 	mov.w	r2, #0
   1472a:	711a      	strb	r2, [r3, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	f04f 0200 	mov.w	r2, #0
   14732:	719a      	strb	r2, [r3, #6]
}
   14734:	f107 070c 	add.w	r7, r7, #12
   14738:	46bd      	mov	sp, r7
   1473a:	bc80      	pop	{r7}
   1473c:	4770      	bx	lr
   1473e:	bf00      	nop

00014740 <UART_SendByte>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return 		None
 **********************************************************************/
void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
   14740:	b480      	push	{r7}
   14742:	b083      	sub	sp, #12
   14744:	af00      	add	r7, sp, #0
   14746:	6078      	str	r0, [r7, #4]
   14748:	460b      	mov	r3, r1
   1474a:	70fb      	strb	r3, [r7, #3]
	/*
	CHECK_PARAM(PARAM_UARTx(UARTx));
	 */

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   1474c:	687a      	ldr	r2, [r7, #4]
   1474e:	f04f 0300 	mov.w	r3, #0
   14752:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14756:	429a      	cmp	r2, r3
   14758:	d103      	bne.n	14762 <UART_SendByte+0x22>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
   1475a:	687b      	ldr	r3, [r7, #4]
   1475c:	78fa      	ldrb	r2, [r7, #3]
   1475e:	701a      	strb	r2, [r3, #0]
   14760:	e002      	b.n	14768 <UART_SendByte+0x28>
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	78fa      	ldrb	r2, [r7, #3]
   14766:	701a      	strb	r2, [r3, #0]
	}

}
   14768:	f107 070c 	add.w	r7, r7, #12
   1476c:	46bd      	mov	sp, r7
   1476e:	bc80      	pop	{r7}
   14770:	4770      	bx	lr
   14772:	bf00      	nop

00014774 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
   14774:	b480      	push	{r7}
   14776:	b083      	sub	sp, #12
   14778:	af00      	add	r7, sp, #0
   1477a:	6078      	str	r0, [r7, #4]
	//CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   1477c:	687a      	ldr	r2, [r7, #4]
   1477e:	f04f 0300 	mov.w	r3, #0
   14782:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14786:	429a      	cmp	r2, r3
   14788:	d103      	bne.n	14792 <UART_ReceiveByte+0x1e>
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	781b      	ldrb	r3, [r3, #0]
   1478e:	b2db      	uxtb	r3, r3
   14790:	e002      	b.n	14798 <UART_ReceiveByte+0x24>
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
   14792:	687b      	ldr	r3, [r7, #4]
   14794:	781b      	ldrb	r3, [r3, #0]
   14796:	b2db      	uxtb	r3, r3
	}
}
   14798:	4618      	mov	r0, r3
   1479a:	f107 070c 	add.w	r7, r7, #12
   1479e:	46bd      	mov	sp, r7
   147a0:	bc80      	pop	{r7}
   147a2:	4770      	bx	lr

000147a4 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
   147a4:	b580      	push	{r7, lr}
   147a6:	b08a      	sub	sp, #40	; 0x28
   147a8:	af00      	add	r7, sp, #0
   147aa:	60f8      	str	r0, [r7, #12]
   147ac:	60b9      	str	r1, [r7, #8]
   147ae:	607a      	str	r2, [r7, #4]
   147b0:	70fb      	strb	r3, [r7, #3]
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar = txbuf;
   147b2:	68bb      	ldr	r3, [r7, #8]
   147b4:	617b      	str	r3, [r7, #20]

	bToSend = buflen;
   147b6:	687b      	ldr	r3, [r7, #4]
   147b8:	627b      	str	r3, [r7, #36]	; 0x24

	// blocking mode
	if (flag == BLOCKING) {
   147ba:	78fb      	ldrb	r3, [r7, #3]
   147bc:	2b01      	cmp	r3, #1
   147be:	d13e      	bne.n	1483e <UART_Send+0x9a>
		bSent = 0;
   147c0:	f04f 0300 	mov.w	r3, #0
   147c4:	623b      	str	r3, [r7, #32]
		while (bToSend){
   147c6:	e036      	b.n	14836 <UART_Send+0x92>
			timeOut = UART_BLOCKING_TIMEOUT;
   147c8:	f04f 33ff 	mov.w	r3, #4294967295
   147cc:	61fb      	str	r3, [r7, #28]
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
   147ce:	e006      	b.n	147de <UART_Send+0x3a>
				if (timeOut == 0) break;
   147d0:	69fb      	ldr	r3, [r7, #28]
   147d2:	2b00      	cmp	r3, #0
   147d4:	d00b      	beq.n	147ee <UART_Send+0x4a>
				timeOut--;
   147d6:	69fb      	ldr	r3, [r7, #28]
   147d8:	f103 33ff 	add.w	r3, r3, #4294967295
   147dc:	61fb      	str	r3, [r7, #28]
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
   147de:	68fb      	ldr	r3, [r7, #12]
   147e0:	7d1b      	ldrb	r3, [r3, #20]
   147e2:	b2db      	uxtb	r3, r3
   147e4:	f003 0320 	and.w	r3, r3, #32
   147e8:	2b00      	cmp	r3, #0
   147ea:	d0f1      	beq.n	147d0 <UART_Send+0x2c>
   147ec:	e000      	b.n	147f0 <UART_Send+0x4c>
				if (timeOut == 0) break;
   147ee:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
   147f0:	69fb      	ldr	r3, [r7, #28]
   147f2:	2b00      	cmp	r3, #0
   147f4:	d052      	beq.n	1489c <UART_Send+0xf8>
			fifo_cnt = UART_TX_FIFO_SIZE;
   147f6:	f04f 0310 	mov.w	r3, #16
   147fa:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend){
   147fc:	e015      	b.n	1482a <UART_Send+0x86>
				UART_SendByte(UARTx, (*pChar++));
   147fe:	697b      	ldr	r3, [r7, #20]
   14800:	781b      	ldrb	r3, [r3, #0]
   14802:	697a      	ldr	r2, [r7, #20]
   14804:	f102 0201 	add.w	r2, r2, #1
   14808:	617a      	str	r2, [r7, #20]
   1480a:	68f8      	ldr	r0, [r7, #12]
   1480c:	4619      	mov	r1, r3
   1480e:	f7ff ff97 	bl	14740 <UART_SendByte>
				fifo_cnt--;
   14812:	69bb      	ldr	r3, [r7, #24]
   14814:	f103 33ff 	add.w	r3, r3, #4294967295
   14818:	61bb      	str	r3, [r7, #24]
				bToSend--;
   1481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1481c:	f103 33ff 	add.w	r3, r3, #4294967295
   14820:	627b      	str	r3, [r7, #36]	; 0x24
				bSent++;
   14822:	6a3b      	ldr	r3, [r7, #32]
   14824:	f103 0301 	add.w	r3, r3, #1
   14828:	623b      	str	r3, [r7, #32]
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
   1482a:	69bb      	ldr	r3, [r7, #24]
   1482c:	2b00      	cmp	r3, #0
   1482e:	d002      	beq.n	14836 <UART_Send+0x92>
   14830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14832:	2b00      	cmp	r3, #0
   14834:	d1e3      	bne.n	147fe <UART_Send+0x5a>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
   14836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14838:	2b00      	cmp	r3, #0
   1483a:	d1c5      	bne.n	147c8 <UART_Send+0x24>
   1483c:	e031      	b.n	148a2 <UART_Send+0xfe>
			}
		}
	}
	// None blocking mode
	else {
		bSent = 0;
   1483e:	f04f 0300 	mov.w	r3, #0
   14842:	623b      	str	r3, [r7, #32]
		while (bToSend) {
   14844:	e026      	b.n	14894 <UART_Send+0xf0>
			if (!(UARTx->LSR & UART_LSR_THRE)){
   14846:	68fb      	ldr	r3, [r7, #12]
   14848:	7d1b      	ldrb	r3, [r3, #20]
   1484a:	b2db      	uxtb	r3, r3
   1484c:	f003 0320 	and.w	r3, r3, #32
   14850:	2b00      	cmp	r3, #0
   14852:	d025      	beq.n	148a0 <UART_Send+0xfc>
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
   14854:	f04f 0310 	mov.w	r3, #16
   14858:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend) {
   1485a:	e015      	b.n	14888 <UART_Send+0xe4>
				UART_SendByte(UARTx, (*pChar++));
   1485c:	697b      	ldr	r3, [r7, #20]
   1485e:	781b      	ldrb	r3, [r3, #0]
   14860:	697a      	ldr	r2, [r7, #20]
   14862:	f102 0201 	add.w	r2, r2, #1
   14866:	617a      	str	r2, [r7, #20]
   14868:	68f8      	ldr	r0, [r7, #12]
   1486a:	4619      	mov	r1, r3
   1486c:	f7ff ff68 	bl	14740 <UART_SendByte>
				bToSend--;
   14870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14872:	f103 33ff 	add.w	r3, r3, #4294967295
   14876:	627b      	str	r3, [r7, #36]	; 0x24
				fifo_cnt--;
   14878:	69bb      	ldr	r3, [r7, #24]
   1487a:	f103 33ff 	add.w	r3, r3, #4294967295
   1487e:	61bb      	str	r3, [r7, #24]
				bSent++;
   14880:	6a3b      	ldr	r3, [r7, #32]
   14882:	f103 0301 	add.w	r3, r3, #1
   14886:	623b      	str	r3, [r7, #32]
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
   14888:	69bb      	ldr	r3, [r7, #24]
   1488a:	2b00      	cmp	r3, #0
   1488c:	d002      	beq.n	14894 <UART_Send+0xf0>
   1488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14890:	2b00      	cmp	r3, #0
   14892:	d1e3      	bne.n	1485c <UART_Send+0xb8>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
   14894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14896:	2b00      	cmp	r3, #0
   14898:	d1d5      	bne.n	14846 <UART_Send+0xa2>
   1489a:	e002      	b.n	148a2 <UART_Send+0xfe>
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
   1489c:	bf00      	nop
   1489e:	e000      	b.n	148a2 <UART_Send+0xfe>
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
   148a0:	bf00      	nop
				fifo_cnt--;
				bSent++;
			}
		}
	}
	return bSent;
   148a2:	6a3b      	ldr	r3, [r7, #32]
}
   148a4:	4618      	mov	r0, r3
   148a6:	f107 0728 	add.w	r7, r7, #40	; 0x28
   148aa:	46bd      	mov	sp, r7
   148ac:	bd80      	pop	{r7, pc}
   148ae:	bf00      	nop

000148b0 <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
   148b0:	b580      	push	{r7, lr}
   148b2:	b088      	sub	sp, #32
   148b4:	af00      	add	r7, sp, #0
   148b6:	60f8      	str	r0, [r7, #12]
   148b8:	60b9      	str	r1, [r7, #8]
   148ba:	607a      	str	r2, [r7, #4]
   148bc:	70fb      	strb	r3, [r7, #3]
	uint32_t bToRecv, bRecv, timeOut;
	uint8_t *pChar = rxbuf;
   148be:	68bb      	ldr	r3, [r7, #8]
   148c0:	613b      	str	r3, [r7, #16]

	bToRecv = buflen;
   148c2:	687b      	ldr	r3, [r7, #4]
   148c4:	61fb      	str	r3, [r7, #28]

	// Blocking mode
	if (flag == BLOCKING) {
   148c6:	78fb      	ldrb	r3, [r7, #3]
   148c8:	2b01      	cmp	r3, #1
   148ca:	d131      	bne.n	14930 <UART_Receive+0x80>
		bRecv = 0;
   148cc:	f04f 0300 	mov.w	r3, #0
   148d0:	61bb      	str	r3, [r7, #24]
		while (bToRecv){
   148d2:	e029      	b.n	14928 <UART_Receive+0x78>
			timeOut = UART_BLOCKING_TIMEOUT;
   148d4:	f04f 33ff 	mov.w	r3, #4294967295
   148d8:	617b      	str	r3, [r7, #20]
			while (!(UARTx->LSR & UART_LSR_RDR)){
   148da:	e006      	b.n	148ea <UART_Receive+0x3a>
				if (timeOut == 0) break;
   148dc:	697b      	ldr	r3, [r7, #20]
   148de:	2b00      	cmp	r3, #0
   148e0:	d00b      	beq.n	148fa <UART_Receive+0x4a>
				timeOut--;
   148e2:	697b      	ldr	r3, [r7, #20]
   148e4:	f103 33ff 	add.w	r3, r3, #4294967295
   148e8:	617b      	str	r3, [r7, #20]
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
   148ea:	68fb      	ldr	r3, [r7, #12]
   148ec:	7d1b      	ldrb	r3, [r3, #20]
   148ee:	b2db      	uxtb	r3, r3
   148f0:	f003 0301 	and.w	r3, r3, #1
   148f4:	2b00      	cmp	r3, #0
   148f6:	d0f1      	beq.n	148dc <UART_Receive+0x2c>
   148f8:	e000      	b.n	148fc <UART_Receive+0x4c>
				if (timeOut == 0) break;
   148fa:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
   148fc:	697b      	ldr	r3, [r7, #20]
   148fe:	2b00      	cmp	r3, #0
   14900:	d038      	beq.n	14974 <UART_Receive+0xc4>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveByte(UARTx);
   14902:	68f8      	ldr	r0, [r7, #12]
   14904:	f7ff ff36 	bl	14774 <UART_ReceiveByte>
   14908:	4603      	mov	r3, r0
   1490a:	461a      	mov	r2, r3
   1490c:	693b      	ldr	r3, [r7, #16]
   1490e:	701a      	strb	r2, [r3, #0]
   14910:	693b      	ldr	r3, [r7, #16]
   14912:	f103 0301 	add.w	r3, r3, #1
   14916:	613b      	str	r3, [r7, #16]
			bToRecv--;
   14918:	69fb      	ldr	r3, [r7, #28]
   1491a:	f103 33ff 	add.w	r3, r3, #4294967295
   1491e:	61fb      	str	r3, [r7, #28]
			bRecv++;
   14920:	69bb      	ldr	r3, [r7, #24]
   14922:	f103 0301 	add.w	r3, r3, #1
   14926:	61bb      	str	r3, [r7, #24]
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
   14928:	69fb      	ldr	r3, [r7, #28]
   1492a:	2b00      	cmp	r3, #0
   1492c:	d1d2      	bne.n	148d4 <UART_Receive+0x24>
   1492e:	e024      	b.n	1497a <UART_Receive+0xca>
			bRecv++;
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
   14930:	f04f 0300 	mov.w	r3, #0
   14934:	61bb      	str	r3, [r7, #24]
		while (bToRecv) {
   14936:	e019      	b.n	1496c <UART_Receive+0xbc>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
   14938:	68fb      	ldr	r3, [r7, #12]
   1493a:	7d1b      	ldrb	r3, [r3, #20]
   1493c:	b2db      	uxtb	r3, r3
   1493e:	f003 0301 	and.w	r3, r3, #1
   14942:	2b00      	cmp	r3, #0
   14944:	d018      	beq.n	14978 <UART_Receive+0xc8>
				break;
			} else {
				(*pChar++) = UART_ReceiveByte(UARTx);
   14946:	68f8      	ldr	r0, [r7, #12]
   14948:	f7ff ff14 	bl	14774 <UART_ReceiveByte>
   1494c:	4603      	mov	r3, r0
   1494e:	461a      	mov	r2, r3
   14950:	693b      	ldr	r3, [r7, #16]
   14952:	701a      	strb	r2, [r3, #0]
   14954:	693b      	ldr	r3, [r7, #16]
   14956:	f103 0301 	add.w	r3, r3, #1
   1495a:	613b      	str	r3, [r7, #16]
				bRecv++;
   1495c:	69bb      	ldr	r3, [r7, #24]
   1495e:	f103 0301 	add.w	r3, r3, #1
   14962:	61bb      	str	r3, [r7, #24]
				bToRecv--;
   14964:	69fb      	ldr	r3, [r7, #28]
   14966:	f103 33ff 	add.w	r3, r3, #4294967295
   1496a:	61fb      	str	r3, [r7, #28]
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
   1496c:	69fb      	ldr	r3, [r7, #28]
   1496e:	2b00      	cmp	r3, #0
   14970:	d1e2      	bne.n	14938 <UART_Receive+0x88>
   14972:	e002      	b.n	1497a <UART_Receive+0xca>
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
   14974:	bf00      	nop
   14976:	e000      	b.n	1497a <UART_Receive+0xca>
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
				break;
   14978:	bf00      	nop
				bRecv++;
				bToRecv--;
			}
		}
	}
	return bRecv;
   1497a:	69bb      	ldr	r3, [r7, #24]
}
   1497c:	4618      	mov	r0, r3
   1497e:	f107 0720 	add.w	r7, r7, #32
   14982:	46bd      	mov	sp, r7
   14984:	bd80      	pop	{r7, pc}
   14986:	bf00      	nop

00014988 <UART_ForceBreak>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_ForceBreak(LPC_UART_TypeDef* UARTx)
{
   14988:	b480      	push	{r7}
   1498a:	b083      	sub	sp, #12
   1498c:	af00      	add	r7, sp, #0
   1498e:	6078      	str	r0, [r7, #4]
	//CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14990:	687a      	ldr	r2, [r7, #4]
   14992:	f04f 0300 	mov.w	r3, #0
   14996:	f2c4 0301 	movt	r3, #16385	; 0x4001
   1499a:	429a      	cmp	r2, r3
   1499c:	d108      	bne.n	149b0 <UART_ForceBreak+0x28>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
   1499e:	687b      	ldr	r3, [r7, #4]
   149a0:	7b1b      	ldrb	r3, [r3, #12]
   149a2:	b2db      	uxtb	r3, r3
   149a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   149a8:	b2da      	uxtb	r2, r3
   149aa:	687b      	ldr	r3, [r7, #4]
   149ac:	731a      	strb	r2, [r3, #12]
   149ae:	e007      	b.n	149c0 <UART_ForceBreak+0x38>
	}
	else
	{
		UARTx->LCR |= UART_LCR_BREAK_EN;
   149b0:	687b      	ldr	r3, [r7, #4]
   149b2:	7b1b      	ldrb	r3, [r3, #12]
   149b4:	b2db      	uxtb	r3, r3
   149b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   149ba:	b2da      	uxtb	r2, r3
   149bc:	687b      	ldr	r3, [r7, #4]
   149be:	731a      	strb	r2, [r3, #12]
	}
}
   149c0:	f107 070c 	add.w	r7, r7, #12
   149c4:	46bd      	mov	sp, r7
   149c6:	bc80      	pop	{r7}
   149c8:	4770      	bx	lr
   149ca:	bf00      	nop

000149cc <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
   149cc:	b480      	push	{r7}
   149ce:	b085      	sub	sp, #20
   149d0:	af00      	add	r7, sp, #0
   149d2:	6078      	str	r0, [r7, #4]
   149d4:	4613      	mov	r3, r2
   149d6:	460a      	mov	r2, r1
   149d8:	70fa      	strb	r2, [r7, #3]
   149da:	70bb      	strb	r3, [r7, #2]
	uint32_t tmp;

	//CHECK_PARAM(PARAM_UARTx(UARTx));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
   149dc:	78fb      	ldrb	r3, [r7, #3]
   149de:	2b06      	cmp	r3, #6
   149e0:	d82c      	bhi.n	14a3c <UART_IntConfig+0x70>
   149e2:	a201      	add	r2, pc, #4	; (adr r2, 149e8 <UART_IntConfig+0x1c>)
   149e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   149e8:	00014a05 	.word	0x00014a05
   149ec:	00014a0d 	.word	0x00014a0d
   149f0:	00014a15 	.word	0x00014a15
   149f4:	00014a1d 	.word	0x00014a1d
   149f8:	00014a25 	.word	0x00014a25
   149fc:	00014a2d 	.word	0x00014a2d
   14a00:	00014a35 	.word	0x00014a35
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
   14a04:	f04f 0301 	mov.w	r3, #1
   14a08:	60fb      	str	r3, [r7, #12]
			break;
   14a0a:	e017      	b.n	14a3c <UART_IntConfig+0x70>
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
   14a0c:	f04f 0302 	mov.w	r3, #2
   14a10:	60fb      	str	r3, [r7, #12]
			break;
   14a12:	e013      	b.n	14a3c <UART_IntConfig+0x70>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
   14a14:	f04f 0304 	mov.w	r3, #4
   14a18:	60fb      	str	r3, [r7, #12]
			break;
   14a1a:	e00f      	b.n	14a3c <UART_IntConfig+0x70>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
   14a1c:	f04f 0308 	mov.w	r3, #8
   14a20:	60fb      	str	r3, [r7, #12]
			break;
   14a22:	e00b      	b.n	14a3c <UART_IntConfig+0x70>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
   14a24:	f04f 0380 	mov.w	r3, #128	; 0x80
   14a28:	60fb      	str	r3, [r7, #12]
			break;
   14a2a:	e007      	b.n	14a3c <UART_IntConfig+0x70>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
   14a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   14a30:	60fb      	str	r3, [r7, #12]
			break;
   14a32:	e003      	b.n	14a3c <UART_IntConfig+0x70>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
   14a34:	f44f 7300 	mov.w	r3, #512	; 0x200
   14a38:	60fb      	str	r3, [r7, #12]
			break;
   14a3a:	bf00      	nop
	else
	{
		//CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}
*/
	if (NewState == ENABLE)
   14a3c:	78bb      	ldrb	r3, [r7, #2]
   14a3e:	2b01      	cmp	r3, #1
   14a40:	d114      	bne.n	14a6c <UART_IntConfig+0xa0>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
   14a42:	687a      	ldr	r2, [r7, #4]
   14a44:	f04f 0300 	mov.w	r3, #0
   14a48:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14a4c:	429a      	cmp	r2, r3
   14a4e:	d106      	bne.n	14a5e <UART_IntConfig+0x92>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
   14a50:	687b      	ldr	r3, [r7, #4]
   14a52:	685a      	ldr	r2, [r3, #4]
   14a54:	68fb      	ldr	r3, [r7, #12]
   14a56:	431a      	orrs	r2, r3
   14a58:	687b      	ldr	r3, [r7, #4]
   14a5a:	605a      	str	r2, [r3, #4]
   14a5c:	e024      	b.n	14aa8 <UART_IntConfig+0xdc>
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
   14a5e:	687b      	ldr	r3, [r7, #4]
   14a60:	685a      	ldr	r2, [r3, #4]
   14a62:	68fb      	ldr	r3, [r7, #12]
   14a64:	431a      	orrs	r2, r3
   14a66:	687b      	ldr	r3, [r7, #4]
   14a68:	605a      	str	r2, [r3, #4]
   14a6a:	e01d      	b.n	14aa8 <UART_IntConfig+0xdc>
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
   14a6c:	687a      	ldr	r2, [r7, #4]
   14a6e:	f04f 0300 	mov.w	r3, #0
   14a72:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14a76:	429a      	cmp	r2, r3
   14a78:	d10b      	bne.n	14a92 <UART_IntConfig+0xc6>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
   14a7a:	687b      	ldr	r3, [r7, #4]
   14a7c:	685a      	ldr	r2, [r3, #4]
   14a7e:	68fb      	ldr	r3, [r7, #12]
   14a80:	ea6f 0303 	mvn.w	r3, r3
   14a84:	401a      	ands	r2, r3
   14a86:	f240 338f 	movw	r3, #911	; 0x38f
   14a8a:	4013      	ands	r3, r2
   14a8c:	687a      	ldr	r2, [r7, #4]
   14a8e:	6053      	str	r3, [r2, #4]
   14a90:	e00a      	b.n	14aa8 <UART_IntConfig+0xdc>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
   14a92:	687b      	ldr	r3, [r7, #4]
   14a94:	685a      	ldr	r2, [r3, #4]
   14a96:	68fb      	ldr	r3, [r7, #12]
   14a98:	ea6f 0303 	mvn.w	r3, r3
   14a9c:	401a      	ands	r2, r3
   14a9e:	f240 3307 	movw	r3, #775	; 0x307
   14aa2:	4013      	ands	r3, r2
   14aa4:	687a      	ldr	r2, [r7, #4]
   14aa6:	6053      	str	r3, [r2, #4]
		}
	}
}
   14aa8:	f107 0714 	add.w	r7, r7, #20
   14aac:	46bd      	mov	sp, r7
   14aae:	bc80      	pop	{r7}
   14ab0:	4770      	bx	lr
   14ab2:	bf00      	nop

00014ab4 <UART_GetLineStatus>:
 * 			Line Status register could not be correct. So this function used to
 * 			read Line status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
{
   14ab4:	b480      	push	{r7}
   14ab6:	b083      	sub	sp, #12
   14ab8:	af00      	add	r7, sp, #0
   14aba:	6078      	str	r0, [r7, #4]
	//CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14abc:	687a      	ldr	r2, [r7, #4]
   14abe:	f04f 0300 	mov.w	r3, #0
   14ac2:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14ac6:	429a      	cmp	r2, r3
   14ac8:	d106      	bne.n	14ad8 <UART_GetLineStatus+0x24>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
   14aca:	f04f 0300 	mov.w	r3, #0
   14ace:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14ad2:	7d1b      	ldrb	r3, [r3, #20]
   14ad4:	b2db      	uxtb	r3, r3
   14ad6:	e002      	b.n	14ade <UART_GetLineStatus+0x2a>
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
   14ad8:	687b      	ldr	r3, [r7, #4]
   14ada:	7d1b      	ldrb	r3, [r3, #20]
   14adc:	b2db      	uxtb	r3, r3
	}
}
   14ade:	4618      	mov	r0, r3
   14ae0:	f107 070c 	add.w	r7, r7, #12
   14ae4:	46bd      	mov	sp, r7
   14ae6:	bc80      	pop	{r7}
   14ae8:	4770      	bx	lr
   14aea:	bf00      	nop

00014aec <UART_GetIntId>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
   14aec:	b480      	push	{r7}
   14aee:	b083      	sub	sp, #12
   14af0:	af00      	add	r7, sp, #0
   14af2:	6078      	str	r0, [r7, #4]
	//CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
   14af4:	687b      	ldr	r3, [r7, #4]
   14af6:	689a      	ldr	r2, [r3, #8]
   14af8:	f240 33cf 	movw	r3, #975	; 0x3cf
   14afc:	4013      	ands	r3, r2
}
   14afe:	4618      	mov	r0, r3
   14b00:	f107 070c 	add.w	r7, r7, #12
   14b04:	46bd      	mov	sp, r7
   14b06:	bc80      	pop	{r7}
   14b08:	4770      	bx	lr
   14b0a:	bf00      	nop

00014b0c <UART_CheckBusy>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
   14b0c:	b480      	push	{r7}
   14b0e:	b083      	sub	sp, #12
   14b10:	af00      	add	r7, sp, #0
   14b12:	6078      	str	r0, [r7, #4]
	if (UARTx->LSR & UART_LSR_TEMT){
   14b14:	687b      	ldr	r3, [r7, #4]
   14b16:	7d1b      	ldrb	r3, [r3, #20]
   14b18:	b2db      	uxtb	r3, r3
   14b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b1e:	2b00      	cmp	r3, #0
   14b20:	d002      	beq.n	14b28 <UART_CheckBusy+0x1c>
		return RESET;
   14b22:	f04f 0300 	mov.w	r3, #0
   14b26:	e001      	b.n	14b2c <UART_CheckBusy+0x20>
	} else {
		return SET;
   14b28:	f04f 0301 	mov.w	r3, #1
	}
}
   14b2c:	4618      	mov	r0, r3
   14b2e:	f107 070c 	add.w	r7, r7, #12
   14b32:	46bd      	mov	sp, r7
   14b34:	bc80      	pop	{r7}
   14b36:	4770      	bx	lr

00014b38 <UART_FIFOConfig>:
 * @param[in]	FIFOCfg	Pointer to a UART_FIFO_CFG_Type Structure that
 * 						contains specified information about FIFO configuration
 * @return 		none
 **********************************************************************/
void UART_FIFOConfig(LPC_UART_TypeDef *UARTx, UART_FIFO_CFG_Type *FIFOCfg)
{
   14b38:	b480      	push	{r7}
   14b3a:	b085      	sub	sp, #20
   14b3c:	af00      	add	r7, sp, #0
   14b3e:	6078      	str	r0, [r7, #4]
   14b40:	6039      	str	r1, [r7, #0]
	uint8_t tmp = 0;
   14b42:	f04f 0300 	mov.w	r3, #0
   14b46:	73fb      	strb	r3, [r7, #15]
	//CHECK_PARAM(PARAM_UART_FIFO_LEVEL(FIFOCfg->FIFO_Level));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
   14b48:	7bfb      	ldrb	r3, [r7, #15]
   14b4a:	f043 0301 	orr.w	r3, r3, #1
   14b4e:	73fb      	strb	r3, [r7, #15]
	switch (FIFOCfg->FIFO_Level){
   14b50:	683b      	ldr	r3, [r7, #0]
   14b52:	78db      	ldrb	r3, [r3, #3]
   14b54:	2b01      	cmp	r3, #1
   14b56:	d004      	beq.n	14b62 <UART_FIFOConfig+0x2a>
   14b58:	2b02      	cmp	r3, #2
   14b5a:	d007      	beq.n	14b6c <UART_FIFOConfig+0x34>
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	d00f      	beq.n	14b80 <UART_FIFOConfig+0x48>
   14b60:	e009      	b.n	14b76 <UART_FIFOConfig+0x3e>
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
	case UART_FIFO_TRGLEV1:
		tmp |= UART_FCR_TRG_LEV1;
   14b62:	7bfb      	ldrb	r3, [r7, #15]
   14b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b68:	73fb      	strb	r3, [r7, #15]
		break;
   14b6a:	e00a      	b.n	14b82 <UART_FIFOConfig+0x4a>
	case UART_FIFO_TRGLEV2:
		tmp |= UART_FCR_TRG_LEV2;
   14b6c:	7bfb      	ldrb	r3, [r7, #15]
   14b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14b72:	73fb      	strb	r3, [r7, #15]
		break;
   14b74:	e005      	b.n	14b82 <UART_FIFOConfig+0x4a>
	case UART_FIFO_TRGLEV3:
	default:
		tmp |= UART_FCR_TRG_LEV3;
   14b76:	7bfb      	ldrb	r3, [r7, #15]
   14b78:	f063 033f 	orn	r3, r3, #63	; 0x3f
   14b7c:	73fb      	strb	r3, [r7, #15]
		break;
   14b7e:	e000      	b.n	14b82 <UART_FIFOConfig+0x4a>

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
   14b80:	bf00      	nop
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
   14b82:	683b      	ldr	r3, [r7, #0]
   14b84:	785b      	ldrb	r3, [r3, #1]
   14b86:	2b01      	cmp	r3, #1
   14b88:	d103      	bne.n	14b92 <UART_FIFOConfig+0x5a>
	{
		tmp |= UART_FCR_TX_RS;
   14b8a:	7bfb      	ldrb	r3, [r7, #15]
   14b8c:	f043 0304 	orr.w	r3, r3, #4
   14b90:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
   14b92:	683b      	ldr	r3, [r7, #0]
   14b94:	781b      	ldrb	r3, [r3, #0]
   14b96:	2b01      	cmp	r3, #1
   14b98:	d103      	bne.n	14ba2 <UART_FIFOConfig+0x6a>
	{
		tmp |= UART_FCR_RX_RS;
   14b9a:	7bfb      	ldrb	r3, [r7, #15]
   14b9c:	f043 0302 	orr.w	r3, r3, #2
   14ba0:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
   14ba2:	683b      	ldr	r3, [r7, #0]
   14ba4:	789b      	ldrb	r3, [r3, #2]
   14ba6:	2b01      	cmp	r3, #1
   14ba8:	d103      	bne.n	14bb2 <UART_FIFOConfig+0x7a>
	{
		tmp |= UART_FCR_DMAMODE_SEL;
   14baa:	7bfb      	ldrb	r3, [r7, #15]
   14bac:	f043 0308 	orr.w	r3, r3, #8
   14bb0:	73fb      	strb	r3, [r7, #15]
	}


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14bb2:	687a      	ldr	r2, [r7, #4]
   14bb4:	f04f 0300 	mov.w	r3, #0
   14bb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14bbc:	429a      	cmp	r2, r3
   14bbe:	d106      	bne.n	14bce <UART_FIFOConfig+0x96>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
   14bc0:	7bfb      	ldrb	r3, [r7, #15]
   14bc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   14bc6:	b2da      	uxtb	r2, r3
   14bc8:	687b      	ldr	r3, [r7, #4]
   14bca:	721a      	strb	r2, [r3, #8]
   14bcc:	e005      	b.n	14bda <UART_FIFOConfig+0xa2>
	}
	else
	{
		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
   14bce:	7bfb      	ldrb	r3, [r7, #15]
   14bd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   14bd4:	b2da      	uxtb	r2, r3
   14bd6:	687b      	ldr	r3, [r7, #4]
   14bd8:	721a      	strb	r2, [r3, #8]
	}
}
   14bda:	f107 0714 	add.w	r7, r7, #20
   14bde:	46bd      	mov	sp, r7
   14be0:	bc80      	pop	{r7}
   14be2:	4770      	bx	lr

00014be4 <UART_FIFOConfigStructInit>:
* @param[in]	UART_FIFOInitStruct Pointer to a UART_FIFO_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
   14be4:	b480      	push	{r7}
   14be6:	b083      	sub	sp, #12
   14be8:	af00      	add	r7, sp, #0
   14bea:	6078      	str	r0, [r7, #4]
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
   14bec:	687b      	ldr	r3, [r7, #4]
   14bee:	f04f 0200 	mov.w	r2, #0
   14bf2:	709a      	strb	r2, [r3, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
   14bf4:	687b      	ldr	r3, [r7, #4]
   14bf6:	f04f 0200 	mov.w	r2, #0
   14bfa:	70da      	strb	r2, [r3, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
   14bfc:	687b      	ldr	r3, [r7, #4]
   14bfe:	f04f 0201 	mov.w	r2, #1
   14c02:	701a      	strb	r2, [r3, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
   14c04:	687b      	ldr	r3, [r7, #4]
   14c06:	f04f 0201 	mov.w	r2, #1
   14c0a:	705a      	strb	r2, [r3, #1]
}
   14c0c:	f107 070c 	add.w	r7, r7, #12
   14c10:	46bd      	mov	sp, r7
   14c12:	bc80      	pop	{r7}
   14c14:	4770      	bx	lr
   14c16:	bf00      	nop

00014c18 <UART_ABCmd>:
 * 				completed.
 * @return 		none
 **********************************************************************/
void UART_ABCmd(LPC_UART_TypeDef *UARTx, UART_AB_CFG_Type *ABConfigStruct, \
				FunctionalState NewState)
{
   14c18:	b480      	push	{r7}
   14c1a:	b087      	sub	sp, #28
   14c1c:	af00      	add	r7, sp, #0
   14c1e:	60f8      	str	r0, [r7, #12]
   14c20:	60b9      	str	r1, [r7, #8]
   14c22:	4613      	mov	r3, r2
   14c24:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	//CHECK_PARAM(PARAM_UARTx(UARTx));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
   14c26:	f04f 0300 	mov.w	r3, #0
   14c2a:	617b      	str	r3, [r7, #20]
	if (NewState == ENABLE) {
   14c2c:	79fb      	ldrb	r3, [r7, #7]
   14c2e:	2b01      	cmp	r3, #1
   14c30:	d10f      	bne.n	14c52 <UART_ABCmd+0x3a>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
   14c32:	68bb      	ldr	r3, [r7, #8]
   14c34:	781b      	ldrb	r3, [r3, #0]
   14c36:	2b01      	cmp	r3, #1
   14c38:	d103      	bne.n	14c42 <UART_ABCmd+0x2a>
			tmp |= UART_ACR_MODE;
   14c3a:	697b      	ldr	r3, [r7, #20]
   14c3c:	f043 0302 	orr.w	r3, r3, #2
   14c40:	617b      	str	r3, [r7, #20]
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
   14c42:	68bb      	ldr	r3, [r7, #8]
   14c44:	785b      	ldrb	r3, [r3, #1]
   14c46:	2b01      	cmp	r3, #1
   14c48:	d103      	bne.n	14c52 <UART_ABCmd+0x3a>
			tmp |= UART_ACR_AUTO_RESTART;
   14c4a:	697b      	ldr	r3, [r7, #20]
   14c4c:	f043 0304 	orr.w	r3, r3, #4
   14c50:	617b      	str	r3, [r7, #20]
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14c52:	68fa      	ldr	r2, [r7, #12]
   14c54:	f04f 0300 	mov.w	r3, #0
   14c58:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14c5c:	429a      	cmp	r2, r3
   14c5e:	d129      	bne.n	14cb4 <UART_ABCmd+0x9c>
	{
		if (NewState == ENABLE)
   14c60:	79fb      	ldrb	r3, [r7, #7]
   14c62:	2b01      	cmp	r3, #1
   14c64:	d121      	bne.n	14caa <UART_ABCmd+0x92>
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
   14c66:	68fb      	ldr	r3, [r7, #12]
   14c68:	7b1b      	ldrb	r3, [r3, #12]
   14c6a:	b2db      	uxtb	r3, r3
   14c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14c70:	b2da      	uxtb	r2, r3
   14c72:	68fb      	ldr	r3, [r7, #12]
   14c74:	731a      	strb	r2, [r3, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
   14c76:	68fb      	ldr	r3, [r7, #12]
   14c78:	f04f 0200 	mov.w	r2, #0
   14c7c:	701a      	strb	r2, [r3, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
   14c7e:	68fb      	ldr	r3, [r7, #12]
   14c80:	f04f 0200 	mov.w	r2, #0
   14c84:	711a      	strb	r2, [r3, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
   14c86:	68fb      	ldr	r3, [r7, #12]
   14c88:	7b1b      	ldrb	r3, [r3, #12]
   14c8a:	b2db      	uxtb	r3, r3
   14c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14c90:	b2da      	uxtb	r2, r3
   14c92:	68fb      	ldr	r3, [r7, #12]
   14c94:	731a      	strb	r2, [r3, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
   14c96:	68fb      	ldr	r3, [r7, #12]
   14c98:	f04f 0210 	mov.w	r2, #16
   14c9c:	629a      	str	r2, [r3, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
   14c9e:	697b      	ldr	r3, [r7, #20]
   14ca0:	f043 0201 	orr.w	r2, r3, #1
   14ca4:	68fb      	ldr	r3, [r7, #12]
   14ca6:	621a      	str	r2, [r3, #32]
   14ca8:	e02e      	b.n	14d08 <UART_ABCmd+0xf0>
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
   14caa:	68fb      	ldr	r3, [r7, #12]
   14cac:	f04f 0200 	mov.w	r2, #0
   14cb0:	621a      	str	r2, [r3, #32]
   14cb2:	e029      	b.n	14d08 <UART_ABCmd+0xf0>
		}
	}
	else
	{
		if (NewState == ENABLE)
   14cb4:	79fb      	ldrb	r3, [r7, #7]
   14cb6:	2b01      	cmp	r3, #1
   14cb8:	d122      	bne.n	14d00 <UART_ABCmd+0xe8>
		{
			// Clear DLL and DLM value
			UARTx->LCR |= UART_LCR_DLAB_EN;
   14cba:	68fb      	ldr	r3, [r7, #12]
   14cbc:	7b1b      	ldrb	r3, [r3, #12]
   14cbe:	b2db      	uxtb	r3, r3
   14cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14cc4:	b2da      	uxtb	r2, r3
   14cc6:	68fb      	ldr	r3, [r7, #12]
   14cc8:	731a      	strb	r2, [r3, #12]
			UARTx->DLL = 0;
   14cca:	68fb      	ldr	r3, [r7, #12]
   14ccc:	f04f 0200 	mov.w	r2, #0
   14cd0:	701a      	strb	r2, [r3, #0]
			UARTx->DLM = 0;
   14cd2:	68fb      	ldr	r3, [r7, #12]
   14cd4:	f04f 0200 	mov.w	r2, #0
   14cd8:	711a      	strb	r2, [r3, #4]
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
   14cda:	68fb      	ldr	r3, [r7, #12]
   14cdc:	7b1b      	ldrb	r3, [r3, #12]
   14cde:	b2db      	uxtb	r3, r3
   14ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14ce4:	b2da      	uxtb	r2, r3
   14ce6:	68fb      	ldr	r3, [r7, #12]
   14ce8:	731a      	strb	r2, [r3, #12]
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
   14cea:	68fb      	ldr	r3, [r7, #12]
   14cec:	f04f 0210 	mov.w	r2, #16
   14cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			UARTx->ACR = UART_ACR_START | tmp;
   14cf4:	697b      	ldr	r3, [r7, #20]
   14cf6:	f043 0201 	orr.w	r2, r3, #1
   14cfa:	68fb      	ldr	r3, [r7, #12]
   14cfc:	621a      	str	r2, [r3, #32]
   14cfe:	e003      	b.n	14d08 <UART_ABCmd+0xf0>
		}
		else
		{
			UARTx->ACR = 0;
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	f04f 0200 	mov.w	r2, #0
   14d06:	621a      	str	r2, [r3, #32]
		}
	}
}
   14d08:	f107 071c 	add.w	r7, r7, #28
   14d0c:	46bd      	mov	sp, r7
   14d0e:	bc80      	pop	{r7}
   14d10:	4770      	bx	lr
   14d12:	bf00      	nop

00014d14 <UART_ABClearIntPending>:
 * 				- UART_AUTOBAUD_INTSTAT_ABEO: End of Auto-baud interrupt
 * 				- UART_AUTOBAUD_INTSTAT_ABTO: Auto-baud time out interrupt
 * @return 		none
 **********************************************************************/
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
   14d14:	b480      	push	{r7}
   14d16:	b083      	sub	sp, #12
   14d18:	af00      	add	r7, sp, #0
   14d1a:	6078      	str	r0, [r7, #4]
   14d1c:	460b      	mov	r3, r1
   14d1e:	807b      	strh	r3, [r7, #2]
	//CHECK_PARAM(PARAM_UARTx(UARTx));
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14d20:	687a      	ldr	r2, [r7, #4]
   14d22:	f04f 0300 	mov.w	r3, #0
   14d26:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14d2a:	429a      	cmp	r2, r3
   14d2c:	d106      	bne.n	14d3c <UART_ABClearIntPending+0x28>
	{
		UARTx->ACR |= ABIntType;
   14d2e:	687b      	ldr	r3, [r7, #4]
   14d30:	6a1a      	ldr	r2, [r3, #32]
   14d32:	887b      	ldrh	r3, [r7, #2]
   14d34:	431a      	orrs	r2, r3
   14d36:	687b      	ldr	r3, [r7, #4]
   14d38:	621a      	str	r2, [r3, #32]
   14d3a:	e005      	b.n	14d48 <UART_ABClearIntPending+0x34>
	}
	else
		UARTx->ACR |= ABIntType;
   14d3c:	687b      	ldr	r3, [r7, #4]
   14d3e:	6a1a      	ldr	r2, [r3, #32]
   14d40:	887b      	ldrh	r3, [r7, #2]
   14d42:	431a      	orrs	r2, r3
   14d44:	687b      	ldr	r3, [r7, #4]
   14d46:	621a      	str	r2, [r3, #32]
}
   14d48:	f107 070c 	add.w	r7, r7, #12
   14d4c:	46bd      	mov	sp, r7
   14d4e:	bc80      	pop	{r7}
   14d50:	4770      	bx	lr
   14d52:	bf00      	nop

00014d54 <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
   14d54:	b480      	push	{r7}
   14d56:	b083      	sub	sp, #12
   14d58:	af00      	add	r7, sp, #0
   14d5a:	6078      	str	r0, [r7, #4]
   14d5c:	460b      	mov	r3, r1
   14d5e:	70fb      	strb	r3, [r7, #3]
	//CHECK_PARAM(PARAM_UARTx(UARTx));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
   14d60:	78fb      	ldrb	r3, [r7, #3]
   14d62:	2b01      	cmp	r3, #1
   14d64:	d11c      	bne.n	14da0 <UART_TxCmd+0x4c>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14d66:	687a      	ldr	r2, [r7, #4]
   14d68:	f04f 0300 	mov.w	r3, #0
   14d6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14d70:	429a      	cmp	r2, r3
   14d72:	d10a      	bne.n	14d8a <UART_TxCmd+0x36>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
   14d74:	687b      	ldr	r3, [r7, #4]
   14d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14d7a:	b2db      	uxtb	r3, r3
   14d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14d80:	b2da      	uxtb	r2, r3
   14d82:	687b      	ldr	r3, [r7, #4]
   14d84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   14d88:	e022      	b.n	14dd0 <UART_TxCmd+0x7c>
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
   14d8a:	687b      	ldr	r3, [r7, #4]
   14d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14d90:	b2db      	uxtb	r3, r3
   14d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14d96:	b2da      	uxtb	r2, r3
   14d98:	687b      	ldr	r3, [r7, #4]
   14d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   14d9e:	e017      	b.n	14dd0 <UART_TxCmd+0x7c>
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
   14da0:	687a      	ldr	r2, [r7, #4]
   14da2:	f04f 0300 	mov.w	r3, #0
   14da6:	f2c4 0301 	movt	r3, #16385	; 0x4001
   14daa:	429a      	cmp	r2, r3
   14dac:	d108      	bne.n	14dc0 <UART_TxCmd+0x6c>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
   14dae:	687b      	ldr	r3, [r7, #4]
   14db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14db4:	687b      	ldr	r3, [r7, #4]
   14db6:	f04f 0200 	mov.w	r2, #0
   14dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   14dbe:	e007      	b.n	14dd0 <UART_TxCmd+0x7c>
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14dc6:	687b      	ldr	r3, [r7, #4]
   14dc8:	f04f 0200 	mov.w	r2, #0
   14dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
   14dd0:	f107 070c 	add.w	r7, r7, #12
   14dd4:	46bd      	mov	sp, r7
   14dd6:	bc80      	pop	{r7}
   14dd8:	4770      	bx	lr
   14dda:	bf00      	nop

00014ddc <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
   14ddc:	b480      	push	{r7}
   14dde:	b085      	sub	sp, #20
   14de0:	af00      	add	r7, sp, #0
   14de2:	6078      	str	r0, [r7, #4]
   14de4:	4613      	mov	r3, r2
   14de6:	460a      	mov	r2, r1
   14de8:	70fa      	strb	r2, [r7, #3]
   14dea:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = 0;
   14dec:	f04f 0300 	mov.w	r3, #0
   14df0:	73fb      	strb	r3, [r7, #15]

	//CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	//CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
	//CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));

	switch (Pin){
   14df2:	78fb      	ldrb	r3, [r7, #3]
   14df4:	2b00      	cmp	r3, #0
   14df6:	d002      	beq.n	14dfe <UART_FullModemForcePinState+0x22>
   14df8:	2b01      	cmp	r3, #1
   14dfa:	d004      	beq.n	14e06 <UART_FullModemForcePinState+0x2a>
   14dfc:	e007      	b.n	14e0e <UART_FullModemForcePinState+0x32>
	case UART1_MODEM_PIN_DTR:
		tmp = UART1_MCR_DTR_CTRL;
   14dfe:	f04f 0301 	mov.w	r3, #1
   14e02:	73fb      	strb	r3, [r7, #15]
		break;
   14e04:	e004      	b.n	14e10 <UART_FullModemForcePinState+0x34>
	case UART1_MODEM_PIN_RTS:
		tmp = UART1_MCR_RTS_CTRL;
   14e06:	f04f 0302 	mov.w	r3, #2
   14e0a:	73fb      	strb	r3, [r7, #15]
		break;
   14e0c:	e000      	b.n	14e10 <UART_FullModemForcePinState+0x34>
	default:
		break;
   14e0e:	bf00      	nop
	}

	if (NewState == ACTIVE){
   14e10:	78bb      	ldrb	r3, [r7, #2]
   14e12:	2b01      	cmp	r3, #1
   14e14:	d108      	bne.n	14e28 <UART_FullModemForcePinState+0x4c>
		UARTx->MCR |= tmp;
   14e16:	687b      	ldr	r3, [r7, #4]
   14e18:	7c1b      	ldrb	r3, [r3, #16]
   14e1a:	b2da      	uxtb	r2, r3
   14e1c:	7bfb      	ldrb	r3, [r7, #15]
   14e1e:	4313      	orrs	r3, r2
   14e20:	b2da      	uxtb	r2, r3
   14e22:	687b      	ldr	r3, [r7, #4]
   14e24:	741a      	strb	r2, [r3, #16]
   14e26:	e00f      	b.n	14e48 <UART_FullModemForcePinState+0x6c>
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
   14e28:	687b      	ldr	r3, [r7, #4]
   14e2a:	7c1b      	ldrb	r3, [r3, #16]
   14e2c:	b2db      	uxtb	r3, r3
   14e2e:	b2da      	uxtb	r2, r3
   14e30:	7bfb      	ldrb	r3, [r7, #15]
   14e32:	ea6f 0303 	mvn.w	r3, r3
   14e36:	b2db      	uxtb	r3, r3
   14e38:	f023 030c 	bic.w	r3, r3, #12
   14e3c:	b2db      	uxtb	r3, r3
   14e3e:	4013      	ands	r3, r2
   14e40:	b2db      	uxtb	r3, r3
   14e42:	b2da      	uxtb	r2, r3
   14e44:	687b      	ldr	r3, [r7, #4]
   14e46:	741a      	strb	r2, [r3, #16]
	}
}
   14e48:	f107 0714 	add.w	r7, r7, #20
   14e4c:	46bd      	mov	sp, r7
   14e4e:	bc80      	pop	{r7}
   14e50:	4770      	bx	lr
   14e52:	bf00      	nop

00014e54 <UART_FullModemConfigMode>:
				- DISABLE: Disable this mode.
 * @return none
 **********************************************************************/
void UART_FullModemConfigMode(LPC_UART1_TypeDef *UARTx, UART_MODEM_MODE_Type Mode, \
							FunctionalState NewState)
{
   14e54:	b480      	push	{r7}
   14e56:	b085      	sub	sp, #20
   14e58:	af00      	add	r7, sp, #0
   14e5a:	6078      	str	r0, [r7, #4]
   14e5c:	4613      	mov	r3, r2
   14e5e:	460a      	mov	r2, r1
   14e60:	70fa      	strb	r2, [r7, #3]
   14e62:	70bb      	strb	r3, [r7, #2]

	//CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	//CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
   14e64:	78fb      	ldrb	r3, [r7, #3]
   14e66:	2b01      	cmp	r3, #1
   14e68:	d007      	beq.n	14e7a <UART_FullModemConfigMode+0x26>
   14e6a:	2b02      	cmp	r3, #2
   14e6c:	d009      	beq.n	14e82 <UART_FullModemConfigMode+0x2e>
   14e6e:	2b00      	cmp	r3, #0
   14e70:	d10b      	bne.n	14e8a <UART_FullModemConfigMode+0x36>
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
   14e72:	f04f 0310 	mov.w	r3, #16
   14e76:	73fb      	strb	r3, [r7, #15]
		break;
   14e78:	e008      	b.n	14e8c <UART_FullModemConfigMode+0x38>
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
   14e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e7e:	73fb      	strb	r3, [r7, #15]
		break;
   14e80:	e004      	b.n	14e8c <UART_FullModemConfigMode+0x38>
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
   14e82:	f04f 0380 	mov.w	r3, #128	; 0x80
   14e86:	73fb      	strb	r3, [r7, #15]
		break;
   14e88:	e000      	b.n	14e8c <UART_FullModemConfigMode+0x38>
	default:
		break;
   14e8a:	bf00      	nop
	}

	if (NewState == ENABLE)
   14e8c:	78bb      	ldrb	r3, [r7, #2]
   14e8e:	2b01      	cmp	r3, #1
   14e90:	d108      	bne.n	14ea4 <UART_FullModemConfigMode+0x50>
	{
		UARTx->MCR |= tmp;
   14e92:	687b      	ldr	r3, [r7, #4]
   14e94:	7c1b      	ldrb	r3, [r3, #16]
   14e96:	b2da      	uxtb	r2, r3
   14e98:	7bfb      	ldrb	r3, [r7, #15]
   14e9a:	4313      	orrs	r3, r2
   14e9c:	b2da      	uxtb	r2, r3
   14e9e:	687b      	ldr	r3, [r7, #4]
   14ea0:	741a      	strb	r2, [r3, #16]
   14ea2:	e00f      	b.n	14ec4 <UART_FullModemConfigMode+0x70>
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
   14ea4:	687b      	ldr	r3, [r7, #4]
   14ea6:	7c1b      	ldrb	r3, [r3, #16]
   14ea8:	b2db      	uxtb	r3, r3
   14eaa:	b2da      	uxtb	r2, r3
   14eac:	7bfb      	ldrb	r3, [r7, #15]
   14eae:	ea6f 0303 	mvn.w	r3, r3
   14eb2:	b2db      	uxtb	r3, r3
   14eb4:	f023 030c 	bic.w	r3, r3, #12
   14eb8:	b2db      	uxtb	r3, r3
   14eba:	4013      	ands	r3, r2
   14ebc:	b2db      	uxtb	r3, r3
   14ebe:	b2da      	uxtb	r2, r3
   14ec0:	687b      	ldr	r3, [r7, #4]
   14ec2:	741a      	strb	r2, [r3, #16]
	}
}
   14ec4:	f107 0714 	add.w	r7, r7, #20
   14ec8:	46bd      	mov	sp, r7
   14eca:	bc80      	pop	{r7}
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop

00014ed0 <UART_FullModemGetStatus>:
 * 			modem register could not be correct. So this function used to
 * 			read modem status register in one time only, then the return value
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
   14ed0:	b480      	push	{r7}
   14ed2:	b083      	sub	sp, #12
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
	//CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
   14ed8:	687b      	ldr	r3, [r7, #4]
   14eda:	7e1b      	ldrb	r3, [r3, #24]
   14edc:	b2db      	uxtb	r3, r3
}
   14ede:	4618      	mov	r0, r3
   14ee0:	f107 070c 	add.w	r7, r7, #12
   14ee4:	46bd      	mov	sp, r7
   14ee6:	bc80      	pop	{r7}
   14ee8:	4770      	bx	lr
   14eea:	bf00      	nop

00014eec <UART_RS485Config>:
*                    that contains the configuration information for specified UART
*                    in RS485 mode.
 * @return		None
 **********************************************************************/
void UART_RS485Config(LPC_UART1_TypeDef *UARTx, UART1_RS485_CTRLCFG_Type *RS485ConfigStruct)
{
   14eec:	b480      	push	{r7}
   14eee:	b085      	sub	sp, #20
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	6078      	str	r0, [r7, #4]
   14ef4:	6039      	str	r1, [r7, #0]
	//CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
	//CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
   14ef6:	f04f 0300 	mov.w	r3, #0
   14efa:	60fb      	str	r3, [r7, #12]
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
   14efc:	683b      	ldr	r3, [r7, #0]
   14efe:	78db      	ldrb	r3, [r3, #3]
   14f00:	2b01      	cmp	r3, #1
   14f02:	d118      	bne.n	14f36 <UART_RS485Config+0x4a>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
   14f04:	68fb      	ldr	r3, [r7, #12]
   14f06:	f043 0310 	orr.w	r3, r3, #16
   14f0a:	60fb      	str	r3, [r7, #12]

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
   14f0c:	683b      	ldr	r3, [r7, #0]
   14f0e:	795b      	ldrb	r3, [r3, #5]
   14f10:	2b01      	cmp	r3, #1
   14f12:	d103      	bne.n	14f1c <UART_RS485Config+0x30>
		{
			tmp |= UART1_RS485CTRL_OINV_1;
   14f14:	68fb      	ldr	r3, [r7, #12]
   14f16:	f043 0320 	orr.w	r3, r3, #32
   14f1a:	60fb      	str	r3, [r7, #12]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
   14f1c:	683b      	ldr	r3, [r7, #0]
   14f1e:	791b      	ldrb	r3, [r3, #4]
   14f20:	2b01      	cmp	r3, #1
   14f22:	d103      	bne.n	14f2c <UART_RS485Config+0x40>
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
   14f24:	68fb      	ldr	r3, [r7, #12]
   14f26:	f043 0308 	orr.w	r3, r3, #8
   14f2a:	60fb      	str	r3, [r7, #12]
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
   14f2c:	683b      	ldr	r3, [r7, #0]
   14f2e:	79da      	ldrb	r2, [r3, #7]
   14f30:	687b      	ldr	r3, [r7, #4]
   14f32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
   14f36:	683b      	ldr	r3, [r7, #0]
   14f38:	781b      	ldrb	r3, [r3, #0]
   14f3a:	2b01      	cmp	r3, #1
   14f3c:	d103      	bne.n	14f46 <UART_RS485Config+0x5a>
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
   14f3e:	68fb      	ldr	r3, [r7, #12]
   14f40:	f043 0301 	orr.w	r3, r3, #1
   14f44:	60fb      	str	r3, [r7, #12]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
   14f46:	683b      	ldr	r3, [r7, #0]
   14f48:	789b      	ldrb	r3, [r3, #2]
   14f4a:	2b01      	cmp	r3, #1
   14f4c:	d108      	bne.n	14f60 <UART_RS485Config+0x74>
	{
		tmp |= UART1_RS485CTRL_AADEN;
   14f4e:	68fb      	ldr	r3, [r7, #12]
   14f50:	f043 0304 	orr.w	r3, r3, #4
   14f54:	60fb      	str	r3, [r7, #12]
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
   14f56:	683b      	ldr	r3, [r7, #0]
   14f58:	799a      	ldrb	r2, [r3, #6]
   14f5a:	687b      	ldr	r3, [r7, #4]
   14f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
   14f60:	683b      	ldr	r3, [r7, #0]
   14f62:	785b      	ldrb	r3, [r3, #1]
   14f64:	2b00      	cmp	r3, #0
   14f66:	d103      	bne.n	14f70 <UART_RS485Config+0x84>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
   14f68:	68fb      	ldr	r3, [r7, #12]
   14f6a:	f043 0302 	orr.w	r3, r3, #2
   14f6e:	60fb      	str	r3, [r7, #12]
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
   14f70:	68fb      	ldr	r3, [r7, #12]
   14f72:	b2db      	uxtb	r3, r3
   14f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14f78:	b2da      	uxtb	r2, r3
   14f7a:	687b      	ldr	r3, [r7, #4]
   14f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
   14f80:	687b      	ldr	r3, [r7, #4]
   14f82:	7b1b      	ldrb	r3, [r3, #12]
   14f84:	b2db      	uxtb	r3, r3
   14f86:	f043 0338 	orr.w	r3, r3, #56	; 0x38
   14f8a:	b2da      	uxtb	r2, r3
   14f8c:	687b      	ldr	r3, [r7, #4]
   14f8e:	731a      	strb	r2, [r3, #12]
}
   14f90:	f107 0714 	add.w	r7, r7, #20
   14f94:	46bd      	mov	sp, r7
   14f96:	bc80      	pop	{r7}
   14f98:	4770      	bx	lr
   14f9a:	bf00      	nop

00014f9c <UART_RS485ReceiverCmd>:
 * 							- ENABLE: Enable this function.
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
   14f9c:	b480      	push	{r7}
   14f9e:	b083      	sub	sp, #12
   14fa0:	af00      	add	r7, sp, #0
   14fa2:	6078      	str	r0, [r7, #4]
   14fa4:	460b      	mov	r3, r1
   14fa6:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE){
   14fa8:	78fb      	ldrb	r3, [r7, #3]
   14faa:	2b01      	cmp	r3, #1
   14fac:	d10a      	bne.n	14fc4 <UART_RS485ReceiverCmd+0x28>
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
   14fae:	687b      	ldr	r3, [r7, #4]
   14fb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   14fb4:	b2db      	uxtb	r3, r3
   14fb6:	f023 0302 	bic.w	r3, r3, #2
   14fba:	b2da      	uxtb	r2, r3
   14fbc:	687b      	ldr	r3, [r7, #4]
   14fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   14fc2:	e009      	b.n	14fd8 <UART_RS485ReceiverCmd+0x3c>
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
   14fc4:	687b      	ldr	r3, [r7, #4]
   14fc6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   14fca:	b2db      	uxtb	r3, r3
   14fcc:	f043 0302 	orr.w	r3, r3, #2
   14fd0:	b2da      	uxtb	r2, r3
   14fd2:	687b      	ldr	r3, [r7, #4]
   14fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
}
   14fd8:	f107 070c 	add.w	r7, r7, #12
   14fdc:	46bd      	mov	sp, r7
   14fde:	bc80      	pop	{r7}
   14fe0:	4770      	bx	lr
   14fe2:	bf00      	nop

00014fe4 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
   14fe4:	b580      	push	{r7, lr}
   14fe6:	b086      	sub	sp, #24
   14fe8:	af00      	add	r7, sp, #0
   14fea:	60f8      	str	r0, [r7, #12]
   14fec:	60b9      	str	r1, [r7, #8]
   14fee:	607a      	str	r2, [r7, #4]
   14ff0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
   14ff2:	78fb      	ldrb	r3, [r7, #3]
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d01f      	beq.n	15038 <UART_RS485Send+0x54>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
   14ff8:	68fb      	ldr	r3, [r7, #12]
   14ffa:	7b1b      	ldrb	r3, [r3, #12]
   14ffc:	74fb      	strb	r3, [r7, #19]
   14ffe:	7cfb      	ldrb	r3, [r7, #19]
   15000:	74bb      	strb	r3, [r7, #18]
		tmp &= ~(UART_LCR_PARITY_EVEN);
   15002:	7cfb      	ldrb	r3, [r7, #19]
   15004:	f023 0310 	bic.w	r3, r3, #16
   15008:	74fb      	strb	r3, [r7, #19]
		UARTx->LCR = tmp;
   1500a:	68fb      	ldr	r3, [r7, #12]
   1500c:	7cfa      	ldrb	r2, [r7, #19]
   1500e:	731a      	strb	r2, [r3, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
   15010:	68f8      	ldr	r0, [r7, #12]
   15012:	68b9      	ldr	r1, [r7, #8]
   15014:	687a      	ldr	r2, [r7, #4]
   15016:	f04f 0301 	mov.w	r3, #1
   1501a:	f7ff fbc3 	bl	147a4 <UART_Send>
   1501e:	6178      	str	r0, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
   15020:	bf00      	nop
   15022:	68fb      	ldr	r3, [r7, #12]
   15024:	7d1b      	ldrb	r3, [r3, #20]
   15026:	b2db      	uxtb	r3, r3
   15028:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1502c:	2b00      	cmp	r3, #0
   1502e:	d0f8      	beq.n	15022 <UART_RS485Send+0x3e>
		UARTx->LCR = save;
   15030:	68fb      	ldr	r3, [r7, #12]
   15032:	7cba      	ldrb	r2, [r7, #18]
   15034:	731a      	strb	r2, [r3, #12]
   15036:	e00f      	b.n	15058 <UART_RS485Send+0x74>
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
   15038:	68f8      	ldr	r0, [r7, #12]
   1503a:	68b9      	ldr	r1, [r7, #8]
   1503c:	687a      	ldr	r2, [r7, #4]
   1503e:	f04f 0301 	mov.w	r3, #1
   15042:	f7ff fbaf 	bl	147a4 <UART_Send>
   15046:	6178      	str	r0, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
   15048:	bf00      	nop
   1504a:	68fb      	ldr	r3, [r7, #12]
   1504c:	7d1b      	ldrb	r3, [r3, #20]
   1504e:	b2db      	uxtb	r3, r3
   15050:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15054:	2b00      	cmp	r3, #0
   15056:	d0f8      	beq.n	1504a <UART_RS485Send+0x66>
	}
	return cnt;
   15058:	697b      	ldr	r3, [r7, #20]
}
   1505a:	4618      	mov	r0, r3
   1505c:	f107 0718 	add.w	r7, r7, #24
   15060:	46bd      	mov	sp, r7
   15062:	bd80      	pop	{r7, pc}

00015064 <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
   15064:	b580      	push	{r7, lr}
   15066:	b082      	sub	sp, #8
   15068:	af00      	add	r7, sp, #0
   1506a:	6078      	str	r0, [r7, #4]
   1506c:	460b      	mov	r3, r1
   1506e:	70fb      	strb	r3, [r7, #3]
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
   15070:	6878      	ldr	r0, [r7, #4]
   15072:	f107 0303 	add.w	r3, r7, #3
   15076:	4619      	mov	r1, r3
   15078:	f04f 0201 	mov.w	r2, #1
   1507c:	f04f 0301 	mov.w	r3, #1
   15080:	f7ff ffb0 	bl	14fe4 <UART_RS485Send>
}
   15084:	f107 0708 	add.w	r7, r7, #8
   15088:	46bd      	mov	sp, r7
   1508a:	bd80      	pop	{r7, pc}

0001508c <UART_RS485SendData>:
 * @param[in]	pData Pointer to data to be sent.
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
   1508c:	b580      	push	{r7, lr}
   1508e:	b084      	sub	sp, #16
   15090:	af00      	add	r7, sp, #0
   15092:	60f8      	str	r0, [r7, #12]
   15094:	60b9      	str	r1, [r7, #8]
   15096:	607a      	str	r2, [r7, #4]
	return (UART_RS485Send(UARTx, pData, size, 0));
   15098:	68f8      	ldr	r0, [r7, #12]
   1509a:	68b9      	ldr	r1, [r7, #8]
   1509c:	687a      	ldr	r2, [r7, #4]
   1509e:	f04f 0300 	mov.w	r3, #0
   150a2:	f7ff ff9f 	bl	14fe4 <UART_RS485Send>
   150a6:	4603      	mov	r3, r0
}
   150a8:	4618      	mov	r0, r3
   150aa:	f107 0710 	add.w	r7, r7, #16
   150ae:	46bd      	mov	sp, r7
   150b0:	bd80      	pop	{r7, pc}
   150b2:	bf00      	nop

000150b4 <setSSPclock>:
 * 						- LPC_SSP1: SSP1 peripheral
 * @param[in]	target_clock : clock of SSP (Hz)
 * @return 		None
 ***********************************************************************/
static void setSSPclock (LPC_SSP_TypeDef *SSPx, uint32_t target_clock)
{
   150b4:	b580      	push	{r7, lr}
   150b6:	b086      	sub	sp, #24
   150b8:	af00      	add	r7, sp, #0
   150ba:	6078      	str	r0, [r7, #4]
   150bc:	6039      	str	r1, [r7, #0]
    uint32_t prescale, cr0_div, cmp_clk, ssp_clk;


    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
   150be:	687a      	ldr	r2, [r7, #4]
   150c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   150c4:	f2c4 0308 	movt	r3, #16392	; 0x4008
   150c8:	429a      	cmp	r2, r3
   150ca:	d105      	bne.n	150d8 <setSSPclock+0x24>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
   150cc:	f04f 002a 	mov.w	r0, #42	; 0x2a
   150d0:	f7fc fbe0 	bl	11894 <CLKPWR_GetPCLK>
   150d4:	60b8      	str	r0, [r7, #8]
   150d6:	e00b      	b.n	150f0 <setSSPclock+0x3c>
    } else if (SSPx == LPC_SSP1) {
   150d8:	687a      	ldr	r2, [r7, #4]
   150da:	f04f 0300 	mov.w	r3, #0
   150de:	f2c4 0303 	movt	r3, #16387	; 0x4003
   150e2:	429a      	cmp	r2, r3
   150e4:	d144      	bne.n	15170 <setSSPclock+0xbc>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP1);
   150e6:	f04f 0014 	mov.w	r0, #20
   150ea:	f7fc fbd3 	bl	11894 <CLKPWR_GetPCLK>
   150ee:	60b8      	str	r0, [r7, #8]
    }

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
   150f0:	f04f 0300 	mov.w	r3, #0
   150f4:	613b      	str	r3, [r7, #16]
	cmp_clk = 0xFFFFFFFF;
   150f6:	f04f 33ff 	mov.w	r3, #4294967295
   150fa:	60fb      	str	r3, [r7, #12]
	prescale = 2;
   150fc:	f04f 0302 	mov.w	r3, #2
   15100:	617b      	str	r3, [r7, #20]
	while (cmp_clk > target_clock)
   15102:	e01b      	b.n	1513c <setSSPclock+0x88>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
   15104:	693b      	ldr	r3, [r7, #16]
   15106:	f103 0301 	add.w	r3, r3, #1
   1510a:	697a      	ldr	r2, [r7, #20]
   1510c:	fb02 f303 	mul.w	r3, r2, r3
   15110:	68ba      	ldr	r2, [r7, #8]
   15112:	fbb2 f3f3 	udiv	r3, r2, r3
   15116:	60fb      	str	r3, [r7, #12]
		if (cmp_clk > target_clock)
   15118:	68fa      	ldr	r2, [r7, #12]
   1511a:	683b      	ldr	r3, [r7, #0]
   1511c:	429a      	cmp	r2, r3
   1511e:	d90d      	bls.n	1513c <setSSPclock+0x88>
		{
			cr0_div++;
   15120:	693b      	ldr	r3, [r7, #16]
   15122:	f103 0301 	add.w	r3, r3, #1
   15126:	613b      	str	r3, [r7, #16]
			if (cr0_div > 0xFF)
   15128:	693b      	ldr	r3, [r7, #16]
   1512a:	2bff      	cmp	r3, #255	; 0xff
   1512c:	d906      	bls.n	1513c <setSSPclock+0x88>
			{
				cr0_div = 0;
   1512e:	f04f 0300 	mov.w	r3, #0
   15132:	613b      	str	r3, [r7, #16]
				prescale += 2;
   15134:	697b      	ldr	r3, [r7, #20]
   15136:	f103 0302 	add.w	r3, r3, #2
   1513a:	617b      	str	r3, [r7, #20]
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
	while (cmp_clk > target_clock)
   1513c:	68fa      	ldr	r2, [r7, #12]
   1513e:	683b      	ldr	r3, [r7, #0]
   15140:	429a      	cmp	r2, r3
   15142:	d8df      	bhi.n	15104 <setSSPclock+0x50>
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	681b      	ldr	r3, [r3, #0]
   15148:	b2da      	uxtb	r2, r3
   1514a:	687b      	ldr	r3, [r7, #4]
   1514c:	601a      	str	r2, [r3, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
   1514e:	687b      	ldr	r3, [r7, #4]
   15150:	681a      	ldr	r2, [r3, #0]
   15152:	693b      	ldr	r3, [r7, #16]
   15154:	ea4f 2303 	mov.w	r3, r3, lsl #8
   15158:	ea4f 4303 	mov.w	r3, r3, lsl #16
   1515c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   15160:	431a      	orrs	r2, r3
   15162:	687b      	ldr	r3, [r7, #4]
   15164:	601a      	str	r2, [r3, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
   15166:	697b      	ldr	r3, [r7, #20]
   15168:	b2da      	uxtb	r2, r3
   1516a:	687b      	ldr	r3, [r7, #4]
   1516c:	611a      	str	r2, [r3, #16]
   1516e:	e000      	b.n	15172 <setSSPclock+0xbe>
    if (SSPx == LPC_SSP0){
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
    } else if (SSPx == LPC_SSP1) {
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP1);
    } else {
    	return;
   15170:	bf00      	nop

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
}
   15172:	f107 0718 	add.w	r7, r7, #24
   15176:	46bd      	mov	sp, r7
   15178:	bd80      	pop	{r7, pc}
   1517a:	bf00      	nop

0001517c <SSP_Init>:
*                    that contains the configuration information for the
*                    specified SSP peripheral.
 * @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
   1517c:	b580      	push	{r7, lr}
   1517e:	b084      	sub	sp, #16
   15180:	af00      	add	r7, sp, #0
   15182:	6078      	str	r0, [r7, #4]
   15184:	6039      	str	r1, [r7, #0]
	uint32_t tmp;


	if(SSPx == LPC_SSP0) {
   15186:	687a      	ldr	r2, [r7, #4]
   15188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1518c:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15190:	429a      	cmp	r2, r3
   15192:	d106      	bne.n	151a2 <SSP_Init+0x26>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
   15194:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   15198:	f04f 0101 	mov.w	r1, #1
   1519c:	f7fc fbb2 	bl	11904 <CLKPWR_ConfigPPWR>
   151a0:	e00c      	b.n	151bc <SSP_Init+0x40>
	} else if(SSPx == LPC_SSP1) {
   151a2:	687a      	ldr	r2, [r7, #4]
   151a4:	f04f 0300 	mov.w	r3, #0
   151a8:	f2c4 0303 	movt	r3, #16387	; 0x4003
   151ac:	429a      	cmp	r2, r3
   151ae:	d127      	bne.n	15200 <SSP_Init+0x84>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, ENABLE);
   151b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   151b4:	f04f 0101 	mov.w	r1, #1
   151b8:	f7fc fba4 	bl	11904 <CLKPWR_ConfigPPWR>
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
   151bc:	683b      	ldr	r3, [r7, #0]
   151be:	685a      	ldr	r2, [r3, #4]
   151c0:	683b      	ldr	r3, [r7, #0]
   151c2:	689b      	ldr	r3, [r3, #8]
   151c4:	431a      	orrs	r2, r3
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
   151c6:	683b      	ldr	r3, [r7, #0]
   151c8:	691b      	ldr	r3, [r3, #16]
   151ca:	431a      	orrs	r2, r3
   151cc:	683b      	ldr	r3, [r7, #0]
   151ce:	681b      	ldr	r3, [r3, #0]
   151d0:	4313      	orrs	r3, r2
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
   151d2:	ea4f 4303 	mov.w	r3, r3, lsl #16
   151d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   151da:	60fb      	str	r3, [r7, #12]
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;
   151dc:	687b      	ldr	r3, [r7, #4]
   151de:	68fa      	ldr	r2, [r7, #12]
   151e0:	601a      	str	r2, [r3, #0]

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
   151e2:	683b      	ldr	r3, [r7, #0]
   151e4:	68db      	ldr	r3, [r3, #12]
   151e6:	f003 030f 	and.w	r3, r3, #15
   151ea:	60fb      	str	r3, [r7, #12]
	// Write back to CR1
	SSPx->CR1 = tmp;
   151ec:	687b      	ldr	r3, [r7, #4]
   151ee:	68fa      	ldr	r2, [r7, #12]
   151f0:	605a      	str	r2, [r3, #4]

	// Set clock rate for SSP peripheral
	setSSPclock(SSPx, SSP_ConfigStruct->ClockRate);
   151f2:	683b      	ldr	r3, [r7, #0]
   151f4:	695b      	ldr	r3, [r3, #20]
   151f6:	6878      	ldr	r0, [r7, #4]
   151f8:	4619      	mov	r1, r3
   151fa:	f7ff ff5b 	bl	150b4 <setSSPclock>
   151fe:	e000      	b.n	15202 <SSP_Init+0x86>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
	} else if(SSPx == LPC_SSP1) {
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, ENABLE);
	} else {
		return;
   15200:	bf00      	nop
	// Write back to CR1
	SSPx->CR1 = tmp;

	// Set clock rate for SSP peripheral
	setSSPclock(SSPx, SSP_ConfigStruct->ClockRate);
}
   15202:	f107 0710 	add.w	r7, r7, #16
   15206:	46bd      	mov	sp, r7
   15208:	bd80      	pop	{r7, pc}
   1520a:	bf00      	nop

0001520c <SSP_DeInit>:
 * 				 		- LPC_SSP0: SSP0 peripheral
 * 						- LPC_SSP1: SSP1 peripheral
 * @return 		None
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
   1520c:	b580      	push	{r7, lr}
   1520e:	b082      	sub	sp, #8
   15210:	af00      	add	r7, sp, #0
   15212:	6078      	str	r0, [r7, #4]
	////CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
   15214:	687a      	ldr	r2, [r7, #4]
   15216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1521a:	f2c4 0308 	movt	r3, #16392	; 0x4008
   1521e:	429a      	cmp	r2, r3
   15220:	d106      	bne.n	15230 <SSP_DeInit+0x24>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
   15222:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   15226:	f04f 0100 	mov.w	r1, #0
   1522a:	f7fc fb6b 	bl	11904 <CLKPWR_ConfigPPWR>
   1522e:	e00c      	b.n	1524a <SSP_DeInit+0x3e>
	} else if (SSPx == LPC_SSP1) {
   15230:	687a      	ldr	r2, [r7, #4]
   15232:	f04f 0300 	mov.w	r3, #0
   15236:	f2c4 0303 	movt	r3, #16387	; 0x4003
   1523a:	429a      	cmp	r2, r3
   1523c:	d105      	bne.n	1524a <SSP_DeInit+0x3e>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, DISABLE);
   1523e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   15242:	f04f 0100 	mov.w	r1, #0
   15246:	f7fc fb5d 	bl	11904 <CLKPWR_ConfigPPWR>
	}
}
   1524a:	f107 0708 	add.w	r7, r7, #8
   1524e:	46bd      	mov	sp, r7
   15250:	bd80      	pop	{r7, pc}
   15252:	bf00      	nop

00015254 <SSP_GetDataSize>:
*				- SSP_DATABIT_5: 5 bit transfer
*				...
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
   15254:	b480      	push	{r7}
   15256:	b083      	sub	sp, #12
   15258:	af00      	add	r7, sp, #0
   1525a:	6078      	str	r0, [r7, #4]
	return (SSPx->CR0 & (0xF));
   1525c:	687b      	ldr	r3, [r7, #4]
   1525e:	681b      	ldr	r3, [r3, #0]
   15260:	b2db      	uxtb	r3, r3
   15262:	f003 030f 	and.w	r3, r3, #15
   15266:	b2db      	uxtb	r3, r3
}
   15268:	4618      	mov	r0, r3
   1526a:	f107 070c 	add.w	r7, r7, #12
   1526e:	46bd      	mov	sp, r7
   15270:	bc80      	pop	{r7}
   15272:	4770      	bx	lr

00015274 <SSP_ConfigStructInit>:
* @param[in]	SSP_InitStruct Pointer to a SSP_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
   15274:	b480      	push	{r7}
   15276:	b083      	sub	sp, #12
   15278:	af00      	add	r7, sp, #0
   1527a:	6078      	str	r0, [r7, #4]
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
   1527c:	687b      	ldr	r3, [r7, #4]
   1527e:	f04f 0200 	mov.w	r2, #0
   15282:	605a      	str	r2, [r3, #4]
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
   15284:	687b      	ldr	r3, [r7, #4]
   15286:	f04f 0200 	mov.w	r2, #0
   1528a:	609a      	str	r2, [r3, #8]
	SSP_InitStruct->ClockRate = 1000000;
   1528c:	687a      	ldr	r2, [r7, #4]
   1528e:	f244 2340 	movw	r3, #16960	; 0x4240
   15292:	f2c0 030f 	movt	r3, #15
   15296:	6153      	str	r3, [r2, #20]
	SSP_InitStruct->Databit = SSP_DATABIT_8;
   15298:	687b      	ldr	r3, [r7, #4]
   1529a:	f04f 0207 	mov.w	r2, #7
   1529e:	601a      	str	r2, [r3, #0]
	SSP_InitStruct->Mode = SSP_MASTER_MODE;
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	f04f 0200 	mov.w	r2, #0
   152a6:	60da      	str	r2, [r3, #12]
	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
   152a8:	687b      	ldr	r3, [r7, #4]
   152aa:	f04f 0200 	mov.w	r2, #0
   152ae:	611a      	str	r2, [r3, #16]
}
   152b0:	f107 070c 	add.w	r7, r7, #12
   152b4:	46bd      	mov	sp, r7
   152b6:	bc80      	pop	{r7}
   152b8:	4770      	bx	lr
   152ba:	bf00      	nop

000152bc <SSP_Cmd>:
 * 				- LPC_SSP1: SSP1 peripheral
 * @param[in]	NewState New State of SSPx peripheral's operation
 * @return 		none
 **********************************************************************/
void SSP_Cmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
   152bc:	b480      	push	{r7}
   152be:	b083      	sub	sp, #12
   152c0:	af00      	add	r7, sp, #0
   152c2:	6078      	str	r0, [r7, #4]
   152c4:	460b      	mov	r3, r1
   152c6:	70fb      	strb	r3, [r7, #3]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
   152c8:	78fb      	ldrb	r3, [r7, #3]
   152ca:	2b01      	cmp	r3, #1
   152cc:	d106      	bne.n	152dc <SSP_Cmd+0x20>
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
   152ce:	687b      	ldr	r3, [r7, #4]
   152d0:	685b      	ldr	r3, [r3, #4]
   152d2:	f043 0202 	orr.w	r2, r3, #2
   152d6:	687b      	ldr	r3, [r7, #4]
   152d8:	605a      	str	r2, [r3, #4]
   152da:	e005      	b.n	152e8 <SSP_Cmd+0x2c>
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
   152dc:	687b      	ldr	r3, [r7, #4]
   152de:	685b      	ldr	r3, [r3, #4]
   152e0:	f003 020d 	and.w	r2, r3, #13
   152e4:	687b      	ldr	r3, [r7, #4]
   152e6:	605a      	str	r2, [r3, #4]
	}
}
   152e8:	f107 070c 	add.w	r7, r7, #12
   152ec:	46bd      	mov	sp, r7
   152ee:	bc80      	pop	{r7}
   152f0:	4770      	bx	lr
   152f2:	bf00      	nop

000152f4 <SSP_LoopBackCmd>:
 * 							- ENABLE: Enable this function
 * 							- DISABLE: Disable this function
 * @return 		None
 **********************************************************************/
void SSP_LoopBackCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
   152f4:	b480      	push	{r7}
   152f6:	b083      	sub	sp, #12
   152f8:	af00      	add	r7, sp, #0
   152fa:	6078      	str	r0, [r7, #4]
   152fc:	460b      	mov	r3, r1
   152fe:	70fb      	strb	r3, [r7, #3]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
   15300:	78fb      	ldrb	r3, [r7, #3]
   15302:	2b01      	cmp	r3, #1
   15304:	d106      	bne.n	15314 <SSP_LoopBackCmd+0x20>
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
   15306:	687b      	ldr	r3, [r7, #4]
   15308:	685b      	ldr	r3, [r3, #4]
   1530a:	f043 0201 	orr.w	r2, r3, #1
   1530e:	687b      	ldr	r3, [r7, #4]
   15310:	605a      	str	r2, [r3, #4]
   15312:	e005      	b.n	15320 <SSP_LoopBackCmd+0x2c>
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
   15314:	687b      	ldr	r3, [r7, #4]
   15316:	685b      	ldr	r3, [r3, #4]
   15318:	f003 020e 	and.w	r2, r3, #14
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	605a      	str	r2, [r3, #4]
	}
}
   15320:	f107 070c 	add.w	r7, r7, #12
   15324:	46bd      	mov	sp, r7
   15326:	bc80      	pop	{r7}
   15328:	4770      	bx	lr
   1532a:	bf00      	nop

0001532c <SSP_SlaveOutputCmd>:
 * 							line (MISO)
 * Note: 		This function is available when SSP peripheral in Slave mode
 * @return 		None
 **********************************************************************/
void SSP_SlaveOutputCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
   1532c:	b480      	push	{r7}
   1532e:	b083      	sub	sp, #12
   15330:	af00      	add	r7, sp, #0
   15332:	6078      	str	r0, [r7, #4]
   15334:	460b      	mov	r3, r1
   15336:	70fb      	strb	r3, [r7, #3]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
   15338:	78fb      	ldrb	r3, [r7, #3]
   1533a:	2b01      	cmp	r3, #1
   1533c:	d106      	bne.n	1534c <SSP_SlaveOutputCmd+0x20>
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
   1533e:	687b      	ldr	r3, [r7, #4]
   15340:	685b      	ldr	r3, [r3, #4]
   15342:	f003 0207 	and.w	r2, r3, #7
   15346:	687b      	ldr	r3, [r7, #4]
   15348:	605a      	str	r2, [r3, #4]
   1534a:	e005      	b.n	15358 <SSP_SlaveOutputCmd+0x2c>
	}
	else
	{
		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
   1534c:	687b      	ldr	r3, [r7, #4]
   1534e:	685b      	ldr	r3, [r3, #4]
   15350:	f043 0208 	orr.w	r2, r3, #8
   15354:	687b      	ldr	r3, [r7, #4]
   15356:	605a      	str	r2, [r3, #4]
	}
}
   15358:	f107 070c 	add.w	r7, r7, #12
   1535c:	46bd      	mov	sp, r7
   1535e:	bc80      	pop	{r7}
   15360:	4770      	bx	lr
   15362:	bf00      	nop

00015364 <SSP_SendData>:
 * @param[in]	Data	Data to transmit (must be 16 or 8-bit long,
 * 						this depend on SSP data bit number configured)
 * @return 		none
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
   15364:	b480      	push	{r7}
   15366:	b083      	sub	sp, #12
   15368:	af00      	add	r7, sp, #0
   1536a:	6078      	str	r0, [r7, #4]
   1536c:	460b      	mov	r3, r1
   1536e:	807b      	strh	r3, [r7, #2]

	SSPx->DR = SSP_DR_BITMASK(Data);
   15370:	887a      	ldrh	r2, [r7, #2]
   15372:	687b      	ldr	r3, [r7, #4]
   15374:	609a      	str	r2, [r3, #8]
}
   15376:	f107 070c 	add.w	r7, r7, #12
   1537a:	46bd      	mov	sp, r7
   1537c:	bc80      	pop	{r7}
   1537e:	4770      	bx	lr

00015380 <SSP_ReceiveData>:
 * 						- LPC_SSP0: SSP0 peripheral
 * 						- LPC_SSP1: SSP1 peripheral
 * @return 		Data received (16-bit long)
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
   15380:	b480      	push	{r7}
   15382:	b083      	sub	sp, #12
   15384:	af00      	add	r7, sp, #0
   15386:	6078      	str	r0, [r7, #4]

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
   15388:	687b      	ldr	r3, [r7, #4]
   1538a:	689b      	ldr	r3, [r3, #8]
   1538c:	b29b      	uxth	r3, r3
}
   1538e:	4618      	mov	r0, r3
   15390:	f107 070c 	add.w	r7, r7, #12
   15394:	46bd      	mov	sp, r7
   15396:	bc80      	pop	{r7}
   15398:	4770      	bx	lr
   1539a:	bf00      	nop

0001539c <SSP_ReadWrite>:
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SSP_ReadWrite (LPC_SSP_TypeDef *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
						SSP_TRANSFER_Type xfType)
{
   1539c:	b580      	push	{r7, lr}
   1539e:	b08c      	sub	sp, #48	; 0x30
   153a0:	af00      	add	r7, sp, #0
   153a2:	60f8      	str	r0, [r7, #12]
   153a4:	60b9      	str	r1, [r7, #8]
   153a6:	4613      	mov	r3, r2
   153a8:	71fb      	strb	r3, [r7, #7]
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
   153aa:	68bb      	ldr	r3, [r7, #8]
   153ac:	f04f 0200 	mov.w	r2, #0
   153b0:	60da      	str	r2, [r3, #12]
    dataCfg->tx_cnt = 0;
   153b2:	68bb      	ldr	r3, [r7, #8]
   153b4:	f04f 0200 	mov.w	r2, #0
   153b8:	605a      	str	r2, [r3, #4]
    dataCfg->status = 0;
   153ba:	68bb      	ldr	r3, [r7, #8]
   153bc:	f04f 0200 	mov.w	r2, #0
   153c0:	615a      	str	r2, [r3, #20]


	/* Clear all remaining data in RX FIFO */
	while (SSPx->SR & SSP_SR_RNE){
   153c2:	e004      	b.n	153ce <SSP_ReadWrite+0x32>
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
   153c4:	68f8      	ldr	r0, [r7, #12]
   153c6:	f7ff ffdb 	bl	15380 <SSP_ReceiveData>
   153ca:	4603      	mov	r3, r0
   153cc:	61bb      	str	r3, [r7, #24]
    dataCfg->tx_cnt = 0;
    dataCfg->status = 0;


	/* Clear all remaining data in RX FIFO */
	while (SSPx->SR & SSP_SR_RNE){
   153ce:	68fb      	ldr	r3, [r7, #12]
   153d0:	68db      	ldr	r3, [r3, #12]
   153d2:	f003 0304 	and.w	r3, r3, #4
   153d6:	2b00      	cmp	r3, #0
   153d8:	d1f4      	bne.n	153c4 <SSP_ReadWrite+0x28>
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
   153da:	68fb      	ldr	r3, [r7, #12]
   153dc:	f04f 0203 	mov.w	r2, #3
   153e0:	621a      	str	r2, [r3, #32]
	if(SSP_GetDataSize(SSPx)>8)
   153e2:	68f8      	ldr	r0, [r7, #12]
   153e4:	f7ff ff36 	bl	15254 <SSP_GetDataSize>
   153e8:	4603      	mov	r3, r0
   153ea:	2b08      	cmp	r3, #8
   153ec:	d903      	bls.n	153f6 <SSP_ReadWrite+0x5a>
		dataword = 1;
   153ee:	f04f 0301 	mov.w	r3, #1
   153f2:	61fb      	str	r3, [r7, #28]
   153f4:	e002      	b.n	153fc <SSP_ReadWrite+0x60>
	else dataword = 0;
   153f6:	f04f 0300 	mov.w	r3, #0
   153fa:	61fb      	str	r3, [r7, #28]

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
   153fc:	79fb      	ldrb	r3, [r7, #7]
   153fe:	2b00      	cmp	r3, #0
   15400:	f040 80d3 	bne.w	155aa <SSP_ReadWrite+0x20e>
		if (dataword == 0){
   15404:	69fb      	ldr	r3, [r7, #28]
   15406:	2b00      	cmp	r3, #0
   15408:	d106      	bne.n	15418 <SSP_ReadWrite+0x7c>
			rdata8 = (uint8_t *)dataCfg->rx_data;
   1540a:	68bb      	ldr	r3, [r7, #8]
   1540c:	689b      	ldr	r3, [r3, #8]
   1540e:	62fb      	str	r3, [r7, #44]	; 0x2c
			wdata8 = (uint8_t *)dataCfg->tx_data;
   15410:	68bb      	ldr	r3, [r7, #8]
   15412:	681b      	ldr	r3, [r3, #0]
   15414:	62bb      	str	r3, [r7, #40]	; 0x28
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
   15416:	e0a5      	b.n	15564 <SSP_ReadWrite+0x1c8>
	if (xfType == SSP_TRANSFER_POLLING){
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
   15418:	68bb      	ldr	r3, [r7, #8]
   1541a:	689b      	ldr	r3, [r3, #8]
   1541c:	627b      	str	r3, [r7, #36]	; 0x24
			wdata16 = (uint16_t *)dataCfg->tx_data;
   1541e:	68bb      	ldr	r3, [r7, #8]
   15420:	681b      	ldr	r3, [r3, #0]
   15422:	623b      	str	r3, [r7, #32]
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
   15424:	e09e      	b.n	15564 <SSP_ReadWrite+0x1c8>
			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
   15426:	68fb      	ldr	r3, [r7, #12]
   15428:	68db      	ldr	r3, [r3, #12]
   1542a:	f003 0302 	and.w	r3, r3, #2
   1542e:	2b00      	cmp	r3, #0
   15430:	d048      	beq.n	154c4 <SSP_ReadWrite+0x128>
   15432:	68bb      	ldr	r3, [r7, #8]
   15434:	685a      	ldr	r2, [r3, #4]
   15436:	68bb      	ldr	r3, [r7, #8]
   15438:	691b      	ldr	r3, [r3, #16]
   1543a:	429a      	cmp	r2, r3
   1543c:	d042      	beq.n	154c4 <SSP_ReadWrite+0x128>
				// Write data to buffer
				if(dataCfg->tx_data == NULL){
   1543e:	68bb      	ldr	r3, [r7, #8]
   15440:	681b      	ldr	r3, [r3, #0]
   15442:	2b00      	cmp	r3, #0
   15444:	d11a      	bne.n	1547c <SSP_ReadWrite+0xe0>
					if (dataword == 0){
   15446:	69fb      	ldr	r3, [r7, #28]
   15448:	2b00      	cmp	r3, #0
   1544a:	d10b      	bne.n	15464 <SSP_ReadWrite+0xc8>
						SSP_SendData(SSPx, 0xFF);
   1544c:	68f8      	ldr	r0, [r7, #12]
   1544e:	f04f 01ff 	mov.w	r1, #255	; 0xff
   15452:	f7ff ff87 	bl	15364 <SSP_SendData>
						dataCfg->tx_cnt++;
   15456:	68bb      	ldr	r3, [r7, #8]
   15458:	685b      	ldr	r3, [r3, #4]
   1545a:	f103 0201 	add.w	r2, r3, #1
   1545e:	68bb      	ldr	r3, [r7, #8]
   15460:	605a      	str	r2, [r3, #4]
   15462:	e02f      	b.n	154c4 <SSP_ReadWrite+0x128>
					} else {
						SSP_SendData(SSPx, 0xFFFF);
   15464:	68f8      	ldr	r0, [r7, #12]
   15466:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1546a:	f7ff ff7b 	bl	15364 <SSP_SendData>
						dataCfg->tx_cnt += 2;
   1546e:	68bb      	ldr	r3, [r7, #8]
   15470:	685b      	ldr	r3, [r3, #4]
   15472:	f103 0202 	add.w	r2, r3, #2
   15476:	68bb      	ldr	r3, [r7, #8]
   15478:	605a      	str	r2, [r3, #4]
   1547a:	e023      	b.n	154c4 <SSP_ReadWrite+0x128>
					}
				} else {
					if (dataword == 0){
   1547c:	69fb      	ldr	r3, [r7, #28]
   1547e:	2b00      	cmp	r3, #0
   15480:	d110      	bne.n	154a4 <SSP_ReadWrite+0x108>
						SSP_SendData(SSPx, *wdata8);
   15482:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15484:	781b      	ldrb	r3, [r3, #0]
   15486:	68f8      	ldr	r0, [r7, #12]
   15488:	4619      	mov	r1, r3
   1548a:	f7ff ff6b 	bl	15364 <SSP_SendData>
						wdata8++;
   1548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15490:	f103 0301 	add.w	r3, r3, #1
   15494:	62bb      	str	r3, [r7, #40]	; 0x28
						dataCfg->tx_cnt++;
   15496:	68bb      	ldr	r3, [r7, #8]
   15498:	685b      	ldr	r3, [r3, #4]
   1549a:	f103 0201 	add.w	r2, r3, #1
   1549e:	68bb      	ldr	r3, [r7, #8]
   154a0:	605a      	str	r2, [r3, #4]
   154a2:	e00f      	b.n	154c4 <SSP_ReadWrite+0x128>
					} else {
						SSP_SendData(SSPx, *wdata16);
   154a4:	6a3b      	ldr	r3, [r7, #32]
   154a6:	881b      	ldrh	r3, [r3, #0]
   154a8:	68f8      	ldr	r0, [r7, #12]
   154aa:	4619      	mov	r1, r3
   154ac:	f7ff ff5a 	bl	15364 <SSP_SendData>
						wdata16++;
   154b0:	6a3b      	ldr	r3, [r7, #32]
   154b2:	f103 0302 	add.w	r3, r3, #2
   154b6:	623b      	str	r3, [r7, #32]
						dataCfg->tx_cnt += 2;
   154b8:	68bb      	ldr	r3, [r7, #8]
   154ba:	685b      	ldr	r3, [r3, #4]
   154bc:	f103 0202 	add.w	r2, r3, #2
   154c0:	68bb      	ldr	r3, [r7, #8]
   154c2:	605a      	str	r2, [r3, #4]
					}
				}
			}

			// Check overrun error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
   154c4:	68fb      	ldr	r3, [r7, #12]
   154c6:	699b      	ldr	r3, [r3, #24]
   154c8:	617b      	str	r3, [r7, #20]
   154ca:	697b      	ldr	r3, [r7, #20]
   154cc:	f003 0301 	and.w	r3, r3, #1
   154d0:	b2db      	uxtb	r3, r3
   154d2:	2b00      	cmp	r3, #0
   154d4:	d035      	beq.n	15542 <SSP_ReadWrite+0x1a6>
				// save status and return
				dataCfg->status = stat | SSP_STAT_ERROR;
   154d6:	697b      	ldr	r3, [r7, #20]
   154d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   154dc:	68bb      	ldr	r3, [r7, #8]
   154de:	615a      	str	r2, [r3, #20]
				return (-1);
   154e0:	f04f 33ff 	mov.w	r3, #4294967295
   154e4:	e120      	b.n	15728 <SSP_ReadWrite+0x38c>
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);
   154e6:	68f8      	ldr	r0, [r7, #12]
   154e8:	f7ff ff4a 	bl	15380 <SSP_ReceiveData>
   154ec:	4603      	mov	r3, r0
   154ee:	61bb      	str	r3, [r7, #24]

				// Store data to destination
				if (dataCfg->rx_data != NULL)
   154f0:	68bb      	ldr	r3, [r7, #8]
   154f2:	689b      	ldr	r3, [r3, #8]
   154f4:	2b00      	cmp	r3, #0
   154f6:	d013      	beq.n	15520 <SSP_ReadWrite+0x184>
				{
					if (dataword == 0){
   154f8:	69fb      	ldr	r3, [r7, #28]
   154fa:	2b00      	cmp	r3, #0
   154fc:	d108      	bne.n	15510 <SSP_ReadWrite+0x174>
						*(rdata8) = (uint8_t) tmp;
   154fe:	69bb      	ldr	r3, [r7, #24]
   15500:	b2da      	uxtb	r2, r3
   15502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15504:	701a      	strb	r2, [r3, #0]
						rdata8++;
   15506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15508:	f103 0301 	add.w	r3, r3, #1
   1550c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1550e:	e007      	b.n	15520 <SSP_ReadWrite+0x184>
					} else {
						*(rdata16) = (uint16_t) tmp;
   15510:	69bb      	ldr	r3, [r7, #24]
   15512:	b29a      	uxth	r2, r3
   15514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15516:	801a      	strh	r2, [r3, #0]
						rdata16++;
   15518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1551a:	f103 0302 	add.w	r3, r3, #2
   1551e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				}
				// Increase counter
				if (dataword == 0){
   15520:	69fb      	ldr	r3, [r7, #28]
   15522:	2b00      	cmp	r3, #0
   15524:	d106      	bne.n	15534 <SSP_ReadWrite+0x198>
					dataCfg->rx_cnt++;
   15526:	68bb      	ldr	r3, [r7, #8]
   15528:	68db      	ldr	r3, [r3, #12]
   1552a:	f103 0201 	add.w	r2, r3, #1
   1552e:	68bb      	ldr	r3, [r7, #8]
   15530:	60da      	str	r2, [r3, #12]
   15532:	e007      	b.n	15544 <SSP_ReadWrite+0x1a8>
				} else {
					dataCfg->rx_cnt += 2;
   15534:	68bb      	ldr	r3, [r7, #8]
   15536:	68db      	ldr	r3, [r3, #12]
   15538:	f103 0202 	add.w	r2, r3, #2
   1553c:	68bb      	ldr	r3, [r7, #8]
   1553e:	60da      	str	r2, [r3, #12]
   15540:	e000      	b.n	15544 <SSP_ReadWrite+0x1a8>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
   15542:	bf00      	nop
   15544:	68fb      	ldr	r3, [r7, #12]
   15546:	68db      	ldr	r3, [r3, #12]
   15548:	f003 0304 	and.w	r3, r3, #4
   1554c:	2b00      	cmp	r3, #0
   1554e:	d005      	beq.n	1555c <SSP_ReadWrite+0x1c0>
   15550:	68bb      	ldr	r3, [r7, #8]
   15552:	68da      	ldr	r2, [r3, #12]
   15554:	68bb      	ldr	r3, [r7, #8]
   15556:	691b      	ldr	r3, [r3, #16]
   15558:	429a      	cmp	r2, r3
   1555a:	d1c4      	bne.n	154e6 <SSP_ReadWrite+0x14a>
					dataCfg->rx_cnt++;
				} else {
					dataCfg->rx_cnt += 2;
				}
			}
			dataCfg->rx_cnt = dataCfg->length;
   1555c:	68bb      	ldr	r3, [r7, #8]
   1555e:	691a      	ldr	r2, [r3, #16]
   15560:	68bb      	ldr	r3, [r7, #8]
   15562:	60da      	str	r2, [r3, #12]
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
   15564:	68bb      	ldr	r3, [r7, #8]
   15566:	685a      	ldr	r2, [r3, #4]
   15568:	68bb      	ldr	r3, [r7, #8]
   1556a:	691b      	ldr	r3, [r3, #16]
   1556c:	429a      	cmp	r2, r3
   1556e:	f47f af5a 	bne.w	15426 <SSP_ReadWrite+0x8a>
   15572:	68bb      	ldr	r3, [r7, #8]
   15574:	68da      	ldr	r2, [r3, #12]
   15576:	68bb      	ldr	r3, [r7, #8]
   15578:	691b      	ldr	r3, [r3, #16]
   1557a:	429a      	cmp	r2, r3
   1557c:	f47f af53 	bne.w	15426 <SSP_ReadWrite+0x8a>
			}
			dataCfg->rx_cnt = dataCfg->length;
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;
   15580:	68bb      	ldr	r3, [r7, #8]
   15582:	f44f 7280 	mov.w	r2, #256	; 0x100
   15586:	615a      	str	r2, [r3, #20]

		if (dataCfg->tx_data != NULL){
   15588:	68bb      	ldr	r3, [r7, #8]
   1558a:	681b      	ldr	r3, [r3, #0]
   1558c:	2b00      	cmp	r3, #0
   1558e:	d002      	beq.n	15596 <SSP_ReadWrite+0x1fa>
			return dataCfg->tx_cnt;
   15590:	68bb      	ldr	r3, [r7, #8]
   15592:	685b      	ldr	r3, [r3, #4]
   15594:	e0c8      	b.n	15728 <SSP_ReadWrite+0x38c>
		} else if (dataCfg->rx_data != NULL){
   15596:	68bb      	ldr	r3, [r7, #8]
   15598:	689b      	ldr	r3, [r3, #8]
   1559a:	2b00      	cmp	r3, #0
   1559c:	d002      	beq.n	155a4 <SSP_ReadWrite+0x208>
			return dataCfg->rx_cnt;
   1559e:	68bb      	ldr	r3, [r7, #8]
   155a0:	68db      	ldr	r3, [r3, #12]
   155a2:	e0c1      	b.n	15728 <SSP_ReadWrite+0x38c>
		} else {
			return (0);
   155a4:	f04f 0300 	mov.w	r3, #0
   155a8:	e0be      	b.n	15728 <SSP_ReadWrite+0x38c>
		}
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){
   155aa:	79fb      	ldrb	r3, [r7, #7]
   155ac:	2b01      	cmp	r3, #1
   155ae:	f040 80b9 	bne.w	15724 <SSP_ReadWrite+0x388>

		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
   155b2:	e092      	b.n	156da <SSP_ReadWrite+0x33e>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
   155b4:	68bb      	ldr	r3, [r7, #8]
   155b6:	681b      	ldr	r3, [r3, #0]
   155b8:	2b00      	cmp	r3, #0
   155ba:	d11a      	bne.n	155f2 <SSP_ReadWrite+0x256>
				if (dataword == 0){
   155bc:	69fb      	ldr	r3, [r7, #28]
   155be:	2b00      	cmp	r3, #0
   155c0:	d10b      	bne.n	155da <SSP_ReadWrite+0x23e>
					SSP_SendData(SSPx, 0xFF);
   155c2:	68f8      	ldr	r0, [r7, #12]
   155c4:	f04f 01ff 	mov.w	r1, #255	; 0xff
   155c8:	f7ff fecc 	bl	15364 <SSP_SendData>
					dataCfg->tx_cnt++;
   155cc:	68bb      	ldr	r3, [r7, #8]
   155ce:	685b      	ldr	r3, [r3, #4]
   155d0:	f103 0201 	add.w	r2, r3, #1
   155d4:	68bb      	ldr	r3, [r7, #8]
   155d6:	605a      	str	r2, [r3, #4]
   155d8:	e031      	b.n	1563e <SSP_ReadWrite+0x2a2>
				} else {
					SSP_SendData(SSPx, 0xFFFF);
   155da:	68f8      	ldr	r0, [r7, #12]
   155dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   155e0:	f7ff fec0 	bl	15364 <SSP_SendData>
					dataCfg->tx_cnt += 2;
   155e4:	68bb      	ldr	r3, [r7, #8]
   155e6:	685b      	ldr	r3, [r3, #4]
   155e8:	f103 0202 	add.w	r2, r3, #2
   155ec:	68bb      	ldr	r3, [r7, #8]
   155ee:	605a      	str	r2, [r3, #4]
   155f0:	e025      	b.n	1563e <SSP_ReadWrite+0x2a2>
				}
			} else {
				if (dataword == 0){
   155f2:	69fb      	ldr	r3, [r7, #28]
   155f4:	2b00      	cmp	r3, #0
   155f6:	d111      	bne.n	1561c <SSP_ReadWrite+0x280>
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
   155f8:	68bb      	ldr	r3, [r7, #8]
   155fa:	681b      	ldr	r3, [r3, #0]
   155fc:	461a      	mov	r2, r3
   155fe:	68bb      	ldr	r3, [r7, #8]
   15600:	685b      	ldr	r3, [r3, #4]
   15602:	18d3      	adds	r3, r2, r3
   15604:	781b      	ldrb	r3, [r3, #0]
   15606:	68f8      	ldr	r0, [r7, #12]
   15608:	4619      	mov	r1, r3
   1560a:	f7ff feab 	bl	15364 <SSP_SendData>
					dataCfg->tx_cnt++;
   1560e:	68bb      	ldr	r3, [r7, #8]
   15610:	685b      	ldr	r3, [r3, #4]
   15612:	f103 0201 	add.w	r2, r3, #1
   15616:	68bb      	ldr	r3, [r7, #8]
   15618:	605a      	str	r2, [r3, #4]
   1561a:	e010      	b.n	1563e <SSP_ReadWrite+0x2a2>
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
   1561c:	68bb      	ldr	r3, [r7, #8]
   1561e:	681b      	ldr	r3, [r3, #0]
   15620:	461a      	mov	r2, r3
   15622:	68bb      	ldr	r3, [r7, #8]
   15624:	685b      	ldr	r3, [r3, #4]
   15626:	18d3      	adds	r3, r2, r3
   15628:	881b      	ldrh	r3, [r3, #0]
   1562a:	68f8      	ldr	r0, [r7, #12]
   1562c:	4619      	mov	r1, r3
   1562e:	f7ff fe99 	bl	15364 <SSP_SendData>
					dataCfg->tx_cnt += 2;
   15632:	68bb      	ldr	r3, [r7, #8]
   15634:	685b      	ldr	r3, [r3, #4]
   15636:	f103 0202 	add.w	r2, r3, #2
   1563a:	68bb      	ldr	r3, [r7, #8]
   1563c:	605a      	str	r2, [r3, #4]
				}
			}

			// Check error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	699b      	ldr	r3, [r3, #24]
   15642:	617b      	str	r3, [r7, #20]
   15644:	697b      	ldr	r3, [r7, #20]
   15646:	f003 0301 	and.w	r3, r3, #1
   1564a:	b2db      	uxtb	r3, r3
   1564c:	2b00      	cmp	r3, #0
   1564e:	d037      	beq.n	156c0 <SSP_ReadWrite+0x324>
				// save status and return
				dataCfg->status = stat | SSP_STAT_ERROR;
   15650:	697b      	ldr	r3, [r7, #20]
   15652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   15656:	68bb      	ldr	r3, [r7, #8]
   15658:	615a      	str	r2, [r3, #20]
				return (-1);
   1565a:	f04f 33ff 	mov.w	r3, #4294967295
   1565e:	e063      	b.n	15728 <SSP_ReadWrite+0x38c>
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);
   15660:	68f8      	ldr	r0, [r7, #12]
   15662:	f7ff fe8d 	bl	15380 <SSP_ReceiveData>
   15666:	4603      	mov	r3, r0
   15668:	61bb      	str	r3, [r7, #24]

				// Store data to destination
				if (dataCfg->rx_data != NULL)
   1566a:	68bb      	ldr	r3, [r7, #8]
   1566c:	689b      	ldr	r3, [r3, #8]
   1566e:	2b00      	cmp	r3, #0
   15670:	d015      	beq.n	1569e <SSP_ReadWrite+0x302>
				{
					if (dataword == 0){
   15672:	69fb      	ldr	r3, [r7, #28]
   15674:	2b00      	cmp	r3, #0
   15676:	d109      	bne.n	1568c <SSP_ReadWrite+0x2f0>
						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
   15678:	68bb      	ldr	r3, [r7, #8]
   1567a:	689b      	ldr	r3, [r3, #8]
   1567c:	461a      	mov	r2, r3
   1567e:	68bb      	ldr	r3, [r7, #8]
   15680:	68db      	ldr	r3, [r3, #12]
   15682:	18d3      	adds	r3, r2, r3
   15684:	69ba      	ldr	r2, [r7, #24]
   15686:	b2d2      	uxtb	r2, r2
   15688:	701a      	strb	r2, [r3, #0]
   1568a:	e008      	b.n	1569e <SSP_ReadWrite+0x302>
					} else {
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
   1568c:	68bb      	ldr	r3, [r7, #8]
   1568e:	689b      	ldr	r3, [r3, #8]
   15690:	461a      	mov	r2, r3
   15692:	68bb      	ldr	r3, [r7, #8]
   15694:	68db      	ldr	r3, [r3, #12]
   15696:	18d3      	adds	r3, r2, r3
   15698:	69ba      	ldr	r2, [r7, #24]
   1569a:	b292      	uxth	r2, r2
   1569c:	801a      	strh	r2, [r3, #0]
					}
				}
				// Increase counter
				if (dataword == 0){
   1569e:	69fb      	ldr	r3, [r7, #28]
   156a0:	2b00      	cmp	r3, #0
   156a2:	d106      	bne.n	156b2 <SSP_ReadWrite+0x316>
					dataCfg->rx_cnt++;
   156a4:	68bb      	ldr	r3, [r7, #8]
   156a6:	68db      	ldr	r3, [r3, #12]
   156a8:	f103 0201 	add.w	r2, r3, #1
   156ac:	68bb      	ldr	r3, [r7, #8]
   156ae:	60da      	str	r2, [r3, #12]
   156b0:	e007      	b.n	156c2 <SSP_ReadWrite+0x326>
				} else {
					dataCfg->rx_cnt += 2;
   156b2:	68bb      	ldr	r3, [r7, #8]
   156b4:	68db      	ldr	r3, [r3, #12]
   156b6:	f103 0202 	add.w	r2, r3, #2
   156ba:	68bb      	ldr	r3, [r7, #8]
   156bc:	60da      	str	r2, [r3, #12]
   156be:	e000      	b.n	156c2 <SSP_ReadWrite+0x326>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
   156c0:	bf00      	nop
   156c2:	68fb      	ldr	r3, [r7, #12]
   156c4:	68db      	ldr	r3, [r3, #12]
   156c6:	f003 0304 	and.w	r3, r3, #4
   156ca:	2b00      	cmp	r3, #0
   156cc:	d005      	beq.n	156da <SSP_ReadWrite+0x33e>
   156ce:	68bb      	ldr	r3, [r7, #8]
   156d0:	68da      	ldr	r2, [r3, #12]
   156d2:	68bb      	ldr	r3, [r7, #8]
   156d4:	691b      	ldr	r3, [r3, #16]
   156d6:	429a      	cmp	r2, r3
   156d8:	d1c2      	bne.n	15660 <SSP_ReadWrite+0x2c4>
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){

		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
   156da:	68fb      	ldr	r3, [r7, #12]
   156dc:	68db      	ldr	r3, [r3, #12]
   156de:	f003 0302 	and.w	r3, r3, #2
   156e2:	2b00      	cmp	r3, #0
   156e4:	d006      	beq.n	156f4 <SSP_ReadWrite+0x358>
   156e6:	68bb      	ldr	r3, [r7, #8]
   156e8:	685a      	ldr	r2, [r3, #4]
   156ea:	68bb      	ldr	r3, [r7, #8]
   156ec:	691b      	ldr	r3, [r3, #16]
   156ee:	429a      	cmp	r2, r3
   156f0:	f47f af60 	bne.w	155b4 <SSP_ReadWrite+0x218>
				}
			}
		}

		// If there more data to sent or receive
		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
   156f4:	68bb      	ldr	r3, [r7, #8]
   156f6:	68da      	ldr	r2, [r3, #12]
   156f8:	68bb      	ldr	r3, [r7, #8]
   156fa:	691b      	ldr	r3, [r3, #16]
   156fc:	429a      	cmp	r2, r3
   156fe:	d105      	bne.n	1570c <SSP_ReadWrite+0x370>
   15700:	68bb      	ldr	r3, [r7, #8]
   15702:	685a      	ldr	r2, [r3, #4]
   15704:	68bb      	ldr	r3, [r7, #8]
   15706:	691b      	ldr	r3, [r3, #16]
   15708:	429a      	cmp	r2, r3
   1570a:	d004      	beq.n	15716 <SSP_ReadWrite+0x37a>
			// Enable all interrupt
			SSPx->IMSC = SSP_IMSC_BITMASK;
   1570c:	68fb      	ldr	r3, [r7, #12]
   1570e:	f04f 020f 	mov.w	r2, #15
   15712:	615a      	str	r2, [r3, #20]
   15714:	e003      	b.n	1571e <SSP_ReadWrite+0x382>
		} else {
			// Save status
			dataCfg->status = SSP_STAT_DONE;
   15716:	68bb      	ldr	r3, [r7, #8]
   15718:	f44f 7280 	mov.w	r2, #256	; 0x100
   1571c:	615a      	str	r2, [r3, #20]
		}
		return (0);
   1571e:	f04f 0300 	mov.w	r3, #0
   15722:	e001      	b.n	15728 <SSP_ReadWrite+0x38c>
	}

	return (-1);
   15724:	f04f 33ff 	mov.w	r3, #4294967295
}
   15728:	4618      	mov	r0, r3
   1572a:	f107 0730 	add.w	r7, r7, #48	; 0x30
   1572e:	46bd      	mov	sp, r7
   15730:	bd80      	pop	{r7, pc}
   15732:	bf00      	nop

00015734 <SSP_GetStatus>:
 *							- SSP_STAT_RXFIFO_FULL: RX FIFO is full
 *							- SSP_STAT_BUSY: SSP peripheral is busy
 * @return		New State of specified SSP status flag
 **********************************************************************/
FlagStatus SSP_GetStatus(LPC_SSP_TypeDef* SSPx, uint32_t FlagType)
{
   15734:	b480      	push	{r7}
   15736:	b083      	sub	sp, #12
   15738:	af00      	add	r7, sp, #0
   1573a:	6078      	str	r0, [r7, #4]
   1573c:	6039      	str	r1, [r7, #0]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_SSP_STAT(FlagType));

	return ((SSPx->SR & FlagType) ? SET : RESET);
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	68da      	ldr	r2, [r3, #12]
   15742:	683b      	ldr	r3, [r7, #0]
   15744:	4013      	ands	r3, r2
   15746:	2b00      	cmp	r3, #0
   15748:	bf0c      	ite	eq
   1574a:	2300      	moveq	r3, #0
   1574c:	2301      	movne	r3, #1
   1574e:	b2db      	uxtb	r3, r3
}
   15750:	4618      	mov	r0, r3
   15752:	f107 070c 	add.w	r7, r7, #12
   15756:	46bd      	mov	sp, r7
   15758:	bc80      	pop	{r7}
   1575a:	4770      	bx	lr

0001575c <SSP_IntConfig>:
 * 				- DISABLE: Disable this interrupt type
 * @return		None
 * Note: We can enable/disable multi-interrupt type by OR multi value
 **********************************************************************/
void SSP_IntConfig(LPC_SSP_TypeDef *SSPx, uint32_t IntType, FunctionalState NewState)
{
   1575c:	b480      	push	{r7}
   1575e:	b085      	sub	sp, #20
   15760:	af00      	add	r7, sp, #0
   15762:	60f8      	str	r0, [r7, #12]
   15764:	60b9      	str	r1, [r7, #8]
   15766:	4613      	mov	r3, r2
   15768:	71fb      	strb	r3, [r7, #7]
	////CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
   1576a:	79fb      	ldrb	r3, [r7, #7]
   1576c:	2b01      	cmp	r3, #1
   1576e:	d106      	bne.n	1577e <SSP_IntConfig+0x22>
	{
		SSPx->IMSC |= IntType;
   15770:	68fb      	ldr	r3, [r7, #12]
   15772:	695a      	ldr	r2, [r3, #20]
   15774:	68bb      	ldr	r3, [r7, #8]
   15776:	431a      	orrs	r2, r3
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	615a      	str	r2, [r3, #20]
   1577c:	e009      	b.n	15792 <SSP_IntConfig+0x36>
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
   1577e:	68fb      	ldr	r3, [r7, #12]
   15780:	695a      	ldr	r2, [r3, #20]
   15782:	68bb      	ldr	r3, [r7, #8]
   15784:	ea6f 0303 	mvn.w	r3, r3
   15788:	4013      	ands	r3, r2
   1578a:	f003 020f 	and.w	r2, r3, #15
   1578e:	68fb      	ldr	r3, [r7, #12]
   15790:	615a      	str	r2, [r3, #20]
	}
}
   15792:	f107 0714 	add.w	r7, r7, #20
   15796:	46bd      	mov	sp, r7
   15798:	bc80      	pop	{r7}
   1579a:	4770      	bx	lr

0001579c <SSP_GetRawIntStatus>:
 * @return	New State of specified Raw interrupt status flag in SSP peripheral
 * Note: Enabling/Disabling specified interrupt in SSP peripheral does not
 * 		effect to Raw Interrupt Status flag.
 **********************************************************************/
IntStatus SSP_GetRawIntStatus(LPC_SSP_TypeDef *SSPx, uint32_t RawIntType)
{
   1579c:	b480      	push	{r7}
   1579e:	b083      	sub	sp, #12
   157a0:	af00      	add	r7, sp, #0
   157a2:	6078      	str	r0, [r7, #4]
   157a4:	6039      	str	r1, [r7, #0]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));

	return ((SSPx->RIS & RawIntType) ? SET : RESET);
   157a6:	687b      	ldr	r3, [r7, #4]
   157a8:	699a      	ldr	r2, [r3, #24]
   157aa:	683b      	ldr	r3, [r7, #0]
   157ac:	4013      	ands	r3, r2
   157ae:	2b00      	cmp	r3, #0
   157b0:	bf0c      	ite	eq
   157b2:	2300      	moveq	r3, #0
   157b4:	2301      	movne	r3, #1
   157b6:	b2db      	uxtb	r3, r3
}
   157b8:	4618      	mov	r0, r3
   157ba:	f107 070c 	add.w	r7, r7, #12
   157be:	46bd      	mov	sp, r7
   157c0:	bc80      	pop	{r7}
   157c2:	4770      	bx	lr

000157c4 <SSP_GetRawIntStatusReg>:
 * 						- LPC_SSP0: SSP0 peripheral
 * 						- LPC_SSP1: SSP1 peripheral
 * @return		Raw Interrupt Status (RIS) register value
 **********************************************************************/
uint32_t SSP_GetRawIntStatusReg(LPC_SSP_TypeDef *SSPx)
{
   157c4:	b480      	push	{r7}
   157c6:	b083      	sub	sp, #12
   157c8:	af00      	add	r7, sp, #0
   157ca:	6078      	str	r0, [r7, #4]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->RIS);
   157cc:	687b      	ldr	r3, [r7, #4]
   157ce:	699b      	ldr	r3, [r3, #24]
}
   157d0:	4618      	mov	r0, r3
   157d2:	f107 070c 	add.w	r7, r7, #12
   157d6:	46bd      	mov	sp, r7
   157d8:	bc80      	pop	{r7}
   157da:	4770      	bx	lr

000157dc <SSP_GetIntStatus>:
 * @return	New State of specified interrupt status flag in SSP peripheral
 * Note: Enabling/Disabling specified interrupt in SSP peripheral effects
 * 			to Interrupt Status flag.
 **********************************************************************/
IntStatus SSP_GetIntStatus (LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
   157dc:	b480      	push	{r7}
   157de:	b083      	sub	sp, #12
   157e0:	af00      	add	r7, sp, #0
   157e2:	6078      	str	r0, [r7, #4]
   157e4:	6039      	str	r1, [r7, #0]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));

	return ((SSPx->MIS & IntType) ? SET :RESET);
   157e6:	687b      	ldr	r3, [r7, #4]
   157e8:	69da      	ldr	r2, [r3, #28]
   157ea:	683b      	ldr	r3, [r7, #0]
   157ec:	4013      	ands	r3, r2
   157ee:	2b00      	cmp	r3, #0
   157f0:	bf0c      	ite	eq
   157f2:	2300      	moveq	r3, #0
   157f4:	2301      	movne	r3, #1
   157f6:	b2db      	uxtb	r3, r3
}
   157f8:	4618      	mov	r0, r3
   157fa:	f107 070c 	add.w	r7, r7, #12
   157fe:	46bd      	mov	sp, r7
   15800:	bc80      	pop	{r7}
   15802:	4770      	bx	lr

00015804 <SSP_ClearIntPending>:
 * 						- SSP_INTCLR_RT: clears the "Rx FIFO was not empty and
 * 						has not been read for a timeout period" interrupt.
 * @return		None
 **********************************************************************/
void SSP_ClearIntPending(LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
   15804:	b480      	push	{r7}
   15806:	b083      	sub	sp, #12
   15808:	af00      	add	r7, sp, #0
   1580a:	6078      	str	r0, [r7, #4]
   1580c:	6039      	str	r1, [r7, #0]
	////CHECK_PARAM(PARAM_SSPx(SSPx));
	////CHECK_PARAM(PARAM_SSP_INTCLR(IntType));

	SSPx->ICR = IntType;
   1580e:	687b      	ldr	r3, [r7, #4]
   15810:	683a      	ldr	r2, [r7, #0]
   15812:	621a      	str	r2, [r3, #32]
}
   15814:	f107 070c 	add.w	r7, r7, #12
   15818:	46bd      	mov	sp, r7
   1581a:	bc80      	pop	{r7}
   1581c:	4770      	bx	lr
   1581e:	bf00      	nop

00015820 <SSP_DMACmd>:
 * 						- ENALBE: Enable this function
 * 						- DISABLE: Disable this function
 * @return		None
 **********************************************************************/
void SSP_DMACmd(LPC_SSP_TypeDef *SSPx, uint32_t DMAMode, FunctionalState NewState)
{
   15820:	b480      	push	{r7}
   15822:	b085      	sub	sp, #20
   15824:	af00      	add	r7, sp, #0
   15826:	60f8      	str	r0, [r7, #12]
   15828:	60b9      	str	r1, [r7, #8]
   1582a:	4613      	mov	r3, r2
   1582c:	71fb      	strb	r3, [r7, #7]
	//CHECK_PARAM(PARAM_SSPx(SSPx));
	//CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	//CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
   1582e:	79fb      	ldrb	r3, [r7, #7]
   15830:	2b01      	cmp	r3, #1
   15832:	d106      	bne.n	15842 <SSP_DMACmd+0x22>
	{
		SSPx->DMACR |= DMAMode;
   15834:	68fb      	ldr	r3, [r7, #12]
   15836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15838:	68bb      	ldr	r3, [r7, #8]
   1583a:	431a      	orrs	r2, r3
   1583c:	68fb      	ldr	r3, [r7, #12]
   1583e:	625a      	str	r2, [r3, #36]	; 0x24
   15840:	e009      	b.n	15856 <SSP_DMACmd+0x36>
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
   15842:	68fb      	ldr	r3, [r7, #12]
   15844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15846:	68bb      	ldr	r3, [r7, #8]
   15848:	ea6f 0303 	mvn.w	r3, r3
   1584c:	4013      	ands	r3, r2
   1584e:	f003 0203 	and.w	r2, r3, #3
   15852:	68fb      	ldr	r3, [r7, #12]
   15854:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
   15856:	f107 0714 	add.w	r7, r7, #20
   1585a:	46bd      	mov	sp, r7
   1585c:	bc80      	pop	{r7}
   1585e:	4770      	bx	lr

00015860 <CSP_IntClr>:
*********************************************************************************************************
*/

void  CSP_IntClr (CSP_DEV_NBR  int_ctrl,
                  CSP_DEV_NBR  src_nbr)
{
   15860:	b580      	push	{r7, lr}
   15862:	b082      	sub	sp, #8
   15864:	af00      	add	r7, sp, #0
   15866:	4602      	mov	r2, r0
   15868:	460b      	mov	r3, r1
   1586a:	80fa      	strh	r2, [r7, #6]
   1586c:	80bb      	strh	r3, [r7, #4]
    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   1586e:	88fb      	ldrh	r3, [r7, #6]
   15870:	2b00      	cmp	r3, #0
   15872:	d10a      	bne.n	1588a <CSP_IntClr+0x2a>
   15874:	88bb      	ldrh	r3, [r7, #4]
   15876:	2b22      	cmp	r3, #34	; 0x22
   15878:	d807      	bhi.n	1588a <CSP_IntClr+0x2a>
        (src_nbr   < CSP_INT_SRC_NBR_MAX  )) {
        CPU_IntSrcPendClr(src_nbr + CPU_INT_EXT0);
   1587a:	88bb      	ldrh	r3, [r7, #4]
   1587c:	b2db      	uxtb	r3, r3
   1587e:	f103 0310 	add.w	r3, r3, #16
   15882:	b2db      	uxtb	r3, r3
   15884:	4618      	mov	r0, r3
   15886:	f7eb fbc7 	bl	1018 <CPU_IntSrcPendClr>
    }
}
   1588a:	f107 0708 	add.w	r7, r7, #8
   1588e:	46bd      	mov	sp, r7
   15890:	bd80      	pop	{r7, pc}
   15892:	bf00      	nop

00015894 <CSP_IntDis>:
*********************************************************************************************************
*/

void  CSP_IntDis (CSP_DEV_NBR  int_ctrl,
                  CSP_DEV_NBR  src_nbr)
{
   15894:	b580      	push	{r7, lr}
   15896:	b082      	sub	sp, #8
   15898:	af00      	add	r7, sp, #0
   1589a:	4602      	mov	r2, r0
   1589c:	460b      	mov	r3, r1
   1589e:	80fa      	strh	r2, [r7, #6]
   158a0:	80bb      	strh	r3, [r7, #4]
    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   158a2:	88fb      	ldrh	r3, [r7, #6]
   158a4:	2b00      	cmp	r3, #0
   158a6:	d10a      	bne.n	158be <CSP_IntDis+0x2a>
   158a8:	88bb      	ldrh	r3, [r7, #4]
   158aa:	2b22      	cmp	r3, #34	; 0x22
   158ac:	d807      	bhi.n	158be <CSP_IntDis+0x2a>
        (src_nbr   < CSP_INT_SRC_NBR_MAX  )) {
        CPU_IntSrcDis(src_nbr + CPU_INT_EXT0);
   158ae:	88bb      	ldrh	r3, [r7, #4]
   158b0:	b2db      	uxtb	r3, r3
   158b2:	f103 0310 	add.w	r3, r3, #16
   158b6:	b2db      	uxtb	r3, r3
   158b8:	4618      	mov	r0, r3
   158ba:	f7eb fa01 	bl	cc0 <CPU_IntSrcDis>
    }
}
   158be:	f107 0708 	add.w	r7, r7, #8
   158c2:	46bd      	mov	sp, r7
   158c4:	bd80      	pop	{r7, pc}
   158c6:	bf00      	nop

000158c8 <CSP_IntDisAll>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_IntDisAll (CSP_DEV_NBR  int_ctrl)
{
   158c8:	b480      	push	{r7}
   158ca:	b085      	sub	sp, #20
   158cc:	af00      	add	r7, sp, #0
   158ce:	4603      	mov	r3, r0
   158d0:	80fb      	strh	r3, [r7, #6]
    CSP_DEV_NBR  int_src;
    CSP_DEV_NBR  int_src_grp;

    if (int_ctrl == CSP_INT_CTRL_NBR_MAIN) {
   158d2:	88fb      	ldrh	r3, [r7, #6]
   158d4:	2b00      	cmp	r3, #0
   158d6:	d11c      	bne.n	15912 <CSP_IntDisAll+0x4a>
        int_src     = 0u;
   158d8:	f04f 0300 	mov.w	r3, #0
   158dc:	81fb      	strh	r3, [r7, #14]
        int_src_grp = 0u;
   158de:	f04f 0300 	mov.w	r3, #0
   158e2:	81bb      	strh	r3, [r7, #12]
        while (int_src < CSP_INT_SRC_NBR_MAX) {
   158e4:	e012      	b.n	1590c <CSP_IntDisAll+0x44>
            CPU_REG_NVIC_CLREN(int_src_grp) = DEF_BIT_FIELD(32u, 0u);
   158e6:	89ba      	ldrh	r2, [r7, #12]
   158e8:	f643 0360 	movw	r3, #14432	; 0x3860
   158ec:	f6c3 0300 	movt	r3, #14336	; 0x3800
   158f0:	18d3      	adds	r3, r2, r3
   158f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   158f6:	f04f 32ff 	mov.w	r2, #4294967295
   158fa:	601a      	str	r2, [r3, #0]
            int_src_grp++;
   158fc:	89bb      	ldrh	r3, [r7, #12]
   158fe:	f103 0301 	add.w	r3, r3, #1
   15902:	81bb      	strh	r3, [r7, #12]
            int_src += 32u;
   15904:	89fb      	ldrh	r3, [r7, #14]
   15906:	f103 0320 	add.w	r3, r3, #32
   1590a:	81fb      	strh	r3, [r7, #14]
    CSP_DEV_NBR  int_src_grp;

    if (int_ctrl == CSP_INT_CTRL_NBR_MAIN) {
        int_src     = 0u;
        int_src_grp = 0u;
        while (int_src < CSP_INT_SRC_NBR_MAX) {
   1590c:	89fb      	ldrh	r3, [r7, #14]
   1590e:	2b22      	cmp	r3, #34	; 0x22
   15910:	d9e9      	bls.n	158e6 <CSP_IntDisAll+0x1e>
            CPU_REG_NVIC_CLREN(int_src_grp) = DEF_BIT_FIELD(32u, 0u);
            int_src_grp++;
            int_src += 32u;
        }
    }
}
   15912:	f107 0714 	add.w	r7, r7, #20
   15916:	46bd      	mov	sp, r7
   15918:	bc80      	pop	{r7}
   1591a:	4770      	bx	lr

0001591c <CSP_IntEn>:
*********************************************************************************************************
*/

void  CSP_IntEn (CSP_DEV_NBR  int_ctrl,
                 CSP_DEV_NBR  src_nbr)
{
   1591c:	b580      	push	{r7, lr}
   1591e:	b082      	sub	sp, #8
   15920:	af00      	add	r7, sp, #0
   15922:	4602      	mov	r2, r0
   15924:	460b      	mov	r3, r1
   15926:	80fa      	strh	r2, [r7, #6]
   15928:	80bb      	strh	r3, [r7, #4]
    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   1592a:	88fb      	ldrh	r3, [r7, #6]
   1592c:	2b00      	cmp	r3, #0
   1592e:	d10a      	bne.n	15946 <CSP_IntEn+0x2a>
   15930:	88bb      	ldrh	r3, [r7, #4]
   15932:	2b22      	cmp	r3, #34	; 0x22
   15934:	d807      	bhi.n	15946 <CSP_IntEn+0x2a>
        (src_nbr   < CSP_INT_SRC_NBR_MAX  )) {
        CPU_IntSrcEn(src_nbr + CPU_INT_EXT0);
   15936:	88bb      	ldrh	r3, [r7, #4]
   15938:	b2db      	uxtb	r3, r3
   1593a:	f103 0310 	add.w	r3, r3, #16
   1593e:	b2db      	uxtb	r3, r3
   15940:	4618      	mov	r0, r3
   15942:	f7eb fa93 	bl	e6c <CPU_IntSrcEn>
    }
}
   15946:	f107 0708 	add.w	r7, r7, #8
   1594a:	46bd      	mov	sp, r7
   1594c:	bd80      	pop	{r7, pc}
   1594e:	bf00      	nop

00015950 <CSP_IntInit>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_IntInit  (void)
{
   15950:	b580      	push	{r7, lr}
   15952:	b084      	sub	sp, #16
   15954:	af00      	add	r7, sp, #0
    CPU_INT08U     src_nbr;
    CSP_INT_VECT  *p_int_vect;
    CPU_SR_ALLOC();
   15956:	f04f 0300 	mov.w	r3, #0
   1595a:	60bb      	str	r3, [r7, #8]


    p_int_vect = &CSP_MainVectTbl[0];
   1595c:	f243 6388 	movw	r3, #13960	; 0x3688
   15960:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15964:	607b      	str	r3, [r7, #4]

    for (src_nbr = 0u; src_nbr < CSP_INT_SRC_NBR_MAX; src_nbr++) {
   15966:	f04f 0300 	mov.w	r3, #0
   1596a:	73fb      	strb	r3, [r7, #15]
   1596c:	e027      	b.n	159be <CSP_IntInit+0x6e>
        CPU_IntSrcDis(src_nbr + CPU_INT_EXT0);                           /* Disable external interrupts.                         */
   1596e:	7bfb      	ldrb	r3, [r7, #15]
   15970:	f103 0310 	add.w	r3, r3, #16
   15974:	b2db      	uxtb	r3, r3
   15976:	4618      	mov	r0, r3
   15978:	f7eb f9a2 	bl	cc0 <CPU_IntSrcDis>
        CPU_IntSrcPendClr(src_nbr + CPU_INT_EXT0);
   1597c:	7bfb      	ldrb	r3, [r7, #15]
   1597e:	f103 0310 	add.w	r3, r3, #16
   15982:	b2db      	uxtb	r3, r3
   15984:	4618      	mov	r0, r3
   15986:	f7eb fb47 	bl	1018 <CPU_IntSrcPendClr>
        p_int_vect = &CSP_MainVectTbl[src_nbr];
   1598a:	7bfb      	ldrb	r3, [r7, #15]
   1598c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15990:	f243 6388 	movw	r3, #13960	; 0x3688
   15994:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15998:	18d3      	adds	r3, r2, r3
   1599a:	607b      	str	r3, [r7, #4]

        CPU_CRITICAL_ENTER();
   1599c:	f002 fa22 	bl	17de4 <CPU_SR_Save>
   159a0:	60b8      	str	r0, [r7, #8]
   159a2:	f7eb ff89 	bl	18b8 <CPU_IntDisMeasStart>
        CSP_IntVectClr(p_int_vect);                             /* Initialize main vector table entry.                  */
   159a6:	6878      	ldr	r0, [r7, #4]
   159a8:	f7fb fe7e 	bl	116a8 <CSP_IntVectClr>
        CPU_CRITICAL_EXIT();
   159ac:	f7eb ffb0 	bl	1910 <CPU_IntDisMeasStop>
   159b0:	68b8      	ldr	r0, [r7, #8]
   159b2:	f002 fa1b 	bl	17dec <CPU_SR_Restore>
    CPU_SR_ALLOC();


    p_int_vect = &CSP_MainVectTbl[0];

    for (src_nbr = 0u; src_nbr < CSP_INT_SRC_NBR_MAX; src_nbr++) {
   159b6:	7bfb      	ldrb	r3, [r7, #15]
   159b8:	f103 0301 	add.w	r3, r3, #1
   159bc:	73fb      	strb	r3, [r7, #15]
   159be:	7bfb      	ldrb	r3, [r7, #15]
   159c0:	2b22      	cmp	r3, #34	; 0x22
   159c2:	d9d4      	bls.n	1596e <CSP_IntInit+0x1e>
        CSP_IntVectClr(p_int_vect);
        CPU_CRITICAL_EXIT();
    }
#endif
                                                                /* Install the USB shared handler.                      */
    src_nbr    = CSP_INT_SRC_NBR_USB_00;
   159c4:	f04f 0318 	mov.w	r3, #24
   159c8:	73fb      	strb	r3, [r7, #15]
    p_int_vect = &CSP_MainVectTbl[src_nbr];
   159ca:	7bfb      	ldrb	r3, [r7, #15]
   159cc:	ea4f 1203 	mov.w	r2, r3, lsl #4
   159d0:	f243 6388 	movw	r3, #13960	; 0x3688
   159d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   159d8:	18d3      	adds	r3, r2, r3
   159da:	607b      	str	r3, [r7, #4]

    CPU_CRITICAL_ENTER();
   159dc:	f002 fa02 	bl	17de4 <CPU_SR_Save>
   159e0:	60b8      	str	r0, [r7, #8]
   159e2:	f7eb ff69 	bl	18b8 <CPU_IntDisMeasStart>
/*    CSP_IntVectSet((CSP_INT_VECT *)p_int_vect,
                   (CPU_FNCT_PTR  )USB_IRQHandler,
                   (void *        )0);*/
    CPU_CRITICAL_EXIT();
   159e6:	f7eb ff93 	bl	1910 <CPU_IntDisMeasStop>
   159ea:	68b8      	ldr	r0, [r7, #8]
   159ec:	f002 f9fe 	bl	17dec <CPU_SR_Restore>
}
   159f0:	f107 0710 	add.w	r7, r7, #16
   159f4:	46bd      	mov	sp, r7
   159f6:	bd80      	pop	{r7, pc}

000159f8 <CSP_IntSrcCfg>:
CPU_BOOLEAN  CSP_IntSrcCfg (CSP_DEV_NBR  int_ctrl,
                            CSP_DEV_NBR  src_nbr,
                            CSP_OPT      src_prio,
                            CSP_OPT      src_pol)

{
   159f8:	b580      	push	{r7, lr}
   159fa:	b084      	sub	sp, #16
   159fc:	af00      	add	r7, sp, #0
   159fe:	80f8      	strh	r0, [r7, #6]
   15a00:	80b9      	strh	r1, [r7, #4]
   15a02:	807a      	strh	r2, [r7, #2]
   15a04:	803b      	strh	r3, [r7, #0]
    CPU_BOOLEAN  err;

    err = DEF_FAIL;
   15a06:	f04f 0300 	mov.w	r3, #0
   15a0a:	73fb      	strb	r3, [r7, #15]

    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   15a0c:	88fb      	ldrh	r3, [r7, #6]
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d112      	bne.n	15a38 <CSP_IntSrcCfg+0x40>
   15a12:	88bb      	ldrh	r3, [r7, #4]
   15a14:	2b22      	cmp	r3, #34	; 0x22
   15a16:	d80f      	bhi.n	15a38 <CSP_IntSrcCfg+0x40>
        (src_nbr   < CSP_INT_SRC_NBR_MAX  ) &&
   15a18:	887b      	ldrh	r3, [r7, #2]
   15a1a:	2bfe      	cmp	r3, #254	; 0xfe
   15a1c:	d80c      	bhi.n	15a38 <CSP_IntSrcCfg+0x40>
        (src_prio  < 0xFF                 )) {
        CPU_IntSrcPrioSet(src_nbr + 16u, CPU_INT_EXT0);
   15a1e:	88bb      	ldrh	r3, [r7, #4]
   15a20:	b2db      	uxtb	r3, r3
   15a22:	f103 0310 	add.w	r3, r3, #16
   15a26:	b2db      	uxtb	r3, r3
   15a28:	4618      	mov	r0, r3
   15a2a:	f04f 0110 	mov.w	r1, #16
   15a2e:	f7eb fb5d 	bl	10ec <CPU_IntSrcPrioSet>
        err = DEF_OK;
   15a32:	f04f 0301 	mov.w	r3, #1
   15a36:	73fb      	strb	r3, [r7, #15]
    }

    return (err);
   15a38:	7bfb      	ldrb	r3, [r7, #15]
}
   15a3a:	4618      	mov	r0, r3
   15a3c:	f107 0710 	add.w	r7, r7, #16
   15a40:	46bd      	mov	sp, r7
   15a42:	bd80      	pop	{r7, pc}

00015a44 <CSP_IntVectReg>:

CPU_BOOLEAN  CSP_IntVectReg (CSP_DEV_NBR    int_ctrl,
                             CSP_DEV_NBR    src_nbr,
                             CPU_FNCT_PTR   isr_fnct,
                             void          *p_arg)
{
   15a44:	b580      	push	{r7, lr}
   15a46:	b086      	sub	sp, #24
   15a48:	af00      	add	r7, sp, #0
   15a4a:	60ba      	str	r2, [r7, #8]
   15a4c:	607b      	str	r3, [r7, #4]
   15a4e:	4603      	mov	r3, r0
   15a50:	81fb      	strh	r3, [r7, #14]
   15a52:	460b      	mov	r3, r1
   15a54:	81bb      	strh	r3, [r7, #12]
    CSP_INT_VECT  *p_int_vect;
    CPU_SR_ALLOC();
   15a56:	f04f 0300 	mov.w	r3, #0
   15a5a:	617b      	str	r3, [r7, #20]

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (isr_fnct == (CPU_FNCT_PTR)0) {
   15a5c:	68bb      	ldr	r3, [r7, #8]
   15a5e:	2b00      	cmp	r3, #0
   15a60:	d102      	bne.n	15a68 <CSP_IntVectReg+0x24>
        return (DEF_FAIL);
   15a62:	f04f 0300 	mov.w	r3, #0
   15a66:	e029      	b.n	15abc <CSP_IntVectReg+0x78>
    }

    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   15a68:	89fb      	ldrh	r3, [r7, #14]
   15a6a:	2b00      	cmp	r3, #0
   15a6c:	d105      	bne.n	15a7a <CSP_IntVectReg+0x36>
   15a6e:	89bb      	ldrh	r3, [r7, #12]
   15a70:	2b22      	cmp	r3, #34	; 0x22
   15a72:	d902      	bls.n	15a7a <CSP_IntVectReg+0x36>
        (src_nbr  >= CSP_INT_SRC_NBR_MAX  )) {
        return (DEF_FAIL);
   15a74:	f04f 0300 	mov.w	r3, #0
   15a78:	e020      	b.n	15abc <CSP_IntVectReg+0x78>
        return (DEF_FAIL);
    }
#endif
#endif

    switch (int_ctrl) {
   15a7a:	89fb      	ldrh	r3, [r7, #14]
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d11b      	bne.n	15ab8 <CSP_IntVectReg+0x74>
        case CSP_INT_CTRL_NBR_MAIN:                             /* Install interrupt ISR in the NVIC's vector table.    */
             p_int_vect = &CSP_MainVectTbl[src_nbr];
   15a80:	89bb      	ldrh	r3, [r7, #12]
   15a82:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15a86:	f243 6388 	movw	r3, #13960	; 0x3688
   15a8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15a8e:	18d3      	adds	r3, r2, r3
   15a90:	613b      	str	r3, [r7, #16]
             break;
   15a92:	bf00      	nop

        default:
             return (DEF_FAIL);
    }

    CPU_CRITICAL_ENTER();
   15a94:	f002 f9a6 	bl	17de4 <CPU_SR_Save>
   15a98:	6178      	str	r0, [r7, #20]
   15a9a:	f7eb ff0d 	bl	18b8 <CPU_IntDisMeasStart>

    CSP_IntVectSet((CSP_INT_VECT *)p_int_vect,
   15a9e:	6938      	ldr	r0, [r7, #16]
   15aa0:	68b9      	ldr	r1, [r7, #8]
   15aa2:	687a      	ldr	r2, [r7, #4]
   15aa4:	f7fb fe1a 	bl	116dc <CSP_IntVectSet>
                   (CPU_FNCT_PTR  )isr_fnct,
                   (void *        )p_arg);

    CPU_CRITICAL_EXIT();
   15aa8:	f7eb ff32 	bl	1910 <CPU_IntDisMeasStop>
   15aac:	6978      	ldr	r0, [r7, #20]
   15aae:	f002 f99d 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   15ab2:	f04f 0301 	mov.w	r3, #1
   15ab6:	e001      	b.n	15abc <CSP_IntVectReg+0x78>
             p_int_vect = &CSP_USB_VectTbl[src_nbr];
             break;
#endif

        default:
             return (DEF_FAIL);
   15ab8:	f04f 0300 	mov.w	r3, #0
                   (void *        )p_arg);

    CPU_CRITICAL_EXIT();

    return (DEF_OK);
}
   15abc:	4618      	mov	r0, r3
   15abe:	f107 0718 	add.w	r7, r7, #24
   15ac2:	46bd      	mov	sp, r7
   15ac4:	bd80      	pop	{r7, pc}
   15ac6:	bf00      	nop

00015ac8 <CSP_IntVectUnreg>:
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_IntVectUnreg (CSP_DEV_NBR  int_ctrl,
                               CSP_DEV_NBR  src_nbr)
{
   15ac8:	b580      	push	{r7, lr}
   15aca:	b084      	sub	sp, #16
   15acc:	af00      	add	r7, sp, #0
   15ace:	4602      	mov	r2, r0
   15ad0:	460b      	mov	r3, r1
   15ad2:	80fa      	strh	r2, [r7, #6]
   15ad4:	80bb      	strh	r3, [r7, #4]
    CSP_INT_VECT  *p_int_vect;
    CPU_SR_ALLOC();
   15ad6:	f04f 0300 	mov.w	r3, #0
   15ada:	60fb      	str	r3, [r7, #12]


#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if ((int_ctrl == CSP_INT_CTRL_NBR_MAIN) &&
   15adc:	88fb      	ldrh	r3, [r7, #6]
   15ade:	2b00      	cmp	r3, #0
   15ae0:	d105      	bne.n	15aee <CSP_IntVectUnreg+0x26>
   15ae2:	88bb      	ldrh	r3, [r7, #4]
   15ae4:	2b22      	cmp	r3, #34	; 0x22
   15ae6:	d902      	bls.n	15aee <CSP_IntVectUnreg+0x26>
        (src_nbr  >= CSP_INT_SRC_NBR_MAX  )) {
        return (DEF_FAIL);
   15ae8:	f04f 0300 	mov.w	r3, #0
   15aec:	e01e      	b.n	15b2c <CSP_IntVectUnreg+0x64>
        return (DEF_FAIL);
    }
#endif
#endif

    switch (int_ctrl) {
   15aee:	88fb      	ldrh	r3, [r7, #6]
   15af0:	2b00      	cmp	r3, #0
   15af2:	d119      	bne.n	15b28 <CSP_IntVectUnreg+0x60>
        case CSP_INT_CTRL_NBR_MAIN:                             /* Install interrupt ISR in the NVIC's vector table.    */
             p_int_vect = &CSP_MainVectTbl[src_nbr];
   15af4:	88bb      	ldrh	r3, [r7, #4]
   15af6:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15afa:	f243 6388 	movw	r3, #13960	; 0x3688
   15afe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15b02:	18d3      	adds	r3, r2, r3
   15b04:	60bb      	str	r3, [r7, #8]
             break;
   15b06:	bf00      	nop

        default:
             return (DEF_FAIL);
    }

    CPU_CRITICAL_ENTER();
   15b08:	f002 f96c 	bl	17de4 <CPU_SR_Save>
   15b0c:	60f8      	str	r0, [r7, #12]
   15b0e:	f7eb fed3 	bl	18b8 <CPU_IntDisMeasStart>

    CSP_IntVectClr(p_int_vect);
   15b12:	68b8      	ldr	r0, [r7, #8]
   15b14:	f7fb fdc8 	bl	116a8 <CSP_IntVectClr>

    CPU_CRITICAL_EXIT();
   15b18:	f7eb fefa 	bl	1910 <CPU_IntDisMeasStop>
   15b1c:	68f8      	ldr	r0, [r7, #12]
   15b1e:	f002 f965 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   15b22:	f04f 0301 	mov.w	r3, #1
   15b26:	e001      	b.n	15b2c <CSP_IntVectUnreg+0x64>
             p_int_vect = &CSP_USB_VectTbl[src_nbr];
             break;
#endif

        default:
             return (DEF_FAIL);
   15b28:	f04f 0300 	mov.w	r3, #0
    CSP_IntVectClr(p_int_vect);

    CPU_CRITICAL_EXIT();

    return (DEF_OK);
}
   15b2c:	4618      	mov	r0, r3
   15b2e:	f107 0710 	add.w	r7, r7, #16
   15b32:	46bd      	mov	sp, r7
   15b34:	bd80      	pop	{r7, pc}
   15b36:	bf00      	nop

00015b38 <CSP_IntHandler>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_IntHandler (void)
{
   15b38:	b580      	push	{r7, lr}
   15b3a:	b084      	sub	sp, #16
   15b3c:	af00      	add	r7, sp, #0
    CSP_INT_VECT  *p_int_vect;
    CSP_DEV_NBR    src_nbr;
    CPU_INT32U     reg_val;

                                                                /* Query the NVIC interrupt controller                 */
    reg_val  = (CPU_REG_NVIC_ICSR & CPU_MSK_NVIC_ICSR_VECT_ACTIVE);
   15b3e:	f64e 5304 	movw	r3, #60676	; 0xed04
   15b42:	f2ce 0300 	movt	r3, #57344	; 0xe000
   15b46:	681b      	ldr	r3, [r3, #0]
   15b48:	ea4f 53c3 	mov.w	r3, r3, lsl #23
   15b4c:	ea4f 53d3 	mov.w	r3, r3, lsr #23
   15b50:	60fb      	str	r3, [r7, #12]
    src_nbr  = (CSP_DEV_NBR)reg_val -  CPU_INT_EXT0;
   15b52:	68fb      	ldr	r3, [r7, #12]
   15b54:	b29b      	uxth	r3, r3
   15b56:	f1a3 0310 	sub.w	r3, r3, #16
   15b5a:	817b      	strh	r3, [r7, #10]

    if (src_nbr < CSP_INT_SRC_NBR_MAX) {
   15b5c:	897b      	ldrh	r3, [r7, #10]
   15b5e:	2b22      	cmp	r3, #34	; 0x22
   15b60:	d80b      	bhi.n	15b7a <CSP_IntHandler+0x42>
        p_int_vect = &CSP_MainVectTbl[src_nbr];
   15b62:	897b      	ldrh	r3, [r7, #10]
   15b64:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15b68:	f243 6388 	movw	r3, #13960	; 0x3688
   15b6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15b70:	18d3      	adds	r3, r2, r3
   15b72:	607b      	str	r3, [r7, #4]

        CSP_IntVectDeref(p_int_vect);                           /* Call Dereferencing funtion                          */
   15b74:	6878      	ldr	r0, [r7, #4]
   15b76:	f7fb fdcb 	bl	11710 <CSP_IntVectDeref>
    }
}
   15b7a:	f107 0710 	add.w	r7, r7, #16
   15b7e:	46bd      	mov	sp, r7
   15b80:	bd80      	pop	{r7, pc}
   15b82:	bf00      	nop

00015b84 <CSP_IntHandlerSrc>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_IntHandlerSrc (CSP_DEV_NBR  src_nbr)
{
   15b84:	b580      	push	{r7, lr}
   15b86:	b084      	sub	sp, #16
   15b88:	af00      	add	r7, sp, #0
   15b8a:	4603      	mov	r3, r0
   15b8c:	80fb      	strh	r3, [r7, #6]
    CSP_INT_VECT  *p_int_vect;


    if (src_nbr < CSP_INT_SRC_NBR_MAX) {
   15b8e:	88fb      	ldrh	r3, [r7, #6]
   15b90:	2b22      	cmp	r3, #34	; 0x22
   15b92:	d80b      	bhi.n	15bac <CSP_IntHandlerSrc+0x28>
        p_int_vect = &CSP_MainVectTbl[src_nbr];
   15b94:	88fb      	ldrh	r3, [r7, #6]
   15b96:	ea4f 1203 	mov.w	r2, r3, lsl #4
   15b9a:	f243 6388 	movw	r3, #13960	; 0x3688
   15b9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   15ba2:	18d3      	adds	r3, r2, r3
   15ba4:	60fb      	str	r3, [r7, #12]

        CSP_IntVectDeref(p_int_vect);                           /* Call Dereferencing funtion                          */
   15ba6:	68f8      	ldr	r0, [r7, #12]
   15ba8:	f7fb fdb2 	bl	11710 <CSP_IntVectDeref>
    }
}
   15bac:	f107 0710 	add.w	r7, r7, #16
   15bb0:	46bd      	mov	sp, r7
   15bb2:	bd80      	pop	{r7, pc}

00015bb4 <CSP_PM_Init>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_PM_Init (void) 
{
   15bb4:	b480      	push	{r7}
   15bb6:	af00      	add	r7, sp, #0

} 
   15bb8:	46bd      	mov	sp, r7
   15bba:	bc80      	pop	{r7}
   15bbc:	4770      	bx	lr
   15bbe:	bf00      	nop

00015bc0 <CSP_PM_CPU_ClkFreqGet>:
* Note(s)     : none.              
*********************************************************************************************************
*/

CPU_INT32U  CSP_PM_CPU_ClkFreqGet (void)
{
   15bc0:	b480      	push	{r7}
   15bc2:	b085      	sub	sp, #20
   15bc4:	af00      	add	r7, sp, #0
    CPU_INT16U  pll_mul;
    CPU_INT08U  pll_div;
    CPU_INT32U  reg_val;


    reg_val = CSP_PM_REG_CLKSRCSEL & DEF_BIT_FIELD(2u, 0u);
   15bc6:	f24c 130c 	movw	r3, #49420	; 0xc10c
   15bca:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15bce:	681b      	ldr	r3, [r3, #0]
   15bd0:	f003 0303 	and.w	r3, r3, #3
   15bd4:	60bb      	str	r3, [r7, #8]
 
    switch (reg_val) {
   15bd6:	68bb      	ldr	r3, [r7, #8]
   15bd8:	2b01      	cmp	r3, #1
   15bda:	d00a      	beq.n	15bf2 <CSP_PM_CPU_ClkFreqGet+0x32>
   15bdc:	2b01      	cmp	r3, #1
   15bde:	d302      	bcc.n	15be6 <CSP_PM_CPU_ClkFreqGet+0x26>
   15be0:	2b02      	cmp	r3, #2
   15be2:	d00c      	beq.n	15bfe <CSP_PM_CPU_ClkFreqGet+0x3e>
   15be4:	e00f      	b.n	15c06 <CSP_PM_CPU_ClkFreqGet+0x46>
        case 0u:
             cpu_freq = CSP_PM_INT_RC_OSC_FREQ_HZ;
   15be6:	f44f 6310 	mov.w	r3, #2304	; 0x900
   15bea:	f2c0 033d 	movt	r3, #61	; 0x3d
   15bee:	60fb      	str	r3, [r7, #12]
             break;
   15bf0:	e00c      	b.n	15c0c <CSP_PM_CPU_ClkFreqGet+0x4c>
    
        case 1u:
             cpu_freq = CSP_CFG_PM_MAIN_XTAL_FREQ_HZ;
   15bf2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   15bf6:	f2c0 03b7 	movt	r3, #183	; 0xb7
   15bfa:	60fb      	str	r3, [r7, #12]
             break;
   15bfc:	e006      	b.n	15c0c <CSP_PM_CPU_ClkFreqGet+0x4c>

        case 2u:
             cpu_freq = CSP_PM_INT_RTC_OSC_FREQ_HZ;
   15bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15c02:	60fb      	str	r3, [r7, #12]
             break;
   15c04:	e002      	b.n	15c0c <CSP_PM_CPU_ClkFreqGet+0x4c>
                  
        default:
             return ((CPU_INT32U)(0u));
   15c06:	f04f 0300 	mov.w	r3, #0
   15c0a:	e03e      	b.n	15c8a <CSP_PM_CPU_ClkFreqGet+0xca>
    }
 
    pll_mul =   ((CSP_PM_REG_PLLSTAT0 & CSP_PM_MSK_PLLSTAT0_MSEL)          + 1u);
   15c0c:	f24c 0388 	movw	r3, #49288	; 0xc088
   15c10:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15c14:	681b      	ldr	r3, [r3, #0]
   15c16:	b29b      	uxth	r3, r3
   15c18:	ea4f 4343 	mov.w	r3, r3, lsl #17
   15c1c:	ea4f 4353 	mov.w	r3, r3, lsr #17
   15c20:	b29b      	uxth	r3, r3
   15c22:	f103 0301 	add.w	r3, r3, #1
   15c26:	80fb      	strh	r3, [r7, #6]
    pll_div = ((((CSP_PM_REG_PLLSTAT0 & CSP_PM_MSK_PLLSTAT0_PSEL)) >> 16u) + 1u);
   15c28:	f24c 0388 	movw	r3, #49288	; 0xc088
   15c2c:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15c30:	681b      	ldr	r3, [r3, #0]
   15c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   15c36:	ea4f 4313 	mov.w	r3, r3, lsr #16
   15c3a:	b2db      	uxtb	r3, r3
   15c3c:	f103 0301 	add.w	r3, r3, #1
   15c40:	717b      	strb	r3, [r7, #5]

    if (DEF_BIT_IS_SET(CSP_PM_REG_PLLSTAT0, (CSP_PM_MSK_PLLSTAT0_PLLE | 
   15c42:	f24c 0388 	movw	r3, #49288	; 0xc088
   15c46:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15c4a:	681b      	ldr	r3, [r3, #0]
   15c4c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
   15c50:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
   15c54:	d109      	bne.n	15c6a <CSP_PM_CPU_ClkFreqGet+0xaa>
                                             CSP_PM_MSK_PLLSTAT0_PLLC |
                                             CSP_PM_MSK_PLLSTAT0_PLOCK ))) {
        cpu_freq = ((cpu_freq * 2u * pll_mul) / pll_div);
   15c56:	88fb      	ldrh	r3, [r7, #6]
   15c58:	68fa      	ldr	r2, [r7, #12]
   15c5a:	fb02 f303 	mul.w	r3, r2, r3
   15c5e:	ea4f 0243 	mov.w	r2, r3, lsl #1
   15c62:	797b      	ldrb	r3, [r7, #5]
   15c64:	fbb2 f3f3 	udiv	r3, r2, r3
   15c68:	60fb      	str	r3, [r7, #12]
    }
        
    cpu_div = CSP_PM_REG_CCLKCFG & DEF_BIT_FIELD(8u, 0u); 
   15c6a:	f24c 1304 	movw	r3, #49412	; 0xc104
   15c6e:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15c72:	681b      	ldr	r3, [r3, #0]
   15c74:	713b      	strb	r3, [r7, #4]
    cpu_div++;
   15c76:	793b      	ldrb	r3, [r7, #4]
   15c78:	f103 0301 	add.w	r3, r3, #1
   15c7c:	713b      	strb	r3, [r7, #4]
    
    cpu_freq /= cpu_div;
   15c7e:	793b      	ldrb	r3, [r7, #4]
   15c80:	68fa      	ldr	r2, [r7, #12]
   15c82:	fbb2 f3f3 	udiv	r3, r2, r3
   15c86:	60fb      	str	r3, [r7, #12]
        
    return (cpu_freq);
   15c88:	68fb      	ldr	r3, [r7, #12]

}
   15c8a:	4618      	mov	r0, r3
   15c8c:	f107 0714 	add.w	r7, r7, #20
   15c90:	46bd      	mov	sp, r7
   15c92:	bc80      	pop	{r7}
   15c94:	4770      	bx	lr
   15c96:	bf00      	nop

00015c98 <CSP_PM_PerClkDivCfg>:
*/

CPU_BOOLEAN  CSP_PM_PerClkDivCfg (CSP_DEV_NBR    clk_nbr,
                                  CPU_SIZE_T     clk_div)

{
   15c98:	b580      	push	{r7, lr}
   15c9a:	b084      	sub	sp, #16
   15c9c:	af00      	add	r7, sp, #0
   15c9e:	4603      	mov	r3, r0
   15ca0:	6039      	str	r1, [r7, #0]
   15ca2:	80fb      	strh	r3, [r7, #6]
    CPU_INT08U  pclk_sel;
    CPU_SR_ALLOC();
   15ca4:	f04f 0300 	mov.w	r3, #0
   15ca8:	60bb      	str	r3, [r7, #8]


                                                                /* ------------------- ARGUMENTS CHECKING ------------- */
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   15caa:	88fb      	ldrh	r3, [r7, #6]
   15cac:	2b1f      	cmp	r3, #31
   15cae:	d902      	bls.n	15cb6 <CSP_PM_PerClkDivCfg+0x1e>
        return (DEF_FAIL);    
   15cb0:	f04f 0300 	mov.w	r3, #0
   15cb4:	e0b0      	b.n	15e18 <CSP_PM_PerClkDivCfg+0x180>
    }

    switch (clk_nbr) {
   15cb6:	88fa      	ldrh	r2, [r7, #6]
   15cb8:	2a1c      	cmp	r2, #28
   15cba:	d80a      	bhi.n	15cd2 <CSP_PM_PerClkDivCfg+0x3a>
   15cbc:	f640 0308 	movw	r3, #2056	; 0x808
   15cc0:	f2c0 4340 	movt	r3, #1088	; 0x440
   15cc4:	fa03 f302 	lsl.w	r3, r3, r2
   15cc8:	2b00      	cmp	r3, #0
   15cca:	da02      	bge.n	15cd2 <CSP_PM_PerClkDivCfg+0x3a>
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD0:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD1:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD2:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD3:
             return (DEF_FAIL);
   15ccc:	f04f 0300 	mov.w	r3, #0
   15cd0:	e0a2      	b.n	15e18 <CSP_PM_PerClkDivCfg+0x180>
       
        default:
             break;    
   15cd2:	bf00      	nop
    }
#endif
    
    switch (clk_div) {
   15cd4:	683b      	ldr	r3, [r7, #0]
   15cd6:	f103 33ff 	add.w	r3, r3, #4294967295
   15cda:	2b07      	cmp	r3, #7
   15cdc:	d837      	bhi.n	15d4e <CSP_PM_PerClkDivCfg+0xb6>
   15cde:	a201      	add	r2, pc, #4	; (adr r2, 15ce4 <CSP_PM_PerClkDivCfg+0x4c>)
   15ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15ce4:	00015d05 	.word	0x00015d05
   15ce8:	00015d0d 	.word	0x00015d0d
   15cec:	00015d4f 	.word	0x00015d4f
   15cf0:	00015d15 	.word	0x00015d15
   15cf4:	00015d4f 	.word	0x00015d4f
   15cf8:	00015d1d 	.word	0x00015d1d
   15cfc:	00015d4f 	.word	0x00015d4f
   15d00:	00015d37 	.word	0x00015d37
        case 1u:
             pclk_sel = 1u;
   15d04:	f04f 0301 	mov.w	r3, #1
   15d08:	73fb      	strb	r3, [r7, #15]
             break;
   15d0a:	e023      	b.n	15d54 <CSP_PM_PerClkDivCfg+0xbc>
             
        case 2u:
             pclk_sel = 2u;
   15d0c:	f04f 0302 	mov.w	r3, #2
   15d10:	73fb      	strb	r3, [r7, #15]
             break;
   15d12:	e01f      	b.n	15d54 <CSP_PM_PerClkDivCfg+0xbc>
             
        case 4u:
             pclk_sel = 0u;
   15d14:	f04f 0300 	mov.w	r3, #0
   15d18:	73fb      	strb	r3, [r7, #15]
             break;
   15d1a:	e01b      	b.n	15d54 <CSP_PM_PerClkDivCfg+0xbc>
             
        case 6u:
             switch (clk_nbr) {                                 /* See note #2.                                         */
   15d1c:	88fb      	ldrh	r3, [r7, #6]
   15d1e:	f1a3 030d 	sub.w	r3, r3, #13
   15d22:	2b02      	cmp	r3, #2
   15d24:	d804      	bhi.n	15d30 <CSP_PM_PerClkDivCfg+0x98>
                 case CSP_PM_PER_CLK_NBR_CAN_01:
                 case CSP_PM_PER_CLK_NBR_CAN_02:
                 case CSP_PM_PER_CLK_NBR_ACF_00:
                      pclk_sel = 3u;
   15d26:	f04f 0303 	mov.w	r3, #3
   15d2a:	73fb      	strb	r3, [r7, #15]
                      break;
   15d2c:	bf00      	nop
                 
                 default:
                      return (DEF_FAIL);     
             }
             break;
   15d2e:	e011      	b.n	15d54 <CSP_PM_PerClkDivCfg+0xbc>
                 case CSP_PM_PER_CLK_NBR_ACF_00:
                      pclk_sel = 3u;
                      break;
                 
                 default:
                      return (DEF_FAIL);     
   15d30:	f04f 0300 	mov.w	r3, #0
   15d34:	e070      	b.n	15e18 <CSP_PM_PerClkDivCfg+0x180>
             }
             break;
             
        case 8u:                                                /* See note #2.                                         */
             switch (clk_nbr) {
   15d36:	88fb      	ldrh	r3, [r7, #6]
   15d38:	f1a3 030d 	sub.w	r3, r3, #13
   15d3c:	2b02      	cmp	r3, #2
   15d3e:	d802      	bhi.n	15d46 <CSP_PM_PerClkDivCfg+0xae>
                 case CSP_PM_PER_CLK_NBR_CAN_01:
                 case CSP_PM_PER_CLK_NBR_CAN_02:
                 case CSP_PM_PER_CLK_NBR_ACF_00:
                      return (DEF_FAIL);
   15d40:	f04f 0300 	mov.w	r3, #0
   15d44:	e068      	b.n	15e18 <CSP_PM_PerClkDivCfg+0x180>

                 default:
                      pclk_sel = 3u;
   15d46:	f04f 0303 	mov.w	r3, #3
   15d4a:	73fb      	strb	r3, [r7, #15]
                      break;
   15d4c:	bf00      	nop
              }

        default:
             return (DEF_FAIL);
   15d4e:	f04f 0300 	mov.w	r3, #0
   15d52:	e061      	b.n	15e18 <CSP_PM_PerClkDivCfg+0x180>
    }
                  
    CPU_CRITICAL_ENTER();
   15d54:	f002 f846 	bl	17de4 <CPU_SR_Save>
   15d58:	60b8      	str	r0, [r7, #8]
   15d5a:	f7eb fdad 	bl	18b8 <CPU_IntDisMeasStart>
    
    if (clk_nbr < 16u) {
   15d5e:	88fb      	ldrh	r3, [r7, #6]
   15d60:	2b0f      	cmp	r3, #15
   15d62:	d825      	bhi.n	15db0 <CSP_PM_PerClkDivCfg+0x118>
        DEF_BIT_CLR(CSP_PM_REG_PCLKSEL0, DEF_BIT_FIELD(2u,       clk_nbr       * 2u));
   15d64:	f24c 13a8 	movw	r3, #49576	; 0xc1a8
   15d68:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15d6c:	f24c 12a8 	movw	r2, #49576	; 0xc1a8
   15d70:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15d74:	6811      	ldr	r1, [r2, #0]
   15d76:	88fa      	ldrh	r2, [r7, #6]
   15d78:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15d7c:	f04f 0003 	mov.w	r0, #3
   15d80:	fa00 f202 	lsl.w	r2, r0, r2
   15d84:	ea6f 0202 	mvn.w	r2, r2
   15d88:	400a      	ands	r2, r1
   15d8a:	601a      	str	r2, [r3, #0]
        DEF_BIT_SET(CSP_PM_REG_PCLKSEL0, DEF_BIT_MASK(pclk_sel,  clk_nbr       * 2u));                
   15d8c:	f24c 13a8 	movw	r3, #49576	; 0xc1a8
   15d90:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15d94:	f24c 12a8 	movw	r2, #49576	; 0xc1a8
   15d98:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15d9c:	6811      	ldr	r1, [r2, #0]
   15d9e:	7bf8      	ldrb	r0, [r7, #15]
   15da0:	88fa      	ldrh	r2, [r7, #6]
   15da2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15da6:	fa00 f202 	lsl.w	r2, r0, r2
   15daa:	430a      	orrs	r2, r1
   15dac:	601a      	str	r2, [r3, #0]
   15dae:	e02c      	b.n	15e0a <CSP_PM_PerClkDivCfg+0x172>
    } else {
        DEF_BIT_CLR(CSP_PM_REG_PCLKSEL1, DEF_BIT_FIELD(2u,      (clk_nbr - 16u) * 2u));
   15db0:	f24c 13ac 	movw	r3, #49580	; 0xc1ac
   15db4:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15db8:	f24c 12ac 	movw	r2, #49580	; 0xc1ac
   15dbc:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15dc0:	6811      	ldr	r1, [r2, #0]
   15dc2:	88fa      	ldrh	r2, [r7, #6]
   15dc4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   15dc8:	f1a2 0210 	sub.w	r2, r2, #16
   15dcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15dd0:	f04f 0003 	mov.w	r0, #3
   15dd4:	fa00 f202 	lsl.w	r2, r0, r2
   15dd8:	ea6f 0202 	mvn.w	r2, r2
   15ddc:	400a      	ands	r2, r1
   15dde:	601a      	str	r2, [r3, #0]
        DEF_BIT_SET(CSP_PM_REG_PCLKSEL1, DEF_BIT_MASK(pclk_sel, (clk_nbr - 16u) * 2u));                        
   15de0:	f24c 13ac 	movw	r3, #49580	; 0xc1ac
   15de4:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15de8:	f24c 12ac 	movw	r2, #49580	; 0xc1ac
   15dec:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15df0:	6811      	ldr	r1, [r2, #0]
   15df2:	7bf8      	ldrb	r0, [r7, #15]
   15df4:	88fa      	ldrh	r2, [r7, #6]
   15df6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   15dfa:	f1a2 0210 	sub.w	r2, r2, #16
   15dfe:	ea4f 0242 	mov.w	r2, r2, lsl #1
   15e02:	fa00 f202 	lsl.w	r2, r0, r2
   15e06:	430a      	orrs	r2, r1
   15e08:	601a      	str	r2, [r3, #0]
    }
    
    CPU_CRITICAL_EXIT();    
   15e0a:	f7eb fd81 	bl	1910 <CPU_IntDisMeasStop>
   15e0e:	68b8      	ldr	r0, [r7, #8]
   15e10:	f001 ffec 	bl	17dec <CPU_SR_Restore>
    
    return (DEF_OK);
   15e14:	f04f 0301 	mov.w	r3, #1
}    
   15e18:	4618      	mov	r0, r3
   15e1a:	f107 0710 	add.w	r7, r7, #16
   15e1e:	46bd      	mov	sp, r7
   15e20:	bd80      	pop	{r7, pc}
   15e22:	bf00      	nop

00015e24 <CSP_PM_PerClkEn>:
* Note(s)     : None.               
*********************************************************************************************************
*/

void  CSP_PM_PerClkEn (CSP_DEV_NBR clk_nbr)
{
   15e24:	b580      	push	{r7, lr}
   15e26:	b084      	sub	sp, #16
   15e28:	af00      	add	r7, sp, #0
   15e2a:	4603      	mov	r3, r0
   15e2c:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
   15e2e:	f04f 0300 	mov.w	r3, #0
   15e32:	60fb      	str	r3, [r7, #12]


    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   15e34:	88fb      	ldrh	r3, [r7, #6]
   15e36:	2b1f      	cmp	r3, #31
   15e38:	d826      	bhi.n	15e88 <CSP_PM_PerClkEn+0x64>
        return;    
    }
    
    switch (clk_nbr) {
   15e3a:	88fa      	ldrh	r2, [r7, #6]
   15e3c:	2a1c      	cmp	r2, #28
   15e3e:	d807      	bhi.n	15e50 <CSP_PM_PerClkEn+0x2c>
   15e40:	f640 0308 	movw	r3, #2056	; 0x808
   15e44:	f2c8 4310 	movt	r3, #33808	; 0x8410
   15e48:	fa03 f302 	lsl.w	r3, r3, r2
   15e4c:	2b00      	cmp	r3, #0
   15e4e:	db1d      	blt.n	15e8c <CSP_PM_PerClkEn+0x68>
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
             return;
       
        default:
             break;    
   15e50:	bf00      	nop
    }
    
    CPU_CRITICAL_ENTER();
   15e52:	f001 ffc7 	bl	17de4 <CPU_SR_Save>
   15e56:	60f8      	str	r0, [r7, #12]
   15e58:	f7eb fd2e 	bl	18b8 <CPU_IntDisMeasStart>
    DEF_BIT_SET(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
   15e5c:	f24c 03c4 	movw	r3, #49348	; 0xc0c4
   15e60:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15e64:	f24c 02c4 	movw	r2, #49348	; 0xc0c4
   15e68:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15e6c:	6811      	ldr	r1, [r2, #0]
   15e6e:	88fa      	ldrh	r2, [r7, #6]
   15e70:	f04f 0001 	mov.w	r0, #1
   15e74:	fa00 f202 	lsl.w	r2, r0, r2
   15e78:	430a      	orrs	r2, r1
   15e7a:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();    
   15e7c:	f7eb fd48 	bl	1910 <CPU_IntDisMeasStop>
   15e80:	68f8      	ldr	r0, [r7, #12]
   15e82:	f001 ffb3 	bl	17dec <CPU_SR_Restore>
   15e86:	e002      	b.n	15e8e <CSP_PM_PerClkEn+0x6a>
{
    CPU_SR_ALLOC();


    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
        return;    
   15e88:	bf00      	nop
   15e8a:	e000      	b.n	15e8e <CSP_PM_PerClkEn+0x6a>
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD0:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD1:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD2:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
             return;
   15e8c:	bf00      	nop
    }
    
    CPU_CRITICAL_ENTER();
    DEF_BIT_SET(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
    CPU_CRITICAL_EXIT();    
}
   15e8e:	f107 0710 	add.w	r7, r7, #16
   15e92:	46bd      	mov	sp, r7
   15e94:	bd80      	pop	{r7, pc}
   15e96:	bf00      	nop

00015e98 <CSP_PM_PerClkDis>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_PM_PerClkDis (CSP_DEV_NBR clk_nbr)
{
   15e98:	b580      	push	{r7, lr}
   15e9a:	b084      	sub	sp, #16
   15e9c:	af00      	add	r7, sp, #0
   15e9e:	4603      	mov	r3, r0
   15ea0:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
   15ea2:	f04f 0300 	mov.w	r3, #0
   15ea6:	60fb      	str	r3, [r7, #12]


    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   15ea8:	88fb      	ldrh	r3, [r7, #6]
   15eaa:	2b1f      	cmp	r3, #31
   15eac:	d828      	bhi.n	15f00 <CSP_PM_PerClkDis+0x68>
        return;
    }
    
    switch (clk_nbr) {
   15eae:	88fa      	ldrh	r2, [r7, #6]
   15eb0:	2a1c      	cmp	r2, #28
   15eb2:	d807      	bhi.n	15ec4 <CSP_PM_PerClkDis+0x2c>
   15eb4:	f640 0308 	movw	r3, #2056	; 0x808
   15eb8:	f2c8 4310 	movt	r3, #33808	; 0x8410
   15ebc:	fa03 f302 	lsl.w	r3, r3, r2
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	db1f      	blt.n	15f04 <CSP_PM_PerClkDis+0x6c>
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
             return;
       
        default:
             break;    
   15ec4:	bf00      	nop
    }
    
    CPU_CRITICAL_ENTER();
   15ec6:	f001 ff8d 	bl	17de4 <CPU_SR_Save>
   15eca:	60f8      	str	r0, [r7, #12]
   15ecc:	f7eb fcf4 	bl	18b8 <CPU_IntDisMeasStart>
    DEF_BIT_CLR(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
   15ed0:	f24c 03c4 	movw	r3, #49348	; 0xc0c4
   15ed4:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15ed8:	f24c 02c4 	movw	r2, #49348	; 0xc0c4
   15edc:	f2c4 020f 	movt	r2, #16399	; 0x400f
   15ee0:	6811      	ldr	r1, [r2, #0]
   15ee2:	88fa      	ldrh	r2, [r7, #6]
   15ee4:	f04f 0001 	mov.w	r0, #1
   15ee8:	fa00 f202 	lsl.w	r2, r0, r2
   15eec:	ea6f 0202 	mvn.w	r2, r2
   15ef0:	400a      	ands	r2, r1
   15ef2:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();    
   15ef4:	f7eb fd0c 	bl	1910 <CPU_IntDisMeasStop>
   15ef8:	68f8      	ldr	r0, [r7, #12]
   15efa:	f001 ff77 	bl	17dec <CPU_SR_Restore>
   15efe:	e002      	b.n	15f06 <CSP_PM_PerClkDis+0x6e>
{
    CPU_SR_ALLOC();


    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
        return;
   15f00:	bf00      	nop
   15f02:	e000      	b.n	15f06 <CSP_PM_PerClkDis+0x6e>
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD0:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD1:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD2:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
        case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
             return;
   15f04:	bf00      	nop
    }
    
    CPU_CRITICAL_ENTER();
    DEF_BIT_CLR(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
    CPU_CRITICAL_EXIT();    
}
   15f06:	f107 0710 	add.w	r7, r7, #16
   15f0a:	46bd      	mov	sp, r7
   15f0c:	bd80      	pop	{r7, pc}
   15f0e:	bf00      	nop

00015f10 <CSP_PM_PerClkFreqGet>:
* Note(s)     : None.
*********************************************************************************************************
*/

CPU_INT32U  CSP_PM_PerClkFreqGet  (CSP_DEV_NBR  clk_nbr)
{
   15f10:	b580      	push	{r7, lr}
   15f12:	b084      	sub	sp, #16
   15f14:	af00      	add	r7, sp, #0
   15f16:	4603      	mov	r3, r0
   15f18:	80fb      	strh	r3, [r7, #6]
    CPU_INT32U  clk_freq;    
    CPU_INT08U  clk_div;
  

    if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   15f1a:	88fb      	ldrh	r3, [r7, #6]
   15f1c:	2b1f      	cmp	r3, #31
   15f1e:	d902      	bls.n	15f26 <CSP_PM_PerClkFreqGet+0x16>
        return (DEF_FAIL);    
   15f20:	f04f 0300 	mov.w	r3, #0
   15f24:	e064      	b.n	15ff0 <CSP_PM_PerClkFreqGet+0xe0>
    }

    switch (clk_nbr) {
   15f26:	88fa      	ldrh	r2, [r7, #6]
   15f28:	2a1c      	cmp	r2, #28
   15f2a:	d80a      	bhi.n	15f42 <CSP_PM_PerClkFreqGet+0x32>
   15f2c:	f640 0308 	movw	r3, #2056	; 0x808
   15f30:	f2c0 4340 	movt	r3, #1088	; 0x440
   15f34:	fa03 f302 	lsl.w	r3, r3, r2
   15f38:	2b00      	cmp	r3, #0
   15f3a:	da02      	bge.n	15f42 <CSP_PM_PerClkFreqGet+0x32>
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD0:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD1:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD2:
        case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD3:
             return (DEF_FAIL);
   15f3c:	f04f 0300 	mov.w	r3, #0
   15f40:	e056      	b.n	15ff0 <CSP_PM_PerClkFreqGet+0xe0>
       
        default:
             break;    
   15f42:	bf00      	nop
    }
    
    if (clk_nbr < 16u) {
   15f44:	88fb      	ldrh	r3, [r7, #6]
   15f46:	2b0f      	cmp	r3, #15
   15f48:	d80e      	bhi.n	15f68 <CSP_PM_PerClkFreqGet+0x58>
        clk_div = (CPU_INT08U)((CSP_PM_REG_PCLKSEL0 >> ( clk_nbr       * 2)) & DEF_BIT_FIELD(2, 0));
   15f4a:	f24c 13a8 	movw	r3, #49576	; 0xc1a8
   15f4e:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15f52:	681a      	ldr	r2, [r3, #0]
   15f54:	88fb      	ldrh	r3, [r7, #6]
   15f56:	ea4f 0343 	mov.w	r3, r3, lsl #1
   15f5a:	fa22 f303 	lsr.w	r3, r2, r3
   15f5e:	b2db      	uxtb	r3, r3
   15f60:	f003 0303 	and.w	r3, r3, #3
   15f64:	73fb      	strb	r3, [r7, #15]
   15f66:	e00f      	b.n	15f88 <CSP_PM_PerClkFreqGet+0x78>
    } else {
        clk_div = (CPU_INT08U)((CSP_PM_REG_PCLKSEL0 >> ((clk_nbr - 16) * 2)) & DEF_BIT_FIELD(2, 0));    
   15f68:	f24c 13a8 	movw	r3, #49576	; 0xc1a8
   15f6c:	f2c4 030f 	movt	r3, #16399	; 0x400f
   15f70:	681a      	ldr	r2, [r3, #0]
   15f72:	88fb      	ldrh	r3, [r7, #6]
   15f74:	f1a3 0310 	sub.w	r3, r3, #16
   15f78:	ea4f 0343 	mov.w	r3, r3, lsl #1
   15f7c:	fa22 f303 	lsr.w	r3, r2, r3
   15f80:	b2db      	uxtb	r3, r3
   15f82:	f003 0303 	and.w	r3, r3, #3
   15f86:	73fb      	strb	r3, [r7, #15]
    }

    switch (clk_div) {
   15f88:	7bfb      	ldrb	r3, [r7, #15]
   15f8a:	2b03      	cmp	r3, #3
   15f8c:	d824      	bhi.n	15fd8 <CSP_PM_PerClkFreqGet+0xc8>
   15f8e:	a201      	add	r2, pc, #4	; (adr r2, 15f94 <CSP_PM_PerClkFreqGet+0x84>)
   15f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15f94:	00015fa5 	.word	0x00015fa5
   15f98:	00015fad 	.word	0x00015fad
   15f9c:	00015fb5 	.word	0x00015fb5
   15fa0:	00015fbd 	.word	0x00015fbd
        case 0u:
             clk_div = 4u;
   15fa4:	f04f 0304 	mov.w	r3, #4
   15fa8:	73fb      	strb	r3, [r7, #15]
             break;
   15faa:	e018      	b.n	15fde <CSP_PM_PerClkFreqGet+0xce>
             
        case 1u:
             clk_div = 1u;
   15fac:	f04f 0301 	mov.w	r3, #1
   15fb0:	73fb      	strb	r3, [r7, #15]
             break;
   15fb2:	e014      	b.n	15fde <CSP_PM_PerClkFreqGet+0xce>
             
        case 2u:
             clk_div = 2u;
   15fb4:	f04f 0302 	mov.w	r3, #2
   15fb8:	73fb      	strb	r3, [r7, #15]
             break;
   15fba:	e010      	b.n	15fde <CSP_PM_PerClkFreqGet+0xce>
             
        case 3u:
             switch (clk_nbr) {
   15fbc:	88fb      	ldrh	r3, [r7, #6]
   15fbe:	f1a3 030d 	sub.w	r3, r3, #13
   15fc2:	2b02      	cmp	r3, #2
   15fc4:	d803      	bhi.n	15fce <CSP_PM_PerClkFreqGet+0xbe>
                 case CSP_PM_PER_CLK_NBR_CAN_01:
                 case CSP_PM_PER_CLK_NBR_CAN_02:
                 case CSP_PM_PER_CLK_NBR_ACF_00:
                      clk_div = 6u;
   15fc6:	f04f 0306 	mov.w	r3, #6
   15fca:	73fb      	strb	r3, [r7, #15]
                      break;
   15fcc:	e003      	b.n	15fd6 <CSP_PM_PerClkFreqGet+0xc6>
                      
                 default:
                      clk_div = 8u;
   15fce:	f04f 0308 	mov.w	r3, #8
   15fd2:	73fb      	strb	r3, [r7, #15]
                      break;
   15fd4:	bf00      	nop
             }
             break;
   15fd6:	e002      	b.n	15fde <CSP_PM_PerClkFreqGet+0xce>
             
        default:
             return ((CPU_INT32U)0);
   15fd8:	f04f 0300 	mov.w	r3, #0
   15fdc:	e008      	b.n	15ff0 <CSP_PM_PerClkFreqGet+0xe0>
        
    }
    
    clk_freq  = CSP_PM_CPU_ClkFreqGet();
   15fde:	f7ff fdef 	bl	15bc0 <CSP_PM_CPU_ClkFreqGet>
   15fe2:	60b8      	str	r0, [r7, #8]
    clk_freq /= clk_div;
   15fe4:	7bfb      	ldrb	r3, [r7, #15]
   15fe6:	68ba      	ldr	r2, [r7, #8]
   15fe8:	fbb2 f3f3 	udiv	r3, r2, r3
   15fec:	60bb      	str	r3, [r7, #8]
    
    return (clk_freq);
   15fee:	68bb      	ldr	r3, [r7, #8]
}
   15ff0:	4618      	mov	r0, r3
   15ff2:	f107 0710 	add.w	r7, r7, #16
   15ff6:	46bd      	mov	sp, r7
   15ff8:	bd80      	pop	{r7, pc}
   15ffa:	bf00      	nop

00015ffc <CSP_PM_SysClkEn>:
*                   this family.
*********************************************************************************************************
*/

void  CSP_PM_SysClkEn (CSP_DEV_NBR  clk_nbr)
{
   15ffc:	b480      	push	{r7}
   15ffe:	b083      	sub	sp, #12
   16000:	af00      	add	r7, sp, #0
   16002:	4603      	mov	r3, r0
   16004:	80fb      	strh	r3, [r7, #6]
    (void)clk_nbr;
}
   16006:	f107 070c 	add.w	r7, r7, #12
   1600a:	46bd      	mov	sp, r7
   1600c:	bc80      	pop	{r7}
   1600e:	4770      	bx	lr

00016010 <CSP_PM_SysClkDis>:
* Note(s)     : None.
*********************************************************************************************************
*/

void  CSP_PM_SysClkDis (CSP_DEV_NBR clk_nbr)
{
   16010:	b480      	push	{r7}
   16012:	b083      	sub	sp, #12
   16014:	af00      	add	r7, sp, #0
   16016:	4603      	mov	r3, r0
   16018:	80fb      	strh	r3, [r7, #6]
    (void)clk_nbr;
}
   1601a:	f107 070c 	add.w	r7, r7, #12
   1601e:	46bd      	mov	sp, r7
   16020:	bc80      	pop	{r7}
   16022:	4770      	bx	lr

00016024 <CSP_PM_SysClkDivCfg>:
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_PM_SysClkDivCfg (CSP_DEV_NBR  clk_nbr,
                                  CPU_SIZE_T   clk_div)
{
   16024:	b480      	push	{r7}
   16026:	b083      	sub	sp, #12
   16028:	af00      	add	r7, sp, #0
   1602a:	4603      	mov	r3, r0
   1602c:	6039      	str	r1, [r7, #0]
   1602e:	80fb      	strh	r3, [r7, #6]
    (void)&clk_nbr;
    (void)&clk_div;
    
    return (DEF_OK);
   16030:	f04f 0301 	mov.w	r3, #1
}
   16034:	4618      	mov	r0, r3
   16036:	f107 070c 	add.w	r7, r7, #12
   1603a:	46bd      	mov	sp, r7
   1603c:	bc80      	pop	{r7}
   1603e:	4770      	bx	lr

00016040 <CSP_PM_SysClkFreqGet>:
* Note(s)     : None.
*********************************************************************************************************
*/

CPU_INT32U  CSP_PM_SysClkFreqGet (CSP_DEV_NBR  clk_nbr)
{
   16040:	b480      	push	{r7}
   16042:	b083      	sub	sp, #12
   16044:	af00      	add	r7, sp, #0
   16046:	4603      	mov	r3, r0
   16048:	80fb      	strh	r3, [r7, #6]
    (void)clk_nbr;
    
    return ((CPU_INT32U)0);
   1604a:	f04f 0300 	mov.w	r3, #0
}
   1604e:	4618      	mov	r0, r3
   16050:	f107 070c 	add.w	r7, r7, #12
   16054:	46bd      	mov	sp, r7
   16056:	bc80      	pop	{r7}
   16058:	4770      	bx	lr
   1605a:	bf00      	nop

0001605c <CSP_DMA_InitExt>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_DMA_InitExt (void)                          
{   
   1605c:	b580      	push	{r7, lr}
   1605e:	b084      	sub	sp, #16
   16060:	af00      	add	r7, sp, #0
    CSP_DMA_CH_REG  *p_dma_ch_reg;
    CSP_DMA_CH      *p_ch_tbl;     
    CPU_INT08U       ch_nbr;
    
    
    CSP_IntDis(CSP_INT_CTRL_NBR_MAIN,                           /* Disable DMA interrupts                               */
   16062:	f04f 0000 	mov.w	r0, #0
   16066:	f04f 011a 	mov.w	r1, #26
   1606a:	f7ff fc13 	bl	15894 <CSP_IntDis>
               CSP_INT_SRC_NBR_DMA_00);
    
    CSP_PM_PerClkEn(CSP_PM_PER_CLK_NBR_DMA_00);                 /* Enable DMA controller clock.                         */
   1606e:	f04f 001d 	mov.w	r0, #29
   16072:	f7ff fed7 	bl	15e24 <CSP_PM_PerClkEn>
    
    p_dma_reg            = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;
   16076:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   1607a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1607e:	60bb      	str	r3, [r7, #8]
    p_dma_reg->IntTCClr  = DEF_INT_08_MASK;                     /* Clear all pending interrupts.                        */
   16080:	68bb      	ldr	r3, [r7, #8]
   16082:	f04f 02ff 	mov.w	r2, #255	; 0xff
   16086:	609a      	str	r2, [r3, #8]
    p_dma_reg->IntErrClr = DEF_INT_08_MASK;
   16088:	68bb      	ldr	r3, [r7, #8]
   1608a:	f04f 02ff 	mov.w	r2, #255	; 0xff
   1608e:	611a      	str	r2, [r3, #16]
                                                                /* Initialize DMA channels register & table             */
    for (ch_nbr = 0u; ch_nbr < CSP_DMA_CH_MAX_NBR; ch_nbr++) {
   16090:	f04f 0300 	mov.w	r3, #0
   16094:	73fb      	strb	r3, [r7, #15]
   16096:	e039      	b.n	1610c <CSP_DMA_InitExt+0xb0>
        p_dma_ch_reg              = &(p_dma_reg->CHx[ch_nbr]);
   16098:	68bb      	ldr	r3, [r7, #8]
   1609a:	f503 7280 	add.w	r2, r3, #256	; 0x100
   1609e:	7bfb      	ldrb	r3, [r7, #15]
   160a0:	ea4f 1343 	mov.w	r3, r3, lsl #5
   160a4:	18d3      	adds	r3, r2, r3
   160a6:	607b      	str	r3, [r7, #4]
        p_ch_tbl                  = &CSP_DMA_ChTbl[ch_nbr];
   160a8:	7bfa      	ldrb	r2, [r7, #15]
   160aa:	4613      	mov	r3, r2
   160ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   160b0:	189b      	adds	r3, r3, r2
   160b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   160b6:	461a      	mov	r2, r3
   160b8:	f643 03b8 	movw	r3, #14520	; 0x38b8
   160bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   160c0:	18d3      	adds	r3, r2, r3
   160c2:	603b      	str	r3, [r7, #0]
        p_ch_tbl->State           = CSP_DMA_CH_STATE_FREE;
   160c4:	683b      	ldr	r3, [r7, #0]
   160c6:	f04f 0200 	mov.w	r2, #0
   160ca:	701a      	strb	r2, [r3, #0]
        p_ch_tbl->CallBackFnctPtr = (CSP_DMA_CALLBACK_PTR  )0;
   160cc:	683b      	ldr	r3, [r7, #0]
   160ce:	f04f 0200 	mov.w	r2, #0
   160d2:	605a      	str	r2, [r3, #4]
        p_ch_tbl->CallBackArgPtr  = (void                 *)0;
   160d4:	683b      	ldr	r3, [r7, #0]
   160d6:	f04f 0200 	mov.w	r2, #0
   160da:	609a      	str	r2, [r3, #8]
        p_dma_ch_reg->SrcAddr     = 0u;
   160dc:	687b      	ldr	r3, [r7, #4]
   160de:	f04f 0200 	mov.w	r2, #0
   160e2:	601a      	str	r2, [r3, #0]
        p_dma_ch_reg->DestAddr    = 0u;
   160e4:	687b      	ldr	r3, [r7, #4]
   160e6:	f04f 0200 	mov.w	r2, #0
   160ea:	605a      	str	r2, [r3, #4]
        p_dma_ch_reg->LLI         = 0u;
   160ec:	687b      	ldr	r3, [r7, #4]
   160ee:	f04f 0200 	mov.w	r2, #0
   160f2:	609a      	str	r2, [r3, #8]
        p_dma_ch_reg->Ctrl        = DEF_BIT_NONE;
   160f4:	687b      	ldr	r3, [r7, #4]
   160f6:	f04f 0200 	mov.w	r2, #0
   160fa:	60da      	str	r2, [r3, #12]
        p_dma_ch_reg->Cfg         = DEF_BIT_NONE;
   160fc:	687b      	ldr	r3, [r7, #4]
   160fe:	f04f 0200 	mov.w	r2, #0
   16102:	611a      	str	r2, [r3, #16]
    
    p_dma_reg            = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;
    p_dma_reg->IntTCClr  = DEF_INT_08_MASK;                     /* Clear all pending interrupts.                        */
    p_dma_reg->IntErrClr = DEF_INT_08_MASK;
                                                                /* Initialize DMA channels register & table             */
    for (ch_nbr = 0u; ch_nbr < CSP_DMA_CH_MAX_NBR; ch_nbr++) {
   16104:	7bfb      	ldrb	r3, [r7, #15]
   16106:	f103 0301 	add.w	r3, r3, #1
   1610a:	73fb      	strb	r3, [r7, #15]
   1610c:	7bfb      	ldrb	r3, [r7, #15]
   1610e:	2b07      	cmp	r3, #7
   16110:	d9c2      	bls.n	16098 <CSP_DMA_InitExt+0x3c>
        p_dma_ch_reg->LLI         = 0u;
        p_dma_ch_reg->Ctrl        = DEF_BIT_NONE;
        p_dma_ch_reg->Cfg         = DEF_BIT_NONE;
    }

    p_dma_reg->Cfg = CSP_DMA_REG_CFG_DMA_EN;                    /* Enable DMA controller.                               */
   16112:	68bb      	ldr	r3, [r7, #8]
   16114:	f04f 0201 	mov.w	r2, #1
   16118:	631a      	str	r2, [r3, #48]	; 0x30

 
    (void)CSP_IntVectReg((CSP_DEV_NBR   )CSP_INT_CTRL_NBR_MAIN, /* Install global DMA interrupt handler.                */
   1611a:	f04f 0000 	mov.w	r0, #0
   1611e:	f04f 011a 	mov.w	r1, #26
   16122:	f646 02a9 	movw	r2, #26793	; 0x68a9
   16126:	f2c0 0201 	movt	r2, #1
   1612a:	f04f 0300 	mov.w	r3, #0
   1612e:	f7ff fc89 	bl	15a44 <CSP_IntVectReg>
                         (CSP_DEV_NBR   )CSP_INT_SRC_NBR_DMA_00,
                         (CPU_FNCT_PTR  )CSP_DMA_IntHandler,
                         (void         *)0);
    
    CSP_IntEn(CSP_INT_CTRL_NBR_MAIN, 
   16132:	f04f 0000 	mov.w	r0, #0
   16136:	f04f 011a 	mov.w	r1, #26
   1613a:	f7ff fbef 	bl	1591c <CSP_IntEn>
              CSP_INT_SRC_NBR_DMA_00);
                            
    return (DEF_OK);
   1613e:	f04f 0301 	mov.w	r3, #1
}
   16142:	4618      	mov	r0, r3
   16144:	f107 0710 	add.w	r7, r7, #16
   16148:	46bd      	mov	sp, r7
   1614a:	bd80      	pop	{r7, pc}

0001614c <CSP_DMA_CH_AllocExt>:
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_DMA_CH_AllocExt (CSP_OPT      prio,
                                  CSP_DEV_NBR *p_ch_nbr)
{
   1614c:	b580      	push	{r7, lr}
   1614e:	b086      	sub	sp, #24
   16150:	af00      	add	r7, sp, #0
   16152:	4603      	mov	r3, r0
   16154:	6039      	str	r1, [r7, #0]
   16156:	80fb      	strh	r3, [r7, #6]
    CPU_INT08U   ch_ix;
    CPU_INT08U   ch_nbr;
    CPU_INT08U   ch_alloc;
    CPU_BOOLEAN  found;
    
    CPU_SR_ALLOC();
   16158:	f04f 0300 	mov.w	r3, #0
   1615c:	613b      	str	r3, [r7, #16]

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if ((prio  > CSP_DMA_CH_PRIO_LOWEST   ) &&
   1615e:	88fb      	ldrh	r3, [r7, #6]
   16160:	2b00      	cmp	r3, #0
   16162:	d008      	beq.n	16176 <CSP_DMA_CH_AllocExt+0x2a>
   16164:	88fb      	ldrh	r3, [r7, #6]
   16166:	2b08      	cmp	r3, #8
   16168:	d005      	beq.n	16176 <CSP_DMA_CH_AllocExt+0x2a>
        (prio != CSP_DMA_CH_PRIO_ANY_LOW  ) &&
   1616a:	88fb      	ldrh	r3, [r7, #6]
   1616c:	2b09      	cmp	r3, #9
   1616e:	d002      	beq.n	16176 <CSP_DMA_CH_AllocExt+0x2a>
        (prio != CSP_DMA_CH_PRIO_ANY_HIGH)) {
        return (DEF_FAIL);    
   16170:	f04f 0300 	mov.w	r3, #0
   16174:	e08e      	b.n	16294 <CSP_DMA_CH_AllocExt+0x148>
    }

    if (p_ch_nbr == (CSP_DEV_NBR *)0) {
   16176:	683b      	ldr	r3, [r7, #0]
   16178:	2b00      	cmp	r3, #0
   1617a:	d102      	bne.n	16182 <CSP_DMA_CH_AllocExt+0x36>
        return (DEF_FAIL);
   1617c:	f04f 0300 	mov.w	r3, #0
   16180:	e088      	b.n	16294 <CSP_DMA_CH_AllocExt+0x148>
    }
#endif

    found    = DEF_NO;
   16182:	f04f 0300 	mov.w	r3, #0
   16186:	753b      	strb	r3, [r7, #20]
    ch_alloc = 0u;
   16188:	f04f 0300 	mov.w	r3, #0
   1618c:	757b      	strb	r3, [r7, #21]

    if ((prio == CSP_DMA_CH_PRIO_ANY_LOW  ) ||
   1618e:	88fb      	ldrh	r3, [r7, #6]
   16190:	2b08      	cmp	r3, #8
   16192:	d002      	beq.n	1619a <CSP_DMA_CH_AllocExt+0x4e>
   16194:	88fb      	ldrh	r3, [r7, #6]
   16196:	2b09      	cmp	r3, #9
   16198:	d149      	bne.n	1622e <CSP_DMA_CH_AllocExt+0xe2>
        (prio == CSP_DMA_CH_PRIO_ANY_HIGH)) {        
        ch_nbr = CSP_DMA_CH_MAX_NBR;
   1619a:	f04f 0308 	mov.w	r3, #8
   1619e:	75bb      	strb	r3, [r7, #22]
        
        if (prio == CSP_DMA_CH_PRIO_ANY_LOW) {
   161a0:	88fb      	ldrh	r3, [r7, #6]
   161a2:	2b08      	cmp	r3, #8
   161a4:	d103      	bne.n	161ae <CSP_DMA_CH_AllocExt+0x62>
            ch_ix = CSP_DMA_CH_MAX_NBR - 1u;
   161a6:	f04f 0307 	mov.w	r3, #7
   161aa:	75fb      	strb	r3, [r7, #23]
        } else {
            ch_ix = 0u;
        }
                
        while ((found  == DEF_NO) &&                            /* Search for the first channel available.              */
   161ac:	e038      	b.n	16220 <CSP_DMA_CH_AllocExt+0xd4>
        ch_nbr = CSP_DMA_CH_MAX_NBR;
        
        if (prio == CSP_DMA_CH_PRIO_ANY_LOW) {
            ch_ix = CSP_DMA_CH_MAX_NBR - 1u;
        } else {
            ch_ix = 0u;
   161ae:	f04f 0300 	mov.w	r3, #0
   161b2:	75fb      	strb	r3, [r7, #23]
        }
                
        while ((found  == DEF_NO) &&                            /* Search for the first channel available.              */
   161b4:	e034      	b.n	16220 <CSP_DMA_CH_AllocExt+0xd4>
               (ch_nbr != 0     )) {
            p_ch_tbl = &CSP_DMA_ChTbl[ch_ix];    
   161b6:	7dfa      	ldrb	r2, [r7, #23]
   161b8:	4613      	mov	r3, r2
   161ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
   161be:	189b      	adds	r3, r3, r2
   161c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   161c4:	461a      	mov	r2, r3
   161c6:	f643 03b8 	movw	r3, #14520	; 0x38b8
   161ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
   161ce:	18d3      	adds	r3, r2, r3
   161d0:	60fb      	str	r3, [r7, #12]
                                                                /* If the channel is available ...                      */
            if (p_ch_tbl->State == CSP_DMA_CH_STATE_FREE) {                
   161d2:	68fb      	ldr	r3, [r7, #12]
   161d4:	781b      	ldrb	r3, [r3, #0]
   161d6:	2b00      	cmp	r3, #0
   161d8:	d112      	bne.n	16200 <CSP_DMA_CH_AllocExt+0xb4>
                
                CPU_CRITICAL_ENTER();                           /* ... Mark the channel as 'ALLOC' (allocated) in ...   */                                                                
   161da:	f001 fe03 	bl	17de4 <CPU_SR_Save>
   161de:	6138      	str	r0, [r7, #16]
   161e0:	f7eb fb6a 	bl	18b8 <CPU_IntDisMeasStart>
                p_ch_tbl->State = CSP_DMA_CH_STATE_ALLOC;       /* ... in the channel table.                            */
   161e4:	68fb      	ldr	r3, [r7, #12]
   161e6:	f04f 0201 	mov.w	r2, #1
   161ea:	701a      	strb	r2, [r3, #0]
                CPU_CRITICAL_EXIT();                
   161ec:	f7eb fb90 	bl	1910 <CPU_IntDisMeasStop>
   161f0:	6938      	ldr	r0, [r7, #16]
   161f2:	f001 fdfb 	bl	17dec <CPU_SR_Restore>
                ch_alloc = ch_ix;
   161f6:	7dfb      	ldrb	r3, [r7, #23]
   161f8:	757b      	strb	r3, [r7, #21]
                found    = DEF_TRUE;
   161fa:	f04f 0301 	mov.w	r3, #1
   161fe:	753b      	strb	r3, [r7, #20]
            }
            ch_nbr--;
   16200:	7dbb      	ldrb	r3, [r7, #22]
   16202:	f103 33ff 	add.w	r3, r3, #4294967295
   16206:	75bb      	strb	r3, [r7, #22]
            if (prio == CSP_DMA_CH_PRIO_ANY_LOW) {              /* Search from low to hight.                            */
   16208:	88fb      	ldrh	r3, [r7, #6]
   1620a:	2b08      	cmp	r3, #8
   1620c:	d104      	bne.n	16218 <CSP_DMA_CH_AllocExt+0xcc>
                ch_ix--;
   1620e:	7dfb      	ldrb	r3, [r7, #23]
   16210:	f103 33ff 	add.w	r3, r3, #4294967295
   16214:	75fb      	strb	r3, [r7, #23]
   16216:	e003      	b.n	16220 <CSP_DMA_CH_AllocExt+0xd4>
            } else {
                ch_ix++;                                        /* Search from high to low.                             */
   16218:	7dfb      	ldrb	r3, [r7, #23]
   1621a:	f103 0301 	add.w	r3, r3, #1
   1621e:	75fb      	strb	r3, [r7, #23]
            ch_ix = CSP_DMA_CH_MAX_NBR - 1u;
        } else {
            ch_ix = 0u;
        }
                
        while ((found  == DEF_NO) &&                            /* Search for the first channel available.              */
   16220:	7d3b      	ldrb	r3, [r7, #20]
   16222:	2b00      	cmp	r3, #0
   16224:	d129      	bne.n	1627a <CSP_DMA_CH_AllocExt+0x12e>
   16226:	7dbb      	ldrb	r3, [r7, #22]
   16228:	2b00      	cmp	r3, #0
   1622a:	d1c4      	bne.n	161b6 <CSP_DMA_CH_AllocExt+0x6a>
#endif

    found    = DEF_NO;
    ch_alloc = 0u;

    if ((prio == CSP_DMA_CH_PRIO_ANY_LOW  ) ||
   1622c:	e025      	b.n	1627a <CSP_DMA_CH_AllocExt+0x12e>
            } else {
                ch_ix++;                                        /* Search from high to low.                             */
            }
        }
    } else {
        p_ch_tbl = &CSP_DMA_ChTbl[prio];
   1622e:	88fa      	ldrh	r2, [r7, #6]
   16230:	4613      	mov	r3, r2
   16232:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16236:	189b      	adds	r3, r3, r2
   16238:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1623c:	461a      	mov	r2, r3
   1623e:	f643 03b8 	movw	r3, #14520	; 0x38b8
   16242:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16246:	18d3      	adds	r3, r2, r3
   16248:	60fb      	str	r3, [r7, #12]
        if (p_ch_tbl->State == CSP_DMA_CH_STATE_FREE) {
   1624a:	68fb      	ldr	r3, [r7, #12]
   1624c:	781b      	ldrb	r3, [r3, #0]
   1624e:	2b00      	cmp	r3, #0
   16250:	d114      	bne.n	1627c <CSP_DMA_CH_AllocExt+0x130>
            
            CPU_CRITICAL_ENTER();
   16252:	f001 fdc7 	bl	17de4 <CPU_SR_Save>
   16256:	6138      	str	r0, [r7, #16]
   16258:	f7eb fb2e 	bl	18b8 <CPU_IntDisMeasStart>
            p_ch_tbl->State = CSP_DMA_CH_STATE_ALLOC;            
   1625c:	68fb      	ldr	r3, [r7, #12]
   1625e:	f04f 0201 	mov.w	r2, #1
   16262:	701a      	strb	r2, [r3, #0]
            CPU_CRITICAL_EXIT();
   16264:	f7eb fb54 	bl	1910 <CPU_IntDisMeasStop>
   16268:	6938      	ldr	r0, [r7, #16]
   1626a:	f001 fdbf 	bl	17dec <CPU_SR_Restore>
            
            ch_alloc = prio;
   1626e:	88fb      	ldrh	r3, [r7, #6]
   16270:	757b      	strb	r3, [r7, #21]
            found    = DEF_YES;
   16272:	f04f 0301 	mov.w	r3, #1
   16276:	753b      	strb	r3, [r7, #20]
   16278:	e000      	b.n	1627c <CSP_DMA_CH_AllocExt+0x130>
#endif

    found    = DEF_NO;
    ch_alloc = 0u;

    if ((prio == CSP_DMA_CH_PRIO_ANY_LOW  ) ||
   1627a:	bf00      	nop
            ch_alloc = prio;
            found    = DEF_YES;
        }    
    }

    if (found == DEF_NO) {
   1627c:	7d3b      	ldrb	r3, [r7, #20]
   1627e:	2b00      	cmp	r3, #0
   16280:	d102      	bne.n	16288 <CSP_DMA_CH_AllocExt+0x13c>
        return (DEF_FAIL);
   16282:	f04f 0300 	mov.w	r3, #0
   16286:	e005      	b.n	16294 <CSP_DMA_CH_AllocExt+0x148>
    }

    *p_ch_nbr = (CSP_DEV_NBR)ch_alloc;
   16288:	7d7b      	ldrb	r3, [r7, #21]
   1628a:	b29a      	uxth	r2, r3
   1628c:	683b      	ldr	r3, [r7, #0]
   1628e:	801a      	strh	r2, [r3, #0]

    return (DEF_OK);
   16290:	f04f 0301 	mov.w	r3, #1
}
   16294:	4618      	mov	r0, r3
   16296:	f107 0718 	add.w	r7, r7, #24
   1629a:	46bd      	mov	sp, r7
   1629c:	bd80      	pop	{r7, pc}
   1629e:	bf00      	nop

000162a0 <CSP_DMA_CH_FreeExt>:
*********************************************************************************************************
*/

CPU_BOOLEAN  CSP_DMA_CH_FreeExt (CSP_DEV_NBR  ch_nbr)
                               
{
   162a0:	b580      	push	{r7, lr}
   162a2:	b086      	sub	sp, #24
   162a4:	af00      	add	r7, sp, #0
   162a6:	4603      	mov	r3, r0
   162a8:	80fb      	strh	r3, [r7, #6]
    CSP_DMA_REG     *p_dma_reg;    
    CSP_DMA_CH_REG  *p_dma_ch_reg;
    CSP_DMA_CH      *p_ch_tbl;
    
    CPU_SR_ALLOC();
   162aa:	f04f 0300 	mov.w	r3, #0
   162ae:	617b      	str	r3, [r7, #20]

#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    if (ch_nbr > CSP_DMA_CH_MAX_NBR - 1u) {
   162b0:	88fb      	ldrh	r3, [r7, #6]
   162b2:	2b07      	cmp	r3, #7
   162b4:	d902      	bls.n	162bc <CSP_DMA_CH_FreeExt+0x1c>
        return (DEF_FAIL);
   162b6:	f04f 0300 	mov.w	r3, #0
   162ba:	e048      	b.n	1634e <CSP_DMA_CH_FreeExt+0xae>
    }
#endif    

    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;
   162bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   162c0:	f2c5 0300 	movt	r3, #20480	; 0x5000
   162c4:	613b      	str	r3, [r7, #16]
    p_dma_ch_reg = &(p_dma_reg->CHx[ch_nbr]);
   162c6:	693b      	ldr	r3, [r7, #16]
   162c8:	f503 7280 	add.w	r2, r3, #256	; 0x100
   162cc:	88fb      	ldrh	r3, [r7, #6]
   162ce:	ea4f 1343 	mov.w	r3, r3, lsl #5
   162d2:	18d3      	adds	r3, r2, r3
   162d4:	60fb      	str	r3, [r7, #12]
    p_ch_tbl     = &CSP_DMA_ChTbl[ch_nbr];
   162d6:	88fa      	ldrh	r2, [r7, #6]
   162d8:	4613      	mov	r3, r2
   162da:	ea4f 0343 	mov.w	r3, r3, lsl #1
   162de:	189b      	adds	r3, r3, r2
   162e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   162e4:	461a      	mov	r2, r3
   162e6:	f643 03b8 	movw	r3, #14520	; 0x38b8
   162ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
   162ee:	18d3      	adds	r3, r2, r3
   162f0:	60bb      	str	r3, [r7, #8]
        
    CPU_CRITICAL_ENTER();
   162f2:	f001 fd77 	bl	17de4 <CPU_SR_Save>
   162f6:	6178      	str	r0, [r7, #20]
   162f8:	f7eb fade 	bl	18b8 <CPU_IntDisMeasStart>
    p_dma_reg->IntTCClr    = DEF_BIT(ch_nbr);                   /* Clear all pending interrupts.                        */
   162fc:	88fb      	ldrh	r3, [r7, #6]
   162fe:	f04f 0201 	mov.w	r2, #1
   16302:	fa02 f203 	lsl.w	r2, r2, r3
   16306:	693b      	ldr	r3, [r7, #16]
   16308:	609a      	str	r2, [r3, #8]
    p_dma_reg->IntErrClr   = DEF_BIT(ch_nbr);    
   1630a:	88fb      	ldrh	r3, [r7, #6]
   1630c:	f04f 0201 	mov.w	r2, #1
   16310:	fa02 f203 	lsl.w	r2, r2, r3
   16314:	693b      	ldr	r3, [r7, #16]
   16316:	611a      	str	r2, [r3, #16]
    p_ch_tbl->State        = CSP_DMA_CH_STATE_FREE;             /* Free the channel.                                    */
   16318:	68bb      	ldr	r3, [r7, #8]
   1631a:	f04f 0200 	mov.w	r2, #0
   1631e:	701a      	strb	r2, [r3, #0]
    p_dma_ch_reg->SrcAddr  = DEF_BIT_NONE;                      /* Unitialize DMA channel cfg & ctrl registers.         */
   16320:	68fb      	ldr	r3, [r7, #12]
   16322:	f04f 0200 	mov.w	r2, #0
   16326:	601a      	str	r2, [r3, #0]
    p_dma_ch_reg->DestAddr = DEF_BIT_NONE;
   16328:	68fb      	ldr	r3, [r7, #12]
   1632a:	f04f 0200 	mov.w	r2, #0
   1632e:	605a      	str	r2, [r3, #4]
    p_dma_ch_reg->Cfg      = DEF_BIT_NONE;
   16330:	68fb      	ldr	r3, [r7, #12]
   16332:	f04f 0200 	mov.w	r2, #0
   16336:	611a      	str	r2, [r3, #16]
    p_dma_ch_reg->Ctrl     = DEF_BIT_NONE;       
   16338:	68fb      	ldr	r3, [r7, #12]
   1633a:	f04f 0200 	mov.w	r2, #0
   1633e:	60da      	str	r2, [r3, #12]
    CPU_CRITICAL_EXIT();
   16340:	f7eb fae6 	bl	1910 <CPU_IntDisMeasStop>
   16344:	6978      	ldr	r0, [r7, #20]
   16346:	f001 fd51 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   1634a:	f04f 0301 	mov.w	r3, #1
}
   1634e:	4618      	mov	r0, r3
   16350:	f107 0718 	add.w	r7, r7, #24
   16354:	46bd      	mov	sp, r7
   16356:	bd80      	pop	{r7, pc}

00016358 <CSP_DMA_CH_CfgExt>:
                                CSP_OPT       dest_width,
                                CSP_DEV_NBR   src_req,
                                CSP_DEV_NBR   dest_req)
                                

{   CSP_DMA_REG     *p_dma_reg;
   16358:	b580      	push	{r7, lr}
   1635a:	b088      	sub	sp, #32
   1635c:	af00      	add	r7, sp, #0
   1635e:	80f8      	strh	r0, [r7, #6]
   16360:	80b9      	strh	r1, [r7, #4]
   16362:	807a      	strh	r2, [r7, #2]
   16364:	803b      	strh	r3, [r7, #0]
    CSP_DMA_CH_REG  *p_dma_ch_reg;
    CPU_INT32U       reg_cfg;
    CPU_INT32U       reg_ctrl;
    CPU_INT32U       reg_val;
    CPU_SR_ALLOC();
   16366:	f04f 0300 	mov.w	r3, #0
   1636a:	617b      	str	r3, [r7, #20]
    
                                                                /* ------------------ ARGUMENTS CHECKING -------------- */
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    if (ch_nbr > CSP_DMA_CH_MAX_NBR - 1u) {                     /* Invalid channel number?                              */
   1636c:	88fb      	ldrh	r3, [r7, #6]
   1636e:	2b07      	cmp	r3, #7
   16370:	d902      	bls.n	16378 <CSP_DMA_CH_CfgExt+0x20>
        return (DEF_FAIL);
   16372:	f04f 0300 	mov.w	r3, #0
   16376:	e15d      	b.n	16634 <CSP_DMA_CH_CfgExt+0x2dc>
    }
                                                                /* Channel not available?                               */
    if (CSP_DMA_ChTbl[ch_nbr].State != CSP_DMA_CH_STATE_ALLOC) {
   16378:	88f9      	ldrh	r1, [r7, #6]
   1637a:	f643 02b8 	movw	r2, #14520	; 0x38b8
   1637e:	f2c1 0200 	movt	r2, #4096	; 0x1000
   16382:	460b      	mov	r3, r1
   16384:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16388:	185b      	adds	r3, r3, r1
   1638a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1638e:	18d3      	adds	r3, r2, r3
   16390:	781b      	ldrb	r3, [r3, #0]
   16392:	2b01      	cmp	r3, #1
   16394:	d002      	beq.n	1639c <CSP_DMA_CH_CfgExt+0x44>
        return (DEF_FAIL);
   16396:	f04f 0300 	mov.w	r3, #0
   1639a:	e14b      	b.n	16634 <CSP_DMA_CH_CfgExt+0x2dc>
    }
    
    if ((src_width != CPU_WORD_SIZE_08) &&                      /* Check src width parameter.                           */
   1639c:	883b      	ldrh	r3, [r7, #0]
   1639e:	2b01      	cmp	r3, #1
   163a0:	d008      	beq.n	163b4 <CSP_DMA_CH_CfgExt+0x5c>
   163a2:	883b      	ldrh	r3, [r7, #0]
   163a4:	2b02      	cmp	r3, #2
   163a6:	d005      	beq.n	163b4 <CSP_DMA_CH_CfgExt+0x5c>
        (src_width != CPU_WORD_SIZE_16) &&
   163a8:	883b      	ldrh	r3, [r7, #0]
   163aa:	2b04      	cmp	r3, #4
   163ac:	d002      	beq.n	163b4 <CSP_DMA_CH_CfgExt+0x5c>
        (src_width != CPU_WORD_SIZE_32)) {
        return (DEF_FAIL);
   163ae:	f04f 0300 	mov.w	r3, #0
   163b2:	e13f      	b.n	16634 <CSP_DMA_CH_CfgExt+0x2dc>
    }

    if ((dest_width != CPU_WORD_SIZE_08) &&                     /* Check src width parameter.                           */
   163b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   163b6:	2b01      	cmp	r3, #1
   163b8:	d008      	beq.n	163cc <CSP_DMA_CH_CfgExt+0x74>
   163ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   163bc:	2b02      	cmp	r3, #2
   163be:	d005      	beq.n	163cc <CSP_DMA_CH_CfgExt+0x74>
        (dest_width != CPU_WORD_SIZE_16) &&
   163c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   163c2:	2b04      	cmp	r3, #4
   163c4:	d002      	beq.n	163cc <CSP_DMA_CH_CfgExt+0x74>
        (dest_width != CPU_WORD_SIZE_32)) {
        return (DEF_FAIL);
   163c6:	f04f 0300 	mov.w	r3, #0
   163ca:	e133      	b.n	16634 <CSP_DMA_CH_CfgExt+0x2dc>
    }
#endif
                                                                /* Channel configuration.                               */
    reg_cfg  = DEF_BIT_NONE; 
   163cc:	f04f 0300 	mov.w	r3, #0
   163d0:	61fb      	str	r3, [r7, #28]
    reg_ctrl = DEF_BIT_NONE;
   163d2:	f04f 0300 	mov.w	r3, #0
   163d6:	613b      	str	r3, [r7, #16]

    if (src_burst_size == 255u) {                               /* Set the source/destination burst size.               */
   163d8:	887b      	ldrh	r3, [r7, #2]
   163da:	2bff      	cmp	r3, #255	; 0xff
   163dc:	d103      	bne.n	163e6 <CSP_DMA_CH_CfgExt+0x8e>
       reg_val   = 7u;
   163de:	f04f 0307 	mov.w	r3, #7
   163e2:	61bb      	str	r3, [r7, #24]
   163e4:	e00e      	b.n	16404 <CSP_DMA_CH_CfgExt+0xac>
    } else if (src_burst_size >= 4u) {
   163e6:	887b      	ldrh	r3, [r7, #2]
   163e8:	2b03      	cmp	r3, #3
   163ea:	d908      	bls.n	163fe <CSP_DMA_CH_CfgExt+0xa6>
        reg_val  = (DEF_INT_32_NBR_BITS - CPU_CntLeadZeros(src_burst_size) - 2u);        
   163ec:	887b      	ldrh	r3, [r7, #2]
   163ee:	4618      	mov	r0, r3
   163f0:	f001 fcff 	bl	17df2 <CPU_CntLeadZeros>
   163f4:	4603      	mov	r3, r0
   163f6:	f1c3 031e 	rsb	r3, r3, #30
   163fa:	61bb      	str	r3, [r7, #24]
   163fc:	e002      	b.n	16404 <CSP_DMA_CH_CfgExt+0xac>
    } else {
        reg_val  = DEF_BIT_NONE; 
   163fe:	f04f 0300 	mov.w	r3, #0
   16402:	61bb      	str	r3, [r7, #24]
    }
            
    DEF_BIT_SET(reg_ctrl, reg_val << 12u);
   16404:	69bb      	ldr	r3, [r7, #24]
   16406:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1640a:	693a      	ldr	r2, [r7, #16]
   1640c:	4313      	orrs	r3, r2
   1640e:	613b      	str	r3, [r7, #16]

    if (dest_burst_size == 255u) {
   16410:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   16412:	2bff      	cmp	r3, #255	; 0xff
   16414:	d103      	bne.n	1641e <CSP_DMA_CH_CfgExt+0xc6>
       reg_val  = 7u;
   16416:	f04f 0307 	mov.w	r3, #7
   1641a:	61bb      	str	r3, [r7, #24]
   1641c:	e00e      	b.n	1643c <CSP_DMA_CH_CfgExt+0xe4>
    } else if (dest_burst_size >= 4u) {
   1641e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   16420:	2b03      	cmp	r3, #3
   16422:	d908      	bls.n	16436 <CSP_DMA_CH_CfgExt+0xde>
        reg_val = (DEF_INT_32_NBR_BITS - CPU_CntLeadZeros(dest_burst_size) - 2u);        
   16424:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   16426:	4618      	mov	r0, r3
   16428:	f001 fce3 	bl	17df2 <CPU_CntLeadZeros>
   1642c:	4603      	mov	r3, r0
   1642e:	f1c3 031e 	rsb	r3, r3, #30
   16432:	61bb      	str	r3, [r7, #24]
   16434:	e002      	b.n	1643c <CSP_DMA_CH_CfgExt+0xe4>
    } else {
        reg_val = DEF_BIT_NONE;
   16436:	f04f 0300 	mov.w	r3, #0
   1643a:	61bb      	str	r3, [r7, #24]
    }

    DEF_BIT_SET(reg_ctrl, reg_val           << 15u);
   1643c:	69bb      	ldr	r3, [r7, #24]
   1643e:	ea4f 33c3 	mov.w	r3, r3, lsl #15
   16442:	693a      	ldr	r2, [r7, #16]
   16444:	4313      	orrs	r3, r2
   16446:	613b      	str	r3, [r7, #16]
    DEF_BIT_SET(reg_ctrl, (src_width  - 1u) << 18u);
   16448:	883b      	ldrh	r3, [r7, #0]
   1644a:	f103 33ff 	add.w	r3, r3, #4294967295
   1644e:	ea4f 4383 	mov.w	r3, r3, lsl #18
   16452:	693a      	ldr	r2, [r7, #16]
   16454:	4313      	orrs	r3, r2
   16456:	613b      	str	r3, [r7, #16]
    DEF_BIT_SET(reg_ctrl, (dest_width - 1u) << 21u);
   16458:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   1645a:	f103 33ff 	add.w	r3, r3, #4294967295
   1645e:	ea4f 5343 	mov.w	r3, r3, lsl #21
   16462:	693a      	ldr	r2, [r7, #16]
   16464:	4313      	orrs	r3, r2
   16466:	613b      	str	r3, [r7, #16]
    


                                                                /* Set the transfer type.                               */
    switch (xfer_type) {
   16468:	88bb      	ldrh	r3, [r7, #4]
   1646a:	2b03      	cmp	r3, #3
   1646c:	d819      	bhi.n	164a2 <CSP_DMA_CH_CfgExt+0x14a>
   1646e:	a201      	add	r2, pc, #4	; (adr r2, 16474 <CSP_DMA_CH_CfgExt+0x11c>)
   16470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16474:	000164a9 	.word	0x000164a9
   16478:	0001648f 	.word	0x0001648f
   1647c:	00016485 	.word	0x00016485
   16480:	00016499 	.word	0x00016499
        case CSP_DMA_XFER_TYPE_MEM_TO_PER:
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_MEM_TO_PER);              
   16484:	69fb      	ldr	r3, [r7, #28]
   16486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1648a:	61fb      	str	r3, [r7, #28]
             break;
   1648c:	e00d      	b.n	164aa <CSP_DMA_CH_CfgExt+0x152>
        case CSP_DMA_XFER_TYPE_MEM_TO_MEM:
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_MEM_TO_MEM);              
             break;

        case CSP_DMA_XFER_TYPE_PER_TO_MEM:
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_PER_TO_MEM);              
   1648e:	69fb      	ldr	r3, [r7, #28]
   16490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   16494:	61fb      	str	r3, [r7, #28]
             break;
   16496:	e008      	b.n	164aa <CSP_DMA_CH_CfgExt+0x152>

        case CSP_DMA_XFER_TYPE_PER_TO_PER:
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_PER_TO_PER);
   16498:	69fb      	ldr	r3, [r7, #28]
   1649a:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
   1649e:	61fb      	str	r3, [r7, #28]
             break;
   164a0:	e003      	b.n	164aa <CSP_DMA_CH_CfgExt+0x152>
   
        default:
             return (DEF_FAIL);
   164a2:	f04f 0300 	mov.w	r3, #0
   164a6:	e0c5      	b.n	16634 <CSP_DMA_CH_CfgExt+0x2dc>
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_MEM_TO_PER);              
             break;

        case CSP_DMA_XFER_TYPE_MEM_TO_MEM:
             DEF_BIT_SET(reg_cfg, CSP_DMA_BIT_CH_CFG_XFER_MEM_TO_MEM);              
             break;
   164a8:	bf00      	nop
        default:
             return (DEF_FAIL);
    }
                                                                /* Configure source request signal  (see note #3)       */
                                                                /* ... transfer from peripheral?                        */
    if (((xfer_type == CSP_DMA_XFER_TYPE_PER_TO_MEM       )  || 
   164aa:	88bb      	ldrh	r3, [r7, #4]
   164ac:	2b01      	cmp	r3, #1
   164ae:	d002      	beq.n	164b6 <CSP_DMA_CH_CfgExt+0x15e>
   164b0:	88bb      	ldrh	r3, [r7, #4]
   164b2:	2b03      	cmp	r3, #3
   164b4:	d14c      	bne.n	16550 <CSP_DMA_CH_CfgExt+0x1f8>
         (xfer_type == CSP_DMA_XFER_TYPE_PER_TO_PER       ))) {    
        
        if (src_req < CSP_DMA_XFER_PER_REQ_UART_00_TX) {
   164b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   164b8:	2b07      	cmp	r3, #7
   164ba:	d941      	bls.n	16540 <CSP_DMA_CH_CfgExt+0x1e8>
            ;    
        } else if (src_req < CSP_DMA_XFER_PER_REQ_TMR_00_MATCH_0) {
   164bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   164be:	2b0f      	cmp	r3, #15
   164c0:	d81e      	bhi.n	16500 <CSP_DMA_CH_CfgExt+0x1a8>
            CPU_CRITICAL_ENTER();
   164c2:	f001 fc8f 	bl	17de4 <CPU_SR_Save>
   164c6:	6178      	str	r0, [r7, #20]
   164c8:	f7eb f9f6 	bl	18b8 <CPU_IntDisMeasStart>
            DEF_BIT_CLR(CSP_DMA_REG_REQ_SEL, DEF_BIT(src_req - CSP_DMA_XFER_PER_REQ_UART_00_TX));
   164cc:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   164d0:	f2c4 030f 	movt	r3, #16399	; 0x400f
   164d4:	f24c 12c4 	movw	r2, #49604	; 0xc1c4
   164d8:	f2c4 020f 	movt	r2, #16399	; 0x400f
   164dc:	6811      	ldr	r1, [r2, #0]
   164de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   164e0:	f1a2 0208 	sub.w	r2, r2, #8
   164e4:	f04f 0001 	mov.w	r0, #1
   164e8:	fa00 f202 	lsl.w	r2, r0, r2
   164ec:	ea6f 0202 	mvn.w	r2, r2
   164f0:	400a      	ands	r2, r1
   164f2:	601a      	str	r2, [r3, #0]
            CPU_CRITICAL_EXIT();
   164f4:	f7eb fa0c 	bl	1910 <CPU_IntDisMeasStop>
   164f8:	6978      	ldr	r0, [r7, #20]
   164fa:	f001 fc77 	bl	17dec <CPU_SR_Restore>
   164fe:	e01f      	b.n	16540 <CSP_DMA_CH_CfgExt+0x1e8>
        } else {
            src_req -= CSP_DMA_XFER_PER_REQ_UART_00_TX;
   16500:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   16502:	f1a3 0308 	sub.w	r3, r3, #8
   16506:	863b      	strh	r3, [r7, #48]	; 0x30
   
            CPU_CRITICAL_ENTER();
   16508:	f001 fc6c 	bl	17de4 <CPU_SR_Save>
   1650c:	6178      	str	r0, [r7, #20]
   1650e:	f7eb f9d3 	bl	18b8 <CPU_IntDisMeasStart>
            DEF_BIT_SET(CSP_DMA_REG_REQ_SEL, DEF_BIT(src_req - CSP_DMA_XFER_PER_REQ_UART_00_TX)); 
   16512:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   16516:	f2c4 030f 	movt	r3, #16399	; 0x400f
   1651a:	f24c 12c4 	movw	r2, #49604	; 0xc1c4
   1651e:	f2c4 020f 	movt	r2, #16399	; 0x400f
   16522:	6811      	ldr	r1, [r2, #0]
   16524:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   16526:	f1a2 0208 	sub.w	r2, r2, #8
   1652a:	f04f 0001 	mov.w	r0, #1
   1652e:	fa00 f202 	lsl.w	r2, r0, r2
   16532:	430a      	orrs	r2, r1
   16534:	601a      	str	r2, [r3, #0]
            CPU_CRITICAL_EXIT();
   16536:	f7eb f9eb 	bl	1910 <CPU_IntDisMeasStop>
   1653a:	6978      	ldr	r0, [r7, #20]
   1653c:	f001 fc56 	bl	17dec <CPU_SR_Restore>
        }
        DEF_BIT_SET(reg_cfg, (src_req & CSP_DMA_MSK_CH_CFG_PER_REQ) << 1u);                
   16540:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   16542:	f003 030f 	and.w	r3, r3, #15
   16546:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1654a:	69fa      	ldr	r2, [r7, #28]
   1654c:	4313      	orrs	r3, r2
   1654e:	61fb      	str	r3, [r7, #28]
    }
    
    
    if (((xfer_type  == CSP_DMA_XFER_TYPE_MEM_TO_PER       )  || 
   16550:	88bb      	ldrh	r3, [r7, #4]
   16552:	2b02      	cmp	r3, #2
   16554:	d002      	beq.n	1655c <CSP_DMA_CH_CfgExt+0x204>
   16556:	88bb      	ldrh	r3, [r7, #4]
   16558:	2b03      	cmp	r3, #3
   1655a:	d14c      	bne.n	165f6 <CSP_DMA_CH_CfgExt+0x29e>
         (xfer_type  == CSP_DMA_XFER_TYPE_PER_TO_PER       ))) {

        if (dest_req < CSP_DMA_XFER_PER_REQ_UART_00_TX) {
   1655c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1655e:	2b07      	cmp	r3, #7
   16560:	d941      	bls.n	165e6 <CSP_DMA_CH_CfgExt+0x28e>
            ;    
        } else if (dest_req < CSP_DMA_XFER_PER_REQ_TMR_00_MATCH_0) {
   16562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   16564:	2b0f      	cmp	r3, #15
   16566:	d81e      	bhi.n	165a6 <CSP_DMA_CH_CfgExt+0x24e>
            CPU_CRITICAL_ENTER();
   16568:	f001 fc3c 	bl	17de4 <CPU_SR_Save>
   1656c:	6178      	str	r0, [r7, #20]
   1656e:	f7eb f9a3 	bl	18b8 <CPU_IntDisMeasStart>
            DEF_BIT_CLR(CSP_DMA_REG_REQ_SEL, DEF_BIT(dest_req - CSP_DMA_XFER_PER_REQ_UART_00_TX));
   16572:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   16576:	f2c4 030f 	movt	r3, #16399	; 0x400f
   1657a:	f24c 12c4 	movw	r2, #49604	; 0xc1c4
   1657e:	f2c4 020f 	movt	r2, #16399	; 0x400f
   16582:	6811      	ldr	r1, [r2, #0]
   16584:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   16586:	f1a2 0208 	sub.w	r2, r2, #8
   1658a:	f04f 0001 	mov.w	r0, #1
   1658e:	fa00 f202 	lsl.w	r2, r0, r2
   16592:	ea6f 0202 	mvn.w	r2, r2
   16596:	400a      	ands	r2, r1
   16598:	601a      	str	r2, [r3, #0]
            CPU_CRITICAL_EXIT();
   1659a:	f7eb f9b9 	bl	1910 <CPU_IntDisMeasStop>
   1659e:	6978      	ldr	r0, [r7, #20]
   165a0:	f001 fc24 	bl	17dec <CPU_SR_Restore>
   165a4:	e01f      	b.n	165e6 <CSP_DMA_CH_CfgExt+0x28e>
        } else {
            dest_req -= CSP_DMA_XFER_PER_REQ_UART_00_TX;
   165a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   165a8:	f1a3 0308 	sub.w	r3, r3, #8
   165ac:	86bb      	strh	r3, [r7, #52]	; 0x34

            CPU_CRITICAL_ENTER();            
   165ae:	f001 fc19 	bl	17de4 <CPU_SR_Save>
   165b2:	6178      	str	r0, [r7, #20]
   165b4:	f7eb f980 	bl	18b8 <CPU_IntDisMeasStart>
            DEF_BIT_SET(CSP_DMA_REG_REQ_SEL, DEF_BIT(dest_req - CSP_DMA_XFER_PER_REQ_UART_00_TX)); 
   165b8:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   165bc:	f2c4 030f 	movt	r3, #16399	; 0x400f
   165c0:	f24c 12c4 	movw	r2, #49604	; 0xc1c4
   165c4:	f2c4 020f 	movt	r2, #16399	; 0x400f
   165c8:	6811      	ldr	r1, [r2, #0]
   165ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   165cc:	f1a2 0208 	sub.w	r2, r2, #8
   165d0:	f04f 0001 	mov.w	r0, #1
   165d4:	fa00 f202 	lsl.w	r2, r0, r2
   165d8:	430a      	orrs	r2, r1
   165da:	601a      	str	r2, [r3, #0]
            CPU_CRITICAL_EXIT();
   165dc:	f7eb f998 	bl	1910 <CPU_IntDisMeasStop>
   165e0:	6978      	ldr	r0, [r7, #20]
   165e2:	f001 fc03 	bl	17dec <CPU_SR_Restore>
        }
             
        DEF_BIT_SET(reg_cfg, (dest_req & CSP_DMA_MSK_CH_CFG_PER_REQ) << 6u);        
   165e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   165e8:	f003 030f 	and.w	r3, r3, #15
   165ec:	ea4f 1383 	mov.w	r3, r3, lsl #6
   165f0:	69fa      	ldr	r2, [r7, #28]
   165f2:	4313      	orrs	r3, r2
   165f4:	61fb      	str	r3, [r7, #28]
    }

    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;                  
   165f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   165fa:	f2c5 0300 	movt	r3, #20480	; 0x5000
   165fe:	60fb      	str	r3, [r7, #12]
    p_dma_ch_reg = &(p_dma_reg->CHx[ch_nbr]);
   16600:	68fb      	ldr	r3, [r7, #12]
   16602:	f503 7280 	add.w	r2, r3, #256	; 0x100
   16606:	88fb      	ldrh	r3, [r7, #6]
   16608:	ea4f 1343 	mov.w	r3, r3, lsl #5
   1660c:	18d3      	adds	r3, r2, r3
   1660e:	60bb      	str	r3, [r7, #8]
    
    CPU_CRITICAL_ENTER();
   16610:	f001 fbe8 	bl	17de4 <CPU_SR_Save>
   16614:	6178      	str	r0, [r7, #20]
   16616:	f7eb f94f 	bl	18b8 <CPU_IntDisMeasStart>
    p_dma_ch_reg->Cfg      = (CPU_INT32U)reg_cfg;   
   1661a:	68bb      	ldr	r3, [r7, #8]
   1661c:	69fa      	ldr	r2, [r7, #28]
   1661e:	611a      	str	r2, [r3, #16]
    p_dma_ch_reg->Ctrl     = (CPU_INT32U)reg_ctrl;       
   16620:	68bb      	ldr	r3, [r7, #8]
   16622:	693a      	ldr	r2, [r7, #16]
   16624:	60da      	str	r2, [r3, #12]
    CPU_CRITICAL_EXIT();
   16626:	f7eb f973 	bl	1910 <CPU_IntDisMeasStop>
   1662a:	6978      	ldr	r0, [r7, #20]
   1662c:	f001 fbde 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   16630:	f04f 0301 	mov.w	r3, #1
}
   16634:	4618      	mov	r0, r3
   16636:	f107 0720 	add.w	r7, r7, #32
   1663a:	46bd      	mov	sp, r7
   1663c:	bd80      	pop	{r7, pc}
   1663e:	bf00      	nop

00016640 <CSP_DMA_XferStartExt>:
                                   void           *p_dest,
                                   void           *p_src,                                   
                                   CPU_SIZE_T      xfer_size,
                                   CSP_OPT_FLAGS   opt)

{   
   16640:	b580      	push	{r7, lr}
   16642:	b088      	sub	sp, #32
   16644:	af00      	add	r7, sp, #0
   16646:	60b9      	str	r1, [r7, #8]
   16648:	607a      	str	r2, [r7, #4]
   1664a:	603b      	str	r3, [r7, #0]
   1664c:	4603      	mov	r3, r0
   1664e:	81fb      	strh	r3, [r7, #14]
    CSP_DMA_REG     *p_dma_reg;
    CSP_DMA_CH_REG  *p_dma_ch_reg;
    CPU_INT32U       reg_ctrl;    
    CPU_SR_ALLOC();
   16650:	f04f 0300 	mov.w	r3, #0
   16654:	61bb      	str	r3, [r7, #24]

                                                                /* ------------------ ARGUMENTS CHECKING -------------- */
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)             
    if (ch_nbr > CSP_DMA_CH_MAX_NBR - 1u) {                     /* Invalid channel number?                              */
   16656:	89fb      	ldrh	r3, [r7, #14]
   16658:	2b07      	cmp	r3, #7
   1665a:	d902      	bls.n	16662 <CSP_DMA_XferStartExt+0x22>
        return (DEF_FAIL);
   1665c:	f04f 0300 	mov.w	r3, #0
   16660:	e06d      	b.n	1673e <CSP_DMA_XferStartExt+0xfe>
    }
                                                                /* Channel not available?                               */
    if (CSP_DMA_ChTbl[ch_nbr].State != CSP_DMA_CH_STATE_ALLOC) {
   16662:	89f9      	ldrh	r1, [r7, #14]
   16664:	f643 02b8 	movw	r2, #14520	; 0x38b8
   16668:	f2c1 0200 	movt	r2, #4096	; 0x1000
   1666c:	460b      	mov	r3, r1
   1666e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16672:	185b      	adds	r3, r3, r1
   16674:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16678:	18d3      	adds	r3, r2, r3
   1667a:	781b      	ldrb	r3, [r3, #0]
   1667c:	2b01      	cmp	r3, #1
   1667e:	d002      	beq.n	16686 <CSP_DMA_XferStartExt+0x46>
        return (DEF_FAIL);
   16680:	f04f 0300 	mov.w	r3, #0
   16684:	e05b      	b.n	1673e <CSP_DMA_XferStartExt+0xfe>
    }

    if ((p_dest == (void *)0) ||                                /* Null pointers?                                        */
   16686:	68bb      	ldr	r3, [r7, #8]
   16688:	2b00      	cmp	r3, #0
   1668a:	d002      	beq.n	16692 <CSP_DMA_XferStartExt+0x52>
   1668c:	687b      	ldr	r3, [r7, #4]
   1668e:	2b00      	cmp	r3, #0
   16690:	d102      	bne.n	16698 <CSP_DMA_XferStartExt+0x58>
        (p_src  == (void *)0)) {
        return (DEF_FAIL);
   16692:	f04f 0300 	mov.w	r3, #0
   16696:	e052      	b.n	1673e <CSP_DMA_XferStartExt+0xfe>
    }    
#endif    

    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;                  
   16698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   1669c:	f2c5 0300 	movt	r3, #20480	; 0x5000
   166a0:	617b      	str	r3, [r7, #20]
    p_dma_ch_reg = &(p_dma_reg->CHx[ch_nbr]);
   166a2:	697b      	ldr	r3, [r7, #20]
   166a4:	f503 7280 	add.w	r2, r3, #256	; 0x100
   166a8:	89fb      	ldrh	r3, [r7, #14]
   166aa:	ea4f 1343 	mov.w	r3, r3, lsl #5
   166ae:	18d3      	adds	r3, r2, r3
   166b0:	613b      	str	r3, [r7, #16]
    reg_ctrl     = p_dma_ch_reg->Ctrl;
   166b2:	693b      	ldr	r3, [r7, #16]
   166b4:	68db      	ldr	r3, [r3, #12]
   166b6:	61fb      	str	r3, [r7, #28]

    DEF_BIT_CLR(reg_ctrl, CSP_DMA_MSK_CH_CTRL_XFER_SIZE |
   166b8:	69fa      	ldr	r2, [r7, #28]
   166ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   166be:	f2c7 33ff 	movt	r3, #29695	; 0x73ff
   166c2:	4013      	ands	r3, r2
   166c4:	61fb      	str	r3, [r7, #28]
                          CSP_DMA_BIT_CH_CTRL_SI        |
                          CSP_DMA_BIT_CH_CTRL_DI        |
                          CSP_DMA_BIT_CH_CTRL_I);

    DEF_BIT_SET(reg_ctrl, (xfer_size & CSP_DMA_MSK_CH_CTRL_XFER_SIZE));
   166c6:	683b      	ldr	r3, [r7, #0]
   166c8:	ea4f 5303 	mov.w	r3, r3, lsl #20
   166cc:	ea4f 5313 	mov.w	r3, r3, lsr #20
   166d0:	69fa      	ldr	r2, [r7, #28]
   166d2:	4313      	orrs	r3, r2
   166d4:	61fb      	str	r3, [r7, #28]

    if (DEF_BIT_IS_SET(opt, CSP_DMA_OPT_FLAG_XFER_SRC_INC)) {
   166d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   166d8:	f003 0301 	and.w	r3, r3, #1
   166dc:	b2db      	uxtb	r3, r3
   166de:	2b00      	cmp	r3, #0
   166e0:	d003      	beq.n	166ea <CSP_DMA_XferStartExt+0xaa>
        DEF_BIT_SET(reg_ctrl, CSP_DMA_BIT_CH_CTRL_SI);
   166e2:	69fb      	ldr	r3, [r7, #28]
   166e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   166e8:	61fb      	str	r3, [r7, #28]
    }
    
    if (DEF_BIT_IS_SET(opt, CSP_DMA_OPT_FLAG_XFER_DEST_INC)) {
   166ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   166ec:	f003 0302 	and.w	r3, r3, #2
   166f0:	2b00      	cmp	r3, #0
   166f2:	d003      	beq.n	166fc <CSP_DMA_XferStartExt+0xbc>
        DEF_BIT_SET(reg_ctrl, CSP_DMA_BIT_CH_CTRL_DI);        
   166f4:	69fb      	ldr	r3, [r7, #28]
   166f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   166fa:	61fb      	str	r3, [r7, #28]
    }        
    
    
    CPU_CRITICAL_ENTER();
   166fc:	f001 fb72 	bl	17de4 <CPU_SR_Save>
   16700:	61b8      	str	r0, [r7, #24]
   16702:	f7eb f8d9 	bl	18b8 <CPU_IntDisMeasStart>
    p_dma_ch_reg->SrcAddr     = (CPU_INT32U )p_src;
   16706:	687a      	ldr	r2, [r7, #4]
   16708:	693b      	ldr	r3, [r7, #16]
   1670a:	601a      	str	r2, [r3, #0]
    p_dma_ch_reg->DestAddr    = (CPU_INT32U )p_dest;       
   1670c:	68ba      	ldr	r2, [r7, #8]
   1670e:	693b      	ldr	r3, [r7, #16]
   16710:	605a      	str	r2, [r3, #4]
    p_dma_ch_reg->Ctrl        = reg_ctrl;
   16712:	693b      	ldr	r3, [r7, #16]
   16714:	69fa      	ldr	r2, [r7, #28]
   16716:	60da      	str	r2, [r3, #12]
    DEF_BIT_CLR(p_dma_ch_reg->Cfg, CSP_DMA_BIT_CH_CFG_ITC   | 
   16718:	693b      	ldr	r3, [r7, #16]
   1671a:	691b      	ldr	r3, [r3, #16]
   1671c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
   16720:	693b      	ldr	r3, [r7, #16]
   16722:	611a      	str	r2, [r3, #16]
                                   CSP_DMA_BIT_CH_CFG_IE);
    DEF_BIT_SET(p_dma_ch_reg->Cfg, CSP_DMA_BIT_CH_CFG_CH_EN); 
   16724:	693b      	ldr	r3, [r7, #16]
   16726:	691b      	ldr	r3, [r3, #16]
   16728:	f043 0201 	orr.w	r2, r3, #1
   1672c:	693b      	ldr	r3, [r7, #16]
   1672e:	611a      	str	r2, [r3, #16]
    CPU_CRITICAL_EXIT();
   16730:	f7eb f8ee 	bl	1910 <CPU_IntDisMeasStop>
   16734:	69b8      	ldr	r0, [r7, #24]
   16736:	f001 fb59 	bl	17dec <CPU_SR_Restore>

    return (DEF_OK);
   1673a:	f04f 0301 	mov.w	r3, #1
}
   1673e:	4618      	mov	r0, r3
   16740:	f107 0720 	add.w	r7, r7, #32
   16744:	46bd      	mov	sp, r7
   16746:	bd80      	pop	{r7, pc}

00016748 <CSP_DMA_XferAsyncStartExt>:
                                        void                  *p_src,
                                        CPU_SIZE_T             xfer_size,
                                        CSP_DMA_CALLBACK_PTR   callback,
                                        void                  *p_arg,
                                        CSP_OPT_FLAGS          opt)
{
   16748:	b580      	push	{r7, lr}
   1674a:	b08a      	sub	sp, #40	; 0x28
   1674c:	af00      	add	r7, sp, #0
   1674e:	60b9      	str	r1, [r7, #8]
   16750:	607a      	str	r2, [r7, #4]
   16752:	603b      	str	r3, [r7, #0]
   16754:	4603      	mov	r3, r0
   16756:	81fb      	strh	r3, [r7, #14]
    CSP_DMA_REG     *p_dma_reg;
    CSP_DMA_CH_REG  *p_dma_ch_reg; 
    CSP_DMA_CH      *p_dma_ch;
    CPU_INT32U       reg_ctrl;
    CPU_SR_ALLOC();
   16758:	f04f 0300 	mov.w	r3, #0
   1675c:	623b      	str	r3, [r7, #32]
    
#if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)             
    if (ch_nbr > CSP_DMA_CH_MAX_NBR - 1u) {                     /* Invalid channel number?                              */
   1675e:	89fb      	ldrh	r3, [r7, #14]
   16760:	2b07      	cmp	r3, #7
   16762:	d902      	bls.n	1676a <CSP_DMA_XferAsyncStartExt+0x22>
        return (DEF_FAIL);
   16764:	f04f 0300 	mov.w	r3, #0
   16768:	e08b      	b.n	16882 <CSP_DMA_XferAsyncStartExt+0x13a>
    }
                                                                /* Channel not available?                               */
    if (CSP_DMA_ChTbl[ch_nbr].State != CSP_DMA_CH_STATE_ALLOC) {
   1676a:	89f9      	ldrh	r1, [r7, #14]
   1676c:	f643 02b8 	movw	r2, #14520	; 0x38b8
   16770:	f2c1 0200 	movt	r2, #4096	; 0x1000
   16774:	460b      	mov	r3, r1
   16776:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1677a:	185b      	adds	r3, r3, r1
   1677c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16780:	18d3      	adds	r3, r2, r3
   16782:	781b      	ldrb	r3, [r3, #0]
   16784:	2b01      	cmp	r3, #1
   16786:	d002      	beq.n	1678e <CSP_DMA_XferAsyncStartExt+0x46>
        return (DEF_FAIL);
   16788:	f04f 0300 	mov.w	r3, #0
   1678c:	e079      	b.n	16882 <CSP_DMA_XferAsyncStartExt+0x13a>
    }
    
    if (callback == (CSP_DMA_CALLBACK_PTR )0) {
   1678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16790:	2b00      	cmp	r3, #0
   16792:	d102      	bne.n	1679a <CSP_DMA_XferAsyncStartExt+0x52>
        return (DEF_FAIL);
   16794:	f04f 0300 	mov.w	r3, #0
   16798:	e073      	b.n	16882 <CSP_DMA_XferAsyncStartExt+0x13a>
    }
    
    if ((p_dest  == (void *)0) ||
   1679a:	68bb      	ldr	r3, [r7, #8]
   1679c:	2b00      	cmp	r3, #0
   1679e:	d002      	beq.n	167a6 <CSP_DMA_XferAsyncStartExt+0x5e>
   167a0:	687b      	ldr	r3, [r7, #4]
   167a2:	2b00      	cmp	r3, #0
   167a4:	d102      	bne.n	167ac <CSP_DMA_XferAsyncStartExt+0x64>
        (p_src   == (void *)0)) {
        return (DEF_FAIL);
   167a6:	f04f 0300 	mov.w	r3, #0
   167aa:	e06a      	b.n	16882 <CSP_DMA_XferAsyncStartExt+0x13a>
    }
#endif    

    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;                  
   167ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   167b0:	f2c5 0300 	movt	r3, #20480	; 0x5000
   167b4:	61fb      	str	r3, [r7, #28]
    p_dma_ch_reg = &(p_dma_reg->CHx[ch_nbr]);
   167b6:	69fb      	ldr	r3, [r7, #28]
   167b8:	f503 7280 	add.w	r2, r3, #256	; 0x100
   167bc:	89fb      	ldrh	r3, [r7, #14]
   167be:	ea4f 1343 	mov.w	r3, r3, lsl #5
   167c2:	18d3      	adds	r3, r2, r3
   167c4:	61bb      	str	r3, [r7, #24]
    p_dma_ch     = &(CSP_DMA_ChTbl[ch_nbr]);    
   167c6:	89fa      	ldrh	r2, [r7, #14]
   167c8:	4613      	mov	r3, r2
   167ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
   167ce:	189b      	adds	r3, r3, r2
   167d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   167d4:	461a      	mov	r2, r3
   167d6:	f643 03b8 	movw	r3, #14520	; 0x38b8
   167da:	f2c1 0300 	movt	r3, #4096	; 0x1000
   167de:	18d3      	adds	r3, r2, r3
   167e0:	617b      	str	r3, [r7, #20]
    reg_ctrl     = p_dma_ch_reg->Ctrl;
   167e2:	69bb      	ldr	r3, [r7, #24]
   167e4:	68db      	ldr	r3, [r3, #12]
   167e6:	627b      	str	r3, [r7, #36]	; 0x24
    
    DEF_BIT_CLR(reg_ctrl, CSP_DMA_MSK_CH_CTRL_XFER_SIZE |       /* Clears the xfer size mask.                           */
   167e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   167ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   167ee:	f2cf 33ff 	movt	r3, #62463	; 0xf3ff
   167f2:	4013      	ands	r3, r2
   167f4:	627b      	str	r3, [r7, #36]	; 0x24
                          CSP_DMA_BIT_CH_CTRL_SI        |       /* Clears the source increment flag.                    */
                          CSP_DMA_BIT_CH_CTRL_DI);              /* Clears the destination increment flag.               */

    DEF_BIT_SET(reg_ctrl, xfer_size & CSP_DMA_MSK_CH_CTRL_XFER_SIZE);
   167f6:	683b      	ldr	r3, [r7, #0]
   167f8:	ea4f 5303 	mov.w	r3, r3, lsl #20
   167fc:	ea4f 5313 	mov.w	r3, r3, lsr #20
   16800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16802:	4313      	orrs	r3, r2
   16804:	627b      	str	r3, [r7, #36]	; 0x24
    DEF_BIT_SET(reg_ctrl, CSP_DMA_BIT_CH_CTRL_I);
   16806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1680c:	627b      	str	r3, [r7, #36]	; 0x24

    if (DEF_BIT_IS_SET(opt, CSP_DMA_OPT_FLAG_XFER_SRC_INC)) {
   1680e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   16810:	f003 0301 	and.w	r3, r3, #1
   16814:	b2db      	uxtb	r3, r3
   16816:	2b00      	cmp	r3, #0
   16818:	d003      	beq.n	16822 <CSP_DMA_XferAsyncStartExt+0xda>
        DEF_BIT_SET(reg_ctrl, CSP_DMA_BIT_CH_CTRL_SI);
   1681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1681c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   16820:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    if (DEF_BIT_IS_SET(opt, CSP_DMA_OPT_FLAG_XFER_DEST_INC)) {
   16822:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   16824:	f003 0302 	and.w	r3, r3, #2
   16828:	2b00      	cmp	r3, #0
   1682a:	d003      	beq.n	16834 <CSP_DMA_XferAsyncStartExt+0xec>
        DEF_BIT_SET(reg_ctrl, CSP_DMA_BIT_CH_CTRL_DI);        
   1682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1682e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   16832:	627b      	str	r3, [r7, #36]	; 0x24
    }        
        
    CPU_CRITICAL_ENTER();    
   16834:	f001 fad6 	bl	17de4 <CPU_SR_Save>
   16838:	6238      	str	r0, [r7, #32]
   1683a:	f7eb f83d 	bl	18b8 <CPU_IntDisMeasStart>
    p_dma_ch_reg->SrcAddr     = (CPU_INT32U )p_src;
   1683e:	687a      	ldr	r2, [r7, #4]
   16840:	69bb      	ldr	r3, [r7, #24]
   16842:	601a      	str	r2, [r3, #0]
    p_dma_ch_reg->DestAddr    = (CPU_INT32U )p_dest;       
   16844:	68ba      	ldr	r2, [r7, #8]
   16846:	69bb      	ldr	r3, [r7, #24]
   16848:	605a      	str	r2, [r3, #4]
    p_dma_ch->CallBackFnctPtr = callback;
   1684a:	697b      	ldr	r3, [r7, #20]
   1684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1684e:	605a      	str	r2, [r3, #4]
    p_dma_ch->CallBackArgPtr  = p_arg;    
   16850:	697b      	ldr	r3, [r7, #20]
   16852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16854:	609a      	str	r2, [r3, #8]
    p_dma_ch_reg->Ctrl        = reg_ctrl;
   16856:	69bb      	ldr	r3, [r7, #24]
   16858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1685a:	60da      	str	r2, [r3, #12]

    DEF_BIT_SET(p_dma_ch_reg->Cfg, CSP_DMA_BIT_CH_CFG_ITC   | 
   1685c:	69bb      	ldr	r3, [r7, #24]
   1685e:	691b      	ldr	r3, [r3, #16]
   16860:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
   16864:	69bb      	ldr	r3, [r7, #24]
   16866:	611a      	str	r2, [r3, #16]
                                   CSP_DMA_BIT_CH_CFG_IE);     
    DEF_BIT_SET(p_dma_ch_reg->Cfg, CSP_DMA_BIT_CH_CFG_CH_EN);
   16868:	69bb      	ldr	r3, [r7, #24]
   1686a:	691b      	ldr	r3, [r3, #16]
   1686c:	f043 0201 	orr.w	r2, r3, #1
   16870:	69bb      	ldr	r3, [r7, #24]
   16872:	611a      	str	r2, [r3, #16]
    
    CPU_CRITICAL_EXIT();
   16874:	f7eb f84c 	bl	1910 <CPU_IntDisMeasStop>
   16878:	6a38      	ldr	r0, [r7, #32]
   1687a:	f001 fab7 	bl	17dec <CPU_SR_Restore>
        
    return (DEF_OK);
   1687e:	f04f 0301 	mov.w	r3, #1
}
   16882:	4618      	mov	r0, r3
   16884:	f107 0728 	add.w	r7, r7, #40	; 0x28
   16888:	46bd      	mov	sp, r7
   1688a:	bd80      	pop	{r7, pc}

0001688c <CSP_DMA_XferSizeMaxGetExt>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  CSP_DMA_XferSizeMaxGetExt (CSP_DEV_NBR  ch_nbr)
{
   1688c:	b480      	push	{r7}
   1688e:	b083      	sub	sp, #12
   16890:	af00      	add	r7, sp, #0
   16892:	4603      	mov	r3, r0
   16894:	80fb      	strh	r3, [r7, #6]
    (void)ch_nbr;
    
    
    return (DEF_BIT_FIELD(12u, 0u));
   16896:	f640 73ff 	movw	r3, #4095	; 0xfff
}
   1689a:	4618      	mov	r0, r3
   1689c:	f107 070c 	add.w	r7, r7, #12
   168a0:	46bd      	mov	sp, r7
   168a2:	bc80      	pop	{r7}
   168a4:	4770      	bx	lr
   168a6:	bf00      	nop

000168a8 <CSP_DMA_IntHandler>:
*********************************************************************************************************
*/


static  void  CSP_DMA_IntHandler (void *p_arg)
{    
   168a8:	b590      	push	{r4, r7, lr}
   168aa:	b08d      	sub	sp, #52	; 0x34
   168ac:	af00      	add	r7, sp, #0
   168ae:	6078      	str	r0, [r7, #4]
    CPU_INT32U             int_err_stat;
    CPU_BOOLEAN            status;
    CPU_INT16U             xfer_size_rem;

    
    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;    
   168b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   168b4:	f2c5 0300 	movt	r3, #20480	; 0x5000
   168b8:	623b      	str	r3, [r7, #32]
    int_tc_stat  = p_dma_reg->IntTCStat  & DEF_BIT_FIELD(8u, 0u);
   168ba:	6a3b      	ldr	r3, [r7, #32]
   168bc:	685b      	ldr	r3, [r3, #4]
   168be:	b2db      	uxtb	r3, r3
   168c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);
   168c2:	6a3b      	ldr	r3, [r7, #32]
   168c4:	68db      	ldr	r3, [r3, #12]
   168c6:	b2db      	uxtb	r3, r3
   168c8:	62bb      	str	r3, [r7, #40]	; 0x28
    
                                                                /* --------- INTERRUPT TERMINAL COUNT HANDLING -------- */
    while (int_tc_stat != DEF_BIT_NONE) {                       
   168ca:	e061      	b.n	16990 <CSP_DMA_IntHandler+0xe8>
                                                                /* Get current DMA channel number                       */
        ch_nbr               = 31u - CPU_CntLeadZeros(int_tc_stat);
   168cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   168ce:	f001 fa90 	bl	17df2 <CPU_CntLeadZeros>
   168d2:	4603      	mov	r3, r0
   168d4:	b29b      	uxth	r3, r3
   168d6:	f1c3 031f 	rsb	r3, r3, #31
   168da:	83fb      	strh	r3, [r7, #30]
        p_dma_ch_reg         = &(p_dma_reg->CHx[ch_nbr]);
   168dc:	6a3b      	ldr	r3, [r7, #32]
   168de:	f503 7280 	add.w	r2, r3, #256	; 0x100
   168e2:	8bfb      	ldrh	r3, [r7, #30]
   168e4:	ea4f 1343 	mov.w	r3, r3, lsl #5
   168e8:	18d3      	adds	r3, r2, r3
   168ea:	61bb      	str	r3, [r7, #24]
        p_dma_ch             = &(CSP_DMA_ChTbl[ch_nbr]);
   168ec:	8bfa      	ldrh	r2, [r7, #30]
   168ee:	4613      	mov	r3, r2
   168f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   168f4:	189b      	adds	r3, r3, r2
   168f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   168fa:	461a      	mov	r2, r3
   168fc:	f643 03b8 	movw	r3, #14520	; 0x38b8
   16900:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16904:	18d3      	adds	r3, r2, r3
   16906:	617b      	str	r3, [r7, #20]

        callback_fnct        = p_dma_ch->CallBackFnctPtr;       /* Get the callback function                            */
   16908:	697b      	ldr	r3, [r7, #20]
   1690a:	685b      	ldr	r3, [r3, #4]
   1690c:	613b      	str	r3, [r7, #16]
        p_callback_arg       = p_dma_ch->CallBackArgPtr;        /* Get the callback argument pointer.                   */        
   1690e:	697b      	ldr	r3, [r7, #20]
   16910:	689b      	ldr	r3, [r3, #8]
   16912:	60fb      	str	r3, [r7, #12]
                                                                /* Get the remaining transfer size.                     */
        xfer_size_rem        = p_dma_ch_reg->Ctrl & DEF_BIT_FIELD(12u, 0u);
   16914:	69bb      	ldr	r3, [r7, #24]
   16916:	68db      	ldr	r3, [r3, #12]
   16918:	b29b      	uxth	r3, r3
   1691a:	ea4f 5303 	mov.w	r3, r3, lsl #20
   1691e:	ea4f 5313 	mov.w	r3, r3, lsr #20
   16922:	817b      	strh	r3, [r7, #10]
        p_dma_reg->IntTCClr  = DEF_BIT(ch_nbr);                 /* Clear the terminal count interrupt.                  */
   16924:	8bfb      	ldrh	r3, [r7, #30]
   16926:	f04f 0201 	mov.w	r2, #1
   1692a:	fa02 f203 	lsl.w	r2, r2, r3
   1692e:	6a3b      	ldr	r3, [r7, #32]
   16930:	609a      	str	r2, [r3, #8]
        
        if (DEF_BIT_IS_SET(int_err_stat, DEF_BIT(ch_nbr))) {    /* If an error occured in the channel...                */
   16932:	8bfb      	ldrh	r3, [r7, #30]
   16934:	f04f 0201 	mov.w	r2, #1
   16938:	fa02 f203 	lsl.w	r2, r2, r3
   1693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1693e:	401a      	ands	r2, r3
   16940:	8bfb      	ldrh	r3, [r7, #30]
   16942:	f04f 0101 	mov.w	r1, #1
   16946:	fa01 f303 	lsl.w	r3, r1, r3
   1694a:	429a      	cmp	r2, r3
   1694c:	d10b      	bne.n	16966 <CSP_DMA_IntHandler+0xbe>
            status                = DEF_FAIL;                   /* ... set the status, and clear the error interrupt.   */
   1694e:	f04f 0300 	mov.w	r3, #0
   16952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            p_dma_reg->IntErrClr = DEF_BIT(ch_nbr);
   16956:	8bfb      	ldrh	r3, [r7, #30]
   16958:	f04f 0201 	mov.w	r2, #1
   1695c:	fa02 f203 	lsl.w	r2, r2, r3
   16960:	6a3b      	ldr	r3, [r7, #32]
   16962:	611a      	str	r2, [r3, #16]
   16964:	e003      	b.n	1696e <CSP_DMA_IntHandler+0xc6>
        } else {
            status                = DEF_OK;                     
   16966:	f04f 0301 	mov.w	r3, #1
   1696a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
            
        callback_fnct(ch_nbr,                                   /* Call the callback function.                           */
   1696e:	8bf9      	ldrh	r1, [r7, #30]
   16970:	897a      	ldrh	r2, [r7, #10]
   16972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   16976:	693c      	ldr	r4, [r7, #16]
   16978:	4608      	mov	r0, r1
   1697a:	4611      	mov	r1, r2
   1697c:	68fa      	ldr	r2, [r7, #12]
   1697e:	47a0      	blx	r4
                      xfer_size_rem,
                      p_callback_arg,
                      status);
                                                                /* Read the terminal count and error interrupts status   */
        int_tc_stat  = p_dma_reg->IntTCStat  & DEF_BIT_FIELD(8u, 0u);
   16980:	6a3b      	ldr	r3, [r7, #32]
   16982:	685b      	ldr	r3, [r3, #4]
   16984:	b2db      	uxtb	r3, r3
   16986:	62fb      	str	r3, [r7, #44]	; 0x2c
        int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);                            
   16988:	6a3b      	ldr	r3, [r7, #32]
   1698a:	68db      	ldr	r3, [r3, #12]
   1698c:	b2db      	uxtb	r3, r3
   1698e:	62bb      	str	r3, [r7, #40]	; 0x28
    p_dma_reg    = (CSP_DMA_REG *)CSP_ADDR_DMA_REG;    
    int_tc_stat  = p_dma_reg->IntTCStat  & DEF_BIT_FIELD(8u, 0u);
    int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);
    
                                                                /* --------- INTERRUPT TERMINAL COUNT HANDLING -------- */
    while (int_tc_stat != DEF_BIT_NONE) {                       
   16990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16992:	2b00      	cmp	r3, #0
   16994:	d19a      	bne.n	168cc <CSP_DMA_IntHandler+0x24>
                                                                /* Read the terminal count and error interrupts status   */
        int_tc_stat  = p_dma_reg->IntTCStat  & DEF_BIT_FIELD(8u, 0u);
        int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);                            
    }
                                                                /* --------------- ERROR INTERRUPT HANDLING ------------ */
    int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);
   16996:	6a3b      	ldr	r3, [r7, #32]
   16998:	68db      	ldr	r3, [r3, #12]
   1699a:	b2db      	uxtb	r3, r3
   1699c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    while (int_err_stat != DEF_BIT_NONE) {
   1699e:	e047      	b.n	16a30 <CSP_DMA_IntHandler+0x188>
        ch_nbr               = 31u - CPU_CntLeadZeros(int_err_stat);
   169a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   169a2:	f001 fa26 	bl	17df2 <CPU_CntLeadZeros>
   169a6:	4603      	mov	r3, r0
   169a8:	b29b      	uxth	r3, r3
   169aa:	f1c3 031f 	rsb	r3, r3, #31
   169ae:	83fb      	strh	r3, [r7, #30]
        p_dma_ch_reg         = &(p_dma_reg->CHx[ch_nbr]);
   169b0:	6a3b      	ldr	r3, [r7, #32]
   169b2:	f503 7280 	add.w	r2, r3, #256	; 0x100
   169b6:	8bfb      	ldrh	r3, [r7, #30]
   169b8:	ea4f 1343 	mov.w	r3, r3, lsl #5
   169bc:	18d3      	adds	r3, r2, r3
   169be:	61bb      	str	r3, [r7, #24]
        p_dma_ch             = &(CSP_DMA_ChTbl[ch_nbr]);
   169c0:	8bfa      	ldrh	r2, [r7, #30]
   169c2:	4613      	mov	r3, r2
   169c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   169c8:	189b      	adds	r3, r3, r2
   169ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
   169ce:	461a      	mov	r2, r3
   169d0:	f643 03b8 	movw	r3, #14520	; 0x38b8
   169d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   169d8:	18d3      	adds	r3, r2, r3
   169da:	617b      	str	r3, [r7, #20]
        callback_fnct        = p_dma_ch->CallBackFnctPtr;
   169dc:	697b      	ldr	r3, [r7, #20]
   169de:	685b      	ldr	r3, [r3, #4]
   169e0:	613b      	str	r3, [r7, #16]
        p_callback_arg       = p_dma_ch->CallBackArgPtr;
   169e2:	697b      	ldr	r3, [r7, #20]
   169e4:	689b      	ldr	r3, [r3, #8]
   169e6:	60fb      	str	r3, [r7, #12]
        p_dma_ch->State      = CSP_DMA_CH_STATE_ALLOC;          /* Set the channel state = 'ALLOC'                      */
   169e8:	697b      	ldr	r3, [r7, #20]
   169ea:	f04f 0201 	mov.w	r2, #1
   169ee:	701a      	strb	r2, [r3, #0]
        xfer_size_rem        = p_dma_ch_reg->Ctrl & DEF_BIT_FIELD(12u, 0u);        
   169f0:	69bb      	ldr	r3, [r7, #24]
   169f2:	68db      	ldr	r3, [r3, #12]
   169f4:	b29b      	uxth	r3, r3
   169f6:	ea4f 5303 	mov.w	r3, r3, lsl #20
   169fa:	ea4f 5313 	mov.w	r3, r3, lsr #20
   169fe:	817b      	strh	r3, [r7, #10]
        status               = DEF_FAIL;
   16a00:	f04f 0300 	mov.w	r3, #0
   16a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        p_dma_reg->IntErrClr = DEF_BIT(ch_nbr);
   16a08:	8bfb      	ldrh	r3, [r7, #30]
   16a0a:	f04f 0201 	mov.w	r2, #1
   16a0e:	fa02 f203 	lsl.w	r2, r2, r3
   16a12:	6a3b      	ldr	r3, [r7, #32]
   16a14:	611a      	str	r2, [r3, #16]
            
        callback_fnct(ch_nbr,
   16a16:	8bf9      	ldrh	r1, [r7, #30]
   16a18:	897a      	ldrh	r2, [r7, #10]
   16a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   16a1e:	693c      	ldr	r4, [r7, #16]
   16a20:	4608      	mov	r0, r1
   16a22:	4611      	mov	r1, r2
   16a24:	68fa      	ldr	r2, [r7, #12]
   16a26:	47a0      	blx	r4
                      xfer_size_rem,
                      p_callback_arg,
                      status);
        
        int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);                            
   16a28:	6a3b      	ldr	r3, [r7, #32]
   16a2a:	68db      	ldr	r3, [r3, #12]
   16a2c:	b2db      	uxtb	r3, r3
   16a2e:	62bb      	str	r3, [r7, #40]	; 0x28
        int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);                            
    }
                                                                /* --------------- ERROR INTERRUPT HANDLING ------------ */
    int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);
    
    while (int_err_stat != DEF_BIT_NONE) {
   16a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a32:	2b00      	cmp	r3, #0
   16a34:	d1b4      	bne.n	169a0 <CSP_DMA_IntHandler+0xf8>
                      p_callback_arg,
                      status);
        
        int_err_stat = p_dma_reg->IntErrStat & DEF_BIT_FIELD(8u, 0u);                            
    }
}
   16a36:	f107 0734 	add.w	r7, r7, #52	; 0x34
   16a3a:	46bd      	mov	sp, r7
   16a3c:	bd90      	pop	{r4, r7, pc}
   16a3e:	bf00      	nop

00016a40 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   16a40:	b480      	push	{r7}
   16a42:	b083      	sub	sp, #12
   16a44:	af00      	add	r7, sp, #0
   16a46:	4603      	mov	r3, r0
   16a48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   16a4a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   16a4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   16a52:	f997 2007 	ldrsb.w	r2, [r7, #7]
   16a56:	ea4f 1252 	mov.w	r2, r2, lsr #5
   16a5a:	79f9      	ldrb	r1, [r7, #7]
   16a5c:	f001 011f 	and.w	r1, r1, #31
   16a60:	f04f 0001 	mov.w	r0, #1
   16a64:	fa00 f101 	lsl.w	r1, r0, r1
   16a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   16a6c:	f107 070c 	add.w	r7, r7, #12
   16a70:	46bd      	mov	sp, r7
   16a72:	bc80      	pop	{r7}
   16a74:	4770      	bx	lr
   16a76:	bf00      	nop

00016a78 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   16a78:	b480      	push	{r7}
   16a7a:	b083      	sub	sp, #12
   16a7c:	af00      	add	r7, sp, #0
   16a7e:	4603      	mov	r3, r0
   16a80:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   16a82:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   16a86:	f2ce 0300 	movt	r3, #57344	; 0xe000
   16a8a:	f997 2007 	ldrsb.w	r2, [r7, #7]
   16a8e:	ea4f 1252 	mov.w	r2, r2, lsr #5
   16a92:	79f9      	ldrb	r1, [r7, #7]
   16a94:	f001 011f 	and.w	r1, r1, #31
   16a98:	f04f 0001 	mov.w	r0, #1
   16a9c:	fa00 f101 	lsl.w	r1, r0, r1
   16aa0:	f102 0220 	add.w	r2, r2, #32
   16aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   16aa8:	f107 070c 	add.w	r7, r7, #12
   16aac:	46bd      	mov	sp, r7
   16aae:	bc80      	pop	{r7}
   16ab0:	4770      	bx	lr
   16ab2:	bf00      	nop

00016ab4 <enable_USB_interrupts>:
#include <LPC17xx.h>

void enable_USB_interrupts(void)
{
   16ab4:	b580      	push	{r7, lr}
   16ab6:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(USB_IRQn);
   16ab8:	f04f 0018 	mov.w	r0, #24
   16abc:	f7ff ffc0 	bl	16a40 <NVIC_EnableIRQ>
}
   16ac0:	bd80      	pop	{r7, pc}
   16ac2:	bf00      	nop

00016ac4 <disable_USB_interrupts>:

void disable_USB_interrupts(void)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(USB_IRQn);
   16ac8:	f04f 0018 	mov.w	r0, #24
   16acc:	f7ff ffd4 	bl	16a78 <NVIC_DisableIRQ>
}
   16ad0:	bd80      	pop	{r7, pc}
   16ad2:	bf00      	nop

00016ad4 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
   16ad4:	b580      	push	{r7, lr}
   16ad6:	b086      	sub	sp, #24
   16ad8:	af00      	add	r7, sp, #0
   16ada:	60f8      	str	r0, [r7, #12]
   16adc:	60b9      	str	r1, [r7, #8]
   16ade:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;

	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
   16ae0:	68fb      	ldr	r3, [r7, #12]
   16ae2:	781b      	ldrb	r3, [r3, #0]
   16ae4:	ea4f 1353 	mov.w	r3, r3, lsr #5
   16ae8:	b2db      	uxtb	r3, r3
   16aea:	f003 0303 	and.w	r3, r3, #3
   16aee:	617b      	str	r3, [r7, #20]
	pfnHandler = apfnReqHandlers[iType];
   16af0:	f643 132c 	movw	r3, #14636	; 0x392c
   16af4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16af8:	697a      	ldr	r2, [r7, #20]
   16afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16afe:	613b      	str	r3, [r7, #16]
	if (pfnHandler == NULL) {
   16b00:	693b      	ldr	r3, [r7, #16]
   16b02:	2b00      	cmp	r3, #0
   16b04:	d102      	bne.n	16b0c <_HandleRequest+0x38>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
   16b06:	f04f 0300 	mov.w	r3, #0
   16b0a:	e005      	b.n	16b18 <_HandleRequest+0x44>
	}

	return pfnHandler(pSetup, piLen, ppbData);
   16b0c:	693b      	ldr	r3, [r7, #16]
   16b0e:	68f8      	ldr	r0, [r7, #12]
   16b10:	68b9      	ldr	r1, [r7, #8]
   16b12:	687a      	ldr	r2, [r7, #4]
   16b14:	4798      	blx	r3
   16b16:	4603      	mov	r3, r0
}
   16b18:	4618      	mov	r0, r3
   16b1a:	f107 0718 	add.w	r7, r7, #24
   16b1e:	46bd      	mov	sp, r7
   16b20:	bd80      	pop	{r7, pc}
   16b22:	bf00      	nop

00016b24 <StallControlPipe>:
	Local function to stall the control endpoint

	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
   16b24:	b580      	push	{r7, lr}
   16b26:	b084      	sub	sp, #16
   16b28:	af00      	add	r7, sp, #0
   16b2a:	4603      	mov	r3, r0
   16b2c:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
   16b2e:	f04f 0080 	mov.w	r0, #128	; 0x80
   16b32:	f04f 0101 	mov.w	r1, #1
   16b36:	f000 fb29 	bl	1718c <USBHwEPStall>

    /* dump setup packet */
	DBG("STALL on [");
	pb = (U8 *)&Setup;
   16b3a:	f643 1318 	movw	r3, #14616	; 0x3918
   16b3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16b42:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   16b44:	f04f 0300 	mov.w	r3, #0
   16b48:	60fb      	str	r3, [r7, #12]
   16b4a:	e003      	b.n	16b54 <StallControlPipe+0x30>
   16b4c:	68fb      	ldr	r3, [r7, #12]
   16b4e:	f103 0301 	add.w	r3, r3, #1
   16b52:	60fb      	str	r3, [r7, #12]
   16b54:	68fb      	ldr	r3, [r7, #12]
   16b56:	2b07      	cmp	r3, #7
   16b58:	ddf8      	ble.n	16b4c <StallControlPipe+0x28>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
   16b5a:	f107 0710 	add.w	r7, r7, #16
   16b5e:	46bd      	mov	sp, r7
   16b60:	bd80      	pop	{r7, pc}
   16b62:	bf00      	nop

00016b64 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
   16b64:	b580      	push	{r7, lr}
   16b66:	b082      	sub	sp, #8
   16b68:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
   16b6a:	f643 1324 	movw	r3, #14628	; 0x3924
   16b6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16b72:	681b      	ldr	r3, [r3, #0]
   16b74:	2b40      	cmp	r3, #64	; 0x40
   16b76:	bfa8      	it	ge
   16b78:	2340      	movge	r3, #64	; 0x40
   16b7a:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
   16b7c:	f643 1320 	movw	r3, #14624	; 0x3920
   16b80:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16b84:	681b      	ldr	r3, [r3, #0]
   16b86:	f04f 0080 	mov.w	r0, #128	; 0x80
   16b8a:	4619      	mov	r1, r3
   16b8c:	687a      	ldr	r2, [r7, #4]
   16b8e:	f000 fb23 	bl	171d8 <USBHwEPWrite>
	pbData += iChunk;
   16b92:	f643 1320 	movw	r3, #14624	; 0x3920
   16b96:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16b9a:	681a      	ldr	r2, [r3, #0]
   16b9c:	687b      	ldr	r3, [r7, #4]
   16b9e:	18d2      	adds	r2, r2, r3
   16ba0:	f643 1320 	movw	r3, #14624	; 0x3920
   16ba4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16ba8:	601a      	str	r2, [r3, #0]
	iResidue -= iChunk;
   16baa:	f643 1324 	movw	r3, #14628	; 0x3924
   16bae:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16bb2:	681a      	ldr	r2, [r3, #0]
   16bb4:	687b      	ldr	r3, [r7, #4]
   16bb6:	1ad2      	subs	r2, r2, r3
   16bb8:	f643 1324 	movw	r3, #14628	; 0x3924
   16bbc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16bc0:	601a      	str	r2, [r3, #0]
}
   16bc2:	f107 0708 	add.w	r7, r7, #8
   16bc6:	46bd      	mov	sp, r7
   16bc8:	bd80      	pop	{r7, pc}
   16bca:	bf00      	nop

00016bcc <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
   16bcc:	b580      	push	{r7, lr}
   16bce:	b084      	sub	sp, #16
   16bd0:	af00      	add	r7, sp, #0
   16bd2:	4602      	mov	r2, r0
   16bd4:	460b      	mov	r3, r1
   16bd6:	71fa      	strb	r2, [r7, #7]
   16bd8:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
   16bda:	79fb      	ldrb	r3, [r7, #7]
   16bdc:	2b00      	cmp	r3, #0
   16bde:	f040 80f6 	bne.w	16dce <USBHandleControlTransfer+0x202>
		/* OUT transfer */
		if (bEPStat & EP_STATUS_SETUP) {
   16be2:	79bb      	ldrb	r3, [r7, #6]
   16be4:	f003 0304 	and.w	r3, r3, #4
   16be8:	2b00      	cmp	r3, #0
   16bea:	d077      	beq.n	16cdc <USBHandleControlTransfer+0x110>
			/* setup packet, reset request message state machine */
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
   16bec:	f04f 0000 	mov.w	r0, #0
   16bf0:	f643 1118 	movw	r1, #14616	; 0x3918
   16bf4:	f2c1 0100 	movt	r1, #4096	; 0x1000
   16bf8:	f04f 0208 	mov.w	r2, #8
   16bfc:	f000 fb4e 	bl	1729c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			/* defaults for data pointer and residue */
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
   16c00:	f643 1318 	movw	r3, #14616	; 0x3918
   16c04:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c08:	781b      	ldrb	r3, [r3, #0]
   16c0a:	ea4f 1353 	mov.w	r3, r3, lsr #5
   16c0e:	b2db      	uxtb	r3, r3
   16c10:	f003 0303 	and.w	r3, r3, #3
   16c14:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
   16c16:	f643 133c 	movw	r3, #14652	; 0x393c
   16c1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c1e:	68fa      	ldr	r2, [r7, #12]
   16c20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16c24:	f643 1320 	movw	r3, #14624	; 0x3920
   16c28:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c2c:	601a      	str	r2, [r3, #0]
			iResidue = Setup.wLength;
   16c2e:	f643 1318 	movw	r3, #14616	; 0x3918
   16c32:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c36:	88db      	ldrh	r3, [r3, #6]
   16c38:	461a      	mov	r2, r3
   16c3a:	f643 1324 	movw	r3, #14628	; 0x3924
   16c3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c42:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
   16c44:	f643 1318 	movw	r3, #14616	; 0x3918
   16c48:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c4c:	88db      	ldrh	r3, [r3, #6]
   16c4e:	461a      	mov	r2, r3
   16c50:	f643 1328 	movw	r3, #14632	; 0x3928
   16c54:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c58:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
   16c5a:	f643 1318 	movw	r3, #14616	; 0x3918
   16c5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c62:	88db      	ldrh	r3, [r3, #6]
   16c64:	2b00      	cmp	r3, #0
   16c66:	d00d      	beq.n	16c84 <USBHandleControlTransfer+0xb8>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
   16c68:	f643 1318 	movw	r3, #14616	; 0x3918
   16c6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16c70:	781b      	ldrb	r3, [r3, #0]
   16c72:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   16c76:	b2db      	uxtb	r3, r3
   16c78:	f003 0301 	and.w	r3, r3, #1
   16c7c:	b2db      	uxtb	r3, r3
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
   16c7e:	2b00      	cmp	r3, #0
   16c80:	f000 80aa 	beq.w	16dd8 <USBHandleControlTransfer+0x20c>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				/* ask installed handler to process request */
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
   16c84:	f643 1018 	movw	r0, #14616	; 0x3918
   16c88:	f2c1 0000 	movt	r0, #4096	; 0x1000
   16c8c:	f643 1128 	movw	r1, #14632	; 0x3928
   16c90:	f2c1 0100 	movt	r1, #4096	; 0x1000
   16c94:	f643 1220 	movw	r2, #14624	; 0x3920
   16c98:	f2c1 0200 	movt	r2, #4096	; 0x1000
   16c9c:	f7ff ff1a 	bl	16ad4 <_HandleRequest>
   16ca0:	4603      	mov	r3, r0
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d104      	bne.n	16cb0 <USBHandleControlTransfer+0xe4>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
   16ca6:	79bb      	ldrb	r3, [r7, #6]
   16ca8:	4618      	mov	r0, r3
   16caa:	f7ff ff3b 	bl	16b24 <StallControlPipe>
					return;
   16cae:	e093      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
				}
				/* send smallest of requested and offered length */
				iResidue = MIN(iLen, Setup.wLength);
   16cb0:	f643 1318 	movw	r3, #14616	; 0x3918
   16cb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16cb8:	88db      	ldrh	r3, [r3, #6]
   16cba:	461a      	mov	r2, r3
   16cbc:	f643 1328 	movw	r3, #14632	; 0x3928
   16cc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16cc4:	681b      	ldr	r3, [r3, #0]
   16cc6:	429a      	cmp	r2, r3
   16cc8:	bfa8      	it	ge
   16cca:	461a      	movge	r2, r3
   16ccc:	f643 1324 	movw	r3, #14628	; 0x3924
   16cd0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16cd4:	601a      	str	r2, [r3, #0]
				/* send first part (possibly a zero-length status message) */
				DataIn();
   16cd6:	f7ff ff45 	bl	16b64 <DataIn>
   16cda:	e07d      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
			}
		}
		else {
			if (iResidue > 0) {
   16cdc:	f643 1324 	movw	r3, #14628	; 0x3924
   16ce0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16ce4:	681b      	ldr	r3, [r3, #0]
   16ce6:	2b00      	cmp	r3, #0
   16ce8:	dd67      	ble.n	16dba <USBHandleControlTransfer+0x1ee>
				/* store data */
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
   16cea:	f643 1320 	movw	r3, #14624	; 0x3920
   16cee:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16cf2:	681a      	ldr	r2, [r3, #0]
   16cf4:	f643 1324 	movw	r3, #14628	; 0x3924
   16cf8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16cfc:	681b      	ldr	r3, [r3, #0]
   16cfe:	f04f 0000 	mov.w	r0, #0
   16d02:	4611      	mov	r1, r2
   16d04:	461a      	mov	r2, r3
   16d06:	f000 fac9 	bl	1729c <USBHwEPRead>
   16d0a:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
   16d0c:	68bb      	ldr	r3, [r7, #8]
   16d0e:	2b00      	cmp	r3, #0
   16d10:	da04      	bge.n	16d1c <USBHandleControlTransfer+0x150>
					StallControlPipe(bEPStat);
   16d12:	79bb      	ldrb	r3, [r7, #6]
   16d14:	4618      	mov	r0, r3
   16d16:	f7ff ff05 	bl	16b24 <StallControlPipe>
					return;
   16d1a:	e05d      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
				}
				pbData += iChunk;
   16d1c:	f643 1320 	movw	r3, #14624	; 0x3920
   16d20:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d24:	681a      	ldr	r2, [r3, #0]
   16d26:	68bb      	ldr	r3, [r7, #8]
   16d28:	18d2      	adds	r2, r2, r3
   16d2a:	f643 1320 	movw	r3, #14624	; 0x3920
   16d2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d32:	601a      	str	r2, [r3, #0]
				iResidue -= iChunk;
   16d34:	f643 1324 	movw	r3, #14628	; 0x3924
   16d38:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d3c:	681a      	ldr	r2, [r3, #0]
   16d3e:	68bb      	ldr	r3, [r7, #8]
   16d40:	1ad2      	subs	r2, r2, r3
   16d42:	f643 1324 	movw	r3, #14628	; 0x3924
   16d46:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d4a:	601a      	str	r2, [r3, #0]
				if (iResidue == 0) {
   16d4c:	f643 1324 	movw	r3, #14628	; 0x3924
   16d50:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d54:	681b      	ldr	r3, [r3, #0]
   16d56:	2b00      	cmp	r3, #0
   16d58:	d13e      	bne.n	16dd8 <USBHandleControlTransfer+0x20c>
					/* received all, send data to handler */
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
   16d5a:	f643 1318 	movw	r3, #14616	; 0x3918
   16d5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d62:	781b      	ldrb	r3, [r3, #0]
   16d64:	ea4f 1353 	mov.w	r3, r3, lsr #5
   16d68:	b2db      	uxtb	r3, r3
   16d6a:	f003 0303 	and.w	r3, r3, #3
   16d6e:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
   16d70:	f643 133c 	movw	r3, #14652	; 0x393c
   16d74:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d78:	68fa      	ldr	r2, [r7, #12]
   16d7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16d7e:	f643 1320 	movw	r3, #14624	; 0x3920
   16d82:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16d86:	601a      	str	r2, [r3, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
   16d88:	f643 1018 	movw	r0, #14616	; 0x3918
   16d8c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   16d90:	f643 1128 	movw	r1, #14632	; 0x3928
   16d94:	f2c1 0100 	movt	r1, #4096	; 0x1000
   16d98:	f643 1220 	movw	r2, #14624	; 0x3920
   16d9c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   16da0:	f7ff fe98 	bl	16ad4 <_HandleRequest>
   16da4:	4603      	mov	r3, r0
   16da6:	2b00      	cmp	r3, #0
   16da8:	d104      	bne.n	16db4 <USBHandleControlTransfer+0x1e8>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
   16daa:	79bb      	ldrb	r3, [r7, #6]
   16dac:	4618      	mov	r0, r3
   16dae:	f7ff feb9 	bl	16b24 <StallControlPipe>
						return;
   16db2:	e011      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
					}
					/* send status to host */
					DataIn();
   16db4:	f7ff fed6 	bl	16b64 <DataIn>
   16db8:	e00e      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
				}
			}
			else {
				/* absorb zero-length status message */
				iChunk = USBHwEPRead(0x00, NULL, 0);
   16dba:	f04f 0000 	mov.w	r0, #0
   16dbe:	f04f 0100 	mov.w	r1, #0
   16dc2:	f04f 0200 	mov.w	r2, #0
   16dc6:	f000 fa69 	bl	1729c <USBHwEPRead>
   16dca:	60b8      	str	r0, [r7, #8]
   16dcc:	e004      	b.n	16dd8 <USBHandleControlTransfer+0x20c>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
   16dce:	79fb      	ldrb	r3, [r7, #7]
   16dd0:	2b80      	cmp	r3, #128	; 0x80
   16dd2:	d101      	bne.n	16dd8 <USBHandleControlTransfer+0x20c>
		/* IN transfer */
		/* send more data if available (possibly a 0-length packet) */
		DataIn();
   16dd4:	f7ff fec6 	bl	16b64 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
   16dd8:	f107 0710 	add.w	r7, r7, #16
   16ddc:	46bd      	mov	sp, r7
   16dde:	bd80      	pop	{r7, pc}

00016de0 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
   16de0:	b480      	push	{r7}
   16de2:	b085      	sub	sp, #20
   16de4:	af00      	add	r7, sp, #0
   16de6:	60f8      	str	r0, [r7, #12]
   16de8:	60b9      	str	r1, [r7, #8]
   16dea:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
   16dec:	f643 132c 	movw	r3, #14636	; 0x392c
   16df0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16df4:	68fa      	ldr	r2, [r7, #12]
   16df6:	68b9      	ldr	r1, [r7, #8]
   16df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	apbDataStore[iType] = pbDataStore;
   16dfc:	f643 133c 	movw	r3, #14652	; 0x393c
   16e00:	f2c1 0300 	movt	r3, #4096	; 0x1000
   16e04:	68fa      	ldr	r2, [r7, #12]
   16e06:	6879      	ldr	r1, [r7, #4]
   16e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   16e0c:	f107 0714 	add.w	r7, r7, #20
   16e10:	46bd      	mov	sp, r7
   16e12:	bc80      	pop	{r7}
   16e14:	4770      	bx	lr
   16e16:	bf00      	nop

00016e18 <Wait4DevInt>:
	Local function to wait for a device interrupt (and clear it)

	@param [in]	dwIntr		Bitmask of interrupts to wait for
 */
static void Wait4DevInt(U32 dwIntr)
{
   16e18:	b480      	push	{r7}
   16e1a:	b083      	sub	sp, #12
   16e1c:	af00      	add	r7, sp, #0
   16e1e:	6078      	str	r0, [r7, #4]
	/* wait for specific interrupt */
	while ((LPC_USB->USBDevIntSt & dwIntr) != dwIntr);
   16e20:	bf00      	nop
   16e22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16e26:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16e2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16e2e:	687b      	ldr	r3, [r7, #4]
   16e30:	401a      	ands	r2, r3
   16e32:	687b      	ldr	r3, [r7, #4]
   16e34:	429a      	cmp	r2, r3
   16e36:	d1f4      	bne.n	16e22 <Wait4DevInt+0xa>
	/* clear the interrupt bits */
	LPC_USB->USBDevIntClr = dwIntr;
   16e38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16e3c:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16e40:	687a      	ldr	r2, [r7, #4]
   16e42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16e46:	f107 070c 	add.w	r7, r7, #12
   16e4a:	46bd      	mov	sp, r7
   16e4c:	bc80      	pop	{r7}
   16e4e:	4770      	bx	lr

00016e50 <USBHwCmd>:
	Local function to send a command to the USB protocol engine

	@param [in]	bCmd		Command to send
 */
static void USBHwCmd(U8 bCmd)
{
   16e50:	b580      	push	{r7, lr}
   16e52:	b082      	sub	sp, #8
   16e54:	af00      	add	r7, sp, #0
   16e56:	4603      	mov	r3, r0
   16e58:	71fb      	strb	r3, [r7, #7]
	/* clear CDFULL/CCEMTY */
	LPC_USB->USBDevIntClr = CDFULL | CCEMTY;
   16e5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16e5e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16e62:	f04f 0230 	mov.w	r2, #48	; 0x30
   16e66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	/* write command code */
	LPC_USB->USBCmdCode = 0x00000500 | (bCmd << 16);
   16e6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16e6e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16e72:	79fa      	ldrb	r2, [r7, #7]
   16e74:	ea4f 4202 	mov.w	r2, r2, lsl #16
   16e78:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
   16e7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	Wait4DevInt(CCEMTY);
   16e80:	f04f 0010 	mov.w	r0, #16
   16e84:	f7ff ffc8 	bl	16e18 <Wait4DevInt>
}
   16e88:	f107 0708 	add.w	r7, r7, #8
   16e8c:	46bd      	mov	sp, r7
   16e8e:	bd80      	pop	{r7, pc}

00016e90 <USBHwCmdWrite>:

	@param [in]	bCmd		Command to send
	@param [in]	bData		Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
   16e90:	b580      	push	{r7, lr}
   16e92:	b082      	sub	sp, #8
   16e94:	af00      	add	r7, sp, #0
   16e96:	4602      	mov	r2, r0
   16e98:	460b      	mov	r3, r1
   16e9a:	71fa      	strb	r2, [r7, #7]
   16e9c:	80bb      	strh	r3, [r7, #4]
	/* write command code */
	USBHwCmd(bCmd);
   16e9e:	79fb      	ldrb	r3, [r7, #7]
   16ea0:	4618      	mov	r0, r3
   16ea2:	f7ff ffd5 	bl	16e50 <USBHwCmd>

	/* write command data */
	LPC_USB->USBCmdCode = 0x00000100 | (bData << 16);
   16ea6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16eaa:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16eae:	88ba      	ldrh	r2, [r7, #4]
   16eb0:	ea4f 4202 	mov.w	r2, r2, lsl #16
   16eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   16eb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	Wait4DevInt(CCEMTY);
   16ebc:	f04f 0010 	mov.w	r0, #16
   16ec0:	f7ff ffaa 	bl	16e18 <Wait4DevInt>
}
   16ec4:	f107 0708 	add.w	r7, r7, #8
   16ec8:	46bd      	mov	sp, r7
   16eca:	bd80      	pop	{r7, pc}

00016ecc <USBHwCmdRead>:
	@param [in]	bCmd		Command to send

	@return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
   16ecc:	b580      	push	{r7, lr}
   16ece:	b082      	sub	sp, #8
   16ed0:	af00      	add	r7, sp, #0
   16ed2:	4603      	mov	r3, r0
   16ed4:	71fb      	strb	r3, [r7, #7]
	/* write command code */
	USBHwCmd(bCmd);
   16ed6:	79fb      	ldrb	r3, [r7, #7]
   16ed8:	4618      	mov	r0, r3
   16eda:	f7ff ffb9 	bl	16e50 <USBHwCmd>

	/* get data */
	LPC_USB->USBCmdCode = 0x00000200 | (bCmd << 16);
   16ede:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16ee2:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16ee6:	79fa      	ldrb	r2, [r7, #7]
   16ee8:	ea4f 4202 	mov.w	r2, r2, lsl #16
   16eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   16ef0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	Wait4DevInt(CDFULL);
   16ef4:	f04f 0020 	mov.w	r0, #32
   16ef8:	f7ff ff8e 	bl	16e18 <Wait4DevInt>
	return LPC_USB->USBCmdData;
   16efc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16f00:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16f04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
   16f08:	b2db      	uxtb	r3, r3
}
   16f0a:	4618      	mov	r0, r3
   16f0c:	f107 0708 	add.w	r7, r7, #8
   16f10:	46bd      	mov	sp, r7
   16f12:	bd80      	pop	{r7, pc}

00016f14 <USBHwEPRealize>:

	@param [in]	idx			Endpoint index
	@param [in] wMaxPSize	Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
   16f14:	b580      	push	{r7, lr}
   16f16:	b082      	sub	sp, #8
   16f18:	af00      	add	r7, sp, #0
   16f1a:	6078      	str	r0, [r7, #4]
   16f1c:	460b      	mov	r3, r1
   16f1e:	807b      	strh	r3, [r7, #2]
	LPC_USB->USBReEP |= (1 << idx);
   16f20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16f24:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16f28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   16f2c:	f2c5 0200 	movt	r2, #20480	; 0x5000
   16f30:	f8d2 1244 	ldr.w	r1, [r2, #580]	; 0x244
   16f34:	f04f 0001 	mov.w	r0, #1
   16f38:	687a      	ldr	r2, [r7, #4]
   16f3a:	fa00 f202 	lsl.w	r2, r0, r2
   16f3e:	430a      	orrs	r2, r1
   16f40:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	LPC_USB->USBEpInd = idx;
   16f44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16f48:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16f4c:	687a      	ldr	r2, [r7, #4]
   16f4e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	LPC_USB->USBMaxPSize = wMaxPSize;
   16f52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   16f56:	f2c5 0300 	movt	r3, #20480	; 0x5000
   16f5a:	887a      	ldrh	r2, [r7, #2]
   16f5c:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	Wait4DevInt(EP_RLZED);
   16f60:	f44f 7080 	mov.w	r0, #256	; 0x100
   16f64:	f7ff ff58 	bl	16e18 <Wait4DevInt>
}
   16f68:	f107 0708 	add.w	r7, r7, #8
   16f6c:	46bd      	mov	sp, r7
   16f6e:	bd80      	pop	{r7, pc}

00016f70 <USBHwEPEnable>:

	@param [in]	idx		Endpoint index
	@param [in]	fEnable	TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
   16f70:	b580      	push	{r7, lr}
   16f72:	b082      	sub	sp, #8
   16f74:	af00      	add	r7, sp, #0
   16f76:	6078      	str	r0, [r7, #4]
   16f78:	460b      	mov	r3, r1
   16f7a:	70fb      	strb	r3, [r7, #3]
	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	b2db      	uxtb	r3, r3
   16f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16f84:	b2db      	uxtb	r3, r3
   16f86:	b2da      	uxtb	r2, r3
   16f88:	78fb      	ldrb	r3, [r7, #3]
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	d002      	beq.n	16f94 <USBHwEPEnable+0x24>
   16f8e:	f04f 0300 	mov.w	r3, #0
   16f92:	e001      	b.n	16f98 <USBHwEPEnable+0x28>
   16f94:	f04f 0320 	mov.w	r3, #32
   16f98:	4610      	mov	r0, r2
   16f9a:	4619      	mov	r1, r3
   16f9c:	f7ff ff78 	bl	16e90 <USBHwCmdWrite>
}
   16fa0:	f107 0708 	add.w	r7, r7, #8
   16fa4:	46bd      	mov	sp, r7
   16fa6:	bd80      	pop	{r7, pc}

00016fa8 <USBHwEPConfig>:

	@param [in]	bEP				Endpoint number
	@param [in]	wMaxPacketSize	Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
   16fa8:	b580      	push	{r7, lr}
   16faa:	b084      	sub	sp, #16
   16fac:	af00      	add	r7, sp, #0
   16fae:	4602      	mov	r2, r0
   16fb0:	460b      	mov	r3, r1
   16fb2:	71fa      	strb	r2, [r7, #7]
   16fb4:	80bb      	strh	r3, [r7, #4]
	int idx;

	idx = EP2IDX(bEP);
   16fb6:	79fb      	ldrb	r3, [r7, #7]
   16fb8:	f003 030f 	and.w	r3, r3, #15
   16fbc:	ea4f 0243 	mov.w	r2, r3, lsl #1
   16fc0:	79fb      	ldrb	r3, [r7, #7]
   16fc2:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   16fc6:	b2db      	uxtb	r3, r3
   16fc8:	4313      	orrs	r3, r2
   16fca:	60fb      	str	r3, [r7, #12]

	/* realise EP */
	USBHwEPRealize(idx, wMaxPacketSize);
   16fcc:	88bb      	ldrh	r3, [r7, #4]
   16fce:	68f8      	ldr	r0, [r7, #12]
   16fd0:	4619      	mov	r1, r3
   16fd2:	f7ff ff9f 	bl	16f14 <USBHwEPRealize>

	/* enable EP */
	USBHwEPEnable(idx, TRUE);
   16fd6:	68f8      	ldr	r0, [r7, #12]
   16fd8:	f04f 0101 	mov.w	r1, #1
   16fdc:	f7ff ffc8 	bl	16f70 <USBHwEPEnable>
}
   16fe0:	f107 0710 	add.w	r7, r7, #16
   16fe4:	46bd      	mov	sp, r7
   16fe6:	bd80      	pop	{r7, pc}

00016fe8 <USBHwRegisterEPIntHandler>:

	@param [in]	bEP				Endpoint number
	@param [in]	pfnHandler		Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
   16fe8:	b480      	push	{r7}
   16fea:	b085      	sub	sp, #20
   16fec:	af00      	add	r7, sp, #0
   16fee:	4603      	mov	r3, r0
   16ff0:	6039      	str	r1, [r7, #0]
   16ff2:	71fb      	strb	r3, [r7, #7]
	int idx;

	idx = EP2IDX(bEP);
   16ff4:	79fb      	ldrb	r3, [r7, #7]
   16ff6:	f003 030f 	and.w	r3, r3, #15
   16ffa:	ea4f 0243 	mov.w	r2, r3, lsl #1
   16ffe:	79fb      	ldrb	r3, [r7, #7]
   17000:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   17004:	b2db      	uxtb	r3, r3
   17006:	4313      	orrs	r3, r2
   17008:	60fb      	str	r3, [r7, #12]

	ASSERT(idx<32);

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
   1700a:	68fb      	ldr	r3, [r7, #12]
   1700c:	ea4f 72d3 	mov.w	r2, r3, lsr #31
   17010:	18d3      	adds	r3, r2, r3
   17012:	ea4f 0363 	mov.w	r3, r3, asr #1
   17016:	461a      	mov	r2, r3
   17018:	f643 1350 	movw	r3, #14672	; 0x3950
   1701c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17020:	6839      	ldr	r1, [r7, #0]
   17022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* enable EP interrupt */
	LPC_USB->USBEpIntEn |= (1 << idx);
   17026:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1702a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1702e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   17032:	f2c5 0200 	movt	r2, #20480	; 0x5000
   17036:	f8d2 1234 	ldr.w	r1, [r2, #564]	; 0x234
   1703a:	f04f 0001 	mov.w	r0, #1
   1703e:	68fa      	ldr	r2, [r7, #12]
   17040:	fa00 f202 	lsl.w	r2, r0, r2
   17044:	430a      	orrs	r2, r1
   17046:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	LPC_USB->USBDevIntEn |= EP_SLOW;
   1704a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1704e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17052:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   17056:	f2c5 0200 	movt	r2, #20480	; 0x5000
   1705a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
   1705e:	f042 0204 	orr.w	r2, r2, #4
   17062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	DBG("Registered handler for EP 0x%x\n", bEP);
}
   17066:	f107 0714 	add.w	r7, r7, #20
   1706a:	46bd      	mov	sp, r7
   1706c:	bc80      	pop	{r7}
   1706e:	4770      	bx	lr

00017070 <USBHwRegisterDevIntHandler>:
	Registers an device status callback

	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
   17070:	b480      	push	{r7}
   17072:	b083      	sub	sp, #12
   17074:	af00      	add	r7, sp, #0
   17076:	6078      	str	r0, [r7, #4]
	_pfnDevIntHandler = pfnHandler;
   17078:	f643 134c 	movw	r3, #14668	; 0x394c
   1707c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17080:	687a      	ldr	r2, [r7, #4]
   17082:	601a      	str	r2, [r3, #0]

	/* enable device interrupt */
	LPC_USB->USBDevIntEn |= DEV_STAT;
   17084:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17088:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1708c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   17090:	f2c5 0200 	movt	r2, #20480	; 0x5000
   17094:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
   17098:	f042 0208 	orr.w	r2, r2, #8
   1709c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	DBG("Registered handler for device status\n");
}
   170a0:	f107 070c 	add.w	r7, r7, #12
   170a4:	46bd      	mov	sp, r7
   170a6:	bc80      	pop	{r7}
   170a8:	4770      	bx	lr
   170aa:	bf00      	nop

000170ac <USBHwRegisterFrameHandler>:
	Registers the frame callback

	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterFrameHandler(TFnFrameHandler *pfnHandler)
{
   170ac:	b480      	push	{r7}
   170ae:	b083      	sub	sp, #12
   170b0:	af00      	add	r7, sp, #0
   170b2:	6078      	str	r0, [r7, #4]
	_pfnFrameHandler = pfnHandler;
   170b4:	f643 1390 	movw	r3, #14736	; 0x3990
   170b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   170bc:	687a      	ldr	r2, [r7, #4]
   170be:	601a      	str	r2, [r3, #0]

	/* enable device interrupt */
	LPC_USB->USBDevIntEn |= FRAME;
   170c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   170c4:	f2c5 0300 	movt	r3, #20480	; 0x5000
   170c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   170cc:	f2c5 0200 	movt	r2, #20480	; 0x5000
   170d0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
   170d4:	f042 0201 	orr.w	r2, r2, #1
   170d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	DBG("Registered handler for frame\n");
}
   170dc:	f107 070c 	add.w	r7, r7, #12
   170e0:	46bd      	mov	sp, r7
   170e2:	bc80      	pop	{r7}
   170e4:	4770      	bx	lr
   170e6:	bf00      	nop

000170e8 <USBHwSetAddress>:
	Sets the USB address.

	@param [in]	bAddr		Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
   170e8:	b580      	push	{r7, lr}
   170ea:	b082      	sub	sp, #8
   170ec:	af00      	add	r7, sp, #0
   170ee:	4603      	mov	r3, r0
   170f0:	71fb      	strb	r3, [r7, #7]
	USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
   170f2:	79fb      	ldrb	r3, [r7, #7]
   170f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   170f8:	b2db      	uxtb	r3, r3
   170fa:	f04f 00d0 	mov.w	r0, #208	; 0xd0
   170fe:	4619      	mov	r1, r3
   17100:	f7ff fec6 	bl	16e90 <USBHwCmdWrite>
}
   17104:	f107 0708 	add.w	r7, r7, #8
   17108:	46bd      	mov	sp, r7
   1710a:	bd80      	pop	{r7, pc}

0001710c <USBHwConnect>:
	Connects or disconnects from the USB bus

	@param [in]	fConnect	If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
   1710c:	b580      	push	{r7, lr}
   1710e:	b082      	sub	sp, #8
   17110:	af00      	add	r7, sp, #0
   17112:	4603      	mov	r3, r0
   17114:	71fb      	strb	r3, [r7, #7]
	USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
   17116:	79fb      	ldrb	r3, [r7, #7]
   17118:	2b00      	cmp	r3, #0
   1711a:	bf0c      	ite	eq
   1711c:	2300      	moveq	r3, #0
   1711e:	2301      	movne	r3, #1
   17120:	b29b      	uxth	r3, r3
   17122:	f04f 00fe 	mov.w	r0, #254	; 0xfe
   17126:	4619      	mov	r1, r3
   17128:	f7ff feb2 	bl	16e90 <USBHwCmdWrite>
}
   1712c:	f107 0708 	add.w	r7, r7, #8
   17130:	46bd      	mov	sp, r7
   17132:	bd80      	pop	{r7, pc}

00017134 <USBHwNakIntEnable>:
	from NAK interrupt by checking the bits in their bEPStatus argument.

	@param [in]	bIntBits	Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
   17134:	b580      	push	{r7, lr}
   17136:	b082      	sub	sp, #8
   17138:	af00      	add	r7, sp, #0
   1713a:	4603      	mov	r3, r0
   1713c:	71fb      	strb	r3, [r7, #7]
	USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
   1713e:	79fb      	ldrb	r3, [r7, #7]
   17140:	b29b      	uxth	r3, r3
   17142:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   17146:	4619      	mov	r1, r3
   17148:	f7ff fea2 	bl	16e90 <USBHwCmdWrite>
}
   1714c:	f107 0708 	add.w	r7, r7, #8
   17150:	46bd      	mov	sp, r7
   17152:	bd80      	pop	{r7, pc}

00017154 <USBHwEPGetStatus>:

	@param [in]	bEP		Endpoint number
	@return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8	USBHwEPGetStatus(U8 bEP)
{
   17154:	b580      	push	{r7, lr}
   17156:	b084      	sub	sp, #16
   17158:	af00      	add	r7, sp, #0
   1715a:	4603      	mov	r3, r0
   1715c:	71fb      	strb	r3, [r7, #7]
	int idx = EP2IDX(bEP);
   1715e:	79fb      	ldrb	r3, [r7, #7]
   17160:	f003 030f 	and.w	r3, r3, #15
   17164:	ea4f 0243 	mov.w	r2, r3, lsl #1
   17168:	79fb      	ldrb	r3, [r7, #7]
   1716a:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   1716e:	b2db      	uxtb	r3, r3
   17170:	4313      	orrs	r3, r2
   17172:	60fb      	str	r3, [r7, #12]

	return USBHwCmdRead(CMD_EP_SELECT | idx);
   17174:	68fb      	ldr	r3, [r7, #12]
   17176:	b2db      	uxtb	r3, r3
   17178:	4618      	mov	r0, r3
   1717a:	f7ff fea7 	bl	16ecc <USBHwCmdRead>
   1717e:	4603      	mov	r3, r0
}
   17180:	4618      	mov	r0, r3
   17182:	f107 0710 	add.w	r7, r7, #16
   17186:	46bd      	mov	sp, r7
   17188:	bd80      	pop	{r7, pc}
   1718a:	bf00      	nop

0001718c <USBHwEPStall>:

	@param [in]	bEP		Endpoint number
	@param [in]	fStall	TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
   1718c:	b580      	push	{r7, lr}
   1718e:	b084      	sub	sp, #16
   17190:	af00      	add	r7, sp, #0
   17192:	4602      	mov	r2, r0
   17194:	460b      	mov	r3, r1
   17196:	71fa      	strb	r2, [r7, #7]
   17198:	71bb      	strb	r3, [r7, #6]
	int idx = EP2IDX(bEP);
   1719a:	79fb      	ldrb	r3, [r7, #7]
   1719c:	f003 030f 	and.w	r3, r3, #15
   171a0:	ea4f 0243 	mov.w	r2, r3, lsl #1
   171a4:	79fb      	ldrb	r3, [r7, #7]
   171a6:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   171aa:	b2db      	uxtb	r3, r3
   171ac:	4313      	orrs	r3, r2
   171ae:	60fb      	str	r3, [r7, #12]

	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
   171b0:	68fb      	ldr	r3, [r7, #12]
   171b2:	b2db      	uxtb	r3, r3
   171b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   171b8:	b2db      	uxtb	r3, r3
   171ba:	b2da      	uxtb	r2, r3
   171bc:	79bb      	ldrb	r3, [r7, #6]
   171be:	2b00      	cmp	r3, #0
   171c0:	bf0c      	ite	eq
   171c2:	2300      	moveq	r3, #0
   171c4:	2301      	movne	r3, #1
   171c6:	b29b      	uxth	r3, r3
   171c8:	4610      	mov	r0, r2
   171ca:	4619      	mov	r1, r3
   171cc:	f7ff fe60 	bl	16e90 <USBHwCmdWrite>
}
   171d0:	f107 0710 	add.w	r7, r7, #16
   171d4:	46bd      	mov	sp, r7
   171d6:	bd80      	pop	{r7, pc}

000171d8 <USBHwEPWrite>:
	@param [in]	iLen	Number of bytes to write

	@return TRUE if the data was successfully written or <0 in case of error.
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, int iLen)
{
   171d8:	b580      	push	{r7, lr}
   171da:	b086      	sub	sp, #24
   171dc:	af00      	add	r7, sp, #0
   171de:	4603      	mov	r3, r0
   171e0:	60b9      	str	r1, [r7, #8]
   171e2:	607a      	str	r2, [r7, #4]
   171e4:	73fb      	strb	r3, [r7, #15]
	int idx;

	idx = EP2IDX(bEP);
   171e6:	7bfb      	ldrb	r3, [r7, #15]
   171e8:	f003 030f 	and.w	r3, r3, #15
   171ec:	ea4f 0243 	mov.w	r2, r3, lsl #1
   171f0:	7bfb      	ldrb	r3, [r7, #15]
   171f2:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   171f6:	b2db      	uxtb	r3, r3
   171f8:	4313      	orrs	r3, r2
   171fa:	617b      	str	r3, [r7, #20]

	/* set write enable for specific endpoint */
	LPC_USB->USBCtrl = WR_EN | ((bEP & 0xF) << 2);
   171fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17200:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17204:	7bfa      	ldrb	r2, [r7, #15]
   17206:	f002 020f 	and.w	r2, r2, #15
   1720a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1720e:	f042 0202 	orr.w	r2, r2, #2
   17212:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

	/* set packet length */
	LPC_USB->USBTxPLen = iLen;
   17216:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1721a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1721e:	687a      	ldr	r2, [r7, #4]
   17220:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	/* write data */
	while (LPC_USB->USBCtrl & WR_EN) {
   17224:	e020      	b.n	17268 <USBHwEPWrite+0x90>
		LPC_USB->USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
   17226:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1722a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1722e:	68ba      	ldr	r2, [r7, #8]
   17230:	f102 0203 	add.w	r2, r2, #3
   17234:	7812      	ldrb	r2, [r2, #0]
   17236:	ea4f 6102 	mov.w	r1, r2, lsl #24
   1723a:	68ba      	ldr	r2, [r7, #8]
   1723c:	f102 0202 	add.w	r2, r2, #2
   17240:	7812      	ldrb	r2, [r2, #0]
   17242:	ea4f 4202 	mov.w	r2, r2, lsl #16
   17246:	4311      	orrs	r1, r2
   17248:	68ba      	ldr	r2, [r7, #8]
   1724a:	f102 0201 	add.w	r2, r2, #1
   1724e:	7812      	ldrb	r2, [r2, #0]
   17250:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17254:	4311      	orrs	r1, r2
   17256:	68ba      	ldr	r2, [r7, #8]
   17258:	7812      	ldrb	r2, [r2, #0]
   1725a:	430a      	orrs	r2, r1
   1725c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		pbBuf += 4;
   17260:	68bb      	ldr	r3, [r7, #8]
   17262:	f103 0304 	add.w	r3, r3, #4
   17266:	60bb      	str	r3, [r7, #8]

	/* set packet length */
	LPC_USB->USBTxPLen = iLen;

	/* write data */
	while (LPC_USB->USBCtrl & WR_EN) {
   17268:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1726c:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17270:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
   17274:	f003 0302 	and.w	r3, r3, #2
   17278:	2b00      	cmp	r3, #0
   1727a:	d1d4      	bne.n	17226 <USBHwEPWrite+0x4e>
		LPC_USB->USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
		pbBuf += 4;
	}

	/* select endpoint and validate buffer */
	USBHwCmd(CMD_EP_SELECT | idx);
   1727c:	697b      	ldr	r3, [r7, #20]
   1727e:	b2db      	uxtb	r3, r3
   17280:	4618      	mov	r0, r3
   17282:	f7ff fde5 	bl	16e50 <USBHwCmd>
	USBHwCmd(CMD_EP_VALIDATE_BUFFER);
   17286:	f04f 00fa 	mov.w	r0, #250	; 0xfa
   1728a:	f7ff fde1 	bl	16e50 <USBHwCmd>

	return iLen;
   1728e:	687b      	ldr	r3, [r7, #4]
}
   17290:	4618      	mov	r0, r3
   17292:	f107 0718 	add.w	r7, r7, #24
   17296:	46bd      	mov	sp, r7
   17298:	bd80      	pop	{r7, pc}
   1729a:	bf00      	nop

0001729c <USBHwEPRead>:

	@return the number of bytes available in the EP (possibly more than iMaxLen),
	or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, int iMaxLen)
{
   1729c:	b580      	push	{r7, lr}
   1729e:	b088      	sub	sp, #32
   172a0:	af00      	add	r7, sp, #0
   172a2:	4603      	mov	r3, r0
   172a4:	60b9      	str	r1, [r7, #8]
   172a6:	607a      	str	r2, [r7, #4]
   172a8:	73fb      	strb	r3, [r7, #15]
	int i, idx;
	U32	dwData, dwLen;

	idx = EP2IDX(bEP);
   172aa:	7bfb      	ldrb	r3, [r7, #15]
   172ac:	f003 030f 	and.w	r3, r3, #15
   172b0:	ea4f 0243 	mov.w	r2, r3, lsl #1
   172b4:	7bfb      	ldrb	r3, [r7, #15]
   172b6:	ea4f 13d3 	mov.w	r3, r3, lsr #7
   172ba:	b2db      	uxtb	r3, r3
   172bc:	4313      	orrs	r3, r2
   172be:	617b      	str	r3, [r7, #20]

	/* set read enable bit for specific endpoint */
	LPC_USB->USBCtrl = RD_EN | ((bEP & 0xF) << 2);
   172c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   172c4:	f2c5 0300 	movt	r3, #20480	; 0x5000
   172c8:	7bfa      	ldrb	r2, [r7, #15]
   172ca:	f002 020f 	and.w	r2, r2, #15
   172ce:	ea4f 0282 	mov.w	r2, r2, lsl #2
   172d2:	f042 0201 	orr.w	r2, r2, #1
   172d6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

	/* wait for PKT_RDY */
	do {
		dwLen = LPC_USB->USBRxPLen;
   172da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   172de:	f2c5 0300 	movt	r3, #20480	; 0x5000
   172e2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
   172e6:	613b      	str	r3, [r7, #16]
	} while ((dwLen & PKT_RDY) == 0);
   172e8:	693b      	ldr	r3, [r7, #16]
   172ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   172ee:	2b00      	cmp	r3, #0
   172f0:	d0f3      	beq.n	172da <USBHwEPRead+0x3e>

	/* packet valid? */
	if ((dwLen & DV) == 0) {
   172f2:	693b      	ldr	r3, [r7, #16]
   172f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   172f8:	2b00      	cmp	r3, #0
   172fa:	d102      	bne.n	17302 <USBHwEPRead+0x66>
		return -1;
   172fc:	f04f 33ff 	mov.w	r3, #4294967295
   17300:	e043      	b.n	1738a <USBHwEPRead+0xee>
	}

	/* get length */
	dwLen &= PKT_LNGTH_MASK;
   17302:	693b      	ldr	r3, [r7, #16]
   17304:	ea4f 5383 	mov.w	r3, r3, lsl #22
   17308:	ea4f 5393 	mov.w	r3, r3, lsr #22
   1730c:	613b      	str	r3, [r7, #16]

	/* get data */
	dwData = 0;
   1730e:	f04f 0300 	mov.w	r3, #0
   17312:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < dwLen; i++) {
   17314:	f04f 0300 	mov.w	r3, #0
   17318:	61fb      	str	r3, [r7, #28]
   1731a:	e020      	b.n	1735e <USBHwEPRead+0xc2>
		if ((i % 4) == 0) {
   1731c:	69fb      	ldr	r3, [r7, #28]
   1731e:	f003 0303 	and.w	r3, r3, #3
   17322:	2b00      	cmp	r3, #0
   17324:	d106      	bne.n	17334 <USBHwEPRead+0x98>
			dwData = LPC_USB->USBRxData;
   17326:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1732a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1732e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
   17332:	61bb      	str	r3, [r7, #24]
		}
		if ((pbBuf != NULL) && (i < iMaxLen)) {
   17334:	68bb      	ldr	r3, [r7, #8]
   17336:	2b00      	cmp	r3, #0
   17338:	d009      	beq.n	1734e <USBHwEPRead+0xb2>
   1733a:	69fa      	ldr	r2, [r7, #28]
   1733c:	687b      	ldr	r3, [r7, #4]
   1733e:	429a      	cmp	r2, r3
   17340:	da05      	bge.n	1734e <USBHwEPRead+0xb2>
			pbBuf[i] = dwData & 0xFF;
   17342:	69fb      	ldr	r3, [r7, #28]
   17344:	68ba      	ldr	r2, [r7, #8]
   17346:	18d3      	adds	r3, r2, r3
   17348:	69ba      	ldr	r2, [r7, #24]
   1734a:	b2d2      	uxtb	r2, r2
   1734c:	701a      	strb	r2, [r3, #0]
		}
		dwData >>= 8;
   1734e:	69bb      	ldr	r3, [r7, #24]
   17350:	ea4f 2313 	mov.w	r3, r3, lsr #8
   17354:	61bb      	str	r3, [r7, #24]
	/* get length */
	dwLen &= PKT_LNGTH_MASK;

	/* get data */
	dwData = 0;
	for (i = 0; i < dwLen; i++) {
   17356:	69fb      	ldr	r3, [r7, #28]
   17358:	f103 0301 	add.w	r3, r3, #1
   1735c:	61fb      	str	r3, [r7, #28]
   1735e:	69fa      	ldr	r2, [r7, #28]
   17360:	693b      	ldr	r3, [r7, #16]
   17362:	429a      	cmp	r2, r3
   17364:	d3da      	bcc.n	1731c <USBHwEPRead+0x80>
		}
		dwData >>= 8;
	}

	/* make sure RD_EN is clear */
	LPC_USB->USBCtrl = 0;
   17366:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1736a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1736e:	f04f 0200 	mov.w	r2, #0
   17372:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

	/* select endpoint and clear buffer */
	USBHwCmd(CMD_EP_SELECT | idx);
   17376:	697b      	ldr	r3, [r7, #20]
   17378:	b2db      	uxtb	r3, r3
   1737a:	4618      	mov	r0, r3
   1737c:	f7ff fd68 	bl	16e50 <USBHwCmd>
	USBHwCmd(CMD_EP_CLEAR_BUFFER);
   17380:	f04f 00f2 	mov.w	r0, #242	; 0xf2
   17384:	f7ff fd64 	bl	16e50 <USBHwCmd>

	return dwLen;
   17388:	693b      	ldr	r3, [r7, #16]
}
   1738a:	4618      	mov	r0, r3
   1738c:	f107 0720 	add.w	r7, r7, #32
   17390:	46bd      	mov	sp, r7
   17392:	bd80      	pop	{r7, pc}

00017394 <USBHwConfigDevice>:
	'configured' bit is set in the device status register.

	@param [in]	fConfigured	If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
   17394:	b580      	push	{r7, lr}
   17396:	b082      	sub	sp, #8
   17398:	af00      	add	r7, sp, #0
   1739a:	4603      	mov	r3, r0
   1739c:	71fb      	strb	r3, [r7, #7]
	/* set configured bit */
	USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
   1739e:	79fb      	ldrb	r3, [r7, #7]
   173a0:	2b00      	cmp	r3, #0
   173a2:	bf0c      	ite	eq
   173a4:	2300      	moveq	r3, #0
   173a6:	2301      	movne	r3, #1
   173a8:	b29b      	uxth	r3, r3
   173aa:	f04f 00d8 	mov.w	r0, #216	; 0xd8
   173ae:	4619      	mov	r1, r3
   173b0:	f7ff fd6e 	bl	16e90 <USBHwCmdWrite>
}
   173b4:	f107 0708 	add.w	r7, r7, #8
   173b8:	46bd      	mov	sp, r7
   173ba:	bd80      	pop	{r7, pc}

000173bc <USBHwISR>:
	@todo Get all 11 bits of frame number instead of just 8

	Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
   173bc:	b580      	push	{r7, lr}
   173be:	b086      	sub	sp, #24
   173c0:	af00      	add	r7, sp, #0
	U8	bEPStat, bDevStat, bStat;
	int i;
	U16	wFrame;

	/* handle device interrupts */
	dwStatus = LPC_USB->USBDevIntSt;
   173c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   173c6:	f2c5 0300 	movt	r3, #20480	; 0x5000
   173ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   173ce:	613b      	str	r3, [r7, #16]

	/* frame interrupt */
	if (dwStatus & FRAME) {
   173d0:	693b      	ldr	r3, [r7, #16]
   173d2:	f003 0301 	and.w	r3, r3, #1
   173d6:	b2db      	uxtb	r3, r3
   173d8:	2b00      	cmp	r3, #0
   173da:	d01c      	beq.n	17416 <USBHwISR+0x5a>
		/* clear int */
		LPC_USB->USBDevIntClr = FRAME;
   173dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   173e0:	f2c5 0300 	movt	r3, #20480	; 0x5000
   173e4:	f04f 0201 	mov.w	r2, #1
   173e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		/* call handler */
		if (_pfnFrameHandler != NULL) {
   173ec:	f643 1390 	movw	r3, #14736	; 0x3990
   173f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   173f4:	681b      	ldr	r3, [r3, #0]
   173f6:	2b00      	cmp	r3, #0
   173f8:	d00d      	beq.n	17416 <USBHwISR+0x5a>
			wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
   173fa:	f04f 00f5 	mov.w	r0, #245	; 0xf5
   173fe:	f7ff fd65 	bl	16ecc <USBHwCmdRead>
   17402:	4603      	mov	r3, r0
   17404:	81fb      	strh	r3, [r7, #14]
			_pfnFrameHandler(wFrame);
   17406:	f643 1390 	movw	r3, #14736	; 0x3990
   1740a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1740e:	681b      	ldr	r3, [r3, #0]
   17410:	89fa      	ldrh	r2, [r7, #14]
   17412:	4610      	mov	r0, r2
   17414:	4798      	blx	r3
		}
	}

	/* device status interrupt */
	if (dwStatus & DEV_STAT) {
   17416:	693b      	ldr	r3, [r7, #16]
   17418:	f003 0308 	and.w	r3, r3, #8
   1741c:	2b00      	cmp	r3, #0
   1741e:	d025      	beq.n	1746c <USBHwISR+0xb0>
		/*	Clear DEV_STAT interrupt before reading DEV_STAT register.
			This prevents corrupted device status reads, see
			LPC2148 User manual revision 2, 25 july 2006.
		*/
		LPC_USB->USBDevIntClr = DEV_STAT;
   17420:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17424:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17428:	f04f 0208 	mov.w	r2, #8
   1742c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
   17430:	f04f 00fe 	mov.w	r0, #254	; 0xfe
   17434:	f7ff fd4a 	bl	16ecc <USBHwCmdRead>
   17438:	4603      	mov	r3, r0
   1743a:	737b      	strb	r3, [r7, #13]
		if (bDevStat & (CON_CH | SUS_CH | RST)) {
   1743c:	7b7b      	ldrb	r3, [r7, #13]
   1743e:	f003 031a 	and.w	r3, r3, #26
   17442:	2b00      	cmp	r3, #0
   17444:	d012      	beq.n	1746c <USBHwISR+0xb0>
			/* convert device status into something HW independent */
			bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
   17446:	7b7b      	ldrb	r3, [r7, #13]
   17448:	f003 0315 	and.w	r3, r3, #21
   1744c:	733b      	strb	r3, [r7, #12]
					((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
					((bDevStat & RST) ? DEV_STATUS_RESET : 0);
			/* call handler */
			if (_pfnDevIntHandler != NULL) {
   1744e:	f643 134c 	movw	r3, #14668	; 0x394c
   17452:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17456:	681b      	ldr	r3, [r3, #0]
   17458:	2b00      	cmp	r3, #0
   1745a:	d007      	beq.n	1746c <USBHwISR+0xb0>
				_pfnDevIntHandler(bStat);
   1745c:	f643 134c 	movw	r3, #14668	; 0x394c
   17460:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17464:	681b      	ldr	r3, [r3, #0]
   17466:	7b3a      	ldrb	r2, [r7, #12]
   17468:	4610      	mov	r0, r2
   1746a:	4798      	blx	r3
			}
		}
	}

	/* endpoint interrupt */
	if (dwStatus & EP_SLOW) {
   1746c:	693b      	ldr	r3, [r7, #16]
   1746e:	f003 0304 	and.w	r3, r3, #4
   17472:	2b00      	cmp	r3, #0
   17474:	d066      	beq.n	17544 <USBHwISR+0x188>
		/* clear EP_SLOW */
		LPC_USB->USBDevIntClr = EP_SLOW;
   17476:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1747a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1747e:	f04f 0204 	mov.w	r2, #4
   17482:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		/* check all endpoints */
		for (i = 0; i < 32; i++) {
   17486:	f04f 0300 	mov.w	r3, #0
   1748a:	617b      	str	r3, [r7, #20]
   1748c:	e057      	b.n	1753e <USBHwISR+0x182>
			dwIntBit = (1 << i);
   1748e:	f04f 0201 	mov.w	r2, #1
   17492:	697b      	ldr	r3, [r7, #20]
   17494:	fa02 f303 	lsl.w	r3, r2, r3
   17498:	60bb      	str	r3, [r7, #8]
			if (LPC_USB->USBEpIntSt & dwIntBit) {
   1749a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1749e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   174a2:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
   174a6:	68bb      	ldr	r3, [r7, #8]
   174a8:	4013      	ands	r3, r2
   174aa:	2b00      	cmp	r3, #0
   174ac:	d043      	beq.n	17536 <USBHwISR+0x17a>
				/* clear int (and retrieve status) */
				LPC_USB->USBEpIntClr = dwIntBit;
   174ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   174b2:	f2c5 0300 	movt	r3, #20480	; 0x5000
   174b6:	68ba      	ldr	r2, [r7, #8]
   174b8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
				Wait4DevInt(CDFULL);
   174bc:	f04f 0020 	mov.w	r0, #32
   174c0:	f7ff fcaa 	bl	16e18 <Wait4DevInt>
				bEPStat = LPC_USB->USBCmdData;
   174c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   174c8:	f2c5 0300 	movt	r3, #20480	; 0x5000
   174cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
   174d0:	71fb      	strb	r3, [r7, #7]
				/* convert EP pipe stat into something HW independent */
				bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
   174d2:	79fb      	ldrb	r3, [r7, #7]
   174d4:	f003 031f 	and.w	r3, r3, #31
   174d8:	733b      	strb	r3, [r7, #12]
						((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
						((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
						((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
						((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
				/* call handler */
				if (_apfnEPIntHandlers[i / 2] != NULL) {
   174da:	697b      	ldr	r3, [r7, #20]
   174dc:	ea4f 72d3 	mov.w	r2, r3, lsr #31
   174e0:	18d3      	adds	r3, r2, r3
   174e2:	ea4f 0363 	mov.w	r3, r3, asr #1
   174e6:	461a      	mov	r2, r3
   174e8:	f643 1350 	movw	r3, #14672	; 0x3950
   174ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   174f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   174f4:	2b00      	cmp	r3, #0
   174f6:	d01e      	beq.n	17536 <USBHwISR+0x17a>
					_apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
   174f8:	697b      	ldr	r3, [r7, #20]
   174fa:	ea4f 72d3 	mov.w	r2, r3, lsr #31
   174fe:	18d3      	adds	r3, r2, r3
   17500:	ea4f 0363 	mov.w	r3, r3, asr #1
   17504:	461a      	mov	r2, r3
   17506:	f643 1350 	movw	r3, #14672	; 0x3950
   1750a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17512:	697a      	ldr	r2, [r7, #20]
   17514:	ea4f 12c2 	mov.w	r2, r2, lsl #7
   17518:	b2d1      	uxtb	r1, r2
   1751a:	697a      	ldr	r2, [r7, #20]
   1751c:	ea4f 0262 	mov.w	r2, r2, asr #1
   17520:	b2d2      	uxtb	r2, r2
   17522:	f002 020f 	and.w	r2, r2, #15
   17526:	b2d2      	uxtb	r2, r2
   17528:	430a      	orrs	r2, r1
   1752a:	b2d2      	uxtb	r2, r2
   1752c:	b2d1      	uxtb	r1, r2
   1752e:	7b3a      	ldrb	r2, [r7, #12]
   17530:	4608      	mov	r0, r1
   17532:	4611      	mov	r1, r2
   17534:	4798      	blx	r3
	/* endpoint interrupt */
	if (dwStatus & EP_SLOW) {
		/* clear EP_SLOW */
		LPC_USB->USBDevIntClr = EP_SLOW;
		/* check all endpoints */
		for (i = 0; i < 32; i++) {
   17536:	697b      	ldr	r3, [r7, #20]
   17538:	f103 0301 	add.w	r3, r3, #1
   1753c:	617b      	str	r3, [r7, #20]
   1753e:	697b      	ldr	r3, [r7, #20]
   17540:	2b1f      	cmp	r3, #31
   17542:	dda4      	ble.n	1748e <USBHwISR+0xd2>
					_apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
				}
			}
		}
	}
}
   17544:	f107 0718 	add.w	r7, r7, #24
   17548:	46bd      	mov	sp, r7
   1754a:	bd80      	pop	{r7, pc}

0001754c <USBHwInit>:
	acts as a pull-up and so prevents detection of USB disconnect.

	@return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
   1754c:	b580      	push	{r7, lr}
   1754e:	af00      	add	r7, sp, #0
	// configure P0.31 for CONNECT
	PINSEL1 = (PINSEL1 & ~(3 << 30)) | (2 << 30);	// P0.31
*/

	/* P2.9 -> USB_CONNECT */
	LPC_PINCON->PINSEL4 &= ~0x000C0000;
   17550:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17554:	f2c4 0302 	movt	r3, #16386	; 0x4002
   17558:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1755c:	f2c4 0202 	movt	r2, #16386	; 0x4002
   17560:	6912      	ldr	r2, [r2, #16]
   17562:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
   17566:	611a      	str	r2, [r3, #16]
	LPC_PINCON->PINSEL4 |= 0x00040000;
   17568:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1756c:	f2c4 0302 	movt	r3, #16386	; 0x4002
   17570:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   17574:	f2c4 0202 	movt	r2, #16386	; 0x4002
   17578:	6912      	ldr	r2, [r2, #16]
   1757a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1757e:	611a      	str	r2, [r3, #16]

	/* P1.18 -> USB_UP_LED */
	/* P1.30 -> VBUS */
	LPC_PINCON->PINSEL3 &= ~0x30000030;
   17580:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17584:	f2c4 0302 	movt	r3, #16386	; 0x4002
   17588:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1758c:	f2c4 0202 	movt	r2, #16386	; 0x4002
   17590:	68d2      	ldr	r2, [r2, #12]
   17592:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
   17596:	f022 0230 	bic.w	r2, r2, #48	; 0x30
   1759a:	60da      	str	r2, [r3, #12]
	LPC_PINCON->PINSEL3 |= 0x20000010;
   1759c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   175a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
   175a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   175a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
   175ac:	68d2      	ldr	r2, [r2, #12]
   175ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   175b2:	f042 0210 	orr.w	r2, r2, #16
   175b6:	60da      	str	r2, [r3, #12]

	/* P0.29 -> USB_D+ */
	/* P0.30 -> USB_D- */
	LPC_PINCON->PINSEL1 &= ~0x3C000000;
   175b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   175bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
   175c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   175c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
   175c8:	6852      	ldr	r2, [r2, #4]
   175ca:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
   175ce:	605a      	str	r2, [r3, #4]
	LPC_PINCON->PINSEL1 |= 0x14000000;
   175d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   175d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
   175d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   175dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
   175e0:	6852      	ldr	r2, [r2, #4]
   175e2:	f042 52a0 	orr.w	r2, r2, #335544320	; 0x14000000
   175e6:	605a      	str	r2, [r3, #4]


	/* enable PUSB */
	LPC_SC->PCONP |= (1 << 31);
   175e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   175ec:	f2c4 030f 	movt	r3, #16399	; 0x400f
   175f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   175f4:	f2c4 020f 	movt	r2, #16399	; 0x400f
   175f8:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
   175fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   17600:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/* Dev clock, AHB clock enable  */
	LPC_USB->USBClkCtrl = 0x1A;
   17604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   17608:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1760c:	f04f 021a 	mov.w	r2, #26
   17610:	f8c3 2ff4 	str.w	r2, [r3, #4084]	; 0xff4
	while ((LPC_USB->USBClkSt & 0x1A) != 0x1A);
   17614:	bf00      	nop
   17616:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1761a:	f2c5 0300 	movt	r3, #20480	; 0x5000
   1761e:	f8d3 3ff8 	ldr.w	r3, [r3, #4088]	; 0xff8
   17622:	f003 031a 	and.w	r3, r3, #26
   17626:	2b1a      	cmp	r3, #26
   17628:	d1f5      	bne.n	17616 <USBHwInit+0xca>

	/* disable/clear all interrupts for now */
	LPC_USB->USBDevIntEn = 0;
   1762a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1762e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17632:	f04f 0200 	mov.w	r2, #0
   17636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	LPC_USB->USBDevIntClr = 0xFFFFFFFF;
   1763a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1763e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17642:	f04f 32ff 	mov.w	r2, #4294967295
   17646:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	LPC_USB->USBDevIntPri = 0;
   1764a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1764e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17652:	f04f 0200 	mov.w	r2, #0
   17656:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	LPC_USB->USBEpIntEn = 0;
   1765a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1765e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17662:	f04f 0200 	mov.w	r2, #0
   17666:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
   1766a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1766e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17672:	f04f 32ff 	mov.w	r2, #4294967295
   17676:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	LPC_USB->USBEpIntPri = 0;
   1767a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1767e:	f2c5 0300 	movt	r3, #20480	; 0x5000
   17682:	f04f 0200 	mov.w	r2, #0
   17686:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240

	/* by default, only ACKs generate interrupts */
	USBHwNakIntEnable(0);
   1768a:	f04f 0000 	mov.w	r0, #0
   1768e:	f7ff fd51 	bl	17134 <USBHwNakIntEnable>

	return TRUE;
   17692:	f04f 0301 	mov.w	r3, #1
}
   17696:	4618      	mov	r0, r3
   17698:	bd80      	pop	{r7, pc}
   1769a:	bf00      	nop

0001769c <HandleUsbReset>:
	USB reset handler

	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
   1769c:	b480      	push	{r7}
   1769e:	b083      	sub	sp, #12
   176a0:	af00      	add	r7, sp, #0
   176a2:	4603      	mov	r3, r0
   176a4:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
   176a6:	f107 070c 	add.w	r7, r7, #12
   176aa:	46bd      	mov	sp, r7
   176ac:	bc80      	pop	{r7}
   176ae:	4770      	bx	lr

000176b0 <USBInit>:
	installing default callbacks.

	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
   176b0:	b580      	push	{r7, lr}
   176b2:	af00      	add	r7, sp, #0
	/* init hardware */
	USBHwInit();
   176b4:	f7ff ff4a 	bl	1754c <USBHwInit>

	/* register bus reset handler */
	USBHwRegisterDevIntHandler(HandleUsbReset);
   176b8:	f247 609d 	movw	r0, #30365	; 0x769d
   176bc:	f2c0 0001 	movt	r0, #1
   176c0:	f7ff fcd6 	bl	17070 <USBHwRegisterDevIntHandler>

	/* register control transfer handler on EP0 */
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
   176c4:	f04f 0000 	mov.w	r0, #0
   176c8:	f646 31cd 	movw	r1, #27597	; 0x6bcd
   176cc:	f2c0 0101 	movt	r1, #1
   176d0:	f7ff fc8a 	bl	16fe8 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
   176d4:	f04f 0080 	mov.w	r0, #128	; 0x80
   176d8:	f646 31cd 	movw	r1, #27597	; 0x6bcd
   176dc:	f2c0 0101 	movt	r1, #1
   176e0:	f7ff fc82 	bl	16fe8 <USBHwRegisterEPIntHandler>

	/* setup control endpoints */
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
   176e4:	f04f 0000 	mov.w	r0, #0
   176e8:	f04f 0140 	mov.w	r1, #64	; 0x40
   176ec:	f7ff fc5c 	bl	16fa8 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
   176f0:	f04f 0080 	mov.w	r0, #128	; 0x80
   176f4:	f04f 0140 	mov.w	r1, #64	; 0x40
   176f8:	f7ff fc56 	bl	16fa8 <USBHwEPConfig>

	/* register standard request handler */
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
   176fc:	f04f 0000 	mov.w	r0, #0
   17700:	f647 41dd 	movw	r1, #31965	; 0x7cdd
   17704:	f2c0 0101 	movt	r1, #1
   17708:	f643 1294 	movw	r2, #14740	; 0x3994
   1770c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   17710:	f7ff fb66 	bl	16de0 <USBRegisterRequestHandler>

	return TRUE;
   17714:	f04f 0301 	mov.w	r3, #1
}
   17718:	4618      	mov	r0, r3
   1771a:	bd80      	pop	{r7, pc}

0001771c <deleteBulkOutBuf>:
#include <usbdesc.h>
#include <csp_grp.h>
#include <csp.h>

void deleteBulkOutBuf()
{
   1771c:	b480      	push	{r7}
   1771e:	b083      	sub	sp, #12
   17720:	af00      	add	r7, sp, #0
	unsigned int count=0;
   17722:	f04f 0300 	mov.w	r3, #0
   17726:	607b      	str	r3, [r7, #4]
	while(count<=USB_BUFFER_SIZE-1)
   17728:	e00c      	b.n	17744 <deleteBulkOutBuf+0x28>
	{
		abBulkOutBuf[count] = 0;
   1772a:	f643 13f0 	movw	r3, #14832	; 0x39f0
   1772e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17732:	687a      	ldr	r2, [r7, #4]
   17734:	189b      	adds	r3, r3, r2
   17736:	f04f 0200 	mov.w	r2, #0
   1773a:	701a      	strb	r2, [r3, #0]
		count++;
   1773c:	687b      	ldr	r3, [r7, #4]
   1773e:	f103 0301 	add.w	r3, r3, #1
   17742:	607b      	str	r3, [r7, #4]
#include <csp.h>

void deleteBulkOutBuf()
{
	unsigned int count=0;
	while(count<=USB_BUFFER_SIZE-1)
   17744:	687a      	ldr	r2, [r7, #4]
   17746:	f240 1367 	movw	r3, #359	; 0x167
   1774a:	429a      	cmp	r2, r3
   1774c:	d9ed      	bls.n	1772a <deleteBulkOutBuf+0xe>
	{
		abBulkOutBuf[count] = 0;
		count++;
	}
	count = 0;
   1774e:	f04f 0300 	mov.w	r3, #0
   17752:	607b      	str	r3, [r7, #4]
	BulkOutSize = 0;
   17754:	f643 3358 	movw	r3, #15192	; 0x3b58
   17758:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1775c:	f04f 0200 	mov.w	r2, #0
   17760:	601a      	str	r2, [r3, #0]
}
   17762:	f107 070c 	add.w	r7, r7, #12
   17766:	46bd      	mov	sp, r7
   17768:	bc80      	pop	{r7}
   1776a:	4770      	bx	lr

0001776c <deleteBulkInBuf>:

void deleteBulkInBuf()
{
   1776c:	b480      	push	{r7}
   1776e:	b083      	sub	sp, #12
   17770:	af00      	add	r7, sp, #0
	unsigned int count=0;
   17772:	f04f 0300 	mov.w	r3, #0
   17776:	607b      	str	r3, [r7, #4]
	while(count<=USB_BUFFER_SIZE-1)
   17778:	e00c      	b.n	17794 <deleteBulkInBuf+0x28>
	{
		abBulkInBuf[count] = 0;
   1777a:	f643 335c 	movw	r3, #15196	; 0x3b5c
   1777e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17782:	687a      	ldr	r2, [r7, #4]
   17784:	189b      	adds	r3, r3, r2
   17786:	f04f 0200 	mov.w	r2, #0
   1778a:	701a      	strb	r2, [r3, #0]
		count++;
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	f103 0301 	add.w	r3, r3, #1
   17792:	607b      	str	r3, [r7, #4]
}

void deleteBulkInBuf()
{
	unsigned int count=0;
	while(count<=USB_BUFFER_SIZE-1)
   17794:	687a      	ldr	r2, [r7, #4]
   17796:	f240 1367 	movw	r3, #359	; 0x167
   1779a:	429a      	cmp	r2, r3
   1779c:	d9ed      	bls.n	1777a <deleteBulkInBuf+0xe>
	{
		abBulkInBuf[count] = 0;
		count++;
	}
	count = 0;
   1779e:	f04f 0300 	mov.w	r3, #0
   177a2:	607b      	str	r3, [r7, #4]
	BulkInSize = 0;
   177a4:	f643 13ec 	movw	r3, #14828	; 0x39ec
   177a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   177ac:	f04f 0200 	mov.w	r2, #0
   177b0:	601a      	str	r2, [r3, #0]
}
   177b2:	f107 070c 	add.w	r7, r7, #12
   177b6:	46bd      	mov	sp, r7
   177b8:	bc80      	pop	{r7}
   177ba:	4770      	bx	lr

000177bc <USB_IRQHandler>:
/*
	Interrupt handler
	Simply calls the USB ISR
*/
void USB_IRQHandler(void)
{
   177bc:	b580      	push	{r7, lr}
   177be:	af00      	add	r7, sp, #0
	USBHwISR();
   177c0:	f7ff fdfc 	bl	173bc <USBHwISR>
	CSP_IntClr(CSP_INT_CTRL_NBR_MAIN, CSP_INT_SRC_NBR_USB_00);
   177c4:	f04f 0000 	mov.w	r0, #0
   177c8:	f04f 0118 	mov.w	r1, #24
   177cc:	f7fe f848 	bl	15860 <CSP_IntClr>
	CPU_IntSrcEn(CPU_INT_SYSTICK);                              /* Enable the SYSTICK interrupt. Resume OS operation.   */
   177d0:	f04f 000f 	mov.w	r0, #15
   177d4:	f7e9 fb4a 	bl	e6c <CPU_IntSrcEn>
}
   177d8:	bd80      	pop	{r7, pc}
   177da:	bf00      	nop

000177dc <BulkOut>:
	Local function to handle incoming bulk data
	@param [in] bEP
	@param [in] bEPStatus
*/
void BulkOut(uint8_t bEP, uint8_t bEPStatus)
{
   177dc:	b580      	push	{r7, lr}
   177de:	b084      	sub	sp, #16
   177e0:	af00      	add	r7, sp, #0
   177e2:	4602      	mov	r2, r0
   177e4:	460b      	mov	r3, r1
   177e6:	71fa      	strb	r2, [r7, #7]
   177e8:	71bb      	strb	r3, [r7, #6]
	int i;
	/* disable_USB_interrupts(); */
	for(i=0;i<=USB_BUFFER_SIZE-1;i++)
   177ea:	f04f 0300 	mov.w	r3, #0
   177ee:	60fb      	str	r3, [r7, #12]
   177f0:	e00c      	b.n	1780c <BulkOut+0x30>
	{
		abBulkOutBuf[i] = 0;
   177f2:	f643 13f0 	movw	r3, #14832	; 0x39f0
   177f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   177fa:	68fa      	ldr	r2, [r7, #12]
   177fc:	189b      	adds	r3, r3, r2
   177fe:	f04f 0200 	mov.w	r2, #0
   17802:	701a      	strb	r2, [r3, #0]
*/
void BulkOut(uint8_t bEP, uint8_t bEPStatus)
{
	int i;
	/* disable_USB_interrupts(); */
	for(i=0;i<=USB_BUFFER_SIZE-1;i++)
   17804:	68fb      	ldr	r3, [r7, #12]
   17806:	f103 0301 	add.w	r3, r3, #1
   1780a:	60fb      	str	r3, [r7, #12]
   1780c:	68fa      	ldr	r2, [r7, #12]
   1780e:	f240 1367 	movw	r3, #359	; 0x167
   17812:	429a      	cmp	r2, r3
   17814:	dded      	ble.n	177f2 <BulkOut+0x16>
	{
		abBulkOutBuf[i] = 0;
	}

	USBHwEPRead(bEP, abBulkOutBuf, sizeof(abBulkOutBuf));
   17816:	79fb      	ldrb	r3, [r7, #7]
   17818:	4618      	mov	r0, r3
   1781a:	f643 11f0 	movw	r1, #14832	; 0x39f0
   1781e:	f2c1 0100 	movt	r1, #4096	; 0x1000
   17822:	f44f 72b4 	mov.w	r2, #360	; 0x168
   17826:	f7ff fd39 	bl	1729c <USBHwEPRead>

	BulkOutSize = abBulkOutBuf[1]<<8 | abBulkOutBuf[2];
   1782a:	f643 13f0 	movw	r3, #14832	; 0x39f0
   1782e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17832:	785b      	ldrb	r3, [r3, #1]
   17834:	ea4f 2203 	mov.w	r2, r3, lsl #8
   17838:	f643 13f0 	movw	r3, #14832	; 0x39f0
   1783c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17840:	789b      	ldrb	r3, [r3, #2]
   17842:	431a      	orrs	r2, r3
   17844:	f643 3358 	movw	r3, #15192	; 0x3b58
   17848:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1784c:	601a      	str	r2, [r3, #0]
	BulkOutSize = BulkOutSize - 1;
   1784e:	f643 3358 	movw	r3, #15192	; 0x3b58
   17852:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	f103 32ff 	add.w	r2, r3, #4294967295
   1785c:	f643 3358 	movw	r3, #15192	; 0x3b58
   17860:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17864:	601a      	str	r2, [r3, #0]
}
   17866:	f107 0710 	add.w	r7, r7, #16
   1786a:	46bd      	mov	sp, r7
   1786c:	bd80      	pop	{r7, pc}
   1786e:	bf00      	nop

00017870 <BulkIn>:
	Local function to handle outgoing bulk data
	@param [in] bEP
	@param [in] bEPStatus
*/
void BulkIn(uint8_t bEP, uint8_t bEPStatus)
{
   17870:	b580      	push	{r7, lr}
   17872:	b082      	sub	sp, #8
   17874:	af00      	add	r7, sp, #0
   17876:	4602      	mov	r2, r0
   17878:	460b      	mov	r3, r1
   1787a:	71fa      	strb	r2, [r7, #7]
   1787c:	71bb      	strb	r3, [r7, #6]
	if(BulkInSize > 0)
   1787e:	f643 13ec 	movw	r3, #14828	; 0x39ec
   17882:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17886:	681b      	ldr	r3, [r3, #0]
   17888:	2b00      	cmp	r3, #0
   1788a:	dd0f      	ble.n	178ac <BulkIn+0x3c>
	{
		USBHwEPWrite(bEP, abBulkInBuf, BulkInSize);
   1788c:	f643 13ec 	movw	r3, #14828	; 0x39ec
   17890:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17894:	681b      	ldr	r3, [r3, #0]
   17896:	79fa      	ldrb	r2, [r7, #7]
   17898:	4610      	mov	r0, r2
   1789a:	f643 315c 	movw	r1, #15196	; 0x3b5c
   1789e:	f2c1 0100 	movt	r1, #4096	; 0x1000
   178a2:	461a      	mov	r2, r3
   178a4:	f7ff fc98 	bl	171d8 <USBHwEPWrite>
		deleteBulkInBuf();
   178a8:	f7ff ff60 	bl	1776c <deleteBulkInBuf>
	}
}
   178ac:	f107 0708 	add.w	r7, r7, #8
   178b0:	46bd      	mov	sp, r7
   178b2:	bd80      	pop	{r7, pc}

000178b4 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
   178b4:	b480      	push	{r7}
   178b6:	b083      	sub	sp, #12
   178b8:	af00      	add	r7, sp, #0
   178ba:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
   178bc:	f643 13a4 	movw	r3, #14756	; 0x39a4
   178c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   178c4:	687a      	ldr	r2, [r7, #4]
   178c6:	601a      	str	r2, [r3, #0]
}
   178c8:	f107 070c 	add.w	r7, r7, #12
   178cc:	46bd      	mov	sp, r7
   178ce:	bc80      	pop	{r7}
   178d0:	4770      	bx	lr
   178d2:	bf00      	nop

000178d4 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data

	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
   178d4:	b480      	push	{r7}
   178d6:	b089      	sub	sp, #36	; 0x24
   178d8:	af00      	add	r7, sp, #0
   178da:	60ba      	str	r2, [r7, #8]
   178dc:	607b      	str	r3, [r7, #4]
   178de:	4603      	mov	r3, r0
   178e0:	81fb      	strh	r3, [r7, #14]
   178e2:	460b      	mov	r3, r1
   178e4:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;

	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
   178e6:	89fb      	ldrh	r3, [r7, #14]
   178e8:	ea4f 2313 	mov.w	r3, r3, lsr #8
   178ec:	b29b      	uxth	r3, r3
   178ee:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
   178f0:	89fb      	ldrh	r3, [r7, #14]
   178f2:	75bb      	strb	r3, [r7, #22]

	pab = (U8 *)pabDescrip;
   178f4:	f643 13a4 	movw	r3, #14756	; 0x39a4
   178f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   178fc:	681b      	ldr	r3, [r3, #0]
   178fe:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
   17900:	f04f 0300 	mov.w	r3, #0
   17904:	61bb      	str	r3, [r7, #24]

	while (pab[DESC_bLength] != 0) {
   17906:	e030      	b.n	1796a <USBGetDescriptor+0x96>
		if (pab[DESC_bDescriptorType] == bType) {
   17908:	69fb      	ldr	r3, [r7, #28]
   1790a:	f103 0301 	add.w	r3, r3, #1
   1790e:	781b      	ldrb	r3, [r3, #0]
   17910:	7dfa      	ldrb	r2, [r7, #23]
   17912:	429a      	cmp	r2, r3
   17914:	d124      	bne.n	17960 <USBGetDescriptor+0x8c>
			if (iCurIndex == bIndex) {
   17916:	7dba      	ldrb	r2, [r7, #22]
   17918:	69bb      	ldr	r3, [r7, #24]
   1791a:	429a      	cmp	r2, r3
   1791c:	d11c      	bne.n	17958 <USBGetDescriptor+0x84>
				/* set data pointer */
				*ppbData = pab;
   1791e:	687b      	ldr	r3, [r7, #4]
   17920:	69fa      	ldr	r2, [r7, #28]
   17922:	601a      	str	r2, [r3, #0]
				/* get length from structure */
				if (bType == DESC_CONFIGURATION) {
   17924:	7dfb      	ldrb	r3, [r7, #23]
   17926:	2b02      	cmp	r3, #2
   17928:	d10e      	bne.n	17948 <USBGetDescriptor+0x74>
					/* configuration descriptor is an exception, length is at offset 2 and 3 */
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
   1792a:	69fb      	ldr	r3, [r7, #28]
   1792c:	f103 0302 	add.w	r3, r3, #2
   17930:	781b      	ldrb	r3, [r3, #0]
   17932:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
   17934:	69fb      	ldr	r3, [r7, #28]
   17936:	f103 0303 	add.w	r3, r3, #3
   1793a:	781b      	ldrb	r3, [r3, #0]
   1793c:	ea4f 2303 	mov.w	r3, r3, lsl #8
				/* set data pointer */
				*ppbData = pab;
				/* get length from structure */
				if (bType == DESC_CONFIGURATION) {
					/* configuration descriptor is an exception, length is at offset 2 and 3 */
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
   17940:	431a      	orrs	r2, r3
   17942:	68bb      	ldr	r3, [r7, #8]
   17944:	601a      	str	r2, [r3, #0]
   17946:	e004      	b.n	17952 <USBGetDescriptor+0x7e>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					/* normally length is at offset 0 */
					*piLen = pab[DESC_bLength];
   17948:	69fb      	ldr	r3, [r7, #28]
   1794a:	781b      	ldrb	r3, [r3, #0]
   1794c:	461a      	mov	r2, r3
   1794e:	68bb      	ldr	r3, [r7, #8]
   17950:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
   17952:	f04f 0301 	mov.w	r3, #1
   17956:	e00e      	b.n	17976 <USBGetDescriptor+0xa2>
			}
			iCurIndex++;
   17958:	69bb      	ldr	r3, [r7, #24]
   1795a:	f103 0301 	add.w	r3, r3, #1
   1795e:	61bb      	str	r3, [r7, #24]
		}
		/* skip to next descriptor */
		pab += pab[DESC_bLength];
   17960:	69fb      	ldr	r3, [r7, #28]
   17962:	781b      	ldrb	r3, [r3, #0]
   17964:	69fa      	ldr	r2, [r7, #28]
   17966:	18d3      	adds	r3, r2, r3
   17968:	61fb      	str	r3, [r7, #28]
	bIndex = GET_DESC_INDEX(wTypeIndex);

	pab = (U8 *)pabDescrip;
	iCurIndex = 0;

	while (pab[DESC_bLength] != 0) {
   1796a:	69fb      	ldr	r3, [r7, #28]
   1796c:	781b      	ldrb	r3, [r3, #0]
   1796e:	2b00      	cmp	r3, #0
   17970:	d1ca      	bne.n	17908 <USBGetDescriptor+0x34>
		/* skip to next descriptor */
		pab += pab[DESC_bLength];
	}
	/* nothing found */
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
   17972:	f04f 0300 	mov.w	r3, #0
}
   17976:	4618      	mov	r0, r3
   17978:	f107 0724 	add.w	r7, r7, #36	; 0x24
   1797c:	46bd      	mov	sp, r7
   1797e:	bc80      	pop	{r7}
   17980:	4770      	bx	lr
   17982:	bf00      	nop

00017984 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?

	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
   17984:	b580      	push	{r7, lr}
   17986:	b086      	sub	sp, #24
   17988:	af00      	add	r7, sp, #0
   1798a:	4602      	mov	r2, r0
   1798c:	460b      	mov	r3, r1
   1798e:	71fa      	strb	r2, [r7, #7]
   17990:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;

	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
   17992:	79fb      	ldrb	r3, [r7, #7]
   17994:	2b00      	cmp	r3, #0
   17996:	d104      	bne.n	179a2 <USBSetConfiguration+0x1e>
		/* unconfigure device */
		USBHwConfigDevice(FALSE);
   17998:	f04f 0000 	mov.w	r0, #0
   1799c:	f7ff fcfa 	bl	17394 <USBHwConfigDevice>
   179a0:	e04e      	b.n	17a40 <USBSetConfiguration+0xbc>
	}
	else {
		/* configure endpoints for this configuration/altsetting */
		pab = (U8 *)pabDescrip;
   179a2:	f643 13a4 	movw	r3, #14756	; 0x39a4
   179a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   179aa:	681b      	ldr	r3, [r3, #0]
   179ac:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
   179ae:	f04f 03ff 	mov.w	r3, #255	; 0xff
   179b2:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
   179b4:	f04f 03ff 	mov.w	r3, #255	; 0xff
   179b8:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
   179ba:	e039      	b.n	17a30 <USBSetConfiguration+0xac>

			switch (pab[DESC_bDescriptorType]) {
   179bc:	697b      	ldr	r3, [r7, #20]
   179be:	f103 0301 	add.w	r3, r3, #1
   179c2:	781b      	ldrb	r3, [r3, #0]
   179c4:	2b04      	cmp	r3, #4
   179c6:	d007      	beq.n	179d8 <USBSetConfiguration+0x54>
   179c8:	2b05      	cmp	r3, #5
   179ca:	d009      	beq.n	179e0 <USBSetConfiguration+0x5c>
   179cc:	2b02      	cmp	r3, #2
   179ce:	d128      	bne.n	17a22 <USBSetConfiguration+0x9e>

			case DESC_CONFIGURATION:
				/* remember current configuration index */
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
   179d0:	697b      	ldr	r3, [r7, #20]
   179d2:	795b      	ldrb	r3, [r3, #5]
   179d4:	74fb      	strb	r3, [r7, #19]
				break;
   179d6:	e026      	b.n	17a26 <USBSetConfiguration+0xa2>

			case DESC_INTERFACE:
				/* remember current alternate setting */
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
   179d8:	697b      	ldr	r3, [r7, #20]
   179da:	78db      	ldrb	r3, [r3, #3]
   179dc:	74bb      	strb	r3, [r7, #18]
				break;
   179de:	e022      	b.n	17a26 <USBSetConfiguration+0xa2>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
   179e0:	7cfa      	ldrb	r2, [r7, #19]
   179e2:	79fb      	ldrb	r3, [r7, #7]
   179e4:	429a      	cmp	r2, r3
   179e6:	d11d      	bne.n	17a24 <USBSetConfiguration+0xa0>
   179e8:	7cba      	ldrb	r2, [r7, #18]
   179ea:	79bb      	ldrb	r3, [r7, #6]
   179ec:	429a      	cmp	r2, r3
   179ee:	d119      	bne.n	17a24 <USBSetConfiguration+0xa0>
					(bCurAltSetting == bAltSetting)) {
					/* endpoint found for desired config and alternate setting */
					bEP = pab[ENDP_DESC_bEndpointAddress];
   179f0:	697b      	ldr	r3, [r7, #20]
   179f2:	789b      	ldrb	r3, [r3, #2]
   179f4:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
   179f6:	697b      	ldr	r3, [r7, #20]
   179f8:	f103 0304 	add.w	r3, r3, #4
   179fc:	781b      	ldrb	r3, [r3, #0]
   179fe:	461a      	mov	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
   17a00:	697b      	ldr	r3, [r7, #20]
   17a02:	f103 0305 	add.w	r3, r3, #5
   17a06:	781b      	ldrb	r3, [r3, #0]
   17a08:	ea4f 2303 	mov.w	r3, r3, lsl #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					/* endpoint found for desired config and alternate setting */
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
   17a0c:	b29b      	uxth	r3, r3
   17a0e:	4313      	orrs	r3, r2
   17a10:	b29b      	uxth	r3, r3
   17a12:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					/* configure endpoint */
					USBHwEPConfig(bEP, wMaxPktSize);
   17a14:	7c7a      	ldrb	r2, [r7, #17]
   17a16:	89fb      	ldrh	r3, [r7, #14]
   17a18:	4610      	mov	r0, r2
   17a1a:	4619      	mov	r1, r3
   17a1c:	f7ff fac4 	bl	16fa8 <USBHwEPConfig>
				}
				break;
   17a20:	e000      	b.n	17a24 <USBSetConfiguration+0xa0>

			default:
				break;
   17a22:	e000      	b.n	17a26 <USBSetConfiguration+0xa2>
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					/* configure endpoint */
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;
   17a24:	bf00      	nop

			default:
				break;
			}
			/* skip to next descriptor */
			pab += pab[DESC_bLength];
   17a26:	697b      	ldr	r3, [r7, #20]
   17a28:	781b      	ldrb	r3, [r3, #0]
   17a2a:	697a      	ldr	r2, [r7, #20]
   17a2c:	18d3      	adds	r3, r2, r3
   17a2e:	617b      	str	r3, [r7, #20]
		/* configure endpoints for this configuration/altsetting */
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
   17a30:	697b      	ldr	r3, [r7, #20]
   17a32:	781b      	ldrb	r3, [r3, #0]
   17a34:	2b00      	cmp	r3, #0
   17a36:	d1c1      	bne.n	179bc <USBSetConfiguration+0x38>
			/* skip to next descriptor */
			pab += pab[DESC_bLength];
		}

		/* configure device */
		USBHwConfigDevice(TRUE);
   17a38:	f04f 0001 	mov.w	r0, #1
   17a3c:	f7ff fcaa 	bl	17394 <USBHwConfigDevice>
	}

	return TRUE;
   17a40:	f04f 0301 	mov.w	r3, #1
}
   17a44:	4618      	mov	r0, r3
   17a46:	f107 0718 	add.w	r7, r7, #24
   17a4a:	46bd      	mov	sp, r7
   17a4c:	bd80      	pop	{r7, pc}
   17a4e:	bf00      	nop

00017a50 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
   17a50:	b580      	push	{r7, lr}
   17a52:	b086      	sub	sp, #24
   17a54:	af00      	add	r7, sp, #0
   17a56:	60f8      	str	r0, [r7, #12]
   17a58:	60b9      	str	r1, [r7, #8]
   17a5a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
   17a5c:	687b      	ldr	r3, [r7, #4]
   17a5e:	681b      	ldr	r3, [r3, #0]
   17a60:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
   17a62:	68fb      	ldr	r3, [r7, #12]
   17a64:	785b      	ldrb	r3, [r3, #1]
   17a66:	2b09      	cmp	r3, #9
   17a68:	d861      	bhi.n	17b2e <HandleStdDeviceReq+0xde>
   17a6a:	a201      	add	r2, pc, #4	; (adr r2, 17a70 <HandleStdDeviceReq+0x20>)
   17a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17a70:	00017a99 	.word	0x00017a99
   17a74:	00017b23 	.word	0x00017b23
   17a78:	00017b2f 	.word	0x00017b2f
   17a7c:	00017b23 	.word	0x00017b23
   17a80:	00017b2f 	.word	0x00017b2f
   17a84:	00017ab7 	.word	0x00017ab7
   17a88:	00017ac5 	.word	0x00017ac5
   17a8c:	00017b29 	.word	0x00017b29
   17a90:	00017add 	.word	0x00017add
   17a94:	00017af5 	.word	0x00017af5

	case REQ_GET_STATUS:
		/* bit 0: self-powered */
		/* bit 1: remote wakeup = not supported */
		pbData[0] = 0;
   17a98:	697b      	ldr	r3, [r7, #20]
   17a9a:	f04f 0200 	mov.w	r2, #0
   17a9e:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
   17aa0:	697b      	ldr	r3, [r7, #20]
   17aa2:	f103 0301 	add.w	r3, r3, #1
   17aa6:	f04f 0200 	mov.w	r2, #0
   17aaa:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
   17aac:	68bb      	ldr	r3, [r7, #8]
   17aae:	f04f 0202 	mov.w	r2, #2
   17ab2:	601a      	str	r2, [r3, #0]
		break;
   17ab4:	e03e      	b.n	17b34 <HandleStdDeviceReq+0xe4>

	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
   17ab6:	68fb      	ldr	r3, [r7, #12]
   17ab8:	885b      	ldrh	r3, [r3, #2]
   17aba:	b2db      	uxtb	r3, r3
   17abc:	4618      	mov	r0, r3
   17abe:	f7ff fb13 	bl	170e8 <USBHwSetAddress>
		break;
   17ac2:	e037      	b.n	17b34 <HandleStdDeviceReq+0xe4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
   17ac4:	68fb      	ldr	r3, [r7, #12]
   17ac6:	885a      	ldrh	r2, [r3, #2]
   17ac8:	68fb      	ldr	r3, [r7, #12]
   17aca:	889b      	ldrh	r3, [r3, #4]
   17acc:	4610      	mov	r0, r2
   17ace:	4619      	mov	r1, r3
   17ad0:	68ba      	ldr	r2, [r7, #8]
   17ad2:	687b      	ldr	r3, [r7, #4]
   17ad4:	f7ff fefe 	bl	178d4 <USBGetDescriptor>
   17ad8:	4603      	mov	r3, r0
   17ada:	e02d      	b.n	17b38 <HandleStdDeviceReq+0xe8>

	case REQ_GET_CONFIGURATION:
		/* indicate if we are configured */
		pbData[0] = bConfiguration;
   17adc:	f643 139c 	movw	r3, #14748	; 0x399c
   17ae0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17ae4:	781a      	ldrb	r2, [r3, #0]
   17ae6:	697b      	ldr	r3, [r7, #20]
   17ae8:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
   17aea:	68bb      	ldr	r3, [r7, #8]
   17aec:	f04f 0201 	mov.w	r2, #1
   17af0:	601a      	str	r2, [r3, #0]
		break;
   17af2:	e01f      	b.n	17b34 <HandleStdDeviceReq+0xe4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
   17af4:	68fb      	ldr	r3, [r7, #12]
   17af6:	885b      	ldrh	r3, [r3, #2]
   17af8:	b2db      	uxtb	r3, r3
   17afa:	4618      	mov	r0, r3
   17afc:	f04f 0100 	mov.w	r1, #0
   17b00:	f7ff ff40 	bl	17984 <USBSetConfiguration>
   17b04:	4603      	mov	r3, r0
   17b06:	2b00      	cmp	r3, #0
   17b08:	d102      	bne.n	17b10 <HandleStdDeviceReq+0xc0>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
   17b0a:	f04f 0300 	mov.w	r3, #0
   17b0e:	e013      	b.n	17b38 <HandleStdDeviceReq+0xe8>
		}
		/* configuration successful, update current configuration */
		bConfiguration = pSetup->wValue & 0xFF;
   17b10:	68fb      	ldr	r3, [r7, #12]
   17b12:	885b      	ldrh	r3, [r3, #2]
   17b14:	b2da      	uxtb	r2, r3
   17b16:	f643 139c 	movw	r3, #14748	; 0x399c
   17b1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17b1e:	701a      	strb	r2, [r3, #0]
		break;
   17b20:	e008      	b.n	17b34 <HandleStdDeviceReq+0xe4>
			/* put DEVICE_REMOTE_WAKEUP code here */
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			/* put TEST_MODE code here */
		}
		return FALSE;
   17b22:	f04f 0300 	mov.w	r3, #0
   17b26:	e007      	b.n	17b38 <HandleStdDeviceReq+0xe8>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
   17b28:	f04f 0300 	mov.w	r3, #0
   17b2c:	e004      	b.n	17b38 <HandleStdDeviceReq+0xe8>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
   17b2e:	f04f 0300 	mov.w	r3, #0
   17b32:	e001      	b.n	17b38 <HandleStdDeviceReq+0xe8>
	}

	return TRUE;
   17b34:	f04f 0301 	mov.w	r3, #1
}
   17b38:	4618      	mov	r0, r3
   17b3a:	f107 0718 	add.w	r7, r7, #24
   17b3e:	46bd      	mov	sp, r7
   17b40:	bd80      	pop	{r7, pc}
   17b42:	bf00      	nop

00017b44 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
   17b44:	b480      	push	{r7}
   17b46:	b087      	sub	sp, #28
   17b48:	af00      	add	r7, sp, #0
   17b4a:	60f8      	str	r0, [r7, #12]
   17b4c:	60b9      	str	r1, [r7, #8]
   17b4e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
   17b50:	687b      	ldr	r3, [r7, #4]
   17b52:	681b      	ldr	r3, [r3, #0]
   17b54:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
   17b56:	68fb      	ldr	r3, [r7, #12]
   17b58:	785b      	ldrb	r3, [r3, #1]
   17b5a:	2b0b      	cmp	r3, #11
   17b5c:	d841      	bhi.n	17be2 <HandleStdInterfaceReq+0x9e>
   17b5e:	a201      	add	r2, pc, #4	; (adr r2, 17b64 <HandleStdInterfaceReq+0x20>)
   17b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b64:	00017b95 	.word	0x00017b95
   17b68:	00017bb3 	.word	0x00017bb3
   17b6c:	00017be3 	.word	0x00017be3
   17b70:	00017bb3 	.word	0x00017bb3
   17b74:	00017be3 	.word	0x00017be3
   17b78:	00017be3 	.word	0x00017be3
   17b7c:	00017be3 	.word	0x00017be3
   17b80:	00017be3 	.word	0x00017be3
   17b84:	00017be3 	.word	0x00017be3
   17b88:	00017be3 	.word	0x00017be3
   17b8c:	00017bb9 	.word	0x00017bb9
   17b90:	00017bcb 	.word	0x00017bcb

	case REQ_GET_STATUS:
		/* no bits specified */
		pbData[0] = 0;
   17b94:	697b      	ldr	r3, [r7, #20]
   17b96:	f04f 0200 	mov.w	r2, #0
   17b9a:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
   17b9c:	697b      	ldr	r3, [r7, #20]
   17b9e:	f103 0301 	add.w	r3, r3, #1
   17ba2:	f04f 0200 	mov.w	r2, #0
   17ba6:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
   17ba8:	68bb      	ldr	r3, [r7, #8]
   17baa:	f04f 0202 	mov.w	r2, #2
   17bae:	601a      	str	r2, [r3, #0]
		break;
   17bb0:	e01a      	b.n	17be8 <HandleStdInterfaceReq+0xa4>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		/* not defined for interface */
		return FALSE;
   17bb2:	f04f 0300 	mov.w	r3, #0
   17bb6:	e019      	b.n	17bec <HandleStdInterfaceReq+0xa8>

	case REQ_GET_INTERFACE:	/* TODO use bNumInterfaces */
        /* there is only one interface, return n-1 (= 0) */
		pbData[0] = 0;
   17bb8:	697b      	ldr	r3, [r7, #20]
   17bba:	f04f 0200 	mov.w	r2, #0
   17bbe:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
   17bc0:	68bb      	ldr	r3, [r7, #8]
   17bc2:	f04f 0201 	mov.w	r2, #1
   17bc6:	601a      	str	r2, [r3, #0]
		break;
   17bc8:	e00e      	b.n	17be8 <HandleStdInterfaceReq+0xa4>

	case REQ_SET_INTERFACE:	/* TODO use bNumInterfaces */
		/* there is only one interface (= 0) */
		if (pSetup->wValue != 0) {
   17bca:	68fb      	ldr	r3, [r7, #12]
   17bcc:	885b      	ldrh	r3, [r3, #2]
   17bce:	2b00      	cmp	r3, #0
   17bd0:	d002      	beq.n	17bd8 <HandleStdInterfaceReq+0x94>
			return FALSE;
   17bd2:	f04f 0300 	mov.w	r3, #0
   17bd6:	e009      	b.n	17bec <HandleStdInterfaceReq+0xa8>
		}
		*piLen = 0;
   17bd8:	68bb      	ldr	r3, [r7, #8]
   17bda:	f04f 0200 	mov.w	r2, #0
   17bde:	601a      	str	r2, [r3, #0]
		break;
   17be0:	e002      	b.n	17be8 <HandleStdInterfaceReq+0xa4>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
   17be2:	f04f 0300 	mov.w	r3, #0
   17be6:	e001      	b.n	17bec <HandleStdInterfaceReq+0xa8>
	}

	return TRUE;
   17be8:	f04f 0301 	mov.w	r3, #1
}
   17bec:	4618      	mov	r0, r3
   17bee:	f107 071c 	add.w	r7, r7, #28
   17bf2:	46bd      	mov	sp, r7
   17bf4:	bc80      	pop	{r7}
   17bf6:	4770      	bx	lr

00017bf8 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
   17bf8:	b580      	push	{r7, lr}
   17bfa:	b086      	sub	sp, #24
   17bfc:	af00      	add	r7, sp, #0
   17bfe:	60f8      	str	r0, [r7, #12]
   17c00:	60b9      	str	r1, [r7, #8]
   17c02:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
   17c04:	687b      	ldr	r3, [r7, #4]
   17c06:	681b      	ldr	r3, [r3, #0]
   17c08:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
   17c0a:	68fb      	ldr	r3, [r7, #12]
   17c0c:	785b      	ldrb	r3, [r3, #1]
   17c0e:	2b0c      	cmp	r3, #12
   17c10:	d85a      	bhi.n	17cc8 <HandleStdEndPointReq+0xd0>
   17c12:	a201      	add	r2, pc, #4	; (adr r2, 17c18 <HandleStdEndPointReq+0x20>)
   17c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c18:	00017c4d 	.word	0x00017c4d
   17c1c:	00017c83 	.word	0x00017c83
   17c20:	00017cc9 	.word	0x00017cc9
   17c24:	00017ca3 	.word	0x00017ca3
   17c28:	00017cc9 	.word	0x00017cc9
   17c2c:	00017cc9 	.word	0x00017cc9
   17c30:	00017cc9 	.word	0x00017cc9
   17c34:	00017cc9 	.word	0x00017cc9
   17c38:	00017cc9 	.word	0x00017cc9
   17c3c:	00017cc9 	.word	0x00017cc9
   17c40:	00017cc9 	.word	0x00017cc9
   17c44:	00017cc9 	.word	0x00017cc9
   17c48:	00017cc3 	.word	0x00017cc3
	case REQ_GET_STATUS:
		/* bit 0 = endpointed halted or not */
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
   17c4c:	68fb      	ldr	r3, [r7, #12]
   17c4e:	889b      	ldrh	r3, [r3, #4]
   17c50:	b2db      	uxtb	r3, r3
   17c52:	4618      	mov	r0, r3
   17c54:	f7ff fa7e 	bl	17154 <USBHwEPGetStatus>
   17c58:	4603      	mov	r3, r0
   17c5a:	f003 0302 	and.w	r3, r3, #2
   17c5e:	2b00      	cmp	r3, #0
   17c60:	bf0c      	ite	eq
   17c62:	2300      	moveq	r3, #0
   17c64:	2301      	movne	r3, #1
   17c66:	b2da      	uxtb	r2, r3
   17c68:	697b      	ldr	r3, [r7, #20]
   17c6a:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
   17c6c:	697b      	ldr	r3, [r7, #20]
   17c6e:	f103 0301 	add.w	r3, r3, #1
   17c72:	f04f 0200 	mov.w	r2, #0
   17c76:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
   17c78:	68bb      	ldr	r3, [r7, #8]
   17c7a:	f04f 0202 	mov.w	r2, #2
   17c7e:	601a      	str	r2, [r3, #0]
		break;
   17c80:	e025      	b.n	17cce <HandleStdEndPointReq+0xd6>

	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
   17c82:	68fb      	ldr	r3, [r7, #12]
   17c84:	885b      	ldrh	r3, [r3, #2]
   17c86:	2b00      	cmp	r3, #0
   17c88:	d108      	bne.n	17c9c <HandleStdEndPointReq+0xa4>
			/* clear HALT by unstalling */
			USBHwEPStall(pSetup->wIndex, FALSE);
   17c8a:	68fb      	ldr	r3, [r7, #12]
   17c8c:	889b      	ldrh	r3, [r3, #4]
   17c8e:	b2db      	uxtb	r3, r3
   17c90:	4618      	mov	r0, r3
   17c92:	f04f 0100 	mov.w	r1, #0
   17c96:	f7ff fa79 	bl	1718c <USBHwEPStall>
			break;
   17c9a:	e018      	b.n	17cce <HandleStdEndPointReq+0xd6>
		}
		/* only ENDPOINT_HALT defined for endpoints */
		return FALSE;
   17c9c:	f04f 0300 	mov.w	r3, #0
   17ca0:	e017      	b.n	17cd2 <HandleStdEndPointReq+0xda>

	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
   17ca2:	68fb      	ldr	r3, [r7, #12]
   17ca4:	885b      	ldrh	r3, [r3, #2]
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d108      	bne.n	17cbc <HandleStdEndPointReq+0xc4>
			/* set HALT by stalling */
			USBHwEPStall(pSetup->wIndex, TRUE);
   17caa:	68fb      	ldr	r3, [r7, #12]
   17cac:	889b      	ldrh	r3, [r3, #4]
   17cae:	b2db      	uxtb	r3, r3
   17cb0:	4618      	mov	r0, r3
   17cb2:	f04f 0101 	mov.w	r1, #1
   17cb6:	f7ff fa69 	bl	1718c <USBHwEPStall>
			break;
   17cba:	e008      	b.n	17cce <HandleStdEndPointReq+0xd6>
		}
		/* only ENDPOINT_HALT defined for endpoints */
		return FALSE;
   17cbc:	f04f 0300 	mov.w	r3, #0
   17cc0:	e007      	b.n	17cd2 <HandleStdEndPointReq+0xda>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
   17cc2:	f04f 0300 	mov.w	r3, #0
   17cc6:	e004      	b.n	17cd2 <HandleStdEndPointReq+0xda>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
   17cc8:	f04f 0300 	mov.w	r3, #0
   17ccc:	e001      	b.n	17cd2 <HandleStdEndPointReq+0xda>
	}

	return TRUE;
   17cce:	f04f 0301 	mov.w	r3, #1
}
   17cd2:	4618      	mov	r0, r3
   17cd4:	f107 0718 	add.w	r7, r7, #24
   17cd8:	46bd      	mov	sp, r7
   17cda:	bd80      	pop	{r7, pc}

00017cdc <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
   17cdc:	b580      	push	{r7, lr}
   17cde:	b084      	sub	sp, #16
   17ce0:	af00      	add	r7, sp, #0
   17ce2:	60f8      	str	r0, [r7, #12]
   17ce4:	60b9      	str	r1, [r7, #8]
   17ce6:	607a      	str	r2, [r7, #4]
	/* try the custom request handler first */
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
   17ce8:	f643 13a0 	movw	r3, #14752	; 0x39a0
   17cec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17cf0:	681b      	ldr	r3, [r3, #0]
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d00e      	beq.n	17d14 <USBHandleStandardRequest+0x38>
   17cf6:	f643 13a0 	movw	r3, #14752	; 0x39a0
   17cfa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17cfe:	681b      	ldr	r3, [r3, #0]
   17d00:	68f8      	ldr	r0, [r7, #12]
   17d02:	68b9      	ldr	r1, [r7, #8]
   17d04:	687a      	ldr	r2, [r7, #4]
   17d06:	4798      	blx	r3
   17d08:	4603      	mov	r3, r0
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d002      	beq.n	17d14 <USBHandleStandardRequest+0x38>
		return TRUE;
   17d0e:	f04f 0301 	mov.w	r3, #1
   17d12:	e020      	b.n	17d56 <USBHandleStandardRequest+0x7a>
	}

	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
   17d14:	68fb      	ldr	r3, [r7, #12]
   17d16:	781b      	ldrb	r3, [r3, #0]
   17d18:	f003 031f 	and.w	r3, r3, #31
   17d1c:	2b01      	cmp	r3, #1
   17d1e:	d00a      	beq.n	17d36 <USBHandleStandardRequest+0x5a>
   17d20:	2b02      	cmp	r3, #2
   17d22:	d00f      	beq.n	17d44 <USBHandleStandardRequest+0x68>
   17d24:	2b00      	cmp	r3, #0
   17d26:	d114      	bne.n	17d52 <USBHandleStandardRequest+0x76>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
   17d28:	68f8      	ldr	r0, [r7, #12]
   17d2a:	68b9      	ldr	r1, [r7, #8]
   17d2c:	687a      	ldr	r2, [r7, #4]
   17d2e:	f7ff fe8f 	bl	17a50 <HandleStdDeviceReq>
   17d32:	4603      	mov	r3, r0
   17d34:	e00f      	b.n	17d56 <USBHandleStandardRequest+0x7a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
   17d36:	68f8      	ldr	r0, [r7, #12]
   17d38:	68b9      	ldr	r1, [r7, #8]
   17d3a:	687a      	ldr	r2, [r7, #4]
   17d3c:	f7ff ff02 	bl	17b44 <HandleStdInterfaceReq>
   17d40:	4603      	mov	r3, r0
   17d42:	e008      	b.n	17d56 <USBHandleStandardRequest+0x7a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
   17d44:	68f8      	ldr	r0, [r7, #12]
   17d46:	68b9      	ldr	r1, [r7, #8]
   17d48:	687a      	ldr	r2, [r7, #4]
   17d4a:	f7ff ff55 	bl	17bf8 <HandleStdEndPointReq>
   17d4e:	4603      	mov	r3, r0
   17d50:	e001      	b.n	17d56 <USBHandleStandardRequest+0x7a>
	default: 						return FALSE;
   17d52:	f04f 0300 	mov.w	r3, #0
	}
}
   17d56:	4618      	mov	r0, r3
   17d58:	f107 0710 	add.w	r7, r7, #16
   17d5c:	46bd      	mov	sp, r7
   17d5e:	bd80      	pop	{r7, pc}

00017d60 <USBRegisterCustomReqHandler>:
	specification.

	@param [in]	pfnHandler	Callback function pointer
 */
void USBRegisterCustomReqHandler(TFnHandleRequest *pfnHandler)
{
   17d60:	b480      	push	{r7}
   17d62:	b083      	sub	sp, #12
   17d64:	af00      	add	r7, sp, #0
   17d66:	6078      	str	r0, [r7, #4]
	pfnHandleCustomReq = pfnHandler;
   17d68:	f643 13a0 	movw	r3, #14752	; 0x39a0
   17d6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   17d70:	687a      	ldr	r2, [r7, #4]
   17d72:	601a      	str	r2, [r3, #0]
}
   17d74:	f107 070c 	add.w	r7, r7, #12
   17d78:	46bd      	mov	sp, r7
   17d7a:	bc80      	pop	{r7}
   17d7c:	4770      	bx	lr
   17d7e:	bf00      	nop

00017d80 <SVC_Handler>:
    .section .text

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   17d80:	e7fe      	b.n	17d80 <SVC_Handler>

00017d82 <DebugMon_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   17d82:	e7fe      	b.n	17d82 <DebugMon_Handler>

00017d84 <OS_CPU_PendSVHandler>:

	.globl  OS_CPU_PendSVHandler
    .type   OS_CPU_PendSVHandler, %function

OS_CPU_PendSVHandler:
    CPSID   I                                                   // Prevent interruption during context switch
   17d84:	b672      	cpsid	i
    MRS     R0, PSP                                             // PSP is process stack pointer
   17d86:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     // Skip register save the first time
   17d8a:	b128      	cbz	r0, 17d98 <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       // Save remaining regs r4-11 on process stack
   17d8c:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
   17d8e:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCurPtr                                    // OSTCBCurPtr->OSTCBStkPtr = SP;
   17d92:	490d      	ldr	r1, [pc, #52]	; (17dc8 <SysTick_Handler+0x2>)
    LDR     R1, [R1]
   17d94:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            // R0 is SP of process being switched out
   17d96:	6008      	str	r0, [r1, #0]

00017d98 <OS_CPU_PendSVHandler_nosave>:

                                                                // At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               // Save LR exc_return value
   17d98:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   // OSTaskSwHook();
   17d9a:	480c      	ldr	r0, [pc, #48]	; (17dcc <SysTick_Handler+0x6>)
    BLX     R0
   17d9c:	4780      	blx	r0
    POP     {R14}
   17d9e:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      // OSPrioCur   = OSPrioHighRdy;
   17da2:	480b      	ldr	r0, [pc, #44]	; (17dd0 <SysTick_Handler+0xa>)
    LDR     R1, =OSPrioHighRdy
   17da4:	490b      	ldr	r1, [pc, #44]	; (17dd4 <SysTick_Handler+0xe>)
    LDRB    R2, [R1]
   17da6:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
   17da8:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCurPtr                                    // OSTCBCurPtr = OSTCBHighRdyPtr;
   17daa:	4807      	ldr	r0, [pc, #28]	; (17dc8 <SysTick_Handler+0x2>)
    LDR     R1, =OSTCBHighRdyPtr
   17dac:	490a      	ldr	r1, [pc, #40]	; (17dd8 <SysTick_Handler+0x12>)
    LDR     R2, [R1]
   17dae:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
   17db0:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            // R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
   17db2:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        // Restore r4-11 from new process stack
   17db4:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
   17db8:	3020      	adds	r0, #32
    MSR     PSP, R0                                             // Load PSP with new process SP
   17dba:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0x04                                       // Ensure exception return uses process stack
   17dbe:	f04e 0e04 	orr.w	lr, lr, #4
    CPSIE   I
   17dc2:	b662      	cpsie	i
    BX      LR                                                  // Exception return will restore remaining context
   17dc4:	4770      	bx	lr

00017dc6 <SysTick_Handler>:


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   17dc6:	e7fe      	b.n	17dc6 <SysTick_Handler>
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     // Skip register save the first time

    SUBS    R0, R0, #0x20                                       // Save remaining regs r4-11 on process stack
    STM     R0, {R4-R11}

    LDR     R1, =OSTCBCurPtr                                    // OSTCBCurPtr->OSTCBStkPtr = SP;
   17dc8:	1000415c 	.word	0x1000415c
    STR     R0, [R1]                                            // R0 is SP of process being switched out

                                                                // At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               // Save LR exc_return value
    LDR     R0, =OSTaskSwHook                                   // OSTaskSwHook();
   17dcc:	000009b9 	.word	0x000009b9
    BLX     R0
    POP     {R14}

    LDR     R0, =OSPrioCur                                      // OSPrioCur   = OSPrioHighRdy;
   17dd0:	10004078 	.word	0x10004078
    LDR     R1, =OSPrioHighRdy
   17dd4:	10004068 	.word	0x10004068
    LDRB    R2, [R1]
    STRB    R2, [R0]

    LDR     R0, =OSTCBCurPtr                                    // OSTCBCurPtr = OSTCBHighRdyPtr;
    LDR     R1, =OSTCBHighRdyPtr
   17dd8:	10004164 	.word	0x10004164

00017ddc <CPU_IntDis>:
 Prototypes  : void  CPU_IntDis(void);
               void  CPU_IntEn (void);
*********************************************************************************************************/

CPU_IntDis:
        CPSID   I
   17ddc:	b672      	cpsid	i
        BX      LR
   17dde:	4770      	bx	lr

00017de0 <CPU_IntEn>:


CPU_IntEn:
        CPSIE   I
   17de0:	b662      	cpsie	i
        BX      LR
   17de2:	4770      	bx	lr

00017de4 <CPU_SR_Save>:
                               :
                       }
*********************************************************************************************************/

CPU_SR_Save:
        MRS     R0, PRIMASK                     // Set prio int mask to mask all (except faults)
   17de4:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
   17de8:	b672      	cpsid	i
        BX      LR
   17dea:	4770      	bx	lr

00017dec <CPU_SR_Restore>:


CPU_SR_Restore:                                  // See Note #2.
        MSR     PRIMASK, R0
   17dec:	f380 8810 	msr	PRIMASK, r0
        BX      LR
   17df0:	4770      	bx	lr

00017df2 <CPU_CntLeadZeros>:
               (2) MUST be implemented in cpu_a.asm if and only if CPU_CFG_LEAD_ZEROS_ASM_PRESENT is
                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
********************************************************************************************************/

CPU_CntLeadZeros:
        CLZ     R0, R0                          // Count leading zeros
   17df2:	fab0 f080 	clz	r0, r0
        BX      LR
   17df6:	4770      	bx	lr

00017df8 <CPU_RevBits>:

 Argument(s) : val     variable to reverse
********************************************************************************************************/

CPU_RevBits:
        RBIT    R0, R0                          // Reverse bits
   17df8:	fa90 f0a0 	rbit	r0, r0
        BX      LR
   17dfc:	4770      	bx	lr

00017dfe <CPU_WaitForInt>:

 Argument(s) : none.
********************************************************************************************************/

CPU_WaitForInt:
        WFI                                     // Wait for interrupt
   17dfe:	bf30      	wfi
        BX      LR
   17e00:	4770      	bx	lr

00017e02 <CPU_WaitForExcept>:

 Argument(s) : none.
********************************************************************************************************/

CPU_WaitForExcept:
        WFE                                     // Wait for exception
   17e02:	bf20      	wfe
        BX      LR
   17e04:	4770      	bx	lr
   17e06:	bf00      	nop

00017e08 <OSStartHighRdy>:
              d) Trigger PendSV exception;
              e) Enable interrupts (tasks will run with interrupts enabled).
********************************************************************************************************/

OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  // Set the PendSV exception priority
   17e08:	480c      	ldr	r0, [pc, #48]	; (17e3c <OSIntCtxSw+0xa>)
    LDR     R1, =NVIC_PENDSV_PRI
   17e0a:	490d      	ldr	r1, [pc, #52]	; (17e40 <OSIntCtxSw+0xe>)
    STRB    R1, [R0]
   17e0c:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              // Set the PSP to 0 for initial context switch call
   17e0e:	2000      	movs	r0, #0
    MSR     PSP, R0
   17e10:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           // Initialize the MSP to the OS_CPU_ExceptStkBase
   17e14:	480b      	ldr	r0, [pc, #44]	; (17e44 <OSIntCtxSw+0x12>)
    LDR     R1, [R0]
   17e16:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
   17e18:	f381 8808 	msr	MSP, r1

    LDR     R0, =NVIC_INT_CTRL                                  // Trigger the PendSV exception (causes context switch)
   17e1c:	480a      	ldr	r0, [pc, #40]	; (17e48 <OSIntCtxSw+0x16>)
    LDR     R1, =NVIC_PENDSVSET
   17e1e:	490b      	ldr	r1, [pc, #44]	; (17e4c <OSIntCtxSw+0x1a>)
    STR     R1, [R0]
   17e20:	6001      	str	r1, [r0, #0]

    CPSIE   I                                                   // Enable interrupts at processor level
   17e22:	b662      	cpsie	i

	NOP
   17e24:	bf00      	nop

00017e26 <OSStartHang>:
OSStartHang:
    B       OSStartHang                                         // Should never get here
   17e26:	f7ff bffe 	b.w	17e26 <OSStartHang>

00017e2a <OSCtxSw>:
 Note(s) : 1) OSCtxSw() is called when OS wants to perform a task context switch.  This function
              triggers the PendSV exception which is where the real work is done.
********************************************************************************************************/

OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  // Trigger the PendSV exception (causes context switch)
   17e2a:	4807      	ldr	r0, [pc, #28]	; (17e48 <OSIntCtxSw+0x16>)
    LDR     R1, =NVIC_PENDSVSET
   17e2c:	4907      	ldr	r1, [pc, #28]	; (17e4c <OSIntCtxSw+0x1a>)
    STR     R1, [R0]
   17e2e:	6001      	str	r1, [r0, #0]
    BX      LR
   17e30:	4770      	bx	lr

00017e32 <OSIntCtxSw>:
              the result of an interrupt.  This function simply triggers a PendSV exception which will
              be handled when there are no more interrupts active and interrupts are enabled.
********************************************************************************************************/

OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  // Trigger the PendSV exception (causes context switch)
   17e32:	4805      	ldr	r0, [pc, #20]	; (17e48 <OSIntCtxSw+0x16>)
    LDR     R1, =NVIC_PENDSVSET
   17e34:	4905      	ldr	r1, [pc, #20]	; (17e4c <OSIntCtxSw+0x1a>)
    STR     R1, [R0]
   17e36:	6001      	str	r1, [r0, #0]
    BX      LR
   17e38:	4770      	bx	lr
   17e3a:	0000      	.short	0x0000
              d) Trigger PendSV exception;
              e) Enable interrupts (tasks will run with interrupts enabled).
********************************************************************************************************/

OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  // Set the PendSV exception priority
   17e3c:	e000ed22 	.word	0xe000ed22
    LDR     R1, =NVIC_PENDSV_PRI
   17e40:	000000ff 	.word	0x000000ff
    STRB    R1, [R0]

    MOVS    R0, #0                                              // Set the PSP to 0 for initial context switch call
    MSR     PSP, R0

    LDR     R0, =OS_CPU_ExceptStkBase                           // Initialize the MSP to the OS_CPU_ExceptStkBase
   17e44:	10003cc4 	.word	0x10003cc4
    LDR     R1, [R0]
    MSR     MSP, R1

    LDR     R0, =NVIC_INT_CTRL                                  // Trigger the PendSV exception (causes context switch)
   17e48:	e000ed04 	.word	0xe000ed04
    LDR     R1, =NVIC_PENDSVSET
   17e4c:	10000000 	.word	0x10000000

00017e50 <__aeabi_uldivmod>:
   17e50:	b94b      	cbnz	r3, 17e66 <__aeabi_uldivmod+0x16>
   17e52:	b942      	cbnz	r2, 17e66 <__aeabi_uldivmod+0x16>
   17e54:	2900      	cmp	r1, #0
   17e56:	bf08      	it	eq
   17e58:	2800      	cmpeq	r0, #0
   17e5a:	d002      	beq.n	17e62 <__aeabi_uldivmod+0x12>
   17e5c:	f04f 31ff 	mov.w	r1, #4294967295
   17e60:	4608      	mov	r0, r1
   17e62:	f000 b839 	b.w	17ed8 <__aeabi_idiv0>
   17e66:	b082      	sub	sp, #8
   17e68:	46ec      	mov	ip, sp
   17e6a:	e92d 5000 	stmdb	sp!, {ip, lr}
   17e6e:	f000 f81d 	bl	17eac <__gnu_uldivmod_helper>
   17e72:	f8dd e004 	ldr.w	lr, [sp, #4]
   17e76:	b002      	add	sp, #8
   17e78:	bc0c      	pop	{r2, r3}
   17e7a:	4770      	bx	lr

00017e7c <__gnu_ldivmod_helper>:
   17e7c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   17e80:	461e      	mov	r6, r3
   17e82:	4614      	mov	r4, r2
   17e84:	4680      	mov	r8, r0
   17e86:	4689      	mov	r9, r1
   17e88:	f000 f828 	bl	17edc <__divdi3>
   17e8c:	fba4 2300 	umull	r2, r3, r4, r0
   17e90:	fb04 f401 	mul.w	r4, r4, r1
   17e94:	fb00 4406 	mla	r4, r0, r6, r4
   17e98:	18e3      	adds	r3, r4, r3
   17e9a:	9c06      	ldr	r4, [sp, #24]
   17e9c:	ebb8 0202 	subs.w	r2, r8, r2
   17ea0:	eb69 0303 	sbc.w	r3, r9, r3
   17ea4:	e9c4 2300 	strd	r2, r3, [r4]
   17ea8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00017eac <__gnu_uldivmod_helper>:
   17eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17eae:	4614      	mov	r4, r2
   17eb0:	4606      	mov	r6, r0
   17eb2:	460f      	mov	r7, r1
   17eb4:	461d      	mov	r5, r3
   17eb6:	f000 f9c3 	bl	18240 <__udivdi3>
   17eba:	fb00 f505 	mul.w	r5, r0, r5
   17ebe:	fba0 2304 	umull	r2, r3, r0, r4
   17ec2:	fb04 5401 	mla	r4, r4, r1, r5
   17ec6:	18e3      	adds	r3, r4, r3
   17ec8:	9c06      	ldr	r4, [sp, #24]
   17eca:	1ab2      	subs	r2, r6, r2
   17ecc:	eb67 0303 	sbc.w	r3, r7, r3
   17ed0:	e9c4 2300 	strd	r2, r3, [r4]
   17ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ed6:	bf00      	nop

00017ed8 <__aeabi_idiv0>:
   17ed8:	4770      	bx	lr
   17eda:	bf00      	nop

00017edc <__divdi3>:
   17edc:	2900      	cmp	r1, #0
   17ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee2:	461c      	mov	r4, r3
   17ee4:	b085      	sub	sp, #20
   17ee6:	bfa8      	it	ge
   17ee8:	f04f 0800 	movge.w	r8, #0
   17eec:	f2c0 80c9 	blt.w	18082 <__divdi3+0x1a6>
   17ef0:	2c00      	cmp	r4, #0
   17ef2:	f2c0 80c0 	blt.w	18076 <__divdi3+0x19a>
   17ef6:	460f      	mov	r7, r1
   17ef8:	4694      	mov	ip, r2
   17efa:	4614      	mov	r4, r2
   17efc:	4605      	mov	r5, r0
   17efe:	460e      	mov	r6, r1
   17f00:	2b00      	cmp	r3, #0
   17f02:	d14b      	bne.n	17f9c <__divdi3+0xc0>
   17f04:	42ba      	cmp	r2, r7
   17f06:	d96a      	bls.n	17fde <__divdi3+0x102>
   17f08:	fab2 f382 	clz	r3, r2
   17f0c:	b153      	cbz	r3, 17f24 <__divdi3+0x48>
   17f0e:	f1c3 0120 	rsb	r1, r3, #32
   17f12:	fa07 f603 	lsl.w	r6, r7, r3
   17f16:	fa20 f201 	lsr.w	r2, r0, r1
   17f1a:	fa0c f403 	lsl.w	r4, ip, r3
   17f1e:	4316      	orrs	r6, r2
   17f20:	fa00 f503 	lsl.w	r5, r0, r3
   17f24:	ea4f 4914 	mov.w	r9, r4, lsr #16
   17f28:	4630      	mov	r0, r6
   17f2a:	4649      	mov	r1, r9
   17f2c:	b2a7      	uxth	r7, r4
   17f2e:	f000 fb27 	bl	18580 <__aeabi_uidiv>
   17f32:	4649      	mov	r1, r9
   17f34:	4682      	mov	sl, r0
   17f36:	4630      	mov	r0, r6
   17f38:	f000 fc50 	bl	187dc <__aeabi_uidivmod>
   17f3c:	0c28      	lsrs	r0, r5, #16
   17f3e:	fb07 f30a 	mul.w	r3, r7, sl
   17f42:	ea40 4b01 	orr.w	fp, r0, r1, lsl #16
   17f46:	455b      	cmp	r3, fp
   17f48:	d90b      	bls.n	17f62 <__divdi3+0x86>
   17f4a:	eb1b 0b04 	adds.w	fp, fp, r4
   17f4e:	f10a 32ff 	add.w	r2, sl, #4294967295
   17f52:	d205      	bcs.n	17f60 <__divdi3+0x84>
   17f54:	455b      	cmp	r3, fp
   17f56:	bf84      	itt	hi
   17f58:	f1aa 0a02 	subhi.w	sl, sl, #2
   17f5c:	44a3      	addhi	fp, r4
   17f5e:	d800      	bhi.n	17f62 <__divdi3+0x86>
   17f60:	4692      	mov	sl, r2
   17f62:	ebc3 0b0b 	rsb	fp, r3, fp
   17f66:	4649      	mov	r1, r9
   17f68:	4658      	mov	r0, fp
   17f6a:	b2ad      	uxth	r5, r5
   17f6c:	f000 fb08 	bl	18580 <__aeabi_uidiv>
   17f70:	4649      	mov	r1, r9
   17f72:	4606      	mov	r6, r0
   17f74:	4658      	mov	r0, fp
   17f76:	f000 fc31 	bl	187dc <__aeabi_uidivmod>
   17f7a:	fb07 f706 	mul.w	r7, r7, r6
   17f7e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   17f82:	42af      	cmp	r7, r5
   17f84:	d906      	bls.n	17f94 <__divdi3+0xb8>
   17f86:	1e73      	subs	r3, r6, #1
   17f88:	192d      	adds	r5, r5, r4
   17f8a:	d202      	bcs.n	17f92 <__divdi3+0xb6>
   17f8c:	3e02      	subs	r6, #2
   17f8e:	42af      	cmp	r7, r5
   17f90:	d800      	bhi.n	17f94 <__divdi3+0xb8>
   17f92:	461e      	mov	r6, r3
   17f94:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   17f98:	2700      	movs	r7, #0
   17f9a:	e003      	b.n	17fa4 <__divdi3+0xc8>
   17f9c:	42bb      	cmp	r3, r7
   17f9e:	d90c      	bls.n	17fba <__divdi3+0xde>
   17fa0:	2700      	movs	r7, #0
   17fa2:	463e      	mov	r6, r7
   17fa4:	4630      	mov	r0, r6
   17fa6:	4639      	mov	r1, r7
   17fa8:	f1b8 0f00 	cmp.w	r8, #0
   17fac:	d002      	beq.n	17fb4 <__divdi3+0xd8>
   17fae:	4240      	negs	r0, r0
   17fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17fb4:	b005      	add	sp, #20
   17fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fba:	fab3 f483 	clz	r4, r3
   17fbe:	2c00      	cmp	r4, #0
   17fc0:	f040 80b2 	bne.w	18128 <__divdi3+0x24c>
   17fc4:	42bb      	cmp	r3, r7
   17fc6:	bf2c      	ite	cs
   17fc8:	2700      	movcs	r7, #0
   17fca:	2701      	movcc	r7, #1
   17fcc:	4282      	cmp	r2, r0
   17fce:	bf98      	it	ls
   17fd0:	f047 0701 	orrls.w	r7, r7, #1
   17fd4:	2f00      	cmp	r7, #0
   17fd6:	d0e4      	beq.n	17fa2 <__divdi3+0xc6>
   17fd8:	4627      	mov	r7, r4
   17fda:	2601      	movs	r6, #1
   17fdc:	e7e2      	b.n	17fa4 <__divdi3+0xc8>
   17fde:	b922      	cbnz	r2, 17fea <__divdi3+0x10e>
   17fe0:	2001      	movs	r0, #1
   17fe2:	4611      	mov	r1, r2
   17fe4:	f000 facc 	bl	18580 <__aeabi_uidiv>
   17fe8:	4604      	mov	r4, r0
   17fea:	fab4 f384 	clz	r3, r4
   17fee:	2b00      	cmp	r3, #0
   17ff0:	d14d      	bne.n	1808e <__divdi3+0x1b2>
   17ff2:	1b36      	subs	r6, r6, r4
   17ff4:	ea4f 4914 	mov.w	r9, r4, lsr #16
   17ff8:	2701      	movs	r7, #1
   17ffa:	b2a3      	uxth	r3, r4
   17ffc:	9302      	str	r3, [sp, #8]
   17ffe:	4649      	mov	r1, r9
   18000:	4630      	mov	r0, r6
   18002:	f000 fabd 	bl	18580 <__aeabi_uidiv>
   18006:	4649      	mov	r1, r9
   18008:	4682      	mov	sl, r0
   1800a:	4630      	mov	r0, r6
   1800c:	f000 fbe6 	bl	187dc <__aeabi_uidivmod>
   18010:	9802      	ldr	r0, [sp, #8]
   18012:	0c2a      	lsrs	r2, r5, #16
   18014:	fb00 f30a 	mul.w	r3, r0, sl
   18018:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   1801c:	455b      	cmp	r3, fp
   1801e:	d90c      	bls.n	1803a <__divdi3+0x15e>
   18020:	eb1b 0b04 	adds.w	fp, fp, r4
   18024:	f10a 32ff 	add.w	r2, sl, #4294967295
   18028:	f080 80ff 	bcs.w	1822a <__divdi3+0x34e>
   1802c:	455b      	cmp	r3, fp
   1802e:	bf84      	itt	hi
   18030:	f1aa 0a02 	subhi.w	sl, sl, #2
   18034:	44a3      	addhi	fp, r4
   18036:	f240 80f8 	bls.w	1822a <__divdi3+0x34e>
   1803a:	ebc3 0b0b 	rsb	fp, r3, fp
   1803e:	4649      	mov	r1, r9
   18040:	4658      	mov	r0, fp
   18042:	f000 fa9d 	bl	18580 <__aeabi_uidiv>
   18046:	4649      	mov	r1, r9
   18048:	4606      	mov	r6, r0
   1804a:	4658      	mov	r0, fp
   1804c:	f000 fbc6 	bl	187dc <__aeabi_uidivmod>
   18050:	9b02      	ldr	r3, [sp, #8]
   18052:	fa1f fc85 	uxth.w	ip, r5
   18056:	fb03 f306 	mul.w	r3, r3, r6
   1805a:	ea4c 4501 	orr.w	r5, ip, r1, lsl #16
   1805e:	42ab      	cmp	r3, r5
   18060:	d906      	bls.n	18070 <__divdi3+0x194>
   18062:	1e72      	subs	r2, r6, #1
   18064:	192d      	adds	r5, r5, r4
   18066:	d202      	bcs.n	1806e <__divdi3+0x192>
   18068:	3e02      	subs	r6, #2
   1806a:	42ab      	cmp	r3, r5
   1806c:	d800      	bhi.n	18070 <__divdi3+0x194>
   1806e:	4616      	mov	r6, r2
   18070:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   18074:	e796      	b.n	17fa4 <__divdi3+0xc8>
   18076:	4252      	negs	r2, r2
   18078:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1807c:	ea6f 0808 	mvn.w	r8, r8
   18080:	e739      	b.n	17ef6 <__divdi3+0x1a>
   18082:	4240      	negs	r0, r0
   18084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18088:	f04f 38ff 	mov.w	r8, #4294967295
   1808c:	e730      	b.n	17ef0 <__divdi3+0x14>
   1808e:	409c      	lsls	r4, r3
   18090:	f1c3 0120 	rsb	r1, r3, #32
   18094:	fa26 f701 	lsr.w	r7, r6, r1
   18098:	fa06 fa03 	lsl.w	sl, r6, r3
   1809c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   180a0:	fa25 f201 	lsr.w	r2, r5, r1
   180a4:	4638      	mov	r0, r7
   180a6:	4649      	mov	r1, r9
   180a8:	ea42 0b0a 	orr.w	fp, r2, sl
   180ac:	409d      	lsls	r5, r3
   180ae:	f000 fa67 	bl	18580 <__aeabi_uidiv>
   180b2:	4649      	mov	r1, r9
   180b4:	b2a6      	uxth	r6, r4
   180b6:	4682      	mov	sl, r0
   180b8:	4638      	mov	r0, r7
   180ba:	f000 fb8f 	bl	187dc <__aeabi_uidivmod>
   180be:	ea4f 471b 	mov.w	r7, fp, lsr #16
   180c2:	fb06 f30a 	mul.w	r3, r6, sl
   180c6:	9602      	str	r6, [sp, #8]
   180c8:	ea47 4601 	orr.w	r6, r7, r1, lsl #16
   180cc:	42b3      	cmp	r3, r6
   180ce:	d90b      	bls.n	180e8 <__divdi3+0x20c>
   180d0:	1936      	adds	r6, r6, r4
   180d2:	f10a 32ff 	add.w	r2, sl, #4294967295
   180d6:	f080 80b0 	bcs.w	1823a <__divdi3+0x35e>
   180da:	42b3      	cmp	r3, r6
   180dc:	bf84      	itt	hi
   180de:	f1aa 0a02 	subhi.w	sl, sl, #2
   180e2:	1936      	addhi	r6, r6, r4
   180e4:	f240 80a9 	bls.w	1823a <__divdi3+0x35e>
   180e8:	1af6      	subs	r6, r6, r3
   180ea:	4649      	mov	r1, r9
   180ec:	4630      	mov	r0, r6
   180ee:	f000 fa47 	bl	18580 <__aeabi_uidiv>
   180f2:	4649      	mov	r1, r9
   180f4:	4607      	mov	r7, r0
   180f6:	4630      	mov	r0, r6
   180f8:	f000 fb70 	bl	187dc <__aeabi_uidivmod>
   180fc:	9b02      	ldr	r3, [sp, #8]
   180fe:	fa1f f08b 	uxth.w	r0, fp
   18102:	fb03 f307 	mul.w	r3, r3, r7
   18106:	ea40 4601 	orr.w	r6, r0, r1, lsl #16
   1810a:	42b3      	cmp	r3, r6
   1810c:	d908      	bls.n	18120 <__divdi3+0x244>
   1810e:	1e7a      	subs	r2, r7, #1
   18110:	1936      	adds	r6, r6, r4
   18112:	f080 808c 	bcs.w	1822e <__divdi3+0x352>
   18116:	42b3      	cmp	r3, r6
   18118:	f240 8089 	bls.w	1822e <__divdi3+0x352>
   1811c:	3f02      	subs	r7, #2
   1811e:	1936      	adds	r6, r6, r4
   18120:	1af6      	subs	r6, r6, r3
   18122:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
   18126:	e76a      	b.n	17ffe <__divdi3+0x122>
   18128:	f1c4 0b20 	rsb	fp, r4, #32
   1812c:	fa03 f904 	lsl.w	r9, r3, r4
   18130:	fa22 f30b 	lsr.w	r3, r2, fp
   18134:	fa27 fa0b 	lsr.w	sl, r7, fp
   18138:	ea43 0909 	orr.w	r9, r3, r9
   1813c:	fa20 f10b 	lsr.w	r1, r0, fp
   18140:	fa07 f604 	lsl.w	r6, r7, r4
   18144:	4650      	mov	r0, sl
   18146:	ea4f 4b19 	mov.w	fp, r9, lsr #16
   1814a:	ea41 0706 	orr.w	r7, r1, r6
   1814e:	4659      	mov	r1, fp
   18150:	fa02 fe04 	lsl.w	lr, r2, r4
   18154:	9703      	str	r7, [sp, #12]
   18156:	f8cd e008 	str.w	lr, [sp, #8]
   1815a:	f000 fa11 	bl	18580 <__aeabi_uidiv>
   1815e:	4659      	mov	r1, fp
   18160:	4607      	mov	r7, r0
   18162:	4650      	mov	r0, sl
   18164:	f000 fb3a 	bl	187dc <__aeabi_uidivmod>
   18168:	9a03      	ldr	r2, [sp, #12]
   1816a:	fa1f f389 	uxth.w	r3, r9
   1816e:	0c16      	lsrs	r6, r2, #16
   18170:	fb03 f207 	mul.w	r2, r3, r7
   18174:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
   18178:	4552      	cmp	r2, sl
   1817a:	d907      	bls.n	1818c <__divdi3+0x2b0>
   1817c:	1e79      	subs	r1, r7, #1
   1817e:	eb1a 0a09 	adds.w	sl, sl, r9
   18182:	d258      	bcs.n	18236 <__divdi3+0x35a>
   18184:	4552      	cmp	r2, sl
   18186:	d956      	bls.n	18236 <__divdi3+0x35a>
   18188:	3f02      	subs	r7, #2
   1818a:	44ca      	add	sl, r9
   1818c:	ebc2 0a0a 	rsb	sl, r2, sl
   18190:	4659      	mov	r1, fp
   18192:	4650      	mov	r0, sl
   18194:	9301      	str	r3, [sp, #4]
   18196:	f000 f9f3 	bl	18580 <__aeabi_uidiv>
   1819a:	4659      	mov	r1, fp
   1819c:	4606      	mov	r6, r0
   1819e:	4650      	mov	r0, sl
   181a0:	f000 fb1c 	bl	187dc <__aeabi_uidivmod>
   181a4:	9b01      	ldr	r3, [sp, #4]
   181a6:	9a03      	ldr	r2, [sp, #12]
   181a8:	fb03 f306 	mul.w	r3, r3, r6
   181ac:	b290      	uxth	r0, r2
   181ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   181b2:	4293      	cmp	r3, r2
   181b4:	d907      	bls.n	181c6 <__divdi3+0x2ea>
   181b6:	1e71      	subs	r1, r6, #1
   181b8:	eb12 0209 	adds.w	r2, r2, r9
   181bc:	d239      	bcs.n	18232 <__divdi3+0x356>
   181be:	4293      	cmp	r3, r2
   181c0:	d937      	bls.n	18232 <__divdi3+0x356>
   181c2:	3e02      	subs	r6, #2
   181c4:	444a      	add	r2, r9
   181c6:	9802      	ldr	r0, [sp, #8]
   181c8:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   181cc:	1ad2      	subs	r2, r2, r3
   181ce:	b2b3      	uxth	r3, r6
   181d0:	0c37      	lsrs	r7, r6, #16
   181d2:	fa1f fe80 	uxth.w	lr, r0
   181d6:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   181da:	fb0e f903 	mul.w	r9, lr, r3
   181de:	fb0e f007 	mul.w	r0, lr, r7
   181e2:	fb0c 0103 	mla	r1, ip, r3, r0
   181e6:	fb0c fe07 	mul.w	lr, ip, r7
   181ea:	eb01 4119 	add.w	r1, r1, r9, lsr #16
   181ee:	4288      	cmp	r0, r1
   181f0:	bf88      	it	hi
   181f2:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   181f6:	eb0e 4c11 	add.w	ip, lr, r1, lsr #16
   181fa:	4562      	cmp	r2, ip
   181fc:	d312      	bcc.n	18224 <__divdi3+0x348>
   181fe:	ea4f 4101 	mov.w	r1, r1, lsl #16
   18202:	fa1f f989 	uxth.w	r9, r9
   18206:	bf14      	ite	ne
   18208:	2700      	movne	r7, #0
   1820a:	2701      	moveq	r7, #1
   1820c:	fa05 f404 	lsl.w	r4, r5, r4
   18210:	eb01 0209 	add.w	r2, r1, r9
   18214:	4294      	cmp	r4, r2
   18216:	bf2c      	ite	cs
   18218:	2700      	movcs	r7, #0
   1821a:	f007 0701 	andcc.w	r7, r7, #1
   1821e:	2f00      	cmp	r7, #0
   18220:	f43f aec0 	beq.w	17fa4 <__divdi3+0xc8>
   18224:	3e01      	subs	r6, #1
   18226:	2700      	movs	r7, #0
   18228:	e6bc      	b.n	17fa4 <__divdi3+0xc8>
   1822a:	4692      	mov	sl, r2
   1822c:	e705      	b.n	1803a <__divdi3+0x15e>
   1822e:	4617      	mov	r7, r2
   18230:	e776      	b.n	18120 <__divdi3+0x244>
   18232:	460e      	mov	r6, r1
   18234:	e7c7      	b.n	181c6 <__divdi3+0x2ea>
   18236:	460f      	mov	r7, r1
   18238:	e7a8      	b.n	1818c <__divdi3+0x2b0>
   1823a:	4692      	mov	sl, r2
   1823c:	e754      	b.n	180e8 <__divdi3+0x20c>
   1823e:	bf00      	nop

00018240 <__udivdi3>:
   18240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18244:	4605      	mov	r5, r0
   18246:	b083      	sub	sp, #12
   18248:	460c      	mov	r4, r1
   1824a:	4617      	mov	r7, r2
   1824c:	4680      	mov	r8, r0
   1824e:	468b      	mov	fp, r1
   18250:	2b00      	cmp	r3, #0
   18252:	d152      	bne.n	182fa <__udivdi3+0xba>
   18254:	428a      	cmp	r2, r1
   18256:	d964      	bls.n	18322 <__udivdi3+0xe2>
   18258:	fab2 f382 	clz	r3, r2
   1825c:	b153      	cbz	r3, 18274 <__udivdi3+0x34>
   1825e:	f1c3 0420 	rsb	r4, r3, #32
   18262:	fa01 f103 	lsl.w	r1, r1, r3
   18266:	fa20 f204 	lsr.w	r2, r0, r4
   1826a:	409f      	lsls	r7, r3
   1826c:	ea42 0b01 	orr.w	fp, r2, r1
   18270:	fa00 f803 	lsl.w	r8, r0, r3
   18274:	0c3c      	lsrs	r4, r7, #16
   18276:	4658      	mov	r0, fp
   18278:	4621      	mov	r1, r4
   1827a:	b2be      	uxth	r6, r7
   1827c:	f000 f980 	bl	18580 <__aeabi_uidiv>
   18280:	4621      	mov	r1, r4
   18282:	4681      	mov	r9, r0
   18284:	4658      	mov	r0, fp
   18286:	f000 faa9 	bl	187dc <__aeabi_uidivmod>
   1828a:	ea4f 4018 	mov.w	r0, r8, lsr #16
   1828e:	fb06 f309 	mul.w	r3, r6, r9
   18292:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   18296:	4553      	cmp	r3, sl
   18298:	d90b      	bls.n	182b2 <__udivdi3+0x72>
   1829a:	eb1a 0a07 	adds.w	sl, sl, r7
   1829e:	f109 32ff 	add.w	r2, r9, #4294967295
   182a2:	d205      	bcs.n	182b0 <__udivdi3+0x70>
   182a4:	4553      	cmp	r3, sl
   182a6:	bf84      	itt	hi
   182a8:	f1a9 0902 	subhi.w	r9, r9, #2
   182ac:	44ba      	addhi	sl, r7
   182ae:	d800      	bhi.n	182b2 <__udivdi3+0x72>
   182b0:	4691      	mov	r9, r2
   182b2:	ebc3 0a0a 	rsb	sl, r3, sl
   182b6:	4621      	mov	r1, r4
   182b8:	4650      	mov	r0, sl
   182ba:	f000 f961 	bl	18580 <__aeabi_uidiv>
   182be:	4621      	mov	r1, r4
   182c0:	4605      	mov	r5, r0
   182c2:	4650      	mov	r0, sl
   182c4:	f000 fa8a 	bl	187dc <__aeabi_uidivmod>
   182c8:	fa1f f388 	uxth.w	r3, r8
   182cc:	fb06 f605 	mul.w	r6, r6, r5
   182d0:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   182d4:	4546      	cmp	r6, r8
   182d6:	d908      	bls.n	182ea <__udivdi3+0xaa>
   182d8:	1e6b      	subs	r3, r5, #1
   182da:	eb18 0807 	adds.w	r8, r8, r7
   182de:	f080 812e 	bcs.w	1853e <__udivdi3+0x2fe>
   182e2:	3d02      	subs	r5, #2
   182e4:	4546      	cmp	r6, r8
   182e6:	f240 812a 	bls.w	1853e <__udivdi3+0x2fe>
   182ea:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
   182ee:	2600      	movs	r6, #0
   182f0:	4631      	mov	r1, r6
   182f2:	4628      	mov	r0, r5
   182f4:	b003      	add	sp, #12
   182f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182fa:	428b      	cmp	r3, r1
   182fc:	d85a      	bhi.n	183b4 <__udivdi3+0x174>
   182fe:	fab3 f683 	clz	r6, r3
   18302:	2e00      	cmp	r6, #0
   18304:	d159      	bne.n	183ba <__udivdi3+0x17a>
   18306:	428b      	cmp	r3, r1
   18308:	bf2c      	ite	cs
   1830a:	2400      	movcs	r4, #0
   1830c:	2401      	movcc	r4, #1
   1830e:	4282      	cmp	r2, r0
   18310:	bf8c      	ite	hi
   18312:	4625      	movhi	r5, r4
   18314:	f044 0501 	orrls.w	r5, r4, #1
   18318:	2d00      	cmp	r5, #0
   1831a:	f040 8116 	bne.w	1854a <__udivdi3+0x30a>
   1831e:	462e      	mov	r6, r5
   18320:	e7e6      	b.n	182f0 <__udivdi3+0xb0>
   18322:	b922      	cbnz	r2, 1832e <__udivdi3+0xee>
   18324:	2001      	movs	r0, #1
   18326:	4611      	mov	r1, r2
   18328:	f000 f92a 	bl	18580 <__aeabi_uidiv>
   1832c:	4607      	mov	r7, r0
   1832e:	fab7 f387 	clz	r3, r7
   18332:	2b00      	cmp	r3, #0
   18334:	f040 80bd 	bne.w	184b2 <__udivdi3+0x272>
   18338:	1be4      	subs	r4, r4, r7
   1833a:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   1833e:	fa1f f987 	uxth.w	r9, r7
   18342:	2601      	movs	r6, #1
   18344:	4659      	mov	r1, fp
   18346:	4620      	mov	r0, r4
   18348:	f000 f91a 	bl	18580 <__aeabi_uidiv>
   1834c:	4659      	mov	r1, fp
   1834e:	4605      	mov	r5, r0
   18350:	4620      	mov	r0, r4
   18352:	f000 fa43 	bl	187dc <__aeabi_uidivmod>
   18356:	ea4f 4018 	mov.w	r0, r8, lsr #16
   1835a:	fb09 f305 	mul.w	r3, r9, r5
   1835e:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   18362:	4553      	cmp	r3, sl
   18364:	d907      	bls.n	18376 <__udivdi3+0x136>
   18366:	1e6a      	subs	r2, r5, #1
   18368:	eb1a 0a07 	adds.w	sl, sl, r7
   1836c:	d202      	bcs.n	18374 <__udivdi3+0x134>
   1836e:	4553      	cmp	r3, sl
   18370:	f200 8101 	bhi.w	18576 <__udivdi3+0x336>
   18374:	4615      	mov	r5, r2
   18376:	ebc3 0a0a 	rsb	sl, r3, sl
   1837a:	4659      	mov	r1, fp
   1837c:	4650      	mov	r0, sl
   1837e:	f000 f8ff 	bl	18580 <__aeabi_uidiv>
   18382:	4659      	mov	r1, fp
   18384:	4604      	mov	r4, r0
   18386:	4650      	mov	r0, sl
   18388:	f000 fa28 	bl	187dc <__aeabi_uidivmod>
   1838c:	fa1f f388 	uxth.w	r3, r8
   18390:	fb09 f904 	mul.w	r9, r9, r4
   18394:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   18398:	45c1      	cmp	r9, r8
   1839a:	d908      	bls.n	183ae <__udivdi3+0x16e>
   1839c:	1e63      	subs	r3, r4, #1
   1839e:	eb18 0807 	adds.w	r8, r8, r7
   183a2:	f080 80ce 	bcs.w	18542 <__udivdi3+0x302>
   183a6:	3c02      	subs	r4, #2
   183a8:	45c1      	cmp	r9, r8
   183aa:	f240 80ca 	bls.w	18542 <__udivdi3+0x302>
   183ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   183b2:	e79d      	b.n	182f0 <__udivdi3+0xb0>
   183b4:	2600      	movs	r6, #0
   183b6:	4635      	mov	r5, r6
   183b8:	e79a      	b.n	182f0 <__udivdi3+0xb0>
   183ba:	f1c6 0e20 	rsb	lr, r6, #32
   183be:	fa03 f706 	lsl.w	r7, r3, r6
   183c2:	fa22 fc0e 	lsr.w	ip, r2, lr
   183c6:	fa21 fb0e 	lsr.w	fp, r1, lr
   183ca:	ea4c 0707 	orr.w	r7, ip, r7
   183ce:	fa20 fa0e 	lsr.w	sl, r0, lr
   183d2:	fa01 f306 	lsl.w	r3, r1, r6
   183d6:	4658      	mov	r0, fp
   183d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
   183dc:	ea4a 0103 	orr.w	r1, sl, r3
   183e0:	9101      	str	r1, [sp, #4]
   183e2:	4641      	mov	r1, r8
   183e4:	fa02 f406 	lsl.w	r4, r2, r6
   183e8:	9400      	str	r4, [sp, #0]
   183ea:	f000 f8c9 	bl	18580 <__aeabi_uidiv>
   183ee:	4641      	mov	r1, r8
   183f0:	b2bc      	uxth	r4, r7
   183f2:	4682      	mov	sl, r0
   183f4:	4658      	mov	r0, fp
   183f6:	f000 f9f1 	bl	187dc <__aeabi_uidivmod>
   183fa:	9801      	ldr	r0, [sp, #4]
   183fc:	fb04 f30a 	mul.w	r3, r4, sl
   18400:	0c02      	lsrs	r2, r0, #16
   18402:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   18406:	455b      	cmp	r3, fp
   18408:	d906      	bls.n	18418 <__udivdi3+0x1d8>
   1840a:	eb1b 0b07 	adds.w	fp, fp, r7
   1840e:	f10a 32ff 	add.w	r2, sl, #4294967295
   18412:	f0c0 80a4 	bcc.w	1855e <__udivdi3+0x31e>
   18416:	4692      	mov	sl, r2
   18418:	ebc3 0b0b 	rsb	fp, r3, fp
   1841c:	4641      	mov	r1, r8
   1841e:	4658      	mov	r0, fp
   18420:	f000 f8ae 	bl	18580 <__aeabi_uidiv>
   18424:	4641      	mov	r1, r8
   18426:	4681      	mov	r9, r0
   18428:	4658      	mov	r0, fp
   1842a:	f000 f9d7 	bl	187dc <__aeabi_uidivmod>
   1842e:	9801      	ldr	r0, [sp, #4]
   18430:	fb04 f409 	mul.w	r4, r4, r9
   18434:	b282      	uxth	r2, r0
   18436:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
   1843a:	429c      	cmp	r4, r3
   1843c:	d905      	bls.n	1844a <__udivdi3+0x20a>
   1843e:	19db      	adds	r3, r3, r7
   18440:	f109 32ff 	add.w	r2, r9, #4294967295
   18444:	f0c0 8083 	bcc.w	1854e <__udivdi3+0x30e>
   18448:	4691      	mov	r9, r2
   1844a:	9f00      	ldr	r7, [sp, #0]
   1844c:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
   18450:	1b1c      	subs	r4, r3, r4
   18452:	fa1f f389 	uxth.w	r3, r9
   18456:	fa1f fe87 	uxth.w	lr, r7
   1845a:	0c3a      	lsrs	r2, r7, #16
   1845c:	ea4f 4719 	mov.w	r7, r9, lsr #16
   18460:	fb0e fc03 	mul.w	ip, lr, r3
   18464:	fb0e f007 	mul.w	r0, lr, r7
   18468:	fb02 0103 	mla	r1, r2, r3, r0
   1846c:	fb02 fe07 	mul.w	lr, r2, r7
   18470:	eb01 411c 	add.w	r1, r1, ip, lsr #16
   18474:	4288      	cmp	r0, r1
   18476:	bf88      	it	hi
   18478:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   1847c:	eb0e 4311 	add.w	r3, lr, r1, lsr #16
   18480:	429c      	cmp	r4, r3
   18482:	d312      	bcc.n	184aa <__udivdi3+0x26a>
   18484:	ea4f 4101 	mov.w	r1, r1, lsl #16
   18488:	fa1f f28c 	uxth.w	r2, ip
   1848c:	fa05 f506 	lsl.w	r5, r5, r6
   18490:	bf14      	ite	ne
   18492:	2000      	movne	r0, #0
   18494:	2001      	moveq	r0, #1
   18496:	188e      	adds	r6, r1, r2
   18498:	42b5      	cmp	r5, r6
   1849a:	bf2c      	ite	cs
   1849c:	2600      	movcs	r6, #0
   1849e:	f000 0601 	andcc.w	r6, r0, #1
   184a2:	464d      	mov	r5, r9
   184a4:	2e00      	cmp	r6, #0
   184a6:	f43f af23 	beq.w	182f0 <__udivdi3+0xb0>
   184aa:	f109 35ff 	add.w	r5, r9, #4294967295
   184ae:	2600      	movs	r6, #0
   184b0:	e71e      	b.n	182f0 <__udivdi3+0xb0>
   184b2:	409f      	lsls	r7, r3
   184b4:	f1c3 0120 	rsb	r1, r3, #32
   184b8:	fa24 f901 	lsr.w	r9, r4, r1
   184bc:	fa04 f203 	lsl.w	r2, r4, r3
   184c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   184c4:	fa25 f601 	lsr.w	r6, r5, r1
   184c8:	4648      	mov	r0, r9
   184ca:	4659      	mov	r1, fp
   184cc:	ea46 0a02 	orr.w	sl, r6, r2
   184d0:	fa05 f803 	lsl.w	r8, r5, r3
   184d4:	f000 f854 	bl	18580 <__aeabi_uidiv>
   184d8:	4659      	mov	r1, fp
   184da:	ea4f 451a 	mov.w	r5, sl, lsr #16
   184de:	4606      	mov	r6, r0
   184e0:	4648      	mov	r0, r9
   184e2:	f000 f97b 	bl	187dc <__aeabi_uidivmod>
   184e6:	fa1f f987 	uxth.w	r9, r7
   184ea:	fb09 f306 	mul.w	r3, r9, r6
   184ee:	ea45 4401 	orr.w	r4, r5, r1, lsl #16
   184f2:	42a3      	cmp	r3, r4
   184f4:	d906      	bls.n	18504 <__udivdi3+0x2c4>
   184f6:	1e72      	subs	r2, r6, #1
   184f8:	19e4      	adds	r4, r4, r7
   184fa:	d238      	bcs.n	1856e <__udivdi3+0x32e>
   184fc:	42a3      	cmp	r3, r4
   184fe:	d936      	bls.n	1856e <__udivdi3+0x32e>
   18500:	3e02      	subs	r6, #2
   18502:	19e4      	adds	r4, r4, r7
   18504:	1ae4      	subs	r4, r4, r3
   18506:	4659      	mov	r1, fp
   18508:	4620      	mov	r0, r4
   1850a:	f000 f839 	bl	18580 <__aeabi_uidiv>
   1850e:	4659      	mov	r1, fp
   18510:	4605      	mov	r5, r0
   18512:	4620      	mov	r0, r4
   18514:	f000 f962 	bl	187dc <__aeabi_uidivmod>
   18518:	fa1f f48a 	uxth.w	r4, sl
   1851c:	fb09 f305 	mul.w	r3, r9, r5
   18520:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   18524:	42a3      	cmp	r3, r4
   18526:	d906      	bls.n	18536 <__udivdi3+0x2f6>
   18528:	1e6a      	subs	r2, r5, #1
   1852a:	19e4      	adds	r4, r4, r7
   1852c:	d221      	bcs.n	18572 <__udivdi3+0x332>
   1852e:	42a3      	cmp	r3, r4
   18530:	d91f      	bls.n	18572 <__udivdi3+0x332>
   18532:	3d02      	subs	r5, #2
   18534:	19e4      	adds	r4, r4, r7
   18536:	1ae4      	subs	r4, r4, r3
   18538:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1853c:	e702      	b.n	18344 <__udivdi3+0x104>
   1853e:	461d      	mov	r5, r3
   18540:	e6d3      	b.n	182ea <__udivdi3+0xaa>
   18542:	461c      	mov	r4, r3
   18544:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   18548:	e6d2      	b.n	182f0 <__udivdi3+0xb0>
   1854a:	2501      	movs	r5, #1
   1854c:	e6d0      	b.n	182f0 <__udivdi3+0xb0>
   1854e:	429c      	cmp	r4, r3
   18550:	bf84      	itt	hi
   18552:	f1a9 0902 	subhi.w	r9, r9, #2
   18556:	19db      	addhi	r3, r3, r7
   18558:	f63f af77 	bhi.w	1844a <__udivdi3+0x20a>
   1855c:	e774      	b.n	18448 <__udivdi3+0x208>
   1855e:	455b      	cmp	r3, fp
   18560:	bf84      	itt	hi
   18562:	f1aa 0a02 	subhi.w	sl, sl, #2
   18566:	44bb      	addhi	fp, r7
   18568:	f63f af56 	bhi.w	18418 <__udivdi3+0x1d8>
   1856c:	e753      	b.n	18416 <__udivdi3+0x1d6>
   1856e:	4616      	mov	r6, r2
   18570:	e7c8      	b.n	18504 <__udivdi3+0x2c4>
   18572:	4615      	mov	r5, r2
   18574:	e7df      	b.n	18536 <__udivdi3+0x2f6>
   18576:	3d02      	subs	r5, #2
   18578:	44ba      	add	sl, r7
   1857a:	e6fc      	b.n	18376 <__udivdi3+0x136>
   1857c:	0000      	movs	r0, r0
	...

00018580 <__aeabi_uidiv>:
   18580:	1e4a      	subs	r2, r1, #1
   18582:	bf08      	it	eq
   18584:	4770      	bxeq	lr
   18586:	f0c0 8124 	bcc.w	187d2 <__aeabi_uidiv+0x252>
   1858a:	4288      	cmp	r0, r1
   1858c:	f240 8116 	bls.w	187bc <__aeabi_uidiv+0x23c>
   18590:	4211      	tst	r1, r2
   18592:	f000 8117 	beq.w	187c4 <__aeabi_uidiv+0x244>
   18596:	fab0 f380 	clz	r3, r0
   1859a:	fab1 f281 	clz	r2, r1
   1859e:	eba2 0303 	sub.w	r3, r2, r3
   185a2:	f1c3 031f 	rsb	r3, r3, #31
   185a6:	a204      	add	r2, pc, #16	; (adr r2, 185b8 <__aeabi_uidiv+0x38>)
   185a8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   185ac:	f04f 0200 	mov.w	r2, #0
   185b0:	469f      	mov	pc, r3
   185b2:	bf00      	nop
   185b4:	f3af 8000 	nop.w
   185b8:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
   185bc:	bf00      	nop
   185be:	eb42 0202 	adc.w	r2, r2, r2
   185c2:	bf28      	it	cs
   185c4:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
   185c8:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
   185cc:	bf00      	nop
   185ce:	eb42 0202 	adc.w	r2, r2, r2
   185d2:	bf28      	it	cs
   185d4:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
   185d8:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
   185dc:	bf00      	nop
   185de:	eb42 0202 	adc.w	r2, r2, r2
   185e2:	bf28      	it	cs
   185e4:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
   185e8:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
   185ec:	bf00      	nop
   185ee:	eb42 0202 	adc.w	r2, r2, r2
   185f2:	bf28      	it	cs
   185f4:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
   185f8:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
   185fc:	bf00      	nop
   185fe:	eb42 0202 	adc.w	r2, r2, r2
   18602:	bf28      	it	cs
   18604:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
   18608:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
   1860c:	bf00      	nop
   1860e:	eb42 0202 	adc.w	r2, r2, r2
   18612:	bf28      	it	cs
   18614:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
   18618:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
   1861c:	bf00      	nop
   1861e:	eb42 0202 	adc.w	r2, r2, r2
   18622:	bf28      	it	cs
   18624:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
   18628:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
   1862c:	bf00      	nop
   1862e:	eb42 0202 	adc.w	r2, r2, r2
   18632:	bf28      	it	cs
   18634:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
   18638:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
   1863c:	bf00      	nop
   1863e:	eb42 0202 	adc.w	r2, r2, r2
   18642:	bf28      	it	cs
   18644:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
   18648:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
   1864c:	bf00      	nop
   1864e:	eb42 0202 	adc.w	r2, r2, r2
   18652:	bf28      	it	cs
   18654:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
   18658:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
   1865c:	bf00      	nop
   1865e:	eb42 0202 	adc.w	r2, r2, r2
   18662:	bf28      	it	cs
   18664:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
   18668:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
   1866c:	bf00      	nop
   1866e:	eb42 0202 	adc.w	r2, r2, r2
   18672:	bf28      	it	cs
   18674:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
   18678:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
   1867c:	bf00      	nop
   1867e:	eb42 0202 	adc.w	r2, r2, r2
   18682:	bf28      	it	cs
   18684:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
   18688:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
   1868c:	bf00      	nop
   1868e:	eb42 0202 	adc.w	r2, r2, r2
   18692:	bf28      	it	cs
   18694:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
   18698:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
   1869c:	bf00      	nop
   1869e:	eb42 0202 	adc.w	r2, r2, r2
   186a2:	bf28      	it	cs
   186a4:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
   186a8:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
   186ac:	bf00      	nop
   186ae:	eb42 0202 	adc.w	r2, r2, r2
   186b2:	bf28      	it	cs
   186b4:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
   186b8:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
   186bc:	bf00      	nop
   186be:	eb42 0202 	adc.w	r2, r2, r2
   186c2:	bf28      	it	cs
   186c4:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
   186c8:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
   186cc:	bf00      	nop
   186ce:	eb42 0202 	adc.w	r2, r2, r2
   186d2:	bf28      	it	cs
   186d4:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
   186d8:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
   186dc:	bf00      	nop
   186de:	eb42 0202 	adc.w	r2, r2, r2
   186e2:	bf28      	it	cs
   186e4:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
   186e8:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
   186ec:	bf00      	nop
   186ee:	eb42 0202 	adc.w	r2, r2, r2
   186f2:	bf28      	it	cs
   186f4:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
   186f8:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
   186fc:	bf00      	nop
   186fe:	eb42 0202 	adc.w	r2, r2, r2
   18702:	bf28      	it	cs
   18704:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
   18708:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
   1870c:	bf00      	nop
   1870e:	eb42 0202 	adc.w	r2, r2, r2
   18712:	bf28      	it	cs
   18714:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
   18718:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
   1871c:	bf00      	nop
   1871e:	eb42 0202 	adc.w	r2, r2, r2
   18722:	bf28      	it	cs
   18724:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
   18728:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
   1872c:	bf00      	nop
   1872e:	eb42 0202 	adc.w	r2, r2, r2
   18732:	bf28      	it	cs
   18734:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
   18738:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
   1873c:	bf00      	nop
   1873e:	eb42 0202 	adc.w	r2, r2, r2
   18742:	bf28      	it	cs
   18744:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
   18748:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
   1874c:	bf00      	nop
   1874e:	eb42 0202 	adc.w	r2, r2, r2
   18752:	bf28      	it	cs
   18754:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
   18758:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
   1875c:	bf00      	nop
   1875e:	eb42 0202 	adc.w	r2, r2, r2
   18762:	bf28      	it	cs
   18764:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
   18768:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
   1876c:	bf00      	nop
   1876e:	eb42 0202 	adc.w	r2, r2, r2
   18772:	bf28      	it	cs
   18774:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
   18778:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   1877c:	bf00      	nop
   1877e:	eb42 0202 	adc.w	r2, r2, r2
   18782:	bf28      	it	cs
   18784:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
   18788:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
   1878c:	bf00      	nop
   1878e:	eb42 0202 	adc.w	r2, r2, r2
   18792:	bf28      	it	cs
   18794:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
   18798:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
   1879c:	bf00      	nop
   1879e:	eb42 0202 	adc.w	r2, r2, r2
   187a2:	bf28      	it	cs
   187a4:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
   187a8:	ebb0 0f01 	cmp.w	r0, r1
   187ac:	bf00      	nop
   187ae:	eb42 0202 	adc.w	r2, r2, r2
   187b2:	bf28      	it	cs
   187b4:	eba0 0001 	subcs.w	r0, r0, r1
   187b8:	4610      	mov	r0, r2
   187ba:	4770      	bx	lr
   187bc:	bf0c      	ite	eq
   187be:	2001      	moveq	r0, #1
   187c0:	2000      	movne	r0, #0
   187c2:	4770      	bx	lr
   187c4:	fab1 f281 	clz	r2, r1
   187c8:	f1c2 021f 	rsb	r2, r2, #31
   187cc:	fa20 f002 	lsr.w	r0, r0, r2
   187d0:	4770      	bx	lr
   187d2:	b108      	cbz	r0, 187d8 <__aeabi_uidiv+0x258>
   187d4:	f04f 30ff 	mov.w	r0, #4294967295
   187d8:	f7ff bb7e 	b.w	17ed8 <__aeabi_idiv0>

000187dc <__aeabi_uidivmod>:
   187dc:	2900      	cmp	r1, #0
   187de:	d0f8      	beq.n	187d2 <__aeabi_uidiv+0x252>
   187e0:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
   187e4:	f7ff fecc 	bl	18580 <__aeabi_uidiv>
   187e8:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
   187ec:	fb02 f300 	mul.w	r3, r2, r0
   187f0:	eba1 0103 	sub.w	r1, r1, r3
   187f4:	4770      	bx	lr
   187f6:	bf00      	nop

000187f8 <cleanup_glue>:
   187f8:	b538      	push	{r3, r4, r5, lr}
   187fa:	460c      	mov	r4, r1
   187fc:	6809      	ldr	r1, [r1, #0]
   187fe:	4605      	mov	r5, r0
   18800:	b109      	cbz	r1, 18806 <cleanup_glue+0xe>
   18802:	f7ff fff9 	bl	187f8 <cleanup_glue>
   18806:	4628      	mov	r0, r5
   18808:	4621      	mov	r1, r4
   1880a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1880e:	f000 b95d 	b.w	18acc <_free_r>
   18812:	bf00      	nop

00018814 <_reclaim_reent>:
   18814:	f240 0308 	movw	r3, #8
   18818:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1881c:	b570      	push	{r4, r5, r6, lr}
   1881e:	4605      	mov	r5, r0
   18820:	681b      	ldr	r3, [r3, #0]
   18822:	4298      	cmp	r0, r3
   18824:	d048      	beq.n	188b8 <_reclaim_reent+0xa4>
   18826:	6a42      	ldr	r2, [r0, #36]	; 0x24
   18828:	b1f2      	cbz	r2, 18868 <_reclaim_reent+0x54>
   1882a:	68d3      	ldr	r3, [r2, #12]
   1882c:	b1bb      	cbz	r3, 1885e <_reclaim_reent+0x4a>
   1882e:	2200      	movs	r2, #0
   18830:	4616      	mov	r6, r2
   18832:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   18836:	b909      	cbnz	r1, 1883c <_reclaim_reent+0x28>
   18838:	e008      	b.n	1884c <_reclaim_reent+0x38>
   1883a:	4621      	mov	r1, r4
   1883c:	680c      	ldr	r4, [r1, #0]
   1883e:	4628      	mov	r0, r5
   18840:	f000 f944 	bl	18acc <_free_r>
   18844:	2c00      	cmp	r4, #0
   18846:	d1f8      	bne.n	1883a <_reclaim_reent+0x26>
   18848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1884a:	68db      	ldr	r3, [r3, #12]
   1884c:	3601      	adds	r6, #1
   1884e:	2e20      	cmp	r6, #32
   18850:	4632      	mov	r2, r6
   18852:	d1ee      	bne.n	18832 <_reclaim_reent+0x1e>
   18854:	4628      	mov	r0, r5
   18856:	4619      	mov	r1, r3
   18858:	f000 f938 	bl	18acc <_free_r>
   1885c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1885e:	6811      	ldr	r1, [r2, #0]
   18860:	b111      	cbz	r1, 18868 <_reclaim_reent+0x54>
   18862:	4628      	mov	r0, r5
   18864:	f000 f932 	bl	18acc <_free_r>
   18868:	6969      	ldr	r1, [r5, #20]
   1886a:	b111      	cbz	r1, 18872 <_reclaim_reent+0x5e>
   1886c:	4628      	mov	r0, r5
   1886e:	f000 f92d 	bl	18acc <_free_r>
   18872:	6a69      	ldr	r1, [r5, #36]	; 0x24
   18874:	b111      	cbz	r1, 1887c <_reclaim_reent+0x68>
   18876:	4628      	mov	r0, r5
   18878:	f000 f928 	bl	18acc <_free_r>
   1887c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1887e:	b111      	cbz	r1, 18886 <_reclaim_reent+0x72>
   18880:	4628      	mov	r0, r5
   18882:	f000 f923 	bl	18acc <_free_r>
   18886:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   18888:	b111      	cbz	r1, 18890 <_reclaim_reent+0x7c>
   1888a:	4628      	mov	r0, r5
   1888c:	f000 f91e 	bl	18acc <_free_r>
   18890:	6c29      	ldr	r1, [r5, #64]	; 0x40
   18892:	b111      	cbz	r1, 1889a <_reclaim_reent+0x86>
   18894:	4628      	mov	r0, r5
   18896:	f000 f919 	bl	18acc <_free_r>
   1889a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1889c:	b12b      	cbz	r3, 188aa <_reclaim_reent+0x96>
   1889e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
   188a2:	b111      	cbz	r1, 188aa <_reclaim_reent+0x96>
   188a4:	4628      	mov	r0, r5
   188a6:	f000 f911 	bl	18acc <_free_r>
   188aa:	6b69      	ldr	r1, [r5, #52]	; 0x34
   188ac:	b111      	cbz	r1, 188b4 <_reclaim_reent+0xa0>
   188ae:	4628      	mov	r0, r5
   188b0:	f000 f90c 	bl	18acc <_free_r>
   188b4:	69ab      	ldr	r3, [r5, #24]
   188b6:	b903      	cbnz	r3, 188ba <_reclaim_reent+0xa6>
   188b8:	bd70      	pop	{r4, r5, r6, pc}
   188ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   188bc:	4628      	mov	r0, r5
   188be:	4798      	blx	r3
   188c0:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
   188c4:	2900      	cmp	r1, #0
   188c6:	d0f7      	beq.n	188b8 <_reclaim_reent+0xa4>
   188c8:	4628      	mov	r0, r5
   188ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   188ce:	f7ff bf93 	b.w	187f8 <cleanup_glue>
   188d2:	bf00      	nop

000188d4 <_wrapup_reent>:
   188d4:	b570      	push	{r4, r5, r6, lr}
   188d6:	4606      	mov	r6, r0
   188d8:	b190      	cbz	r0, 18900 <_wrapup_reent+0x2c>
   188da:	6cb3      	ldr	r3, [r6, #72]	; 0x48
   188dc:	b15b      	cbz	r3, 188f6 <_wrapup_reent+0x22>
   188de:	685d      	ldr	r5, [r3, #4]
   188e0:	1e6c      	subs	r4, r5, #1
   188e2:	d408      	bmi.n	188f6 <_wrapup_reent+0x22>
   188e4:	3502      	adds	r5, #2
   188e6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   188ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   188ee:	3c01      	subs	r4, #1
   188f0:	4798      	blx	r3
   188f2:	1c63      	adds	r3, r4, #1
   188f4:	d1f9      	bne.n	188ea <_wrapup_reent+0x16>
   188f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   188f8:	b10b      	cbz	r3, 188fe <_wrapup_reent+0x2a>
   188fa:	4630      	mov	r0, r6
   188fc:	4798      	blx	r3
   188fe:	bd70      	pop	{r4, r5, r6, pc}
   18900:	f240 0308 	movw	r3, #8
   18904:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18908:	681e      	ldr	r6, [r3, #0]
   1890a:	e7e6      	b.n	188da <_wrapup_reent+0x6>

0001890c <strcpy>:
   1890c:	ea80 0201 	eor.w	r2, r0, r1
   18910:	4684      	mov	ip, r0
   18912:	f012 0f03 	tst.w	r2, #3
   18916:	d14f      	bne.n	189b8 <strcpy+0xac>
   18918:	f011 0f03 	tst.w	r1, #3
   1891c:	d132      	bne.n	18984 <strcpy+0x78>
   1891e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   18922:	f011 0f04 	tst.w	r1, #4
   18926:	f851 3b04 	ldr.w	r3, [r1], #4
   1892a:	d00b      	beq.n	18944 <strcpy+0x38>
   1892c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   18930:	439a      	bics	r2, r3
   18932:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   18936:	bf04      	itt	eq
   18938:	f84c 3b04 	streq.w	r3, [ip], #4
   1893c:	f851 3b04 	ldreq.w	r3, [r1], #4
   18940:	d116      	bne.n	18970 <strcpy+0x64>
   18942:	bf00      	nop
   18944:	f851 4b04 	ldr.w	r4, [r1], #4
   18948:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1894c:	439a      	bics	r2, r3
   1894e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   18952:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   18956:	d10b      	bne.n	18970 <strcpy+0x64>
   18958:	f84c 3b04 	str.w	r3, [ip], #4
   1895c:	43a2      	bics	r2, r4
   1895e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   18962:	bf04      	itt	eq
   18964:	f851 3b04 	ldreq.w	r3, [r1], #4
   18968:	f84c 4b04 	streq.w	r4, [ip], #4
   1896c:	d0ea      	beq.n	18944 <strcpy+0x38>
   1896e:	4623      	mov	r3, r4
   18970:	f80c 3b01 	strb.w	r3, [ip], #1
   18974:	f013 0fff 	tst.w	r3, #255	; 0xff
   18978:	ea4f 2333 	mov.w	r3, r3, ror #8
   1897c:	d1f8      	bne.n	18970 <strcpy+0x64>
   1897e:	f85d 4b04 	ldr.w	r4, [sp], #4
   18982:	4770      	bx	lr
   18984:	f011 0f01 	tst.w	r1, #1
   18988:	d006      	beq.n	18998 <strcpy+0x8c>
   1898a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1898e:	f80c 2b01 	strb.w	r2, [ip], #1
   18992:	2a00      	cmp	r2, #0
   18994:	bf08      	it	eq
   18996:	4770      	bxeq	lr
   18998:	f011 0f02 	tst.w	r1, #2
   1899c:	d0bf      	beq.n	1891e <strcpy+0x12>
   1899e:	f831 2b02 	ldrh.w	r2, [r1], #2
   189a2:	f012 0fff 	tst.w	r2, #255	; 0xff
   189a6:	bf16      	itet	ne
   189a8:	f82c 2b02 	strhne.w	r2, [ip], #2
   189ac:	f88c 2000 	strbeq.w	r2, [ip]
   189b0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   189b4:	d1b3      	bne.n	1891e <strcpy+0x12>
   189b6:	4770      	bx	lr
   189b8:	f811 2b01 	ldrb.w	r2, [r1], #1
   189bc:	f80c 2b01 	strb.w	r2, [ip], #1
   189c0:	2a00      	cmp	r2, #0
   189c2:	d1f9      	bne.n	189b8 <strcpy+0xac>
   189c4:	4770      	bx	lr
   189c6:	bf00      	nop

000189c8 <strlen>:
   189c8:	f020 0103 	bic.w	r1, r0, #3
   189cc:	f010 0003 	ands.w	r0, r0, #3
   189d0:	f1c0 0000 	rsb	r0, r0, #0
   189d4:	f851 3b04 	ldr.w	r3, [r1], #4
   189d8:	f100 0c04 	add.w	ip, r0, #4
   189dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   189e0:	f06f 0200 	mvn.w	r2, #0
   189e4:	bf1c      	itt	ne
   189e6:	fa22 f20c 	lsrne.w	r2, r2, ip
   189ea:	4313      	orrne	r3, r2
   189ec:	f04f 0c01 	mov.w	ip, #1
   189f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   189f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   189f8:	eba3 020c 	sub.w	r2, r3, ip
   189fc:	ea22 0203 	bic.w	r2, r2, r3
   18a00:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   18a04:	bf04      	itt	eq
   18a06:	f851 3b04 	ldreq.w	r3, [r1], #4
   18a0a:	3004      	addeq	r0, #4
   18a0c:	d0f4      	beq.n	189f8 <strlen+0x30>
   18a0e:	f013 0fff 	tst.w	r3, #255	; 0xff
   18a12:	bf1f      	itttt	ne
   18a14:	3001      	addne	r0, #1
   18a16:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   18a1a:	3001      	addne	r0, #1
   18a1c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   18a20:	bf18      	it	ne
   18a22:	3001      	addne	r0, #1
   18a24:	4770      	bx	lr
   18a26:	bf00      	nop

00018a28 <_malloc_trim_r>:
   18a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a2a:	f240 04fc 	movw	r4, #252	; 0xfc
   18a2e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   18a32:	460f      	mov	r7, r1
   18a34:	4605      	mov	r5, r0
   18a36:	f000 fbd1 	bl	191dc <__malloc_lock>
   18a3a:	68a3      	ldr	r3, [r4, #8]
   18a3c:	4628      	mov	r0, r5
   18a3e:	685e      	ldr	r6, [r3, #4]
   18a40:	f026 0603 	bic.w	r6, r6, #3
   18a44:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   18a48:	330f      	adds	r3, #15
   18a4a:	1bdf      	subs	r7, r3, r7
   18a4c:	0b3f      	lsrs	r7, r7, #12
   18a4e:	3f01      	subs	r7, #1
   18a50:	033f      	lsls	r7, r7, #12
   18a52:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   18a56:	db07      	blt.n	18a68 <_malloc_trim_r+0x40>
   18a58:	2100      	movs	r1, #0
   18a5a:	f000 fbc3 	bl	191e4 <_sbrk_r>
   18a5e:	68a3      	ldr	r3, [r4, #8]
   18a60:	199b      	adds	r3, r3, r6
   18a62:	4298      	cmp	r0, r3
   18a64:	4628      	mov	r0, r5
   18a66:	d003      	beq.n	18a70 <_malloc_trim_r+0x48>
   18a68:	f000 fbba 	bl	191e0 <__malloc_unlock>
   18a6c:	2000      	movs	r0, #0
   18a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a70:	4279      	negs	r1, r7
   18a72:	f000 fbb7 	bl	191e4 <_sbrk_r>
   18a76:	3001      	adds	r0, #1
   18a78:	d010      	beq.n	18a9c <_malloc_trim_r+0x74>
   18a7a:	f643 13ac 	movw	r3, #14764	; 0x39ac
   18a7e:	68a1      	ldr	r1, [r4, #8]
   18a80:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18a84:	1bf6      	subs	r6, r6, r7
   18a86:	4628      	mov	r0, r5
   18a88:	f046 0601 	orr.w	r6, r6, #1
   18a8c:	681a      	ldr	r2, [r3, #0]
   18a8e:	604e      	str	r6, [r1, #4]
   18a90:	1bd7      	subs	r7, r2, r7
   18a92:	601f      	str	r7, [r3, #0]
   18a94:	f000 fba4 	bl	191e0 <__malloc_unlock>
   18a98:	2001      	movs	r0, #1
   18a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a9c:	2100      	movs	r1, #0
   18a9e:	4628      	mov	r0, r5
   18aa0:	f000 fba0 	bl	191e4 <_sbrk_r>
   18aa4:	68a3      	ldr	r3, [r4, #8]
   18aa6:	1ac2      	subs	r2, r0, r3
   18aa8:	2a0f      	cmp	r2, #15
   18aaa:	dd0d      	ble.n	18ac8 <_malloc_trim_r+0xa0>
   18aac:	f240 5404 	movw	r4, #1284	; 0x504
   18ab0:	f643 11ac 	movw	r1, #14764	; 0x39ac
   18ab4:	f2c1 0400 	movt	r4, #4096	; 0x1000
   18ab8:	f2c1 0100 	movt	r1, #4096	; 0x1000
   18abc:	f042 0201 	orr.w	r2, r2, #1
   18ac0:	605a      	str	r2, [r3, #4]
   18ac2:	6823      	ldr	r3, [r4, #0]
   18ac4:	1ac0      	subs	r0, r0, r3
   18ac6:	6008      	str	r0, [r1, #0]
   18ac8:	4628      	mov	r0, r5
   18aca:	e7cd      	b.n	18a68 <_malloc_trim_r+0x40>

00018acc <_free_r>:
   18acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ace:	460d      	mov	r5, r1
   18ad0:	4604      	mov	r4, r0
   18ad2:	2900      	cmp	r1, #0
   18ad4:	d075      	beq.n	18bc2 <_free_r+0xf6>
   18ad6:	f000 fb81 	bl	191dc <__malloc_lock>
   18ada:	f855 6c04 	ldr.w	r6, [r5, #-4]
   18ade:	f240 00fc 	movw	r0, #252	; 0xfc
   18ae2:	f1a5 0108 	sub.w	r1, r5, #8
   18ae6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   18aea:	f026 0301 	bic.w	r3, r6, #1
   18aee:	18ca      	adds	r2, r1, r3
   18af0:	f8d0 c008 	ldr.w	ip, [r0, #8]
   18af4:	6857      	ldr	r7, [r2, #4]
   18af6:	4594      	cmp	ip, r2
   18af8:	f027 0703 	bic.w	r7, r7, #3
   18afc:	d07e      	beq.n	18bfc <_free_r+0x130>
   18afe:	f016 0601 	ands.w	r6, r6, #1
   18b02:	6057      	str	r7, [r2, #4]
   18b04:	d04d      	beq.n	18ba2 <_free_r+0xd6>
   18b06:	2600      	movs	r6, #0
   18b08:	19d5      	adds	r5, r2, r7
   18b0a:	686d      	ldr	r5, [r5, #4]
   18b0c:	f015 0f01 	tst.w	r5, #1
   18b10:	d106      	bne.n	18b20 <_free_r+0x54>
   18b12:	19db      	adds	r3, r3, r7
   18b14:	6895      	ldr	r5, [r2, #8]
   18b16:	2e00      	cmp	r6, #0
   18b18:	d064      	beq.n	18be4 <_free_r+0x118>
   18b1a:	68d2      	ldr	r2, [r2, #12]
   18b1c:	60ea      	str	r2, [r5, #12]
   18b1e:	6095      	str	r5, [r2, #8]
   18b20:	f043 0201 	orr.w	r2, r3, #1
   18b24:	50cb      	str	r3, [r1, r3]
   18b26:	604a      	str	r2, [r1, #4]
   18b28:	2e00      	cmp	r6, #0
   18b2a:	d135      	bne.n	18b98 <_free_r+0xcc>
   18b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   18b30:	d348      	bcc.n	18bc4 <_free_r+0xf8>
   18b32:	099e      	lsrs	r6, r3, #6
   18b34:	0a5a      	lsrs	r2, r3, #9
   18b36:	3638      	adds	r6, #56	; 0x38
   18b38:	00f5      	lsls	r5, r6, #3
   18b3a:	2a04      	cmp	r2, #4
   18b3c:	d916      	bls.n	18b6c <_free_r+0xa0>
   18b3e:	f102 065b 	add.w	r6, r2, #91	; 0x5b
   18b42:	00f5      	lsls	r5, r6, #3
   18b44:	2a14      	cmp	r2, #20
   18b46:	d911      	bls.n	18b6c <_free_r+0xa0>
   18b48:	0b1e      	lsrs	r6, r3, #12
   18b4a:	366e      	adds	r6, #110	; 0x6e
   18b4c:	00f5      	lsls	r5, r6, #3
   18b4e:	2a54      	cmp	r2, #84	; 0x54
   18b50:	d90c      	bls.n	18b6c <_free_r+0xa0>
   18b52:	0bde      	lsrs	r6, r3, #15
   18b54:	3677      	adds	r6, #119	; 0x77
   18b56:	00f5      	lsls	r5, r6, #3
   18b58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   18b5c:	d906      	bls.n	18b6c <_free_r+0xa0>
   18b5e:	f240 5554 	movw	r5, #1364	; 0x554
   18b62:	42aa      	cmp	r2, r5
   18b64:	d874      	bhi.n	18c50 <_free_r+0x184>
   18b66:	0c9e      	lsrs	r6, r3, #18
   18b68:	367c      	adds	r6, #124	; 0x7c
   18b6a:	00f5      	lsls	r5, r6, #3
   18b6c:	1940      	adds	r0, r0, r5
   18b6e:	f240 05fc 	movw	r5, #252	; 0xfc
   18b72:	f2c1 0500 	movt	r5, #4096	; 0x1000
   18b76:	6882      	ldr	r2, [r0, #8]
   18b78:	4282      	cmp	r2, r0
   18b7a:	d103      	bne.n	18b84 <_free_r+0xb8>
   18b7c:	e05f      	b.n	18c3e <_free_r+0x172>
   18b7e:	6892      	ldr	r2, [r2, #8]
   18b80:	4290      	cmp	r0, r2
   18b82:	d004      	beq.n	18b8e <_free_r+0xc2>
   18b84:	6855      	ldr	r5, [r2, #4]
   18b86:	f025 0503 	bic.w	r5, r5, #3
   18b8a:	42ab      	cmp	r3, r5
   18b8c:	d3f7      	bcc.n	18b7e <_free_r+0xb2>
   18b8e:	68d3      	ldr	r3, [r2, #12]
   18b90:	60cb      	str	r3, [r1, #12]
   18b92:	608a      	str	r2, [r1, #8]
   18b94:	60d1      	str	r1, [r2, #12]
   18b96:	6099      	str	r1, [r3, #8]
   18b98:	4620      	mov	r0, r4
   18b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18b9e:	f000 bb1f 	b.w	191e0 <__malloc_unlock>
   18ba2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   18ba6:	f100 0c08 	add.w	ip, r0, #8
   18baa:	1b49      	subs	r1, r1, r5
   18bac:	195b      	adds	r3, r3, r5
   18bae:	688d      	ldr	r5, [r1, #8]
   18bb0:	4565      	cmp	r5, ip
   18bb2:	d042      	beq.n	18c3a <_free_r+0x16e>
   18bb4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   18bb8:	f8c5 c00c 	str.w	ip, [r5, #12]
   18bbc:	f8cc 5008 	str.w	r5, [ip, #8]
   18bc0:	e7a2      	b.n	18b08 <_free_r+0x3c>
   18bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bc4:	08db      	lsrs	r3, r3, #3
   18bc6:	2501      	movs	r5, #1
   18bc8:	6846      	ldr	r6, [r0, #4]
   18bca:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   18bce:	109b      	asrs	r3, r3, #2
   18bd0:	fa05 f303 	lsl.w	r3, r5, r3
   18bd4:	60ca      	str	r2, [r1, #12]
   18bd6:	6895      	ldr	r5, [r2, #8]
   18bd8:	4333      	orrs	r3, r6
   18bda:	6043      	str	r3, [r0, #4]
   18bdc:	608d      	str	r5, [r1, #8]
   18bde:	60e9      	str	r1, [r5, #12]
   18be0:	6091      	str	r1, [r2, #8]
   18be2:	e7d9      	b.n	18b98 <_free_r+0xcc>
   18be4:	4f1c      	ldr	r7, [pc, #112]	; (18c58 <_free_r+0x18c>)
   18be6:	42bd      	cmp	r5, r7
   18be8:	d197      	bne.n	18b1a <_free_r+0x4e>
   18bea:	6141      	str	r1, [r0, #20]
   18bec:	f043 0201 	orr.w	r2, r3, #1
   18bf0:	6101      	str	r1, [r0, #16]
   18bf2:	60cd      	str	r5, [r1, #12]
   18bf4:	608d      	str	r5, [r1, #8]
   18bf6:	604a      	str	r2, [r1, #4]
   18bf8:	50cb      	str	r3, [r1, r3]
   18bfa:	e7cd      	b.n	18b98 <_free_r+0xcc>
   18bfc:	07f2      	lsls	r2, r6, #31
   18bfe:	443b      	add	r3, r7
   18c00:	d407      	bmi.n	18c12 <_free_r+0x146>
   18c02:	f855 2c08 	ldr.w	r2, [r5, #-8]
   18c06:	1a89      	subs	r1, r1, r2
   18c08:	189b      	adds	r3, r3, r2
   18c0a:	688d      	ldr	r5, [r1, #8]
   18c0c:	68ca      	ldr	r2, [r1, #12]
   18c0e:	60ea      	str	r2, [r5, #12]
   18c10:	6095      	str	r5, [r2, #8]
   18c12:	f240 5208 	movw	r2, #1288	; 0x508
   18c16:	f043 0501 	orr.w	r5, r3, #1
   18c1a:	f2c1 0200 	movt	r2, #4096	; 0x1000
   18c1e:	604d      	str	r5, [r1, #4]
   18c20:	6081      	str	r1, [r0, #8]
   18c22:	6812      	ldr	r2, [r2, #0]
   18c24:	4293      	cmp	r3, r2
   18c26:	d3b7      	bcc.n	18b98 <_free_r+0xcc>
   18c28:	f643 13a8 	movw	r3, #14760	; 0x39a8
   18c2c:	4620      	mov	r0, r4
   18c2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18c32:	6819      	ldr	r1, [r3, #0]
   18c34:	f7ff fef8 	bl	18a28 <_malloc_trim_r>
   18c38:	e7ae      	b.n	18b98 <_free_r+0xcc>
   18c3a:	2601      	movs	r6, #1
   18c3c:	e764      	b.n	18b08 <_free_r+0x3c>
   18c3e:	2701      	movs	r7, #1
   18c40:	6868      	ldr	r0, [r5, #4]
   18c42:	10b6      	asrs	r6, r6, #2
   18c44:	4613      	mov	r3, r2
   18c46:	fa07 f606 	lsl.w	r6, r7, r6
   18c4a:	4330      	orrs	r0, r6
   18c4c:	6068      	str	r0, [r5, #4]
   18c4e:	e79f      	b.n	18b90 <_free_r+0xc4>
   18c50:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
   18c54:	267e      	movs	r6, #126	; 0x7e
   18c56:	e789      	b.n	18b6c <_free_r+0xa0>
   18c58:	10000104 	.word	0x10000104

00018c5c <_malloc_r>:
   18c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c60:	f101 040b 	add.w	r4, r1, #11
   18c64:	2c16      	cmp	r4, #22
   18c66:	b083      	sub	sp, #12
   18c68:	4606      	mov	r6, r0
   18c6a:	d930      	bls.n	18cce <_malloc_r+0x72>
   18c6c:	f024 0407 	bic.w	r4, r4, #7
   18c70:	0fe3      	lsrs	r3, r4, #31
   18c72:	428c      	cmp	r4, r1
   18c74:	bf2c      	ite	cs
   18c76:	4619      	movcs	r1, r3
   18c78:	f043 0101 	orrcc.w	r1, r3, #1
   18c7c:	2900      	cmp	r1, #0
   18c7e:	d12f      	bne.n	18ce0 <_malloc_r+0x84>
   18c80:	4630      	mov	r0, r6
   18c82:	f000 faab 	bl	191dc <__malloc_lock>
   18c86:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   18c8a:	d22d      	bcs.n	18ce8 <_malloc_r+0x8c>
   18c8c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   18c90:	f240 05fc 	movw	r5, #252	; 0xfc
   18c94:	f2c1 0500 	movt	r5, #4096	; 0x1000
   18c98:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
   18c9c:	68d3      	ldr	r3, [r2, #12]
   18c9e:	4293      	cmp	r3, r2
   18ca0:	f000 8223 	beq.w	190ea <_malloc_r+0x48e>
   18ca4:	685c      	ldr	r4, [r3, #4]
   18ca6:	f103 0708 	add.w	r7, r3, #8
   18caa:	68da      	ldr	r2, [r3, #12]
   18cac:	4630      	mov	r0, r6
   18cae:	f024 0403 	bic.w	r4, r4, #3
   18cb2:	6899      	ldr	r1, [r3, #8]
   18cb4:	191b      	adds	r3, r3, r4
   18cb6:	685c      	ldr	r4, [r3, #4]
   18cb8:	60ca      	str	r2, [r1, #12]
   18cba:	f044 0401 	orr.w	r4, r4, #1
   18cbe:	6091      	str	r1, [r2, #8]
   18cc0:	605c      	str	r4, [r3, #4]
   18cc2:	f000 fa8d 	bl	191e0 <__malloc_unlock>
   18cc6:	4638      	mov	r0, r7
   18cc8:	b003      	add	sp, #12
   18cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cce:	2300      	movs	r3, #0
   18cd0:	2410      	movs	r4, #16
   18cd2:	428c      	cmp	r4, r1
   18cd4:	bf2c      	ite	cs
   18cd6:	4619      	movcs	r1, r3
   18cd8:	f043 0101 	orrcc.w	r1, r3, #1
   18cdc:	2900      	cmp	r1, #0
   18cde:	d0cf      	beq.n	18c80 <_malloc_r+0x24>
   18ce0:	230c      	movs	r3, #12
   18ce2:	2700      	movs	r7, #0
   18ce4:	6033      	str	r3, [r6, #0]
   18ce6:	e7ee      	b.n	18cc6 <_malloc_r+0x6a>
   18ce8:	ea5f 2e54 	movs.w	lr, r4, lsr #9
   18cec:	bf04      	itt	eq
   18cee:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
   18cf2:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
   18cf6:	f040 808c 	bne.w	18e12 <_malloc_r+0x1b6>
   18cfa:	f240 05fc 	movw	r5, #252	; 0xfc
   18cfe:	f2c1 0500 	movt	r5, #4096	; 0x1000
   18d02:	1869      	adds	r1, r5, r1
   18d04:	68cf      	ldr	r7, [r1, #12]
   18d06:	42b9      	cmp	r1, r7
   18d08:	d106      	bne.n	18d18 <_malloc_r+0xbc>
   18d0a:	e00d      	b.n	18d28 <_malloc_r+0xcc>
   18d0c:	2a00      	cmp	r2, #0
   18d0e:	f280 8181 	bge.w	19014 <_malloc_r+0x3b8>
   18d12:	68ff      	ldr	r7, [r7, #12]
   18d14:	42b9      	cmp	r1, r7
   18d16:	d007      	beq.n	18d28 <_malloc_r+0xcc>
   18d18:	687b      	ldr	r3, [r7, #4]
   18d1a:	f023 0303 	bic.w	r3, r3, #3
   18d1e:	1b1a      	subs	r2, r3, r4
   18d20:	2a0f      	cmp	r2, #15
   18d22:	ddf3      	ble.n	18d0c <_malloc_r+0xb0>
   18d24:	f10e 3eff 	add.w	lr, lr, #4294967295
   18d28:	f10e 0e01 	add.w	lr, lr, #1
   18d2c:	f240 00fc 	movw	r0, #252	; 0xfc
   18d30:	692f      	ldr	r7, [r5, #16]
   18d32:	f2c1 0000 	movt	r0, #4096	; 0x1000
   18d36:	f100 0208 	add.w	r2, r0, #8
   18d3a:	4297      	cmp	r7, r2
   18d3c:	bf08      	it	eq
   18d3e:	6843      	ldreq	r3, [r0, #4]
   18d40:	d026      	beq.n	18d90 <_malloc_r+0x134>
   18d42:	687b      	ldr	r3, [r7, #4]
   18d44:	f023 0c03 	bic.w	ip, r3, #3
   18d48:	ebc4 030c 	rsb	r3, r4, ip
   18d4c:	2b0f      	cmp	r3, #15
   18d4e:	f300 819c 	bgt.w	1908a <_malloc_r+0x42e>
   18d52:	2b00      	cmp	r3, #0
   18d54:	6142      	str	r2, [r0, #20]
   18d56:	6102      	str	r2, [r0, #16]
   18d58:	f280 8095 	bge.w	18e86 <_malloc_r+0x22a>
   18d5c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
   18d60:	f080 8173 	bcs.w	1904a <_malloc_r+0x3ee>
   18d64:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   18d68:	f04f 0801 	mov.w	r8, #1
   18d6c:	6843      	ldr	r3, [r0, #4]
   18d6e:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
   18d72:	ea4f 0cac 	mov.w	ip, ip, asr #2
   18d76:	fa08 f80c 	lsl.w	r8, r8, ip
   18d7a:	60f9      	str	r1, [r7, #12]
   18d7c:	f8d1 c008 	ldr.w	ip, [r1, #8]
   18d80:	ea48 0303 	orr.w	r3, r8, r3
   18d84:	6043      	str	r3, [r0, #4]
   18d86:	f8c7 c008 	str.w	ip, [r7, #8]
   18d8a:	f8cc 700c 	str.w	r7, [ip, #12]
   18d8e:	608f      	str	r7, [r1, #8]
   18d90:	2701      	movs	r7, #1
   18d92:	ea4f 01ae 	mov.w	r1, lr, asr #2
   18d96:	fa07 f701 	lsl.w	r7, r7, r1
   18d9a:	429f      	cmp	r7, r3
   18d9c:	d87e      	bhi.n	18e9c <_malloc_r+0x240>
   18d9e:	423b      	tst	r3, r7
   18da0:	d106      	bne.n	18db0 <_malloc_r+0x154>
   18da2:	f02e 0e03 	bic.w	lr, lr, #3
   18da6:	007f      	lsls	r7, r7, #1
   18da8:	f10e 0e04 	add.w	lr, lr, #4
   18dac:	423b      	tst	r3, r7
   18dae:	d0fa      	beq.n	18da6 <_malloc_r+0x14a>
   18db0:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
   18db4:	46f0      	mov	r8, lr
   18db6:	46cc      	mov	ip, r9
   18db8:	f8dc 000c 	ldr.w	r0, [ip, #12]
   18dbc:	4584      	cmp	ip, r0
   18dbe:	d107      	bne.n	18dd0 <_malloc_r+0x174>
   18dc0:	e174      	b.n	190ac <_malloc_r+0x450>
   18dc2:	2b00      	cmp	r3, #0
   18dc4:	f280 819b 	bge.w	190fe <_malloc_r+0x4a2>
   18dc8:	68c0      	ldr	r0, [r0, #12]
   18dca:	4584      	cmp	ip, r0
   18dcc:	f000 816e 	beq.w	190ac <_malloc_r+0x450>
   18dd0:	6841      	ldr	r1, [r0, #4]
   18dd2:	f021 0103 	bic.w	r1, r1, #3
   18dd6:	1b0b      	subs	r3, r1, r4
   18dd8:	2b0f      	cmp	r3, #15
   18dda:	ddf2      	ble.n	18dc2 <_malloc_r+0x166>
   18ddc:	4607      	mov	r7, r0
   18dde:	1901      	adds	r1, r0, r4
   18de0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   18de4:	f044 0801 	orr.w	r8, r4, #1
   18de8:	f857 4f08 	ldr.w	r4, [r7, #8]!
   18dec:	f043 0c01 	orr.w	ip, r3, #1
   18df0:	f8c0 8004 	str.w	r8, [r0, #4]
   18df4:	4630      	mov	r0, r6
   18df6:	f8c1 c004 	str.w	ip, [r1, #4]
   18dfa:	f8c4 e00c 	str.w	lr, [r4, #12]
   18dfe:	f8ce 4008 	str.w	r4, [lr, #8]
   18e02:	6169      	str	r1, [r5, #20]
   18e04:	6129      	str	r1, [r5, #16]
   18e06:	60ca      	str	r2, [r1, #12]
   18e08:	608a      	str	r2, [r1, #8]
   18e0a:	50cb      	str	r3, [r1, r3]
   18e0c:	f000 f9e8 	bl	191e0 <__malloc_unlock>
   18e10:	e759      	b.n	18cc6 <_malloc_r+0x6a>
   18e12:	f1be 0f04 	cmp.w	lr, #4
   18e16:	bf9e      	ittt	ls
   18e18:	ea4f 1e94 	movls.w	lr, r4, lsr #6
   18e1c:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
   18e20:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   18e24:	f67f af69 	bls.w	18cfa <_malloc_r+0x9e>
   18e28:	f1be 0f14 	cmp.w	lr, #20
   18e2c:	bf9c      	itt	ls
   18e2e:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
   18e32:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   18e36:	f67f af60 	bls.w	18cfa <_malloc_r+0x9e>
   18e3a:	f1be 0f54 	cmp.w	lr, #84	; 0x54
   18e3e:	bf9e      	ittt	ls
   18e40:	ea4f 3e14 	movls.w	lr, r4, lsr #12
   18e44:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
   18e48:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   18e4c:	f67f af55 	bls.w	18cfa <_malloc_r+0x9e>
   18e50:	f5be 7faa 	cmp.w	lr, #340	; 0x154
   18e54:	bf9e      	ittt	ls
   18e56:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
   18e5a:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
   18e5e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   18e62:	f67f af4a 	bls.w	18cfa <_malloc_r+0x9e>
   18e66:	f240 5354 	movw	r3, #1364	; 0x554
   18e6a:	459e      	cmp	lr, r3
   18e6c:	bf95      	itete	ls
   18e6e:	ea4f 4e94 	movls.w	lr, r4, lsr #18
   18e72:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
   18e76:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
   18e7a:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
   18e7e:	bf98      	it	ls
   18e80:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   18e84:	e739      	b.n	18cfa <_malloc_r+0x9e>
   18e86:	eb07 030c 	add.w	r3, r7, ip
   18e8a:	4630      	mov	r0, r6
   18e8c:	3708      	adds	r7, #8
   18e8e:	685a      	ldr	r2, [r3, #4]
   18e90:	f042 0201 	orr.w	r2, r2, #1
   18e94:	605a      	str	r2, [r3, #4]
   18e96:	f000 f9a3 	bl	191e0 <__malloc_unlock>
   18e9a:	e714      	b.n	18cc6 <_malloc_r+0x6a>
   18e9c:	68af      	ldr	r7, [r5, #8]
   18e9e:	f240 03fc 	movw	r3, #252	; 0xfc
   18ea2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18ea6:	687a      	ldr	r2, [r7, #4]
   18ea8:	f022 0803 	bic.w	r8, r2, #3
   18eac:	4544      	cmp	r4, r8
   18eae:	ebc4 0208 	rsb	r2, r4, r8
   18eb2:	bf94      	ite	ls
   18eb4:	2100      	movls	r1, #0
   18eb6:	2101      	movhi	r1, #1
   18eb8:	2a0f      	cmp	r2, #15
   18eba:	bfd8      	it	le
   18ebc:	f041 0101 	orrle.w	r1, r1, #1
   18ec0:	2900      	cmp	r1, #0
   18ec2:	f000 80b5 	beq.w	19030 <_malloc_r+0x3d4>
   18ec6:	f643 1aa8 	movw	sl, #14760	; 0x39a8
   18eca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   18ece:	f2c1 0a00 	movt	sl, #4096	; 0x1000
   18ed2:	3201      	adds	r2, #1
   18ed4:	f8da 3000 	ldr.w	r3, [sl]
   18ed8:	4423      	add	r3, r4
   18eda:	bf08      	it	eq
   18edc:	f103 0b10 	addeq.w	fp, r3, #16
   18ee0:	d006      	beq.n	18ef0 <_malloc_r+0x294>
   18ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   18ee6:	330f      	adds	r3, #15
   18ee8:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   18eec:	f023 0b1f 	bic.w	fp, r3, #31
   18ef0:	4630      	mov	r0, r6
   18ef2:	4659      	mov	r1, fp
   18ef4:	f000 f976 	bl	191e4 <_sbrk_r>
   18ef8:	1c42      	adds	r2, r0, #1
   18efa:	4681      	mov	r9, r0
   18efc:	f000 8131 	beq.w	19162 <_malloc_r+0x506>
   18f00:	eb07 0308 	add.w	r3, r7, r8
   18f04:	4283      	cmp	r3, r0
   18f06:	f200 8106 	bhi.w	19116 <_malloc_r+0x4ba>
   18f0a:	f8da 2004 	ldr.w	r2, [sl, #4]
   18f0e:	454b      	cmp	r3, r9
   18f10:	445a      	add	r2, fp
   18f12:	f8ca 2004 	str.w	r2, [sl, #4]
   18f16:	f000 8131 	beq.w	1917c <_malloc_r+0x520>
   18f1a:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
   18f1e:	f240 01fc 	movw	r1, #252	; 0xfc
   18f22:	f2c1 0100 	movt	r1, #4096	; 0x1000
   18f26:	3001      	adds	r0, #1
   18f28:	4630      	mov	r0, r6
   18f2a:	bf17      	itett	ne
   18f2c:	ebc3 0309 	rsbne	r3, r3, r9
   18f30:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
   18f34:	18d2      	addne	r2, r2, r3
   18f36:	f8ca 2004 	strne.w	r2, [sl, #4]
   18f3a:	f019 0307 	ands.w	r3, r9, #7
   18f3e:	bf1f      	itttt	ne
   18f40:	f1c3 0208 	rsbne	r2, r3, #8
   18f44:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
   18f48:	4491      	addne	r9, r2
   18f4a:	f103 0208 	addne.w	r2, r3, #8
   18f4e:	eb09 030b 	add.w	r3, r9, fp
   18f52:	bf08      	it	eq
   18f54:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
   18f58:	051b      	lsls	r3, r3, #20
   18f5a:	0d1b      	lsrs	r3, r3, #20
   18f5c:	ebc3 0b02 	rsb	fp, r3, r2
   18f60:	4659      	mov	r1, fp
   18f62:	f000 f93f 	bl	191e4 <_sbrk_r>
   18f66:	1c43      	adds	r3, r0, #1
   18f68:	f000 811d 	beq.w	191a6 <_malloc_r+0x54a>
   18f6c:	ebc9 0100 	rsb	r1, r9, r0
   18f70:	4459      	add	r1, fp
   18f72:	f041 0101 	orr.w	r1, r1, #1
   18f76:	f8da 2004 	ldr.w	r2, [sl, #4]
   18f7a:	42af      	cmp	r7, r5
   18f7c:	f643 13a8 	movw	r3, #14760	; 0x39a8
   18f80:	f8c5 9008 	str.w	r9, [r5, #8]
   18f84:	445a      	add	r2, fp
   18f86:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18f8a:	f8c9 1004 	str.w	r1, [r9, #4]
   18f8e:	f8ca 2004 	str.w	r2, [sl, #4]
   18f92:	d019      	beq.n	18fc8 <_malloc_r+0x36c>
   18f94:	f1b8 0f0f 	cmp.w	r8, #15
   18f98:	f240 80dd 	bls.w	19156 <_malloc_r+0x4fa>
   18f9c:	f1a8 010c 	sub.w	r1, r8, #12
   18fa0:	f8d7 c004 	ldr.w	ip, [r7, #4]
   18fa4:	f021 0107 	bic.w	r1, r1, #7
   18fa8:	f04f 0e05 	mov.w	lr, #5
   18fac:	1878      	adds	r0, r7, r1
   18fae:	290f      	cmp	r1, #15
   18fb0:	f00c 0c01 	and.w	ip, ip, #1
   18fb4:	ea41 0c0c 	orr.w	ip, r1, ip
   18fb8:	f8c7 c004 	str.w	ip, [r7, #4]
   18fbc:	f8c0 e004 	str.w	lr, [r0, #4]
   18fc0:	f8c0 e008 	str.w	lr, [r0, #8]
   18fc4:	f200 80e6 	bhi.w	19194 <_malloc_r+0x538>
   18fc8:	f643 13a8 	movw	r3, #14760	; 0x39a8
   18fcc:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
   18fd0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18fd4:	68af      	ldr	r7, [r5, #8]
   18fd6:	428a      	cmp	r2, r1
   18fd8:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
   18fdc:	bf88      	it	hi
   18fde:	62da      	strhi	r2, [r3, #44]	; 0x2c
   18fe0:	f643 13a8 	movw	r3, #14760	; 0x39a8
   18fe4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   18fe8:	428a      	cmp	r2, r1
   18fea:	bf88      	it	hi
   18fec:	631a      	strhi	r2, [r3, #48]	; 0x30
   18fee:	687b      	ldr	r3, [r7, #4]
   18ff0:	f023 0303 	bic.w	r3, r3, #3
   18ff4:	429c      	cmp	r4, r3
   18ff6:	ebc4 0203 	rsb	r2, r4, r3
   18ffa:	bf94      	ite	ls
   18ffc:	2300      	movls	r3, #0
   18ffe:	2301      	movhi	r3, #1
   19000:	2a0f      	cmp	r2, #15
   19002:	bfd8      	it	le
   19004:	f043 0301 	orrle.w	r3, r3, #1
   19008:	b193      	cbz	r3, 19030 <_malloc_r+0x3d4>
   1900a:	4630      	mov	r0, r6
   1900c:	2700      	movs	r7, #0
   1900e:	f000 f8e7 	bl	191e0 <__malloc_unlock>
   19012:	e658      	b.n	18cc6 <_malloc_r+0x6a>
   19014:	18fb      	adds	r3, r7, r3
   19016:	68fa      	ldr	r2, [r7, #12]
   19018:	68b9      	ldr	r1, [r7, #8]
   1901a:	4630      	mov	r0, r6
   1901c:	685c      	ldr	r4, [r3, #4]
   1901e:	3708      	adds	r7, #8
   19020:	60ca      	str	r2, [r1, #12]
   19022:	f044 0401 	orr.w	r4, r4, #1
   19026:	6091      	str	r1, [r2, #8]
   19028:	605c      	str	r4, [r3, #4]
   1902a:	f000 f8d9 	bl	191e0 <__malloc_unlock>
   1902e:	e64a      	b.n	18cc6 <_malloc_r+0x6a>
   19030:	193b      	adds	r3, r7, r4
   19032:	f042 0201 	orr.w	r2, r2, #1
   19036:	f044 0401 	orr.w	r4, r4, #1
   1903a:	4630      	mov	r0, r6
   1903c:	607c      	str	r4, [r7, #4]
   1903e:	3708      	adds	r7, #8
   19040:	605a      	str	r2, [r3, #4]
   19042:	60ab      	str	r3, [r5, #8]
   19044:	f000 f8cc 	bl	191e0 <__malloc_unlock>
   19048:	e63d      	b.n	18cc6 <_malloc_r+0x6a>
   1904a:	ea4f 235c 	mov.w	r3, ip, lsr #9
   1904e:	2b04      	cmp	r3, #4
   19050:	d95c      	bls.n	1910c <_malloc_r+0x4b0>
   19052:	2b14      	cmp	r3, #20
   19054:	d878      	bhi.n	19148 <_malloc_r+0x4ec>
   19056:	335b      	adds	r3, #91	; 0x5b
   19058:	00d8      	lsls	r0, r3, #3
   1905a:	1828      	adds	r0, r5, r0
   1905c:	f240 08fc 	movw	r8, #252	; 0xfc
   19060:	f2c1 0800 	movt	r8, #4096	; 0x1000
   19064:	6881      	ldr	r1, [r0, #8]
   19066:	4281      	cmp	r1, r0
   19068:	d103      	bne.n	19072 <_malloc_r+0x416>
   1906a:	e060      	b.n	1912e <_malloc_r+0x4d2>
   1906c:	6889      	ldr	r1, [r1, #8]
   1906e:	4288      	cmp	r0, r1
   19070:	d004      	beq.n	1907c <_malloc_r+0x420>
   19072:	684b      	ldr	r3, [r1, #4]
   19074:	f023 0303 	bic.w	r3, r3, #3
   19078:	459c      	cmp	ip, r3
   1907a:	d3f7      	bcc.n	1906c <_malloc_r+0x410>
   1907c:	68c8      	ldr	r0, [r1, #12]
   1907e:	686b      	ldr	r3, [r5, #4]
   19080:	60f8      	str	r0, [r7, #12]
   19082:	60b9      	str	r1, [r7, #8]
   19084:	60cf      	str	r7, [r1, #12]
   19086:	6087      	str	r7, [r0, #8]
   19088:	e682      	b.n	18d90 <_malloc_r+0x134>
   1908a:	1939      	adds	r1, r7, r4
   1908c:	f043 0501 	orr.w	r5, r3, #1
   19090:	6141      	str	r1, [r0, #20]
   19092:	f044 0401 	orr.w	r4, r4, #1
   19096:	6101      	str	r1, [r0, #16]
   19098:	4630      	mov	r0, r6
   1909a:	607c      	str	r4, [r7, #4]
   1909c:	3708      	adds	r7, #8
   1909e:	60ca      	str	r2, [r1, #12]
   190a0:	608a      	str	r2, [r1, #8]
   190a2:	604d      	str	r5, [r1, #4]
   190a4:	50cb      	str	r3, [r1, r3]
   190a6:	f000 f89b 	bl	191e0 <__malloc_unlock>
   190aa:	e60c      	b.n	18cc6 <_malloc_r+0x6a>
   190ac:	f108 0801 	add.w	r8, r8, #1
   190b0:	f10c 0c08 	add.w	ip, ip, #8
   190b4:	f018 0f03 	tst.w	r8, #3
   190b8:	f47f ae7e 	bne.w	18db8 <_malloc_r+0x15c>
   190bc:	464b      	mov	r3, r9
   190be:	f01e 0f03 	tst.w	lr, #3
   190c2:	f1a3 0108 	sub.w	r1, r3, #8
   190c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   190ca:	d079      	beq.n	191c0 <_malloc_r+0x564>
   190cc:	681b      	ldr	r3, [r3, #0]
   190ce:	428b      	cmp	r3, r1
   190d0:	d0f5      	beq.n	190be <_malloc_r+0x462>
   190d2:	686b      	ldr	r3, [r5, #4]
   190d4:	007f      	lsls	r7, r7, #1
   190d6:	429f      	cmp	r7, r3
   190d8:	f63f aee0 	bhi.w	18e9c <_malloc_r+0x240>
   190dc:	2f00      	cmp	r7, #0
   190de:	f43f aedd 	beq.w	18e9c <_malloc_r+0x240>
   190e2:	421f      	tst	r7, r3
   190e4:	d071      	beq.n	191ca <_malloc_r+0x56e>
   190e6:	46c6      	mov	lr, r8
   190e8:	e662      	b.n	18db0 <_malloc_r+0x154>
   190ea:	f103 0208 	add.w	r2, r3, #8
   190ee:	695b      	ldr	r3, [r3, #20]
   190f0:	429a      	cmp	r2, r3
   190f2:	bf08      	it	eq
   190f4:	f10e 0e02 	addeq.w	lr, lr, #2
   190f8:	f43f ae18 	beq.w	18d2c <_malloc_r+0xd0>
   190fc:	e5d2      	b.n	18ca4 <_malloc_r+0x48>
   190fe:	4607      	mov	r7, r0
   19100:	1843      	adds	r3, r0, r1
   19102:	68c2      	ldr	r2, [r0, #12]
   19104:	4630      	mov	r0, r6
   19106:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1910a:	e5d4      	b.n	18cb6 <_malloc_r+0x5a>
   1910c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   19110:	3338      	adds	r3, #56	; 0x38
   19112:	00d8      	lsls	r0, r3, #3
   19114:	e7a1      	b.n	1905a <_malloc_r+0x3fe>
   19116:	42af      	cmp	r7, r5
   19118:	f240 02fc 	movw	r2, #252	; 0xfc
   1911c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   19120:	f43f aef3 	beq.w	18f0a <_malloc_r+0x2ae>
   19124:	6897      	ldr	r7, [r2, #8]
   19126:	687b      	ldr	r3, [r7, #4]
   19128:	f023 0303 	bic.w	r3, r3, #3
   1912c:	e762      	b.n	18ff4 <_malloc_r+0x398>
   1912e:	f04f 0901 	mov.w	r9, #1
   19132:	f8d8 c004 	ldr.w	ip, [r8, #4]
   19136:	109b      	asrs	r3, r3, #2
   19138:	4608      	mov	r0, r1
   1913a:	fa09 f303 	lsl.w	r3, r9, r3
   1913e:	ea43 030c 	orr.w	r3, r3, ip
   19142:	f8c8 3004 	str.w	r3, [r8, #4]
   19146:	e79b      	b.n	19080 <_malloc_r+0x424>
   19148:	2b54      	cmp	r3, #84	; 0x54
   1914a:	d80f      	bhi.n	1916c <_malloc_r+0x510>
   1914c:	ea4f 331c 	mov.w	r3, ip, lsr #12
   19150:	336e      	adds	r3, #110	; 0x6e
   19152:	00d8      	lsls	r0, r3, #3
   19154:	e781      	b.n	1905a <_malloc_r+0x3fe>
   19156:	2301      	movs	r3, #1
   19158:	464f      	mov	r7, r9
   1915a:	f8c9 3004 	str.w	r3, [r9, #4]
   1915e:	2300      	movs	r3, #0
   19160:	e748      	b.n	18ff4 <_malloc_r+0x398>
   19162:	68af      	ldr	r7, [r5, #8]
   19164:	687b      	ldr	r3, [r7, #4]
   19166:	f023 0303 	bic.w	r3, r3, #3
   1916a:	e743      	b.n	18ff4 <_malloc_r+0x398>
   1916c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   19170:	d81d      	bhi.n	191ae <_malloc_r+0x552>
   19172:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   19176:	3377      	adds	r3, #119	; 0x77
   19178:	00d8      	lsls	r0, r3, #3
   1917a:	e76e      	b.n	1905a <_malloc_r+0x3fe>
   1917c:	0519      	lsls	r1, r3, #20
   1917e:	0d09      	lsrs	r1, r1, #20
   19180:	2900      	cmp	r1, #0
   19182:	f47f aeca 	bne.w	18f1a <_malloc_r+0x2be>
   19186:	68ab      	ldr	r3, [r5, #8]
   19188:	eb0b 0108 	add.w	r1, fp, r8
   1918c:	f041 0101 	orr.w	r1, r1, #1
   19190:	6059      	str	r1, [r3, #4]
   19192:	e719      	b.n	18fc8 <_malloc_r+0x36c>
   19194:	4630      	mov	r0, r6
   19196:	f107 0108 	add.w	r1, r7, #8
   1919a:	9301      	str	r3, [sp, #4]
   1919c:	f7ff fc96 	bl	18acc <_free_r>
   191a0:	9b01      	ldr	r3, [sp, #4]
   191a2:	685a      	ldr	r2, [r3, #4]
   191a4:	e710      	b.n	18fc8 <_malloc_r+0x36c>
   191a6:	2101      	movs	r1, #1
   191a8:	f04f 0b00 	mov.w	fp, #0
   191ac:	e6e3      	b.n	18f76 <_malloc_r+0x31a>
   191ae:	f240 5154 	movw	r1, #1364	; 0x554
   191b2:	428b      	cmp	r3, r1
   191b4:	d80d      	bhi.n	191d2 <_malloc_r+0x576>
   191b6:	ea4f 439c 	mov.w	r3, ip, lsr #18
   191ba:	337c      	adds	r3, #124	; 0x7c
   191bc:	00d8      	lsls	r0, r3, #3
   191be:	e74c      	b.n	1905a <_malloc_r+0x3fe>
   191c0:	686b      	ldr	r3, [r5, #4]
   191c2:	ea23 0307 	bic.w	r3, r3, r7
   191c6:	606b      	str	r3, [r5, #4]
   191c8:	e784      	b.n	190d4 <_malloc_r+0x478>
   191ca:	007f      	lsls	r7, r7, #1
   191cc:	f108 0804 	add.w	r8, r8, #4
   191d0:	e787      	b.n	190e2 <_malloc_r+0x486>
   191d2:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
   191d6:	237e      	movs	r3, #126	; 0x7e
   191d8:	e73f      	b.n	1905a <_malloc_r+0x3fe>
   191da:	bf00      	nop

000191dc <__malloc_lock>:
   191dc:	4770      	bx	lr
   191de:	bf00      	nop

000191e0 <__malloc_unlock>:
   191e0:	4770      	bx	lr
   191e2:	bf00      	nop

000191e4 <_sbrk_r>:
   191e4:	b538      	push	{r3, r4, r5, lr}
   191e6:	f645 34d4 	movw	r4, #23508	; 0x5bd4
   191ea:	f2c1 0400 	movt	r4, #4096	; 0x1000
   191ee:	4605      	mov	r5, r0
   191f0:	4608      	mov	r0, r1
   191f2:	2300      	movs	r3, #0
   191f4:	6023      	str	r3, [r4, #0]
   191f6:	f7ea fedd 	bl	3fb4 <_sbrk>
   191fa:	1c43      	adds	r3, r0, #1
   191fc:	d000      	beq.n	19200 <_sbrk_r+0x1c>
   191fe:	bd38      	pop	{r3, r4, r5, pc}
   19200:	6823      	ldr	r3, [r4, #0]
   19202:	2b00      	cmp	r3, #0
   19204:	d0fb      	beq.n	191fe <_sbrk_r+0x1a>
   19206:	602b      	str	r3, [r5, #0]
   19208:	bd38      	pop	{r3, r4, r5, pc}
   1920a:	bf00      	nop

0001920c <abDescriptors>:
   1920c:	0112 0200 00ff 4000 fefe 0001 0100 0201     .......@........
   1921c:	0103 0209 0020 0101 8000 0932 0004 0200     .... .....2.....
   1922c:	00ff 0000 0507 0205 0168 0700 8205 6802     ........h......h
   1923c:	0001 0304 0409 030a 0046 0048 0054 0057     ........F.H.T.W.
   1924c:	0314 0043 004e 0043 0020 0075 0043 004f     ..C.N.C. .u.C.O.
   1925c:	0053 0033 0314 0030 0030 0030 0030 003a     S.3...0.0.0.0.:.
   1926c:	0030 0030 003a 0031 0000 0000 504c 3143     0.0.:.1.....LPC1
   1927c:	3537 0038 7453 7261 0074 0000 6154 6b73     758.Start...Task
   1928c:	0041 0000 2749 206d 2061 504c 3143 3537     A...I'm a LPC175
   1929c:	0a38 0000                                   8...

000192a0 <BSP_LCD_ImgTbl>:
   192a0:	5760 0002 a408 0002 e624 0001 2db8 0002     `W......$....-..
   192b0:	0000 0000                                   ....

000192b4 <ImgNXP_LogoData>:
   192b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   192c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   192d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   192e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   192f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19304:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19314:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19324:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19334:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19344:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19354:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19364:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19384:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   193f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19404:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19414:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19424:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19434:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19444:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19454:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19464:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19474:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19494:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   194f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19524:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19534:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19544:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19554:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19564:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19574:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19584:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19594:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   195f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19664:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   196f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19704:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19714:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19764:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19784:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19794:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   197f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19804:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19814:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19824:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19834:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19844:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19854:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19864:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19874:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   198f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19904:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19914:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19924:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19934:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19944:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19954:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19964:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19974:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19984:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19994:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   199f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19a94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19aa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ab4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ac4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ad4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ae4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19af4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19b94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ba4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19bb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19bc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19bd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19be4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19bf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19c94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ca4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19cb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19cc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19cd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ce4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19cf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19d94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19da4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19db4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19dc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19dd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19de4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19df4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19e94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19eb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ed4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ef4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19f94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19fa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19fb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19fc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19fd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19fe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   19ff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a004:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a014:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a024:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a034:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a044:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a054:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a064:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a074:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a084:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a094:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a0f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a104:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a114:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a124:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a164:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a174:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a184:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a194:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a1f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a204:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a214:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a224:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a234:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a254:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a274:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a284:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a2f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a304:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a314:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a324:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a334:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a344:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a354:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a364:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a384:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a3f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a404:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a414:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a424:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a434:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a444:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a454:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a464:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a474:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a494:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a4f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a524:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a534:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a544:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a554:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a564:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a574:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a584:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a594:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a5f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a664:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a6f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a704:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a714:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a764:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a784:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a794:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a7a4:	ffff ffff ffff ffff ffff fe8e fd00 fd60     ..............`.
   1a7b4:	fd60 fd60 fd60 fd60 fd60 fd60 fd40 fd40     `.`.`.`.`.`.@.@.
   1a7c4:	ff58 ffff ffff ffff ffff ffff ffff ffff     X...............
   1a7d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a7e4:	ffff bca4 7b44 8ba4 8ba4 8ba4 8ba4 8ba4     ....D{..........
   1a7f4:	8ba4 8ba4 8b82 6c6e 3d3b 6ddb ffff ffff     ......nl;=.m....
   1a804:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a814:	ffff ffff efbf 65bb 3d5f 6465 6443 6444     .......e_=edCdDd
   1a824:	6443 6443 6443 6443 6443 6444 6424 9da0     CdCdCdCdCdDd$d..
   1a834:	c680 be60 be60 be60 be60 be60 be60 be60     ..`.`.`.`.`.`.`.
   1a844:	be60 be60 be60 be60 be60 be60 c660 c660     `.`.`.`.`.`.`.`.
   1a854:	c683 cec8 e731 f7bb ffdd ffff ffff ffff     ....1...........
   1a864:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a874:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a8a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a8b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a8c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a8d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a8e4:	ffff ffff feaf fd40 fd80 fd80 fd80 fd80     ......@.........
   1a8f4:	fd80 fd80 fd80 fd80 fd80 fd40 ffdd ffff     ..........@.....
   1a904:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a914:	ffff ffff ffff ffff ffff ffff fdc2 93e4     ................
   1a924:	8be6 9406 9406 9406 9406 9406 9406 93c4     ................
   1a934:	74af 559c 453a c71e ffff ffff ffff ffff     .t.U:E..........
   1a944:	ffff ffff ffff ffff ffff ffff ffff a69d     ................
   1a954:	453a 55bf 6ca6 7485 74a5 74a5 74a5 74a5     :E.U.l.t.t.t.t.t
   1a964:	74a5 74a5 6c66 8504 cec0 c680 c680 c680     .t.tfl..........
   1a974:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1a984:	c680 c680 c680 c680 c680 c680 c680 be60     ..............`.
   1a994:	be40 c682 e752 ffdd ffff ffff ffff ffff     @...R...........
   1a9a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a9b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a9c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a9d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a9e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1a9f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aa04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aa14:	ffff ffff ffff ffff ffff ffff ffff fed0     ................
   1aa24:	fd40 fda0 fda0 fda0 fda0 fda0 fda0 fda0     @...............
   1aa34:	fda0 fda0 fd60 fdc7 ffde ffff ffff ffff     ....`...........
   1aa44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aa54:	ffff ffff ffff fdc3 d501 8be7 9406 9406     ................
   1aa64:	9406 9406 9406 9406 9be4 74b0 559c 557b     ...........t.U{U
   1aa74:	65bb efbf ffff ffff ffff ffff ffff ffff     .e..............
   1aa84:	ffff ffff ffff efbf 3d1a 5d9b 55bf 74a7     .........=.].U.t
   1aa94:	74a5 74a6 74a6 74a6 74a6 74a6 74a6 6467     .t.t.t.t.t.t.tgd
   1aaa4:	c680 cea0 c680 c680 c680 c680 c680 c680     ................
   1aab4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1aac4:	c680 c680 c680 c680 c680 c680 c680 be60     ..............`.
   1aad4:	cea7 f799 ffff ffff ffff ffff ffff ffff     ................
   1aae4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aaf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab54:	ffff ffff ffff ffff fed0 fd40 fda0 fda0     ..........@.....
   1ab64:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1ab74:	fd60 fe2c ffff ffff ffff ffff ffff ffff     `.,.............
   1ab84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ab94:	fdc3 fda0 ac64 8bc7 9406 9406 9406 9406     ....d...........
   1aba4:	9406 9be4 74b0 559c 5d9b 455a a69d ffff     .....t.U.]ZE....
   1abb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1abc4:	6dbb 4d5b 5d9b 55bf 74a6 74a5 74a6 74a6     .m[M.].U.t.t.t.t
   1abd4:	74a6 74a6 74a6 6447 9d83 d6e0 c680 c680     .t.t.tGd........
   1abe4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1abf4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ac04:	c680 c680 c680 c680 c680 c660 c682 f7db     ..........`.....
   1ac14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ac94:	ffff fed0 fd40 fda0 fda0 fda0 fda0 fda0     ....@...........
   1aca4:	fda0 fda0 fda0 fda0 fda0 fda0 fd40 fe8e     ............@...
   1acb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1acc4:	ffff ffff ffff ffff ffff fda3 fda0 ed81     ................
   1acd4:	8c06 9406 9406 9406 9406 9406 9be4 74b0     ...............t
   1ace4:	559c 5d9b 5d7b 453a d77e ffff ffff ffff     .U.]{]:E~.......
   1acf4:	ffff ffff ffff ffff b6dd 453a 5d9b 5d9b     ..........:E.].]
   1ad04:	55bf 74a6 74a5 74a6 74a6 74a6 74a6 6c86     .U.t.t.t.t.t.t.l
   1ad14:	74a5 d6e0 c680 c680 c680 c680 c680 c680     .t..............
   1ad24:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ad34:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ad44:	c680 c680 c680 c660 cea6 ffff ffff ffff     ......`.........
   1ad54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ad64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ad74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ad84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ad94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ada4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1adb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1adc4:	ffff ffff ffff ffff ffff ffff fed0 fd40     ..............@.
   1add4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1ade4:	fda0 fda0 fda0 fda0 fd20 fed1 ffff ffff     ........ .......
   1adf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ae04:	ffff ffff fda3 fd80 fde0 c4c3 83c7 9406     ................
   1ae14:	9406 9406 9406 9be4 74b0 559c 5d9b 5d9b     .........t.U.].]
   1ae24:	4d5b 6ddb ffff ffff ffff ffff ffff ffff     [M.m............
   1ae34:	f7df 557b 557b 5d9b 5d9b 55bf 74a6 74a5     ..{U{U.].].U.t.t
   1ae44:	74a6 74a6 74a6 74a6 6c66 b621 cea0 c680     .t.t.t.tfl!.....
   1ae54:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ae64:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ae74:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1ae84:	c680 b640 ef98 ffff ffff ffff ffff ffff     ..@.............
   1ae94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aeb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aed4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aef4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1af04:	ffff ffff ffff fed0 fd40 fda0 fda0 fda0     ........@.......
   1af14:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1af24:	fda0 fda0 fd20 ff36 ffff ffff ffff ffff     .... .6.........
   1af34:	ffff ffff ffff ffff ffff ffff ffff fda3     ................
   1af44:	fd80 fda0 fde0 8be6 93e6 9406 9406 9406     ................
   1af54:	9be4 74b0 559c 5d9b 5d9b 5d9b 3d1a befd     ...t.U.].].].=..
   1af64:	ffff ffff ffff ffff ffff 965c 4d5b 5d9b     ..........\.[M.]
   1af74:	5d9b 5d9b 55bf 74a6 74a5 74a6 74a6 74a6     .].].U.t.t.t.t.t
   1af84:	6c66 8d44 cec0 c680 c680 c680 c680 c680     flD.............
   1af94:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1afa4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1afb4:	c680 c680 c680 c680 c680 c680 c680 cea5     ................
   1afc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1afd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1afe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1aff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b004:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b014:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b024:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b034:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b044:	fed0 fd40 fda0 fda0 fda0 fda0 fda0 fda0     ..@.............
   1b054:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fd80     ................
   1b064:	fd62 ff7a ffff ffff ffff ffff ffff ffff     b.z.............
   1b074:	ffff ffff ffff ffff fda3 fd80 fda0 fdc0     ................
   1b084:	e561 7b87 9406 9406 9406 9be4 74b0 559c     a..{.........t.U
   1b094:	5d9b 5d9b 5d9b 557b 4d5a ffff ffff ffff     .].].]{UZM......
   1b0a4:	ffff df7e 453a 557b 5d9b 5d9b 5d9b 55bf     ..~.:E{U.].].].U
   1b0b4:	74a6 74a5 74a6 74a6 74a6 7486 be61 cea0     .t.t.t.t.t.ta...
   1b0c4:	c680 c680 c680 be60 be60 be60 be60 be60     ......`.`.`.`.`.
   1b0d4:	be60 be60 be60 be60 be60 be60 be60 be60     `.`.`.`.`.`.`.`.
   1b0e4:	c660 c680 c680 c680 c680 c680 c680 c680     `...............
   1b0f4:	c680 c680 c680 c680 be40 ffff ffff ffff     ........@.......
   1b104:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b114:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b124:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b164:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b174:	ffff ffff ffff ffff ffff fed0 fd40 fda0     ............@...
   1b184:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b194:	fda0 fda0 fda0 fda0 fda0 fd80 fda5 ffbd     ................
   1b1a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b1b4:	ffff fda3 fd80 fda0 fda0 fdc0 b484 83c7     ................
   1b1c4:	9406 9406 9be4 74b0 559c 5d9b 5d9b 5d9b     .......t.U.].].]
   1b1d4:	5d9b 4d5b 861c ffff ffff ffff 65bb 4d7b     .][M.........e{M
   1b1e4:	5d9b 5d9b 5d9b 5d9b 55bf 74a6 74a5 74a6     .].].].].U.t.t.t
   1b1f4:	74a6 6c66 9d83 d6c0 c680 c680 c680 cec7     .tfl............
   1b204:	df2f df0e df0e df0e df0e df0e df0e df0e     /...............
   1b214:	df0e df0e df0e df0e df0f d6ec c663 be60     ............c.`.
   1b224:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1b234:	c680 be60 f7dc ffff ffff ffff ffff ffff     ..`.............
   1b244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b254:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b274:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b284:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b2a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b2b4:	ffff ffff fed0 fd40 fda0 fda0 fda0 fda0     ......@.........
   1b2c4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b2d4:	fda0 fda0 fda0 fd60 fde8 ffff ffff ffff     ......`.........
   1b2e4:	ffff ffff ffff ffff ffff ffff fda3 fd80     ................
   1b2f4:	fda0 fda0 fda0 ed80 9406 8be6 9406 9be4     ................
   1b304:	74b0 559c 5d9b 5d9b 5d9b 5d9b 559b 4d5b     .t.U.].].].].U[M
   1b314:	c71e ffff aebd 3d1a 5d9b 5d9b 5d9b 5d9b     .......=.].].].]
   1b324:	5d9b 55bf 74a6 74a5 74a6 6c86 7486 df00     .].U.t.t.t.l.t..
   1b334:	c680 c680 c680 c660 df30 ffff ffff ffff     ......`.0.......
   1b344:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b354:	ffff ffff ffff ffff f799 c661 c680 c680     ..........a.....
   1b364:	c680 c680 c680 c680 c680 c680 be60 ef75     ............`.u.
   1b374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b384:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b3a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b3b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b3c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b3d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b3e4:	ffff ffff ffff ffff ffff ffff ffff fed0     ................
   1b3f4:	fd40 fda0 fda0 fda0 fda0 fda0 fda0 fda0     @...............
   1b404:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b414:	fda0 fd40 fe2a ffff ffff ffff ffff ffff     ..@.*...........
   1b424:	ffff ffff ffff fda3 fd80 fda0 fda0 fda0     ................
   1b434:	fdc0 c4c3 8be7 9406 9be4 74b0 559c 5d9b     ...........t.U.]
   1b444:	5d9b 5d9b 5d9b 5d9b 4d5b 7e1c ef9f 453a     .].].].][M.~..:E
   1b454:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 55bf 74a6     .].].].].].].U.t
   1b464:	74a5 74a6 6447 be41 cea0 c680 c680 c680     .t.tGdA.........
   1b474:	c660 df0e ffff ffff ffff ffff ffff ffff     `...............
   1b484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b494:	ffff ffff df0e c660 c680 c680 c680 c680     ......`.........
   1b4a4:	c680 c680 c680 c660 e752 ffff ffff ffff     ......`.R.......
   1b4b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b4c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b4d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b4e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b4f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b524:	ffff ffff ffff ffff fed0 fd40 fda0 fda0     ..........@.....
   1b534:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b544:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fd20     .............. .
   1b554:	feaf ffff ffff ffff ffff ffff ffff ffff     ................
   1b564:	fda3 fd80 fda0 fda0 fda0 fda0 fda0 9406     ................
   1b574:	9407 9be4 74b0 559c 5d9b 5d9b 5d9b 5d9b     .....t.U.].].].]
   1b584:	5d9b 5d9b 557b 65bb 557b 5d9b 5d9b 5d9b     .].]{U.e{U.].].]
   1b594:	5d9b 5d9b 5d9b 55bf 74a6 74a5 6467 9543     .].].].U.t.tgdC.
   1b5a4:	cec0 c680 c680 c680 c680 c660 df0e ffff     ..........`.....
   1b5b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b5c4:	ffff ffff ffff ffff ffff ffff ffff ef97     ................
   1b5d4:	c660 c680 c680 c680 c680 c680 c680 c680     `...............
   1b5e4:	c660 e732 ffff ffff ffff ffff ffff ffff     `.2.............
   1b5f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b664:	ffff fed0 fd40 fda0 fda0 fda0 fda0 fda0     ....@...........
   1b674:	fda0 fda0 fda0 fd80 fda0 fda0 fda0 fda0     ................
   1b684:	fda0 fda0 fda0 fda0 fda0 fd40 fed2 ffff     ..........@.....
   1b694:	ffff ffff ffff ffff ffff fda3 fd80 fda0     ................
   1b6a4:	fda0 fda0 fda0 fdc0 ed61 7bc7 9be4 74b0     ........a..{...t
   1b6b4:	559c 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .U.].].].].].].]
   1b6c4:	557b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     {U.].].].].].].]
   1b6d4:	55bf 74a6 6c85 74a6 c680 c6a0 c680 c680     .U.t.l.t........
   1b6e4:	c680 c680 c660 df0e ffff ffff ffff ffff     ....`...........
   1b6f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b704:	ffff ffff ffff ffff ef97 c660 c680 c680     ..........`.....
   1b714:	c680 c680 c680 c680 c680 c660 e732 ffff     ..........`.2...
   1b724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b764:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b784:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b794:	ffff ffff ffff ffff ffff ffff fed0 fd40     ..............@.
   1b7a4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b7b4:	fda2 fd80 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b7c4:	fda0 fda0 fd80 fd60 ff35 ffff ffff ffff     ......`.5.......
   1b7d4:	ffff ffff fda3 fd80 fda0 fda0 fda0 fda0     ................
   1b7e4:	fd80 fe00 ac64 8ba5 74b0 559c 5d9b 5d9b     ....d....t.U.].]
   1b7f4:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1b804:	5d9b 5d9b 5d9b 5d9b 5d9b 55bf 74a7 6c65     .].].].].].U.tel
   1b814:	a5c2 cec0 c680 c680 c680 c680 c680 c660     ..............`.
   1b824:	df0e ffff ffff ffff ffff ffff ffff ffff     ................
   1b834:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b844:	ffff ef97 c660 c680 c680 c680 c680 c680     ....`...........
   1b854:	c680 c680 c660 e732 ffff ffff ffff ffff     ....`.2.........
   1b864:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b874:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b8a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b8b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b8c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b8d4:	ffff ffff ffff fed0 fd40 fda0 fda0 fda0     ........@.......
   1b8e4:	fda0 fda0 fda0 fda0 fd80 fe4b ff14 fd20     ..........K... .
   1b8f4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1b904:	fd80 fd83 ff9b ffff ffff ffff ffff fda3     ................
   1b914:	fd80 fda0 fda0 fda0 fda0 fda0 fda0 fdc0     ................
   1b924:	93c4 74b0 559c 5d9b 5d9b 5d9b 5d9b 5d9b     ...t.U.].].].].]
   1b934:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1b944:	5d9b 5d9b 55bf 6c87 7ce4 cea0 c6a0 c680     .].].U.l.|......
   1b954:	c680 c680 c680 c680 c660 df0e ffff ffff     ........`.......
   1b964:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b974:	ffff ffff ffff ffff ffff ffff ef76 c660     ............v.`.
   1b984:	c680 c680 c680 c680 c680 c680 c680 c660     ..............`.
   1b994:	e732 ffff ffff ffff ffff ffff ffff ffff     2...............
   1b9a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b9b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b9c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b9d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b9e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1b9f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ba04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ba14:	fed0 fd40 fda0 fda0 fda0 fda0 fda0 fda0     ..@.............
   1ba24:	fda0 fd80 fe07 ffff fe90 fd20 fda0 fda0     .......... .....
   1ba34:	fda0 fda0 fda0 fda0 fda0 fda0 fd60 fda4     ............`...
   1ba44:	ffff ffff ffff ffff fda3 fd80 fda0 fda0     ................
   1ba54:	fda0 fda0 fda0 fda0 fdc0 d4e0 6c70 559c     ............pl.U
   1ba64:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1ba74:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 55bf     .].].].].].].].U
   1ba84:	6447 be20 cea0 c680 c680 c680 c680 c680     Gd .............
   1ba94:	c680 c660 df0e ffff ffff ffff ffff ffff     ..`.............
   1baa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bab4:	ffff ffff ffff df2e c660 c680 c680 c680     ........`.......
   1bac4:	c680 c680 c680 c680 c660 e732 ffff ffff     ........`.2.....
   1bad4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bae4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1baf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bb04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bb14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bb24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bb34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bb44:	ffff ffff ffff ffff ffff fed0 fd40 fda0     ............@...
   1bb54:	fda0 fda0 fda0 fda0 fda0 fda0 fd80 fe07     ................
   1bb64:	ffde ffff fe2b fd40 fda0 fda0 fda0 fda0     ....+.@.........
   1bb74:	fda0 fda0 fda0 fda0 fd60 fdc5 ffff ffff     ........`.......
   1bb84:	ffff fda3 fd80 fda0 fda0 fda0 fda0 fda0     ................
   1bb94:	fda0 fda0 fd80 950e 4d9d 5d9b 5d9b 5d9b     .........M.].].]
   1bba4:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1bbb4:	5d9b 5d9b 5d9b 5d9b 4d7f 9565 d6c0 c680     .].].].].Me.....
   1bbc4:	c680 c680 c680 c680 c680 c680 c660 df0e     ............`...
   1bbd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bbe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bbf4:	cea7 c680 c680 c680 c680 c680 c680 c680     ................
   1bc04:	c680 c660 df32 ffff ffff ffff ffff ffff     ..`.2...........
   1bc14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bc84:	ffff ffff fed0 fd40 fda0 fda0 fda0 fda0     ......@.........
   1bc94:	fda0 fda0 fda0 fd80 fe07 ffde ffff ffff     ................
   1bca4:	fe09 fd60 fda0 fda0 fda0 fda0 fda0 fda0     ..`.............
   1bcb4:	fda0 fda0 fd60 fe08 ffff ffff fda3 fd80     ....`...........
   1bcc4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1bcd4:	9d4e 4d7d 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     N.}M.].].].].].]
   1bce4:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1bcf4:	5d9b 4d7f a5c4 d6c0 c680 c680 c680 c680     .].M............
   1bd04:	c680 c680 c680 c660 df2e ffff ffdd ffdd     ......`.........
   1bd14:	ffdd ffdd ffdd ffdd ffdd ffdd ffdd ffdd     ................
   1bd24:	ffdd ffdd fffe f7dc d6c9 be60 c680 c680     ..........`.....
   1bd34:	c680 c680 c680 c680 c680 c680 be60 ef76     ............`.v.
   1bd44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bd54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bd64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bd74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bd84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bd94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bda4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bdb4:	ffff ffff ffff ffff ffff ffff ffff fed0     ................
   1bdc4:	fd40 fda0 fda0 fda0 fda0 fda0 fda0 fda0     @...............
   1bdd4:	fd80 fe07 ffde ffff ffff ff9b fda4 fd80     ................
   1bde4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1bdf4:	fd60 fe8f ffff fda3 fd80 fda0 fda0 fda0     `...............
   1be04:	fda0 fda0 fda0 fda0 dd00 6c70 559c 5d9b     ..........pl.U.]
   1be14:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1be24:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 55bf 6467     .].].].].].].Ugd
   1be34:	c660 cea0 c680 c680 c680 c680 c680 c680     `...............
   1be44:	c680 c682 cea5 cea4 cea4 cea4 cea4 cea4     ................
   1be54:	cea4 cea4 cea4 cea4 cea4 cea4 cea4 cea5     ................
   1be64:	c660 c660 c680 c680 c680 c680 c680 c680     `.`.............
   1be74:	c680 c680 c680 be40 f7dc ffff ffff ffff     ......@.........
   1be84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1be94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1beb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bed4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bef4:	ffff ffff ffff ffff fed0 fd40 fda0 fda0     ..........@.....
   1bf04:	fda0 fda0 fda0 fda0 fda0 fd80 fe07 ffde     ................
   1bf14:	ffff ffff ffff ff9b fd40 fd80 fda0 fda0     ........@.......
   1bf24:	fda0 fda0 fda0 fda0 fda0 fd80 fd60 ff79     ............`.y.
   1bf34:	fde6 fd80 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1bf44:	fdc0 9bc4 74b0 559c 5d9b 5d9b 5d9b 5d9b     .....t.U.].].].]
   1bf54:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1bf64:	5d9b 5d9b 5d9b 55bf 6c87 8504 cec0 c680     .].].].U.l......
   1bf74:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1bf84:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1bf94:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1bfa4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1bfb4:	be40 ffff ffff ffff ffff ffff ffff ffff     @...............
   1bfc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bfd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bfe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1bff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c004:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c014:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c024:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c034:	ffff fed0 fd40 fda0 fda0 fda0 fda0 fda0     ....@...........
   1c044:	fda0 fda0 fd80 fe07 ffde ffff ffff ffff     ................
   1c054:	ffff ff57 fd00 fda0 fda0 fda0 fda0 fda0     ..W.............
   1c064:	fda0 fda0 fda0 fd80 fda2 fdc3 fd80 fda0     ................
   1c074:	fda0 fda0 fda0 fd80 fde0 bca4 8ba5 74b0     ...............t
   1c084:	559c 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .U.].].].].].].]
   1c094:	5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b     .].].].].].].].]
   1c0a4:	55bf 6ca7 6c65 ade2 cec0 c680 c680 c680     .U.lel..........
   1c0b4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c0c4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c0d4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c0e4:	c680 c680 c680 c680 c680 cea6 ffff ffff     ................
   1c0f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c104:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c114:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c124:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c164:	ffff ffff ffff ffff ffff ffff fed0 fd40     ..............@.
   1c174:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fd80     ................
   1c184:	fe07 ffde ffff ffff ffff ffff ffff ff15     ................
   1c194:	fd40 fda0 fda0 fda0 fda0 fda0 fda0 fda0     @...............
   1c1a4:	fda0 fda0 fd80 fda0 fda0 fda0 fda0 fda0     ................
   1c1b4:	fdc0 f580 7ba8 9be4 74b0 559c 5d9b 5d9b     .....{...t.U.].]
   1c1c4:	5d9b 5d9b 5d9b 5d9b 5d9b 557b 5d9b 5d9b     .].].].].]{U.].]
   1c1d4:	5d9b 5d9b 5d9b 5d9b 5d9b 55bf 74a6 6c85     .].].].].].U.t.l
   1c1e4:	7cc5 c680 c6a0 c680 c680 c680 c680 c680     .|..............
   1c1f4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c204:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c214:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c224:	c680 b640 f7bb ffff ffff ffff ffff ffff     ..@.............
   1c234:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c254:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c274:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c284:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c2a4:	ffff ffff ffff fed0 fd40 fda0 fda0 fda0     ........@.......
   1c2b4:	fda0 fda0 fda0 fda0 fd80 fe07 ffdd ffff     ................
   1c2c4:	ffff ffff ffff ffff ffff fe8f fd60 fda0     ............`...
   1c2d4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1c2e4:	fda0 fda0 fda0 fda0 fda0 fdc0 9c25 8c06     ............%...
   1c2f4:	9be4 74b0 559c 5d9b 5d9b 5d9b 5d9b 5d9b     ...t.U.].].].].]
   1c304:	5d9b 557b 5d9b 559b 5d9b 5d9b 5d9b 5d9b     .]{U.].U.].].].]
   1c314:	5d9b 5d9b 55bf 74a6 74a5 6447 9d83 cec0     .].].U.t.tGd....
   1c324:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c334:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c344:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c354:	c680 c680 c680 c680 c680 be60 d6c9 ffff     ..........`.....
   1c364:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c384:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c3a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c3b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c3c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c3d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c3e4:	fed0 fd40 fda0 fda0 fda0 fda0 fda0 fda0     ..@.............
   1c3f4:	fda0 fd80 fe07 ffdd ffff ffff ffff ffff     ................
   1c404:	ffff ffff ffff fe2b fd40 fda0 fda0 fda0     ......+.@.......
   1c414:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1c424:	fda0 fdc0 d502 8be7 9406 9be4 74b0 559c     .............t.U
   1c434:	5d9b 5d9b 5d9b 5d9b 5d9b 4d5b 6ddc d75e     .].].].].][M.m^.
   1c444:	453a 5d9b 5d9b 5d9b 5d9b 5d9b 5d9b 55bf     :E.].].].].].].U
   1c454:	74a6 74a5 74a6 6446 c680 cea0 c680 c680     .t.t.tFd........
   1c464:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c474:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c484:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c494:	c680 c660 c683 f7dc ffff ffff ffff ffff     ..`.............
   1c4a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c4b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c4c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c4d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c4e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c4f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c514:	ffff ffff ffff ffff ffff fed0 fd40 fda0     ............@...
   1c524:	fda0 fda0 fda0 fda0 fda0 fda0 fd80 fe07     ................
   1c534:	ffdd ffff ffff ffff ffff ffff ffff ffff     ................
   1c544:	ffff fd82 fd60 fda0 fda0 fda0 fda0 fda0     ....`...........
   1c554:	fda0 fda0 fda0 fda0 fda0 fda0 f5a0 9c25     ..............%.
   1c564:	8be7 9406 9be4 74b0 559c 5d9b 5d9b 5d9b     .......t.U.].].]
   1c574:	5d9b 5d9b 4d5a b6dd ffff 965c 453a 5d9b     .].]ZM....\.:E.]
   1c584:	5d9b 5d9b 5d9b 5d9b 55bf 74a6 74a5 74a6     .].].].].U.t.t.t
   1c594:	6c86 74c5 df00 c680 c680 c680 c680 c680     .l.t............
   1c5a4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c5b4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c5c4:	c680 c680 c680 c680 c680 be60 c660 f7bb     ..........`.`...
   1c5d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c5e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c5f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c654:	ffff ffff fed0 fd40 fda0 fda0 fda0 fda0     ......@.........
   1c664:	fda0 fda0 fda0 fd80 fe07 ffdd ffff ffff     ................
   1c674:	ffff ffff ffff ffff ffff ffff ffde fd60     ..............`.
   1c684:	fd80 fda0 fda0 fda0 fda0 fda0 fda0 fda0     ................
   1c694:	fda0 fda0 fdc0 c4a3 83c7 9406 9406 9be4     ................
   1c6a4:	74b0 559c 5d9b 5d9b 5d9b 5d9b 4d5b 75fc     .t.U.].].].][M.u
   1c6b4:	ffff ffff ffff 557b 557b 5d9b 5d9b 5d9b     ......{U{U.].].]
   1c6c4:	5d9b 55bf 74a6 74a5 74a6 74a6 6c66 a5c2     .].U.t.t.t.tfl..
   1c6d4:	d6c0 c680 c680 c680 c680 c680 c680 c680     ................
   1c6e4:	c680 c680 c680 c680 c680 c680 c680 c680     ................
   1c6f4:	c680 c680 c680 c680 c680 c680 c660 c660     ............`.`.
   1c704:	be60 be40 deed ffff ffff ffff ffff ffff     `.@.............
   1c714:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c764:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c784:	ffff ffff ffff ffff ffff ffff ffff fed0     ................
   1c794:	fd40 fda0 fda0 fda0 fda0 fda0 fda0 fda0     @...............
   1c7a4:	fd80 fe07 ffdd ffff ffff ffff ffff ffff     ................
   1c7b4:	ffff ffff ffff ffff ff7a fd60 fd80 fda0     ........z.`.....
   1c7c4:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 ed81     ................
   1c7d4:	7ba7 9406 9406 9406 9be4 74b0 559c 5d9b     .{.........t.U.]
   1c7e4:	5d9b 5d9b 5d9b 455a ef9f ffff ffff ffff     .].].]ZE........
   1c7f4:	d75e 453a 5d9b 5d9b 5d9b 5d9b 55bf 74a6     ^.:E.].].].].U.t
   1c804:	74a5 74a6 74a6 74a6 74a5 c680 cea0 c680     .t.t.t.t.t......
   1c814:	c680 cea6 df0c d6eb d6eb d6eb d6eb d6eb     ................
   1c824:	d6eb d6eb d6eb d6eb d6eb d6eb d6eb d6eb     ................
   1c834:	d6eb d6eb d6eb d70c e731 ef97 ffff ffff     ........1.......
   1c844:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c854:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c864:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c874:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c8a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c8b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c8c4:	ffff ffff ffff ffff fed0 fd40 fda0 fda0     ..........@.....
   1c8d4:	fda0 fda0 fda0 fda0 fda0 fd80 fe07 ffdd     ................
   1c8e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c8f4:	ffff ffff ff36 fd40 fda0 fda0 fda0 fda0     ....6.@.........
   1c904:	fda0 fda0 fda0 fde0 9c06 8be7 9406 9406     ................
   1c914:	9406 9be4 74b0 559c 5d9b 5d9b 5d9b 3d1a     .....t.U.].].].=
   1c924:	aebd ffff ffff ffff ffff ffff 863c 4d5b     ............<.[M
   1c934:	5d9b 5d9b 5d9b 55bf 74a6 74a5 74a6 74a6     .].].].U.t.t.t.t
   1c944:	74a6 6c66 9563 cea0 c680 c660 e730 ffff     .tflc.....`.0...
   1c954:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c964:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c974:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c984:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c994:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c9f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ca04:	ffff fed0 fd40 fda0 fda0 fda0 fda0 fda0     ....@...........
   1ca14:	fda0 fda0 fd80 fe07 ffdd ffff ffff ffff     ................
   1ca24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ca34:	fed3 fd20 fda0 fda0 fda0 fda0 fda0 fde0     .. .............
   1ca44:	cce2 83c7 9406 9406 9406 9406 9be4 74b0     ...............t
   1ca54:	559c 5d9b 5d9b 557b 5d9b ffff ffff ffff     .U.].]{U.]......
   1ca64:	ffff ffff ffff e79f 557b 557b 5d9b 5d9b     ........{U{U.].]
   1ca74:	55bf 74a6 74a5 74a6 74a6 74a6 74a6 6c86     .U.t.t.t.t.t.t.l
   1ca84:	be41 cea0 c660 df0e ffff ffff ffff e71c     A...`...........
   1ca94:	9cf3 ffdf ffff ffff ffff ffff ffff ffff     ................
   1caa4:	ffff ffff ffff ffff ffff ffff ffff e73c     ..............<.
   1cab4:	f7be ffff ffff ffff ffff ffff f7be e71c     ................
   1cac4:	ffff ffff dedb ffff ffff ffff ffff ffff     ................
   1cad4:	ffff ffff ffff ffff ffff ffff ffff e71c     ................
   1cae4:	ffff ffff ffff ffff defb ffdf ffff ffff     ................
   1caf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cb04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cb14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cb24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cb34:	ffff ffff ffff ffff ffff ffff fed0 fd40     ..............@.
   1cb44:	fda0 fda0 fda0 fda0 fda0 fda0 fda0 fd80     ................
   1cb54:	fe07 ffdd ffff ffff ffff ffff ffff ffff     ................
   1cb64:	ffff ffff ffff ffff ffff ffff fe2b fd40     ............+.@.
   1cb74:	fda0 fda0 fda0 fda0 f580 9406 9406 9406     ................
   1cb84:	9406 9406 9406 9be4 74b0 559c 5d9b 5d9b     .........t.U.].]
   1cb94:	3d1a d75e ffff ffff ffff ffff ffff ffff     .=^.............
   1cba4:	ffff 9e7d 4d3a 5d9b 5d9b 55bf 74a6 74a5     ..}.:M.].].U.t.t
   1cbb4:	74a6 74a6 74a6 74a6 6c86 7ce5 d6e0 c660     .t.t.t.t.l.|..`.
   1cbc4:	df0e ffff ffff ffff 9cd3 bdd7 ffff ffff     ................
   1cbd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cbe4:	ffff ffff ffff f7be 9cf3 defb ffff ffff     ................
   1cbf4:	ffff ffff ffff e73c 8c71 f79e ffff 738e     ......<.q......s
   1cc04:	f7be ffff ffff ffff ffff ffff ffff ffff     ................
   1cc14:	9cf3 5aeb 4a49 ce59 a514 f7be ffff d6ba     ...ZIJY.........
   1cc24:	8c71 8c71 f79e 5acb ffff ffff ffff ffff     q.q....Z........
   1cc34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc74:	ffff ffff ffff fed0 fd40 fda0 fda0 fda0     ........@.......
   1cc84:	fda0 fda0 fda0 fda0 fd80 fe07 ffdd ffff     ................
   1cc94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cca4:	ffff ffff ffff ffff fe08 fd60 fda0 fda0     ..........`.....
   1ccb4:	fdc0 b484 8be7 9406 9406 9406 9406 9406     ................
   1ccc4:	9be4 74b0 559c 5d9b 455a 9e7c ffff ffff     ...t.U.]ZE|.....
   1ccd4:	ffff ffff ffff ffff ffff ffff ffff 5d9b     ...............]
   1cce4:	557b 5d9b 55bf 74a6 74a5 74a6 74a6 74a6     {U.].U.t.t.t.t.t
   1ccf4:	74a6 74a6 5c27 ade2 cea0 df0e ffff ffff     .t.t'\..........
   1cd04:	f7be 8430 ce79 f7be c638 dedb ffff e73c     ..0.y...8.....<.
   1cd14:	ffff ef7d f7be dedb ce59 ef7d ffff d6ba     ..}.....Y.}.....
   1cd24:	ce59 9cd3 ef5d e71c ce79 f79e f7be d69a     Y...]...y.......
   1cd34:	c638 9492 f7be ffff 73ae ce79 ce79 ffff     8........sy.y...
   1cd44:	dedb ffff e71c ffdf ffff ad75 bdf7 f7be     ..........u.....
   1cd54:	4a69 b596 c638 defb ffff ffff 8430 ef7d     iJ..8.......0.}.
   1cd64:	ffdf f7be dedb ce59 e73c ffdf d69a d6ba     ......Y.<.......
   1cd74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cd84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cd94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cda4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cdb4:	fed0 fd40 fda0 fda0 fda0 fda0 fda0 fda0     ..@.............
   1cdc4:	fda0 fd80 fe07 ffdd ffff ffff ffff ffff     ................
   1cdd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cde4:	ffff ffdd fdc5 fd60 fdc0 dd41 8be7 9406     ......`...A.....
   1cdf4:	9406 9406 9406 9406 9406 9be4 74b0 559c     .............t.U
   1ce04:	557b 5d9b e79f ffff ffff ffff ffff ffff     {U.]............
   1ce14:	ffff ffff ffff ffff df7e 3d1a 5d9b 55bf     ........~..=.].U
   1ce24:	74a6 74a5 74a6 74a6 74a6 74a6 74a6 74a6     .t.t.t.t.t.t.t.t
   1ce34:	6c66 c680 df2e ffff ffff ef7d 5aeb c618     fl........}..Z..
   1ce44:	73ae 9cd3 73ae dedb 738e ffff a514 b596     .s...s...s......
   1ce54:	52aa 94b2 9cf3 ad55 8410 94b2 7bcf bdd7     .R....U......{..
   1ce64:	6b6d 73ae 8c51 94b2 94b2 8c51 738e ffff     mk.sQ.....Q..s..
   1ce74:	ffff 6b4d 8c51 8c51 a514 8430 f79e 73ae     ..MkQ.Q...0....s
   1ce84:	ef5d ffff 9cf3 7bef 8c51 d6ba 8410 9cf3     ]......{Q.......
   1ce94:	4a69 ef7d 9cd3 9492 f79e 6b6d b596 630c     iJ}.......mk...c
   1cea4:	ad55 7bef a514 630c 94b2 ffff ffff ffff     U..{...c........
   1ceb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ced4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cee4:	ffff ffff ffff ffff ffff feb0 fd40 fda0     ............@...
   1cef4:	fda0 fda0 fda0 fda0 fda0 fda0 fd80 fe07     ................
   1cf04:	ffdd ffff ffff ffff ffff ffff ffff ffff     ................
   1cf14:	ffff ffff ffff ffff ffff ffff ffff ff9b     ................
   1cf24:	fd61 fdc0 a445 8be7 9406 9406 9406 9406     a...E...........
   1cf34:	9406 9406 9be4 74b0 55bc 453a b6dd ffff     .......t.U:E....
   1cf44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cf54:	ffff ffff 965c 453a 55bf 74a6 74a5 74a6     ....\.:E.U.t.t.t
   1cf64:	74a6 74a6 74a6 74a6 74a6 6c86 8522 ef6d     .t.t.t.t.t.l".m.
   1cf74:	ffff ffff ffff ad75 e73c 528a ffff ad75     ......u.<..R..u.
   1cf84:	c638 7bcf ffff ad75 ad75 ad55 f79e b5b6     8..{..u.u.U.....
   1cf94:	4a49 ffff ffff c618 5acb ce79 d69a d69a     IJ.......Zy.....
   1cfa4:	8430 ffff f7be 9cd3 f7be ffff 7bef ffff     0............{..
   1cfb4:	ffff 31a6 ef7d 5acb bdf7 ffff ffff ad55     ...1}..Z......U.
   1cfc4:	c638 ffff ef7d 9cf3 ffff 6b4d ef7d a514     8...}.....Mk}...
   1cfd4:	9492 f79e 73ae bdf7 ce79 ffff ad75 b5b6     .....s..y...u...
   1cfe4:	d69a 8430 ffff ffff ffff ffff ffff ffff     ..0.............
   1cff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d004:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d014:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d024:	ffff ffff fe8d fce0 fd20 fd20 fd20 fd20     ........ . . . .
   1d034:	fd20 fd20 fd20 fd00 fda4 ffdd ffff ffff      . . ...........
   1d044:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d054:	ffff ffff ffff ffff ffff ffdb bc00 6ae3     ...............j
   1d064:	8342 7b42 7b42 7b42 7b42 7b42 7b42 8320     B.B{B{B{B{B{B{ .
   1d074:	642d 351b 557b ffff ffff ffff ffff ffff     -d.5{U..........
   1d084:	ffff ffff ffff ffff ffff ffff ffff e79f     ................
   1d094:	557a 353f 5403 5c00 5c01 5c01 5c01 5c01     zU?5.T.\.\.\.\.\
   1d0a4:	5c01 5c01 5c01 4bc0 b64c ffff ffff ffff     .\.\.\.KL.......
   1d0b4:	94b2 dedb 738e 8410 632c e71c 4a69 8c51     .....s..,c..iJQ.
   1d0c4:	52aa ad55 9cf3 e73c 9cf3 bdd7 5aeb 7bef     .RU...<......Z.{
   1d0d4:	52aa ce59 5acb 8430 9cf3 9cd3 7bcf 632c     .RY..Z0......{,c
   1d0e4:	528a ffff ffff 528a 632c 630c a514 ffff     .R.....R,c.c....
   1d0f4:	52aa bdf7 ffff ffff 9cf3 bdf7 ffff e73c     .R............<.
   1d104:	8c71 ffff 52aa ef5d 94b2 8410 ef7d 6b4d     q....R].....}.Mk
   1d114:	b596 4a49 9492 632c b5b6 7bcf 2965 ffff     ..IJ..,c...{e)..
   1d124:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d164:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d174:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d184:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d194:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d1f4:	e71c ffdf ffff ffff defb ffff ffff ffff     ................
   1d204:	ffff ffff ffff ffdf e73c ffff ffff ffff     ........<.......
   1d214:	e71c ffff ffff ef5d f79e ffff ffff ffff     ......].........
   1d224:	ffff f7be f79e ffff dedb 9cf3 f79e ffff     ................
   1d234:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d244:	ffff ffff ffff ffff ffff b596 ce59 e71c     ............Y...
   1d254:	ffff ffff e73c ffff ffff ffff ffff ffff     ....<...........
   1d264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d274:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d284:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d2f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d304:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d314:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d324:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d334:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d344:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d354:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d364:	ffff 94b2 b596 ffff ffff ffff ffff ffff     ................
   1d374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d384:	ffff ffff ce79 d6ba ffff ffff ffff ffff     ....y...........
   1d394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d3f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d404:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d414:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d424:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d434:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d444:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d454:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d464:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d474:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d494:	ffff ffff ffff ffff ffff ffff ffdf ffff     ................
   1d4a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d4b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d4c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d4d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d4e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d4f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d524:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d534:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d544:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d554:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d564:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d574:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d584:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d594:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d5f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d664:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d6f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d704:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d714:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d764:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d784:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d794:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d7f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d804:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d814:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d824:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d834:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d844:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d854:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d864:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d874:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d8f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d904:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d914:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d924:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d934:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d944:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d954:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d964:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d974:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d984:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d994:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d9f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1da94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1daa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dab4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dac4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dad4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dae4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1daf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1db94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dba4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dbb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dbc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dbd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dbe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dbf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dc94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dca4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dcb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dcc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dcd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dce4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dcf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dd94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dda4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ddb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ddc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ddd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dde4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ddf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1de94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1deb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ded4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1def4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1df94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dfa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dfb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dfc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dfd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dfe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1dff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e004:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e014:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e024:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e034:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e044:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e054:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e064:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e074:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e084:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e094:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e0f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e104:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e114:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e124:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e164:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e174:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e184:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e194:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e1f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e204:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e214:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e224:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e234:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e254:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e274:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e284:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e2f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e304:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e314:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e324:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e334:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e344:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e354:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e364:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e374:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e384:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e3f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e404:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e414:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e424:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e434:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e444:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e454:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e464:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e474:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e494:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e4f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e504:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e524:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e534:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e544:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e554:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e564:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e574:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e584:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e594:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e5f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e614:	ffff ffff ffff ffff 584e 4c50 676f 006f     ........NXPLogo.

0001e624 <ImgNXP_Logo>:
   1e624:	e61c 0001 009d 0044 92b4 0001               ......D.....

0001e630 <ImgOS_LogoData>:
   1e630:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e640:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e650:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e660:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e680:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e690:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e6f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e700:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e710:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e720:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e740:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e750:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e770:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e780:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e790:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e7f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e800:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e810:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e830:	ffff ff38 ff5a fe93 ff38 fe93 ff5a fe93     ..8.Z...8...Z...
   1e840:	ff5a ff5a ffff ffff ffff ffff ffff ffff     Z.Z.............
   1e850:	ffff ffff ffff ffff ffff ffff ffff ff5a     ..............Z.
   1e860:	ff38 fe93 ff5a ffff ffff ffff ffff ffff     8...Z...........
   1e870:	ffff ffff ffff ffff ffff ce59 bebd 9e1b     ..........Y.....
   1e880:	ae5c 9e1b ae5c ce59 df5e ff5a ffff ffff     \...\.Y.^.Z.....
   1e890:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e8a0:	ffff ffff ffff ffff ffff ffff df5e ce59     ............^.Y.
   1e8b0:	cf1d 9e1b ae5c 9e1b ae5c ce59 df5e ffff     ....\...\.Y.^...
   1e8c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e8d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e8e0:	ffff ffff ffff ffff ffff ce59 df5e ce59     ..........Y.^.Y.
   1e8f0:	df5e ce59 df5e ce59 ffff ffff ffff ffff     ^.Y.^.Y.........
   1e900:	ffff ff5a df5e ce59 df5e ce59 df5e ce59     ..Z.^.Y.^.Y.^.Y.
   1e910:	df5e ff5a ffff ffff ffff ffff df5e ce59     ^.Z.........^.Y.
   1e920:	df5e ce59 df5e ce59 df5e ce59 ffff ffff     ^.Y.^.Y.^.Y.....
   1e930:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e940:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e950:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e960:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e970:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e980:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e990:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e9a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e9b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1e9c0:	ffff ffff ffff ffff ffff ffff ffff ff38     ..............8.
   1e9d0:	fd6a fcc5 fcc5 fcc5 f4a3 f4a3 f4a3 fcc5     j...............
   1e9e0:	fcc5 fd6a fd6a ff5a ffff ffff ffff ffff     ..j.j.Z.........
   1e9f0:	ffff ffff ffff ffff ffff ffff ffff fdee     ................
   1ea00:	f4a3 f4a3 f4a3 ffff ffff ffff ffff ffff     ................
   1ea10:	ffff ffff cf1d 64d9 33d7 1336 1336 02d5     .......d.36.6...
   1ea20:	02d5 02d5 02d5 02d5 2376 4418 7d7a df5e     ........v#.Dz}^.
   1ea30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ea40:	ffff ffff ffff ffff ce59 4418 33d7 1336     ........Y..D.36.
   1ea50:	02d5 02d5 02d5 02d5 02d5 1336 2376 4418     ..........6.v#.D
   1ea60:	7d7a df5e ffff ffff ffff ffff ffff ffff     z}^.............
   1ea70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ea80:	ffff ffff ffff ffff ce59 1336 2376 1336     ........Y.6.v#6.
   1ea90:	2376 1336 2376 1336 ef7e ffff ffff ffff     v#6.v#6.~.......
   1eaa0:	ffff ae5c 2376 1336 2376 1336 2376 1336     ..\.v#6.v#6.v#6.
   1eab0:	2376 ae5c ffff ffff ffff ffff 7d7a 1336     v#\.........z}6.
   1eac0:	2376 1336 2376 1336 2376 2376 cf1d ffff     v#6.v#6.v#v#....
   1ead0:	ffff ffff ef7e 9e1b 7d7a 7d7a 7d7a 7d7a     ....~...z}z}z}z}
   1eae0:	7d7a 7d7a ce59 df5e 7d7a 7d7a 7d7a df5e     z}z}Y.^.z}z}z}^.
   1eaf0:	ffff ae5c 7d7a 7d7a 7d7a df5e ffff ffff     ..\.z}z}z}^.....
   1eb00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eb60:	ffff ffff ffff ffff ffff ff5a fdee f4a3     ..........Z.....
   1eb70:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1eb80:	fcc5 f4a3 fcc5 f4a3 fe93 ffff ffff ffff     ................
   1eb90:	ffff ffff ffff ffff ffff ffff ffff fcc5     ................
   1eba0:	fcc5 f4a3 fdee ff5a ffff ffff ffff ffff     ......Z.........
   1ebb0:	ffff 64d9 1336 02d5 1336 02d5 1336 02d5     ...d6...6...6...
   1ebc0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ebd0:	ae5c ffff ffff ffff ffff ffff ffff ffff     \...............
   1ebe0:	ffff ffff ffff 64d9 1336 02d5 1336 02d5     .......d6...6...
   1ebf0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ec00:	1336 2376 cf1d ffff ffff ffff ffff ffff     6.v#............
   1ec10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ec20:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1ec30:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1ec40:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   1ec50:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   1ec60:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   1ec70:	ffff ffff df5e 02d5 1336 02d5 1336 02d5     ....^...6...6...
   1ec80:	1336 02d5 4418 ce59 1336 02d5 1336 9e1b     6....DY.6...6...
   1ec90:	ffff 64d9 1336 02d5 1336 ff5a ffff ffff     ...d6...6.Z.....
   1eca0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ecb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ecc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ecd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ece0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ecf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ed00:	ffff ffff ffff ffff ff38 f4a3 f4a3 fcc5     ........8.......
   1ed10:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   1ed20:	f4a3 fcc5 f4a3 fcc5 f4a3 fd6a ffff ffff     ..........j.....
   1ed30:	ffff ffff ffff ffff ffff ffff ff38 fcc5     ............8...
   1ed40:	f4a3 f4a3 fe93 ffff ffff ffff ffff df5e     ..............^.
   1ed50:	1336 02d5 02d5 1336 02d5 02d5 02d5 1336     6.....6.......6.
   1ed60:	02d5 02d5 02d5 1336 02d5 02d5 02d5 02d5     ......6.........
   1ed70:	02d5 4418 ef7e ffff ffff ffff ffff ffff     ...D~...........
   1ed80:	ffff df5e 2376 02d5 02d5 02d5 02d5 1336     ..^.v#........6.
   1ed90:	02d5 02d5 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   1eda0:	02d5 02d5 02d5 ae5c ffff ffff ffff ffff     ......\.........
   1edb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1edc0:	ffff ffff ffff ffff bdd7 02d5 02d5 1336     ..............6.
   1edd0:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   1ede0:	ffff 9e1b 02d5 1336 02d5 02d5 02d5 02d5     ......6.........
   1edf0:	1336 ae5c ffff ffff ffff ffff 7d7a 1336     6.\.........z}6.
   1ee00:	02d5 02d5 02d5 1336 02d5 02d5 ce59 ffff     ......6.....Y...
   1ee10:	ffff ffff ef7e 2376 2376 02d5 02d5 02d5     ....~.v#v#......
   1ee20:	2376 1336 64d9 df5e 02d5 02d5 02d5 4418     v#6..d^........D
   1ee30:	ffff 02d5 02d5 1336 1336 df5e ffff ffff     ......6.6.^.....
   1ee40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ee50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ee60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ee70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ee80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ee90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eea0:	ffff ffff ffff ff38 fcc5 f4a3 fcc5 f4a3     ......8.........
   1eeb0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1eec0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fdee ffff     ................
   1eed0:	ffff ffff ffff ffff ffff ffff feb5 f4a3     ................
   1eee0:	fcc5 f4a3 ff5a ffff ffff ffff df5e 2376     ....Z.......^.v#
   1eef0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ef00:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ef10:	1336 02d5 4418 ffff ffff ffff ffff ffff     6....D..........
   1ef20:	ffff 7d7a 1336 02d5 1336 02d5 1336 02d5     ..z}6...6...6...
   1ef30:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ef40:	1336 02d5 1336 02d5 ffff ffff ffff ffff     6...6...........
   1ef50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ef60:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1ef70:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1ef80:	ffff 9e1b 02d5 02d5 1336 02d5 1336 02d5     ........6...6...
   1ef90:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   1efa0:	1336 02d5 1336 02d5 1336 02d5 bebd ffff     6...6...6.......
   1efb0:	ffff ffff ffff ffff ffff ce59 02d5 02d5     ..........Y.....
   1efc0:	ffff ffff ffff df5e 1336 02d5 1336 02d5     ......^.6...6...
   1efd0:	ffff 02d5 1336 02d5 1336 ff38 ffff ffff     ....6...6.8.....
   1efe0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1eff0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f000:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f010:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f020:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f030:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f040:	ffff ffff ffff fcc5 f4a3 fcc5 f4a3 fcc5     ................
   1f050:	f4a3 fcc5 f4a3 fcc5 f4a3 f4a3 f4a3 fcc5     ................
   1f060:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 ff38     ..............8.
   1f070:	ffff ffff ffff ffff ffff ffff fd6a f4a3     ............j...
   1f080:	f4a3 fcc5 ff38 ffff ffff ffff 64d9 02d5     ....8........d..
   1f090:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   1f0a0:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   1f0b0:	02d5 02d5 02d5 7d7a ffff ffff ffff ffff     ......z}........
   1f0c0:	ffff 1336 02d5 02d5 02d5 02d5 02d5 02d5     ..6.............
   1f0d0:	5478 ae5c bdd7 9e1b 2376 02d5 02d5 02d5     xT\.....v#......
   1f0e0:	02d5 02d5 02d5 02d5 ce59 ffff ffff ffff     ........Y.......
   1f0f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f100:	ffff ffff ffff ffff 7d7a 02d5 02d5 02d5     ........z}......
   1f110:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   1f120:	ffff ae5c 02d5 02d5 02d5 02d5 02d5 02d5     ..\.............
   1f130:	02d5 ae5c ffff ffff ffff ffff 7d7a 02d5     ..\.........z}..
   1f140:	02d5 02d5 02d5 02d5 02d5 1336 ce59 ffff     ..........6.Y...
   1f150:	ffff ffff ffff ffff ffff ae5c 02d5 02d5     ..........\.....
   1f160:	ef7e ffff ffff df5e 02d5 1336 2376 02d5     ~.....^...6.v#..
   1f170:	7d7a 02d5 5478 02d5 2376 df5e ffff ffff     z}..xT..v#^.....
   1f180:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f190:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f1a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f1b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f1c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f1d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f1e0:	ffff ffff fe93 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1f1f0:	fcc5 f4a3 fcc5 f4a3 feb5 fe93 fe93 f4a3     ................
   1f200:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1f210:	ffff ffff ffff ffff ffff ff5a fdee f4a3     ..........Z.....
   1f220:	fcc5 fcc5 ffff ffff ffff ce59 1336 02d5     ..........Y.6...
   1f230:	1336 02d5 1336 02d5 1336 02d5 1336 8c51     6...6...6...6.Q.
   1f240:	ae5c 7d7a 4418 02d5 1336 02d5 1336 02d5     \.z}.D..6...6...
   1f250:	1336 02d5 1336 02d5 ffff ffff ffff ffff     6...6...........
   1f260:	df5e 02d5 1336 02d5 1336 02d5 1336 02d5     ^...6...6...6...
   1f270:	ffff ffff ffff ffff df5e 02d5 1336 02d5     ........^...6...
   1f280:	1336 02d5 1336 02d5 4418 ffff ffff ffff     6...6....D......
   1f290:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f2a0:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1f2b0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1f2c0:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   1f2d0:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   1f2e0:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   1f2f0:	ffff ffff ffff ffff ffff 9e1b 1336 02d5     ............6...
   1f300:	df5e ffff ffff ce59 02d5 2376 4418 02d5     ^.....Y...v#.D..
   1f310:	1336 02d5 7d7a 02d5 1336 ff5a ffff ffff     6...z}..6.Z.....
   1f320:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f350:	ffff ffff ffff df1c fe93 fe93 fe93 ce59     ..............Y.
   1f360:	fe93 fe93 ff38 ffff ffff ffff ffff ce59     ....8.........Y.
   1f370:	fe93 fe93 fe93 ce59 fe93 ff38 ffff ffff     ......Y...8.....
   1f380:	ffff ff5a fcc5 fcc5 f4a3 fcc5 f4a3 fcc5     ..Z.............
   1f390:	f4a3 f4a3 fd6a ffff ffff ffff ffff ffff     ....j...........
   1f3a0:	fd6a f4a3 f4a3 fcc5 f4a3 f4a3 f4a3 f4a3     j...............
   1f3b0:	ff38 ffff ffff ffff ffff ff5a fcc5 fcc5     8.........Z.....
   1f3c0:	f4a3 fe93 ffff ffff ef7e 4418 02d5 1336     ........~..D..6.
   1f3d0:	02d5 02d5 02d5 1336 02d5 4418 ffff ffff     ......6....D....
   1f3e0:	ffff ffff ffff df5e 1336 02d5 02d5 1336     ......^.6.....6.
   1f3f0:	02d5 02d5 02d5 02d5 7d7a ffff ffff ffff     ........z}......
   1f400:	ef7e 02d5 02d5 1336 02d5 02d5 02d5 1336     ~.....6.......6.
   1f410:	ffff ffff ffff ffff ffff 9e1b 02d5 1336     ..............6.
   1f420:	1336 02d5 2376 1336 33d7 ffff ffff ffff     6...v#6..3......
   1f430:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f440:	ffff ffff ffff ffff bdd7 02d5 02d5 1336     ..............6.
   1f450:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   1f460:	ffff 9e1b 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   1f470:	1336 ae5c ffff ffff ffff ffff 7d7a 1336     6.\.........z}6.
   1f480:	02d5 02d5 02d5 1336 02d5 02d5 ce59 ffff     ......6.....Y...
   1f490:	ffff ffff ffff ffff ffff 9e1b 02d5 02d5     ................
   1f4a0:	ef7e ffff ffff df5e 02d5 33d7 7d7a 1336     ~.....^....3z}6.
   1f4b0:	02d5 33d7 7d7a 1336 1336 df5e ffff ffff     ...3z}6.6.^.....
   1f4c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f4d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f4e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f4f0:	ffff ffff ffff fd6a f4a3 f4a3 fcc5 f4a3     ......j.........
   1f500:	fcc5 f4a3 ff5a ffff ffff ffff ffff f4a3     ....Z...........
   1f510:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   1f520:	ffff fe93 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1f530:	fcc5 fcc5 ffff ffff ffff ffff ffff ffff     ................
   1f540:	ffff fcc5 f4a3 f4a3 fcc5 fcc5 fdee fdee     ................
   1f550:	ffff ffff ffff ffff ffff fe93 fcc5 f4a3     ................
   1f560:	fcc5 fe93 ffff ffff ffff 02d5 1336 02d5     ............6...
   1f570:	1336 02d5 1336 02d5 1336 ff5a ffff ffff     6...6...6.Z.....
   1f580:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1f590:	1336 02d5 1336 02d5 4418 ffff ffff ffff     6...6....D......
   1f5a0:	df5e 02d5 1336 02d5 1336 02d5 1336 02d5     ^...6...6...6...
   1f5b0:	4418 7d7a df5e ce59 ffff ff5a ae5c ce59     .Dz}^.Y...Z.\.Y.
   1f5c0:	cf1d ce59 df5e ffff ffff ffff ffff ffff     ..Y.^...........
   1f5d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f5e0:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1f5f0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1f600:	ffff 9e1b 02d5 02d5 1336 02d5 1336 02d5     ........6...6...
   1f610:	1336 ce59 ffff ffff ffff ffff 7d7a 02d5     6.Y.........z}..
   1f620:	1336 02d5 1336 02d5 1336 02d5 bebd ffff     6...6...6.......
   1f630:	ffff ffff ffff ffff ffff 7d7a 02d5 02d5     ..........z}....
   1f640:	df5e ffff ffff ce59 02d5 2376 bebd 02d5     ^.....Y...v#....
   1f650:	1336 8c51 bebd 02d5 1336 ff38 ffff ffff     6.Q.....6.8.....
   1f660:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f680:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f690:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   1f6a0:	f4a3 fcc5 ff38 ffff ffff ffff ef7e fcc5     ....8.......~...
   1f6b0:	f4a3 fcc5 f4a3 fcc5 f4a3 fdee ffff ffff     ................
   1f6c0:	ffff fe93 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   1f6d0:	f4a3 fe93 ffff ffff ffff ffff ffff ffff     ................
   1f6e0:	ffff ff5a fd6a fe93 ff38 ffff ffff ffff     ..Z.j...8.......
   1f6f0:	ffff ffff ffff ffff ffff bdd7 f4a3 fcc5     ................
   1f700:	fcc5 ff5a ffff ffff ce59 02d5 02d5 02d5     ..Z.....Y.......
   1f710:	02d5 1336 02d5 02d5 7d7a ffff ffff ffff     ..6.....z}......
   1f720:	ffff ffff ffff ffff ffff 4418 02d5 02d5     ...........D....
   1f730:	02d5 1336 02d5 02d5 2376 df5e ffff ffff     ..6.....v#^.....
   1f740:	ef7e 1336 02d5 02d5 02d5 02d5 02d5 02d5     ~.6.............
   1f750:	02d5 02d5 1336 1336 5478 7d7a cf1d ffff     ....6.6.xTz}....
   1f760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f770:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f780:	ffff ffff ffff ffff 7d7a 02d5 02d5 02d5     ........z}......
   1f790:	02d5 1336 02d5 02d5 ef7e ffff ffff ffff     ..6.....~.......
   1f7a0:	ffff ae5c 02d5 02d5 02d5 02d5 02d5 02d5     ..\.............
   1f7b0:	2376 ae5c ffff ffff ffff ffff 7d7a 02d5     v#\.........z}..
   1f7c0:	02d5 02d5 02d5 02d5 02d5 1336 ce59 ffff     ..........6.Y...
   1f7d0:	ffff ffff ffff ffff ffff ae5c 33d7 33d7     ..........\..3.3
   1f7e0:	ef7e ffff ffff df5e 2376 4418 ef7e 4418     ~.....^.v#.D~..D
   1f7f0:	33d7 ae5c ef7e 4418 5478 df5e ffff ffff     .3\.~..DxT^.....
   1f800:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f810:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f830:	ffff ffff ffff fd6a fcc5 f4a3 fcc5 f4a3     ......j.........
   1f840:	fcc5 f4a3 ff5a ffff ffff ffff ffff f4a3     ....Z...........
   1f850:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   1f860:	ffff fdee fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1f870:	fcc5 ff5a ffff ffff ffff ffff ffff ffff     ..Z.............
   1f880:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f890:	ffff ffff ffff ffff ffff fcc5 fcc5 f4a3     ................
   1f8a0:	fcc5 ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1f8b0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1f8c0:	ffff ffff ffff ffff ffff 9e1b 1336 02d5     ............6...
   1f8d0:	1336 02d5 1336 02d5 1336 ce59 ffff ffff     6...6...6.Y.....
   1f8e0:	ffff 4418 1336 02d5 1336 02d5 1336 02d5     ...D6...6...6...
   1f8f0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1f900:	7d7a ffff ffff ffff ffff ffff ffff ffff     z}..............
   1f910:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f920:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1f930:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1f940:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   1f950:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   1f960:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   1f970:	ffff ffff ffff ffff ffff ffff ffff ff5a     ..............Z.
   1f980:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f990:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f9a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f9b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f9c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1f9d0:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   1f9e0:	f4a3 fcc5 ff38 ffff ffff ffff ff38 fcc5     ....8.......8...
   1f9f0:	f4a3 fcc5 f4a3 fcc5 f4a3 fd6a ffff ffff     ..........j.....
   1fa00:	ef7e fdee f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ~...............
   1fa10:	fcc5 ffff ffff ffff ffff ffff ffff ffff     ................
   1fa20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fa30:	ffff ffff ffff ffff ef7e fcc5 f4a3 fcc5     ........~.......
   1fa40:	fd6a ffff ffff ffff 5478 02d5 02d5 1336     j.......xT....6.
   1fa50:	02d5 02d5 02d5 02d5 ffff ffff ffff ffff     ................
   1fa60:	ffff ffff ffff ffff ffff 9e1b 02d5 1336     ..............6.
   1fa70:	02d5 02d5 02d5 1336 1336 ae5c ffff ffff     ......6.6.\.....
   1fa80:	ffff cf1d 2376 02d5 02d5 02d5 02d5 1336     ....v#........6.
   1fa90:	02d5 02d5 02d5 1336 02d5 02d5 02d5 02d5     ......6.........
   1faa0:	02d5 02d5 7d7a df5e ffff ffff ffff ffff     ....z}^.........
   1fab0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fac0:	ffff ffff ffff ffff bdd7 02d5 02d5 1336     ..............6.
   1fad0:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   1fae0:	ffff 9e1b 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   1faf0:	1336 ae5c ffff ffff ffff ffff 7d7a 02d5     6.\.........z}..
   1fb00:	02d5 02d5 02d5 1336 02d5 02d5 ce59 ffff     ......6.....Y...
   1fb10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fb70:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   1fb80:	fcc5 f4a3 ff5a ffff ffff ffff ffff fcc5     ....Z...........
   1fb90:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   1fba0:	ffff fcc5 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1fbb0:	fd6a ffff ffff ffff ffff ffff ffff ffff     j...............
   1fbc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fbd0:	ffff ffff ffff ffff ffff f4a3 fcc5 f4a3     ................
   1fbe0:	ff5a ffff ffff ffff 64d9 02d5 1336 02d5     Z........d..6...
   1fbf0:	1336 02d5 1336 02d5 ffff ffff ffff ffff     6...6...........
   1fc00:	ffff ffff ffff ffff ffff ce59 1336 02d5     ..........Y.6...
   1fc10:	1336 02d5 1336 02d5 1336 7d7a ffff ffff     6...6...6.z}....
   1fc20:	ffff ffff bebd 2376 1336 02d5 1336 02d5     ......v#6...6...
   1fc30:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1fc40:	1336 02d5 02d5 2376 ffff ffff ffff ffff     6.....v#........
   1fc50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fc60:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   1fc70:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1fc80:	ffff 9e1b 02d5 02d5 1336 02d5 1336 02d5     ........6...6...
   1fc90:	1336 ce59 ffff ffff ffff ffff 9e1b 02d5     6.Y.............
   1fca0:	1336 02d5 1336 02d5 1336 02d5 bebd ffff     6...6...6.......
   1fcb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fcc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fcd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fcf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fd00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fd10:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   1fd20:	f4a3 fcc5 ff38 ffff ffff ffff ef7e fcc5     ....8.......~...
   1fd30:	f4a3 fcc5 f4a3 fcc5 f4a3 fdee ef7e ffff     ............~...
   1fd40:	ffff fdee f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   1fd50:	fcc5 ffff ffff ffff ffff ffff ffff ffff     ................
   1fd60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fd70:	ffff ffff ffff ffff fdee f4a3 f4a3 f4a3     ................
   1fd80:	ffff ffff ffff ffff 64d9 02d5 02d5 02d5     .........d......
   1fd90:	02d5 02d5 02d5 02d5 ffff ffff ffff ffff     ................
   1fda0:	ffff ffff ffff ffff ffff ae5c 1336 02d5     ..........\.6...
   1fdb0:	02d5 02d5 02d5 02d5 02d5 7d7a ffff ffff     ..........z}....
   1fdc0:	ffff ffff ffff df5e 7d7a 1336 02d5 02d5     ......^.z}6.....
   1fdd0:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   1fde0:	02d5 02d5 02d5 02d5 64d9 ffff ffff ae5c     .........d....\.
   1fdf0:	7d7a 7d7a 7d7a 7d7a 7d7a 7d7a 7d7a 7d7a     z}z}z}z}z}z}z}z}
   1fe00:	7d7a df5e ffff ffff 7d7a 02d5 02d5 02d5     z}^.....z}......
   1fe10:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   1fe20:	ffff ae5c 02d5 02d5 02d5 02d5 02d5 02d5     ..\.............
   1fe30:	02d5 ae5c ffff ffff ffff ffff 7d7a 02d5     ..\.........z}..
   1fe40:	02d5 02d5 02d5 02d5 02d5 1336 ce59 ffff     ..........6.Y...
   1fe50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fe60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fe70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fe80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fe90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1fea0:	ffff ffff ae5c 64d9 64d9 ce59 ffff ffff     ....\..d.dY.....
   1feb0:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   1fec0:	fcc5 f4a3 ff5a ffff ffff ffff ffff fcc5     ....Z...........
   1fed0:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   1fee0:	ffff fcc5 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   1fef0:	fd49 ffff ffff ffff ffff ffff ffff ffff     I...............
   1ff00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1ff10:	ffff ffff ffff ffff fdee f4a3 fcc5 f4a3     ................
   1ff20:	ffff ffff ffff ffff 64d9 02d5 1336 02d5     .........d..6...
   1ff30:	1336 02d5 1336 02d5 ffff ffff ffff ffff     6...6...........
   1ff40:	ffff ffff ffff ffff ffff 9e1b 1336 02d5     ............6...
   1ff50:	1336 02d5 1336 02d5 1336 ce59 ffff ffff     6...6...6.Y.....
   1ff60:	ffff ffff ffff ffff ffff df1c ae5c 2376     ............\.v#
   1ff70:	02d5 02d5 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   1ff80:	1336 02d5 1336 02d5 1336 ce59 ffff 64d9     6...6...6.Y....d
   1ff90:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   1ffa0:	1336 9e1b ffff ffff ae5c 02d5 1336 02d5     6.......\...6...
   1ffb0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   1ffc0:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   1ffd0:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   1ffe0:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   1fff0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20000:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20010:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20020:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20030:	ffff ffff ef7e df5e ef7e ffff ffff df5e     ....~.^.~.....^.
   20040:	ef7e 9e1b 02d5 02d5 02d5 02d5 7d7a ffff     ~...........z}..
   20050:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   20060:	f4a3 fcc5 ff38 ffff ffff ffff ff38 fcc5     ....8.......8...
   20070:	f4a3 fcc5 f4a3 fcc5 f4a3 fd6a ffff ffff     ..........j.....
   20080:	ffff fe93 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20090:	fcc5 ffff ffff ffff ffff ffff ffff ffff     ................
   200a0:	ffff ff5a fd6a bdd7 ef7e ffff ffff ffff     ..Z.j...~.......
   200b0:	ffff ffff ffff ffff f4a3 fcc5 f4a3 fdee     ................
   200c0:	ffff ffff ffff ffff 7d7a 02d5 02d5 1336     ........z}....6.
   200d0:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   200e0:	ffff ffff ffff ffff ffff 9e1b 02d5 1336     ..............6.
   200f0:	02d5 02d5 02d5 02d5 1336 ae5c ffff ffff     ........6.\.....
   20100:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20110:	ffff ae5c 64d9 1336 1336 02d5 02d5 1336     ..\..d6.6.....6.
   20120:	02d5 02d5 02d5 1336 02d5 64d9 ffff 4418     ......6....d...D
   20130:	02d5 02d5 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   20140:	02d5 7d7a ffff ffff bdd7 02d5 02d5 1336     ..z}..........6.
   20150:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   20160:	ffff 9e1b 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   20170:	1336 ae5c ffff ffff ffff ffff 7d7a 1336     6.\.........z}6.
   20180:	02d5 02d5 02d5 1336 02d5 02d5 ce59 ffff     ......6.....Y...
   20190:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   201a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   201b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   201c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   201d0:	ffff ce59 4418 2376 4418 2376 4418 2376     ..Y..Dv#.Dv#.Dv#
   201e0:	4418 2376 1336 02d5 1336 02d5 4418 ffff     .Dv#6...6....D..
   201f0:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   20200:	fcc5 f4a3 ff5a ffff ffff ffff ffff fcc5     ....Z...........
   20210:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   20220:	ffff fdee fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   20230:	fcc5 fe93 ffff ffff ffff ffff ffff ffff     ................
   20240:	ffff fe93 f4a3 f4a3 fcc5 fcc5 fe93 ff38     ..............8.
   20250:	ffff ffff ffff ff38 fcc5 f4a3 f4a3 fe93     ......8.........
   20260:	ffff ffff ffff ffff cf1d 02d5 1336 02d5     ............6...
   20270:	1336 02d5 1336 02d5 ae5c ffff ffff ffff     6...6...\.......
   20280:	ffff ffff ffff ffff ffff 8c51 1336 02d5     ..........Q.6...
   20290:	1336 02d5 1336 02d5 1336 ff38 ffff ffff     6...6...6.8.....
   202a0:	df5e ce59 df5e ce59 cf1d ce59 ae5c ffff     ^.Y.^.Y...Y.\...
   202b0:	ffff ffff ffff ffff df5e 2376 1336 02d5     ........^.v#6...
   202c0:	1336 02d5 1336 02d5 1336 8c51 ffff 64d9     6...6...6.Q....d
   202d0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   202e0:	1336 7d7a ffff ffff ae5c 02d5 1336 02d5     6.z}....\...6...
   202f0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   20300:	ffff 9e1b 02d5 02d5 1336 02d5 1336 02d5     ........6...6...
   20310:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   20320:	1336 02d5 1336 02d5 1336 02d5 bebd ffff     6...6...6.......
   20330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20360:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20370:	ffff 9e1b 02d5 02d5 2376 1336 1336 02d5     ........v#6.6...
   20380:	2376 1336 02d5 02d5 02d5 02d5 5478 df5e     v#6.........xT^.
   20390:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   203a0:	f4a3 fcc5 ff38 ffff ffff ffff ff38 fcc5     ....8.......8...
   203b0:	f4a3 fcc5 f4a3 fcc5 f4a3 fdee ef7e ffff     ............~...
   203c0:	ffff ff5a f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ..Z.............
   203d0:	f4a3 fe93 ffff ffff ffff ffff ffff ffff     ................
   203e0:	ffff fdee f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   203f0:	fe93 ffff ffff fe93 f4a3 fcc5 f4a3 ffff     ................
   20400:	ffff ffff ffff ffff ef7e 02d5 02d5 02d5     ........~.......
   20410:	02d5 1336 02d5 02d5 33d7 ffff ffff ffff     ..6......3......
   20420:	ffff ffff ffff ffff ef7e 1336 02d5 02d5     ........~.6.....
   20430:	02d5 1336 02d5 02d5 2376 ffff ffff df5e     ..6.....v#....^.
   20440:	2376 1336 1336 02d5 2376 02d5 02d5 df5e     v#6.6...v#....^.
   20450:	ffff ffff ffff ffff ffff df5e 2376 02d5     ..........^.v#..
   20460:	02d5 1336 02d5 02d5 02d5 4418 ffff 4418     ..6........D...D
   20470:	02d5 1336 02d5 02d5 02d5 02d5 02d5 02d5     ..6.............
   20480:	02d5 7d7a ffff ffff 7d7a 02d5 02d5 02d5     ..z}....z}......
   20490:	02d5 1336 02d5 02d5 ef7e ffff ffff ffff     ..6.....~.......
   204a0:	ffff ae5c 02d5 02d5 02d5 02d5 02d5 02d5     ..\.............
   204b0:	2376 ae5c ffff ffff ffff ffff 7d7a 02d5     v#\.........z}..
   204c0:	02d5 1336 02d5 02d5 02d5 02d5 ce59 ffff     ..6.........Y...
   204d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   204e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   204f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20500:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20510:	ffff 9e1b 1336 7d7a ffff ff5a df5e ff5a     ....6.z}..Z.^.Z.
   20520:	df5e 4418 1336 02d5 1336 02d5 64d9 ffff     ^..D6...6....d..
   20530:	ffff ffff ffff fd6a fcc5 f4a3 fcc5 f4a3     ......j.........
   20540:	fcc5 f4a3 ff38 ffff ffff ffff ff5a f4a3     ....8.......Z...
   20550:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   20560:	ffff ff5a fdee f4a3 fcc5 f4a3 fcc5 f4a3     ..Z.............
   20570:	fcc5 f4a3 ff5a ffff ffff ffff ffff ffff     ....Z...........
   20580:	fe93 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   20590:	ff5a ffff ffff fcc5 fcc5 f4a3 fdee ff5a     Z.............Z.
   205a0:	ffff ffff ffff ffff ffff 4418 1336 02d5     ...........D6...
   205b0:	1336 02d5 1336 02d5 1336 64d9 ffff ffff     6...6...6..d....
   205c0:	ffff ffff ffff ffff 4418 02d5 1336 02d5     .........D..6...
   205d0:	1336 02d5 1336 02d5 7d7a ffff ffff ffff     6...6...z}......
   205e0:	02d5 02d5 1336 02d5 1336 02d5 1336 64d9     ....6...6...6..d
   205f0:	ffff ffff ffff ffff ffff ffff 4418 02d5     .............D..
   20600:	1336 02d5 1336 02d5 1336 64d9 ffff 8c51     6...6...6..d..Q.
   20610:	02d5 02d5 1336 02d5 02d5 02d5 02d5 02d5     ....6...........
   20620:	02d5 7d7a ffff ffff ae5c 02d5 1336 02d5     ..z}....\...6...
   20630:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   20640:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   20650:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   20660:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   20670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20680:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20690:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   206a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   206b0:	ffff 9e1b 02d5 ae5c ffff ffff ffff ffff     ......\.........
   206c0:	ffff df5e 2376 1336 1336 33d7 ef7e ffff     ..^.v#6.6..3~...
   206d0:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   206e0:	f4a3 fcc5 f4a3 ce59 ef7e ff38 fcc5 fcc5     ......Y.~.8.....
   206f0:	f4a3 fcc5 f4a3 fcc5 f4a3 fd6a ffff ffff     ..........j.....
   20700:	ffff ffff fe93 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20710:	f4a3 fcc5 f4a3 bdd7 ff38 ffff ff38 fdee     ........8...8...
   20720:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20730:	ffff ffff ffff fcc5 f4a3 f4a3 fd6a ffff     ............j...
   20740:	ffff ffff ffff ffff ffff 9e1b 02d5 02d5     ................
   20750:	02d5 02d5 02d5 1336 02d5 02d5 2376 ae5c     ......6.....v#\.
   20760:	ef7e df5e 9e1b 1336 02d5 02d5 02d5 1336     ~.^...6.......6.
   20770:	02d5 02d5 02d5 02d5 ffff ffff ffff ffff     ................
   20780:	33d7 02d5 02d5 1336 02d5 02d5 02d5 02d5     .3....6.........
   20790:	cf1d ffff ffff ffff ffff 9e1b 2376 02d5     ............v#..
   207a0:	02d5 02d5 02d5 1336 02d5 9e1b ffff ffff     ......6.........
   207b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   207c0:	ffff ffff ffff ffff bdd7 02d5 02d5 1336     ..............6.
   207d0:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   207e0:	ffff 9e1b 02d5 1336 02d5 02d5 02d5 02d5     ......6.........
   207f0:	1336 ae5c ffff ffff ffff ffff 7d7a 1336     6.\.........z}6.
   20800:	02d5 02d5 02d5 1336 02d5 02d5 ce59 ffff     ......6.....Y...
   20810:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20830:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20840:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20850:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   20860:	ffff ffff ffff ce59 cf1d ff5a ffff ffff     ......Y...Z.....
   20870:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   20880:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   20890:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   208a0:	ffff ffff ffff fcc5 fcc5 f4a3 fcc5 f4a3     ................
   208b0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 f4a3 f4a3     ................
   208c0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 f4a3 fe93     ................
   208d0:	ffff ffff ff5a f4a3 fcc5 f4a3 ff5a ffff     ....Z.......Z...
   208e0:	ffff ffff ffff ffff ffff ff5a 4418 02d5     ..........Z..D..
   208f0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   20900:	1336 02d5 02d5 02d5 1336 02d5 1336 02d5     6.......6...6...
   20910:	1336 02d5 1336 64d9 ffff ffff ffff ffff     6...6..d........
   20920:	ae5c 02d5 1336 02d5 1336 02d5 1336 02d5     \...6...6...6...
   20930:	1336 64d9 ae5c 9e1b 7d7a 02d5 1336 02d5     6..d\...z}..6...
   20940:	1336 02d5 1336 02d5 1336 ff38 ffff ffff     6...6...6.8.....
   20950:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20960:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   20970:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   20980:	ffff 9e1b 02d5 02d5 1336 02d5 1336 02d5     ........6...6...
   20990:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   209a0:	1336 02d5 1336 02d5 1336 02d5 bebd ffff     6...6...6.......
   209b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   209c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   209d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   209e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   209f0:	ffff ae5c 02d5 9e1b ffff ffff ffff ffff     ..\.............
   20a00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20a10:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   20a20:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20a30:	f4a3 fcc5 f4a3 fcc5 f4a3 fdee ef7e ffff     ............~...
   20a40:	ffff ffff ffff ff5a f4a3 fcc5 f4a3 fcc5     ......Z.........
   20a50:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20a60:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff     ................
   20a70:	ffff ffff fe93 fcc5 f4a3 fcc5 ff38 ffff     ............8...
   20a80:	ffff ffff ffff ffff ffff ffff ef7e 02d5     ............~...
   20a90:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   20aa0:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   20ab0:	02d5 02d5 33d7 df5e ffff ffff ffff ffff     .....3^.........
   20ac0:	ffff 4418 02d5 02d5 02d5 02d5 02d5 02d5     ...D............
   20ad0:	02d5 02d5 02d5 02d5 02d5 02d5 02d5 02d5     ................
   20ae0:	02d5 02d5 02d5 02d5 7d7a ffff ffff ffff     ........z}......
   20af0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20b00:	ffff ffff ffff ffff 7d7a 02d5 02d5 02d5     ........z}......
   20b10:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   20b20:	ffff ae5c 02d5 02d5 02d5 02d5 02d5 02d5     ..\.............
   20b30:	02d5 ae5c ffff ffff ffff ffff 7d7a 02d5     ..\.........z}..
   20b40:	02d5 02d5 02d5 02d5 02d5 1336 ce59 ffff     ..........6.Y...
   20b50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20b60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20b70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20b80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20b90:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   20ba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20bb0:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   20bc0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   20bd0:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   20be0:	ffff ffff ffff ffff feb5 f4a3 fcc5 f4a3     ................
   20bf0:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     ................
   20c00:	fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 ff5a ffff     ............Z...
   20c10:	ffff ffff fdee f4a3 fcc5 fcc5 ffff ffff     ................
   20c20:	ffff ffff ffff ffff ffff ffff ffff ce59     ..............Y.
   20c30:	02d5 02d5 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   20c40:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   20c50:	1336 2376 df5e ffff ffff ffff ffff ffff     6.v#^...........
   20c60:	ffff ce59 1336 02d5 1336 02d5 1336 02d5     ..Y.6...6...6...
   20c70:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   20c80:	1336 02d5 1336 2376 ffff ffff ffff ffff     6...6.v#........
   20c90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20ca0:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   20cb0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   20cc0:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   20cd0:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   20ce0:	1336 02d5 1336 02d5 1336 02d5 cf1d ffff     6...6...6.......
   20cf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20d00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20d10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20d20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20d30:	ffff 9e1b 02d5 ae5c ffff ffff ffff ffff     ......\.........
   20d40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20d50:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   20d60:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20d70:	f4a3 fcc5 f4a3 fcc5 f4a3 fd6a ffff ffff     ..........j.....
   20d80:	ffff ffff ffff ffff ffff ff38 fcc5 fcc5     ..........8.....
   20d90:	f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3 fcc5     ................
   20da0:	f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff ffff     ................
   20db0:	ffff ff5a fcc5 fcc5 f4a3 fdee ffff ffff     ..Z.............
   20dc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20dd0:	ef7e 33d7 02d5 02d5 02d5 02d5 02d5 1336     ~..3..........6.
   20de0:	02d5 02d5 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   20df0:	5478 ffff ffff ffff ffff ffff ffff ffff     xT..............
   20e00:	ffff ffff ce59 1336 02d5 02d5 02d5 1336     ....Y.6.......6.
   20e10:	02d5 02d5 02d5 1336 02d5 02d5 02d5 1336     ......6.......6.
   20e20:	02d5 02d5 64d9 ffff ffff ffff ffff ffff     .....d..........
   20e30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20e40:	ffff ffff ffff ffff bdd7 02d5 02d5 1336     ..............6.
   20e50:	02d5 02d5 02d5 02d5 ef7e ffff ffff ffff     ........~.......
   20e60:	ffff 9e1b 02d5 02d5 02d5 02d5 02d5 02d5     ................
   20e70:	1336 ae5c ffff ffff ffff ffff 7d7a 1336     6.\.........z}6.
   20e80:	02d5 02d5 02d5 02d5 02d5 02d5 ce59 ffff     ............Y...
   20e90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20ea0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20eb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20ec0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20ed0:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   20ee0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20ef0:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   20f00:	fcc5 f4a3 fdee f4a3 fcc5 f4a3 fd49 fcc5     ............I...
   20f10:	fcc5 f4a3 fcc5 f4a3 fcc5 fcc5 ffff ffff     ................
   20f20:	ffff ffff ffff ffff ffff ffff ffff fdee     ................
   20f30:	fd6a f4a3 fcc5 f4a3 fcc5 f4a3 fcc5 f4a3     j...............
   20f40:	fcc5 f4a3 fdee fdee ffff ffff ffff ffff     ................
   20f50:	ffff fe93 fcc5 f4a3 fcc5 fdee ffff ffff     ................
   20f60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20f70:	ffff ffff ae5c 2376 1336 02d5 02d5 02d5     ....\.v#6.......
   20f80:	1336 02d5 02d5 02d5 1336 2376 4418 9e1b     6.......6.v#.D..
   20f90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20fa0:	ffff ffff ffff ffff 64d9 2376 1336 02d5     .........dv#6...
   20fb0:	1336 02d5 1336 02d5 1336 02d5 1336 02d5     6...6...6...6...
   20fc0:	64d9 ce59 ffff ffff ffff ffff ffff ffff     .dY.............
   20fd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   20fe0:	ffff ffff ffff ffff ae5c 02d5 1336 02d5     ........\...6...
   20ff0:	1336 02d5 1336 02d5 df5e ffff ffff ffff     6...6...^.......
   21000:	ffff 9e1b 1336 02d5 1336 02d5 1336 02d5     ....6...6...6...
   21010:	1336 ce59 ffff ffff ffff ffff ae5c 02d5     6.Y.........\...
   21020:	1336 02d5 1336 02d5 1336 2376 bebd ffff     6...6...6.v#....
   21030:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21040:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21050:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21060:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21070:	ffff ae5c 02d5 9e1b ffff ffff ffff ffff     ..\.............
   21080:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21090:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   210a0:	f4a3 fcc5 ff38 ff5a fdee fe93 ff38 ff5a     ....8.Z.....8.Z.
   210b0:	ff38 ff5a ff38 ff5a ff38 ff5a ffff ffff     8.Z.8.Z.8.Z.....
   210c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   210d0:	ff38 ff5a fe93 fe93 fd6a bdd7 fd6a fe93     8.Z.....j...j...
   210e0:	fe93 ff5a ef7e ffff ffff ffff ffff ffff     ..Z.~...........
   210f0:	ffff ff5a fd6a fe93 fdee ff5a ffff ffff     ..Z.j.....Z.....
   21100:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21110:	ffff ffff ffff df5e cf1d ae5c bdd7 64d9     ......^...\....d
   21120:	7d7a 64d9 7d7a 9e1b ce59 df5e ffff ffff     z}.dz}..Y.^.....
   21130:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21140:	ffff ffff ffff ffff ffff df5e ce59 9e1b     ..........^.Y...
   21150:	7d7a 64d9 7d7a 64d9 7d7a 9e1b ce59 cf1d     z}.dz}.dz}..Y...
   21160:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21170:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21180:	ffff ffff ffff ffff ef7e ae5c ce59 ae5c     ........~.\.Y.\.
   21190:	ce59 ae5c ce59 ae5c ffff ffff ffff ffff     Y.\.Y.\.........
   211a0:	ffff df5e ce59 ae5c ce59 ae5c ce59 ae5c     ..^.Y.\.Y.\.Y.\.
   211b0:	ce59 df5e ffff ffff ffff ffff ef7e ae5c     Y.^.........~.\.
   211c0:	ce59 ae5c ce59 ae5c ce59 ae5c ef7e ffff     Y.\.Y.\.Y.\.~...
   211d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   211e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   211f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21200:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21210:	ffff 9e1b 1336 9e1b ffff ffff ffff ffff     ....6...........
   21220:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21230:	ffff ffff ffff fd6a fcc5 f4a3 fcc5 f4a3     ......j.........
   21240:	fcc5 f4a3 ff5a ffff ffff ffff ffff ffff     ....Z...........
   21250:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21260:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21270:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21280:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21290:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   212f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21300:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21310:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21320:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21360:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21370:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21380:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21390:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   213a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   213b0:	ffff 9e1b 02d5 ae5c ffff ffff ffff ffff     ......\.........
   213c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   213d0:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   213e0:	f4a3 fcc5 ff38 ffff ffff ffff ffff ffff     ....8...........
   213f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21400:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21410:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21420:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21430:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21440:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21450:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21460:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21470:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21480:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21490:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   214f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21500:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21510:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21520:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21530:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21540:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21550:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   21560:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21570:	ffff ffff ffff fdee fcc5 f4a3 fcc5 f4a3     ................
   21580:	fcc5 f4a3 ff5a ffff ffff ffff ffff ffff     ....Z...........
   21590:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   215f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21600:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21610:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21620:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21630:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21640:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21650:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21660:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21680:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21690:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   216f0:	ffff ae5c 02d5 9e1b ffff ffff ffff ffff     ..\.............
   21700:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21710:	ffff ffff ffff fdee f4a3 fcc5 f4a3 fcc5     ................
   21720:	f4a3 fcc5 ff38 ffff ffff ffff ffff ffff     ....8...........
   21730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21740:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21750:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21770:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21780:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21790:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   217f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21800:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21810:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21830:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21840:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21850:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21860:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21870:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21880:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21890:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   218a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   218b0:	ffff ffff ffff fd6a fcc5 f4a3 fcc5 f4a3     ......j.........
   218c0:	fcc5 f4a3 ff5a ffff ffff ffff ffff ffff     ....Z...........
   218d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   218e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   218f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21900:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21910:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21920:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21930:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21940:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21950:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21960:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21970:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21980:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21990:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   219f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a30:	ffff 9e1b 02d5 ae5c ffff ffff ffff ffff     ......\.........
   21a40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a50:	ffff ffff ffff bdd7 fcc5 fcc5 fcc5 fcc5     ................
   21a60:	fcc5 fcc5 ff38 ffff ffff ffff ffff ffff     ....8...........
   21a70:	ffff ffff ffff ffff ef7e ffff ffff ffff     ........~.......
   21a80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21a90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21aa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ab0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ac0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ad0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ae0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21af0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b30:	ffff ffff ffff df5e ffff ffff ffff ffff     ......^.........
   21b40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21b90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21bb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21bc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21bd0:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   21be0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21bf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21c00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21c10:	ffff ffff ffff ffff 33d7 ce59 ffff ffff     .........3Y.....
   21c20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21c30:	ffff ff38 9e1b ad55 ce59 ad55 9e1b 9cd3     ..8...U.Y.U.....
   21c40:	ffff ad55 df5e ffff ffff ffff ffff ffff     ..U.^...........
   21c50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21c60:	9e1b ad55 9e1b ad55 ce59 ff38 ffff ffff     ..U...U.Y.8.....
   21c70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21c80:	ffff ffff ffff ce59 ce59 ff5a ffff ffff     ......Y.Y.Z.....
   21c90:	ffff bdd7 9e1b ad55 ce59 ad55 9e1b ce59     ......U.Y.U...Y.
   21ca0:	9e1b ce59 ffff ffff ffff ffff ffff ffff     ..Y.............
   21cb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21cc0:	ffff ffff ffff ffff ffff ad55 ce59 ffff     ..........U.Y...
   21cd0:	ffff ad55 9e1b ce59 ffff ffff ffff ffff     ..U...Y.........
   21ce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21cf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d00:	ffff ffff df5e ad55 df5e ffff ffff ffff     ....^.U.^.......
   21d10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d70:	ffff ae5c 02d5 9e1b ffff ffff ffff ffff     ..\.............
   21d80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21d90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21da0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21db0:	ffff ffff ffff ffff 02d5 02d5 5478 cf1d     ............xT..
   21dc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21dd0:	ffff ce59 8c51 8c51 8410 8c51 8c51 8c51     ..Y.Q.Q...Q.Q.Q.
   21de0:	ff38 8410 ff38 ffff ffff ffff ffff ffff     8...8...........
   21df0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21e00:	8410 8c51 8c51 8410 8410 9cd3 ef7e ffff     ..Q.Q.......~...
   21e10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21e20:	ffff ffff ffff 8c51 8410 ffff ffff ffff     ......Q.........
   21e30:	ef7e 9cd3 8c51 8410 8410 8c51 8410 ce59     ~...Q.....Q...Y.
   21e40:	8410 9e1b ffff ffff ffff ffff ffff ffff     ................
   21e50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21e60:	ffff ffff ffff ffff ef7e 8410 ad55 ffff     ........~...U...
   21e70:	ad55 8410 9cd3 df5e ffff ffff ffff ffff     U.....^.........
   21e80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21e90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ea0:	ffff ffff ce59 8410 ce59 ffff ffff ffff     ....Y...Y.......
   21eb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ec0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ed0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ee0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21ef0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21f00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21f10:	ffff 9e1b 02d5 9e1b ffff ffff ffff ffff     ................
   21f20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21f30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21f40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   21f50:	ffff ffff ffff ffff 02d5 02d5 1336 02d5     ............6...
   21f60:	7d7a ffff ffff ffff ffff ffff ffff ffff     z}..............
   21f70:	ffff ffff ffff ff38 8c51 9cd3 ffff ffff     ......8.Q.......
   21f80:	ce59 8410 df5e ff5a ffff ffff ffff ffff     Y...^.Z.........
   21f90:	df5e ff5a ffff ffff ffff ffff ffff ff38     ^.Z...........8.
   21fa0:	8c51 bdd7 ffff ffff 8c51 8c51 ffff ffff     Q.......Q.Q.....
   21fb0:	ffff ff5a ffff ffff ffff ffff ffff ff38     ..Z...........8.
   21fc0:	ffff ffff ffff 8410 9e1b ffff ffff ffff     ................
   21fd0:	ffff ff5a ffff 8c51 8c51 ff5a ffff ff5a     ..Z...Q.Q.Z...Z.
   21fe0:	df5e ffff ffff ff38 ffff ff5a ffff ffff     ^.....8...Z.....
   21ff0:	df5e ffff ffff ffff ffff ff5a ffff ffff     ^.........Z.....
   22000:	ffff ffff ffff ffff df5e 8410 df5e bdd7     ........^...^...
   22010:	8c51 9cd3 ffff ffff ffff ff5a df5e ffff     Q.........Z.^...
   22020:	ffff ffff ffff ffff ffff ff5a ffff ff5a     ..........Z...Z.
   22030:	ffff ff5a ffff ffff ffff ffff df5e ff5a     ..Z.........^.Z.
   22040:	ffff ffff ce59 8410 df5e ffff ffff ffff     ....Y...^.......
   22050:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22060:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22070:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22080:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22090:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   220a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   220b0:	ffff 9e1b 02d5 7d7a ffff ffff ffff df5e     ......z}......^.
   220c0:	ef7e df5e ffff df5e ef7e ffff ffff df5e     ~.^...^.~.....^.
   220d0:	ef7e ffff ffff df5e ef7e ffff ffff df5e     ~.....^.~.....^.
   220e0:	ef7e df5e ffff df5e ef7e ffff ffff df5e     ~.^...^.~.....^.
   220f0:	ef7e ffff ffff ffff 02d5 02d5 02d5 02d5     ~...............
   22100:	02d5 02d5 9e1b df5e ffff ffff ffff ffff     ......^.........
   22110:	ffff ffff ffff 9e1b 8410 ce59 ffff ffff     ..........Y.....
   22120:	ad55 8c51 8410 8410 8410 ffff ef7e 8c51     U.Q.........~.Q.
   22130:	8410 8410 9cd3 df5e ffff ffff ffff 9e1b     ......^.........
   22140:	8410 ce59 ffff ffff 8c51 9cd3 ff38 9e1b     ..Y.....Q...8...
   22150:	8410 8410 8410 df5e ef7e 9cd3 8410 8410     ......^.~.......
   22160:	8c51 ffff ff38 8c51 bdd7 ffff ffff ffff     Q...8.Q.........
   22170:	ffff ffff ef7e 8c51 9cd3 ffff ffff 9cd3     ....~.Q.........
   22180:	8410 ce59 9cd3 8410 8410 8410 9cd3 8c51     ..Y...........Q.
   22190:	8410 8c51 ff38 df5e 8410 8410 8410 9cd3     ..Q.8.^.........
   221a0:	ffff ffff ffff ffff bdd7 8410 9cd3 8c51     ..............Q.
   221b0:	8c51 ffff ffff ffff ad55 8410 8410 8c51     Q.......U.....Q.
   221c0:	ffff ce59 8410 8c51 8410 9cd3 8c51 8c51     ..Y...Q.....Q.Q.
   221d0:	8410 8410 9cd3 ffff ff38 8410 8410 8410     ........8.......
   221e0:	ff38 ffff 9cd3 8410 ffff ffff ffff ffff     8...............
   221f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22200:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22210:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22220:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22230:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22240:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22250:	ffff 9e1b 02d5 2376 4418 2376 4418 2376     ......v#.Dv#.Dv#
   22260:	4418 2376 4418 2376 4418 2376 4418 2376     .Dv#.Dv#.Dv#.Dv#
   22270:	4418 2376 4418 2376 4418 2376 4418 2376     .Dv#.Dv#.Dv#.Dv#
   22280:	4418 2376 4418 2376 4418 2376 4418 2376     .Dv#.Dv#.Dv#.Dv#
   22290:	4418 2376 4418 4418 1336 02d5 1336 02d5     .Dv#.D.D6...6...
   222a0:	1336 02d5 02d5 2376 cf1d ff5a ffff ffff     6.....v#..Z.....
   222b0:	ffff ffff ffff 9cd3 8c51 ff38 ffff ffff     ........Q.8.....
   222c0:	9cd3 8410 9e1b 9cd3 8c51 ff38 9e1b 8410     ........Q.8.....
   222d0:	df5e ad55 8c51 ff5a ffff ffff ffff 9cd3     ^.U.Q.Z.........
   222e0:	8c51 9cd3 9e1b 9cd3 8410 ad55 ce59 8410     Q.........U.Y...
   222f0:	9e1b ce59 8c51 bdd7 ffff 8c51 ce59 bdd7     ..Y.Q.....Q.Y...
   22300:	8c51 ce59 df1c 8410 df5e ffff ffff ffff     Q.Y.....^.......
   22310:	ffff ffff df5e 8410 ce59 ffff ffff 9cd3     ....^...Y.......
   22320:	9cd3 ff38 9cd3 8410 cf1d 9cd3 8c51 ad55     ..8.........Q.U.
   22330:	9e1b 8410 df5e 9cd3 8c51 ce59 9e1b 8410     ....^...Q.Y.....
   22340:	ffff ffff ffff ffff 9e1b 8410 8c51 8410     ............Q...
   22350:	ce59 ffff ffff ce59 8410 ad55 ce59 8410     Y.....Y...U.Y...
   22360:	ce59 ce59 8c51 8c51 ce59 ce59 9cd3 8410     Y.Y.Q.Q.Y.Y.....
   22370:	cf1d 8c51 8c51 ffff 8c51 9cd3 df5e 9cd3     ..Q.Q...Q...^...
   22380:	9cd3 ff5a 9cd3 8c51 ffff ffff ffff ffff     ..Z...Q.........
   22390:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   223f0:	ffff ae5c 02d5 02d5 2376 1336 1336 02d5     ..\.....v#6.6...
   22400:	2376 1336 1336 02d5 2376 1336 1336 02d5     v#6.6...v#6.6...
   22410:	2376 1336 1336 02d5 2376 1336 1336 02d5     v#6.6...v#6.6...
   22420:	2376 1336 1336 02d5 2376 1336 1336 02d5     v#6.6...v#6.6...
   22430:	2376 1336 1336 1336 02d5 02d5 02d5 02d5     v#6.6.6.........
   22440:	02d5 02d5 02d5 02d5 5478 ffff ffff ffff     ........xT......
   22450:	ffff ffff ffff 9cd3 8410 df5e ffff ffff     ..........^.....
   22460:	8410 9cd3 ffff 9e1b 8410 ce59 8c51 8c51     ..........Y.Q.Q.
   22470:	ff38 9e1b 8410 df5e ffff ffff ffff 9cd3     8.....^.........
   22480:	8410 8c51 8410 8410 ce59 ffff ad55 8410     ..Q.....Y...U...
   22490:	ce59 9e1b 8c51 9e1b ffff 9e1b bdd7 9cd3     Y...Q...........
   224a0:	8410 df5e bdd7 8410 ff38 9e1b ad55 9cd3     ..^.....8...U...
   224b0:	ffff ffff ce59 8410 ce59 ffff ffff 8c51     ....Y...Y.....Q.
   224c0:	9cd3 df5e 8c51 9cd3 ffff 9cd3 8c51 ffff     ..^.Q.......Q...
   224d0:	bdd7 8c51 ff38 8c51 8c51 ce59 ad55 8410     ..Q.8.Q.Q.Y.U...
   224e0:	ff38 ffff ffff ffff 8c51 8c51 9cd3 8c51     8.......Q.Q...Q.
   224f0:	8c51 df5e ffff 9cd3 8410 9e1b bdd7 8c51     Q.^...........Q.
   22500:	ad55 9e1b 8410 ce59 ffff ce59 8410 9e1b     U.....Y...Y.....
   22510:	ffff 9cd3 9cd3 ce59 8410 9cd3 ff38 9cd3     ......Y.....8...
   22520:	8c51 df1c 8c51 9cd3 ffff ffff ffff ffff     Q...Q...........
   22530:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22540:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22550:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22560:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22570:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22580:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22590:	ffff ffff df5e ff5a df5e ffff ffff ff5a     ....^.Z.^.....Z.
   225a0:	df5e ffff df5e ff5a df5e ffff ffff ff5a     ^...^.Z.^.....Z.
   225b0:	df5e ffff df5e ff5a df5e ffff ffff ff5a     ^...^.Z.^.....Z.
   225c0:	df5e ffff df5e ff5a df5e ffff ffff ff5a     ^...^.Z.^.....Z.
   225d0:	df5e ffff df5e ffff 02d5 02d5 1336 02d5     ^...^.......6...
   225e0:	1336 02d5 1336 7d7a ffff ffff ffff ffff     6...6.z}........
   225f0:	ffff ffff ffff 8c51 9cd3 ffff ffff ff5a     ......Q.......Z.
   22600:	8c51 bdd7 ffff 9cd3 9cd3 ce59 9cd3 8410     Q.........Y.....
   22610:	8c51 8410 8410 ff38 ffff ffff ffff 8410     Q.....8.........
   22620:	9cd3 ffff 9e1b 8410 df5e ffff 7d7a 8410     ........^...z}..
   22630:	8c51 8410 8c51 ad55 9e1b 8410 9cd3 8410     Q...Q.U.........
   22640:	8c51 ff5a 9e1b 8410 ffff 8410 8410 8410     Q.Z.............
   22650:	ffff ffff 9e1b 8410 df5e ffff ffff 8410     ........^.......
   22660:	9e1b ce59 8c51 ce59 ffff 8c51 9e1b ffff     ..Y.Q.Y...Q.....
   22670:	9cd3 9cd3 ce59 8410 8c51 8410 8c51 8410     ....Y...Q...Q...
   22680:	df5e ffff ffff ffff 8c51 8c51 df5e ad55     ^.......Q.Q.^.U.
   22690:	8c51 bdd7 ffff 8c51 8c51 8410 8c51 8410     Q.....Q.Q...Q...
   226a0:	9e1b ad55 8c51 ff5a ffff bdd7 8410 ff38     ..U.Q.Z.......8.
   226b0:	ffff 8c51 9e1b ce59 8c51 8410 8c51 8410     ..Q...Y.Q...Q...
   226c0:	8c51 ce59 8c51 bdd7 ffff ffff ffff ffff     Q.Y.Q...........
   226d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   226e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   226f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22700:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22710:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22720:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22740:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22750:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22770:	ffff ffff ffff ffff 02d5 02d5 02d5 02d5     ................
   22780:	1336 64d9 ffff ffff ffff ffff ffff ffff     6..d............
   22790:	ffff ffff ff38 8c51 ad55 ffff ffff 9e1b     ....8.Q.U.......
   227a0:	8410 ce59 ffff 8c51 8c51 df5e 8410 9e1b     ..Y...Q.Q.^.....
   227b0:	ffff cf1d ff38 ffff ffff ffff ff38 8c51     ....8.......8.Q.
   227c0:	ad55 ffff ff38 8c51 8c51 ffff 9cd3 8c51     U...8.Q.Q.....Q.
   227d0:	ffff ffff ce59 ffff 8410 9cd3 ffff 8c51     ....Y.........Q.
   227e0:	8c51 ffff 9cd3 8c51 ef7e ce59 ce59 ce59     Q.....Q.~.Y.Y.Y.
   227f0:	ffff ffff 9cd3 8410 ffff ffff ce59 8c51     ............Y.Q.
   22800:	ff38 ce59 8410 df5e ef7e 8410 bdd7 ffff     8.Y...^.~.......
   22810:	8410 9cd3 ff38 8c51 bdd7 ffff ff38 df5e     ....8.Q.....8.^.
   22820:	ffff ffff ffff df5e 8410 9e1b ffff ffff     ......^.........
   22830:	8410 9cd3 ffff 8c51 8c51 ffff ffff ce59     ......Q.Q.....Y.
   22840:	ffff 9cd3 9cd3 df5e ffff 9cd3 8410 df5e     ......^.......^.
   22850:	ef7e 8410 ce59 ce59 8410 ce59 ffff ce59     ~...Y.Y...Y...Y.
   22860:	ef7e ce59 8410 cf1d ffff ffff ffff ffff     ~.Y.............
   22870:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22880:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22890:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   228f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22900:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22910:	ffff ffff ffff ffff 1336 02d5 1336 4418     ........6...6..D
   22920:	df5e ffff ffff ffff ffff ffff ffff ffff     ^...............
   22930:	ffff ffff df1c 8410 ce59 ffff ffff ad55     ........Y.....U.
   22940:	8c51 ff38 df5e 8410 7d7a ffff 9e1b 8410     Q.8.^...z}......
   22950:	9e1b 8410 9cd3 ffff ffff ffff ce59 8410     ............Y...
   22960:	ce59 ffff ffff 9cd3 8c51 ff5a ce59 8410     Y.......Q.Z.Y...
   22970:	7d7a 8c51 8c51 ff5a 8c51 8c51 9cd3 8410     z}Q.Q.Z.Q.Q.....
   22980:	9e1b ff38 8c51 9cd3 ffff ffff ffff ffff     ..8.Q...........
   22990:	ffff ff38 9cd3 8410 ffff ffff 9e1b 8410     ..8.............
   229a0:	df5e ad55 8c51 ffff cf1d 8410 df1c ffff     ^.U.Q...........
   229b0:	8410 ad55 ffff 9cd3 8c51 9cd3 8c51 9cd3     ..U.....Q...Q...
   229c0:	ffff ffff ffff ce59 8410 bdd7 ffff ffff     ......Y.........
   229d0:	7d7a 8410 df5e ce59 8c51 9cd3 8c51 8410     z}..^.Y.Q...Q...
   229e0:	df5e 8410 9e1b ffff ffff 8c51 9cd3 ffff     ^.........Q.....
   229f0:	cf1d 8410 df1c ffff 8c51 8c51 ad55 8410     ........Q.Q.U...
   22a00:	ce59 bdd7 8410 ff5a ffff ffff ffff ffff     Y.....Z.........
   22a10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22a90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22aa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22ab0:	ffff ffff ffff ffff 02d5 2376 bdd7 ffff     ..........v#....
   22ac0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22ad0:	ffff ffff ff38 9cd3 ff38 ffff ffff 9e1b     ....8...8.......
   22ae0:	ad55 df5e ff38 9cd3 ce59 ffff ff38 9cd3     U.^.8...Y...8...
   22af0:	9cd3 9e1b ef7e ffff ffff ffff ff38 9cd3     ....~.......8...
   22b00:	ff38 ffff ffff ce59 9cd3 df1c ffff 9e1b     8.....Y.........
   22b10:	9cd3 9cd3 ff38 ffff ce59 8c51 ad55 9cd3     ....8...Y.Q.U...
   22b20:	ad55 df5e ad55 ce59 ffff ffff ffff ffff     U.^.U.Y.........
   22b30:	ffff df5e ad55 9e1b ffff ffff bdd7 9cd3     ..^.U...........
   22b40:	ffff 9e1b ad55 ffff ce59 9cd3 ff38 df5e     ....U...Y...8.^.
   22b50:	9cd3 ce59 ffff df5e 9cd3 8c51 ad55 df5e     ..Y...^...Q.U.^.
   22b60:	ffff ffff ffff ce59 9cd3 df1c ffff ffff     ......Y.........
   22b70:	ff38 8c51 bdd7 ffff bdd7 8c51 9cd3 ce59     8.Q.......Q...Y.
   22b80:	ffff 8c51 ff38 ffff ffff 9cd3 bdd7 ffff     ..Q.8...........
   22b90:	ce59 9cd3 ff38 ffff ff38 9cd3 9cd3 9e1b     Y...8...8.......
   22ba0:	ffff 9e1b ad55 df5e ffff ffff ffff ffff     ....U.^.........
   22bb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22bc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22bd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22be0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22bf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c50:	ffff ffff ffff ffff 7d7a ffff ffff ffff     ........z}......
   22c60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c70:	ffff ffff ffff ffff ffff ffff ffff ff5a     ..............Z.
   22c80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22c90:	ffff ffff ffff ffff ffff ffff ffff ff5a     ..............Z.
   22ca0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22cb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22cc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22cd0:	ffff ffff ffff ffff ffff ffff ffff ff5a     ..............Z.
   22ce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22cf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22d90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22da0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22db0:	534f 6f4c 6f67 0000                         OSLogo..

00022db8 <ImgOS_Logo>:
   22db8:	2db0 0002 00d0 002c e630 0001               .-....,.0...

00022dc4 <ImgMicriumLogoData>:
   22dc4:	6b2c 2924 3166 3166 3166 3166 3166 3166     ,k$)f1f1f1f1f1f1
   22dd4:	2924 9cd3 ffff ffff ffff ffff ffff ffff     $)..............
   22de4:	5aeb 2925 3166 3166 3166 3166 3166 3166     .Z%)f1f1f1f1f1f1
   22df4:	2924 b596 ffff ffff ffff a4f3 2924 3166     $)..........$)f1
   22e04:	3166 3166 2924 6b4d ffff ffff ffff ffff     f1f1$)Mk........
   22e14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e54:	ffff ffff ad55 2924 3166 3166 3166 2925     ....U.$)f1f1f1%)
   22e64:	630c ffff ffff ffff ffff ffff ffff ffff     .c..............
   22e74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22e94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22ea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22eb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22ec4:	ffff ffff ffff ffff ffff 5acb 20e4 20e4     ...........Z. . 
   22ed4:	20e4 20e4 20e4 20e4 20e4 20e4 62eb ffff     . . . . . . .b..
   22ee4:	ffff ffff ffff ffff e73c 2945 20e4 20e4     ........<.E). . 
   22ef4:	20e4 20e4 20e4 20e4 20e4 20e4 ad55 ffff     . . . . . . U...
   22f04:	ffff ffff 9cd3 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   22f14:	62eb ffff ffff ffff ffff ffff ffff ffff     .b..............
   22f24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22f34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22f44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22f54:	ffff ffff ffff ffff ffff ffff ffff a514     ................
   22f64:	20e4 20e4 20e4 20e4 20e4 5aaa ffff ffff     . . . . . .Z....
   22f74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22f84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22f94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22fa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22fb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22fc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   22fd4:	ffff ffff 5acb 20e4 20e4 20e4 20e4 20e4     .....Z. . . . . 
   22fe4:	20e4 20e4 20e4 39a6 ef7d ffff ffff ffff     . . . .9}.......
   22ff4:	ffff b5b6 20e4 20e4 20e4 20e4 20e4 20e4     ..... . . . . . 
   23004:	20e4 20e4 20e4 ad55 ffff ffff ffff 9cd3     . . . U.........
   23014:	20e4 20e4 20e4 20e4 20e4 62eb ffff ffff     . . . . . .b....
   23024:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23034:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23044:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23054:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23064:	ffff ffff ffff ffff a514 20e4 20e4 20e4     ........... . . 
   23074:	20e4 20e4 5aaa ffff ffff ffff ffff ffff     . . .Z..........
   23084:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23094:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   230a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   230b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   230c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   230d4:	ffff ffff ffff ffff ffff ffff ffff 5acb     ...............Z
   230e4:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   230f4:	20e4 ce59 ffff ffff ffff ffff 8410 20e4     . Y............ 
   23104:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   23114:	ad55 ffff ffff ffff 9cb3 20e4 20e4 20e4     U.......... . . 
   23124:	20e4 20e4 62eb ffff ffff ffff ffff ffff     . . .b..........
   23134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23154:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23164:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23174:	ffff a514 20e4 20e4 20e4 20e4 20e4 5aaa     ..... . . . . .Z
   23184:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23194:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   231a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   231b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   231c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   231d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   231e4:	ffff ffff ffff ffff 5acb 20e4 20e4 20e4     .........Z. . . 
   231f4:	20e4 20e4 20e4 20e4 20e4 20e4 9492 ffff     . . . . . . ....
   23204:	ffff ffff ffff 4a49 20e4 20e4 20e4 20e4     ......IJ. . . . 
   23214:	20e4 20e4 20e4 20e4 20e4 ad55 ffff ffff     . . . . . U.....
   23224:	ffff ef3c ce59 ce59 ce59 ce59 ce59 dedb     ..<.Y.Y.Y.Y.Y...
   23234:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23254:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23264:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23274:	ffff ffff ffff ffff ffff ffff ef5d ce59     ............].Y.
   23284:	ce59 ce59 ce59 ce59 debb ffff ffff ffff     Y.Y.Y.Y.........
   23294:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   232f4:	ffff 5acb 20e4 20e4 20e4 20e4 2945 2924     ...Z. . . . E)$)
   23304:	20e4 20e4 20e4 5aeb ffff ffff ffff d6ba     . . . .Z........
   23314:	2104 20e4 20e4 20e4 2945 2104 20e4 20e4     .!. . . E).!. . 
   23324:	20e4 20e4 ad55 ffff ffff ffff ffff ffff     . . U...........
   23334:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23344:	ffff ffff ffff ffff ffff ffff ef7d d69a     ............}...
   23354:	ce38 c618 ce59 debb f79e ffff ffff ffff     8...Y...........
   23364:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23374:	ffff ffff ffff ffff ffff ffdf d69a c618     ................
   23384:	defb ffff ffff ffff ffff ffff ffff ffff     ................
   23394:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   233a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   233b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   233c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   233d4:	ffff ffff ffff ffdf dedb c638 c638 dedb     ..........8.8...
   233e4:	ffdf ffff ffff ffff ffff ffff ef5d ce59     ............].Y.
   233f4:	c618 ce79 f79e ffff ffff ffff 5acb 20e4     ..y..........Z. 
   23404:	20e4 20e4 20e4 4a49 4a49 20e4 20e4 20e4     . . . IJIJ. . . 
   23414:	39a6 ef7d ffff ffff ad34 20e4 20e4 20e4     .9}.....4.. . . 
   23424:	20e4 5acb 2924 20e4 20e4 20e4 20e4 ad55     . .Z$). . . . U.
   23434:	ffff ffff ffff ad75 41e7 4a49 4a49 4a49     ......u..AIJIJIJ
   23444:	4208 7bef ffff ffff ffff ffff ffff ffff     .B.{............
   23454:	ffff b5b6 62eb 3165 20e4 20e4 20e4 20e4     .....be1. . . . 
   23464:	2104 3186 6b2d bdd7 ffff ffff ffff ffff     .!.1-k..........
   23474:	ffff ffff bdd7 4208 4a49 4a49 4a49 4208     .......BIJIJIJ.B
   23484:	c5f7 ef7d 5aaa 20e4 20e4 2924 5aeb ef7d     ..}..Z. . $).Z}.
   23494:	bdd7 4208 4a49 4a49 4a49 4208 7bae ffff     ...BIJIJIJ.B.{..
   234a4:	ffff ffff d69a 4208 4a49 4a49 4a49 4a28     .......BIJIJIJ(J
   234b4:	5aaa f79e ffff ffff ffff bdf7 4208 4a49     .Z...........BIJ
   234c4:	4a49 4a49 4208 736d ffff ffff ffff ad75     IJIJ.Bms......u.
   234d4:	41e7 4a49 4a49 4a49 4208 bdd7 ffff b596     .AIJIJIJ.B......
   234e4:	4a29 2104 20e4 20e4 20e4 5269 ce79 ffff     )J.!. . . iRy...
   234f4:	ffff ef5d 7bef 3165 20e4 20e4 20e4 39a6     ..]..{e1. . . .9
   23504:	9472 ffdf ffff 5acb 20e4 20e4 20e4 20e4     r......Z. . . . 
   23514:	5aab 8410 20e4 20e4 20e4 20e4 ce38 ffff     .Z... . . . 8...
   23524:	ffff 736e 20e4 20e4 20e4 2945 8c51 20e4     ..ns. . . E)Q.. 
   23534:	20e4 20e4 20e4 20e4 ad55 ffff ffff ffff     . . . . U.......
   23544:	9cb3 20e4 20e4 20e4 20e4 20e4 5aeb ffff     ... . . . . .Z..
   23554:	ffff ffff ffff ffff e6fc 5aaa 20e4 20e4     ...........Z. . 
   23564:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   23574:	20e4 5acb e73c ffff ffff ffff ffff ad55     . .Z<.........U.
   23584:	20e4 20e4 20e4 20e4 20e4 a534 5aeb 20e4     . . . . . 4..Z. 
   23594:	20e4 20e4 20e4 3166 f79e ad34 20e4 20e4     . . . f1..4.. . 
   235a4:	20e4 20e4 20e4 5aaa ffff ffff ffff c638     . . . .Z......8.
   235b4:	20e4 20e4 20e4 20e4 20e4 3166 ef7d ffff     . . . . . f1}...
   235c4:	ffff ffff b575 20e4 20e4 20e4 20e4 20e4     ....u.. . . . . 
   235d4:	4a49 ffff ffff ffff 9cb3 20e4 20e4 20e4     IJ......... . . 
   235e4:	20e4 20e4 ad34 8430 20e4 20e4 20e4 20e4     . . 4.0.. . . . 
   235f4:	20e4 20e4 20e4 2924 c618 debb 39c7 20e4     . . . $).....9. 
   23604:	20e4 20e4 20e4 20e4 20e4 20e4 6b2d ffff     . . . . . . -k..
   23614:	5acb 20e4 20e4 20e4 20e4 5aaa bdd7 20e4     .Z. . . . .Z... 
   23624:	20e4 20e4 20e4 9492 ffff ffdf 4208 20e4     . . . .......B. 
   23634:	20e4 20e4 4a28 b596 20e4 20e4 20e4 20e4     . . (J... . . . 
   23644:	20e4 ad55 ffff ffff ffff 9cd3 20e4 20e4     . U.......... . 
   23654:	20e4 20e4 20e4 62eb ffff ffff ffff ffff     . . . .b........
   23664:	defb 39c7 20e4 20e4 20e4 20e4 20e4 20e4     ...9. . . . . . 
   23674:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 4a49     . . . . . . . IJ
   23684:	f79e ffff ffff ffff ad55 20e4 20e4 20e4     ........U.. . . 
   23694:	20e4 20e4 4208 2104 20e4 20e4 20e4 20e4     . . .B.!. . . . 
   236a4:	8c71 ffff a514 20e4 20e4 20e4 20e4 20e4     q...... . . . . 
   236b4:	5aaa ffff ffff ffff c638 20e4 20e4 20e4     .Z......8.. . . 
   236c4:	20e4 20e4 3166 ef7d ffff ffff ffff b575     . . f1}.......u.
   236d4:	20e4 20e4 20e4 20e4 20e4 4a49 ffff ffff     . . . . . IJ....
   236e4:	ffff 9cd3 20e4 20e4 20e4 20e4 20e4 39a6     ..... . . . . .9
   236f4:	2104 20e4 20e4 20e4 20e4 20e4 20e4 20e4     .!. . . . . . . 
   23704:	20e4 39c7 39a6 20e4 20e4 20e4 20e4 20e4     . .9.9. . . . . 
   23714:	20e4 20e4 20e4 20e4 ad75 5acb 20e4 20e4     . . . . u..Z. . 
   23724:	20e4 20e4 528a e73c 3165 20e4 20e4 20e4     . . .R<.e1. . . 
   23734:	62eb ffff debb 2104 20e4 20e4 20e4 738e     .b.....!. . . .s
   23744:	c618 20e4 20e4 20e4 20e4 20e4 ad55 ffff     ... . . . . U...
   23754:	ffff ffff 9cd3 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23764:	62eb ffff ffff ffff ffff 5aeb 20e4 20e4     .b.........Z. . 
   23774:	20e4 20e4 20e4 20e4 2924 3186 2925 20e4     . . . . $).1%). 
   23784:	20e4 20e4 20e4 20e4 20e4 8c30 ffff ffff     . . . . . 0.....
   23794:	ffff ad55 20e4 20e4 20e4 20e4 20e4 20e4     ..U.. . . . . . 
   237a4:	20e4 20e4 20e4 20e4 2945 e6fc ffff a514     . . . . E)......
   237b4:	20e4 20e4 20e4 20e4 20e4 5aaa ffff ffff     . . . . . .Z....
   237c4:	ffff c638 20e4 20e4 20e4 20e4 20e4 3166     ..8.. . . . . f1
   237d4:	ef7d ffff ffff ffff b575 20e4 20e4 20e4     }.......u.. . . 
   237e4:	20e4 20e4 4a49 ffff ffff ffff 9cd3 20e4     . . IJ......... 
   237f4:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   23804:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   23814:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   23824:	20e4 6b2c 5acb 20e4 20e4 20e4 20e4 4a69     . ,k.Z. . . . iJ
   23834:	ffff 528a 20e4 20e4 20e4 3186 ffdf ad55     ...R. . . .1..U.
   23844:	20e4 20e4 20e4 20e4 ad34 ce59 20e4 20e4     . . . . 4.Y.. . 
   23854:	20e4 20e4 20e4 ad55 ffff ffff ffff 9cd3     . . . U.........
   23864:	20e4 20e4 20e4 20e4 20e4 62eb ffff ffff     . . . . . .b....
   23874:	ffff bdd7 20e4 20e4 20e4 20e4 20e4 20e4     ..... . . . . . 
   23884:	6b2c dedb f7be e73c 83ef 20e4 20e4 20e4     ,k....<.... . . 
   23894:	20e4 20e4 3165 e73c ffff ffff ad55 20e4     . . e1<.....U.. 
   238a4:	20e4 20e4 20e4 20e4 20e4 20e4 41e7 7bae     . . . . . . .A.{
   238b4:	5269 7bae ffff ffff a514 20e4 20e4 20e4     iR.{....... . . 
   238c4:	20e4 20e4 5aaa ffff ffff ffff c638 20e4     . . .Z......8.. 
   238d4:	20e4 20e4 20e4 20e4 3166 ef7d ffff ffff     . . . . f1}.....
   238e4:	ffff b575 20e4 20e4 20e4 20e4 20e4 4a49     ..u.. . . . . IJ
   238f4:	ffff ffff ffff 9cd3 20e4 20e4 20e4 20e4     ......... . . . 
   23904:	20e4 20e4 2104 5aeb 738e 3186 20e4 20e4     . . .!.Z.s.1. . 
   23914:	20e4 20e4 20e4 20e4 20e4 39a6 738e 5acb     . . . . . .9.s.Z
   23924:	20e4 20e4 20e4 20e4 20e4 20e4 4208 5acb     . . . . . . .B.Z
   23934:	20e4 20e4 20e4 20e4 4a49 ffff 8430 20e4     . . . . IJ..0.. 
   23944:	20e4 20e4 20e4 c618 7bcf 20e4 20e4 20e4     . . . ...{. . . 
   23954:	2104 e71c c618 20e4 20e4 20e4 20e4 20e4     .!..... . . . . 
   23964:	ad55 ffff ffff ffff 9cd3 20e4 20e4 20e4     U.......... . . 
   23974:	20e4 20e4 62eb ffff ffff ffff 630c 20e4     . . .b.......c. 
   23984:	20e4 20e4 20e4 20e4 4a69 ffdf ffff ffff     . . . . iJ......
   23994:	ffff ffff 62eb 3165 5269 6b2c 8430 a4f3     .....be1iR,k0...
   239a4:	ef5d ffff ffff ad55 20e4 20e4 20e4 20e4     ].....U.. . . . 
   239b4:	20e4 20e4 4a29 ef7d ffff ffff ffdf ffff     . . )J}.........
   239c4:	ffff a514 20e4 20e4 20e4 20e4 20e4 5aaa     ..... . . . . .Z
   239d4:	ffff ffff ffff c638 20e4 20e4 20e4 20e4     ......8.. . . . 
   239e4:	20e4 3166 ef7d ffff ffff ffff b575 20e4     . f1}.......u.. 
   239f4:	20e4 20e4 20e4 20e4 4a49 ffff ffff ffff     . . . . IJ......
   23a04:	9cd3 20e4 20e4 20e4 20e4 20e4 20e4 9472     ... . . . . . r.
   23a14:	ffff ffff ce79 2924 20e4 20e4 20e4 20e4     ....y.$). . . . 
   23a24:	20e4 39a6 defb ffff ffff 738e 20e4 20e4     . .9.......s. . 
   23a34:	20e4 20e4 20e4 3186 5acb 20e4 20e4 20e4     . . . .1.Z. . . 
   23a44:	20e4 4a49 ffff bdd7 20e4 20e4 20e4 20e4     . IJ..... . . . 
   23a54:	7bcf 4a69 20e4 20e4 20e4 4a29 ffff bdf7     .{iJ. . . )J....
   23a64:	20e4 20e4 20e4 20e4 20e4 ad55 ffff ffff     . . . . . U.....
   23a74:	ffff 9cd3 20e4 20e4 20e4 20e4 20e4 62eb     ..... . . . . .b
   23a84:	ffff ffff f7be 39c7 20e4 20e4 20e4 20e4     .......9. . . . 
   23a94:	20e4 a514 ffff ffff ffff ffff ffff f79e     . ..............
   23aa4:	f79e ffff ffff ffff ffff ffff ffff ffff     ................
   23ab4:	ad55 20e4 20e4 20e4 20e4 20e4 20e4 a534     U.. . . . . . 4.
   23ac4:	ffff ffff ffff ffff ffff ffff a514 20e4     ............... 
   23ad4:	20e4 20e4 20e4 20e4 5aaa ffff ffff ffff     . . . . .Z......
   23ae4:	c638 20e4 20e4 20e4 20e4 20e4 3166 ef7d     8.. . . . . f1}.
   23af4:	ffff ffff ffff b575 20e4 20e4 20e4 20e4     ......u.. . . . 
   23b04:	20e4 4a49 ffff ffff ffff 9cd3 20e4 20e4     . IJ......... . 
   23b14:	20e4 20e4 20e4 3165 ef3c ffff ffff ffff     . . . e1<.......
   23b24:	4a49 20e4 20e4 20e4 20e4 20e4 7bcf ffff     IJ. . . . . .{..
   23b34:	ffff ffff bdf7 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23b44:	3166 5acb 20e4 20e4 20e4 20e4 4a49 ffff     f1.Z. . . . IJ..
   23b54:	e73c 2945 20e4 20e4 20e4 3166 2925 20e4     <.E). . . f1%). 
   23b64:	20e4 20e4 7bae ffff bdf7 20e4 20e4 20e4     . . .{..... . . 
   23b74:	20e4 20e4 ad55 ffff ffff ffff 9cd3 20e4     . . U.......... 
   23b84:	20e4 20e4 20e4 20e4 62eb ffff ffff ef5d     . . . . .b....].
   23b94:	3165 20e4 20e4 20e4 20e4 20e4 d69a ffff     e1. . . . . ....
   23ba4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23bb4:	ffff ffff ffff ffff ffff ad55 20e4 20e4     ..........U.. . 
   23bc4:	20e4 20e4 20e4 2104 dedb ffff ffff ffff     . . . .!........
   23bd4:	ffff ffff ffff a514 20e4 20e4 20e4 20e4     ......... . . . 
   23be4:	20e4 5aaa ffff ffff ffff c638 20e4 20e4     . .Z......8.. . 
   23bf4:	20e4 20e4 20e4 3166 ef7d ffff ffff ffff     . . . f1}.......
   23c04:	b575 20e4 20e4 20e4 20e4 20e4 4a49 ffff     u.. . . . . IJ..
   23c14:	ffff ffff 9cd3 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23c24:	4a49 ffff ffff ffff ffff 5269 20e4 20e4     IJ........iR. . 
   23c34:	20e4 20e4 20e4 9cd3 ffff ffff ffff ce59     . . . ........Y.
   23c44:	20e4 20e4 20e4 20e4 20e4 3166 5acb 20e4     . . . . . f1.Z. 
   23c54:	20e4 20e4 20e4 4a49 ffff ffff 5269 20e4     . . . IJ....iR. 
   23c64:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 b575     . . . . . . . u.
   23c74:	ffff bdf7 20e4 20e4 20e4 20e4 20e4 ad55     ..... . . . . U.
   23c84:	ffff ffff ffff 9cd3 20e4 20e4 20e4 20e4     ......... . . . 
   23c94:	20e4 62eb ffff ffff e73c 2945 20e4 20e4     . .b....<.E). . 
   23ca4:	20e4 20e4 2924 dedb ffff ffff ffff ffff     . . $)..........
   23cb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   23cc4:	ffff ffff ad55 20e4 20e4 20e4 20e4 20e4     ....U.. . . . . 
   23cd4:	3186 f79e ffff ffff ffff ffff ffff ffff     .1..............
   23ce4:	a514 20e4 20e4 20e4 20e4 20e4 5aaa ffff     ... . . . . .Z..
   23cf4:	ffff ffff c638 20e4 20e4 20e4 20e4 20e4     ....8.. . . . . 
   23d04:	3166 ef7d ffff ffff ffff ad75 20e4 20e4     f1}.......u.. . 
   23d14:	20e4 20e4 20e4 4a49 ffff ffff ffff 9cd3     . . . IJ........
   23d24:	20e4 20e4 20e4 20e4 20e4 5269 ffff ffff     . . . . . iR....
   23d34:	ffff ffff 5269 20e4 20e4 20e4 20e4 20e4     ....iR. . . . . 
   23d44:	a4f3 ffff ffff ffff ce59 20e4 20e4 20e4     ........Y.. . . 
   23d54:	20e4 20e4 3166 5acb 20e4 20e4 20e4 20e4     . . f1.Z. . . . 
   23d64:	4a49 ffff ffff 8410 20e4 20e4 20e4 20e4     IJ....... . . . 
   23d74:	20e4 20e4 20e4 2924 defb ffff bdf7 20e4     . . . $)....... 
   23d84:	20e4 20e4 20e4 20e4 ad55 ffff ffff ffff     . . . . U.......
   23d94:	9cd3 20e4 20e4 20e4 20e4 20e4 62eb ffff     ... . . . . .b..
   23da4:	ffff ef7d 3166 20e4 20e4 20e4 20e4 20e4     ..}.f1. . . . . 
   23db4:	ce59 ffff ffff ffff ffff ffff ffdf ffdf     Y...............
   23dc4:	ffff ffff ffff ffff ffff ffff ffff ad55     ..............U.
   23dd4:	20e4 20e4 20e4 20e4 20e4 41e7 ffdf ffff     . . . . . .A....
   23de4:	ffff ffff ffff ffff ffff a514 20e4 20e4     ............. . 
   23df4:	20e4 20e4 20e4 5aaa ffff ffff ffff c638     . . . .Z......8.
   23e04:	20e4 20e4 20e4 20e4 20e4 2945 e71c ffff     . . . . . E)....
   23e14:	ffff ffff 94b2 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23e24:	4a49 ffff ffff ffff 9cd3 20e4 20e4 20e4     IJ......... . . 
   23e34:	20e4 20e4 5269 ffff ffff ffff ffff 5269     . . iR........iR
   23e44:	20e4 20e4 20e4 20e4 20e4 9cf3 ffff ffff     . . . . . ......
   23e54:	ffff ce59 20e4 20e4 20e4 20e4 20e4 3166     ..Y.. . . . . f1
   23e64:	5acb 20e4 20e4 20e4 20e4 4a49 ffff ffff     .Z. . . . IJ....
   23e74:	bdd7 20e4 20e4 20e4 20e4 20e4 20e4 20e4     ... . . . . . . 
   23e84:	4a29 ffff ffff bdf7 20e4 20e4 20e4 20e4     )J....... . . . 
   23e94:	20e4 ad55 ffff ffff ffff 9cd3 20e4 20e4     . U.......... . 
   23ea4:	20e4 20e4 20e4 62eb ffff ffff ffdf 4208     . . . .b.......B
   23eb4:	20e4 20e4 20e4 20e4 20e4 8c51 ffff ffff     . . . . . Q.....
   23ec4:	ffff ffff ffff a534 39a6 528a 6b4d 83ef     ......4..9.RMk..
   23ed4:	9492 c618 ffff ffff ad55 20e4 20e4 20e4     ........U.. . . 
   23ee4:	20e4 20e4 4228 ffdf ffff ffff ffff ffff     . . (B..........
   23ef4:	ffff ffff a514 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23f04:	5aaa ffff ffff ffff c638 20e4 20e4 20e4     .Z......8.. . . 
   23f14:	20e4 20e4 20e4 ad55 ffff ffff ffff 5aaa     . . . U........Z
   23f24:	20e4 20e4 20e4 20e4 20e4 4a49 ffff ffff     . . . . . IJ....
   23f34:	ffff 9cd3 20e4 20e4 20e4 20e4 20e4 5269     ..... . . . . iR
   23f44:	ffff ffff ffff ffff 5269 20e4 20e4 20e4     ........iR. . . 
   23f54:	20e4 20e4 9cf3 ffff ffff ffff ce59 20e4     . . ........Y.. 
   23f64:	20e4 20e4 20e4 20e4 3166 5acb 20e4 20e4     . . . . f1.Z. . 
   23f74:	20e4 20e4 4a49 ffff ffff e73c 3165 20e4     . . IJ....<.e1. 
   23f84:	20e4 20e4 20e4 20e4 20e4 7bcf ffff ffff     . . . . . .{....
   23f94:	bdf7 20e4 20e4 20e4 20e4 20e4 ad55 ffff     ... . . . . U...
   23fa4:	ffff ffff 9cd3 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   23fb4:	62eb ffff ffff ffff 7bef 20e4 20e4 20e4     .b.......{. . . 
   23fc4:	20e4 20e4 2945 ce59 ffff ffff ffff d69a     . . E)Y.........
   23fd4:	3166 20e4 20e4 20e4 20e4 20e4 9cf3 ffff     f1. . . . . ....
   23fe4:	ffff ad55 20e4 20e4 20e4 20e4 20e4 4228     ..U.. . . . . (B
   23ff4:	ffdf ffff ffff ffff ffff ffff ffff a514     ................
   24004:	20e4 20e4 20e4 20e4 20e4 5aaa ffff ffff     . . . . . .Z....
   24014:	ffff c638 20e4 20e4 20e4 20e4 20e4 20e4     ..8.. . . . . . 
   24024:	3165 9492 b5b6 736d 20e4 20e4 20e4 20e4     e1....ms. . . . 
   24034:	20e4 20e4 4a49 ffff ffff ffff 9cd3 20e4     . . IJ......... 
   24044:	20e4 20e4 20e4 20e4 5269 ffff ffff ffff     . . . . iR......
   24054:	ffff 5269 20e4 20e4 20e4 20e4 20e4 9cf3     ..iR. . . . . ..
   24064:	ffff ffff ffff ce59 20e4 20e4 20e4 20e4     ......Y.. . . . 
   24074:	20e4 3166 5acb 20e4 20e4 20e4 20e4 4a49     . f1.Z. . . . IJ
   24084:	ffff ffff ffff 62eb 20e4 20e4 20e4 20e4     .......b. . . . 
   24094:	20e4 20e4 b575 ffff ffff bdf7 20e4 20e4     . . u........ . 
   240a4:	20e4 20e4 20e4 ad55 ffff ffff ffff 9cd3     . . . U.........
   240b4:	20e4 20e4 20e4 20e4 20e4 62eb ffff ffff     . . . . . .b....
   240c4:	ffff d6ba 2924 20e4 20e4 20e4 20e4 20e4     ....$). . . . . 
   240d4:	2945 7bef ad34 83ef 3165 20e4 20e4 20e4     E).{4...e1. . . 
   240e4:	20e4 20e4 39c7 f79e ffff ffff ad55 20e4     . . .9......U.. 
   240f4:	20e4 20e4 20e4 20e4 4228 ffdf ffff ffff     . . . . (B......
   24104:	ffff ffff ffff ffff a514 20e4 20e4 20e4     ........... . . 
   24114:	20e4 20e4 5aaa ffff ffff ffff c638 20e4     . . .Z......8.. 
   24124:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   24134:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 4a49     . . . . . . . IJ
   24144:	ffff ffff ffff 9cd3 20e4 20e4 20e4 20e4     ......... . . . 
   24154:	20e4 5269 ffff ffff ffff ffff 5269 20e4     . iR........iR. 
   24164:	20e4 20e4 20e4 20e4 9cf3 ffff ffff ffff     . . . . ........
   24174:	ce59 20e4 20e4 20e4 20e4 20e4 3166 5acb     Y.. . . . . f1.Z
   24184:	20e4 20e4 20e4 20e4 4a49 ffff ffff ffff     . . . . IJ......
   24194:	94b2 20e4 20e4 20e4 20e4 20e4 2924 defb     ... . . . . $)..
   241a4:	ffff ffff bdf7 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   241b4:	ad55 ffff ffff ffff 9cd3 20e4 20e4 20e4     U.......... . . 
   241c4:	20e4 20e4 62eb ffff ffff ffff ffff 8c71     . . .b........q.
   241d4:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   241e4:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 ad75     . . . . . . . u.
   241f4:	ffff ffff ffff ad55 20e4 20e4 20e4 20e4     ......U.. . . . 
   24204:	20e4 4228 ffdf ffff ffff ffff ffff ffff     . (B............
   24214:	ffff a514 20e4 20e4 20e4 20e4 20e4 5aaa     ..... . . . . .Z
   24224:	ffff ffff ffff c638 20e4 20e4 20e4 20e4     ......8.. . . . 
   24234:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   24244:	20e4 20e4 20e4 20e4 4a49 ffff ffff ffff     . . . . IJ......
   24254:	9cd3 20e4 20e4 20e4 20e4 20e4 5269 ffff     ... . . . . iR..
   24264:	ffff ffff ffff 5269 20e4 20e4 20e4 20e4     ......iR. . . . 
   24274:	20e4 9cf3 ffff ffff ffff ce59 20e4 20e4     . ........Y.. . 
   24284:	20e4 20e4 20e4 3166 5acb 20e4 20e4 20e4     . . . f1.Z. . . 
   24294:	20e4 4a49 ffff ffff ffff ce59 20e4 20e4     . IJ......Y.. . 
   242a4:	20e4 20e4 20e4 4a49 ffff ffff ffff bdf7     . . . IJ........
   242b4:	20e4 20e4 20e4 20e4 20e4 ad55 ffff ffff     . . . . . U.....
   242c4:	ffff 9cd3 20e4 20e4 20e4 20e4 20e4 62eb     ..... . . . . .b
   242d4:	ffff ffff ffff ffff ffff 7bef 20e4 20e4     ...........{. . 
   242e4:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   242f4:	20e4 20e4 20e4 9492 ffff ffff ffff ffff     . . . ..........
   24304:	ad55 20e4 20e4 20e4 20e4 20e4 4228 ffdf     U.. . . . . (B..
   24314:	ffff ffff ffff ffff ffff ffff a514 20e4     ............... 
   24324:	20e4 20e4 20e4 20e4 5aaa ffff ffff ffff     . . . . .Z......
   24334:	c638 20e4 20e4 20e4 20e4 20e4 20e4 20e4     8.. . . . . . . 
   24344:	20e4 20e4 20e4 20e4 20e4 20e4 20e4 20e4     . . . . . . . . 
   24354:	20e4 4a49 ffff ffff ffff 9cd3 20e4 20e4     . IJ......... . 
   24364:	20e4 20e4 20e4 5269 ffff ffff ffff ffff     . . . iR........
   24374:	5269 20e4 20e4 20e4 20e4 20e4 9cf3 ffff     iR. . . . . ....
   24384:	ffff ffff ce59 20e4 20e4 20e4 20e4 20e4     ....Y.. . . . . 
   24394:	3166 5acb 20e4 20e4 20e4 20e4 4a49 ffff     f1.Z. . . . IJ..
   243a4:	ffff ffff f79e 39a6 20e4 20e4 20e4 20e4     .......9. . . . 
   243b4:	7bcf ffff ffff ffff bdd7 20e4 20e4 20e4     .{......... . . 
   243c4:	20e4 20e4 ad55 ffff ffff ffff 9cb3 20e4     . . U.......... 
   243d4:	20e4 20e4 20e4 20e4 5aeb ffff ffff ffff     . . . . .Z......
   243e4:	ffff ffff ffff b5b6 41e7 20e4 20e4 20e4     .........A. . . 
   243f4:	20e4 20e4 20e4 20e4 20e4 20e4 4208 c5f7     . . . . . . .B..
   24404:	ffff ffff ffff ffff ffff ad55 20e4 20e4     ..........U.. . 
   24414:	20e4 20e4 20e4 4208 ffdf ffff ffff ffff     . . . .B........
   24424:	ffff ffff ffff a514 20e4 20e4 20e4 20e4     ......... . . . 
   24434:	20e4 5aaa ffff ffff ffff c638 20e4 20e4     . .Z......8.. . 
   24444:	20e4 20e4 20e4 3166 4a29 20e4 20e4 20e4     . . . f1)J. . . 
   24454:	528a 3186 20e4 20e4 20e4 20e4 4a49 ffff     .R.1. . . . IJ..
   24464:	ffff ffff 9cb3 20e4 20e4 20e4 20e4 20e4     ....... . . . . 
   24474:	5269 ffff ffff ffff ffff 5269 20e4 20e4     iR........iR. . 
   24484:	20e4 20e4 20e4 9cf3 ffff ffff ffff ce59     . . . ........Y.
   24494:	20e4 20e4 20e4 20e4 20e4 3166 c618 a534     . . . . . f1..4.
   244a4:	ad55 ad55 ad34 bdd7 ffff ffff ffff ffff     U.U.4...........
   244b4:	bdd7 ad34 ad55 ad55 a534 dedb ffff ffff     ..4.U.U.4.......
   244c4:	ffff e73c ad34 ad55 ad55 ad55 a534 defb     ..<.4.U.U.U.4...
   244d4:	ffff ffff ffff debb a534 ad55 ad55 ad55     ........4.U.U.U.
   244e4:	a534 c618 ffff ffff ffff ffff ffff ffff     4...............
   244f4:	ffff f7be c618 9492 738e 630c 5acb 5aeb     .........s.c.Z.Z
   24504:	6b4d 8c51 bdf7 f7be ffff ffff ffff ffff     MkQ.............
   24514:	ffff ffff defb a534 ad55 ad55 ad55 ad35     ......4.U.U.U.5.
   24524:	bdd7 ffff ffff ffff ffff ffff ffff ffff     ................
   24534:	dedb a534 ad55 ad55 ad55 ad34 c5f7 ffff     ..4.U.U.U.4.....
   24544:	ffff ffff c638 20e4 20e4 20e4 20e4 20e4     ....8.. . . . . 
   24554:	3186 dedb 8c51 5aaa 8430 ef3c b596 ad55     .1..Q..Z0.<...U.
   24564:	ad55 ad55 ad34 bdd7 ffff ffff ffff debb     U.U.4...........
   24574:	a534 ad55 ad55 ad55 ad34 bdd7 ffff ffff     4.U.U.U.4.......
   24584:	ffff ffff bdf7 ad34 ad55 ad55 ad55 a534     ......4.U.U.U.4.
   24594:	dedb ffff ffff ffff ef7d ad55 ad55 ad55     ........}.U.U.U.
   245a4:	ad55 ad55 b596 ffff ffff ffff ffff ffff     U.U.............
   245b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   245c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   245d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   245e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   245f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24604:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24614:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24624:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24634:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24644:	ffff ffff ffff ffff ffff ffff ffff c638     ..............8.
   24654:	20e4 20e4 20e4 20e4 20e4 3166 ef7d ffff     . . . . . f1}...
   24664:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   246f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24704:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24714:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24754:	ffff ffff ffff ffff c638 20e4 20e4 20e4     ........8.. . . 
   24764:	20e4 20e4 3166 ef7d ffff ffff ffff ffff     . . f1}.........
   24774:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24784:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24794:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   247f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24804:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24814:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24824:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24834:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24844:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24854:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24864:	ffff c638 20e4 20e4 20e4 20e4 20e4 3166     ..8.. . . . . f1
   24874:	ef7d ffff ffff ffff ffff ffff ffff ffff     }...............
   24884:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24894:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   248f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24904:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24914:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24924:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24934:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24944:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24954:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24964:	ffff ffff ffff ffff ffff ffff c638 20e4     ............8.. 
   24974:	20e4 20e4 20e4 20e4 3166 ef7d ffff ffff     . . . . f1}.....
   24984:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24994:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   249f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24a74:	ffff ffff ffff c638 20e4 20e4 20e4 20e4     ......8.. . . . 
   24a84:	20e4 3166 ef7d ffff ffff ffff ffff ffff     . f1}...........
   24a94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24aa4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ab4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ac4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ad4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ae4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24af4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24b84:	e6fc 8410 8430 8430 8430 8410 9472 f7be     ....0.0.0...r...
   24b94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ba4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24bb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24bc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24bd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24be4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24bf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24c94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ca4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24cb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24cc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24cd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ce4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24cf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24d94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24da4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24db4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24dc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24dd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24de4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24df4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24e94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ea4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24eb4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ec4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ed4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24ef4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24f04:	9cb3 8410 8410 7bcf ce59 ffff ffff ffff     .......{Y.......
   24f14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24f24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24f34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24f44:	ffff ffff ffff ffff ffff f7be 9492 ef5d     ..............].
   24f54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24f64:	ffff ffff ffff ffff ffff b596 8410 8410     ................
   24f74:	7bcf a514 ffff ffff ffff ffff ffff ffff     .{..............
   24f84:	ffff ffff b575 bdf7 ffff ffff ffff ffff     ....u...........
   24f94:	ffff ffff ffff ffff ffff ffff ffff a4f3     ................
   24fa4:	dedb ffff ffff ffff a514 ce79 ffff ffff     ..........y.....
   24fb4:	ffff ffff ffff ffff ffff ffff a514 dedb     ................
   24fc4:	ffff ffff ffff d6ba 7bcf 736d bdd7 ffff     .........{ms....
   24fd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   24fe4:	ffff ffff ef5d ef3c ffff ffff ffff ffff     ....].<.........
   24ff4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25004:	ffff ffff ffff ffff ffff 3165 736d 94b2     ..........e1ms..
   25014:	8c51 ce79 ffff ffff f7be ffdf ffff f7be     Q.y.............
   25024:	ffff ffff ffff ffff f79e ffff ffff ffff     ................
   25034:	ffdf f79e ffff ffff ffff ffff ffff ffff     ................
   25044:	ffff ffdf ffff ffff f79e ffdf ffff ffff     ................
   25054:	ffff ffdf f79e 8c51 e73c ffff ffff f7be     ......Q.<.......
   25064:	ffdf ffff ffff ffdf f7be ffff ffff ffff     ................
   25074:	ffff ffff 62ec 4228 94b2 8c51 ad55 ffff     .....b(B..Q.U...
   25084:	ffff ffdf f7be ffff f79e ffdf ffff 62eb     ...............b
   25094:	7bcf ffff ffdf ffff ffff ffdf f79e ffff     .{..............
   250a4:	ffff ffff ffdf f7be 4208 bdd7 ffff ffdf     .........B......
   250b4:	ffdf 4208 9cf3 ffff ffdf f79e ffff ffff     ...B............
   250c4:	ffff ffdf f7be 4208 b596 ffff ffff f79e     .......B........
   250d4:	39c7 7bcf 9cd3 2104 bdf7 ffff ffff ffff     .9.{...!........
   250e4:	ffff ffdf ffff f7be f79e ffff ffff 4a49     ..............IJ
   250f4:	ad35 ffff ffff f79e ffdf ffff ffff ffff     5...............
   25104:	f7be ffdf ffff f79e ffff ffff ffff f79e     ................
   25114:	f7be ffff 2945 a4f3 dedb d69a ffff ad55     ....E)........U.
   25124:	5aaa 5aeb 5aaa 83ef 41e7 94b2 ffff 6b4d     .Z.Z.Z...A....Mk
   25134:	6b2c 4208 8410 ffff ce59 4a49 4208 83ef     ,k.B....Y.IJ.B..
   25144:	e71c 5aeb ef7d 7bef 8430 ef7d 5aeb e73c     ...Z}..{0.}..Z<.
   25154:	8410 4a69 6b2c f7be c5f7 5269 4a29 bdd7     ..iJ,k....iR)J..
   25164:	738e ef7d a4f3 62eb 5aeb 4a69 ef5d ef7d     .s}....b.ZiJ].}.
   25174:	5aaa 5aab 62eb 9492 ffff ffff ffff 5aeb     .Z.Z.b.........Z
   25184:	630c dedb ce79 ef7d e71c 5aaa 6b2d 4a49     .c..y.}....Z-kIJ
   25194:	7bcf 5269 630c ffff 6b4d 39c7 5aaa 5aaa     .{iR.c..Mk.9.Z.Z
   251a4:	ef7d e71c 5aaa 5269 8c71 ffff bdd7 4208     }....ZiRq......B
   251b4:	630c 2945 c638 d69a 4a28 62eb 2945 ad55     .cE)8...(J.bE)U.
   251c4:	ef7d 5acb 5269 8c51 ffff c618 4208 630c     }..ZiRQ......B.c
   251d4:	2945 bdd7 ffff ffff f79e 3186 736d ce59     E).........1msY.
   251e4:	c618 f79e 7bae a514 ffff 6b2c c618 b596     .....{....,k....
   251f4:	5aeb 5aaa 94b2 c618 20e4 4a49 ef7d 8c30     .Z.Z..... IJ}.0.
   25204:	4a69 62ec ef7d ce38 528a 630c 5269 7bcf     iJ.b}.8..R.ciR.{
   25214:	4208 7bef ffff 8c51 5aeb 5aaa ad75 3165     .B.{..Q..Z.Zu.e1
   25224:	4208 5aaa 5269 e73c 9cd3 39c7 e73c 39a6     .B.ZiR<....9<..9
   25234:	9492 ad75 4a29 ffdf 39c7 9cd3 defb 3186     ..u.)J...9.....1
   25244:	ce79 4a49 9492 ef3c 39c7 b575 5acb 9cd3     y.IJ..<..9u..Z..
   25254:	4a29 5269 a534 62ec bdd7 2945 b575 4a29     )JiR4..b..E)u.)J
   25264:	8c71 b5b6 3166 debb ef3c 39c7 e71c 8410     q...f1..<..9....
   25274:	528a f79e 41e7 bdd7 9492 5aaa ffdf 528a     .R...A.....Z...R
   25284:	738e ffff ffff ffff 6b2c 2945 5aaa 4a29     .s......,kE).Z)J
   25294:	ad75 e71c 2945 d6ba 73ae 5aaa e71c 3186     u...E)...s.Z...1
   252a4:	defb 6b4d 5acb f7be 4208 94b2 7bef 528a     ..Mk.Z...B...{.R
   252b4:	ad75 3186 d6ba 5269 94b2 e73c 3165 c618     u..1..iR..<.e1..
   252c4:	5acb 7bcf ef7d 3166 ad75 8410 4a69 b575     .Z.{}.f1u...iJu.
   252d4:	3186 d69a 5aaa 9472 ef5d 3166 bdb6 ffff     .1...Zr.].f1....
   252e4:	ffff ffff d69a 62eb 2945 4208 e6fc ad35     .......bE).B..5.
   252f4:	5269 debb 39c7 f79e 6b4d 4a49 9472 b596     iR...9..MkIJr...
   25304:	f7be 39a6 a534 d69a 2924 ad55 5aaa 8c30     ...94...$)U..Z0.
   25314:	bdf7 3186 ef5d 4a49 8410 bdd7 3186 ef7d     ...1].IJ.....1}.
   25324:	4208 5aeb 9472 ce38 2925 c618 ffff ffff     .B.Zr.8.%)......
   25334:	ffff 8c71 5269 ffff 41e7 b5b6 c638 4a28     ..q.iR...A..8.(J
   25344:	ffdf 41e7 c618 ffff 39c7 b5b6 39c7 bdf7     ...A.....9...9..
   25354:	ffff 5269 a514 a534 3166 6b2c 630c 39a6     ..iR..4.f1,k.c.9
   25364:	ad55 b596 2945 9cf3 8430 b5b6 ad55 4a69     U...E)..0...U.iJ
   25374:	ffff ef7d 39c7 e71c 8410 738e ffff 4a69     ..}..9.....s..iJ
   25384:	b5b6 8410 6b2c ffff 6b4d 738e ffff ffff     ....,k..Mk.s....
   25394:	ffff 5acb 7bae ffff ffff ffff d6ba 39a6     ...Z.{.........9
   253a4:	ffff 7bef 7bae ffff 39c7 dedb 6b2c 738e     ...{.{...9..,k.s
   253b4:	ffff 5acb 8410 6b4d 5aaa a514 8410 dedb     ...Z..Mk.Z......
   253c4:	4208 b5b6 ffff 39c7 bdd7 4a69 9cd3 ffff     .B.....9..iJ....
   253d4:	41e7 ad35 738e 528a a514 8410 dedb 4a29     .A5..s.R......)J
   253e4:	b575 ffff 41e7 b5b6 ffff ffff dedb 738e     u....A.........s
   253f4:	f79e ffff 4208 8410 ffdf 4208 5aeb 738e     .....B.....B.Z.s
   25404:	ffff debb 8410 4a49 4a49 ef7d 41e7 bdb6     ......IJIJ}..A..
   25414:	c638 2924 9cb3 8c51 b5b6 b5b6 4a28 ffff     8.$)..Q.....(J..
   25424:	5aaa a534 d69a 3166 f79e ce38 7bcf 41e7     .Z4...f1..8..{.A
   25434:	6b2c 3165 528a 736d 630c c618 9cb3 5269     ,ke1.Rms.c....iR
   25444:	ffff 41e7 b5b6 c618 4a28 ffdf 41e7 5aeb     ...A....(J...A.Z
   25454:	7bcf 39c7 f7be 83ef 4228 738e 39a6 e73c     .{.9....(B.s.9<.
   25464:	dedb 20e4 9cb3 9492 20e4 e71c e71c 39a6     ... ..... .....9
   25474:	8c51 5acb ce79 ad75 5269 ffff ef7d 39a6     Q..Zy.u.iR..}..9
   25484:	e71c 83ef 738e ffff 4a49 b596 d69a 39a6     .....s..IJ.....9
   25494:	738e 3166 7bcf ffff ffff ffff 630c 39a6     .sf1.{.......c.9
   254a4:	736e 6b2c 8c71 d6ba 39c7 ffdf 7bef 7bae     ns,kq....9...{.{
   254b4:	ffff 39a6 dedb 736e 3186 8410 2945 c638     ...9..ns.1..E)8.
   254c4:	a534 4208 8c51 630c ffff 7bcf 4a29 7bef     4..BQ..c...{)J.{
   254d4:	20e4 ce59 9492 39c7 83ef 20e4 b575 b575     . Y....9... u.u.
   254e4:	41e7 8c71 62ec ffdf 8410 4228 83ef 20e4     .Aq..b....(B... 
   254f4:	bdd7 ffff ffff ef7d 39c7 4a69 73ae 2925     ......}..9iJ.s%)
   25504:	b596 ffff 7bae 20e4 bdf7 ffff 7bcf 7bae     .....{. .....{.{
   25514:	8430 39c7 ef7d 4a49 5aeb debb 41e7 8410     0..9}.IJ.Z...A..
   25524:	62eb c618 bdb6 4a28 ffff 528a a534 d69a     .b....(J...R4...
   25534:	3166 ef5d 630c 8430 736d 5aaa b5b6 a534     f1]..c0.ms.Z..4.
   25544:	a514 9cf3 d69a dedb c618 ffff bdd7 e73c     ..............<.
   25554:	ef5d c5f7 ffdf 4208 9472 9cd3 debb ffff     ]......Br.......
   25564:	ffdf ad75 9492 dedb ffff ffff b5b6 e73c     ..u...........<.
   25574:	e71c b5b6 ffff ffff debb 8c71 b5b6 ffff     ..........q.....
   25584:	e6fc c618 ffff ffdf bdd7 f7be d69a ce79     ..............y.
   25594:	ffff c5f7 e73c e6fc 8410 b596 630c 7bcf     ....<........c.{
   255a4:	ffff ffff ffff ce59 a534 a514 a4f3 b5b6     ......Y.4.......
   255b4:	ef7d bdd7 ffff d69a d679 ffff bdb6 f79e     }.......y.......
   255c4:	ce59 c618 9cf3 c5f7 ffff ffff b5b6 8c71     Y.............q.
   255d4:	d69a ffff f7be a514 b596 bdf7 ef3c ffff     ............<...
   255e4:	ad55 ad55 bdf7 defb ffff bdd7 8c71 d679     U.U.........q.y.
   255f4:	ffff ffdf a514 b575 bdf7 e73c ffff ffff     ......u...<.....
   25604:	ffff ef5d a4f3 8c71 ce79 ffff ffff 9492     ..]...q.y.......
   25614:	39a6 f7be ffff ef7d a4f3 94b2 defb ffff     .9....}.........
   25624:	ce59 94b2 f79e defb 9492 ad75 ffff e73c     Y.........u...<.
   25634:	bdf7 ffff c618 defb ef7d b5b6 ffff e71c     ........}.......
   25644:	9cb3 9cf3 ef7d ffff ffff ffff ffff ffff     ....}...........
   25654:	ffff ffff ffff ffff ffff ffff ffff ffdf     ................
   25664:	5aaa ce59 ffff ffff ffff ffff ffff ffff     .ZY.............
   25674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   256a4:	d69a 4a49 5acb 4a29 d69a ffff ffff ffff     ..IJ.Z)J........
   256b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   256c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   256d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   256e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   256f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25704:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25714:	ffff ffff ffff a514 3165 a514 ffff ffff     ........e1......
   25724:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25734:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25744:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25754:	694d 7263 7569 4c6d 676f 006f               MicriumLogo.

00025760 <ImgMicriumLogo>:
   25760:	5754 0002 0085 0028 2dc4 0002               TW....(..-..

0002576c <ImgKeilLogoData>:
   2576c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2577c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2578c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2579c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   257fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2580c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2581c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2582c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2583c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2584c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2585c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2586c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2587c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2588c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2589c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   258ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   258bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   258cc:	ffff ffff ffff f7df df7e d75d df7e df7e     ........~.].~.~.
   258dc:	df7e df7e df7e df7d df7e df7e df7e df7e     ~.~.~.}.~.~.~.~.
   258ec:	df7e df7e df7e df7e df7e df7e df7e df7e     ~.~.~.~.~.~.~.~.
   258fc:	df7e df7e df7e df7e df7e df7e df7e df7e     ~.~.~.~.~.~.~.~.
   2590c:	df7e df7e df7e df7e df7e df7e df7e df7e     ~.~.~.~.~.~.~.~.
   2591c:	df7e df7e df7e df9e df7e df7e df7e df7e     ~.~.~...~.~.~.~.
   2592c:	df7e df7e f7df ffff ffff ffff ffff ffff     ~.~.............
   2593c:	ffff ffff f7df e79e df7e df7e df7e df7e     ........~.~.~.~.
   2594c:	df7e df7e df7d d77e e79e ffdf ffff ffff     ~.~.}.~.........
   2595c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2596c:	f7df df7d df7e df5e df7e df7e df7e df7e     ..}.~.^.~.~.~.~.
   2597c:	df7e df7e df5d ffff ffff ffff ffff ffff     ~.~.]...........
   2598c:	ffff df7e df7e df7d df7e df7e df7e df7d     ..~.~.}.~.~.~.}.
   2599c:	df7e df7e df7e df7e df7e df7e df7e df7e     ~.~.~.~.~.~.~.~.
   259ac:	df7e df7e df7e df7e df7e df7e df7e df7e     ~.~.~.~.~.~.~.~.
   259bc:	df7e efbe ffff ffff ffff ffff ffff ffdf     ~...............
   259cc:	e79e df7e df7e df7e df7e df7e df7e e77e     ..~.~.~.~.~.~.~.
   259dc:	df7e df9e f7df ffff ffff ffff ffff ffff     ~...............
   259ec:	ffff f7df df9e d77e df9e df7e df7e df7e     ......~...~.~.~.
   259fc:	df7d df7d df7e e77e ffff ffff ffff ffff     }.}.~.~.........
   25a0c:	ffff df7d 7e19 4d57 5db8 5577 aebb 65b8     ..}..~WM.]wU...e
   25a1c:	cf3d ffff cf5d 8e5a c6fc ffff 9e9b ffdf     =...].Z.........
   25a2c:	ffff ffff ffff b6dc 2cf6 2cf5 3516 3516     .........,.,.5.5
   25a3c:	3d16 3d16 3516 34f6 3516 3d16 3d16 3d16     .=.=.5.4.5.=.=.=
   25a4c:	3d16 3d16 3d16 3d16 3516 3516 3516 3516     .=.=.=.=.5.5.5.5
   25a5c:	3516 3d16 3d16 3d16 3d16 3d16 3516 3516     .5.=.=.=.=.=.5.5
   25a6c:	3d16 3516 3516 3d16 3d16 3d16 3516 3516     .=.5.5.=.=.=.5.5
   25a7c:	3d16 3d16 3516 3d16 3d16 34f6 3516 3516     .=.=.5.=.=.4.5.5
   25a8c:	34f6 b6dc ffff ffff ffff ffff ffff ffff     .4..............
   25a9c:	ffff aedc 4d77 34f6 3d16 3cf6 3516 3cf6     ....wM.4.=.<.5.<
   25aac:	3d16 3516 34f6 75d9 df5e ffff ffff ffff     .=.5.4.u^.......
   25abc:	ffff ffff ffff ffff ffff ffff befc 3d16     ...............=
   25acc:	3516 3516 34f6 34f6 3516 3d16 3d16 34f6     .5.5.4.4.5.=.=.4
   25adc:	3516 65b8 efbf ffff ffff ffff ffff df7e     .5.e..........~.
   25aec:	4d77 34f6 3516 3516 3d16 3d16 3d16 3d16     wM.4.5.5.=.=.=.=
   25afc:	3d16 3516 3516 3d16 34f6 3d16 3d16 3d16     .=.5.5.=.4.=.=.=
   25b0c:	3d16 3516 3516 3d16 3516 3516 34f6 4536     .=.5.5.=.5.5.46E
   25b1c:	969b ffff ffff ffff ffff ffff cf5d 65b8     ............]..e
   25b2c:	34f5 3d16 3516 3d16 3516 3516 3d16 34d6     .4.=.5.=.5.5.=.4
   25b3c:	5577 befc ffff ffff ffff ffff ffff ffff     wU..............
   25b4c:	c73d 4d57 34f6 3d16 3516 3d16 3516 3d16     =.WM.4.=.5.=.5.=
   25b5c:	3d16 34f6 5577 df7e ffff ffff ffff ffff     .=.4wU~.........
   25b6c:	f7df cf3d 967b 4516 bf1c bf1c 2cd6 8e5a     ..=.{..E.....,Z.
   25b7c:	ffff a6bb 24d5 9e9b ffff 1cb5 6dd8 efbf     .....$.......m..
   25b8c:	ffff ffff df7d 6dd9 03f3 03f3 0413 0413     ....}..m........
   25b9c:	0413 0413 03f3 03f2 03f2 03f2 03f2 03f2     ................
   25bac:	03f2 03f2 03f2 03f2 03f2 03f2 03f2 03f2     ................
   25bbc:	03f2 03f2 03f2 03f2 03f2 03f2 03f2 03f3     ................
   25bcc:	03f2 03f2 03f2 03f3 03f2 03f2 03f3 03f2     ................
   25bdc:	03f2 03f2 03f2 03f2 03f3 0413 0413 03f2     ................
   25bec:	9e7b f7ff ffff ffff ffff ffff ffff ffff     {...............
   25bfc:	967a 1473 03f3 0413 0413 0413 0413 0413     z.s.............
   25c0c:	0413 03d2 4536 cf5d ffff ffff ffff ffff     ....6E].........
   25c1c:	ffff ffff ffff ffff d75d 3d36 03f3 0413     ........].6=....
   25c2c:	0412 0413 03f3 0413 0413 0412 0413 1474     ..............t.
   25c3c:	a6bb ffff ffff ffff ffff ffff cf3d 1c95     ............=...
   25c4c:	03f3 0413 0413 03f3 0413 0413 0413 0413     ................
   25c5c:	0413 0413 0413 03f3 03f3 0413 0413 0413     ................
   25c6c:	03f3 0413 0413 0413 0413 03f3 0433 7619     ............3..v
   25c7c:	ffff ffff ffff ffff ffff befc 2cf5 03d2     .............,..
   25c8c:	0413 0413 0413 0413 03f3 0413 03d2 1c94     ................
   25c9c:	a6bb ffff ffff ffff ffff ffff ffff b6dc     ................
   25cac:	0c74 03f2 0413 03f3 0413 0413 0413 0413     t...............
   25cbc:	03f3 1c94 cf5d ffff ffff ffff ffff ffff     ....]...........
   25ccc:	ffff d77d 4d57 ffff d75d 65b8 5db8 bf1c     ..}.WM..]..e.]..
   25cdc:	9e7b 3d36 967a ffff 0433 0413 6dd8 e79e     {.6=z...3....m..
   25cec:	ffff ffff f7df 75f9 0c54 0c33 0453 0453     .......uT.3.S.S.
   25cfc:	0454 1474 1494 0c74 0c74 1474 1474 0c74     T.t...t.t.t.t.t.
   25d0c:	0c74 0c74 0c74 0c74 1474 1474 1474 0c74     t.t.t.t.t.t.t.t.
   25d1c:	0c74 0c74 0c74 0c74 0c74 1474 1474 0c74     t.t.t.t.t.t.t.t.
   25d2c:	0c74 1474 1474 1474 0c74 1474 0c74 0c74     t.t.t.t.t.t.t.t.
   25d3c:	1474 0c74 0c74 0c74 0c54 0453 0413 9e9b     t.t.t.t.T.S.....
   25d4c:	ffdf ffff ffff ffff ffff ffff ffff 9e7b     ..............{.
   25d5c:	1c95 0433 0453 0454 0454 0434 0453 0453     ..3.S.T.T.4.S.S.
   25d6c:	0413 4557 d75d ffff ffff ffff ffff ffff     ..WE]...........
   25d7c:	ffff ffff df9e 5d98 0413 0453 0454 0454     .......]..S.T.T.
   25d8c:	0454 0454 0434 0434 0433 1494 967a ffff     T.T.4.4.3...z...
   25d9c:	ffff ffff ffff ffff ffff cf5d 2cd6 0433     ..........]..,3.
   25dac:	0433 0c53 0433 0453 0453 0453 0453 0454     3.S.3.S.S.S.S.T.
   25dbc:	0454 0453 0453 0453 0433 0433 0454 0433     T.S.S.S.3.3.T.3.
   25dcc:	0454 0434 0454 0454 0433 0c74 7e19 ffff     T.4.T.T.3.t..~..
   25ddc:	ffff ffff ffff ffff c71c 3516 0413 0453     ...........5..S.
   25dec:	0434 0454 0433 0453 0454 0433 24d5 aebb     4.T.3.S.T.3..$..
   25dfc:	ffff ffff ffff ffff ffff ffff b6fc 1cb5     ................
   25e0c:	0433 0434 0434 0454 0433 0454 0c54 0413     3.4.4.T.3.T.T...
   25e1c:	24d5 d75d ffff ffff ffff ffff ffff ffff     .$].............
   25e2c:	cf5d 4d57 ffff cf3d 8e5a 6598 75f9 965a     ].WM..=.Z..e.uZ.
   25e3c:	8e5a 965a ffff 0434 0433 0413 6dd8 e79e     Z.Z...4.3....m..
   25e4c:	ffff ffff ffff 6df9 1474 0433 0434 0434     .......mt.3.4.4.
   25e5c:	2cf6 7e19 863a 7e39 7e39 7e39 7e19 7e19     .,.~:.9~9~9~.~.~
   25e6c:	7e19 7e19 7e1a 7e39 7e19 7e19 7e19 8639     .~.~.~9~.~.~.~9.
   25e7c:	8639 8639 8619 7e19 7e19 7e19 7e19 8619     9.9....~.~.~.~..
   25e8c:	7e19 7e19 8619 7e19 861a 7e39 7e39 7e19     .~.~...~..9~9~.~
   25e9c:	8639 863a 6db8 1474 0453 0413 9e7b f7ff     9.:..mt.S...{...
   25eac:	ffff ffff ffff ffff ffff ffff 969b 1cb5     ................
   25ebc:	0433 0453 0453 0453 0433 0454 0434 0413     3.S.S.S.3.T.4...
   25ecc:	4d57 d73d ffff ffff ffff ffff ffff ffff     WM=.............
   25edc:	efdf 75f9 0453 0413 0454 0454 0434 0454     ...uS...T.T.4.T.
   25eec:	0c54 0454 0413 0c54 6dd9 ffff ffff ffff     T.T...T..m......
   25efc:	ffff ffff ffff ffff cf5d 24d5 0433 0c34     ........]..$3.4.
   25f0c:	0c54 0434 0433 0433 0453 0433 0454 0454     T.4.3.3.S.3.T.T.
   25f1c:	0454 0453 0453 0453 0453 0453 0453 0453     T.S.S.S.S.S.S.S.
   25f2c:	0453 0453 0454 0434 0c74 7e19 ffff ffff     S.S.T.4.t..~....
   25f3c:	ffff ffff ffff c73c 3516 0413 0c54 0434     ......<..5..T.4.
   25f4c:	0c54 0454 0434 0453 0413 2cd5 aebb ffff     T.T.4.S....,....
   25f5c:	ffff ffff ffff ffff ffff b6fc 1cb5 0433     ..............3.
   25f6c:	0434 0453 0453 0453 0454 0453 0413 24d5     4.S.S.S.T.S....$
   25f7c:	d75d ffff ffff ffff ffff ffff ffff cf3d     ].............=.
   25f8c:	4556 ffff cf3d 8e3a 7e19 5597 7e3a aedb     VE..=.:..~.U:~..
   25f9c:	8e5a ffff 0453 0434 0433 0433 75d9 efbe     Z...S.4.3.3..u..
   25fac:	ffff ffff ffff 6dd9 1494 0433 0413 2cf6     .......m..3....,
   25fbc:	b6fc ffff ffff ffff ffff ffff ffff ffff     ................
   25fcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25fdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   25ffc:	ffff df7e 24d6 0433 0433 9e9b f7df ffff     ..~..$3.3.......
   2600c:	ffff ffff ffff ffff ffff 969a 1cb5 0433     ..............3.
   2601c:	0434 0434 0433 0433 0c34 0c54 0413 4d57     4.4.3.3.4.T...WM
   2602c:	d75d ffff ffff ffff ffff ffff f7df 967b     ].............{.
   2603c:	1c95 0413 0c53 0453 0454 0453 0433 0454     ....S.S.T.S.3.T.
   2604c:	0433 0413 5d97 efbf ffff ffff ffff ffff     3....]..........
   2605c:	ffff ffff ffff cf5d 24d5 0433 0434 0453     ......]..$3.4.S.
   2606c:	0c54 0c53 0c54 0454 0453 0453 0453 0433     T.S.T.T.S.S.S.3.
   2607c:	0453 0453 0454 0453 0434 0434 0434 0454     S.S.T.S.4.4.4.T.
   2608c:	0434 0454 0413 0c74 7e1a ffff ffff ffff     4.T...t..~......
   2609c:	ffff ffff c71d 3d16 03f3 0453 0454 0454     .......=..S.T.T.
   260ac:	0453 0453 0433 0413 2cd5 aebb ffff ffff     S.S.3....,......
   260bc:	ffff ffff ffff ffff b6fc 1cb5 0433 0433     ............3.3.
   260cc:	0454 0454 0454 0434 0454 0413 24b5 d75d     T.T.T.4.T....$].
   260dc:	ffff ffff ffff ffff ffff ffff cf5d 5db8     ............]..]
   260ec:	ffff d77d 967b 9e9a 863a 967a befc 9e7b     ..}.{...:.z...{.
   260fc:	ffff 0453 0454 0453 0433 0434 65d8 f7df     ..S.T.S.3.4..e..
   2610c:	ffff ffff ffff 7e19 1494 0433 0413 1474     .......~..3...t.
   2611c:	8e5a ffdf ffff ffff ffff ffff ffff ffff     Z...............
   2612c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2613c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2614c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2615c:	cf5d 24d5 0434 0433 9e9b ffff ffff ffff     ]..$4.3.........
   2616c:	ffff ffff ffff ffff 9e7b 2495 0433 0454     ........{..$3.T.
   2617c:	0453 0454 0453 0453 0453 0413 4d57 cf5d     S.T.S.S.S...WM].
   2618c:	ffff ffff ffff ffff ffff b6dc 1cb5 0413     ................
   2619c:	0c54 0c53 0454 0453 0c34 0c53 0453 0414     T.S.T.S.4.S.S...
   261ac:	3d36 c71d ffff ffff ffff ffff ffff ffff     6=..............
   261bc:	ffff ffff d73d 24d5 0433 0454 0434 0434     ....=..$3.T.4.4.
   261cc:	0c53 0454 0453 0453 0454 0454 0c54 0c54     S.T.S.S.T.T.T.T.
   261dc:	0c54 0c54 0454 0454 0433 0c54 0454 0454     T.T.T.T.3.T.T.T.
   261ec:	0c54 0433 1494 7e1a ffff ffff ffff ffff     T.3....~........
   261fc:	ffff bf1c 3d16 0413 0c54 0453 0434 0454     .....=..T.S.4.T.
   2620c:	0434 0433 0413 2cf5 aebb ffff ffff ffff     4.3....,........
   2621c:	ffff ffff ffff b6fc 1cb5 0433 0c54 0453     ..........3.T.S.
   2622c:	0434 0433 0434 0433 0433 2cd5 d75d ffff     4.3.4.3.3..,]...
   2623c:	ffff ffff ffff ffff ffff f7df df7e ffff     ............~...
   2624c:	f7df ef9e f7df efbf efbe efdf efbe ffff     ................
   2625c:	0c54 0434 0433 0454 0434 1474 65b8 ffff     T.4.3.T.4.t..e..
   2626c:	ffff ffff ffff 9e9b 1c95 0412 0454 1474     ............T.t.
   2627c:	75f9 ffff ffff ffff ffff ffff ffff ffff     .u..............
   2628c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2629c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   262ac:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   262bc:	24d5 0433 0413 9e9b f7df ffff ffff ffff     .$3.............
   262cc:	ffff ffff ffff 967a 1c95 0433 0454 0434     ......z...3.T.4.
   262dc:	0454 0453 0c53 0434 0433 4d57 d75d ffff     T.S.S.4.3.WM]...
   262ec:	ffff ffff ffff e79e 3516 0433 0433 0434     .........53.3.4.
   262fc:	0453 0434 0454 0453 0453 0413 1c95 a6bb     S.4.T.S.S.......
   2630c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2631c:	ffff cf3d 2cd5 0454 0c54 0454 0453 0c34     ..=..,T.T.T.S.4.
   2632c:	0433 0453 0453 0454 3516 3516 3d16 3516     3.S.S.T..5.5.=.5
   2633c:	3516 3516 3516 3516 3516 3516 3516 3516     .5.5.5.5.5.5.5.5
   2634c:	34f6 4536 9e7b ffff ffff ffff ffff ffff     .46E{...........
   2635c:	c71c 3d16 0413 0453 0c34 0c54 0453 0453     ...=..S.4.T.S.S.
   2636c:	0453 0413 2cd5 aebb ffff ffff ffff ffff     S....,..........
   2637c:	ffff ffff b6fc 1c95 0433 0453 0453 0453     ........3.S.S.S.
   2638c:	0433 0453 0433 0413 2cd5 d75d ffff ffff     3.S.3....,].....
   2639c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   263ac:	ffff ffff ffff ffff ffff ffff ffff 0434     ..............4.
   263bc:	0453 0454 0433 0433 0434 1474 65d9 ffff     S.T.3.3.4.t..e..
   263cc:	ffff ffff f7df 9e9b 1495 0413 0453 1494     ............S...
   263dc:	75f8 f7ff ffff ffff ffff ffff ffff ffff     .u..............
   263ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   263fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2640c:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   2641c:	0433 0413 9e9b f7df ffff ffff ffff ffff     3...............
   2642c:	ffff ffff 969b 1cb5 0433 0434 0453 0453     ........3.4.S.S.
   2643c:	0453 0453 0433 0413 4d57 cf5d ffff ffff     S.S.3...WM].....
   2644c:	ffff ffff 4557 0c54 0433 0454 0453 0453     ....WET.3.T.S.S.
   2645c:	0433 0454 0c53 0433 0414 865a f7df ffff     3.T.S.3...Z.....
   2646c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2647c:	cf5d 24d5 0433 0453 0453 0433 0453 0454     ]..$3.S.S.3.S.T.
   2648c:	0433 0433 1c95 df9e e79e e79e df9e e79e     3.3.............
   2649c:	e79e e79e e79e e79e e79e e79e e79e df9e     ................
   264ac:	e79e f7df ffff ffff ffff ffff ffff c71c     ................
   264bc:	3d16 0413 0434 0454 0454 0453 0453 0454     .=..4.T.T.S.S.T.
   264cc:	0413 2cd5 aedb ffff ffff ffff ffff ffff     ...,............
   264dc:	ffff b6fc 1cb5 0433 0c54 0c53 0454 0454     ......3.T.S.T.T.
   264ec:	0453 0453 0433 24d5 d75d ffff ffff ffff     S.S.3..$].......
   264fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2650c:	ffff ffff ffff ffff ffff ffff 0433 0433     ............3.3.
   2651c:	4d57 5578 0c94 0413 0454 0c74 5557 df7e     WMxU....T.t.WU~.
   2652c:	ffff ffff efdf 9e9b 1495 0413 0434 1474     ............4.t.
   2653c:	75f9 efdf ffff ffff ffff ffff ffff ffff     .u..............
   2654c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2655c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2656c:	ffff ffff ffff ffff ffff cf5d 24d5 0433     ..........]..$3.
   2657c:	0413 9e9b f7df ffff ffff ffff ffff ffff     ................
   2658c:	ffff 9e7b 1c95 0433 0454 0453 0454 0433     ..{...3.T.S.T.3.
   2659c:	0454 0453 0413 4d57 cf3d ffff ffff ffff     T.S...WM=.......
   265ac:	6df9 0c54 0434 0454 0453 0453 0454 0433     .mT.4.T.S.S.T.3.
   265bc:	0c54 0433 03f3 65d9 e7be ffff ffff ffff     T.3....e........
   265cc:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   265dc:	24d5 0433 0453 0454 0c33 0453 0433 0453     .$3.S.T.3.S.3.S.
   265ec:	0433 1495 ffff ffff ffff ffff ffff ffff     3...............
   265fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2660c:	ffff ffff ffff ffff ffff ffff c71c 3d16     ...............=
   2661c:	0413 0c54 0454 0433 0433 0454 0c54 0413     ..T.T.3.3.T.T...
   2662c:	24d5 aebb ffff ffff ffff ffff ffff ffff     .$..............
   2663c:	b6fc 1cb5 0433 0c34 0433 0433 0433 0453     ....3.4.3.3.3.S.
   2664c:	0433 0433 24d5 d75d ffff ffff ffff ffff     3.3..$].........
   2665c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2666c:	ffff ffff ffff ffff ffff 0434 0413 5db8     ..........4....]
   2667c:	c71d 965b 1c74 03f3 0453 0433 4d57 d75e     ..[.t...S.3.WM^.
   2668c:	ffff ffff f7df 969b 1c95 0413 0433 0c54     ............3.T.
   2669c:	75f9 efbe ffff ffff ffff ffff ffff ffff     .u..............
   266ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   266bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   266cc:	ffff ffff ffff ffff cf5d 24d5 0433 0413     ........]..$3...
   266dc:	9e9b f7df ffff ffff ffff ffff ffff ffff     ................
   266ec:	9e7b 1cb5 0433 0454 0453 0454 0453 0434     {...3.T.S.T.S.4.
   266fc:	0454 0413 4d57 d75d ffff f7ff 9e7b 0c74     T...WM].....{.t.
   2670c:	0c34 0453 0454 0453 0453 0433 0453 0434     4.S.T.S.S.3.S.4.
   2671c:	0413 4537 d75d ffff ffff ffff ffff ffff     ..7E]...........
   2672c:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   2673c:	0434 0434 0454 0c54 0c54 0434 0433 0433     4.4.T.T.T.4.3.3.
   2674c:	1495 ffff ffff ffff ffff ffff ffff ffff     ................
   2675c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2676c:	ffff ffff ffff ffff ffff c71c 3d16 0413     .............=..
   2677c:	0433 0c54 0453 0454 0453 0434 0413 2cd5     3.T.S.T.S.4....,
   2678c:	aebb ffff ffff ffff ffff ffff ffff b6fc     ................
   2679c:	1cb5 0433 0c34 0433 0433 0433 0454 0453     ..3.4.3.3.3.T.S.
   267ac:	0413 24d5 d75d ffff ffff ffff ffff ffff     ...$]...........
   267bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   267cc:	ffff ffff ffff ffff 0453 0413 4d77 e7be     ........S...wM..
   267dc:	ffff 967a 2cb5 0413 0454 0412 5577 d77d     ..z..,..T...wU}.
   267ec:	ffff ffff ffff 969a 24b5 0433 0412 0c54     .........$3...T.
   267fc:	7e19 e7be ffff ffff ffff ffff ffff ffff     .~..............
   2680c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2681c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2682c:	ffff ffff ffff cf5d 24d5 0433 0413 9e9b     ......]..$3.....
   2683c:	f7df ffff ffff ffff ffff ffff ffff 9e7b     ..............{.
   2684c:	1c95 0433 0454 0453 0454 0453 0453 0454     ..3.T.S.T.S.S.T.
   2685c:	0413 4d57 d75d ffff b6dc 2495 0433 0453     ..WM]......$3.S.
   2686c:	0433 0453 0454 0453 0453 0433 0433 24b5     3.S.T.S.S.3.3..$
   2687c:	bf1c ffff ffff ffff ffff ffff ffff ffff     ................
   2688c:	ffff ffff ffff ffff ffff cf5d 24d5 0454     ..........]..$T.
   2689c:	0434 0453 0453 0433 0453 0454 0433 1494     4.S.S.3.S.T.3...
   268ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   268bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   268cc:	ffff ffff ffff ffff c71c 3d16 0413 0453     ...........=..S.
   268dc:	0c54 0454 0454 0453 0433 0413 2cd5 aebb     T.T.T.S.3....,..
   268ec:	ffff ffff ffff ffff ffff ffff b6fc 1cb5     ................
   268fc:	0433 0433 0453 0c54 0c54 0454 0453 0433     3.3.S.T.T.T.S.3.
   2690c:	24d5 d75d ffff ffff ffff ffff ffff ffff     .$].............
   2691c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2692c:	ffff ffff ffff 0433 0413 4d77 d75d ffff     ......3...wM]...
   2693c:	ffff a6bb 24b5 0433 0433 03f2 5577 d77d     .....$3.3...wU}.
   2694c:	ffff ffff ffff 967a 1cd5 0433 0413 0c54     ......z...3...T.
   2695c:	7df9 e79e ffff ffff ffff ffff ffff ffff     .}..............
   2696c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2697c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2698c:	ffff ffff cf5d 24d5 0433 0433 9e9b f7df     ....]..$3.3.....
   2699c:	ffff ffff ffff ffff ffff ffff 9e7b 1c94     ............{...
   269ac:	0433 0454 0454 0454 0434 0454 0433 0413     3.T.T.T.4.T.3...
   269bc:	4d57 df9d df7e 3d16 03f2 0433 0433 0454     WM..~..=..3.3.T.
   269cc:	0454 0453 0454 0453 0433 1cb5 a69b ffff     T.S.T.S.3.......
   269dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   269ec:	ffff ffff ffff ffff cf5d 24d5 0433 0453     ........]..$3.S.
   269fc:	0453 0453 0433 0433 0454 0433 1494 f7df     S.S.3.3.T.3.....
   26a0c:	f7ff f7df f7df f7df f7df f7df f7df f7df     ................
   26a1c:	f7df f7df f7df f7ff ffdf ffff ffff ffff     ................
   26a2c:	ffff ffff ffff c71c 3d16 0413 0453 0454     .........=..S.T.
   26a3c:	0433 0433 0454 0453 0413 2cd5 aedb ffff     3.3.T.S....,....
   26a4c:	ffff ffff ffff ffff ffff b6fc 1c95 0433     ..............3.
   26a5c:	0453 0453 0454 0454 0454 0454 0433 24d5     S.S.T.T.T.T.3..$
   26a6c:	d75d ffff ffff ffff ffff ffff ffff ffff     ]...............
   26a7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26a8c:	ffff ffff 0454 0413 5557 d77e ffff ffff     ....T...WU~.....
   26a9c:	ffff aedc 24b5 0434 0453 03f3 5557 df7e     .....$4.S...WU~.
   26aac:	ffff ffff ffff 967a 2cd5 0433 0413 0434     ......z..,3...4.
   26abc:	65b8 e79e ffff ffff ffff ffff ffff ffff     .e..............
   26acc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26adc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26aec:	ffff cf5d 24d5 0433 0433 9e9b f7df ffff     ..]..$3.3.......
   26afc:	ffff ffff ffff ffff ffff 9e7b 1cb5 0433     ..........{...3.
   26b0c:	0434 0453 0434 0c54 0434 0433 0413 5577     4.S.4.T.4.3...wU
   26b1c:	b6fc 6dd9 0413 0433 0454 0434 0453 0434     ...m..3.T.4.S.4.
   26b2c:	0454 0454 0433 1474 75f9 ffff ffff ffff     T.T.3.t..u......
   26b3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26b4c:	ffff ffff ffff cf5d 24d5 0433 0454 0434     ......]..$3.T.4.
   26b5c:	0c53 0433 0454 0434 0433 0c74 9e7a 9e9a     S.3.T.4.3.t.z...
   26b6c:	9e9b 9e7b 9e9b 9e9b 9e9b 9e9b 9e9b 9e9b     ..{.............
   26b7c:	9e9b 9e9b 967a c71c ffff ffff ffff ffff     ....z...........
   26b8c:	ffff ffff c71c 3d16 0413 0454 0453 0454     .......=..T.S.T.
   26b9c:	0454 0453 0454 0433 2cd5 aedb ffff ffff     T.S.T.3..,......
   26bac:	ffff ffff ffff ffff b6fc 1cb5 0433 0454     ............3.T.
   26bbc:	0453 0453 0453 0454 0c54 0413 24d5 d75d     S.S.S.T.T....$].
   26bcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26bdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26bec:	ffff 0454 0413 4d57 d75d ffff ffff ffff     ..T...WM].......
   26bfc:	ffff aedc 1cb5 0434 0433 0413 4d57 efbe     ......4.3...WM..
   26c0c:	ffff ffff ffff aedc 2cf6 0433 0433 0434     .........,3.3.4.
   26c1c:	4557 f7de ffff ffff ffff ffff ffff ffff     WE..............
   26c2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26c3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26c4c:	cf5d 24d5 0433 0433 9e9b f7df ffff ffff     ]..$3.3.........
   26c5c:	ffff ffff ffff ffff 9e7b 1cb5 0433 0c54     ........{...3.T.
   26c6c:	0453 0453 0c53 0453 0c54 0433 5577 3d36     S.S.S.S.T.3.wU6=
   26c7c:	0433 0434 0454 0454 0434 0454 0453 0454     3.4.T.T.4.T.S.T.
   26c8c:	0433 0454 5597 ffff ffff ffff ffff ffff     3.T..U..........
   26c9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26cac:	ffff ffff cf5d 2cd5 0434 0454 0453 0453     ....]..,4.T.S.S.
   26cbc:	0453 0453 0454 0453 0453 0433 0433 0413     S.S.T.S.S.3.3...
   26ccc:	0433 0433 0433 0433 0433 0433 0433 0433     3.3.3.3.3.3.3.3.
   26cdc:	0433 03d2 6dd8 ffff ffff ffff ffff ffff     3....m..........
   26cec:	ffff c71c 3d16 0413 0454 0454 0453 0434     .....=..T.T.S.4.
   26cfc:	0453 0433 0413 24d5 aebb ffff ffff ffff     S.3....$........
   26d0c:	ffff ffff ffff b6fc 1cb5 0433 0c54 0c54     ..........3.T.T.
   26d1c:	0434 0434 0453 0433 0413 24d5 d75d ffff     4.4.S.3....$]...
   26d2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26d3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26d4c:	0433 0433 4d77 d75d ffff ffff ffff ffff     3.3.wM].........
   26d5c:	ffff aebb 1c94 0413 0454 0433 4d57 efdf     ........T.3.WM..
   26d6c:	ffff ffff ffff c71c 3516 03f2 0433 0474     .........5..3.t.
   26d7c:	4557 efbe ffff ffff ffff ffff ffff ffff     WE..............
   26d8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26d9c:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   26dac:	2cd5 0433 0413 9e9b f7df ffff ffff ffff     .,3.............
   26dbc:	ffff ffff ffff 967a 1c95 0433 0454 0454     ......z...3.T.T.
   26dcc:	0454 0c53 0433 0453 0c53 0c54 0454 0453     T.S.3.S.S.T.T.S.
   26ddc:	0453 0434 0434 0c54 0453 0c54 0453 0413     S.4.4.T.S.T.S...
   26dec:	4d57 e79e ffff ffff ffff ffff ffff ffff     WM..............
   26dfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26e0c:	ffff cf3d 24d5 0434 0c54 0433 0453 0454     ..=..$4.T.3.S.T.
   26e1c:	0453 0c33 0c53 0c54 0454 0454 0454 0454     S.3.S.T.T.T.T.T.
   26e2c:	0454 0434 0433 0c54 0454 0453 0454 0454     T.4.3.T.T.S.T.T.
   26e3c:	03d2 6dd8 ffff ffff ffff ffff ffff ffff     ...m............
   26e4c:	c71c 4536 0413 0454 0454 0454 0434 0454     ..6E..T.T.T.4.T.
   26e5c:	0c54 0413 2cd5 aebb ffff ffff ffff ffff     T....,..........
   26e6c:	ffff ffff b6fc 1cb5 0433 0453 0454 0433     ........3.S.T.3.
   26e7c:	0c54 0453 0433 0413 2cd5 d75d ffff ffff     T.S.3....,].....
   26e8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26e9c:	ffff ffff ffff ffff ffff ffff ffff 0433     ..............3.
   26eac:	0433 5577 d75d ffff ffff ffff ffff ffff     3.wU]...........
   26ebc:	f7df a6bb 24b5 0413 0454 0433 4536 c71d     .....$..T.3.6E..
   26ecc:	ffff ffff ffdf c71d 3d16 03f3 0433 0454     .........=..3.T.
   26edc:	4557 efdf ffff ffff ffff ffff ffff ffff     WE..............
   26eec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26efc:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   26f0c:	0433 0433 9e9b f7df ffff ffff ffff ffff     3.3.............
   26f1c:	ffff ffff 9e7b 1cb5 0433 0454 0454 0454     ....{...3.T.T.T.
   26f2c:	0c33 0453 0454 0454 0433 0434 0c53 0453     3.S.T.T.3.4.S.S.
   26f3c:	0453 0433 0453 0c54 0433 0433 1474 863a     S.3.S.T.3.3.t.:.
   26f4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26f6c:	cf5d 24d5 0433 0453 0433 0453 0c54 0454     ]..$3.S.3.S.T.T.
   26f7c:	0453 0c53 0434 0453 0c53 0454 0c34 0453     S.S.4.S.S.T.4.S.
   26f8c:	0453 0453 0453 0433 0433 0453 0c53 03f2     S.S.S.3.3.S.S...
   26f9c:	6dd8 ffff ffff ffff ffff ffff ffff c71c     .m..............
   26fac:	3d16 0413 0453 0433 0454 0453 0453 0454     .=..S.3.T.S.S.T.
   26fbc:	0433 2cd5 aebb ffff ffff ffff ffff ffff     3..,............
   26fcc:	ffff b6fc 1cb5 0433 0453 0434 0454 0454     ......3.S.4.T.T.
   26fdc:	0c54 0c54 0413 2cd5 d75d ffff ffff ffff     T.T....,].......
   26fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   26ffc:	ffff ffff ffff ffff ffff ffff 0453 0433     ............S.3.
   2700c:	5577 d75d ffff ffff ffff ffff ffff ffff     wU].............
   2701c:	f7df a6bb 1c95 03d2 0434 0454 2cf6 befc     ........4.T..,..
   2702c:	ffff ffff ffff befc 3d16 03d2 0433 0454     .........=..3.T.
   2703c:	4d77 e79e ffff ffff ffff ffff ffff ffff     wM..............
   2704c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2705c:	ffff ffff ffff ffff ffff cf5d 24d5 0433     ..........]..$3.
   2706c:	0433 9e9b f7df ffff ffff ffff ffff ffff     3...............
   2707c:	ffff 9e7b 1c95 0433 0454 0454 0c54 0c54     ..{...3.T.T.T.T.
   2708c:	0c53 0453 0453 0454 0454 0453 0453 0454     S.S.S.T.T.S.S.T.
   2709c:	0453 0454 0434 0454 0434 0433 4557 cf5d     S.T.4.T.4.3.WE].
   270ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   270bc:	ffff ffff ffff ffff ffff ffff ffff cf3d     ..............=.
   270cc:	24d5 0433 0433 0454 0453 0454 0433 0453     .$3.3.T.S.T.3.S.
   270dc:	0453 0454 0433 0c54 0454 0434 0433 0453     S.T.3.T.T.4.3.S.
   270ec:	0454 0453 0433 0453 0433 0454 03f2 6dd8     T.S.3.S.3.T....m
   270fc:	ffff ffff ffff ffff ffff ffff c71d 3d16     ...............=
   2710c:	0413 0433 0c54 0c54 0c54 0454 0453 0413     ..3.T.T.T.T.S...
   2711c:	24d5 aebb ffff ffff ffff ffff ffff ffff     .$..............
   2712c:	b6fc 1c95 0433 0c53 0454 0c54 0454 0433     ....3.S.T.T.T.3.
   2713c:	0433 0413 2cd5 d75d ffff ffff ffff ffff     3....,].........
   2714c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2715c:	ffff ffff ffff ffff ffff 0433 0413 4d57     ..........3...WM
   2716c:	d75d ffff ffff ffff ffff ffff ffff ffff     ]...............
   2717c:	ffdf b6fc 3d17 03f2 0433 0413 34f6 b6fc     .....=..3....4..
   2718c:	ffff ffff ffff bf1c 3cf6 03f3 0433 0413     .........<..3...
   2719c:	5578 df7e ffff ffff ffff ffff ffff ffff     xU~.............
   271ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   271bc:	ffff ffff ffff ffff cf5d 24d5 0433 0433     ........]..$3.3.
   271cc:	9e9b f7df ffff ffff ffff ffff ffff ffff     ................
   271dc:	967a 1c94 0433 0434 0453 0c53 0c33 0454     z...3.4.S.S.3.T.
   271ec:	0453 0434 0453 0433 0453 0454 0434 0453     S.4.S.3.S.T.4.S.
   271fc:	0454 0434 0453 0433 0433 0453 5577 e79e     T.4.S.3.3.S.wU..
   2720c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2721c:	ffff ffff ffff ffff ffff ffff cf3d 24d5     ............=..$
   2722c:	0453 0454 0453 0454 0433 0434 0c54 0433     S.T.S.T.3.4.T.3.
   2723c:	0c53 0433 0433 0433 0433 0433 0433 0433     S.3.3.3.3.3.3.3.
   2724c:	0433 0433 0433 0433 0433 03d2 6db8 ffff     3.3.3.3.3....m..
   2725c:	ffff ffff ffff ffff ffff c71d 3d16 0413     .............=..
   2726c:	0433 0434 0454 0454 0453 0453 0433 2cd5     3.4.T.T.S.S.3..,
   2727c:	aebb ffff ffff ffff ffff ffff ffff b6fc     ................
   2728c:	1c95 0433 0453 0454 0454 0433 0453 0453     ..3.S.T.T.3.S.S.
   2729c:	0413 2cd5 d75d ffff ffff ffff ffff ffff     ...,]...........
   272ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   272bc:	ffff ffff ffff ffff 0454 0433 5557 d75d     ........T.3.WU].
   272cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   272dc:	ffff c73d 3d16 0413 0433 03f3 34f5 b6dc     ..=..=..3....4..
   272ec:	ffff ffff ffff bf1c 3cf6 0433 0433 0413     .........<3.3...
   272fc:	5578 cf3d ffff ffff ffff ffff ffff ffff     xU=.............
   2730c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2731c:	ffff ffff ffff cf5d 24d5 0453 0433 9e9b     ......]..$S.3...
   2732c:	f7df ffff ffff ffff ffff ffff ffff 9e9a     ................
   2733c:	24b5 0433 0433 0453 0453 0454 0454 0454     .$3.3.S.S.T.T.T.
   2734c:	0433 2cf6 24b5 0433 0433 0433 0454 0453     3..,.$3.3.3.T.S.
   2735c:	0c54 0434 0453 0453 0413 0453 6dd9 f7ff     T.4.S.S...S..m..
   2736c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2737c:	ffff ffff ffff ffff ffff cf5d 24d5 0433     ..........]..$3.
   2738c:	0c54 0453 0453 0c54 0434 0454 0434 0454     T.S.S.T.4.T.4.T.
   2739c:	0c74 0c74 1474 1494 1474 0c74 0c54 1474     t.t.t...t.t.T.t.
   273ac:	0c74 1474 0c74 1474 0413 75f9 ffff ffff     t.t.t.t....u....
   273bc:	ffff ffff ffff ffff c71c 3d16 0413 0454     ...........=..T.
   273cc:	0454 0453 0453 0453 0454 0413 2cd5 aebb     T.S.S.S.T....,..
   273dc:	ffff ffff ffff ffff ffff ffff b6fc 1cb5     ................
   273ec:	0433 0453 0454 0454 0433 0453 0454 0433     3.S.T.T.3.S.T.3.
   273fc:	24b5 d75d ffff ffff ffff ffff ffff ffff     .$].............
   2740c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2741c:	ffff ffff ffff 0454 0433 5577 d75e ffff     ......T.3.wU^...
   2742c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2743c:	ffff cf3d 34f6 0433 0453 03f2 34f6 b6fc     ..=..43.S....4..
   2744c:	ffff ffff ffff c71c 3d16 0434 0433 0413     .........=4.3...
   2745c:	3d36 c71c ffff ffff ffff ffff ffff ffff     6=..............
   2746c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2747c:	ffff ffff cf5d 2cd5 0454 0433 9e9b f7df     ....]..,T.3.....
   2748c:	ffff ffff ffff ffff ffff ffff 9e9a 24b5     ...............$
   2749c:	0433 0434 0453 0434 0454 0c53 0453 0413     3.4.S.4.T.S.S...
   274ac:	5d98 8e5a 3d37 0413 0c53 0433 0453 0453     .]Z.7=..S.3.S.S.
   274bc:	0434 0c54 0434 0434 0453 0c54 967a ffff     4.T.4.4.S.T.z...
   274cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   274dc:	ffff ffff ffff ffff cf5d 24d5 0434 0433     ........]..$4.3.
   274ec:	0454 0453 0454 0453 0453 0434 0c74 7e19     T.S.T.S.S.4.t..~
   274fc:	8619 7e1a 7e39 7e1a 7e3a 7e1a 7e1a 7e1a     ...~9~.~:~.~.~.~
   2750c:	7e1a 7e19 7e19 6df8 b6fc ffff ffff ffff     .~.~.~.m........
   2751c:	ffff ffff ffff c71c 3d16 0413 0c54 0454     .........=..T.T.
   2752c:	0453 0433 0454 0454 0413 2cd5 aedb ffff     S.3.T.T....,....
   2753c:	ffff ffff ffff ffff ffff b6fc 1c95 0433     ..............3.
   2754c:	0c53 0454 0c54 0453 0433 0454 0413 24b5     S.T.T.S.3.T....$
   2755c:	d75d ffff ffff ffff ffff ffff ffff ffff     ]...............
   2756c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2757c:	ffff ffff 0433 0413 5557 d75e ffff ffff     ....3...WU^.....
   2758c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2759c:	ffff cf5e 2cf5 0454 0453 03f3 34f6 befc     ..^..,T.S....4..
   275ac:	ffff ffff ffff c71c 3d16 0c54 0433 03f2     .........=T.3...
   275bc:	34f6 cf3d ffff ffff ffff ffff ffff ffff     .4=.............
   275cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   275dc:	ffff cf5d 24d5 0453 0433 9e9b f7df ffff     ..]..$S.3.......
   275ec:	ffff ffff ffff ffff ffff 9e9a 24b5 0433     .............$3.
   275fc:	0434 0433 0c33 0454 0434 0433 0433 4d57     4.3.3.T.4.3.3.WM
   2760c:	e7be bf1c 1474 0433 0434 0454 0454 0433     ....t.3.4.T.T.3.
   2761c:	0453 0454 0453 0c34 0453 0453 befc ffff     S.T.S.4.S.S.....
   2762c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2763c:	ffff ffff ffff cf5d 2cd5 0454 0433 0c54     ......]..,T.3.T.
   2764c:	0453 0453 0454 0454 0433 1c94 ffff ffff     S.S.T.T.3.......
   2765c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2766c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2767c:	ffff ffff c71c 3d16 0413 0433 0453 0453     .......=..3.S.S.
   2768c:	0453 0454 0433 0413 2cd5 aedb ffff ffff     S.T.3....,......
   2769c:	ffff ffff ffff ffff b6fc 1cb5 0433 0454     ............3.T.
   276ac:	0434 0434 0453 0454 0c54 0413 24b5 d75d     4.4.S.T.T....$].
   276bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   276cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   276dc:	ffff 0453 0413 5577 d75e ffff ffff ffff     ..S...wU^.......
   276ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   276fc:	ffff d75e 2cf6 0c34 0453 0413 34f6 c71c     ..^..,4.S....4..
   2770c:	ffff ffff ffff e79e 4d57 0433 0434 0433     ........WM3.4.3.
   2771c:	2cf6 d77d ffff ffff ffff ffff ffff ffff     .,}.............
   2772c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2773c:	cf5d 24d5 0433 0433 9e9b f7df ffff ffff     ]..$3.3.........
   2774c:	ffff ffff ffff ffff 9e7a 24b5 0433 0454     ........z..$3.T.
   2775c:	0453 0454 0453 0c34 0453 0413 4d57 d75d     S.T.S.4.S...WM].
   2776c:	ffff 9e9b 0413 0434 0453 0454 0434 0c54     ......4.S.T.4.T.
   2777c:	0453 0454 0c53 0434 0454 24b5 cf3d ffff     S.T.S.4.T..$=...
   2778c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2779c:	ffff ffff cf5d 24d5 0453 0453 0c54 0c53     ....]..$S.S.T.S.
   277ac:	0453 0433 0454 0433 1c95 ffff ffff ffff     S.3.T.3.........
   277bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   277cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   277dc:	ffff c71d 3d16 0413 0454 0c54 0453 0c54     .....=..T.T.S.T.
   277ec:	0453 0453 0413 24d5 aebb ffff ffff ffff     S.S....$........
   277fc:	ffff ffff ffff b6fc 1cb5 0433 0453 0433     ..........3.S.3.
   2780c:	0433 0454 0454 0453 0413 2cd5 d75d ffff     3.T.T.S....,]...
   2781c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2782c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2783c:	0454 0413 4d77 d75d ffff ffff ffff ffff     T...wM].........
   2784c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2785c:	ffff d75d 2cf6 0433 0453 0413 34f6 befc     ..]..,3.S....4..
   2786c:	ffff ffff ffff efbe 5577 0413 0434 0c54     ........wU..4.T.
   2787c:	2cf5 d77d ffff ffff ffff ffff ffff ffff     .,}.............
   2788c:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   2789c:	2cd5 0453 0433 9e9b f7ff ffff ffff ffff     .,S.3...........
   278ac:	ffff ffff ffff 969a 24b5 0433 0453 0453     .........$3.S.S.
   278bc:	0454 0454 0453 0434 0433 4d57 d75d ffff     T.T.S.4.3.WM]...
   278cc:	efbe 75f9 0433 0453 0453 0454 0453 0454     ...u3.S.S.T.S.T.
   278dc:	0454 0453 0453 0454 0433 4536 d75e ffff     T.S.S.T.3.6E^...
   278ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   278fc:	ffff cf5d 2cd5 0433 0454 0c54 0453 0454     ..]..,3.T.T.S.T.
   2790c:	0433 0434 0433 1494 ffff ffff ffff ffff     3.4.3...........
   2791c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2792c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2793c:	c71d 3d16 0413 0453 0453 0453 0c54 0c53     ...=..S.S.S.T.S.
   2794c:	0454 0413 2cd5 aedb ffff ffff ffff ffff     T....,..........
   2795c:	ffff ffff b6fc 14b5 0433 0454 0433 0453     ........3.T.3.S.
   2796c:	0453 0454 0454 0413 24d5 d75d ffff ffff     S.T.T....$].....
   2797c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2798c:	ffff ffff ffff ffff ffff ffff ffff 0433     ..............3.
   2799c:	0413 5577 d77d ffff ffff ffff ffff ffff     ..wU}...........
   279ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   279bc:	ffff d75d 2cf6 03f2 0433 0433 2cd5 8e5a     ..]..,..3.3..,Z.
   279cc:	ffff ffff ffff e77e 5577 03f2 0434 0453     ......~.wU..4.S.
   279dc:	2cf6 d75d ffff ffff ffff ffff ffff ffff     .,].............
   279ec:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   279fc:	0433 0433 9e9b f7df ffff ffff ffff ffff     3.3.............
   27a0c:	ffff ffff 9e9a 2495 0433 0454 0453 0454     .......$3.T.S.T.
   27a1c:	0453 0433 0c54 0413 4557 d75d ffff ffff     S.3.T...WE].....
   27a2c:	df7e 3516 0434 0433 0434 0453 0433 0433     ~..54.3.4.S.3.3.
   27a3c:	0454 0453 0c54 0433 0433 75f9 f7bf ffff     T.S.T.3.3..u....
   27a4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27a5c:	cf5d 24d5 0453 0433 0c54 0453 0433 0454     ]..$S.3.T.S.3.T.
   27a6c:	0453 0413 1c95 ffff ffff ffff ffff ffff     S...............
   27a7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27a8c:	ffff ffff ffff ffff ffff ffff ffff c71d     ................
   27a9c:	3d16 0413 0453 0434 0c53 0c54 0454 0454     .=..S.4.S.T.T.T.
   27aac:	0413 2cd5 aebb ffff ffff ffff ffff ffff     ...,............
   27abc:	ffff b6fc 1cb5 0433 0453 0453 0454 0454     ......3.S.S.T.T.
   27acc:	0454 0434 0413 24d5 df7e ffff ffff ffff     T.4....$~.......
   27adc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27aec:	ffff ffff ffff ffff ffff ffff 0433 0433     ............3.3.
   27afc:	5577 d75d ffff ffff ffff ffff ffff ffff     wU].............
   27b0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27b1c:	ffff cf5d 4d57 0433 0433 0433 24b5 8e7a     ..].WM3.3.3..$z.
   27b2c:	f7ff ffff ffff df7d 5d77 03f2 0c34 0433     ......}.w]..4.3.
   27b3c:	34f6 cf3d ffff ffff ffff ffff ffff ffff     .4=.............
   27b4c:	ffff ffff ffff ffff ffff cf5d 24d5 0453     ..........]..$S.
   27b5c:	0433 9e9b f7ff ffff ffff ffff ffff ffff     3...............
   27b6c:	ffff 9e7a 2495 0433 0453 0454 0454 0453     ..z..$3.S.T.T.S.
   27b7c:	0433 0453 0413 4d57 d75d ffff ffff ffff     3.S...WM].......
   27b8c:	cf3d 24d5 0433 0433 0453 0433 0c54 0454     =..$3.3.S.3.T.T.
   27b9c:	0453 0454 0454 0413 1453 8e7a ffff ffff     S.T.T...S.z.....
   27bac:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   27bbc:	24d5 0433 0454 0c54 0453 0454 0c54 0454     .$3.T.T.S.T.T.T.
   27bcc:	0433 1c95 ffff ffff ffff ffff ffff ffff     3...............
   27bdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27bec:	ffff ffff ffff ffff ffff ffff c71d 3d16     ...............=
   27bfc:	0433 0454 0c54 0c54 0c54 0453 0454 0413     3.T.T.T.T.S.T...
   27c0c:	2cd5 aedb ffff ffff ffff ffff ffff ffff     .,..............
   27c1c:	b6fc 1cb5 0433 0454 0454 0454 0454 0453     ....3.T.T.T.T.S.
   27c2c:	0433 0413 1c95 965a aedc b6dc b6fc b6fc     3.....Z.........
   27c3c:	b6fc b6dc b6dc b6dc b6fc b6fc b6fc b6dc     ................
   27c4c:	aedc cf3d ffdf ffff ffff 0453 0433 5557     ..=.......S.3.WU
   27c5c:	d75d ffff ffff ffff ffff ffff ffff ffff     ]...............
   27c6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27c7c:	ffff df9e 5598 0413 0434 0433 0c54 b6dc     .....U..4.3.T...
   27c8c:	ffff ffff ffff d75e 5577 0433 0454 0413     ......^.wU3.T...
   27c9c:	2cf6 c73d ffff ffff ffff ffff ffff ffff     .,=.............
   27cac:	ffff ffff ffff ffff cf5d 24d5 0453 0433     ........]..$S.3.
   27cbc:	9e9b f7ff ffff ffff ffff ffff ffff ffff     ................
   27ccc:	967b 1c94 0433 0454 0c54 0433 0454 0454     {...3.T.T.3.T.T.
   27cdc:	0453 0413 4d57 d75d ffff ffff ffff ffff     S...WM].........
   27cec:	b6dc 1c95 0413 0453 0454 0454 0454 0433     ......S.T.T.T.3.
   27cfc:	0453 0454 0c53 03f3 24b5 aedc ffff ffff     S.T.S....$......
   27d0c:	ffff ffff ffff ffff ffff ffff cf3d 24d5     ............=..$
   27d1c:	0433 0454 0453 0453 0c54 0453 0454 0433     3.T.S.S.T.S.T.3.
   27d2c:	1494 c71d c73c c71d c71d c71d c71c c71d     ....<...........
   27d3c:	c71d c71d c71c c71c c73d c73d bf1c d75e     ........=.=...^.
   27d4c:	ffff ffff ffff ffff ffff bf1d 3516 0413     .............5..
   27d5c:	0c54 0c54 0453 0434 0453 0454 0433 2cd5     T.T.S.4.S.T.3..,
   27d6c:	aedc ffff ffff ffff ffff ffff ffff b6fc     ................
   27d7c:	1cb5 0433 0434 0433 0453 0454 0454 0453     ..3.4.3.S.T.T.S.
   27d8c:	0433 0c54 24d5 34f6 2cf6 34f6 34f6 2cd5     3.T..$.4.,.4.4.,
   27d9c:	2cf5 2cf6 34d5 2cf6 2cf6 2cf5 2cf6 24b5     .,.,.4.,.,.,.,.$
   27dac:	6dd9 efbe ffff ffff 0453 0433 5557 d75d     .m......S.3.WU].
   27dbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27dcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27ddc:	cf5d 4d37 0413 0434 0433 34d6 befc ffff     ].7M..4.3..4....
   27dec:	ffff ffff d75e 5577 0433 0454 03f3 2cf6     ....^.wU3.T....,
   27dfc:	c73d ffff ffff ffff ffff ffff ffff ffff     =...............
   27e0c:	ffff ffff ffff cf5d 24d5 0433 0433 9e9b     ......]..$3.3...
   27e1c:	f7ff ffff ffff ffff ffff ffff ffff 969b     ................
   27e2c:	1cb5 0433 0453 0453 0453 0c53 0c54 0453     ..3.S.S.S.S.T.S.
   27e3c:	0433 4d57 d75d ffff ffff ffff ffff ffff     3.WM]...........
   27e4c:	8e5a 1c95 0433 0454 0433 0454 0453 0c53     Z...3.T.3.T.S.S.
   27e5c:	0454 0c54 0454 03f3 2cf5 c71d ffff ffff     T.T.T....,......
   27e6c:	ffff ffff ffff ffff ffff cf5d 2cd5 0433     ..........]..,3.
   27e7c:	0453 0454 0433 0434 0453 0453 0433 0c54     S.T.3.4.S.S.3.T.
   27e8c:	3d16 4517 3d16 3d16 3d16 3d16 3d16 3d36     .=.E.=.=.=.=.=6=
   27e9c:	3d36 3d16 3d16 3d37 3d36 34f5 75f9 ffff     6=.=.=7=6=.4.u..
   27eac:	ffff ffff ffff ffff c71d 3d16 0413 0454     ...........=..T.
   27ebc:	0c54 0453 0434 0454 0454 0413 2cd5 aebb     T.S.4.T.T....,..
   27ecc:	ffff ffff ffff ffff ffff ffff b6fc 1cb5     ................
   27edc:	0433 0434 0433 0453 0c54 0453 0453 0454     3.4.3.S.T.S.S.T.
   27eec:	0434 0413 0413 0413 0413 0413 0413 0413     4...............
   27efc:	0413 0413 0413 0413 0413 0413 03d2 4536     ..............6E
   27f0c:	e79e ffff ffff 0453 0433 5557 d75d ffff     ......S.3.WU]...
   27f1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27f2c:	ffff ffff ffff ffff ffff ffff c73d 34f6     ............=..4
   27f3c:	03f3 0433 0433 3516 c71d ffff ffff ffff     ..3.3..5........
   27f4c:	cf3d 5d97 03f3 0453 0433 34f6 cf3d ffff     =..]..S.3..4=...
   27f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27f6c:	ffff ffff cf5d 24d5 0433 0433 9e9b f7ff     ....]..$3.3.....
   27f7c:	ffff ffff ffff ffff ffff ffff 9e7b 1cb5     ............{...
   27f8c:	0413 0433 0454 0c54 0c53 0454 0433 0413     ..3.T.T.S.T.3...
   27f9c:	4d57 cf5d ffff ffff ffff ffff ffff ffff     WM].............
   27fac:	75f9 0c54 0413 0453 0433 0454 0453 0453     .uT...S.3.T.S.S.
   27fbc:	0454 0433 0433 0413 3d16 e77e ffff ffff     T.3.3....=~.....
   27fcc:	ffff ffff ffff ffff cf5d 2cb5 0433 0454     ........]..,3.T.
   27fdc:	0454 0453 0453 0453 0453 0454 0453 0413     T.S.S.S.S.T.S...
   27fec:	0413 0413 0413 0413 0413 0413 0413 0413     ................
   27ffc:	0413 0413 0413 0413 03b2 4536 ffff ffff     ..........6E....
   2800c:	ffff ffff ffff c71d 3d16 0413 0453 0c54     .........=..S.T.
   2801c:	0454 0454 0c34 0433 0413 2cd5 aedb ffff     T.T.4.3....,....
   2802c:	ffff ffff ffff ffff ffff b6fc 1c95 0433     ..............3.
   2803c:	0454 0454 0c54 0434 0453 0453 0454 0434     T.T.T.4.S.S.T.4.
   2804c:	0453 0453 0453 0454 0453 0454 0c54 0454     S.S.S.T.S.T.T.T.
   2805c:	0453 0434 0c34 0454 0453 0413 4d57 ef9e     S.4.4.T.S...WM..
   2806c:	ffff ffff 0433 0413 4d77 d75d ffff ffff     ....3...wM].....
   2807c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2808c:	ffff ffff ffff ffff cf5d 34f6 03f3 0433     ........]..4..3.
   2809c:	0433 3cf6 c71c ffff ffff ffff befc 34f5     3..<...........4
   280ac:	03d2 0453 0c74 34d6 d75d ffff ffff ffff     ..S.t..4].......
   280bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   280cc:	ffff cf5d 24d5 0453 0433 9e9b f7ff ffff     ..]..$S.3.......
   280dc:	ffff ffff ffff ffff ffff 9e7b 1c95 0413     ..........{.....
   280ec:	0454 0454 0434 0453 0454 0433 0413 4d57     T.T.4.S.T.3...WM
   280fc:	cf5d ffff ffff ffff ffff ffff ffff efbf     ]...............
   2810c:	6598 0c33 0c33 0c54 0434 0c54 0c53 0434     .e3.3.T.4.T.S.4.
   2811c:	0453 0453 0413 0454 5db8 efbf ffff ffff     S.S...T..]......
   2812c:	ffff ffff ffff cf3d 24d5 0433 0454 0453     ......=..$3.T.S.
   2813c:	0c53 0434 0453 0454 0434 0453 0434 0453     S.4.S.T.4.S.4.S.
   2814c:	0433 0433 0434 0433 0433 0c54 0c54 0453     3.3.4.3.3.T.T.S.
   2815c:	0454 0c34 0433 03f3 4557 ffff ffff ffff     T.4.3...WE......
   2816c:	ffff ffff c71d 3516 0413 0453 0c54 0c53     .......5..S.T.S.
   2817c:	0453 0454 0454 0413 2cd5 aebb ffff ffff     S.T.T....,......
   2818c:	ffff ffff ffff ffff b6fc 1cb5 0433 0454     ............3.T.
   2819c:	0433 0434 0434 0433 0c33 0454 0454 0c54     3.4.4.3.3.T.T.T.
   281ac:	0c54 0433 0454 0453 0454 0454 0454 0453     T.3.T.S.T.T.T.S.
   281bc:	0c54 0c34 0453 0433 0413 4d77 e79e ffff     T.4.S.3...wM....
   281cc:	ffff 0454 0413 5577 d75d ffff ffff ffff     ..T...wU].......
   281dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   281ec:	ffff ffff d75d 2cf6 0433 0434 0433 3cf6     ....]..,3.4.3..<
   281fc:	c73d ffff ffff ffff bf1c 3cf6 0413 0434     =..........<..4.
   2820c:	1474 4d57 d77d ffff ffff ffff ffff ffff     t.WM}...........
   2821c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2822c:	cf5d 24d5 0433 0433 9e9b f7ff ffff ffff     ]..$3.3.........
   2823c:	ffff ffff ffff ffff 9e7b 1cb5 0433 0453     ........{...3.S.
   2824c:	0453 0453 0c54 0454 0453 0413 4d57 cf5d     S.S.T.T.S...WM].
   2825c:	ffff ffff ffff ffff ffff ffff ffff cf3d     ..............=.
   2826c:	4537 0413 0c53 0453 0434 0434 0454 0c54     7E..S.S.4.4.T.T.
   2827c:	0454 0454 0434 0c54 8e5a f7bf ffff ffff     T.T.4.T.Z.......
   2828c:	ffff ffff cf5d 24d5 0453 0c34 0c54 0c54     ....]..$S.4.T.T.
   2829c:	0433 0453 0453 0433 0c54 0434 0434 0454     3.S.S.3.T.4.4.T.
   282ac:	0434 0433 0c54 0434 0454 0453 0434 0c54     4.3.T.4.T.S.4.T.
   282bc:	0433 0453 0413 4d57 ffff ffff ffff ffff     3.S...WM........
   282cc:	ffff c71d 3d16 0413 0453 0453 0c53 0433     .....=..S.S.S.3.
   282dc:	0433 0433 0413 2cd5 aedb ffff ffff ffff     3.3....,........
   282ec:	ffff ffff ffff b6fc 1cb5 0433 0c54 0454     ..........3.T.T.
   282fc:	0454 0433 0454 0c34 0454 0453 0454 0434     T.3.T.4.T.S.T.4.
   2830c:	0454 0c54 0433 0454 0454 0433 0433 0c54     T.T.3.T.T.3.3.T.
   2831c:	0453 0434 0453 03f3 5557 e7be ffff ffff     S.4.S...WU......
   2832c:	0453 0413 5557 d77e ffff ffff ffff ffff     S...WU~.........
   2833c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2834c:	d77e 2cf5 0c54 0433 0413 4537 cf3d ffff     ~..,T.3...7E=...
   2835c:	ffff ffff c73d 34f6 0413 0433 0454 4d77     ....=..4..3.T.wM
   2836c:	f7df ffff ffff ffff ffff ffff ffff ffff     ................
   2837c:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   2838c:	24d5 0433 0433 9e9b f7ff ffff ffff ffff     .$3.3...........
   2839c:	ffff ffff ffff 9e7b 1c95 0433 0453 0433     ......{...3.S.3.
   283ac:	0433 0453 0c54 0453 0413 4557 d75d ffff     3.S.T.S...WE]...
   283bc:	ffff ffff ffff ffff ffff ffff ffff b6fc     ................
   283cc:	24f5 0413 0453 0454 0434 0454 0c33 0454     .$..S.T.4.T.3.T.
   283dc:	0454 0453 0433 0c74 aebb ffdf ffff ffff     T.S.3.t.........
   283ec:	ffff cf5d 24d5 0434 0434 0454 0453 0453     ..]..$4.4.T.S.S.
   283fc:	0454 0454 0454 0454 0454 0454 0454 0454     T.T.T.T.T.T.T.T.
   2840c:	0453 0433 0434 0c34 0c54 0c54 0454 0453     S.3.4.4.T.T.T.S.
   2841c:	0453 03f2 4557 ffff ffff ffff ffff ffff     S...WE..........
   2842c:	c71d 3d36 0413 0433 0c54 0434 0434 0434     ..6=..3.T.4.4.4.
   2843c:	0433 0413 24d5 aedb ffff ffff ffff ffff     3....$..........
   2844c:	ffff ffff b6fc 1cb5 0433 0454 0453 0454     ........3.T.S.T.
   2845c:	0453 0453 0453 0454 0454 0454 0434 0c54     S.S.S.T.T.T.4.T.
   2846c:	0c54 0c54 0c54 0454 0454 0454 0434 0434     T.T.T.T.T.T.4.4.
   2847c:	0454 0433 03f2 4d57 e79e ffff ffff 0453     T.3...WM......S.
   2848c:	0413 5557 d75d ffff ffff ffff ffff ffff     ..WU]...........
   2849c:	ffff ffff ffff ffff ffff ffff b6dc 2cf6     ...............,
   284ac:	0c53 0433 03f2 5d98 df9e ffff ffff ffff     S.3....]........
   284bc:	9e9a 2cf6 0433 0433 0413 5598 e79f ffff     ...,3.3....U....
   284cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   284dc:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   284ec:	0433 0433 9e9b f7df ffff ffff ffff ffff     3.3.............
   284fc:	ffff ffff 967b 1474 03f3 0433 0413 0413     ....{.t...3.....
   2850c:	0413 0413 0413 03d2 4536 cf5d ffff ffff     ........6E].....
   2851c:	ffff ffff ffff ffff ffff ffff f7df 9e7a     ..............z.
   2852c:	0433 0413 0413 0413 0433 0433 0413 0413     3.......3.3.....
   2853c:	0413 0413 0413 0c74 b6fc ffff ffff ffff     ......t.........
   2854c:	cf5d 1cb4 0413 0433 0413 0413 0413 0413     ].....3.........
   2855c:	0413 0413 0413 0413 0433 0413 0413 0413     ........3.......
   2856c:	0433 0433 0413 0413 0433 0433 0413 0413     3.3.....3.3.....
   2857c:	03d2 4537 ffff ffff ffff ffff ffff bf1d     ..7E............
   2858c:	3515 03f3 0413 0413 0413 0433 0433 0413     .5........3.3...
   2859c:	03f3 24b5 a6bb ffff ffff ffff ffff ffff     ...$............
   285ac:	ffff b6fc 1494 03f3 0413 0413 0413 0433     ..............3.
   285bc:	0433 0433 0413 0413 0413 0413 0413 0413     3.3.............
   285cc:	0413 0413 0413 0413 0413 0413 0413 0413     ................
   285dc:	0413 03d2 4d37 e79e ffff ffff 0453 0433     ....7M......S.3.
   285ec:	5557 d75d ffff ffff ffff ffff ffff ffff     WU].............
   285fc:	ffff ffff ffff ffff a69b 24b5 0433 0c33     ...........$3.3.
   2860c:	03d3 5597 d77e ffff ffff ffff 8e5a 24d5     ...U~.......Z..$
   2861c:	0434 03f3 0434 5db8 df7e ffff ffff ffff     4...4..]~.......
   2862c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2863c:	ffff ffff ffff ffff ffff cf5d 24d5 0433     ..........]..$3.
   2864c:	0433 9e9b f7ff ffff ffff ffff ffff ffff     3...............
   2865c:	ffff b6fc 5d98 4d37 4d57 4d57 4d77 4d77     .....]7MWMWMwMwM
   2866c:	4d57 4d77 4d37 7e19 df9e ffff ffff ffff     WMwM7M.~........
   2867c:	ffff ffff ffff ffff ffff ffff efbe 8e5a     ..............Z.
   2868c:	4537 4d57 4d77 4d57 4d77 4d57 4d77 4d57     7EWMwMWMwMWMwMWM
   2869c:	5557 4d57 4536 967a efbf ffff ffff df7e     WUWM6Ez.......~.
   286ac:	65b8 4d57 4d77 4d57 4d57 4d57 4d57 4d57     .eWMwMWMWMWMWMWM
   286bc:	4d57 4d77 4d77 4d77 4d57 4d57 4d77 4d57     WMwMwMwMWMWMwMWM
   286cc:	4d77 4d57 4d57 4d57 4d57 4d57 4d77 4536     wMWMWMWMWMWMwM6E
   286dc:	7e3a ffff ffff ffff ffff ffff d75e 75f9     :~..........^..u
   286ec:	4537 4d77 4d57 5557 5577 4d57 4d57 4d57     7EwMWMWUwUWMWMWM
   286fc:	6dd8 c73d ffff ffff ffff ffff ffff ffff     .m=.............
   2870c:	cf3d 5d98 4d57 4d57 4d77 4d57 4d57 4d57     =..]WMWMwMWMWMWM
   2871c:	4d57 4d57 4d57 4d57 4d77 4d57 4d57 4d57     WMWMWMWMwMWMWMWM
   2872c:	4d57 4d77 4d57 4d77 4d57 4d57 5557 4d77     WMwMWMwMWMWMWUwM
   2873c:	4536 8639 efbf ffff ffff 0454 0433 5557     6E9.......T.3.WU
   2874c:	d75d ffff ffff ffff ffff ffff ffff ffff     ]...............
   2875c:	ffff ffff 9e9b 24b5 03f3 0433 03f3 5578     .......$..3...xU
   2876c:	d77e ffff ffff ffff 965a 1c95 0433 0412     ~.......Z...3...
   2877c:	0c74 75f9 e77e ffff ffff ffff ffff ffff     t..u~...........
   2878c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2879c:	ffff ffff ffff ffff cf5d 24d5 0433 0433     ........]..$3.3.
   287ac:	9e9b f7ff ffff ffff ffff ffff ffff ffff     ................
   287bc:	f7bf df5d cf5d d75d d75d d75d d75d d73d     ..].].].].].].=.
   287cc:	d75d cf5e e77e f7ff ffff ffff ffff ffff     ].^.~...........
   287dc:	ffff ffff ffff ffff ffff ffff f7ff cf5d     ..............].
   287ec:	d75d d75d d75d d75d d75d d75d d75d d75d     ].].].].].].].].
   287fc:	d75d d73d d77e f7df ffff ffff f7df df7e     ].=.~.........~.
   2880c:	d75d d75e d77d d75d d75d d75d d75d d75d     ].^.}.].].].].].
   2881c:	d75d d75d d75d d75d d75d d75d d75d d75d     ].].].].].].].].
   2882c:	d75d d75d d75d d75d d75d d75e cf5d df7e     ].].].].].^.].~.
   2883c:	ffff ffff ffff ffff ffff f7df e77e cf5d     ............~.].
   2884c:	d75d d75d d75d d75d d75d d75d cf5d df7e     ].].].].].].].~.
   2885c:	f7bf ffff ffff ffff ffff ffff ffff f7df     ................
   2886c:	d77d d75d d75d d75d d75d d75d d75d d75d     }.].].].].].].].
   2887c:	d75d d75d d75d d75d d75d d75d d75d d75d     ].].].].].].].].
   2888c:	d75d d75d d75d d75d d75d d75d d75d cf5d     ].].].].].].].].
   2889c:	e77e ffff ffff ffff 0454 0433 5577 d75d     ~.......T.3.wU].
   288ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   288bc:	a69b 24b5 03f2 0433 0c54 4d77 df7e ffff     ...$..3.T.wM~...
   288cc:	ffff efbe 863a 1494 0413 0413 0c74 7e19     ....:.......t..~
   288dc:	f7df ffff ffff ffff ffff ffff ffff ffff     ................
   288ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   288fc:	ffff ffff ffff cf5d 24d5 0433 0433 9e7b     ......]..$3.3.{.
   2890c:	f7df ffff ffff ffff ffff ffff ffff ffff     ................
   2891c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2892c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2893c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2894c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2895c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2896c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2897c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2898c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2899c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   289fc:	ffff ffff ffff 0453 0433 5577 d75d ffff     ......S.3.wU]...
   28a0c:	ffff ffff ffff ffff ffff f7ff a69b 2495     ...............$
   28a1c:	03f3 0433 1474 6df8 e7be ffff ffff e79e     ..3.t..m........
   28a2c:	75f9 0433 0413 0433 1474 7e39 f7df ffff     .u3...3.t.9~....
   28a3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28a4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28a5c:	ffff ffff cf5d 24d5 0453 0433 9e7b f7df     ....]..$S.3.{...
   28a6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28a7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28a8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28a9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28aac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28abc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28acc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28adc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28aec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28afc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28b5c:	ffff ffff 0453 0413 5577 d75d ffff ffff     ....S...wU].....
   28b6c:	ffff ffff ffff efbf aebb 1cb5 03f2 0433     ..............3.
   28b7c:	1494 6dd9 ffff ffff ffff efbf 6dd8 0413     ...m.........m..
   28b8c:	0433 0c53 24b5 8e5a ffff ffff ffff ffff     3.S..$Z.........
   28b9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bbc:	ffff cf5d 24d5 0453 0433 9e7b f7ff ffff     ..]..$S.3.{.....
   28bcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28c9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28cac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28cbc:	ffff 0454 0433 5557 d75d ffff ffff ffff     ..T.3.WU].......
   28ccc:	ffff f7ff 75f9 0c54 0413 0433 0c54 6df9     .....uT...3.T..m
   28cdc:	ffff ffff ffff f7df 65d8 0453 0433 0433     .........eS.3.3.
   28cec:	24b5 b6dc ffff ffff ffff ffff ffff ffff     .$..............
   28cfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d1c:	cf5d 24d5 0453 0433 9e7b f7df ffff ffff     ]..$S.3.{.......
   28d2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28d9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28dac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28dbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28dcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28ddc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28dec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28dfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28e0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28e1c:	0453 0413 4d77 d77e ffff ffff ffff ffff     S...wM~.........
   28e2c:	75f9 1474 0433 0433 0453 75d9 f7ff ffff     .ut.3.3.S..u....
   28e3c:	ffff e79e 4d77 0c54 0454 03f3 1cb5 b6dc     ....wMT.T.......
   28e4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28e5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28e6c:	ffff ffff ffff ffff ffff ffff ffff cf5d     ..............].
   28e7c:	24d5 0433 0433 9e9b f7df ffff ffff ffff     .$3.3...........
   28e8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28e9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28eac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28ebc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28ecc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28edc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28eec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28efc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28f6c:	ffff ffff ffff ffff ffff ffff ffff 0453     ..............S.
   28f7c:	0433 4d57 d75d ffff ffff f7df 75f9 1c74     3.WM]........ut.
   28f8c:	0454 0413 0c74 863a efbe ffff ffff e79e     T...t.:.........
   28f9c:	4537 0c74 0454 03d2 24b5 aedb f7df ffff     7Et.T....$......
   28fac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28fbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28fcc:	ffff ffff ffff ffff ffff ffff cf5d 24d5     ............]..$
   28fdc:	0433 0433 9e9b f7ff ffff ffff ffff ffff     3.3.............
   28fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28ffc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2900c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2901c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2902c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2903c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2904c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2905c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2906c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2907c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2908c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2909c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   290ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   290bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   290cc:	ffff ffff ffff ffff ffff ffff 0454 0433     ............T.3.
   290dc:	5577 d75d ffff f7df 75f9 0c74 0434 0413     wU]......ut.4...
   290ec:	1c94 967a efbf ffff ffff df7e 4537 0453     ..z.......~.7ES.
   290fc:	0433 03f3 4536 c73d f7ff ffff ffff ffff     3...6E=.........
   2910c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2911c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2912c:	ffff ffff ffff ffff ffff cf5d 24d5 0433     ..........]..$3.
   2913c:	0433 9e9b f7ff ffff ffff ffff ffff ffff     3...............
   2914c:	ffff ffff ffff ffff ffff ffdf ef7d ffff     ............}...
   2915c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2916c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2917c:	ffff f79e ffdf ffff ffff ffff ffff ffff     ................
   2918c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2919c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   291ac:	ffff ffff f79e a4f3 7bcf 9cb2 e73c ffff     .........{..<...
   291bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   291cc:	e73c ef7d ffff ffff ffff ffff ffff ffff     <.}.............
   291dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   291ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   291fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2920c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2921c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2922c:	ffff ffff ffff ffff ffff 0454 0413 5577     ..........T...wU
   2923c:	e7be e7bf 6dd9 0c74 0433 0433 1c94 9e7b     .....mt.3.3...{.
   2924c:	f7df ffff ffff c73d 4557 0413 0433 03f3     ......=.WE..3...
   2925c:	4556 cf3d ffff ffff ffff ffff ffff ffff     VE=.............
   2926c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2927c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2928c:	ffff ffff ffff ffff cf5d 24d5 0433 0433     ........]..$3.3.
   2929c:	9e9b f7df ffff ffff ffff ffff ffff ffff     ................
   292ac:	ffff ffff ffff ffdf ad35 738e e71c ffff     ........5..s....
   292bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   292cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   292dc:	83f0 8c51 ef5d ffff ffff ffdf c638 73ae     ..Q.].......8..s
   292ec:	738e 736d 8410 d69a ffff ffff dedb 7baf     .sms...........{
   292fc:	a514 ffff ffff ffff ffff dedb 83f0 9cd3     ................
   2930c:	f7be 8410 6b2d 6b4d 6b4d 9492 d6ba ffff     ....-kMkMk......
   2931c:	ffff ffff ffff ffff ef7d a514 6b2c 4a49     ........}...,kIJ
   2932c:	528a 6b4d 9492 e71c ffff ffff ffff ffff     .RMk............
   2933c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2934c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2935c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2936c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2937c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2938c:	ffff ffff ffff ffff 0454 0433 5d98 aedc     ........T.3..]..
   2939c:	6dd8 0453 0413 0433 1cb5 967b ffff ffff     .mS...3...{.....
   293ac:	ffff b6fc 3cf6 0413 0433 0413 3d16 cf5d     .....<..3....=].
   293bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   293cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   293dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   293ec:	ffff ffff ffff cf5d 24d5 0453 0433 9e9b     ......]..$S.3...
   293fc:	f7ff ffff ffff ffff ffff ffff ffff ffff     ................
   2940c:	ffff ffff d69a 4a29 1082 9cf3 ffff ffff     ......)J........
   2941c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2942c:	ffff ffff ffff ffff ffff ffdf ce79 20e3     ............y.. 
   2943c:	18c3 ce79 ffff ffff f7be 8c71 0000 39c7     ..y.......q....9
   2944c:	4a29 18c3 6b4d e71c ffff bdd7 0000 2945     )J..Mk........E)
   2945c:	b575 ffff ffff defb 6b4d 0000 2945 ce59     u.......Mk..E)Y.
   2946c:	7baf 630c 8410 8c51 630c 9cd3 ffff ffff     .{.c..Q..c......
   2947c:	ffff ffff e73c 8410 2945 3186 5aaa 528a     ....<...E).1.Z.R
   2948c:	4a28 2945 b596 ffdf ffff ffff ffff ffff     (JE)............
   2949c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   294ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   294bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   294cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   294dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   294ec:	ffff ffff ffff 0453 0433 3d36 34f6 0433     ......S.3.6=.43.
   294fc:	0413 0454 34f5 967a ffff ffff ffff b6dc     ..T..4z.........
   2950c:	34d6 03d3 0433 0c54 4536 d75e ffff ffff     .4..3.T.6E^.....
   2951c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2952c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2953c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2954c:	ffff ffff cf5d 24d5 0453 0433 9e9b f7ff     ....]..$S.3.....
   2955c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2956c:	ffff 9cf3 18e3 2104 528a f79e ffff ffff     .......!.R......
   2957c:	ffdf ffff ffdf ef5d f79e ffff ffff ffff     ......].........
   2958c:	ffff ffff ffff ffff ef7d 7bef 2945 0841     ........}..{E)A.
   2959c:	9cb2 f79e ffff f7be 9492 2104 bdf7 ef5d     ...........!..].
   295ac:	5acb 3165 b596 ffff c618 0841 2924 31a6     .Ze1......A.$).1
   295bc:	ce59 ef3c 7bef 18c3 18c3 31a6 9cd3 ce38     Y.<..{.....1..8.
   295cc:	528a 4a69 a514 7bcf 8430 ffff ffff ffff     .RiJ...{0.......
   295dc:	ffff 8c30 2104 52aa c618 f79e ef5d dedb     ..0..!.R....]...
   295ec:	8c51 c618 ffdf ffff ffff f7be ffdf ffff     Q...............
   295fc:	ffff ffff ffdf ffff f79e ef5d ffff ffff     ..........].....
   2960c:	ef5d e73c ffff ffff ffff f7be f7be ffdf     ].<.............
   2961c:	ffff ffff ffff ffff f79e e73c f7be ffff     ..........<.....
   2962c:	ffff ffdf ffff f7be e73c f7be ffff f7be     ........<.......
   2963c:	ffdf ffff ffff ffff f7be ffdf ffff ffff     ................
   2964c:	ffff ffff 0454 0434 0433 0433 0434 0433     ....T.4.3.3.4.3.
   2965c:	3cf6 b6dc ffff ffff f7df b6fc 2cf6 03f2     .<...........,..
   2966c:	0454 0c74 5598 efbf ffff ffff ffff ffff     T.t..U..........
   2967c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2968c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2969c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   296ac:	ffff cf5d 24d5 0433 0413 9e7b f7df ffff     ..]..$3...{.....
   296bc:	ffff ffff ffff ffff ffff ffff ffff f79e     ................
   296cc:	6b2d 3186 6b4d 2925 bdd7 ffdf ffff d69a     -k.1Mk%)........
   296dc:	bdf7 ad55 8c31 9cb2 defb ffff ffff ffff     ..U.1...........
   296ec:	ffff ffff ffff d6ba 39e7 6b6d 4208 4208     .........9mk.B.B
   296fc:	c638 ffff f7be 9492 2104 c638 f79e 738e     8........!8....s
   2970c:	41e7 b5b6 ffff bdf7 10a2 5aaa 2924 6b2c     .A.........Z$),k
   2971c:	73ae 39c7 41e7 4208 39a6 b596 94b2 52aa     .s.9.A.B.9.....R
   2972c:	5acb a514 83ef 9492 ffff ffff ffff ffbe     .Z..............
   2973c:	3186 41e7 d6ba ffff ffff ffff ffff ffff     .1.A............
   2974c:	ffff ffff e73c b5b6 9cd3 ad55 d6ba ffdf     ....<.....U.....
   2975c:	ffff bdd7 b5b6 a4f3 8430 bdd7 e6fb 8c71     ........0.....q.
   2976c:	7bcf c618 ffdf e71c ad55 9cf3 a534 c618     .{......U...4...
   2977c:	ef5d ffff d6ba 9492 7bcf a514 ef5d ffff     ]........{..]...
   2978c:	d6ba bdd7 a514 83f0 a534 e71c d679 ad55     ........4...y.U.
   2979c:	ffdf ffff d69a ad55 dedb ffff ffff ffff     ......U.........
   297ac:	ffff 0454 0453 0454 0434 0413 3d36 cf3d     ..T.S.T.4...6==.
   297bc:	ffff ffff ffff a69b 1cb5 0413 0433 0c54     ............3.T.
   297cc:	5598 ffff ffff ffff ffff ffff ffff ffff     .U..............
   297dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   297ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   297fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2980c:	cf5d 2cd5 0453 0433 9e9b f7ff ffff ffff     ]..,S.3.........
   2981c:	ffff ffff ffff ffff ffff ffff ad55 2965     ............U.e)
   2982c:	8410 ef3c 3186 736d f79e ffff 9492 2104     ..<..1ms.......!
   2983c:	3165 4a49 3166 5acb ffdf ffff ffff ffff     e1IJf1.Z........
   2984c:	ffff ffdf a514 20e4 ad55 a514 2104 9492     ....... U....!..
   2985c:	ffff f7be 9cb2 18c3 736d 738e 2104 5aaa     ........ms.s.!.Z
   2986c:	d69a ffff bdf7 18e3 9cb2 8410 2945 0861     ............E)a.
   2987c:	6b4d ad75 62eb 4208 f79e 4208 6b2c d69a     Mku..b.B...B,k..
   2988c:	632c 4a49 ce39 ffff ffff ffff d69a 2965     ,cIJ9.........e)
   2989c:	8410 f7be ffff ffff ffff ffff ffff ffff     ................
   298ac:	ef7d 6b4d 1082 2104 20e3 31a6 ce59 ffff     }.Mk...!. .1Y...
   298bc:	4a69 0820 4228 4a29 20e4 528a 41e8 2965     iJ .(B)J. .R.Ae)
   298cc:	39a6 dedb bdb6 2945 18c3 2104 2104 62ec     .9....E)...!.!.b
   298dc:	ffff 5aeb 2924 3186 2104 7bcf ffff 9492     ...Z$).1.!.{....
   298ec:	2104 3186 4208 2965 738e ad35 2104 c618     .!.1.Be).s5..!..
   298fc:	ffdf 5aab 39c7 bdf7 ffff ffff ffff ffff     ...Z.9..........
   2990c:	0454 0454 0454 03f2 3d16 c71d ffff ffff     T.T.T....=......
   2991c:	ffff 863a 1cb5 0433 0433 0434 5d98 ffff     ..:...3.3.4..]..
   2992c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2993c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2994c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2995c:	ffff ffff ffff ffff ffff ffff ffff d75d     ..............].
   2996c:	24d5 0434 0433 9e9b f7df ffff ffff ffff     .$4.3...........
   2997c:	ffff ffff ffff ffff ffff 7bae 2104 736d     ...........{.!ms
   2998c:	9cb2 4a49 2924 d6ba ffff 8c71 4a29 b575     ..IJ$)....q.)Ju.
   2999c:	f7be 8410 2945 f79e ffff ffff ffff ffff     ....E)..........
   299ac:	dedb 5acb 2104 9492 9492 2945 5acb dedb     ...Z.!....E).Z..
   299bc:	ffff 9cb3 18a3 4a28 18e3 18a2 b596 ffff     ......(J........
   299cc:	ffff bdf7 18c3 9cd3 ffdf 5aeb 39c7 ce38     ...........Z.98.
   299dc:	e71c 528a 4208 ffff dedb 8c30 62ec 8410     ...R.B....0..b..
   299ec:	d69a ffff ffff ffff ffff d6ba 2965 8410     ............e)..
   299fc:	f7be ffff ffff ffff ffff ffff ffff 8410     ................
   29a0c:	2945 8c71 f79e ce59 4a28 4208 ffdf 4a49     E)q...Y.(J.B..IJ
   29a1c:	632c f79e bdf7 2965 630c f7be b5b6 2104     ,c....e).c.....!
   29a2c:	c618 b596 528a b596 f79e 9cb3 2104 c5f7     .....R.......!..
   29a3c:	a514 deba e73c 5acb 4208 ffff 9492 4208     ....<..Z.B.....B
   29a4c:	ce79 ef7d 5acb 5aaa bdf7 4a29 630c b5b6     y.}..Z.Z..)J.c..
   29a5c:	2965 7bcf f79e ffff ffff ffff ffff 0453     e).{..........S.
   29a6c:	0c34 03d2 3d16 bf1c ffff ffff ffff 863a     4....=........:.
   29a7c:	2495 0433 0453 0433 2cd5 8e3a a6bb a69b     .$3.S.3..,:.....
   29a8c:	a69b 9e9b 9e9b a69b a69b 9e9b a69b a69b     ................
   29a9c:	a69b a69b a69b a69b 9e9b 9e9b 9e9b a69b     ................
   29aac:	a69b a69b a69b a69b a69b a69b 9e9b 9e9b     ................
   29abc:	a69b 9e9b a69b a69b a69b a6bb 8619 1c95     ................
   29acc:	0433 0433 9e9b f7df ffff ffff ffff ffff     3.3.............
   29adc:	ffff ffff ffff d6ba 5269 0820 18a3 20e3     ........iR .... 
   29aec:	1082 18a2 8c31 ffff 8c71 5acb ce38 ffff     ....1...q..Z8...
   29afc:	a514 2104 f79e ffff ffff ffff ffff bdd7     ...!............
   29b0c:	1062 0861 18c3 20e3 0841 10a2 ad75 ffff     b.a.... A...u...
   29b1c:	9492 2924 b596 bdf7 2945 4a69 d69a ffff     ..$)....E)iJ....
   29b2c:	bdd7 18c3 9cb3 ffff defb d69a ffdf dedb     ................
   29b3c:	528a 41e7 ffff ffff ef7d e71c ef7d ffff     .R.A....}...}...
   29b4c:	ffff ffff ffff ffff ef5d 3186 62eb e73c     ........]..1.b<.
   29b5c:	ffff ffff ffff ffff ffff ffff 528a 39e7     .............R.9
   29b6c:	ce59 ffff f7be a514 18e3 f7be 4a49 73ae     Y...........IJ.s
   29b7c:	ffff ce59 41e7 6b4d ffff d6ba 2924 c5f7     ..Y..AMk....$)..
   29b8c:	b596 52aa bdb7 ffff ef7d 2104 ad55 e71c     ...R....}..!U...
   29b9c:	94b2 4a49 2124 4a49 ffff 9492 5269 dedb     ..IJ$!IJ....iR..
   29bac:	ffff 738e 4a49 d69a 8430 2104 4a69 31a6     ...sIJ..0..!iJ.1
   29bbc:	bdd7 ffff ffff ffff ffff ffff 0434 0413     ............4...
   29bcc:	5577 c73d ffff ffff f7df 7e19 1cb5 0453     wU=........~..S.
   29bdc:	0454 0434 0434 1474 2cd5 24b5 24b5 24b5     T.4.4.t..,.$.$.$
   29bec:	24d5 24b5 24b5 24b5 24b5 1cb5 1cb5 1cb5     .$.$.$.$.$......
   29bfc:	1cb5 24b5 24b5 24b5 24b5 24d5 24b5 24b5     ...$.$.$.$.$.$.$
   29c0c:	24b5 24b5 24b5 24b5 24b5 1cb5 1cb5 24b4     .$.$.$.$.$.....$
   29c1c:	24d5 24b5 1cb5 24b5 24b5 1cb5 0474 0454     .$.$...$.$..t.T.
   29c2c:	0433 9e9b ffff ffff ffff ffff ffff ffff     3...............
   29c3c:	ffff ffff 8410 3186 83f0 bdd7 bdb7 b576     .......1......v.
   29c4c:	5aaa 39c7 ef5d 94b2 5aeb ce59 ffff a514     .Z.9]....ZY.....
   29c5c:	2104 f79e ffff ffff ffff ef5d 736d 18e3     .!........].ms..
   29c6c:	b596 bdd7 bdd7 bdd7 39c7 6b2d ef5d 9cb3     .........9-k]...
   29c7c:	2924 d69a ffff 8c51 18e3 8c51 ffff c5f8     $)....Q...Q.....
   29c8c:	18c3 9cd3 ffdf ffff ffff ffff d6ba 528a     ...............R
   29c9c:	41e7 ffff ffff ffff ffff ffff ffff ffff     .A..............
   29cac:	ffff ffff ffff ffff 632c 2104 7bef f79e     ........,c.!.{..
   29cbc:	ffff ffff ffff bdf7 e73c 5269 39c7 ce59     ........<.iR.9Y.
   29ccc:	ffff ffff 7baf 18a3 f7be 4a49 73ae ffff     .....{....IJ.s..
   29cdc:	ce59 4208 6b6d ffff d6ba 2924 c618 b596     Y..Bmk....$)....
   29cec:	5acb c618 ffff e71c 18e3 a514 738e 630c     .Z...........s.c
   29cfc:	a534 738e 4208 ffff 9492 526a d6ba ffff     4..s.B....jR....
   29d0c:	83f0 4208 ef5d dedb 2945 18a2 83f0 ef7d     ...B]...E)....}.
   29d1c:	ffff ffff ffff ffff ffff 0413 5d98 df7e     .............]~.
   29d2c:	ffff ffff cf5d 5577 0433 03f3 03f2 03f2     ....].wU3.......
   29d3c:	0412 03f2 03f2 03d2 03d2 03d2 03d2 03d2     ................
   29d4c:	03d2 03d2 03d2 03d2 03d2 03d2 03d2 03d2     ................
   29d5c:	03d2 03d2 03d2 03d3 03d2 03d2 03d2 03d2     ................
   29d6c:	03d2 03d2 03d2 03d2 03d2 03d2 03d2 03d2     ................
   29d7c:	03d2 03d2 03d2 03d2 03d2 03f3 0412 03d2     ................
   29d8c:	967a f7df ffff ffff ffff ffff ffff ffff     z...............
   29d9c:	e71c 3186 526a e71c ffff ffff ffff bdd7     ...1jR..........
   29dac:	1062 9cb2 736e 5aaa c618 ffff 9cd3 1082     b...ns.Z........
   29dbc:	f79e ffff ffff ffff ad75 2945 6b2d ffff     ........u.E)-k..
   29dcc:	ffff ffff ffff 7bcf 2924 9492 9cd3 1082     .......{$)......
   29ddc:	ce38 ffff ef3d 528a 2945 bdf7 c618 0841     8...=..RE)....A.
   29dec:	9492 ffdf ffff ffff ffff d69a 4a28 3186     ............(J.1
   29dfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   29e0c:	ffff ffff ffff d69a 528a 20e3 52aa 738e     .........R. .R.s
   29e1c:	738e 632c 3166 bdf7 a534 39c7 4a28 8410     .s,cf1..4..9(J..
   29e2c:	738e 2104 6b4d ffff 39c7 6b4d ffff c618     .s.!Mk...9Mk....
   29e3c:	3186 630c ffff d69a 18a3 bdd7 bdd7 41e7     .1.c...........A
   29e4c:	6b4d 94b2 4a69 2945 d67a 39a7 31a6 8c51     Mk..iJE)z..9.1Q.
   29e5c:	4a49 2945 b596 8c51 4208 d69a ffff 7bae     IJE)..Q..B.....{
   29e6c:	3186 ef7d ffdf 526a 18a3 c638 ffff ffff     .1}...jR..8.....
   29e7c:	ffff ffff ffff ffff 65b8 e79e ffff ffff     .........e......
   29e8c:	ffff b6dc 4537 4d57 4d57 5577 4d77 5557     ....7EWMWMwUwMWU
   29e9c:	5577 4d77 5577 4d77 4d77 4d77 4d57 4d57     wUwMwUwMwMwMWMWM
   29eac:	5557 4d77 4d77 5577 4d77 4d77 5577 5577     WUwMwMwUwMwMwUwU
   29ebc:	5577 5577 5577 4d57 5577 4d57 4d77 5577     wUwUwUWMwUWMwMwU
   29ecc:	5577 5577 5577 4d57 4d57 5577 5577 5577     wUwUwUWMWMwUwUwU
   29edc:	5577 4d77 5577 4d77 4d57 5577 4d57 befc     wUwMwUwMWMwUWM..
   29eec:	ffff ffff ffff ffff ffff ffff ffff d69a     ................
   29efc:	632c ad75 ffff ffff ffff ffff ffbe 738e     ,cu............s
   29f0c:	9492 9472 94b2 d6ba ffff c5f7 6b2c f7be     ..r.........,k..
   29f1c:	ffff ffff ffff b596 6b4d c618 ffff ffff     ........Mk......
   29f2c:	ffff ffff c618 6b4d 9492 c618 6b2c dedb     ......Mk....,k..
   29f3c:	ffff ffff bdd7 62ec a514 ce79 62ec bdb7     .......b..y..b..
   29f4c:	ffff ffff ffff ffff e71c 8430 7bcf ffff     ..........0..{..
   29f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   29f6c:	ffff ffff ffff ce59 7bcf 4228 3186 3186     ......Y..{(B.1.1
   29f7c:	4a49 62ec d69a ffbe a514 4a49 41e8 5269     IJ.b......IJ.AiR
   29f8c:	7bae dedb ffff 7bef 9cf3 ffff debb 7bcf     .{.....{.......{
   29f9c:	9cd3 ffff e71c 6b4d dedb b596 39a6 39e7     ......Mk.....9.9
   29fac:	52aa 5269 9cf3 ffdf 9492 52aa 6b2c 5acb     .RiR.......R,k.Z
   29fbc:	528a a534 b596 8c31 e71c ffff a534 7bef     .R4...1.....4..{
   29fcc:	f79e dedb 41e7 5acb ef5d ffff ffff ffff     .....A.Z].......
   29fdc:	ffff ffff ffff f7df ffff ffff ffff f7df     ................
   29fec:	e79e e77e e7be e7bf efbe ef9e e7be efbe     ..~.............
   29ffc:	e7be e7bf ef9e e7be efbe efbe e7be ef9e     ................
   2a00c:	efbe efbe ef9e e7be e7be e7be ef9e ef9e     ................
   2a01c:	ef9e ef9e e79e e7be e7be e7be e7be e7be     ................
   2a02c:	e7be e7be e79e e7be e7be e7be ef9e efbe     ................
   2a03c:	efbe e7be e7bf ef9e e7be e79e f7ff ffff     ................
   2a04c:	ffff ffff ffff ffff ffff ffff f79e e73c     ..............<.
   2a05c:	ffff ffff ffff ffff ffff ffff ffdf ef5d     ..............].
   2a06c:	ef5d f79e ffdf ffff f7be ef5d ffff ffff     ].........].....
   2a07c:	ffff ffff ef5d ef5d ffdf ffff ffff ffff     ....].].........
   2a08c:	ffff ffff ef7d ef7d f7be ef5d ffdf ffff     ....}.}...].....
   2a09c:	ffff ffff f79e e73c ef5d ef5d f7be ffff     ......<.].].....
   2a0ac:	ffff ffff ffff ffdf ef7d ef7d ffff ffff     ........}.}.....
   2a0bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a0cc:	ffff ffff ffff ffff defb bdf7 c618 e71c     ................
   2a0dc:	ffff ffff ffff ffff e73c bdf7 d69a ffff     ........<.......
   2a0ec:	ffff ffff ef7d f79e ffff ffdf ef7d f79e     ....}.......}...
   2a0fc:	ffff ffdf ef5d ffff a514 526a 8c51 bdf7     ....].....jRQ...
   2a10c:	e71c ffff ffff f7be c618 d69a e73c c618     ............<...
   2a11c:	ffdf f7be f77d ffdf ffff f79e f77e f79e     ....}.......~...
   2a12c:	9492 20e3 bdf7 ffdf ffff ffff ffff ffff     ... ............
   2a13c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a14c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a15c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a16c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a17c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a18c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a19c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a1fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a20c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a21c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a22c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a23c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a24c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a25c:	ffff ffff ffff a4f3 52aa bdd7 ffff ffff     .........R......
   2a26c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a27c:	ffff ffff ffff ffff ffff ffff d6ba 4a69     ..............iJ
   2a28c:	528a ffdf ffff ffff ffff ffff ffff ffff     .R..............
   2a29c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a2fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a30c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a31c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a32c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a33c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a34c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a35c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a36c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a37c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a38c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a39c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a3ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a3bc:	ffff ffff a4f3 52aa b5b6 ffff ffff ffff     .......R........
   2a3cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   2a3dc:	ffff ffff ffff ffff ffff ad75 20e4 b576     ..........u.. v.
   2a3ec:	ffdf ffff ffff ffff ffff ffff ffff ffff     ................
   2a3fc:	654b 6c69 6f4c 6f67 0000 0000               KeilLogo....

0002a408 <ImgKeilLogo>:
   2a408:	a3fc 0002 00af 0038 576c 0002               ......8.lW..

0002a414 <FontTerminal8x8_0020>:
	...

0002a41c <FontTerminal8x8_0021>:
   2a41c:	3c18 183c 0018 0018                         .<<.....

0002a424 <FontTerminal8x8_0022>:
   2a424:	6666 0024 0000 0000                         ff$.....

0002a42c <FontTerminal8x8_0023>:
   2a42c:	6c6c 6cfe 6cfe 006c                         ll.l.ll.

0002a434 <FontTerminal8x8_0024>:
   2a434:	3e18 3c60 7c06 0018                         .>`<.|..

0002a43c <FontTerminal8x8_0025>:
   2a43c:	c600 18cc 6630 00c6                         ....0f..

0002a444 <FontTerminal8x8_0026>:
   2a444:	6c38 7638 ccdc 0076                         8l8v..v.

0002a44c <FontTerminal8x8_0027>:
   2a44c:	1818 0030 0000 0000                         ..0.....

0002a454 <FontTerminal8x8_0028>:
   2a454:	180c 3030 1830 000c                         ..000...

0002a45c <FontTerminal8x8_0029>:
   2a45c:	1830 0c0c 180c 0030                         0.....0.

0002a464 <FontTerminal8x8_002A>:
   2a464:	6600 ff3c 663c 0000                         .f<.<f..

0002a46c <FontTerminal8x8_002B>:
   2a46c:	1800 7e18 1818 0000                         ...~....

0002a474 <FontTerminal8x8_002C>:
   2a474:	0000 0000 1800 3018                         .......0

0002a47c <FontTerminal8x8_002D>:
   2a47c:	0000 7e00 0000 0000                         ...~....

0002a484 <FontTerminal8x8_002E>:
   2a484:	0000 0000 1800 0018                         ........

0002a48c <FontTerminal8x8_002F>:
   2a48c:	0c06 3018 c060 0080                         ...0`...

0002a494 <FontTerminal8x8_0030>:
   2a494:	6c38 c6c6 6cc6 0038                         8l...l8.

0002a49c <FontTerminal8x8_0031>:
   2a49c:	3818 1818 1818 007e                         .8....~.

0002a4a4 <FontTerminal8x8_0032>:
   2a4a4:	c67c 1c06 6630 00fe                         |...0f..

0002a4ac <FontTerminal8x8_0033>:
   2a4ac:	c67c 3c06 c606 007c                         |..<..|.

0002a4b4 <FontTerminal8x8_0034>:
   2a4b4:	3c1c cc6c 0cfe 001e                         .<l.....

0002a4bc <FontTerminal8x8_0035>:
   2a4bc:	c0fe fcc0 c606 007c                         ......|.

0002a4c4 <FontTerminal8x8_0036>:
   2a4c4:	6038 fcc0 c6c6 007c                         8`....|.

0002a4cc <FontTerminal8x8_0037>:
   2a4cc:	c6fe 180c 3030 0030                         ....000.

0002a4d4 <FontTerminal8x8_0038>:
   2a4d4:	c67c 7cc6 c6c6 007c                         |..|..|.

0002a4dc <FontTerminal8x8_0039>:
   2a4dc:	c67c 7ec6 0c06 0078                         |..~..x.

0002a4e4 <FontTerminal8x8_003A>:
   2a4e4:	1800 0018 1800 0018                         ........

0002a4ec <FontTerminal8x8_003B>:
   2a4ec:	1800 0018 1800 3018                         .......0

0002a4f4 <FontTerminal8x8_003C>:
   2a4f4:	0c06 3018 0c18 0006                         ...0....

0002a4fc <FontTerminal8x8_003D>:
   2a4fc:	0000 007e 7e00 0000                         ..~..~..

0002a504 <FontTerminal8x8_003E>:
   2a504:	3060 0c18 3018 0060                         `0...0`.

0002a50c <FontTerminal8x8_003F>:
   2a50c:	c67c 180c 0018 0018                         |.......

0002a514 <FontTerminal8x8_0040>:
   2a514:	c67c dede c0de 0078                         |.....x.

0002a51c <FontTerminal8x8_0041>:
   2a51c:	6c38 fec6 c6c6 00c6                         8l......

0002a524 <FontTerminal8x8_0042>:
   2a524:	66fc 7c66 6666 00fc                         .ff|ff..

0002a52c <FontTerminal8x8_0043>:
   2a52c:	663c c0c0 66c0 003c                         <f...f<.

0002a534 <FontTerminal8x8_0044>:
   2a534:	6cf8 6666 6c66 00f8                         .lfffl..

0002a53c <FontTerminal8x8_0045>:
   2a53c:	62fe 7868 6268 00fe                         .bhxhb..

0002a544 <FontTerminal8x8_0046>:
   2a544:	62fe 7868 6068 00f0                         .bhxh`..

0002a54c <FontTerminal8x8_0047>:
   2a54c:	663c c0c0 66ce 003a                         <f...f:.

0002a554 <FontTerminal8x8_0048>:
   2a554:	c6c6 fec6 c6c6 00c6                         ........

0002a55c <FontTerminal8x8_0049>:
   2a55c:	183c 1818 1818 003c                         <.....<.

0002a564 <FontTerminal8x8_004A>:
   2a564:	0c1e 0c0c cccc 0078                         ......x.

0002a56c <FontTerminal8x8_004B>:
   2a56c:	66e6 786c 666c 00e6                         .flxlf..

0002a574 <FontTerminal8x8_004C>:
   2a574:	60f0 6060 6662 00fe                         .```bf..

0002a57c <FontTerminal8x8_004D>:
   2a57c:	eec6 fefe c6d6 00c6                         ........

0002a584 <FontTerminal8x8_004E>:
   2a584:	e6c6 def6 c6ce 00c6                         ........

0002a58c <FontTerminal8x8_004F>:
   2a58c:	c67c c6c6 c6c6 007c                         |.....|.

0002a594 <FontTerminal8x8_0050>:
   2a594:	66fc 7c66 6060 00f0                         .ff|``..

0002a59c <FontTerminal8x8_0051>:
   2a59c:	c67c c6c6 cec6 0e7c                         |.....|.

0002a5a4 <FontTerminal8x8_0052>:
   2a5a4:	66fc 7c66 666c 00e6                         .ff|lf..

0002a5ac <FontTerminal8x8_0053>:
   2a5ac:	663c 1830 660c 003c                         <f0..f<.

0002a5b4 <FontTerminal8x8_0054>:
   2a5b4:	7e7e 185a 1818 003c                         ~~Z...<.

0002a5bc <FontTerminal8x8_0055>:
   2a5bc:	c6c6 c6c6 c6c6 007c                         ......|.

0002a5c4 <FontTerminal8x8_0056>:
   2a5c4:	c6c6 c6c6 6cc6 0038                         .....l8.

0002a5cc <FontTerminal8x8_0057>:
   2a5cc:	c6c6 d6c6 fed6 006c                         ......l.

0002a5d4 <FontTerminal8x8_0058>:
   2a5d4:	c6c6 386c c66c 00c6                         ..l8l...

0002a5dc <FontTerminal8x8_0059>:
   2a5dc:	6666 3c66 1818 003c                         fff<..<.

0002a5e4 <FontTerminal8x8_005A>:
   2a5e4:	c6fe 188c 6632 00fe                         ....2f..

0002a5ec <FontTerminal8x8_005B>:
   2a5ec:	303c 3030 3030 003c                         <00000<.

0002a5f4 <FontTerminal8x8_005C>:
   2a5f4:	60c0 1830 060c 0002                         .`0.....

0002a5fc <FontTerminal8x8_005D>:
   2a5fc:	0c3c 0c0c 0c0c 003c                         <.....<.

0002a604 <FontTerminal8x8_005E>:
   2a604:	3810 c66c 0000 0000                         .8l.....

0002a60c <FontTerminal8x8_005F>:
   2a60c:	0000 0000 0000 ff00                         ........

0002a614 <FontTerminal8x8_0060>:
   2a614:	1830 000c 0000 0000                         0.......

0002a61c <FontTerminal8x8_0061>:
   2a61c:	0000 0c78 cc7c 0076                         ..x.|.v.

0002a624 <FontTerminal8x8_0062>:
   2a624:	60e0 667c 6666 00dc                         .`|fff..

0002a62c <FontTerminal8x8_0063>:
   2a62c:	0000 c67c c6c0 007c                         ..|...|.

0002a634 <FontTerminal8x8_0064>:
   2a634:	0c1c cc7c cccc 0076                         ..|...v.

0002a63c <FontTerminal8x8_0065>:
   2a63c:	0000 c67c c0fe 007c                         ..|...|.

0002a644 <FontTerminal8x8_0066>:
   2a644:	663c f860 6060 00f0                         <f`.``..

0002a64c <FontTerminal8x8_0067>:
   2a64c:	0000 cc76 7ccc f80c                         ..v..|..

0002a654 <FontTerminal8x8_0068>:
   2a654:	60e0 766c 6666 00e6                         .`lvff..

0002a65c <FontTerminal8x8_0069>:
   2a65c:	0018 1838 1818 003c                         ..8...<.

0002a664 <FontTerminal8x8_006A>:
   2a664:	0006 0606 6606 3c66                         .....ff<

0002a66c <FontTerminal8x8_006B>:
   2a66c:	60e0 6c66 6c78 00e6                         .`flxl..

0002a674 <FontTerminal8x8_006C>:
   2a674:	1838 1818 1818 003c                         8.....<.

0002a67c <FontTerminal8x8_006D>:
   2a67c:	0000 feec d6d6 00d6                         ........

0002a684 <FontTerminal8x8_006E>:
   2a684:	0000 66dc 6666 0066                         ...ffff.

0002a68c <FontTerminal8x8_006F>:
   2a68c:	0000 c67c c6c6 007c                         ..|...|.

0002a694 <FontTerminal8x8_0070>:
   2a694:	0000 66dc 7c66 f060                         ...ff|`.

0002a69c <FontTerminal8x8_0071>:
   2a69c:	0000 cc76 7ccc 1e0c                         ..v..|..

0002a6a4 <FontTerminal8x8_0072>:
   2a6a4:	0000 76dc 6060 00f0                         ...v``..

0002a6ac <FontTerminal8x8_0073>:
   2a6ac:	0000 c07e 067c 00fc                         ..~.|...

0002a6b4 <FontTerminal8x8_0074>:
   2a6b4:	3030 30fc 3630 001c                         00.006..

0002a6bc <FontTerminal8x8_0075>:
   2a6bc:	0000 cccc cccc 0076                         ......v.

0002a6c4 <FontTerminal8x8_0076>:
   2a6c4:	0000 c6c6 6cc6 0038                         .....l8.

0002a6cc <FontTerminal8x8_0077>:
   2a6cc:	0000 d6c6 fed6 006c                         ......l.

0002a6d4 <FontTerminal8x8_0078>:
   2a6d4:	0000 6cc6 6c38 00c6                         ...l8l..

0002a6dc <FontTerminal8x8_0079>:
   2a6dc:	0000 c6c6 7ec6 fc06                         .....~..

0002a6e4 <FontTerminal8x8_007A>:
   2a6e4:	0000 4c7e 3218 007e                         ..~L.2~.

0002a6ec <FontTerminal8x8_007B>:
   2a6ec:	180e 7018 1818 000e                         ...p....

0002a6f4 <FontTerminal8x8_007C>:
   2a6f4:	1818 1818 1818 0018                         ........

0002a6fc <FontTerminal8x8_007D>:
   2a6fc:	1870 0e18 1818 0070                         p.....p.

0002a704 <FontTerminal8x8_007E>:
   2a704:	dc76 0000 0000 0000                         v.......

0002a70c <FontTerminal8x8_CharTbl>:
   2a70c:	0808 0001 a414 0002 0808 0001 a41c 0002     ................
   2a71c:	0808 0001 a424 0002 0808 0001 a42c 0002     ....$.......,...
   2a72c:	0808 0001 a434 0002 0808 0001 a43c 0002     ....4.......<...
   2a73c:	0808 0001 a444 0002 0808 0001 a44c 0002     ....D.......L...
   2a74c:	0808 0001 a454 0002 0808 0001 a45c 0002     ....T.......\...
   2a75c:	0808 0001 a464 0002 0808 0001 a46c 0002     ....d.......l...
   2a76c:	0808 0001 a474 0002 0808 0001 a47c 0002     ....t.......|...
   2a77c:	0808 0001 a484 0002 0808 0001 a48c 0002     ................
   2a78c:	0808 0001 a494 0002 0808 0001 a49c 0002     ................
   2a79c:	0808 0001 a4a4 0002 0808 0001 a4ac 0002     ................
   2a7ac:	0808 0001 a4b4 0002 0808 0001 a4bc 0002     ................
   2a7bc:	0808 0001 a4c4 0002 0808 0001 a4cc 0002     ................
   2a7cc:	0808 0001 a4d4 0002 0808 0001 a4dc 0002     ................
   2a7dc:	0808 0001 a4e4 0002 0808 0001 a4ec 0002     ................
   2a7ec:	0808 0001 a4f4 0002 0808 0001 a4fc 0002     ................
   2a7fc:	0808 0001 a504 0002 0808 0001 a50c 0002     ................
   2a80c:	0808 0001 a514 0002 0808 0001 a51c 0002     ................
   2a81c:	0808 0001 a524 0002 0808 0001 a52c 0002     ....$.......,...
   2a82c:	0808 0001 a534 0002 0808 0001 a53c 0002     ....4.......<...
   2a83c:	0808 0001 a544 0002 0808 0001 a54c 0002     ....D.......L...
   2a84c:	0808 0001 a554 0002 0808 0001 a55c 0002     ....T.......\...
   2a85c:	0808 0001 a564 0002 0808 0001 a56c 0002     ....d.......l...
   2a86c:	0808 0001 a574 0002 0808 0001 a57c 0002     ....t.......|...
   2a87c:	0808 0001 a584 0002 0808 0001 a58c 0002     ................
   2a88c:	0808 0001 a594 0002 0808 0001 a59c 0002     ................
   2a89c:	0808 0001 a5a4 0002 0808 0001 a5ac 0002     ................
   2a8ac:	0808 0001 a5b4 0002 0808 0001 a5bc 0002     ................
   2a8bc:	0808 0001 a5c4 0002 0808 0001 a5cc 0002     ................
   2a8cc:	0808 0001 a5d4 0002 0808 0001 a5dc 0002     ................
   2a8dc:	0808 0001 a5e4 0002 0808 0001 a5ec 0002     ................
   2a8ec:	0808 0001 a5f4 0002 0808 0001 a5fc 0002     ................
   2a8fc:	0808 0001 a604 0002 0808 0001 a60c 0002     ................
   2a90c:	0808 0001 a614 0002 0808 0001 a61c 0002     ................
   2a91c:	0808 0001 a624 0002 0808 0001 a62c 0002     ....$.......,...
   2a92c:	0808 0001 a634 0002 0808 0001 a63c 0002     ....4.......<...
   2a93c:	0808 0001 a644 0002 0808 0001 a64c 0002     ....D.......L...
   2a94c:	0808 0001 a654 0002 0808 0001 a65c 0002     ....T.......\...
   2a95c:	0808 0001 a664 0002 0808 0001 a66c 0002     ....d.......l...
   2a96c:	0808 0001 a674 0002 0808 0001 a67c 0002     ....t.......|...
   2a97c:	0808 0001 a684 0002 0808 0001 a68c 0002     ................
   2a98c:	0808 0001 a694 0002 0808 0001 a69c 0002     ................
   2a99c:	0808 0001 a6a4 0002 0808 0001 a6ac 0002     ................
   2a9ac:	0808 0001 a6b4 0002 0808 0001 a6bc 0002     ................
   2a9bc:	0808 0001 a6c4 0002 0808 0001 a6cc 0002     ................
   2a9cc:	0808 0001 a6d4 0002 0808 0001 a6dc 0002     ................
   2a9dc:	0808 0001 a6e4 0002 0808 0001 a6ec 0002     ................
   2a9ec:	0808 0001 a6f4 0002 0808 0001 a6fc 0002     ................
   2a9fc:	0808 0001 a704 0002 6554 6d72 6e69 6c61     ........Terminal
   2aa0c:	7838 0038                                   8x8.

0002aa10 <FontTerminal8x8>:
   2aa10:	aa04 0002 7e20 0008 0008 0000 a70c 0002     .... ~..........

0002aa20 <BSP_LCD_FontTbl>:
   2aa20:	b85c 0002 c2d0 0002 aa10 0002 0000 0000     \...............

0002aa30 <FontComic18_ASCII_32>:
	...

0002aa44 <FontComic18_ASCII_33>:
   2aa44:	0000 6060 6060 6060 6060 6060 0060 6060     ..```````````.``
   2aa54:	0000 0000                                   ....

0002aa58 <FontComic18_ASCII_34>:
   2aa58:	0000 6600 6666 6666 0000 0000 0000 0000     ...fffff........
   2aa68:	0000 0000                                   ....

0002aa6c <FontComic18_ASCII_35>:
   2aa6c:	0000 0000 0000 600c 600c f87f f87f c018     .......`.`......
   2aa7c:	c019 8031 f0ff f0ff 8033 0063 0063 0000     ..1.....3.c.c...
   2aa8c:	0000 0000                                   ....

0002aa90 <FontComic18_ASCII_36>:
   2aa90:	0000 000c 000c 001f 807f 00ec 00cc 00cc     ................
   2aaa0:	00ff 803f c00d c00c c0cd 80ff 007f 000c     ..?.............
   2aab0:	000c 000c                                   ....

0002aab4 <FontComic18_ASCII_37>:
   2aab4:	0000 0000 8000 8071 00f9 00db 00fa 0076     ......q.......v.
   2aac4:	0004 000c e008 f019 b011 f031 e020 0000     ..........1. ...
   2aad4:	0000 0000                                   ....

0002aad8 <FontComic18_ASCII_38>:
   2aad8:	0000 0000 0000 000e 001f 001b 001e 001c     ................
   2aae8:	403c 4066 c0c3 c0c1 80e1 c07f 003e 0000     <@f@........>...
   2aaf8:	0000 0000                                   ....

0002aafc <FontComic18_ASCII_39>:
   2aafc:	0000 3000 3030 3030 0000 0000 0000 0000     ...00000........
   2ab0c:	0000 0000                                   ....

0002ab10 <FontComic18_ASCII_40>:
   2ab10:	0000 1c0c 3018 6030 6060 6060 6060 3030     .....00```````00
   2ab20:	0c18 0000                                   ....

0002ab24 <FontComic18_ASCII_41>:
   2ab24:	0000 e0c0 3060 1830 1818 1818 1818 3030     ....`00.......00
   2ab34:	c060 0000                                   `...

0002ab38 <FontComic18_ASCII_42>:
   2ab38:	0000 0000 0000 0008 007f 003f 001c 0036     ..........?...6.
   2ab48:	0026 0000 0000 0000 0000 0000 0000 0000     &...............
   2ab58:	0000 0000                                   ....

0002ab5c <FontComic18_ASCII_43>:
   2ab5c:	0000 0000 0000 1818 ff18 18ff 1818 0000     ................
   2ab6c:	0000 0000                                   ....

0002ab70 <FontComic18_ASCII_44>:
	...
   2ab7c:	0000 6020 0040 0000                         .. `@...

0002ab84 <FontComic18_ASCII_45>:
	...
   2ab8c:	7c00 007c 0000 0000 0000 0000               .||.........

0002ab98 <FontComic18_ASCII_46>:
	...
   2aba4:	6000 0060 0000 0000                         .``.....

0002abac <FontComic18_ASCII_47>:
   2abac:	0000 0000 0000 0003 0003 0003 0006 0006     ................
   2abbc:	000c 000c 0018 0018 0030 0030 0060 0060     ........0.0.`.`.
   2abcc:	0000 0000                                   ....

0002abd0 <FontComic18_ASCII_48>:
   2abd0:	0000 0000 0000 001e 007f 0063 80c1 80c1     ..........c.....
   2abe0:	80c1 80c1 80c1 80c1 0063 007f 003e 0000     ........c...>...
   2abf0:	0000 0000                                   ....

0002abf4 <FontComic18_ASCII_49>:
   2abf4:	0000 1800 7838 1858 1818 1818 7e18 007e     ....8xX......~~.
   2ac04:	0000 0000                                   ....

0002ac08 <FontComic18_ASCII_50>:
   2ac08:	0000 0000 0000 001e 803f 8071 8061 8001     ........?.q.a...
   2ac18:	0007 000e 0038 0070 0060 807f 807f 0000     ....8.p.`.......
   2ac28:	0000 0000                                   ....

0002ac2c <FontComic18_ASCII_51>:
   2ac2c:	0000 0000 0000 003e 007f 0063 0003 0007     ......>...c.....
   2ac3c:	003c 001f 0003 0003 0043 007e 003e 0000     <.......C.~.>...
   2ac4c:	0000 0000                                   ....

0002ac50 <FontComic18_ASCII_52>:
   2ac50:	0000 0000 0000 0003 0007 000f 000b 0013     ................
   2ac60:	0033 0063 c0ff c0ff 0003 0003 0003 0000     3.c.............
   2ac70:	0000 0000                                   ....

0002ac74 <FontComic18_ASCII_53>:
   2ac74:	0000 0000 0000 807f 807f 0060 007e 007f     ..........`.~...
   2ac84:	8063 8061 8001 8001 8063 007f 003e 0000     c.a.....c...>...
   2ac94:	0000 0000                                   ....

0002ac98 <FontComic18_ASCII_54>:
   2ac98:	0000 0000 0000 0006 000e 001c 0038 0030     ............8.0.
   2aca8:	007f 807f 8061 8061 8073 003f 001e 0000     ....a.a.s.?.....
   2acb8:	0000 0000                                   ....

0002acbc <FontComic18_ASCII_55>:
   2acbc:	0000 0000 0000 c07f c07f 8001 0003 0002     ................
   2accc:	0006 0006 000c 000c 0018 0018 0010 0000     ................
   2acdc:	0000 0000                                   ....

0002ace0 <FontComic18_ASCII_56>:
   2ace0:	0000 0000 0000 001e 007f 8061 8061 007f     ..........a.a...
   2acf0:	003f 8073 8061 8061 8061 007f 001e 0000     ?.s.a.a.a.......
   2ad00:	0000 0000                                   ....

0002ad04 <FontComic18_ASCII_57>:
   2ad04:	0000 0000 0000 001e 003f 8073 8061 8061     ........?.s.a.a.
   2ad14:	8073 803f 801f 0003 0007 000e 003c 0030     s.?.........<.0.
   2ad24:	0000 0000                                   ....

0002ad28 <FontComic18_ASCII_58>:
   2ad28:	0000 0000 0000 6000 0060 0000 6060 0000     .......``...``..
   2ad38:	0000 0000                                   ....

0002ad3c <FontComic18_ASCII_59>:
   2ad3c:	0000 0000 0000 3000 0030 0000 3000 6060     .......00....0``
   2ad4c:	0000 0000                                   ....

0002ad50 <FontComic18_ASCII_60>:
   2ad50:	0000 0000 0000 1c0c 6038 1830 000c 0000     ........8`0.....
   2ad60:	0000 0000                                   ....

0002ad64 <FontComic18_ASCII_61>:
   2ad64:	0000 0000 0000 7e7e 0000 7e00 007e 0000     ......~~...~~...
   2ad74:	0000 0000                                   ....

0002ad78 <FontComic18_ASCII_62>:
   2ad78:	0000 0000 0000 3060 0c18 7038 0040 0000     ......`0..8p@...
   2ad88:	0000 0000                                   ....

0002ad8c <FontComic18_ASCII_63>:
	...
   2ad94:	003c 007e 0067 0003 0003 0003 0006 001c     <.~.g...........
   2ada4:	0010 0000 0030 0030 0000 0000               ....0.0.....

0002adb0 <FontComic18_ASCII_64>:
   2adb0:	0000 0000 c007 f01f 3818 1830 0c33 0c66     .........80.3.f.
   2adc0:	8c6c 8c6d f86f 7066 0070 0030 6018 e01f     l.m.o.fpp.0..`..
   2add0:	c007 0000                                   ....

0002add4 <FontComic18_ASCII_65>:
   2add4:	0000 0000 0000 8001 8001 8003 c006 c006     ................
   2ade4:	c00c c01f c01f e030 6030 6060 6060 0000     ......0.0`````..
   2adf4:	0000 0000                                   ....

0002adf8 <FontComic18_ASCII_66>:
   2adf8:	0000 0000 0000 007c 007e 0067 0063 0067     ......|.~.g.c.g.
   2ae08:	007e 007f 8063 8061 8063 007f 007c 0000     ~...c.a.c...|...
   2ae18:	0000 0000                                   ....

0002ae1c <FontComic18_ASCII_67>:
   2ae1c:	0000 0000 0000 000f 001f 0033 0060 0060     ..........3.`.`.
   2ae2c:	00c0 00c0 00c0 00c1 00e7 007e 003c 0000     ..........~.<...
   2ae3c:	0000 0000                                   ....

0002ae40 <FontComic18_ASCII_68>:
   2ae40:	0000 0000 0000 0060 007c 007f 8063 c060     ......`.|...c.`.
   2ae50:	6060 6060 6060 6060 c061 807f 003f 0000     ````````a...?...
   2ae60:	0000 0000                                   ....

0002ae64 <FontComic18_ASCII_69>:
   2ae64:	0000 0000 0000 007f 007f 0060 0060 0060     ..........`.`.`.
   2ae74:	007f 007f 0060 0060 0060 007f 003f 0000     ....`.`.`...?...
   2ae84:	0000 0000                                   ....

0002ae88 <FontComic18_ASCII_70>:
   2ae88:	0000 0000 0000 807f c07f 0060 0060 0060     ..........`.`.`.
   2ae98:	807f 807f 0060 0060 0060 0060 0060 0000     ....`.`.`.`.`...
   2aea8:	0000 0000                                   ....

0002aeac <FontComic18_ASCII_71>:
   2aeac:	0000 0000 0000 000e 801f 8039 0070 0060     ..........9.p.`.
   2aebc:	c0df c0df c0c0 80c1 80c3 007f 003c 0000     ............<...
   2aecc:	0000 0000                                   ....

0002aed0 <FontComic18_ASCII_72>:
   2aed0:	0000 0000 0000 6060 6060 6060 6060 6060     ......``````````
   2aee0:	e067 e07f 6078 6060 6060 6060 6060 0000     g...x`````````..
   2aef0:	0000 0000                                   ....

0002aef4 <FontComic18_ASCII_73>:
   2aef4:	0000 0000 0000 00ff 00ff 0018 0018 0018     ................
   2af04:	0018 0018 0018 0018 0018 00ff 00ff 0000     ................
   2af14:	0000 0000                                   ....

0002af18 <FontComic18_ASCII_74>:
   2af18:	0000 0000 0000 c03f c03f 0006 0006 0006     ......?.?.......
   2af28:	0006 0006 00c6 00c6 00e6 007e 001c 0000     ..........~.....
   2af38:	0000 0000                                   ....

0002af3c <FontComic18_ASCII_75>:
   2af3c:	0000 0000 0000 8060 8061 0063 0066 006c     ......`.a.c.f.l.
   2af4c:	0070 0070 0078 006c 0066 8063 8061 0000     p.p.x.l.f.c.a...
   2af5c:	0000 0000                                   ....

0002af60 <FontComic18_ASCII_76>:
   2af60:	0000 0000 0000 0060 0060 0060 0060 0060     ......`.`.`.`.`.
   2af70:	0060 0060 0060 0060 0060 007f 007f 0000     `.`.`.`.`.......
   2af80:	0000 0000                                   ....

0002af84 <FontComic18_ASCII_77>:
   2af84:	0000 0000 0000 200c 701c 701c 701c 5014     ....... .p.p.p.P
   2af94:	d836 d836 d836 d826 9867 8c63 8c63 0000     6.6.6.&.g.c.c...
   2afa4:	0000 0000                                   ....

0002afa8 <FontComic18_ASCII_78>:
   2afa8:	0000 0000 0000 2060 3060 3070 3078 306c     ......` `0p0x0l0
   2afb8:	3066 3062 3063 b061 f060 7060 3060 0000     f0b0c0a.`.`p`0..
   2afc8:	0000 0000                                   ....

0002afcc <FontComic18_ASCII_79>:
   2afcc:	0000 0000 0000 c007 e01f 7038 3030 3070     ..........8p00p0
   2afdc:	3060 3060 7060 6060 e030 c03f 000f 0000     `0`0`p``0.?.....
   2afec:	0000 0000                                   ....

0002aff0 <FontComic18_ASCII_80>:
   2aff0:	0000 7c00 677e 6763 7c7e 6060 6060 0060     ...|~gcg~|`````.
   2b000:	0000 0000                                   ....

0002b004 <FontComic18_ASCII_81>:
   2b004:	0000 0000 0000 c00f e03f 7078 3060 18c0     ........?.xp`0..
   2b014:	18c0 18c0 18c2 1863 b071 f03f 600f 3000     ......c.q.?..`.0
   2b024:	1800 0800                                   ....

0002b028 <FontComic18_ASCII_82>:
   2b028:	0000 0000 0000 0078 007e 0067 8063 8061     ......x.~.g.c.a.
   2b038:	8061 0063 007e 007e 0067 c061 c060 0000     a.c.~.~.g.a.`...
   2b048:	0000 0000                                   ....

0002b04c <FontComic18_ASCII_83>:
   2b04c:	0000 0000 0000 000f 801f 0038 0030 003f     ..........8.0.?.
   2b05c:	801f c001 c000 c060 c061 803f 001e 0000     ......`.a.?.....
   2b06c:	0000 0000                                   ....

0002b070 <FontComic18_ASCII_84>:
   2b070:	0000 0000 0000 c0ff c0ff 000c 000c 000c     ................
   2b080:	000c 000c 000c 000c 000c 000c 000c 0000     ................
   2b090:	0000 0000                                   ....

0002b094 <FontComic18_ASCII_85>:
   2b094:	0000 0000 0000 6060 6060 6060 6060 6060     ......``````````
   2b0a4:	6060 6060 6060 c070 c031 803f 000f 0000     ``````p.1.?.....
   2b0b4:	0000 0000                                   ....

0002b0b8 <FontComic18_ASCII_86>:
   2b0b8:	0000 0000 0000 c060 c060 8061 8031 8031     ......`.`.a.1.1.
   2b0c8:	8031 0033 001b 001b 001b 000e 000e 0000     1.3.............
   2b0d8:	0000 0000                                   ....

0002b0dc <FontComic18_ASCII_87>:
	...
   2b0e4:	6000 00c3 c361 6100 00c3 4361 3300 0066     .`..a..a..aC.3f.
   2b0f4:	6633 3300 0066 6c36 1600 006c 6c1c 1c00     3f.3f.6l..l..l..
   2b104:	0078 381c 0000 0000 0000 0000 0000 0000     x..8............

0002b114 <FontComic18_ASCII_88>:
   2b114:	0000 0000 0000 6060 6060 c030 8019 000f     ......````0.....
   2b124:	0006 0007 800f 8019 c030 6060 6060 0000     ........0.````..
   2b134:	0000 0000                                   ....

0002b138 <FontComic18_ASCII_89>:
   2b138:	0000 0000 0000 c060 c060 c031 8031 801b     ......`.`.1.1...
   2b148:	001b 000f 000f 0006 000e 000c 0018 0000     ................
   2b158:	0000 0000                                   ....

0002b15c <FontComic18_ASCII_90>:
   2b15c:	0000 0000 0000 e07f e07f c001 8003 0007     ................
   2b16c:	000e 000c 0018 0030 0060 e07f e07f 0000     ......0.`.......
   2b17c:	0000 0000                                   ....

0002b180 <FontComic18_ASCII_91>:
   2b180:	0000 3c3c 3030 3030 3030 3030 3030 3030     ..<<000000000000
   2b190:	3c3c 0000                                   <<..

0002b194 <FontComic18_ASCII_92>:
   2b194:	0000 6000 3060 1030 1818 0c08 0c0c 0606     ...``00.........
   2b1a4:	0000 0000                                   ....

0002b1a8 <FontComic18_ASCII_93>:
   2b1a8:	0000 f8f8 1818 1818 1818 1818 1818 1818     ................
   2b1b8:	f8f8 0000                                   ....

0002b1bc <FontComic18_ASCII_94>:
   2b1bc:	0000 3c18 6236 0000 0000 0000 0000 0000     ...<6b..........
   2b1cc:	0000 0000                                   ....

0002b1d0 <FontComic18_ASCII_95>:
	...
   2b1f0:	0000 c0ff                                   ....

0002b1f4 <FontComic18_ASCII_96>:
   2b1f4:	0000 0000 0040 0060 0030 0010 0000 0000     ....@.`.0.......
	...

0002b218 <FontComic18_ASCII_97>:
   2b218:	0000 0000 0000 3e00 e67e c6c6 fec6 007b     .......>~.....{.
   2b228:	0000 0000                                   ....

0002b22c <FontComic18_ASCII_98>:
   2b22c:	0000 0000 0060 0060 0060 0060 0060 006e     ....`.`.`.`.`.n.
   2b23c:	007f 8073 8061 8061 8063 007f 007e 0000     ..s.a.a.c...~...
   2b24c:	0000 0000                                   ....

0002b250 <FontComic18_ASCII_99>:
   2b250:	0000 0000 0000 3c00 627e c0c0 7ec2 003c     .......<~b...~<.
   2b260:	0000 0000                                   ....

0002b264 <FontComic18_ASCII_100>:
   2b264:	0000 0000 0003 0003 0003 0003 0003 003f     ..............?.
   2b274:	007f 00e3 00c3 00c3 00e3 007f 003f 0000     ............?...
   2b284:	0000 0000                                   ....

0002b288 <FontComic18_ASCII_101>:
   2b288:	0000 0000 0000 3c00 e67e d8cc fee2 003c     .......<~.....<.
   2b298:	0000 0000                                   ....

0002b29c <FontComic18_ASCII_102>:
   2b29c:	0000 0f07 181c 7e18 187e 1818 1818 0018     .......~~.......
   2b2ac:	0000 0000                                   ....

0002b2b0 <FontComic18_ASCII_103>:
   2b2b0:	0000 0000 0000 7e3c c6e6 cec6 76fe 0c06     ......<~.....v..
   2b2c0:	78fc 0000                                   .x..

0002b2c4 <FontComic18_ASCII_104>:
   2b2c4:	0000 c0c0 c0c0 dcc0 e6fe c6c6 c6c6 00c6     ................
   2b2d4:	0000 0000                                   ....

0002b2d8 <FontComic18_ASCII_105>:
   2b2d8:	0000 6000 0060 6000 6060 6060 6060 0060     ...``..````````.
   2b2e8:	0000 0000                                   ....

0002b2ec <FontComic18_ASCII_106>:
   2b2ec:	0000 3000 0030 3000 3030 3030 3030 3030     ...00..000000000
   2b2fc:	3030 0000                                   00..

0002b300 <FontComic18_ASCII_107>:
   2b300:	0000 0000 0060 0060 0060 0060 0060 0062     ....`.`.`.`.`.b.
   2b310:	0066 006c 007c 007c 0066 0063 0063 0000     f.l.|.|.f.c.c...
   2b320:	0000 0000                                   ....

0002b324 <FontComic18_ASCII_108>:
   2b324:	0000 6060 6060 6060 6060 6060 6060 0060     ..`````````````.
   2b334:	0000 0000                                   ....

0002b338 <FontComic18_ASCII_109>:
	...
   2b344:	0000 80dd c0ff c0ee c0cc c0cc c0cc c0cc     ................
   2b354:	c0cc 0000 0000 0000                         ........

0002b35c <FontComic18_ASCII_110>:
   2b35c:	0000 0000 0000 dc00 e6fe c6c6 c6c6 00c6     ................
   2b36c:	0000 0000                                   ....

0002b370 <FontComic18_ASCII_111>:
   2b370:	0000 0000 0000 3800 c67c c6c6 7cc6 0038     .......8|....|8.
   2b380:	0000 0000                                   ....

0002b384 <FontComic18_ASCII_112>:
	...
   2b390:	0060 006e 007f 0063 0063 0063 0063 007e     `.n...c.c.c.c.~.
   2b3a0:	007c 0060 0060 0060                         |.`.`.`.

0002b3a8 <FontComic18_ASCII_113>:
   2b3a8:	0000 0000 0000 3e00 e67e c6c6 7ec6 063e     .......>~....~>.
   2b3b8:	0606 0000                                   ....

0002b3bc <FontComic18_ASCII_114>:
   2b3bc:	0000 0000 0000 6e00 6676 6060 6060 0060     .......nvf`````.
   2b3cc:	0000 0000                                   ....

0002b3d0 <FontComic18_ASCII_115>:
   2b3d0:	0000 0000 0000 1c00 e07c 7cf8 fc0c 0078     ........|..|..x.
   2b3e0:	0000 0000                                   ....

0002b3e4 <FontComic18_ASCII_116>:
   2b3e4:	0000 0000 3030 fc30 30fc 3030 3030 0030     ....000..000000.
   2b3f4:	0000 0000                                   ....

0002b3f8 <FontComic18_ASCII_117>:
   2b3f8:	0000 0000 0000 c600 c6c6 c6c6 fec6 007e     ..............~.
   2b408:	0000 0000                                   ....

0002b40c <FontComic18_ASCII_118>:
   2b40c:	0000 0000 0000 c600 6cc6 6c6c 3838 0010     .........lll88..
   2b41c:	0000 0000                                   ....

0002b420 <FontComic18_ASCII_119>:
	...
   2b42c:	0000 c0cc c0cc c0cc c0de c0da c0da 8073     ..............s.
   2b43c:	8073 0000 0000 0000                         s.......

0002b444 <FontComic18_ASCII_120>:
	...
   2b450:	0000 00c3 00e7 007e 003c 003c 007e 00e7     ......~.<.<.~...
   2b460:	00c3 0000 0000 0000                         ........

0002b468 <FontComic18_ASCII_121>:
	...
   2b474:	0000 00c3 00e3 0063 0076 0036 003c 001c     ......c.v.6.<...
   2b484:	0018 0018 0030 0030                         ....0.0.

0002b48c <FontComic18_ASCII_122>:
	...
   2b498:	0000 007f 007f 0006 000c 0018 0030 007f     ............0...
   2b4a8:	007f 0000 0000 0000                         ........

0002b4b0 <FontComic18_ASCII_123>:
   2b4b0:	0000 3c1c 3030 3030 7030 3060 3030 3030     ...<00000p`00000
   2b4c0:	1c1c 0000                                   ....

0002b4c4 <FontComic18_ASCII_124>:
   2b4c4:	0000 1818 1818 1818 1818 1818 1818 1818     ................
   2b4d4:	1818 0000                                   ....

0002b4d8 <FontComic18_ASCII_125>:
   2b4d8:	0000 f0e0 3030 3030 3830 381c 3030 3030     ....000008.80000
   2b4e8:	e0e0 0000                                   ....

0002b4ec <FontComic18_ASCII_126>:
	...
   2b4f8:	0018 803c 806c 8067 0047 0000 0000 0000     ..<.l.g.G.......
	...

0002b510 <FontComic18_ASCII_127>:
   2b510:	0000 7e7e 4242 4242 4242 4242 7e42 007e     ..~~BBBBBBBBB~~.
   2b520:	0000 0000                                   ....

0002b524 <FontComic18_ASCII_128>:
   2b524:	0000 0000 0000 c007 c01f 0038 00ff 00ff     ..........8.....
   2b534:	0060 00fe 00fe 0060 8071 803f 001e 0000     `.....`.q.?.....
   2b544:	0000 0000                                   ....

0002b548 <FontComic18_CharTbl>:
   2b548:	0505 0001 aa30 0002 0404 0001 aa44 0002     ....0.......D...
   2b558:	0808 0001 aa58 0002 0d0d 0002 aa6c 0002     ....X.......l...
   2b568:	0b0b 0002 aa90 0002 0d0d 0002 aab4 0002     ................
   2b578:	0a0a 0002 aad8 0002 0606 0001 aafc 0002     ................
   2b588:	0606 0001 ab10 0002 0606 0001 ab24 0002     ............$...
   2b598:	0909 0002 ab38 0002 0808 0001 ab5c 0002     ....8.......\...
   2b5a8:	0404 0001 ab70 0002 0707 0001 ab84 0002     ....p...........
   2b5b8:	0404 0001 ab98 0002 0909 0002 abac 0002     ................
   2b5c8:	0a0a 0002 abd0 0002 0707 0001 abf4 0002     ................
   2b5d8:	0a0a 0002 ac08 0002 0a0a 0002 ac2c 0002     ............,...
   2b5e8:	0a0a 0002 ac50 0002 0a0a 0002 ac74 0002     ....P.......t...
   2b5f8:	0a0a 0002 ac98 0002 0a0a 0002 acbc 0002     ................
   2b608:	0a0a 0002 ace0 0002 0a0a 0002 ad04 0002     ................
   2b618:	0505 0001 ad28 0002 0505 0001 ad3c 0002     ....(.......<...
   2b628:	0606 0001 ad50 0002 0808 0001 ad64 0002     ....P.......d...
   2b638:	0707 0001 ad78 0002 0909 0002 ad8c 0002     ....x...........
   2b648:	0f0f 0002 adb0 0002 0c0c 0002 add4 0002     ................
   2b658:	0a0a 0002 adf8 0002 0a0a 0002 ae1c 0002     ................
   2b668:	0c0c 0002 ae40 0002 0a0a 0002 ae64 0002     ....@.......d...
   2b678:	0a0a 0002 ae88 0002 0b0b 0002 aeac 0002     ................
   2b688:	0c0c 0002 aed0 0002 0909 0002 aef4 0002     ................
   2b698:	0b0b 0002 af18 0002 0a0a 0002 af3c 0002     ............<...
   2b6a8:	0909 0002 af60 0002 0f0f 0002 af84 0002     ....`...........
   2b6b8:	0d0d 0002 afa8 0002 0d0d 0002 afcc 0002     ................
   2b6c8:	0808 0001 aff0 0002 0e0e 0002 b004 0002     ................
   2b6d8:	0b0b 0002 b028 0002 0b0b 0002 b04c 0002     ....(.......L...
   2b6e8:	0b0b 0002 b070 0002 0c0c 0002 b094 0002     ....p...........
   2b6f8:	0a0a 0002 b0b8 0002 1111 0003 b0dc 0002     ................
   2b708:	0c0c 0002 b114 0002 0b0b 0002 b138 0002     ............8...
   2b718:	0c0c 0002 b15c 0002 0606 0001 b180 0002     ....\...........
   2b728:	0808 0001 b194 0002 0606 0001 b1a8 0002     ................
   2b738:	0808 0001 b1bc 0002 0a0a 0002 b1d0 0002     ................
   2b748:	0909 0002 b1f4 0002 0808 0001 b218 0002     ................
   2b758:	0a0a 0002 b22c 0002 0808 0001 b250 0002     ....,.......P...
   2b768:	0909 0002 b264 0002 0808 0001 b288 0002     ....d...........
   2b778:	0808 0001 b29c 0002 0808 0001 b2b0 0002     ................
   2b788:	0808 0001 b2c4 0002 0505 0001 b2d8 0002     ................
   2b798:	0606 0001 b2ec 0002 0909 0002 b300 0002     ................
   2b7a8:	0505 0001 b324 0002 0b0b 0002 b338 0002     ....$.......8...
   2b7b8:	0808 0001 b35c 0002 0808 0001 b370 0002     ....\.......p...
   2b7c8:	0909 0002 b384 0002 0808 0001 b3a8 0002     ................
   2b7d8:	0808 0001 b3bc 0002 0707 0001 b3d0 0002     ................
   2b7e8:	0707 0001 b3e4 0002 0808 0001 b3f8 0002     ................
   2b7f8:	0808 0001 b40c 0002 0b0b 0002 b420 0002     ............ ...
   2b808:	0909 0002 b444 0002 0909 0002 b468 0002     ....D.......h...
   2b818:	0909 0002 b48c 0002 0606 0001 b4b0 0002     ................
   2b828:	0707 0001 b4c4 0002 0606 0001 b4d8 0002     ................
   2b838:	0a0a 0002 b4ec 0002 0808 0001 b510 0002     ................
   2b848:	0b0b 0002 b524 0002 6f43 696d 3163 7838     ....$...Comic18x
   2b858:	3831 0000                                   18..

0002b85c <FontComic18x18>:
   2b85c:	b850 0002 8020 0012 0012 0000 b548 0002     P... .......H...

0002b86c <FontSwiss16x16_0020>:
	...

0002b87c <FontSwiss16x16_0021>:
   2b87c:	0000 6000 6060 6060 6060 6000 0060 0000     ...```````.``...

0002b88c <FontSwiss16x16_0022>:
   2b88c:	0000 6c00 6c6c 0000 0000 0000 0000 0000     ...lll..........

0002b89c <FontSwiss16x16_0023>:
   2b89c:	0000 2400 2424 48fc fc48 9090 0090 0000     ...$$$.HH.......

0002b8ac <FontSwiss16x16_0024>:
   2b8ac:	0000 3810 5054 7870 1c3c 5414 1038 0000     ...8TPpx<..T8...

0002b8bc <FontSwiss16x16_0025>:
   2b8bc:	0000 0000 0000 0072 0052 0052 0054 0074     ......r.R.R.T.t.
   2b8cc:	800b 800a 800a 8012 8013 0000 0000 0000     ................

0002b8dc <FontSwiss16x16_0026>:
   2b8dc:	0000 0000 0000 001c 0036 0036 001e 0018     ........6.6.....
   2b8ec:	003d 006d 0067 0067 803d 0000 0000 0000     =.m.g.g.=.......

0002b8fc <FontSwiss16x16_0027>:
   2b8fc:	0000 6000 6060 0000 0000 0000 0000 0000     ...```..........

0002b90c <FontSwiss16x16_0028>:
   2b90c:	0000 1000 2030 6060 6060 6060 2060 1030     ....0 ``````` 0.

0002b91c <FontSwiss16x16_0029>:
   2b91c:	0000 8000 40c0 6060 6060 6060 4060 80c0     .....@```````@..

0002b92c <FontSwiss16x16_002A>:
   2b92c:	0000 2000 20f8 00d8 0000 0000 0000 0000     ... . ..........

0002b93c <FontSwiss16x16_002B>:
   2b93c:	0000 0000 0000 1800 7e18 1818 0000 0000     .........~......

0002b94c <FontSwiss16x16_002C>:
	...
   2b954:	0000 6000 2060 0040                         ...`` @.

0002b95c <FontSwiss16x16_002D>:
	...
   2b964:	0000 0070 0000 0000                         ..p.....

0002b96c <FontSwiss16x16_002E>:
	...
   2b974:	0000 6000 0060 0000                         ...``...

0002b97c <FontSwiss16x16_002F>:
   2b97c:	0000 1000 2010 2020 4040 8040 0080 0000     .....   @@@.....

0002b98c <FontSwiss16x16_0030>:
   2b98c:	0000 7800 cccc cccc cccc cccc 0078 0000     ...x........x...

0002b99c <FontSwiss16x16_0031>:
   2b99c:	0000 1800 7838 1858 1818 1818 0018 0000     ....8xX.........

0002b9ac <FontSwiss16x16_0032>:
   2b9ac:	0000 7800 0ccc 180c 3038 c060 00fc 0000     ...x....80`.....

0002b9bc <FontSwiss16x16_0033>:
   2b9bc:	0000 7800 0ccc 380c 0c0c cc0c 0078 0000     ...x...8....x...

0002b9cc <FontSwiss16x16_0034>:
   2b9cc:	0000 1800 3818 5838 9858 18fc 0018 0000     .....88XX.......

0002b9dc <FontSwiss16x16_0035>:
   2b9dc:	0000 7c00 c060 ccf8 0c0c cc0c 0078 0000     ...|`.......x...

0002b9ec <FontSwiss16x16_0036>:
   2b9ec:	0000 3800 c04c f8c0 cccc cccc 0078 0000     ...8L.......x...

0002b9fc <FontSwiss16x16_0037>:
   2b9fc:	0000 fc00 180c 3018 3030 6060 0060 0000     .......000```...

0002ba0c <FontSwiss16x16_0038>:
   2ba0c:	0000 7800 cccc 78cc cccc cccc 0078 0000     ...x...x....x...

0002ba1c <FontSwiss16x16_0039>:
   2ba1c:	0000 7800 cccc cccc 0c7c c80c 0070 0000     ...x....|...p...

0002ba2c <FontSwiss16x16_003A>:
   2ba2c:	0000 0000 0000 6060 0000 6000 0060 0000     ......``...``...

0002ba3c <FontSwiss16x16_003B>:
   2ba3c:	0000 0000 0000 6060 0000 6000 2060 0040     ......``...`` @.

0002ba4c <FontSwiss16x16_003C>:
   2ba4c:	0000 0000 0400 701c 70c0 041c 0000 0000     .......p.p......

0002ba5c <FontSwiss16x16_003D>:
   2ba5c:	0000 0000 0000 fe00 fe00 0000 0000 0000     ................

0002ba6c <FontSwiss16x16_003E>:
   2ba6c:	0000 0000 4000 1c70 1c06 4070 0000 0000     .....@p...p@....

0002ba7c <FontSwiss16x16_003F>:
   2ba7c:	0000 7c00 06c6 0c06 3018 3000 0030 0000     ...|.....0.00...

0002ba8c <FontSwiss16x16_0040>:
   2ba8c:	0000 0000 0000 c00f 2030 1060 c84e c89f     ........0 `.N...
   2ba9c:	c8b9 88b1 90b3 b0bf c05d 0840 3030 c00f     ........].@.00..

0002baac <FontSwiss16x16_0041>:
   2baac:	0000 0000 0000 001c 001c 0036 0036 0036     ..........6.6.6.
   2babc:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0002bacc <FontSwiss16x16_0042>:
   2bacc:	0000 0000 0000 007e 0063 0063 0063 007e     ......~.c.c.c.~.
   2badc:	0063 0063 0063 0063 007e 0000 0000 0000     c.c.c.c.~.......

0002baec <FontSwiss16x16_0043>:
   2baec:	0000 0000 0000 001f 8031 0060 0060 0060     ........1.`.`.`.
   2bafc:	0060 0060 0060 8031 001f 0000 0000 0000     `.`.`.1.........

0002bb0c <FontSwiss16x16_0044>:
   2bb0c:	0000 0000 0000 007c 0066 0063 0063 0063     ......|.f.c.c.c.
   2bb1c:	0063 0063 0063 0066 007c 0000 0000 0000     c.c.c.f.|.......

0002bb2c <FontSwiss16x16_0045>:
   2bb2c:	0000 7e00 6060 7e60 6060 6060 007e 0000     ...~```~````~...

0002bb3c <FontSwiss16x16_0046>:
   2bb3c:	0000 7e00 6060 6060 607e 6060 0060 0000     ...~````~````...

0002bb4c <FontSwiss16x16_0047>:
   2bb4c:	0000 0000 0000 001f 8031 0060 0060 0060     ........1.`.`.`.
   2bb5c:	8067 8061 8061 8031 001f 0000 0000 0000     g.a.a.1.........

0002bb6c <FontSwiss16x16_0048>:
   2bb6c:	0000 0000 0000 0063 0063 0063 0063 007f     ......c.c.c.c...
   2bb7c:	0063 0063 0063 0063 0063 0000 0000 0000     c.c.c.c.c.......

0002bb8c <FontSwiss16x16_0049>:
   2bb8c:	0000 6000 6060 6060 6060 6060 0060 0000     ...``````````...

0002bb9c <FontSwiss16x16_004A>:
   2bb9c:	0000 0c00 0c0c 0c0c 0c0c cccc 0078 0000     ............x...

0002bbac <FontSwiss16x16_004B>:
   2bbac:	0000 0000 0000 0063 0066 006c 006c 007c     ......c.f.l.l.|.
   2bbbc:	0076 0066 0066 0063 0063 0000 0000 0000     v.f.f.c.c.......

0002bbcc <FontSwiss16x16_004C>:
   2bbcc:	0000 6000 6060 6060 6060 6060 007e 0000     ...`````````~...

0002bbdc <FontSwiss16x16_004D>:
   2bbdc:	0000 0000 0000 c071 c071 c07b c07b c06a     ......q.q.{.{.j.
   2bbec:	c06a c06a c06e c06e c064 0000 0000 0000     j.j.n.n.d.......

0002bbfc <FontSwiss16x16_004E>:
   2bbfc:	0000 0000 0000 0063 0073 0073 007b 006b     ......c.s.s.{.k.
   2bc0c:	006f 0067 0067 0063 0063 0000 0000 0000     o.g.g.c.c.......

0002bc1c <FontSwiss16x16_004F>:
   2bc1c:	0000 0000 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
   2bc2c:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0002bc3c <FontSwiss16x16_0050>:
   2bc3c:	0000 0000 0000 007e 0063 0063 0063 0063     ......~.c.c.c.c.
   2bc4c:	007e 0060 0060 0060 0060 0000 0000 0000     ~.`.`.`.`.......

0002bc5c <FontSwiss16x16_0051>:
   2bc5c:	0000 0000 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
   2bc6c:	8061 8061 8065 0033 001f 8000 0000 0000     a.a.e.3.........

0002bc7c <FontSwiss16x16_0052>:
   2bc7c:	0000 0000 0000 007e 0063 0063 0063 0063     ......~.c.c.c.c.
   2bc8c:	007e 0066 0063 0063 8061 0000 0000 0000     ~.f.c.c.a.......

0002bc9c <FontSwiss16x16_0053>:
   2bc9c:	0000 0000 0000 003e 0063 0060 0070 003c     ......>.c.`.p.<.
   2bcac:	001e 0007 0003 0063 003e 0000 0000 0000     ......c.>.......

0002bcbc <FontSwiss16x16_0054>:
   2bcbc:	0000 ff00 1818 1818 1818 1818 0018 0000     ................

0002bccc <FontSwiss16x16_0055>:
   2bccc:	0000 0000 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
   2bcdc:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

0002bcec <FontSwiss16x16_0056>:
   2bcec:	0000 0000 0000 80c1 80c1 0063 0063 0063     ..........c.c.c.
   2bcfc:	0036 0036 0036 001c 001c 0000 0000 0000     6.6.6...........

0002bd0c <FontSwiss16x16_0057>:
   2bd0c:	0000 0000 0000 18c7 18c7 3067 b06d b06d     ..........g0m.m.
   2bd1c:	b06d b06d e038 e038 e038 0000 0000 0000     m.m.8.8.8.......

0002bd2c <FontSwiss16x16_0058>:
   2bd2c:	0000 0000 0000 0063 0063 0036 001c 001c     ......c.c.6.....
   2bd3c:	001c 001c 0036 0063 0063 0000 0000 0000     ....6.c.c.......

0002bd4c <FontSwiss16x16_0059>:
   2bd4c:	0000 c300 66c3 3c3c 1818 1818 0018 0000     .....f<<........

0002bd5c <FontSwiss16x16_005A>:
   2bd5c:	0000 fe00 0c06 1818 3030 c060 00fe 0000     ........00`.....

0002bd6c <FontSwiss16x16_005B>:
   2bd6c:	0000 7000 6060 6060 6060 6060 6060 7060     ...p```````````p

0002bd7c <FontSwiss16x16_005C>:
   2bd7c:	0000 8000 4080 4040 2020 1020 0010 0000     .....@@@   .....

0002bd8c <FontSwiss16x16_005D>:
   2bd8c:	0000 e000 6060 6060 6060 6060 6060 e060     ....```````````.

0002bd9c <FontSwiss16x16_005E>:
   2bd9c:	0000 0000 3030 4878 00cc 0000 0000 0000     ....00xH........

0002bdac <FontSwiss16x16_005F>:
	...
   2bdb8:	0000 fe00                                   ....

0002bdbc <FontSwiss16x16_0060>:
   2bdbc:	0000 c000 0060 0000 0000 0000 0000 0000     ....`...........

0002bdcc <FontSwiss16x16_0061>:
   2bdcc:	0000 0000 0000 463c 361e 6666 003e 0000     ......<F.6ff>...

0002bddc <FontSwiss16x16_0062>:
   2bddc:	0000 6000 6060 766c 6666 7666 006c 0000     ...```lvfffvl...

0002bdec <FontSwiss16x16_0063>:
   2bdec:	0000 0000 0000 663c 6060 6660 003c 0000     ......<f```f<...

0002bdfc <FontSwiss16x16_0064>:
   2bdfc:	0000 0600 0606 6e36 6666 6e66 0036 0000     ......6nfffn6...

0002be0c <FontSwiss16x16_0065>:
   2be0c:	0000 0000 0000 663c 7e66 6660 003c 0000     ......<ff~`f<...

0002be1c <FontSwiss16x16_0066>:
   2be1c:	0000 3000 6060 60f0 6060 6060 0060 0000     ...0``.``````...

0002be2c <FontSwiss16x16_0067>:
   2be2c:	0000 0000 0000 6e36 6666 6e66 0636 3c46     ......6nfffn6.F<

0002be3c <FontSwiss16x16_0068>:
   2be3c:	0000 6000 6060 766c 6666 6666 0066 0000     ...```lvfffff...

0002be4c <FontSwiss16x16_0069>:
   2be4c:	0000 6000 0060 6060 6060 6060 0060 0000     ...``.```````...

0002be5c <FontSwiss16x16_006A>:
   2be5c:	0000 6000 0060 6060 6060 6060 6060 c060     ...``.`````````.

0002be6c <FontSwiss16x16_006B>:
   2be6c:	0000 6000 6060 6c66 7878 6c6c 0066 0000     ...```flxxllf...

0002be7c <FontSwiss16x16_006C>:
   2be7c:	0000 6000 6060 6060 6060 6060 0060 0000     ...``````````...

0002be8c <FontSwiss16x16_006D>:
	...
   2be98:	c06e 6077 6066 6066 6066 6066 6066 0000     n.w`f`f`f`f`f`..
   2bea8:	0000 0000                                   ....

0002beac <FontSwiss16x16_006E>:
   2beac:	0000 0000 0000 766c 6666 6666 0066 0000     ......lvfffff...

0002bebc <FontSwiss16x16_006F>:
   2bebc:	0000 0000 0000 663c 6666 6666 003c 0000     ......<fffff<...

0002becc <FontSwiss16x16_0070>:
   2becc:	0000 0000 0000 766c 6666 7666 606c 6060     ......lvfffvl```

0002bedc <FontSwiss16x16_0071>:
   2bedc:	0000 0000 0000 6e36 6666 6e66 0636 0606     ......6nfffn6...

0002beec <FontSwiss16x16_0072>:
   2beec:	0000 0000 0000 6078 6060 6060 0060 0000     ......x``````...

0002befc <FontSwiss16x16_0073>:
   2befc:	0000 0000 0000 cc78 78e0 cc1c 0078 0000     ......x..x..x...

0002bf0c <FontSwiss16x16_0074>:
   2bf0c:	0000 0000 6020 60f0 6060 6060 0030 0000     .... `.`````0...

0002bf1c <FontSwiss16x16_0075>:
   2bf1c:	0000 0000 0000 6666 6666 6e66 0036 0000     ......fffffn6...

0002bf2c <FontSwiss16x16_0076>:
   2bf2c:	0000 0000 0000 c6c6 6c6c 386c 0038 0000     ........lll88...

0002bf3c <FontSwiss16x16_0077>:
	...
   2bf48:	60c4 60ce c06e c06a c07b 803b 8031 0000     .`.`n.j.{.;.1...
   2bf58:	0000 0000                                   ....

0002bf5c <FontSwiss16x16_0078>:
   2bf5c:	0000 0000 0000 6666 183c 663c 0066 0000     ......ff<.<ff...

0002bf6c <FontSwiss16x16_0079>:
   2bf6c:	0000 0000 0000 c6c6 6c6c 386c 3838 f030     ........lll8880.

0002bf7c <FontSwiss16x16_007A>:
   2bf7c:	0000 0000 0000 0c7c 3018 6030 007c 0000     ......|..00`|...

0002bf8c <FontSwiss16x16_007B>:
   2bf8c:	0000 3800 6060 6060 c060 6060 6060 3860     ...8`````.`````8

0002bf9c <FontSwiss16x16_007C>:
   2bf9c:	0000 4000 4040 4040 4040 4040 4040 0040     ...@@@@@@@@@@@@.

0002bfac <FontSwiss16x16_007D>:
   2bfac:	0000 e000 3030 3030 1830 3030 3030 e030     ....00000.00000.

0002bfbc <FontSwiss16x16_007E>:
	...
   2bfc4:	9c72 0000 0000 0000                         r.......

0002bfcc <FontSwiss16x16_CharTbl>:
   2bfcc:	0404 0001 b86c 0002 0404 0001 b87c 0002     ....l.......|...
   2bfdc:	0606 0001 b88c 0002 0707 0001 b89c 0002     ................
   2bfec:	0707 0001 b8ac 0002 0a0a 0002 b8bc 0002     ................
   2bffc:	0909 0002 b8dc 0002 0303 0001 b8fc 0002     ................
   2c00c:	0404 0001 b90c 0002 0404 0001 b91c 0002     ................
   2c01c:	0505 0001 b92c 0002 0808 0001 b93c 0002     ....,.......<...
   2c02c:	0404 0001 b94c 0002 0404 0001 b95c 0002     ....L.......\...
   2c03c:	0404 0001 b96c 0002 0404 0001 b97c 0002     ....l.......|...
   2c04c:	0707 0001 b98c 0002 0707 0001 b99c 0002     ................
   2c05c:	0707 0001 b9ac 0002 0707 0001 b9bc 0002     ................
   2c06c:	0707 0001 b9cc 0002 0707 0001 b9dc 0002     ................
   2c07c:	0707 0001 b9ec 0002 0707 0001 b9fc 0002     ................
   2c08c:	0707 0001 ba0c 0002 0707 0001 ba1c 0002     ................
   2c09c:	0404 0001 ba2c 0002 0404 0001 ba3c 0002     ....,.......<...
   2c0ac:	0808 0001 ba4c 0002 0808 0001 ba5c 0002     ....L.......\...
   2c0bc:	0808 0001 ba6c 0002 0808 0001 ba7c 0002     ....l.......|...
   2c0cc:	0d0d 0002 ba8c 0002 0909 0002 baac 0002     ................
   2c0dc:	0909 0002 bacc 0002 0909 0002 baec 0002     ................
   2c0ec:	0909 0002 bb0c 0002 0808 0001 bb2c 0002     ............,...
   2c0fc:	0808 0001 bb3c 0002 0a0a 0002 bb4c 0002     ....<.......L...
   2c10c:	0909 0002 bb6c 0002 0404 0001 bb8c 0002     ....l...........
   2c11c:	0707 0001 bb9c 0002 0909 0002 bbac 0002     ................
   2c12c:	0808 0001 bbcc 0002 0b0b 0002 bbdc 0002     ................
   2c13c:	0909 0002 bbfc 0002 0a0a 0002 bc1c 0002     ................
   2c14c:	0909 0002 bc3c 0002 0a0a 0002 bc5c 0002     ....<.......\...
   2c15c:	0909 0002 bc7c 0002 0909 0002 bc9c 0002     ....|...........
   2c16c:	0808 0001 bcbc 0002 0909 0002 bccc 0002     ................
   2c17c:	0909 0002 bcec 0002 0d0d 0002 bd0c 0002     ................
   2c18c:	0909 0002 bd2c 0002 0808 0001 bd4c 0002     ....,.......L...
   2c19c:	0707 0001 bd5c 0002 0404 0001 bd6c 0002     ....\.......l...
   2c1ac:	0404 0001 bd7c 0002 0404 0001 bd8c 0002     ....|...........
   2c1bc:	0808 0001 bd9c 0002 0707 0001 bdac 0002     ................
   2c1cc:	0404 0001 bdbc 0002 0808 0001 bdcc 0002     ................
   2c1dc:	0808 0001 bddc 0002 0707 0001 bdec 0002     ................
   2c1ec:	0808 0001 bdfc 0002 0808 0001 be0c 0002     ................
   2c1fc:	0404 0001 be1c 0002 0808 0001 be2c 0002     ............,...
   2c20c:	0808 0001 be3c 0002 0404 0001 be4c 0002     ....<.......L...
   2c21c:	0404 0001 be5c 0002 0707 0001 be6c 0002     ....\.......l...
   2c22c:	0404 0001 be7c 0002 0c0c 0002 be8c 0002     ....|...........
   2c23c:	0808 0001 beac 0002 0808 0001 bebc 0002     ................
   2c24c:	0808 0001 becc 0002 0808 0001 bedc 0002     ................
   2c25c:	0505 0001 beec 0002 0606 0001 befc 0002     ................
   2c26c:	0404 0001 bf0c 0002 0808 0001 bf1c 0002     ................
   2c27c:	0707 0001 bf2c 0002 0b0b 0002 bf3c 0002     ....,.......<...
   2c28c:	0808 0001 bf5c 0002 0707 0001 bf6c 0002     ....\.......l...
   2c29c:	0707 0001 bf7c 0002 0505 0001 bf8c 0002     ....|...........
   2c2ac:	0303 0001 bf9c 0002 0505 0001 bfac 0002     ................
   2c2bc:	0808 0001 bfbc 0002 7753 7369 3173 7836     ........Swiss16x
   2c2cc:	3631 0000                                   16..

0002c2d0 <FontSwiss16x16>:
   2c2d0:	c2c4 0002 7e20 0010 0010 0000 bfcc 0002     .... ~..........
   2c2e0:	434c 2044 6f6c 6b63 0000 0000 0000 0000     LCD lock........
	...

0002c400 <IntVectorTable>:
   2c400:	8000 1000 0401 0000 0445 0000 0447 0000     ........E...G...
   2c410:	0449 0000 044b 0000 044d 0000 0000 0000     I...K...M.......
	...
   2c42c:	7d81 0001 7d83 0001 0000 0000 7d85 0001     .}...}.......}..
   2c43c:	0af1 0000 5b39 0001 5b39 0001 5b39 0001     ....9[..9[..9[..
   2c44c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c45c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c46c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c47c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c48c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c49c:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c4ac:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
   2c4bc:	5b39 0001 5b39 0001 5b39 0001 5b39 0001     9[..9[..9[..9[..
	...

0002c800 <Str_MultOvfThTbl_Int32U>:
   2c800:	ffff ffff ffff ffff ffff 7fff 5555 5555     ............UUUU
   2c810:	ffff 3fff 3333 3333 aaaa 2aaa 4924 2492     ...?3333...*$I.$
   2c820:	ffff 1fff c71c 1c71 9999 1999 d174 1745     ......q.....t.E.
   2c830:	5555 1555 3b13 13b1 2492 1249 1111 1111     UUU..;...$I.....
   2c840:	ffff 0fff 0f0f 0f0f e38e 0e38 435e 0d79     ..........8.^Cy.
   2c850:	cccc 0ccc c30c 0c30 e8ba 0ba2 642c 0b21     ......0.....,d!.
   2c860:	aaaa 0aaa 70a3 0a3d 9d89 09d8 425e 097b     .....p=.....^B{.
   2c870:	9249 0924 dcb0 08d3 8888 0888 1084 0842     I.$...........B.
   2c880:	ffff 07ff f07c 07c1 8787 0787 7507 0750     ....|........uP.
   2c890:	71c7 071c 543f 524d 0000 0000 4375 4f2f     .q..?TMR....uC/O
   2c8a0:	2d53 4949 2049 6954 656d 2072 6154 6b73     S-III Timer Task
   2c8b0:	0000 0000 543f 7361 006b 0000 0020 0000     ....?Task... ...
   2c8c0:	533f 4d45 0000 0000 0020 0000 463f 414c     ?SEM.... ...?FLA
   2c8d0:	0047 0000 0020 0000 4375 4f2f 2d53 4949     G... ...uC/OS-II
   2c8e0:	2049 7453 7461 5420 7361 006b               I Stat Task.

0002c8ec <OSCfg_IdleTaskStkBasePtr>:
   2c8ec:	59d4 1000                                   .Y..

0002c8f0 <OSCfg_IdleTaskStkLimit>:
   2c8f0:	000c 0000                                   ....

0002c8f4 <OSCfg_IdleTaskStkSize>:
   2c8f4:	0080 0000                                   ....

0002c8f8 <OSCfg_IdleTaskStkSizeRAM>:
   2c8f8:	0200 0000                                   ....

0002c8fc <OSCfg_IntQBasePtr>:
   2c8fc:	5894 1000                                   .X..

0002c900 <OSCfg_IntQSize>:
   2c900:	000a 0000                                   ....

0002c904 <OSCfg_IntQSizeRAM>:
   2c904:	0140 0000                                   @...

0002c908 <OSCfg_IntQTaskStkBasePtr>:
   2c908:	4544 1000                                   DE..

0002c90c <OSCfg_IntQTaskStkLimit>:
   2c90c:	000c 0000                                   ....

0002c910 <OSCfg_IntQTaskStkSize>:
   2c910:	0080 0000                                   ....

0002c914 <OSCfg_IntQTaskStkSizeRAM>:
   2c914:	0200 0000                                   ....

0002c918 <OSCfg_ISRStkBasePtr>:
   2c918:	5294 1000                                   .R..

0002c91c <OSCfg_ISRStkSize>:
   2c91c:	0100 0000                                   ....

0002c920 <OSCfg_ISRStkSizeRAM>:
   2c920:	0400 0000                                   ....

0002c924 <OSCfg_MsgPoolSize>:
   2c924:	0064 0000                                   d...

0002c928 <OSCfg_MsgPoolSizeRAM>:
   2c928:	0640 0000                                   @...

0002c92c <OSCfg_MsgPoolBasePtr>:
   2c92c:	49cc 1000                                   .I..

0002c930 <OSCfg_StatTaskPrio>:
   2c930:	000b 0000                                   ....

0002c934 <OSCfg_StatTaskRate_Hz>:
   2c934:	000a 0000                                   ....

0002c938 <OSCfg_StatTaskStkBasePtr>:
   2c938:	4744 1000                                   DG..

0002c93c <OSCfg_StatTaskStkLimit>:
   2c93c:	000c 0000                                   ....

0002c940 <OSCfg_StatTaskStkSize>:
   2c940:	0080 0000                                   ....

0002c944 <OSCfg_StatTaskStkSizeRAM>:
   2c944:	0200 0000                                   ....

0002c948 <OSCfg_StkSizeMin>:
   2c948:	0040 0000                                   @...

0002c94c <OSCfg_TickRate_Hz>:
   2c94c:	03e8 0000                                   ....

0002c950 <OSCfg_TickTaskPrio>:
   2c950:	000a 0000                                   ....

0002c954 <OSCfg_TickTaskStkBasePtr>:
   2c954:	5694 1000                                   .V..

0002c958 <OSCfg_TickTaskStkLimit>:
   2c958:	000c 0000                                   ....

0002c95c <OSCfg_TickTaskStkSize>:
   2c95c:	0080 0000                                   ....

0002c960 <OSCfg_TickTaskStkSizeRAM>:
   2c960:	0200 0000                                   ....

0002c964 <OSCfg_TickWheelSize>:
   2c964:	0011 0000                                   ....

0002c968 <OSCfg_TickWheelSizeRAM>:
   2c968:	0088 0000                                   ....

0002c96c <OSCfg_TmrTaskPrio>:
   2c96c:	000b 0000                                   ....

0002c970 <OSCfg_TmrTaskRate_Hz>:
   2c970:	000a 0000                                   ....

0002c974 <OSCfg_TmrTaskStkBasePtr>:
   2c974:	500c 1000                                   .P..

0002c978 <OSCfg_TmrTaskStkLimit>:
   2c978:	000c 0000                                   ....

0002c97c <OSCfg_TmrTaskStkSize>:
   2c97c:	0080 0000                                   ....

0002c980 <OSCfg_TmrTaskStkSizeRAM>:
   2c980:	0200 0000                                   ....

0002c984 <OSCfg_TmrWheelSize>:
   2c984:	0011 0000                                   ....

0002c988 <OSCfg_TmrWheelSizeRAM>:
   2c988:	0088 0000                                   ....

0002c98c <OSCfg_DataSizeRAM>:
   2c98c:	1690 0000 4d3f 5455 5845 0000 0020 0000     ....?MUTEX.. ...
   2c99c:	513f 0000 0020 0000                         ?Q.. ...

0002c9a4 <OSDbg_DbgEn>:
   2c9a4:	0001                                        ..

0002c9a6 <OSDbg_ArgChkEn>:
   2c9a6:	0101                                             .

0002c9a7 <OSDbg_AppHooksEn>:
   2c9a7:	7801                                             .

0002c9a8 <OSDbg_EndiannessTest>:
   2c9a8:	5678 1234                                   xV4.

0002c9ac <OSDbg_CalledFromISRChkEn>:
   2c9ac:	0101                                             .

0002c9ad <OSDbg_FlagEn>:
   2c9ad:	0001 0000                                        ...

0002c9b0 <OSDbg_FlagGrp>:
	...

0002c9d8 <OSDbg_FlagDelEn>:
   2c9d8:	0101                                             .

0002c9d9 <OSDbg_FlagModeClrEn>:
   2c9d9:	0101                                             .

0002c9da <OSDbg_FlagPendAbortEn>:
   2c9da:	0001                                        ..

0002c9dc <OSDbg_FlagGrpSize>:
   2c9dc:	0028                                        (.

0002c9de <OSDbg_FlagWidth>:
   2c9de:	0004                                        ..

0002c9e0 <OSDbg_IntQ>:
   2c9e0:	0020                                         .

0002c9e2 <OSDbg_ISRPostDeferredEn>:
   2c9e2:	0001                                        ..

0002c9e4 <OSDbg_Mem>:
	...

0002ca04 <OSDbg_MemEn>:
   2ca04:	0001                                        ..

0002ca06 <OSDbg_MemSize>:
   2ca06:	0020                                         .

0002ca08 <OSDbg_MsgEn>:
   2ca08:	0001                                        ..

0002ca0a <OSDbg_MsgSize>:
   2ca0a:	0010                                        ..

0002ca0c <OSDbg_MsgPoolSize>:
   2ca0c:	0008                                        ..

0002ca0e <OSDbg_MsgQSize>:
   2ca0e:	0010                                        ..

0002ca10 <OSDbg_Mutex>:
	...

0002ca3c <OSDbg_MutexEn>:
   2ca3c:	0101                                             .

0002ca3d <OSDbg_MutexDelEn>:
   2ca3d:	0101                                             .

0002ca3e <OSDbg_MutexPendAbortEn>:
   2ca3e:	0001                                        ..

0002ca40 <OSDbg_MutexSize>:
   2ca40:	002c                                        ,.

0002ca42 <OSDbg_ObjTypeChkEn>:
   2ca42:	0101                                             .

0002ca43 <OSDbg_PendMultiEn>:
   2ca43:	2001                                             .

0002ca44 <OSDbg_PendDataSize>:
   2ca44:	0020                                         .

0002ca46 <OSDbg_PendListSize>:
   2ca46:	000c                                        ..

0002ca48 <OSDbg_PendObjSize>:
   2ca48:	0020                                         .

0002ca4a <OSDbg_PrioMax>:
   2ca4a:	0040                                        @.

0002ca4c <OSDbg_PrioTblSize>:
   2ca4c:	0008                                        ..

0002ca4e <OSDbg_PtrSize>:
   2ca4e:	0004                                        ..

0002ca50 <OSDbg_Q>:
	...

0002ca80 <OSDbg_QEn>:
   2ca80:	0101                                             .

0002ca81 <OSDbg_QDelEn>:
   2ca81:	0101                                             .

0002ca82 <OSDbg_QFlushEn>:
   2ca82:	0101                                             .

0002ca83 <OSDbg_QPendAbortEn>:
   2ca83:	3001                                             .

0002ca84 <OSDbg_QSize>:
   2ca84:	0030                                        0.

0002ca86 <OSDbg_SchedRoundRobinEn>:
   2ca86:	0001                                        ..

0002ca88 <OSDbg_Sem>:
	...

0002cab0 <OSDbg_SemEn>:
   2cab0:	0101                                             .

0002cab1 <OSDbg_SemDelEn>:
   2cab1:	0101                                             .

0002cab2 <OSDbg_SemPendAbortEn>:
   2cab2:	0101                                             .

0002cab3 <OSDbg_SemSetEn>:
   2cab3:	2801                                             .

0002cab4 <OSDbg_SemSize>:
   2cab4:	0028                                        (.

0002cab6 <OSDbg_RdyList>:
   2cab6:	000c                                        ..

0002cab8 <OSDbg_RdyListSize>:
   2cab8:	0300 0000                                   ....

0002cabc <OSDbg_StkWidth>:
   2cabc:	0104                                             .

0002cabd <OSDbg_StatTaskEn>:
   2cabd:	0101                                             .

0002cabe <OSDbg_StatTaskStkChkEn>:
   2cabe:	0101                                             .

0002cabf <OSDbg_TaskChangePrioEn>:
   2cabf:	0101                                             .

0002cac0 <OSDbg_TaskDelEn>:
   2cac0:	0101                                             .

0002cac1 <OSDbg_TaskQEn>:
   2cac1:	0101                                             .

0002cac2 <OSDbg_TaskQPendAbortEn>:
   2cac2:	0101                                             .

0002cac3 <OSDbg_TaskProfileEn>:
   2cac3:	0101                                             .

0002cac4 <OSDbg_TaskRegTblSize>:
   2cac4:	0001                                        ..

0002cac6 <OSDbg_TaskSemPendAbortEn>:
   2cac6:	0101                                             .

0002cac7 <OSDbg_TaskSuspendEn>:
   2cac7:	d001                                             .

0002cac8 <OSDbg_TCBSize>:
   2cac8:	00d0                                        ..

0002caca <OSDbg_TickSpokeSize>:
   2caca:	0008                                        ..

0002cacc <OSDbg_TimeDlyHMSMEn>:
   2cacc:	0101                                             .

0002cacd <OSDbg_TimeDlyResumeEn>:
   2cacd:	0001 0000                                        ...

0002cad0 <OSDbg_Tmr>:
	...

0002cb04 <OSDbg_TmrEn>:
   2cb04:	0101                                             .

0002cb05 <OSDbg_TmrDelEn>:
   2cb05:	3401                                             .

0002cb06 <OSDbg_TmrSize>:
   2cb06:	0034                                        4.

0002cb08 <OSDbg_TmrSpokeSize>:
   2cb08:	0008                                        ..

0002cb0a <OSDbg_VersionNbr>:
   2cb0a:	0bc4                                        ..

0002cb0c <OSDbg_DataSize>:
   2cb0c:	079c 0000 4375 4f2f 2d53 4949 2049 6449     ....uC/OS-III Id
   2cb1c:	656c 5420 7361 006b 6154 6b73 5120 0000     le Task.Task Q..
   2cb2c:	6154 6b73 5320 6d65 0000 0000 0020 0000     Task Sem.... ...
   2cb3c:	4375 4f2f 2d53 4949 2049 6954 6b63 5420     uC/OS-III Tick T
   2cb4c:	7361 006b 4375 4f2f 2d53 4949 2049 5349     ask.uC/OS-III IS
   2cb5c:	2052 7551 7565 2065 6154 6b73 0000 0000     R Queue Task....

0002cb6c <CSP_TmrAddrTbl>:
   2cb6c:	4000 4000 8000 4000 0000 4009 4000 4009     .@.@...@...@.@.@

0002cb7c <CSP_TmrPerTbl>:
   2cb7c:	0001 0002 0016 0017                         ........

0002cb84 <EMAC_clkdiv>:
   2cb84:	0604 0a08 140e 001c                         ........

0002cb8c <abDescriptors>:
   2cb8c:	0112 0200 00ff 4000 fefe 0001 0100 0201     .......@........
   2cb9c:	0103 0209 0020 0101 8000 0932 0004 0200     .... .....2.....
   2cbac:	00ff 0000 0507 0205 0168 0700 8205 6802     ........h......h
   2cbbc:	0001 0304 0409 030a 0046 0048 0054 0057     ........F.H.T.W.
   2cbcc:	0314 0043 004e 0043 0020 0075 0043 004f     ..C.N.C. .u.C.O.
   2cbdc:	0053 0033 0314 0030 0030 0030 0030 003a     S.3...0.0.0.0.:.
   2cbec:	0030 0030 003a 0031 0000 0000               0.0.:.1.....

0002cbf8 <_global_impure_ptr>:
   2cbf8:	000c 1000 0043 0000                         ....C...

0002cc00 <__cs3_regions>:
   2cc00:	00000000 	.word	0x00000000
   2cc04:	0002cc20 	.word	0x0002cc20
   2cc08:	10000000 	.word	0x10000000
   2cc0c:	00000510 	.word	0x00000510
   2cc10:	000056c8 	.word	0x000056c8
